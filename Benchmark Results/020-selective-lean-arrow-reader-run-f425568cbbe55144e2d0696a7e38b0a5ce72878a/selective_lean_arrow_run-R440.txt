# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 0.00% complete, ETA 02:40:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_291147079 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_291147079() {
        this(4);
    }
    public KeyValueMap_291147079(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_291147079 aggregation_state_map = new KeyValueMap_291147079();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

393.297 ±(99.9%) 18.618 ms/op
# Warmup Iteration   2: 398.136 ±(99.9%) 2.955 ms/op
# Warmup Iteration   3: 408.924 ±(99.9%) 36.449 ms/op
# Warmup Iteration   4: 396.926 ±(99.9%) 2.086 ms/op
# Warmup Iteration   5: 398.378 ±(99.9%) 2.441 ms/op
Iteration   1: 395.979 ±(99.9%) 0.948 ms/op
                 executeQuery·p0.00:   392.692 ms/op
                 executeQuery·p0.50:   396.100 ms/op
                 executeQuery·p0.90:   397.568 ms/op
                 executeQuery·p0.95:   398.616 ms/op
                 executeQuery·p0.99:   398.983 ms/op
                 executeQuery·p0.999:  398.983 ms/op
                 executeQuery·p0.9999: 398.983 ms/op
                 executeQuery·p1.00:   398.983 ms/op

Iteration   2: 397.209 ±(99.9%) 1.723 ms/op
                 executeQuery·p0.00:   395.313 ms/op
                 executeQuery·p0.50:   396.886 ms/op
                 executeQuery·p0.90:   400.241 ms/op
                 executeQuery·p0.95:   404.881 ms/op
                 executeQuery·p0.99:   405.799 ms/op
                 executeQuery·p0.999:  405.799 ms/op
                 executeQuery·p0.9999: 405.799 ms/op
                 executeQuery·p1.00:   405.799 ms/op

Iteration   3: 396.241 ±(99.9%) 1.686 ms/op
                 executeQuery·p0.00:   391.119 ms/op
                 executeQuery·p0.50:   396.886 ms/op
                 executeQuery·p0.90:   398.092 ms/op
                 executeQuery·p0.95:   401.185 ms/op
                 executeQuery·p0.99:   402.653 ms/op
                 executeQuery·p0.999:  402.653 ms/op
                 executeQuery·p0.9999: 402.653 ms/op
                 executeQuery·p1.00:   402.653 ms/op

Iteration   4: 394.446 ±(99.9%) 1.842 ms/op
                 executeQuery·p0.00:   390.595 ms/op
                 executeQuery·p0.50:   395.575 ms/op
                 executeQuery·p0.90:   397.410 ms/op
                 executeQuery·p0.95:   398.433 ms/op
                 executeQuery·p0.99:   398.983 ms/op
                 executeQuery·p0.999:  398.983 ms/op
                 executeQuery·p0.9999: 398.983 ms/op
                 executeQuery·p1.00:   398.983 ms/op

Iteration   5: 395.535 ±(99.9%) 1.787 ms/op
                 executeQuery·p0.00:   391.119 ms/op
                 executeQuery·p0.50:   395.575 ms/op
                 executeQuery·p0.90:   397.935 ms/op
                 executeQuery·p0.95:   402.024 ms/op
                 executeQuery·p0.99:   404.226 ms/op
                 executeQuery·p0.999:  404.226 ms/op
                 executeQuery·p0.9999: 404.226 ms/op
                 executeQuery·p1.00:   404.226 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 130
  mean =    395.882 ±(99.9%) 0.702 ms/op

  Histogram, ms/op:
    [390.000, 391.250) = 6 
    [391.250, 392.500) = 6 
    [392.500, 393.750) = 11 
    [393.750, 395.000) = 8 
    [395.000, 396.250) = 33 
    [396.250, 397.500) = 52 
    [397.500, 398.750) = 7 
    [398.750, 400.000) = 3 
    [400.000, 401.250) = 0 
    [401.250, 402.500) = 0 
    [402.500, 403.750) = 2 
    [403.750, 405.000) = 1 
    [405.000, 406.250) = 1 
    [406.250, 407.500) = 0 
    [407.500, 408.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    390.595 ms/op
     p(50.0000) =    396.362 ms/op
     p(90.0000) =    397.935 ms/op
     p(95.0000) =    398.983 ms/op
     p(99.0000) =    405.311 ms/op
     p(99.9000) =    405.799 ms/op
     p(99.9900) =    405.799 ms/op
     p(99.9990) =    405.799 ms/op
     p(99.9999) =    405.799 ms/op
    p(100.0000) =    405.799 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 1.04% complete, ETA 02:46:57
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_291147079 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_291147079() {
        this(4);
    }
    public KeyValueMap_291147079(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_291147079 aggregation_state_map = new KeyValueMap_291147079();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

565.503 ±(99.9%) 81.120 ms/op
# Warmup Iteration   2: 539.023 ±(99.9%) 2.461 ms/op
# Warmup Iteration   3: 557.493 ±(99.9%) 66.914 ms/op
# Warmup Iteration   4: 539.961 ±(99.9%) 0.665 ms/op
# Warmup Iteration   5: 539.161 ±(99.9%) 2.349 ms/op
Iteration   1: 538.637 ±(99.9%) 0.774 ms/op
                 executeQuery·p0.00:   536.871 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   540.017 ms/op
                 executeQuery·p0.95:   540.017 ms/op
                 executeQuery·p0.99:   540.017 ms/op
                 executeQuery·p0.999:  540.017 ms/op
                 executeQuery·p0.9999: 540.017 ms/op
                 executeQuery·p1.00:   540.017 ms/op

Iteration   2: 538.251 ±(99.9%) 1.780 ms/op
                 executeQuery·p0.00:   536.871 ms/op
                 executeQuery·p0.50:   537.919 ms/op
                 executeQuery·p0.90:   540.017 ms/op
                 executeQuery·p0.95:   545.260 ms/op
                 executeQuery·p0.99:   545.260 ms/op
                 executeQuery·p0.999:  545.260 ms/op
                 executeQuery·p0.9999: 545.260 ms/op
                 executeQuery·p1.00:   545.260 ms/op

Iteration   3: 538.830 ±(99.9%) 3.191 ms/op
                 executeQuery·p0.00:   535.822 ms/op
                 executeQuery·p0.50:   537.919 ms/op
                 executeQuery·p0.90:   545.260 ms/op
                 executeQuery·p0.95:   550.502 ms/op
                 executeQuery·p0.99:   550.502 ms/op
                 executeQuery·p0.999:  550.502 ms/op
                 executeQuery·p0.9999: 550.502 ms/op
                 executeQuery·p1.00:   550.502 ms/op

Iteration   4: 538.802 ±(99.9%) 0.957 ms/op
                 executeQuery·p0.00:   536.871 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   541.065 ms/op
                 executeQuery·p0.95:   541.065 ms/op
                 executeQuery·p0.99:   541.065 ms/op
                 executeQuery·p0.999:  541.065 ms/op
                 executeQuery·p0.9999: 541.065 ms/op
                 executeQuery·p1.00:   541.065 ms/op

Iteration   5: 536.843 ±(99.9%) 2.931 ms/op
                 executeQuery·p0.00:   534.249 ms/op
                 executeQuery·p0.50:   535.822 ms/op
                 executeQuery·p0.90:   543.162 ms/op
                 executeQuery·p0.95:   546.308 ms/op
                 executeQuery·p0.99:   546.308 ms/op
                 executeQuery·p0.999:  546.308 ms/op
                 executeQuery·p0.9999: 546.308 ms/op
                 executeQuery·p1.00:   546.308 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 95
  mean =    538.273 ±(99.9%) 0.861 ms/op

  Histogram, ms/op:
    [530.000, 532.500) = 0 
    [532.500, 535.000) = 8 
    [535.000, 537.500) = 19 
    [537.500, 540.000) = 54 
    [540.000, 542.500) = 9 
    [542.500, 545.000) = 1 
    [545.000, 547.500) = 3 
    [547.500, 550.000) = 0 
    [550.000, 552.500) = 1 
    [552.500, 555.000) = 0 
    [555.000, 557.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    534.249 ms/op
     p(50.0000) =    537.919 ms/op
     p(90.0000) =    540.017 ms/op
     p(95.0000) =    543.582 ms/op
     p(99.0000) =    550.502 ms/op
     p(99.9000) =    550.502 ms/op
     p(99.9900) =    550.502 ms/op
     p(99.9990) =    550.502 ms/op
     p(99.9999) =    550.502 ms/op
    p(100.0000) =    550.502 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 2.08% complete, ETA 02:44:25
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_291147079 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_291147079() {
        this(4);
    }
    public KeyValueMap_291147079(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_291147079 aggregation_state_map = new KeyValueMap_291147079();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

740.370 ±(99.9%) 48.932 ms/op
# Warmup Iteration   2: 724.716 ±(99.9%) 6.493 ms/op
# Warmup Iteration   3: 725.390 ±(99.9%) 7.682 ms/op
# Warmup Iteration   4: 729.584 ±(99.9%) 12.494 ms/op
# Warmup Iteration   5: 726.663 ±(99.9%) 5.509 ms/op
Iteration   1: 721.870 ±(99.9%) 5.733 ms/op
                 executeQuery·p0.00:   715.129 ms/op
                 executeQuery·p0.50:   724.566 ms/op
                 executeQuery·p0.90:   727.712 ms/op
                 executeQuery·p0.95:   727.712 ms/op
                 executeQuery·p0.99:   727.712 ms/op
                 executeQuery·p0.999:  727.712 ms/op
                 executeQuery·p0.9999: 727.712 ms/op
                 executeQuery·p1.00:   727.712 ms/op

Iteration   2: 726.438 ±(99.9%) 13.432 ms/op
                 executeQuery·p0.00:   716.177 ms/op
                 executeQuery·p0.50:   725.615 ms/op
                 executeQuery·p0.90:   748.683 ms/op
                 executeQuery·p0.95:   758.120 ms/op
                 executeQuery·p0.99:   758.120 ms/op
                 executeQuery·p0.999:  758.120 ms/op
                 executeQuery·p0.9999: 758.120 ms/op
                 executeQuery·p1.00:   758.120 ms/op

Iteration   3: 725.764 ±(99.9%) 10.659 ms/op
                 executeQuery·p0.00:   708.837 ms/op
                 executeQuery·p0.50:   726.663 ms/op
                 executeQuery·p0.90:   739.770 ms/op
                 executeQuery·p0.95:   740.295 ms/op
                 executeQuery·p0.99:   740.295 ms/op
                 executeQuery·p0.999:  740.295 ms/op
                 executeQuery·p0.9999: 740.295 ms/op
                 executeQuery·p1.00:   740.295 ms/op

Iteration   4: 727.187 ±(99.9%) 10.341 ms/op
                 executeQuery·p0.00:   715.129 ms/op
                 executeQuery·p0.50:   726.663 ms/op
                 executeQuery·p0.90:   740.819 ms/op
                 executeQuery·p0.95:   741.343 ms/op
                 executeQuery·p0.99:   741.343 ms/op
                 executeQuery·p0.999:  741.343 ms/op
                 executeQuery·p0.9999: 741.343 ms/op
                 executeQuery·p1.00:   741.343 ms/op

Iteration   5: 728.236 ±(99.9%) 10.393 ms/op
                 executeQuery·p0.00:   710.935 ms/op
                 executeQuery·p0.50:   726.663 ms/op
                 executeQuery·p0.90:   739.770 ms/op
                 executeQuery·p0.95:   740.295 ms/op
                 executeQuery·p0.99:   740.295 ms/op
                 executeQuery·p0.999:  740.295 ms/op
                 executeQuery·p0.9999: 740.295 ms/op
                 executeQuery·p1.00:   740.295 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 70
  mean =    725.899 ±(99.9%) 3.788 ms/op

  Histogram, ms/op:
    [700.000, 705.000) = 0 
    [705.000, 710.000) = 1 
    [710.000, 715.000) = 3 
    [715.000, 720.000) = 18 
    [720.000, 725.000) = 1 
    [725.000, 730.000) = 33 
    [730.000, 735.000) = 0 
    [735.000, 740.000) = 9 
    [740.000, 745.000) = 4 
    [745.000, 750.000) = 0 
    [750.000, 755.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    708.837 ms/op
     p(50.0000) =    725.615 ms/op
     p(90.0000) =    739.246 ms/op
     p(95.0000) =    740.295 ms/op
     p(99.0000) =    758.120 ms/op
     p(99.9000) =    758.120 ms/op
     p(99.9900) =    758.120 ms/op
     p(99.9990) =    758.120 ms/op
     p(99.9999) =    758.120 ms/op
    p(100.0000) =    758.120 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 3.13% complete, ETA 02:42:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_2022787723 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_2022787723() {
        this(4);
    }
    public KeyValueMap_2022787723(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_2022787723 aggregation_state_map = new KeyValueMap_2022787723();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2977.956 ms/op
# Warmup Iteration   2: 2264.924 ms/op
# Warmup Iteration   3: 2197.815 ms/op
# Warmup Iteration   4: 2151.678 ms/op
# Warmup Iteration   5: 2036.335 ms/op
Iteration   1: 1998.586 ms/op
                 executeQuery·p0.00:   1998.586 ms/op
                 executeQuery·p0.50:   1998.586 ms/op
                 executeQuery·p0.90:   1998.586 ms/op
                 executeQuery·p0.95:   1998.586 ms/op
                 executeQuery·p0.99:   1998.586 ms/op
                 executeQuery·p0.999:  1998.586 ms/op
                 executeQuery·p0.9999: 1998.586 ms/op
                 executeQuery·p1.00:   1998.586 ms/op

Iteration   2: 2067.792 ms/op
                 executeQuery·p0.00:   2067.792 ms/op
                 executeQuery·p0.50:   2067.792 ms/op
                 executeQuery·p0.90:   2067.792 ms/op
                 executeQuery·p0.95:   2067.792 ms/op
                 executeQuery·p0.99:   2067.792 ms/op
                 executeQuery·p0.999:  2067.792 ms/op
                 executeQuery·p0.9999: 2067.792 ms/op
                 executeQuery·p1.00:   2067.792 ms/op

Iteration   3: 2032.140 ms/op
                 executeQuery·p0.00:   2032.140 ms/op
                 executeQuery·p0.50:   2032.140 ms/op
                 executeQuery·p0.90:   2032.140 ms/op
                 executeQuery·p0.95:   2032.140 ms/op
                 executeQuery·p0.99:   2032.140 ms/op
                 executeQuery·p0.999:  2032.140 ms/op
                 executeQuery·p0.9999: 2032.140 ms/op
                 executeQuery·p1.00:   2032.140 ms/op

Iteration   4: 2038.432 ms/op
                 executeQuery·p0.00:   2038.432 ms/op
                 executeQuery·p0.50:   2038.432 ms/op
                 executeQuery·p0.90:   2038.432 ms/op
                 executeQuery·p0.95:   2038.432 ms/op
                 executeQuery·p0.99:   2038.432 ms/op
                 executeQuery·p0.999:  2038.432 ms/op
                 executeQuery·p0.9999: 2038.432 ms/op
                 executeQuery·p1.00:   2038.432 ms/op

Iteration   5: 2055.209 ms/op
                 executeQuery·p0.00:   2055.209 ms/op
                 executeQuery·p0.50:   2055.209 ms/op
                 executeQuery·p0.90:   2055.209 ms/op
                 executeQuery·p0.95:   2055.209 ms/op
                 executeQuery·p0.99:   2055.209 ms/op
                 executeQuery·p0.999:  2055.209 ms/op
                 executeQuery·p0.9999: 2055.209 ms/op
                 executeQuery·p1.00:   2055.209 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =   2038.432 ±(99.9%) 101.345 ms/op

  Histogram, ms/op:
    [1990.000, 1995.000) = 0 
    [1995.000, 2000.000) = 1 
    [2000.000, 2005.000) = 0 
    [2005.000, 2010.000) = 0 
    [2010.000, 2015.000) = 0 
    [2015.000, 2020.000) = 0 
    [2020.000, 2025.000) = 0 
    [2025.000, 2030.000) = 0 
    [2030.000, 2035.000) = 1 
    [2035.000, 2040.000) = 1 
    [2040.000, 2045.000) = 0 
    [2045.000, 2050.000) = 0 
    [2050.000, 2055.000) = 0 
    [2055.000, 2060.000) = 1 
    [2060.000, 2065.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1998.586 ms/op
     p(50.0000) =   2038.432 ms/op
     p(90.0000) =   2067.792 ms/op
     p(95.0000) =   2067.792 ms/op
     p(99.0000) =   2067.792 ms/op
     p(99.9000) =   2067.792 ms/op
     p(99.9900) =   2067.792 ms/op
     p(99.9990) =   2067.792 ms/op
     p(99.9999) =   2067.792 ms/op
    p(100.0000) =   2067.792 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 4.17% complete, ETA 02:48:02
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_110597114 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_110597114() {
        this(4);
    }
    public KeyValueMap_110597114(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_110597114 aggregation_state_map = new KeyValueMap_110597114();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5410.652 ms/op
# Warmup Iteration   2: 5033.165 ms/op
# Warmup Iteration   3: 5192.548 ms/op
# Warmup Iteration   4: 5167.383 ms/op
# Warmup Iteration   5: 4915.724 ms/op
Iteration   1: 5167.383 ms/op
                 executeQuery·p0.00:   5167.383 ms/op
                 executeQuery·p0.50:   5167.383 ms/op
                 executeQuery·p0.90:   5167.383 ms/op
                 executeQuery·p0.95:   5167.383 ms/op
                 executeQuery·p0.99:   5167.383 ms/op
                 executeQuery·p0.999:  5167.383 ms/op
                 executeQuery·p0.9999: 5167.383 ms/op
                 executeQuery·p1.00:   5167.383 ms/op

Iteration   2: 5217.714 ms/op
                 executeQuery·p0.00:   5217.714 ms/op
                 executeQuery·p0.50:   5217.714 ms/op
                 executeQuery·p0.90:   5217.714 ms/op
                 executeQuery·p0.95:   5217.714 ms/op
                 executeQuery·p0.99:   5217.714 ms/op
                 executeQuery·p0.999:  5217.714 ms/op
                 executeQuery·p0.9999: 5217.714 ms/op
                 executeQuery·p1.00:   5217.714 ms/op

Iteration   3: 4907.336 ms/op
                 executeQuery·p0.00:   4907.336 ms/op
                 executeQuery·p0.50:   4907.336 ms/op
                 executeQuery·p0.90:   4907.336 ms/op
                 executeQuery·p0.95:   4907.336 ms/op
                 executeQuery·p0.99:   4907.336 ms/op
                 executeQuery·p0.999:  4907.336 ms/op
                 executeQuery·p0.9999: 4907.336 ms/op
                 executeQuery·p1.00:   4907.336 ms/op

Iteration   4: 5175.771 ms/op
                 executeQuery·p0.00:   5175.771 ms/op
                 executeQuery·p0.50:   5175.771 ms/op
                 executeQuery·p0.90:   5175.771 ms/op
                 executeQuery·p0.95:   5175.771 ms/op
                 executeQuery·p0.99:   5175.771 ms/op
                 executeQuery·p0.999:  5175.771 ms/op
                 executeQuery·p0.9999: 5175.771 ms/op
                 executeQuery·p1.00:   5175.771 ms/op

Iteration   5: 4966.056 ms/op
                 executeQuery·p0.00:   4966.056 ms/op
                 executeQuery·p0.50:   4966.056 ms/op
                 executeQuery·p0.90:   4966.056 ms/op
                 executeQuery·p0.95:   4966.056 ms/op
                 executeQuery·p0.99:   4966.056 ms/op
                 executeQuery·p0.999:  4966.056 ms/op
                 executeQuery·p0.9999: 4966.056 ms/op
                 executeQuery·p1.00:   4966.056 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =   5086.852 ±(99.9%) 538.865 ms/op

  Histogram, ms/op:
    [4900.000, 4925.000) = 1 
    [4925.000, 4950.000) = 0 
    [4950.000, 4975.000) = 1 
    [4975.000, 5000.000) = 0 
    [5000.000, 5025.000) = 0 
    [5025.000, 5050.000) = 0 
    [5050.000, 5075.000) = 0 
    [5075.000, 5100.000) = 0 
    [5100.000, 5125.000) = 0 
    [5125.000, 5150.000) = 0 
    [5150.000, 5175.000) = 1 
    [5175.000, 5200.000) = 1 
    [5200.000, 5225.000) = 1 
    [5225.000, 5250.000) = 0 
    [5250.000, 5275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4907.336 ms/op
     p(50.0000) =   5167.383 ms/op
     p(90.0000) =   5217.714 ms/op
     p(95.0000) =   5217.714 ms/op
     p(99.0000) =   5217.714 ms/op
     p(99.9000) =   5217.714 ms/op
     p(99.9900) =   5217.714 ms/op
     p(99.9990) =   5217.714 ms/op
     p(99.9999) =   5217.714 ms/op
    p(100.0000) =   5217.714 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 5.21% complete, ETA 04:33:53
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_2022787723 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_2022787723() {
        this(4);
    }
    public KeyValueMap_2022787723(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_2022787723 aggregation_state_map = new KeyValueMap_2022787723();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6150.947 ms/op
# Warmup Iteration   2: 3809.826 ±(99.9%) 2126.551 ms/op
# Warmup Iteration   3: 3951.034 ±(99.9%) 1327.568 ms/op
# Warmup Iteration   4: 3899.305 ±(99.9%) 44.179 ms/op
# Warmup Iteration   5: 3897.907 ±(99.9%) 44.179 ms/op
Iteration   1: 3907.693 ±(99.9%) 159.288 ms/op
                 executeQuery·p0.00:   3900.703 ms/op
                 executeQuery·p0.50:   3904.897 ms/op
                 executeQuery·p0.90:   3917.480 ms/op
                 executeQuery·p0.95:   3917.480 ms/op
                 executeQuery·p0.99:   3917.480 ms/op
                 executeQuery·p0.999:  3917.480 ms/op
                 executeQuery·p0.9999: 3917.480 ms/op
                 executeQuery·p1.00:   3917.480 ms/op

Iteration   2: 3904.897 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   3900.703 ms/op
                 executeQuery·p0.50:   3904.897 ms/op
                 executeQuery·p0.90:   3909.091 ms/op
                 executeQuery·p0.95:   3909.091 ms/op
                 executeQuery·p0.99:   3909.091 ms/op
                 executeQuery·p0.999:  3909.091 ms/op
                 executeQuery·p0.9999: 3909.091 ms/op
                 executeQuery·p1.00:   3909.091 ms/op

Iteration   3: 3904.897 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   3904.897 ms/op
                 executeQuery·p0.50:   3904.897 ms/op
                 executeQuery·p0.90:   3904.897 ms/op
                 executeQuery·p0.95:   3904.897 ms/op
                 executeQuery·p0.99:   3904.897 ms/op
                 executeQuery·p0.999:  3904.897 ms/op
                 executeQuery·p0.9999: 3904.897 ms/op
                 executeQuery·p1.00:   3904.897 ms/op

Iteration   4: 3902.101 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3900.703 ms/op
                 executeQuery·p0.50:   3900.703 ms/op
                 executeQuery·p0.90:   3904.897 ms/op
                 executeQuery·p0.95:   3904.897 ms/op
                 executeQuery·p0.99:   3904.897 ms/op
                 executeQuery·p0.999:  3904.897 ms/op
                 executeQuery·p0.9999: 3904.897 ms/op
                 executeQuery·p1.00:   3904.897 ms/op

Iteration   5: 3906.295 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3904.897 ms/op
                 executeQuery·p0.50:   3904.897 ms/op
                 executeQuery·p0.90:   3909.091 ms/op
                 executeQuery·p0.95:   3909.091 ms/op
                 executeQuery·p0.99:   3909.091 ms/op
                 executeQuery·p0.999:  3909.091 ms/op
                 executeQuery·p0.9999: 3909.091 ms/op
                 executeQuery·p1.00:   3909.091 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   3905.177 ±(99.9%) 4.631 ms/op

  Histogram, ms/op:
    [3900.000, 3901.250) = 4 
    [3901.250, 3902.500) = 0 
    [3902.500, 3903.750) = 0 
    [3903.750, 3905.000) = 8 
    [3905.000, 3906.250) = 0 
    [3906.250, 3907.500) = 0 
    [3907.500, 3908.750) = 0 
    [3908.750, 3910.000) = 2 
    [3910.000, 3911.250) = 0 
    [3911.250, 3912.500) = 0 
    [3912.500, 3913.750) = 0 
    [3913.750, 3915.000) = 0 
    [3915.000, 3916.250) = 0 
    [3916.250, 3917.500) = 1 
    [3917.500, 3918.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3900.703 ms/op
     p(50.0000) =   3904.897 ms/op
     p(90.0000) =   3912.447 ms/op
     p(95.0000) =   3917.480 ms/op
     p(99.0000) =   3917.480 ms/op
     p(99.9000) =   3917.480 ms/op
     p(99.9900) =   3917.480 ms/op
     p(99.9990) =   3917.480 ms/op
     p(99.9999) =   3917.480 ms/op
    p(100.0000) =   3917.480 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 6.25% complete, ETA 04:15:38
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_291147079 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_291147079() {
        this(4);
    }
    public KeyValueMap_291147079(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_291147079 aggregation_state_map = new KeyValueMap_291147079();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6840.910 ms/op
# Warmup Iteration   2: 5175.771 ms/op
# Warmup Iteration   3: 5104.468 ms/op
# Warmup Iteration   4: 5117.051 ms/op
# Warmup Iteration   5: 5108.662 ms/op
Iteration   1: 5108.662 ms/op
                 executeQuery·p0.00:   5108.662 ms/op
                 executeQuery·p0.50:   5108.662 ms/op
                 executeQuery·p0.90:   5108.662 ms/op
                 executeQuery·p0.95:   5108.662 ms/op
                 executeQuery·p0.99:   5108.662 ms/op
                 executeQuery·p0.999:  5108.662 ms/op
                 executeQuery·p0.9999: 5108.662 ms/op
                 executeQuery·p1.00:   5108.662 ms/op

Iteration   2: 5100.274 ms/op
                 executeQuery·p0.00:   5091.885 ms/op
                 executeQuery·p0.50:   5100.274 ms/op
                 executeQuery·p0.90:   5108.662 ms/op
                 executeQuery·p0.95:   5108.662 ms/op
                 executeQuery·p0.99:   5108.662 ms/op
                 executeQuery·p0.999:  5108.662 ms/op
                 executeQuery·p0.9999: 5108.662 ms/op
                 executeQuery·p1.00:   5108.662 ms/op

Iteration   3: 5125.439 ms/op
                 executeQuery·p0.00:   5100.274 ms/op
                 executeQuery·p0.50:   5125.439 ms/op
                 executeQuery·p0.90:   5150.605 ms/op
                 executeQuery·p0.95:   5150.605 ms/op
                 executeQuery·p0.99:   5150.605 ms/op
                 executeQuery·p0.999:  5150.605 ms/op
                 executeQuery·p0.9999: 5150.605 ms/op
                 executeQuery·p1.00:   5150.605 ms/op

Iteration   4: 5108.662 ms/op
                 executeQuery·p0.00:   5108.662 ms/op
                 executeQuery·p0.50:   5108.662 ms/op
                 executeQuery·p0.90:   5108.662 ms/op
                 executeQuery·p0.95:   5108.662 ms/op
                 executeQuery·p0.99:   5108.662 ms/op
                 executeQuery·p0.999:  5108.662 ms/op
                 executeQuery·p0.9999: 5108.662 ms/op
                 executeQuery·p1.00:   5108.662 ms/op

Iteration   5: 5125.439 ms/op
                 executeQuery·p0.00:   5108.662 ms/op
                 executeQuery·p0.50:   5125.439 ms/op
                 executeQuery·p0.90:   5142.217 ms/op
                 executeQuery·p0.95:   5142.217 ms/op
                 executeQuery·p0.99:   5142.217 ms/op
                 executeQuery·p0.999:  5142.217 ms/op
                 executeQuery·p0.9999: 5142.217 ms/op
                 executeQuery·p1.00:   5142.217 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   5113.695 ±(99.9%) 27.527 ms/op

  Histogram, ms/op:
    [5090.000, 5095.000) = 1 
    [5095.000, 5100.000) = 0 
    [5100.000, 5105.000) = 1 
    [5105.000, 5110.000) = 6 
    [5110.000, 5115.000) = 0 
    [5115.000, 5120.000) = 0 
    [5120.000, 5125.000) = 0 
    [5125.000, 5130.000) = 0 
    [5130.000, 5135.000) = 0 
    [5135.000, 5140.000) = 0 
    [5140.000, 5145.000) = 1 
    [5145.000, 5150.000) = 0 
    [5150.000, 5155.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   5091.885 ms/op
     p(50.0000) =   5108.662 ms/op
     p(90.0000) =   5149.766 ms/op
     p(95.0000) =   5150.605 ms/op
     p(99.0000) =   5150.605 ms/op
     p(99.9000) =   5150.605 ms/op
     p(99.9900) =   5150.605 ms/op
     p(99.9990) =   5150.605 ms/op
     p(99.9999) =   5150.605 ms/op
    p(100.0000) =   5150.605 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 7.29% complete, ETA 03:59:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_291147079 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_291147079() {
        this(4);
    }
    public KeyValueMap_291147079(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_291147079 aggregation_state_map = new KeyValueMap_291147079();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7612.662 ms/op
# Warmup Iteration   2: 7168.066 ms/op
# Warmup Iteration   3: 7264.535 ms/op
# Warmup Iteration   4: 7214.203 ms/op
# Warmup Iteration   5: 7251.952 ms/op
Iteration   1: 7226.786 ms/op
                 executeQuery·p0.00:   7205.814 ms/op
                 executeQuery·p0.50:   7226.786 ms/op
                 executeQuery·p0.90:   7247.757 ms/op
                 executeQuery·p0.95:   7247.757 ms/op
                 executeQuery·p0.99:   7247.757 ms/op
                 executeQuery·p0.999:  7247.757 ms/op
                 executeQuery·p0.9999: 7247.757 ms/op
                 executeQuery·p1.00:   7247.757 ms/op

Iteration   2: 7344.226 ms/op
                 executeQuery·p0.00:   7289.700 ms/op
                 executeQuery·p0.50:   7344.226 ms/op
                 executeQuery·p0.90:   7398.752 ms/op
                 executeQuery·p0.95:   7398.752 ms/op
                 executeQuery·p0.99:   7398.752 ms/op
                 executeQuery·p0.999:  7398.752 ms/op
                 executeQuery·p0.9999: 7398.752 ms/op
                 executeQuery·p1.00:   7398.752 ms/op

Iteration   3: 7251.952 ms/op
                 executeQuery·p0.00:   7214.203 ms/op
                 executeQuery·p0.50:   7251.952 ms/op
                 executeQuery·p0.90:   7289.700 ms/op
                 executeQuery·p0.95:   7289.700 ms/op
                 executeQuery·p0.99:   7289.700 ms/op
                 executeQuery·p0.999:  7289.700 ms/op
                 executeQuery·p0.9999: 7289.700 ms/op
                 executeQuery·p1.00:   7289.700 ms/op

Iteration   4: 7293.895 ms/op
                 executeQuery·p0.00:   7281.312 ms/op
                 executeQuery·p0.50:   7293.895 ms/op
                 executeQuery·p0.90:   7306.478 ms/op
                 executeQuery·p0.95:   7306.478 ms/op
                 executeQuery·p0.99:   7306.478 ms/op
                 executeQuery·p0.999:  7306.478 ms/op
                 executeQuery·p0.9999: 7306.478 ms/op
                 executeQuery·p1.00:   7306.478 ms/op

Iteration   5: 7356.809 ms/op
                 executeQuery·p0.00:   7306.478 ms/op
                 executeQuery·p0.50:   7356.809 ms/op
                 executeQuery·p0.90:   7407.141 ms/op
                 executeQuery·p0.95:   7407.141 ms/op
                 executeQuery·p0.99:   7407.141 ms/op
                 executeQuery·p0.999:  7407.141 ms/op
                 executeQuery·p0.9999: 7407.141 ms/op
                 executeQuery·p1.00:   7407.141 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   7294.734 ±(99.9%) 101.494 ms/op

  Histogram, ms/op:
    [7200.000, 7225.000) = 2 
    [7225.000, 7250.000) = 1 
    [7250.000, 7275.000) = 0 
    [7275.000, 7300.000) = 3 
    [7300.000, 7325.000) = 2 
    [7325.000, 7350.000) = 0 
    [7350.000, 7375.000) = 0 
    [7375.000, 7400.000) = 1 
    [7400.000, 7425.000) = 1 
    [7425.000, 7450.000) = 0 
    [7450.000, 7475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7205.814 ms/op
     p(50.0000) =   7289.700 ms/op
     p(90.0000) =   7406.302 ms/op
     p(95.0000) =   7407.141 ms/op
     p(99.0000) =   7407.141 ms/op
     p(99.9000) =   7407.141 ms/op
     p(99.9900) =   7407.141 ms/op
     p(99.9990) =   7407.141 ms/op
     p(99.9999) =   7407.141 ms/op
    p(100.0000) =   7407.141 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 8.33% complete, ETA 03:54:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_707608351 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_707608351() {
        this(4);
    }
    public KeyValueMap_707608351(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_707608351 aggregation_state_map = new KeyValueMap_707608351();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

25669.140 ms/op
# Warmup Iteration   2: 20434.649 ms/op
# Warmup Iteration   3: 20669.530 ms/op
# Warmup Iteration   4: 20501.758 ms/op
# Warmup Iteration   5: 20770.193 ms/op
Iteration   1: 23823.647 ms/op
                 executeQuery·p0.00:   23823.647 ms/op
                 executeQuery·p0.50:   23823.647 ms/op
                 executeQuery·p0.90:   23823.647 ms/op
                 executeQuery·p0.95:   23823.647 ms/op
                 executeQuery·p0.99:   23823.647 ms/op
                 executeQuery·p0.999:  23823.647 ms/op
                 executeQuery·p0.9999: 23823.647 ms/op
                 executeQuery·p1.00:   23823.647 ms/op

Iteration   2: 21743.272 ms/op
                 executeQuery·p0.00:   21743.272 ms/op
                 executeQuery·p0.50:   21743.272 ms/op
                 executeQuery·p0.90:   21743.272 ms/op
                 executeQuery·p0.95:   21743.272 ms/op
                 executeQuery·p0.99:   21743.272 ms/op
                 executeQuery·p0.999:  21743.272 ms/op
                 executeQuery·p0.9999: 21743.272 ms/op
                 executeQuery·p1.00:   21743.272 ms/op

Iteration   3: 21005.074 ms/op
                 executeQuery·p0.00:   21005.074 ms/op
                 executeQuery·p0.50:   21005.074 ms/op
                 executeQuery·p0.90:   21005.074 ms/op
                 executeQuery·p0.95:   21005.074 ms/op
                 executeQuery·p0.99:   21005.074 ms/op
                 executeQuery·p0.999:  21005.074 ms/op
                 executeQuery·p0.9999: 21005.074 ms/op
                 executeQuery·p1.00:   21005.074 ms/op

Iteration   4: 20971.520 ms/op
                 executeQuery·p0.00:   20971.520 ms/op
                 executeQuery·p0.50:   20971.520 ms/op
                 executeQuery·p0.90:   20971.520 ms/op
                 executeQuery·p0.95:   20971.520 ms/op
                 executeQuery·p0.99:   20971.520 ms/op
                 executeQuery·p0.999:  20971.520 ms/op
                 executeQuery·p0.9999: 20971.520 ms/op
                 executeQuery·p1.00:   20971.520 ms/op

Iteration   5: 20602.421 ms/op
                 executeQuery·p0.00:   20602.421 ms/op
                 executeQuery·p0.50:   20602.421 ms/op
                 executeQuery·p0.90:   20602.421 ms/op
                 executeQuery·p0.95:   20602.421 ms/op
                 executeQuery·p0.99:   20602.421 ms/op
                 executeQuery·p0.999:  20602.421 ms/op
                 executeQuery·p0.9999: 20602.421 ms/op
                 executeQuery·p1.00:   20602.421 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  21629.187 ±(99.9%) 4985.416 ms/op

  Histogram, ms/op:
    [20000.000, 20250.000) = 0 
    [20250.000, 20500.000) = 0 
    [20500.000, 20750.000) = 1 
    [20750.000, 21000.000) = 1 
    [21000.000, 21250.000) = 1 
    [21250.000, 21500.000) = 0 
    [21500.000, 21750.000) = 1 
    [21750.000, 22000.000) = 0 
    [22000.000, 22250.000) = 0 
    [22250.000, 22500.000) = 0 
    [22500.000, 22750.000) = 0 
    [22750.000, 23000.000) = 0 
    [23000.000, 23250.000) = 0 
    [23250.000, 23500.000) = 0 
    [23500.000, 23750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  20602.421 ms/op
     p(50.0000) =  21005.074 ms/op
     p(90.0000) =  23823.647 ms/op
     p(95.0000) =  23823.647 ms/op
     p(99.0000) =  23823.647 ms/op
     p(99.9000) =  23823.647 ms/op
     p(99.9900) =  23823.647 ms/op
     p(99.9990) =  23823.647 ms/op
     p(99.9999) =  23823.647 ms/op
    p(100.0000) =  23823.647 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 9.38% complete, ETA 04:17:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_291147079 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_291147079() {
        this(4);
    }
    public KeyValueMap_291147079(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_291147079 aggregation_state_map = new KeyValueMap_291147079();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

55431.922 ms/op
# Warmup Iteration   2: 49996.104 ms/op
# Warmup Iteration   3: 51405.390 ms/op
# Warmup Iteration   4: 50935.628 ms/op
# Warmup Iteration   5: 48788.144 ms/op
Iteration   1: 51002.737 ms/op
                 executeQuery·p0.00:   51002.737 ms/op
                 executeQuery·p0.50:   51002.737 ms/op
                 executeQuery·p0.90:   51002.737 ms/op
                 executeQuery·p0.95:   51002.737 ms/op
                 executeQuery·p0.99:   51002.737 ms/op
                 executeQuery·p0.999:  51002.737 ms/op
                 executeQuery·p0.9999: 51002.737 ms/op
                 executeQuery·p1.00:   51002.737 ms/op

Iteration   2: 48989.471 ms/op
                 executeQuery·p0.00:   48989.471 ms/op
                 executeQuery·p0.50:   48989.471 ms/op
                 executeQuery·p0.90:   48989.471 ms/op
                 executeQuery·p0.95:   48989.471 ms/op
                 executeQuery·p0.99:   48989.471 ms/op
                 executeQuery·p0.999:  48989.471 ms/op
                 executeQuery·p0.9999: 48989.471 ms/op
                 executeQuery·p1.00:   48989.471 ms/op

Iteration   3: 52344.914 ms/op
                 executeQuery·p0.00:   52344.914 ms/op
                 executeQuery·p0.50:   52344.914 ms/op
                 executeQuery·p0.90:   52344.914 ms/op
                 executeQuery·p0.95:   52344.914 ms/op
                 executeQuery·p0.99:   52344.914 ms/op
                 executeQuery·p0.999:  52344.914 ms/op
                 executeQuery·p0.9999: 52344.914 ms/op
                 executeQuery·p1.00:   52344.914 ms/op

Iteration   4: 49593.450 ms/op
                 executeQuery·p0.00:   49593.450 ms/op
                 executeQuery·p0.50:   49593.450 ms/op
                 executeQuery·p0.90:   49593.450 ms/op
                 executeQuery·p0.95:   49593.450 ms/op
                 executeQuery·p0.99:   49593.450 ms/op
                 executeQuery·p0.999:  49593.450 ms/op
                 executeQuery·p0.9999: 49593.450 ms/op
                 executeQuery·p1.00:   49593.450 ms/op

Iteration   5: 48251.273 ms/op
                 executeQuery·p0.00:   48251.273 ms/op
                 executeQuery·p0.50:   48251.273 ms/op
                 executeQuery·p0.90:   48251.273 ms/op
                 executeQuery·p0.95:   48251.273 ms/op
                 executeQuery·p0.99:   48251.273 ms/op
                 executeQuery·p0.999:  48251.273 ms/op
                 executeQuery·p0.9999: 48251.273 ms/op
                 executeQuery·p1.00:   48251.273 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  50036.369 ±(99.9%) 6310.237 ms/op

  Histogram, ms/op:
    [48000.000, 48500.000) = 1 
    [48500.000, 49000.000) = 1 
    [49000.000, 49500.000) = 0 
    [49500.000, 50000.000) = 1 
    [50000.000, 50500.000) = 0 
    [50500.000, 51000.000) = 0 
    [51000.000, 51500.000) = 1 
    [51500.000, 52000.000) = 0 
    [52000.000, 52500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  48251.273 ms/op
     p(50.0000) =  49593.450 ms/op
     p(90.0000) =  52344.914 ms/op
     p(95.0000) =  52344.914 ms/op
     p(99.0000) =  52344.914 ms/op
     p(99.9000) =  52344.914 ms/op
     p(99.9900) =  52344.914 ms/op
     p(99.9990) =  52344.914 ms/op
     p(99.9999) =  52344.914 ms/op
    p(100.0000) =  52344.914 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 10.42% complete, ETA 06:00:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_291147079 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_291147079() {
        this(4);
    }
    public KeyValueMap_291147079(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_291147079 aggregation_state_map = new KeyValueMap_291147079();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16693.330 ms/op
# Warmup Iteration   2: 7730.102 ms/op
# Warmup Iteration   3: 7532.970 ms/op
# Warmup Iteration   4: 7302.283 ms/op
# Warmup Iteration   5: 7319.060 ms/op
Iteration   1: 7306.478 ms/op
                 executeQuery·p0.00:   7289.700 ms/op
                 executeQuery·p0.50:   7306.478 ms/op
                 executeQuery·p0.90:   7323.255 ms/op
                 executeQuery·p0.95:   7323.255 ms/op
                 executeQuery·p0.99:   7323.255 ms/op
                 executeQuery·p0.999:  7323.255 ms/op
                 executeQuery·p0.9999: 7323.255 ms/op
                 executeQuery·p1.00:   7323.255 ms/op

Iteration   2: 7348.421 ms/op
                 executeQuery·p0.00:   7281.312 ms/op
                 executeQuery·p0.50:   7348.421 ms/op
                 executeQuery·p0.90:   7415.529 ms/op
                 executeQuery·p0.95:   7415.529 ms/op
                 executeQuery·p0.99:   7415.529 ms/op
                 executeQuery·p0.999:  7415.529 ms/op
                 executeQuery·p0.9999: 7415.529 ms/op
                 executeQuery·p1.00:   7415.529 ms/op

Iteration   3: 7335.838 ms/op
                 executeQuery·p0.00:   7323.255 ms/op
                 executeQuery·p0.50:   7335.838 ms/op
                 executeQuery·p0.90:   7348.421 ms/op
                 executeQuery·p0.95:   7348.421 ms/op
                 executeQuery·p0.99:   7348.421 ms/op
                 executeQuery·p0.999:  7348.421 ms/op
                 executeQuery·p0.9999: 7348.421 ms/op
                 executeQuery·p1.00:   7348.421 ms/op

Iteration   4: 7314.866 ms/op
                 executeQuery·p0.00:   7306.478 ms/op
                 executeQuery·p0.50:   7314.866 ms/op
                 executeQuery·p0.90:   7323.255 ms/op
                 executeQuery·p0.95:   7323.255 ms/op
                 executeQuery·p0.99:   7323.255 ms/op
                 executeQuery·p0.999:  7323.255 ms/op
                 executeQuery·p0.9999: 7323.255 ms/op
                 executeQuery·p1.00:   7323.255 ms/op

Iteration   5: 7327.449 ms/op
                 executeQuery·p0.00:   7323.255 ms/op
                 executeQuery·p0.50:   7327.449 ms/op
                 executeQuery·p0.90:   7331.643 ms/op
                 executeQuery·p0.95:   7331.643 ms/op
                 executeQuery·p0.99:   7331.643 ms/op
                 executeQuery·p0.999:  7331.643 ms/op
                 executeQuery·p0.9999: 7331.643 ms/op
                 executeQuery·p1.00:   7331.643 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   7326.610 ±(99.9%) 55.828 ms/op

  Histogram, ms/op:
    [7200.000, 7225.000) = 0 
    [7225.000, 7250.000) = 0 
    [7250.000, 7275.000) = 0 
    [7275.000, 7300.000) = 2 
    [7300.000, 7325.000) = 5 
    [7325.000, 7350.000) = 2 
    [7350.000, 7375.000) = 0 
    [7375.000, 7400.000) = 0 
    [7400.000, 7425.000) = 1 
    [7425.000, 7450.000) = 0 
    [7450.000, 7475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7281.312 ms/op
     p(50.0000) =   7323.255 ms/op
     p(90.0000) =   7408.819 ms/op
     p(95.0000) =   7415.529 ms/op
     p(99.0000) =   7415.529 ms/op
     p(99.9000) =   7415.529 ms/op
     p(99.9900) =   7415.529 ms/op
     p(99.9990) =   7415.529 ms/op
     p(99.9999) =   7415.529 ms/op
    p(100.0000) =   7415.529 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 11.46% complete, ETA 05:43:31
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_291147079 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_291147079() {
        this(4);
    }
    public KeyValueMap_291147079(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_291147079 aggregation_state_map = new KeyValueMap_291147079();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16374.563 ms/op
# Warmup Iteration   2: 13522.436 ms/op
# Warmup Iteration   3: 11978.932 ms/op
# Warmup Iteration   4: 13136.560 ms/op
# Warmup Iteration   5: 13086.228 ms/op
Iteration   1: 12801.016 ms/op
                 executeQuery·p0.00:   12801.016 ms/op
                 executeQuery·p0.50:   12801.016 ms/op
                 executeQuery·p0.90:   12801.016 ms/op
                 executeQuery·p0.95:   12801.016 ms/op
                 executeQuery·p0.99:   12801.016 ms/op
                 executeQuery·p0.999:  12801.016 ms/op
                 executeQuery·p0.9999: 12801.016 ms/op
                 executeQuery·p1.00:   12801.016 ms/op

Iteration   2: 12801.016 ms/op
                 executeQuery·p0.00:   12801.016 ms/op
                 executeQuery·p0.50:   12801.016 ms/op
                 executeQuery·p0.90:   12801.016 ms/op
                 executeQuery·p0.95:   12801.016 ms/op
                 executeQuery·p0.99:   12801.016 ms/op
                 executeQuery·p0.999:  12801.016 ms/op
                 executeQuery·p0.9999: 12801.016 ms/op
                 executeQuery·p1.00:   12801.016 ms/op

Iteration   3: 13002.342 ms/op
                 executeQuery·p0.00:   13002.342 ms/op
                 executeQuery·p0.50:   13002.342 ms/op
                 executeQuery·p0.90:   13002.342 ms/op
                 executeQuery·p0.95:   13002.342 ms/op
                 executeQuery·p0.99:   13002.342 ms/op
                 executeQuery·p0.999:  13002.342 ms/op
                 executeQuery·p0.9999: 13002.342 ms/op
                 executeQuery·p1.00:   13002.342 ms/op

Iteration   4: 12918.456 ms/op
                 executeQuery·p0.00:   12918.456 ms/op
                 executeQuery·p0.50:   12918.456 ms/op
                 executeQuery·p0.90:   12918.456 ms/op
                 executeQuery·p0.95:   12918.456 ms/op
                 executeQuery·p0.99:   12918.456 ms/op
                 executeQuery·p0.999:  12918.456 ms/op
                 executeQuery·p0.9999: 12918.456 ms/op
                 executeQuery·p1.00:   12918.456 ms/op

Iteration   5: 12801.016 ms/op
                 executeQuery·p0.00:   12801.016 ms/op
                 executeQuery·p0.50:   12801.016 ms/op
                 executeQuery·p0.90:   12801.016 ms/op
                 executeQuery·p0.95:   12801.016 ms/op
                 executeQuery·p0.99:   12801.016 ms/op
                 executeQuery·p0.999:  12801.016 ms/op
                 executeQuery·p0.9999: 12801.016 ms/op
                 executeQuery·p1.00:   12801.016 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  12864.769 ±(99.9%) 355.023 ms/op

  Histogram, ms/op:
    [12800.000, 12825.000) = 3 
    [12825.000, 12850.000) = 0 
    [12850.000, 12875.000) = 0 
    [12875.000, 12900.000) = 0 
    [12900.000, 12925.000) = 1 
    [12925.000, 12950.000) = 0 
    [12950.000, 12975.000) = 0 
    [12975.000, 13000.000) = 0 
    [13000.000, 13025.000) = 1 
    [13025.000, 13050.000) = 0 
    [13050.000, 13075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12801.016 ms/op
     p(50.0000) =  12801.016 ms/op
     p(90.0000) =  13002.342 ms/op
     p(95.0000) =  13002.342 ms/op
     p(99.0000) =  13002.342 ms/op
     p(99.9000) =  13002.342 ms/op
     p(99.9900) =  13002.342 ms/op
     p(99.9990) =  13002.342 ms/op
     p(99.9999) =  13002.342 ms/op
    p(100.0000) =  13002.342 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 12.50% complete, ETA 05:26:52
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_291147079 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_291147079() {
        this(4);
    }
    public KeyValueMap_291147079(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_291147079 aggregation_state_map = new KeyValueMap_291147079();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16122.905 ms/op
# Warmup Iteration   2: 13958.644 ms/op
# Warmup Iteration   3: 13941.866 ms/op
# Warmup Iteration   4: 14629.732 ms/op
# Warmup Iteration   5: 14512.292 ms/op
Iteration   1: 14529.069 ms/op
                 executeQuery·p0.00:   14529.069 ms/op
                 executeQuery·p0.50:   14529.069 ms/op
                 executeQuery·p0.90:   14529.069 ms/op
                 executeQuery·p0.95:   14529.069 ms/op
                 executeQuery·p0.99:   14529.069 ms/op
                 executeQuery·p0.999:  14529.069 ms/op
                 executeQuery·p0.9999: 14529.069 ms/op
                 executeQuery·p1.00:   14529.069 ms/op

Iteration   2: 14529.069 ms/op
                 executeQuery·p0.00:   14529.069 ms/op
                 executeQuery·p0.50:   14529.069 ms/op
                 executeQuery·p0.90:   14529.069 ms/op
                 executeQuery·p0.95:   14529.069 ms/op
                 executeQuery·p0.99:   14529.069 ms/op
                 executeQuery·p0.999:  14529.069 ms/op
                 executeQuery·p0.9999: 14529.069 ms/op
                 executeQuery·p1.00:   14529.069 ms/op

Iteration   3: 14260.634 ms/op
                 executeQuery·p0.00:   14260.634 ms/op
                 executeQuery·p0.50:   14260.634 ms/op
                 executeQuery·p0.90:   14260.634 ms/op
                 executeQuery·p0.95:   14260.634 ms/op
                 executeQuery·p0.99:   14260.634 ms/op
                 executeQuery·p0.999:  14260.634 ms/op
                 executeQuery·p0.9999: 14260.634 ms/op
                 executeQuery·p1.00:   14260.634 ms/op

Iteration   4: 14378.074 ms/op
                 executeQuery·p0.00:   14378.074 ms/op
                 executeQuery·p0.50:   14378.074 ms/op
                 executeQuery·p0.90:   14378.074 ms/op
                 executeQuery·p0.95:   14378.074 ms/op
                 executeQuery·p0.99:   14378.074 ms/op
                 executeQuery·p0.999:  14378.074 ms/op
                 executeQuery·p0.9999: 14378.074 ms/op
                 executeQuery·p1.00:   14378.074 ms/op

Iteration   5: 14512.292 ms/op
                 executeQuery·p0.00:   14512.292 ms/op
                 executeQuery·p0.50:   14512.292 ms/op
                 executeQuery·p0.90:   14512.292 ms/op
                 executeQuery·p0.95:   14512.292 ms/op
                 executeQuery·p0.99:   14512.292 ms/op
                 executeQuery·p0.999:  14512.292 ms/op
                 executeQuery·p0.9999: 14512.292 ms/op
                 executeQuery·p1.00:   14512.292 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  14441.828 ±(99.9%) 459.999 ms/op

  Histogram, ms/op:
    [14200.000, 14225.000) = 0 
    [14225.000, 14250.000) = 0 
    [14250.000, 14275.000) = 1 
    [14275.000, 14300.000) = 0 
    [14300.000, 14325.000) = 0 
    [14325.000, 14350.000) = 0 
    [14350.000, 14375.000) = 0 
    [14375.000, 14400.000) = 1 
    [14400.000, 14425.000) = 0 
    [14425.000, 14450.000) = 0 
    [14450.000, 14475.000) = 0 
    [14475.000, 14500.000) = 0 
    [14500.000, 14525.000) = 1 
    [14525.000, 14550.000) = 2 
    [14550.000, 14575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  14260.634 ms/op
     p(50.0000) =  14512.292 ms/op
     p(90.0000) =  14529.069 ms/op
     p(95.0000) =  14529.069 ms/op
     p(99.0000) =  14529.069 ms/op
     p(99.9000) =  14529.069 ms/op
     p(99.9900) =  14529.069 ms/op
     p(99.9990) =  14529.069 ms/op
     p(99.9999) =  14529.069 ms/op
    p(100.0000) =  14529.069 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 13.54% complete, ETA 05:13:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_291147079 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_291147079() {
        this(4);
    }
    public KeyValueMap_291147079(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_291147079 aggregation_state_map = new KeyValueMap_291147079();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

56304.337 ms/op
# Warmup Iteration   2: 53217.329 ms/op
# Warmup Iteration   3: 49459.233 ms/op
# Warmup Iteration   4: 48184.164 ms/op
# Warmup Iteration   5: 47982.838 ms/op
Iteration   1: 48721.035 ms/op
                 executeQuery·p0.00:   48721.035 ms/op
                 executeQuery·p0.50:   48721.035 ms/op
                 executeQuery·p0.90:   48721.035 ms/op
                 executeQuery·p0.95:   48721.035 ms/op
                 executeQuery·p0.99:   48721.035 ms/op
                 executeQuery·p0.999:  48721.035 ms/op
                 executeQuery·p0.9999: 48721.035 ms/op
                 executeQuery·p1.00:   48721.035 ms/op

Iteration   2: 48788.144 ms/op
                 executeQuery·p0.00:   48788.144 ms/op
                 executeQuery·p0.50:   48788.144 ms/op
                 executeQuery·p0.90:   48788.144 ms/op
                 executeQuery·p0.95:   48788.144 ms/op
                 executeQuery·p0.99:   48788.144 ms/op
                 executeQuery·p0.999:  48788.144 ms/op
                 executeQuery·p0.9999: 48788.144 ms/op
                 executeQuery·p1.00:   48788.144 ms/op

Iteration   3: 48184.164 ms/op
                 executeQuery·p0.00:   48184.164 ms/op
                 executeQuery·p0.50:   48184.164 ms/op
                 executeQuery·p0.90:   48184.164 ms/op
                 executeQuery·p0.95:   48184.164 ms/op
                 executeQuery·p0.99:   48184.164 ms/op
                 executeQuery·p0.999:  48184.164 ms/op
                 executeQuery·p0.9999: 48184.164 ms/op
                 executeQuery·p1.00:   48184.164 ms/op

Iteration   4: 48721.035 ms/op
                 executeQuery·p0.00:   48721.035 ms/op
                 executeQuery·p0.50:   48721.035 ms/op
                 executeQuery·p0.90:   48721.035 ms/op
                 executeQuery·p0.95:   48721.035 ms/op
                 executeQuery·p0.99:   48721.035 ms/op
                 executeQuery·p0.999:  48721.035 ms/op
                 executeQuery·p0.9999: 48721.035 ms/op
                 executeQuery·p1.00:   48721.035 ms/op

Iteration   5: 49392.124 ms/op
                 executeQuery·p0.00:   49392.124 ms/op
                 executeQuery·p0.50:   49392.124 ms/op
                 executeQuery·p0.90:   49392.124 ms/op
                 executeQuery·p0.95:   49392.124 ms/op
                 executeQuery·p0.99:   49392.124 ms/op
                 executeQuery·p0.999:  49392.124 ms/op
                 executeQuery·p0.9999: 49392.124 ms/op
                 executeQuery·p1.00:   49392.124 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  48761.301 ±(99.9%) 1650.606 ms/op

  Histogram, ms/op:
    [48000.000, 48125.000) = 0 
    [48125.000, 48250.000) = 1 
    [48250.000, 48375.000) = 0 
    [48375.000, 48500.000) = 0 
    [48500.000, 48625.000) = 0 
    [48625.000, 48750.000) = 2 
    [48750.000, 48875.000) = 1 
    [48875.000, 49000.000) = 0 
    [49000.000, 49125.000) = 0 
    [49125.000, 49250.000) = 0 
    [49250.000, 49375.000) = 0 
    [49375.000, 49500.000) = 1 
    [49500.000, 49625.000) = 0 
    [49625.000, 49750.000) = 0 
    [49750.000, 49875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  48184.164 ms/op
     p(50.0000) =  48721.035 ms/op
     p(90.0000) =  49392.124 ms/op
     p(95.0000) =  49392.124 ms/op
     p(99.0000) =  49392.124 ms/op
     p(99.9000) =  49392.124 ms/op
     p(99.9900) =  49392.124 ms/op
     p(99.9990) =  49392.124 ms/op
     p(99.9999) =  49392.124 ms/op
    p(100.0000) =  49392.124 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 14.58% complete, ETA 05:47:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_291147079 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_291147079() {
        this(4);
    }
    public KeyValueMap_291147079(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_291147079 aggregation_state_map = new KeyValueMap_291147079();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

105226.699 ms/op
# Warmup Iteration   2: 102139.691 ms/op
# Warmup Iteration   3: 96234.111 ms/op
# Warmup Iteration   4: 97978.941 ms/op
# Warmup Iteration   5: 98650.030 ms/op
Iteration   1: 99589.554 ms/op
                 executeQuery·p0.00:   99589.554 ms/op
                 executeQuery·p0.50:   99589.554 ms/op
                 executeQuery·p0.90:   99589.554 ms/op
                 executeQuery·p0.95:   99589.554 ms/op
                 executeQuery·p0.99:   99589.554 ms/op
                 executeQuery·p0.999:  99589.554 ms/op
                 executeQuery·p0.9999: 99589.554 ms/op
                 executeQuery·p1.00:   99589.554 ms/op

Iteration   2: 99857.990 ms/op
                 executeQuery·p0.00:   99857.990 ms/op
                 executeQuery·p0.50:   99857.990 ms/op
                 executeQuery·p0.90:   99857.990 ms/op
                 executeQuery·p0.95:   99857.990 ms/op
                 executeQuery·p0.99:   99857.990 ms/op
                 executeQuery·p0.999:  99857.990 ms/op
                 executeQuery·p0.9999: 99857.990 ms/op
                 executeQuery·p1.00:   99857.990 ms/op

Iteration   3: 97978.941 ms/op
                 executeQuery·p0.00:   97978.941 ms/op
                 executeQuery·p0.50:   97978.941 ms/op
                 executeQuery·p0.90:   97978.941 ms/op
                 executeQuery·p0.95:   97978.941 ms/op
                 executeQuery·p0.99:   97978.941 ms/op
                 executeQuery·p0.999:  97978.941 ms/op
                 executeQuery·p0.9999: 97978.941 ms/op
                 executeQuery·p1.00:   97978.941 ms/op

Iteration   4: 99321.119 ms/op
                 executeQuery·p0.00:   99321.119 ms/op
                 executeQuery·p0.50:   99321.119 ms/op
                 executeQuery·p0.90:   99321.119 ms/op
                 executeQuery·p0.95:   99321.119 ms/op
                 executeQuery·p0.99:   99321.119 ms/op
                 executeQuery·p0.999:  99321.119 ms/op
                 executeQuery·p0.9999: 99321.119 ms/op
                 executeQuery·p1.00:   99321.119 ms/op

Iteration   5: 99052.683 ms/op
                 executeQuery·p0.00:   99052.683 ms/op
                 executeQuery·p0.50:   99052.683 ms/op
                 executeQuery·p0.90:   99052.683 ms/op
                 executeQuery·p0.95:   99052.683 ms/op
                 executeQuery·p0.99:   99052.683 ms/op
                 executeQuery·p0.999:  99052.683 ms/op
                 executeQuery·p0.9999: 99052.683 ms/op
                 executeQuery·p1.00:   99052.683 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  99160.057 ±(99.9%) 2792.767 ms/op

  Histogram, ms/op:
    [ 97000.000,  97250.000) = 0 
    [ 97250.000,  97500.000) = 0 
    [ 97500.000,  97750.000) = 0 
    [ 97750.000,  98000.000) = 1 
    [ 98000.000,  98250.000) = 0 
    [ 98250.000,  98500.000) = 0 
    [ 98500.000,  98750.000) = 0 
    [ 98750.000,  99000.000) = 0 
    [ 99000.000,  99250.000) = 1 
    [ 99250.000,  99500.000) = 1 
    [ 99500.000,  99750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  97978.941 ms/op
     p(50.0000) =  99321.119 ms/op
     p(90.0000) =  99857.990 ms/op
     p(95.0000) =  99857.990 ms/op
     p(99.0000) =  99857.990 ms/op
     p(99.9000) =  99857.990 ms/op
     p(99.9900) =  99857.990 ms/op
     p(99.9990) =  99857.990 ms/op
     p(99.9999) =  99857.990 ms/op
    p(100.0000) =  99857.990 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 15.63% complete, ETA 07:27:50
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

458.347 ±(99.9%) 89.380 ms/op
# Warmup Iteration   2: 427.622 ±(99.9%) 3.199 ms/op
# Warmup Iteration   3: 427.120 ±(99.9%) 0.614 ms/op
# Warmup Iteration   4: 427.011 ±(99.9%) 0.531 ms/op
# Warmup Iteration   5: 427.338 ±(99.9%) 2.485 ms/op
Iteration   1: 427.426 ±(99.9%) 0.643 ms/op
                 executeQuery·p0.00:   426.246 ms/op
                 executeQuery·p0.50:   427.295 ms/op
                 executeQuery·p0.90:   428.605 ms/op
                 executeQuery·p0.95:   429.261 ms/op
                 executeQuery·p0.99:   429.392 ms/op
                 executeQuery·p0.999:  429.392 ms/op
                 executeQuery·p0.9999: 429.392 ms/op
                 executeQuery·p1.00:   429.392 ms/op

Iteration   2: 427.338 ±(99.9%) 0.581 ms/op
                 executeQuery·p0.00:   426.246 ms/op
                 executeQuery·p0.50:   427.295 ms/op
                 executeQuery·p0.90:   428.868 ms/op
                 executeQuery·p0.95:   428.868 ms/op
                 executeQuery·p0.99:   428.868 ms/op
                 executeQuery·p0.999:  428.868 ms/op
                 executeQuery·p0.9999: 428.868 ms/op
                 executeQuery·p1.00:   428.868 ms/op

Iteration   3: 428.300 ±(99.9%) 0.628 ms/op
                 executeQuery·p0.00:   426.770 ms/op
                 executeQuery·p0.50:   428.343 ms/op
                 executeQuery·p0.90:   429.392 ms/op
                 executeQuery·p0.95:   429.785 ms/op
                 executeQuery·p0.99:   429.916 ms/op
                 executeQuery·p0.999:  429.916 ms/op
                 executeQuery·p0.9999: 429.916 ms/op
                 executeQuery·p1.00:   429.916 ms/op

Iteration   4: 427.426 ±(99.9%) 0.782 ms/op
                 executeQuery·p0.00:   425.722 ms/op
                 executeQuery·p0.50:   427.295 ms/op
                 executeQuery·p0.90:   428.868 ms/op
                 executeQuery·p0.95:   429.654 ms/op
                 executeQuery·p0.99:   429.916 ms/op
                 executeQuery·p0.999:  429.916 ms/op
                 executeQuery·p0.9999: 429.916 ms/op
                 executeQuery·p1.00:   429.916 ms/op

Iteration   5: 428.278 ±(99.9%) 3.811 ms/op
                 executeQuery·p0.00:   424.673 ms/op
                 executeQuery·p0.50:   427.295 ms/op
                 executeQuery·p0.90:   429.392 ms/op
                 executeQuery·p0.95:   445.514 ms/op
                 executeQuery·p0.99:   450.888 ms/op
                 executeQuery·p0.999:  450.888 ms/op
                 executeQuery·p0.9999: 450.888 ms/op
                 executeQuery·p1.00:   450.888 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 120
  mean =    427.753 ±(99.9%) 0.723 ms/op

  Histogram, ms/op:
    [420.000, 422.500) = 0 
    [422.500, 425.000) = 1 
    [425.000, 427.500) = 61 
    [427.500, 430.000) = 57 
    [430.000, 432.500) = 0 
    [432.500, 435.000) = 0 
    [435.000, 437.500) = 0 
    [437.500, 440.000) = 0 
    [440.000, 442.500) = 0 
    [442.500, 445.000) = 0 
    [445.000, 447.500) = 0 
    [447.500, 450.000) = 0 
    [450.000, 452.500) = 1 
    [452.500, 455.000) = 0 
    [455.000, 457.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    424.673 ms/op
     p(50.0000) =    427.295 ms/op
     p(90.0000) =    428.868 ms/op
     p(95.0000) =    429.392 ms/op
     p(99.0000) =    446.484 ms/op
     p(99.9000) =    450.888 ms/op
     p(99.9900) =    450.888 ms/op
     p(99.9990) =    450.888 ms/op
     p(99.9999) =    450.888 ms/op
    p(100.0000) =    450.888 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 16.67% complete, ETA 07:03:24
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

594.728 ±(99.9%) 90.631 ms/op
# Warmup Iteration   2: 541.176 ±(99.9%) 5.382 ms/op
# Warmup Iteration   3: 541.727 ±(99.9%) 4.427 ms/op
# Warmup Iteration   4: 542.224 ±(99.9%) 3.811 ms/op
# Warmup Iteration   5: 543.218 ±(99.9%) 4.271 ms/op
Iteration   1: 535.602 ±(99.9%) 2.580 ms/op
                 executeQuery·p0.00:   533.201 ms/op
                 executeQuery·p0.50:   534.774 ms/op
                 executeQuery·p0.90:   538.968 ms/op
                 executeQuery·p0.95:   546.308 ms/op
                 executeQuery·p0.99:   546.308 ms/op
                 executeQuery·p0.999:  546.308 ms/op
                 executeQuery·p0.9999: 546.308 ms/op
                 executeQuery·p1.00:   546.308 ms/op

Iteration   2: 536.374 ±(99.9%) 3.071 ms/op
                 executeQuery·p0.00:   533.725 ms/op
                 executeQuery·p0.50:   535.298 ms/op
                 executeQuery·p0.90:   538.968 ms/op
                 executeQuery·p0.95:   548.405 ms/op
                 executeQuery·p0.99:   548.405 ms/op
                 executeQuery·p0.999:  548.405 ms/op
                 executeQuery·p0.9999: 548.405 ms/op
                 executeQuery·p1.00:   548.405 ms/op

Iteration   3: 535.602 ±(99.9%) 1.972 ms/op
                 executeQuery·p0.00:   533.725 ms/op
                 executeQuery·p0.50:   534.249 ms/op
                 executeQuery·p0.90:   540.017 ms/op
                 executeQuery·p0.95:   540.017 ms/op
                 executeQuery·p0.99:   540.017 ms/op
                 executeQuery·p0.999:  540.017 ms/op
                 executeQuery·p0.9999: 540.017 ms/op
                 executeQuery·p1.00:   540.017 ms/op

Iteration   4: 534.581 ±(99.9%) 0.571 ms/op
                 executeQuery·p0.00:   533.725 ms/op
                 executeQuery·p0.50:   534.774 ms/op
                 executeQuery·p0.90:   535.822 ms/op
                 executeQuery·p0.95:   535.822 ms/op
                 executeQuery·p0.99:   535.822 ms/op
                 executeQuery·p0.999:  535.822 ms/op
                 executeQuery·p0.9999: 535.822 ms/op
                 executeQuery·p1.00:   535.822 ms/op

Iteration   5: 534.608 ±(99.9%) 0.523 ms/op
                 executeQuery·p0.00:   533.725 ms/op
                 executeQuery·p0.50:   534.249 ms/op
                 executeQuery·p0.90:   535.298 ms/op
                 executeQuery·p0.95:   535.822 ms/op
                 executeQuery·p0.99:   535.822 ms/op
                 executeQuery·p0.999:  535.822 ms/op
                 executeQuery·p0.9999: 535.822 ms/op
                 executeQuery·p1.00:   535.822 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 95
  mean =    535.353 ±(99.9%) 0.805 ms/op

  Histogram, ms/op:
    [530.000, 531.250) = 0 
    [531.250, 532.500) = 0 
    [532.500, 533.750) = 14 
    [533.750, 535.000) = 46 
    [535.000, 536.250) = 20 
    [536.250, 537.500) = 3 
    [537.500, 538.750) = 3 
    [538.750, 540.000) = 5 
    [540.000, 541.250) = 2 
    [541.250, 542.500) = 0 
    [542.500, 543.750) = 0 
    [543.750, 545.000) = 0 
    [545.000, 546.250) = 0 
    [546.250, 547.500) = 1 
    [547.500, 548.750) = 1 

  Percentiles, ms/op:
      p(0.0000) =    533.201 ms/op
     p(50.0000) =    534.774 ms/op
     p(90.0000) =    538.339 ms/op
     p(95.0000) =    539.178 ms/op
     p(99.0000) =    548.405 ms/op
     p(99.9000) =    548.405 ms/op
     p(99.9900) =    548.405 ms/op
     p(99.9990) =    548.405 ms/op
     p(99.9999) =    548.405 ms/op
    p(100.0000) =    548.405 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 17.71% complete, ETA 06:41:36
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_264103660 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_264103660() {
        this(4);
    }
    public KeyValueMap_264103660(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_264103660 aggregation_state_map = new KeyValueMap_264103660();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

779.737 ±(99.9%) 75.533 ms/op
# Warmup Iteration   2: 748.459 ±(99.9%) 17.330 ms/op
# Warmup Iteration   3: 756.427 ±(99.9%) 11.273 ms/op
# Warmup Iteration   4: 750.780 ±(99.9%) 16.933 ms/op
# Warmup Iteration   5: 750.780 ±(99.9%) 17.885 ms/op
Iteration   1: 745.088 ±(99.9%) 16.023 ms/op
                 executeQuery·p0.00:   719.323 ms/op
                 executeQuery·p0.50:   751.305 ms/op
                 executeQuery·p0.90:   762.315 ms/op
                 executeQuery·p0.95:   763.363 ms/op
                 executeQuery·p0.99:   763.363 ms/op
                 executeQuery·p0.999:  763.363 ms/op
                 executeQuery·p0.9999: 763.363 ms/op
                 executeQuery·p1.00:   763.363 ms/op

Iteration   2: 744.714 ±(99.9%) 14.731 ms/op
                 executeQuery·p0.00:   722.469 ms/op
                 executeQuery·p0.50:   749.208 ms/op
                 executeQuery·p0.90:   760.218 ms/op
                 executeQuery·p0.95:   763.363 ms/op
                 executeQuery·p0.99:   763.363 ms/op
                 executeQuery·p0.999:  763.363 ms/op
                 executeQuery·p0.9999: 763.363 ms/op
                 executeQuery·p1.00:   763.363 ms/op

Iteration   3: 755.948 ±(99.9%) 20.605 ms/op
                 executeQuery·p0.00:   721.420 ms/op
                 executeQuery·p0.50:   757.596 ms/op
                 executeQuery·p0.90:   781.189 ms/op
                 executeQuery·p0.95:   783.286 ms/op
                 executeQuery·p0.99:   783.286 ms/op
                 executeQuery·p0.999:  783.286 ms/op
                 executeQuery·p0.9999: 783.286 ms/op
                 executeQuery·p1.00:   783.286 ms/op

Iteration   4: 760.218 ±(99.9%) 12.599 ms/op
                 executeQuery·p0.00:   747.635 ms/op
                 executeQuery·p0.50:   758.120 ms/op
                 executeQuery·p0.90:   776.785 ms/op
                 executeQuery·p0.95:   778.043 ms/op
                 executeQuery·p0.99:   778.043 ms/op
                 executeQuery·p0.999:  778.043 ms/op
                 executeQuery·p0.9999: 778.043 ms/op
                 executeQuery·p1.00:   778.043 ms/op

Iteration   5: 754.825 ±(99.9%) 16.442 ms/op
                 executeQuery·p0.00:   725.615 ms/op
                 executeQuery·p0.50:   756.023 ms/op
                 executeQuery·p0.90:   773.325 ms/op
                 executeQuery·p0.95:   773.849 ms/op
                 executeQuery·p0.99:   773.849 ms/op
                 executeQuery·p0.999:  773.849 ms/op
                 executeQuery·p0.9999: 773.849 ms/op
                 executeQuery·p1.00:   773.849 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 69
  mean =    752.042 ±(99.9%) 6.329 ms/op

  Histogram, ms/op:
    [710.000, 715.000) = 0 
    [715.000, 720.000) = 1 
    [720.000, 725.000) = 2 
    [725.000, 730.000) = 7 
    [730.000, 735.000) = 3 
    [735.000, 740.000) = 3 
    [740.000, 745.000) = 1 
    [745.000, 750.000) = 9 
    [750.000, 755.000) = 13 
    [755.000, 760.000) = 12 
    [760.000, 765.000) = 7 
    [765.000, 770.000) = 0 
    [770.000, 775.000) = 8 
    [775.000, 780.000) = 2 
    [780.000, 785.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    719.323 ms/op
     p(50.0000) =    752.878 ms/op
     p(90.0000) =    773.849 ms/op
     p(95.0000) =    776.471 ms/op
     p(99.0000) =    783.286 ms/op
     p(99.9000) =    783.286 ms/op
     p(99.9900) =    783.286 ms/op
     p(99.9990) =    783.286 ms/op
     p(99.9999) =    783.286 ms/op
    p(100.0000) =    783.286 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 18.75% complete, ETA 06:22:13
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1591842329 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1591842329() {
        this(4);
    }
    public KeyValueMap_1591842329(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1591842329 aggregation_state_map = new KeyValueMap_1591842329();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3380.609 ms/op
# Warmup Iteration   2: 2671.772 ms/op
# Warmup Iteration   3: 2734.686 ms/op
# Warmup Iteration   4: 2722.103 ms/op
# Warmup Iteration   5: 2600.468 ms/op
Iteration   1: 2197.815 ms/op
                 executeQuery·p0.00:   2197.815 ms/op
                 executeQuery·p0.50:   2197.815 ms/op
                 executeQuery·p0.90:   2197.815 ms/op
                 executeQuery·p0.95:   2197.815 ms/op
                 executeQuery·p0.99:   2197.815 ms/op
                 executeQuery·p0.999:  2197.815 ms/op
                 executeQuery·p0.9999: 2197.815 ms/op
                 executeQuery·p1.00:   2197.815 ms/op

Iteration   2: 2306.867 ms/op
                 executeQuery·p0.00:   2306.867 ms/op
                 executeQuery·p0.50:   2306.867 ms/op
                 executeQuery·p0.90:   2306.867 ms/op
                 executeQuery·p0.95:   2306.867 ms/op
                 executeQuery·p0.99:   2306.867 ms/op
                 executeQuery·p0.999:  2306.867 ms/op
                 executeQuery·p0.9999: 2306.867 ms/op
                 executeQuery·p1.00:   2306.867 ms/op

Iteration   3: 2222.981 ms/op
                 executeQuery·p0.00:   2222.981 ms/op
                 executeQuery·p0.50:   2222.981 ms/op
                 executeQuery·p0.90:   2222.981 ms/op
                 executeQuery·p0.95:   2222.981 ms/op
                 executeQuery·p0.99:   2222.981 ms/op
                 executeQuery·p0.999:  2222.981 ms/op
                 executeQuery·p0.9999: 2222.981 ms/op
                 executeQuery·p1.00:   2222.981 ms/op

Iteration   4: 2243.953 ms/op
                 executeQuery·p0.00:   2243.953 ms/op
                 executeQuery·p0.50:   2243.953 ms/op
                 executeQuery·p0.90:   2243.953 ms/op
                 executeQuery·p0.95:   2243.953 ms/op
                 executeQuery·p0.99:   2243.953 ms/op
                 executeQuery·p0.999:  2243.953 ms/op
                 executeQuery·p0.9999: 2243.953 ms/op
                 executeQuery·p1.00:   2243.953 ms/op

Iteration   5: 2457.862 ms/op
                 executeQuery·p0.00:   2457.862 ms/op
                 executeQuery·p0.50:   2457.862 ms/op
                 executeQuery·p0.90:   2457.862 ms/op
                 executeQuery·p0.95:   2457.862 ms/op
                 executeQuery·p0.99:   2457.862 ms/op
                 executeQuery·p0.999:  2457.862 ms/op
                 executeQuery·p0.9999: 2457.862 ms/op
                 executeQuery·p1.00:   2457.862 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =   2285.896 ±(99.9%) 401.502 ms/op

  Histogram, ms/op:
    [2100.000, 2125.000) = 0 
    [2125.000, 2150.000) = 0 
    [2150.000, 2175.000) = 0 
    [2175.000, 2200.000) = 1 
    [2200.000, 2225.000) = 1 
    [2225.000, 2250.000) = 1 
    [2250.000, 2275.000) = 0 
    [2275.000, 2300.000) = 0 
    [2300.000, 2325.000) = 1 
    [2325.000, 2350.000) = 0 
    [2350.000, 2375.000) = 0 
    [2375.000, 2400.000) = 0 
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 0 
    [2450.000, 2475.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2197.815 ms/op
     p(50.0000) =   2243.953 ms/op
     p(90.0000) =   2457.862 ms/op
     p(95.0000) =   2457.862 ms/op
     p(99.0000) =   2457.862 ms/op
     p(99.9000) =   2457.862 ms/op
     p(99.9900) =   2457.862 ms/op
     p(99.9990) =   2457.862 ms/op
     p(99.9999) =   2457.862 ms/op
    p(100.0000) =   2457.862 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 19.79% complete, ETA 06:06:15
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1591842329 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1591842329() {
        this(4);
    }
    public KeyValueMap_1591842329(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1591842329 aggregation_state_map = new KeyValueMap_1591842329();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5561.647 ms/op
# Warmup Iteration   2: 5175.771 ms/op
# Warmup Iteration   3: 5175.771 ms/op
# Warmup Iteration   4: 5234.491 ms/op
# Warmup Iteration   5: 4991.222 ms/op
Iteration   1: 5108.662 ms/op
                 executeQuery·p0.00:   5108.662 ms/op
                 executeQuery·p0.50:   5108.662 ms/op
                 executeQuery·p0.90:   5108.662 ms/op
                 executeQuery·p0.95:   5108.662 ms/op
                 executeQuery·p0.99:   5108.662 ms/op
                 executeQuery·p0.999:  5108.662 ms/op
                 executeQuery·p0.9999: 5108.662 ms/op
                 executeQuery·p1.00:   5108.662 ms/op

Iteration   2: 4966.056 ms/op
                 executeQuery·p0.00:   4966.056 ms/op
                 executeQuery·p0.50:   4966.056 ms/op
                 executeQuery·p0.90:   4966.056 ms/op
                 executeQuery·p0.95:   4966.056 ms/op
                 executeQuery·p0.99:   4966.056 ms/op
                 executeQuery·p0.999:  4966.056 ms/op
                 executeQuery·p0.9999: 4966.056 ms/op
                 executeQuery·p1.00:   4966.056 ms/op

Iteration   3: 5058.331 ms/op
                 executeQuery·p0.00:   5058.331 ms/op
                 executeQuery·p0.50:   5058.331 ms/op
                 executeQuery·p0.90:   5058.331 ms/op
                 executeQuery·p0.95:   5058.331 ms/op
                 executeQuery·p0.99:   5058.331 ms/op
                 executeQuery·p0.999:  5058.331 ms/op
                 executeQuery·p0.9999: 5058.331 ms/op
                 executeQuery·p1.00:   5058.331 ms/op

Iteration   4: 5175.771 ms/op
                 executeQuery·p0.00:   5175.771 ms/op
                 executeQuery·p0.50:   5175.771 ms/op
                 executeQuery·p0.90:   5175.771 ms/op
                 executeQuery·p0.95:   5175.771 ms/op
                 executeQuery·p0.99:   5175.771 ms/op
                 executeQuery·p0.999:  5175.771 ms/op
                 executeQuery·p0.9999: 5175.771 ms/op
                 executeQuery·p1.00:   5175.771 ms/op

Iteration   5: 4974.445 ms/op
                 executeQuery·p0.00:   4974.445 ms/op
                 executeQuery·p0.50:   4974.445 ms/op
                 executeQuery·p0.90:   4974.445 ms/op
                 executeQuery·p0.95:   4974.445 ms/op
                 executeQuery·p0.99:   4974.445 ms/op
                 executeQuery·p0.999:  4974.445 ms/op
                 executeQuery·p0.9999: 4974.445 ms/op
                 executeQuery·p1.00:   4974.445 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =   5056.653 ±(99.9%) 343.674 ms/op

  Histogram, ms/op:
    [4900.000, 4925.000) = 0 
    [4925.000, 4950.000) = 0 
    [4950.000, 4975.000) = 2 
    [4975.000, 5000.000) = 0 
    [5000.000, 5025.000) = 0 
    [5025.000, 5050.000) = 0 
    [5050.000, 5075.000) = 1 
    [5075.000, 5100.000) = 0 
    [5100.000, 5125.000) = 1 
    [5125.000, 5150.000) = 0 
    [5150.000, 5175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4966.056 ms/op
     p(50.0000) =   5058.331 ms/op
     p(90.0000) =   5175.771 ms/op
     p(95.0000) =   5175.771 ms/op
     p(99.0000) =   5175.771 ms/op
     p(99.9000) =   5175.771 ms/op
     p(99.9900) =   5175.771 ms/op
     p(99.9990) =   5175.771 ms/op
     p(99.9999) =   5175.771 ms/op
    p(100.0000) =   5175.771 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 20.83% complete, ETA 06:13:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6702.498 ms/op
# Warmup Iteration   2: 4272.598 ±(99.9%) 7612.590 ms/op
# Warmup Iteration   3: 3883.926 ±(99.9%) 1264.313 ms/op
# Warmup Iteration   4: 3876.935 ±(99.9%) 1107.115 ms/op
# Warmup Iteration   5: 4036.319 ±(99.9%) 3195.863 ms/op
Iteration   1: 3932.859 ±(99.9%) 2422.587 ms/op
                 executeQuery·p0.00:   3841.982 ms/op
                 executeQuery·p0.50:   3871.343 ms/op
                 executeQuery·p0.90:   4085.252 ms/op
                 executeQuery·p0.95:   4085.252 ms/op
                 executeQuery·p0.99:   4085.252 ms/op
                 executeQuery·p0.999:  4085.252 ms/op
                 executeQuery·p0.9999: 4085.252 ms/op
                 executeQuery·p1.00:   4085.252 ms/op

Iteration   2: 3928.665 ±(99.9%) 2484.633 ms/op
                 executeQuery·p0.00:   3837.788 ms/op
                 executeQuery·p0.50:   3862.954 ms/op
                 executeQuery·p0.90:   4085.252 ms/op
                 executeQuery·p0.95:   4085.252 ms/op
                 executeQuery·p0.99:   4085.252 ms/op
                 executeQuery·p0.999:  4085.252 ms/op
                 executeQuery·p0.9999: 4085.252 ms/op
                 executeQuery·p1.00:   4085.252 ms/op

Iteration   3: 3839.186 ±(99.9%) 159.288 ms/op
                 executeQuery·p0.00:   3829.400 ms/op
                 executeQuery·p0.50:   3841.982 ms/op
                 executeQuery·p0.90:   3846.177 ms/op
                 executeQuery·p0.95:   3846.177 ms/op
                 executeQuery·p0.99:   3846.177 ms/op
                 executeQuery·p0.999:  3846.177 ms/op
                 executeQuery·p0.9999: 3846.177 ms/op
                 executeQuery·p1.00:   3846.177 ms/op

Iteration   4: 3839.186 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   3833.594 ms/op
                 executeQuery·p0.50:   3837.788 ms/op
                 executeQuery·p0.90:   3846.177 ms/op
                 executeQuery·p0.95:   3846.177 ms/op
                 executeQuery·p0.99:   3846.177 ms/op
                 executeQuery·p0.999:  3846.177 ms/op
                 executeQuery·p0.9999: 3846.177 ms/op
                 executeQuery·p1.00:   3846.177 ms/op

Iteration   5: 3833.594 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   3829.400 ms/op
                 executeQuery·p0.50:   3833.594 ms/op
                 executeQuery·p0.90:   3837.788 ms/op
                 executeQuery·p0.95:   3837.788 ms/op
                 executeQuery·p0.99:   3837.788 ms/op
                 executeQuery·p0.999:  3837.788 ms/op
                 executeQuery·p0.9999: 3837.788 ms/op
                 executeQuery·p1.00:   3837.788 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   3874.698 ±(99.9%) 92.209 ms/op

  Histogram, ms/op:
    [3800.000, 3825.000) = 0 
    [3825.000, 3850.000) = 11 
    [3850.000, 3875.000) = 2 
    [3875.000, 3900.000) = 0 
    [3900.000, 3925.000) = 0 
    [3925.000, 3950.000) = 0 
    [3950.000, 3975.000) = 0 
    [3975.000, 4000.000) = 0 
    [4000.000, 4025.000) = 0 
    [4025.000, 4050.000) = 0 
    [4050.000, 4075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3829.400 ms/op
     p(50.0000) =   3841.982 ms/op
     p(90.0000) =   4085.252 ms/op
     p(95.0000) =   4085.252 ms/op
     p(99.0000) =   4085.252 ms/op
     p(99.9000) =   4085.252 ms/op
     p(99.9900) =   4085.252 ms/op
     p(99.9990) =   4085.252 ms/op
     p(99.9999) =   4085.252 ms/op
    p(100.0000) =   4085.252 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 21.88% complete, ETA 05:57:59
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7021.265 ms/op
# Warmup Iteration   2: 5637.145 ms/op
# Warmup Iteration   3: 5519.704 ms/op
# Warmup Iteration   4: 5880.414 ms/op
# Warmup Iteration   5: 5796.528 ms/op
Iteration   1: 5515.510 ms/op
                 executeQuery·p0.00:   5242.880 ms/op
                 executeQuery·p0.50:   5515.510 ms/op
                 executeQuery·p0.90:   5788.140 ms/op
                 executeQuery·p0.95:   5788.140 ms/op
                 executeQuery·p0.99:   5788.140 ms/op
                 executeQuery·p0.999:  5788.140 ms/op
                 executeQuery·p0.9999: 5788.140 ms/op
                 executeQuery·p1.00:   5788.140 ms/op

Iteration   2: 5276.434 ms/op
                 executeQuery·p0.00:   5259.657 ms/op
                 executeQuery·p0.50:   5276.434 ms/op
                 executeQuery·p0.90:   5293.212 ms/op
                 executeQuery·p0.95:   5293.212 ms/op
                 executeQuery·p0.99:   5293.212 ms/op
                 executeQuery·p0.999:  5293.212 ms/op
                 executeQuery·p0.9999: 5293.212 ms/op
                 executeQuery·p1.00:   5293.212 ms/op

Iteration   3: 5507.121 ms/op
                 executeQuery·p0.00:   5435.818 ms/op
                 executeQuery·p0.50:   5507.121 ms/op
                 executeQuery·p0.90:   5578.424 ms/op
                 executeQuery·p0.95:   5578.424 ms/op
                 executeQuery·p0.99:   5578.424 ms/op
                 executeQuery·p0.999:  5578.424 ms/op
                 executeQuery·p0.9999: 5578.424 ms/op
                 executeQuery·p1.00:   5578.424 ms/op

Iteration   4: 5255.463 ms/op
                 executeQuery·p0.00:   5251.269 ms/op
                 executeQuery·p0.50:   5255.463 ms/op
                 executeQuery·p0.90:   5259.657 ms/op
                 executeQuery·p0.95:   5259.657 ms/op
                 executeQuery·p0.99:   5259.657 ms/op
                 executeQuery·p0.999:  5259.657 ms/op
                 executeQuery·p0.9999: 5259.657 ms/op
                 executeQuery·p1.00:   5259.657 ms/op

Iteration   5: 5255.463 ms/op
                 executeQuery·p0.00:   5251.269 ms/op
                 executeQuery·p0.50:   5255.463 ms/op
                 executeQuery·p0.90:   5259.657 ms/op
                 executeQuery·p0.95:   5259.657 ms/op
                 executeQuery·p0.99:   5259.657 ms/op
                 executeQuery·p0.999:  5259.657 ms/op
                 executeQuery·p0.9999: 5259.657 ms/op
                 executeQuery·p1.00:   5259.657 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   5361.998 ±(99.9%) 280.023 ms/op

  Histogram, ms/op:
    [5200.000, 5250.000) = 1 
    [5250.000, 5300.000) = 6 
    [5300.000, 5350.000) = 0 
    [5350.000, 5400.000) = 0 
    [5400.000, 5450.000) = 1 
    [5450.000, 5500.000) = 0 
    [5500.000, 5550.000) = 0 
    [5550.000, 5600.000) = 1 
    [5600.000, 5650.000) = 0 
    [5650.000, 5700.000) = 0 
    [5700.000, 5750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   5242.880 ms/op
     p(50.0000) =   5259.657 ms/op
     p(90.0000) =   5767.168 ms/op
     p(95.0000) =   5788.140 ms/op
     p(99.0000) =   5788.140 ms/op
     p(99.9000) =   5788.140 ms/op
     p(99.9900) =   5788.140 ms/op
     p(99.9990) =   5788.140 ms/op
     p(99.9999) =   5788.140 ms/op
    p(100.0000) =   5788.140 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 22.92% complete, ETA 05:43:37
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

8447.328 ms/op
# Warmup Iteration   2: 7683.965 ms/op
# Warmup Iteration   3: 7193.231 ms/op
# Warmup Iteration   4: 7134.511 ms/op
# Warmup Iteration   5: 7285.506 ms/op
Iteration   1: 7151.288 ms/op
                 executeQuery·p0.00:   7096.762 ms/op
                 executeQuery·p0.50:   7151.288 ms/op
                 executeQuery·p0.90:   7205.814 ms/op
                 executeQuery·p0.95:   7205.814 ms/op
                 executeQuery·p0.99:   7205.814 ms/op
                 executeQuery·p0.999:  7205.814 ms/op
                 executeQuery·p0.9999: 7205.814 ms/op
                 executeQuery·p1.00:   7205.814 ms/op

Iteration   2: 7184.843 ms/op
                 executeQuery·p0.00:   7180.648 ms/op
                 executeQuery·p0.50:   7184.843 ms/op
                 executeQuery·p0.90:   7189.037 ms/op
                 executeQuery·p0.95:   7189.037 ms/op
                 executeQuery·p0.99:   7189.037 ms/op
                 executeQuery·p0.999:  7189.037 ms/op
                 executeQuery·p0.9999: 7189.037 ms/op
                 executeQuery·p1.00:   7189.037 ms/op

Iteration   3: 6836.716 ms/op
                 executeQuery·p0.00:   6752.829 ms/op
                 executeQuery·p0.50:   6836.716 ms/op
                 executeQuery·p0.90:   6920.602 ms/op
                 executeQuery·p0.95:   6920.602 ms/op
                 executeQuery·p0.99:   6920.602 ms/op
                 executeQuery·p0.999:  6920.602 ms/op
                 executeQuery·p0.9999: 6920.602 ms/op
                 executeQuery·p1.00:   6920.602 ms/op

Iteration   4: 7210.009 ms/op
                 executeQuery·p0.00:   7197.426 ms/op
                 executeQuery·p0.50:   7210.009 ms/op
                 executeQuery·p0.90:   7222.591 ms/op
                 executeQuery·p0.95:   7222.591 ms/op
                 executeQuery·p0.99:   7222.591 ms/op
                 executeQuery·p0.999:  7222.591 ms/op
                 executeQuery·p0.9999: 7222.591 ms/op
                 executeQuery·p1.00:   7222.591 ms/op

Iteration   5: 7017.071 ms/op
                 executeQuery·p0.00:   6937.379 ms/op
                 executeQuery·p0.50:   7017.071 ms/op
                 executeQuery·p0.90:   7096.762 ms/op
                 executeQuery·p0.95:   7096.762 ms/op
                 executeQuery·p0.99:   7096.762 ms/op
                 executeQuery·p0.999:  7096.762 ms/op
                 executeQuery·p0.9999: 7096.762 ms/op
                 executeQuery·p1.00:   7096.762 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   7079.985 ±(99.9%) 239.216 ms/op

  Histogram, ms/op:
    [6700.000, 6750.000) = 0 
    [6750.000, 6800.000) = 1 
    [6800.000, 6850.000) = 0 
    [6850.000, 6900.000) = 0 
    [6900.000, 6950.000) = 2 
    [6950.000, 7000.000) = 0 
    [7000.000, 7050.000) = 0 
    [7050.000, 7100.000) = 2 
    [7100.000, 7150.000) = 0 
    [7150.000, 7200.000) = 3 
    [7200.000, 7250.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   6752.829 ms/op
     p(50.0000) =   7138.705 ms/op
     p(90.0000) =   7220.914 ms/op
     p(95.0000) =   7222.591 ms/op
     p(99.0000) =   7222.591 ms/op
     p(99.9000) =   7222.591 ms/op
     p(99.9900) =   7222.591 ms/op
     p(99.9990) =   7222.591 ms/op
     p(99.9999) =   7222.591 ms/op
    p(100.0000) =   7222.591 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 23.96% complete, ETA 05:32:06
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

30232.543 ms/op
# Warmup Iteration   2: 28588.376 ms/op
# Warmup Iteration   3: 25669.140 ms/op
# Warmup Iteration   4: 26709.328 ms/op
# Warmup Iteration   5: 25333.596 ms/op
Iteration   1: 25232.933 ms/op
                 executeQuery·p0.00:   25232.933 ms/op
                 executeQuery·p0.50:   25232.933 ms/op
                 executeQuery·p0.90:   25232.933 ms/op
                 executeQuery·p0.95:   25232.933 ms/op
                 executeQuery·p0.99:   25232.933 ms/op
                 executeQuery·p0.999:  25232.933 ms/op
                 executeQuery·p0.9999: 25232.933 ms/op
                 executeQuery·p1.00:   25232.933 ms/op

Iteration   2: 24897.389 ms/op
                 executeQuery·p0.00:   24897.389 ms/op
                 executeQuery·p0.50:   24897.389 ms/op
                 executeQuery·p0.90:   24897.389 ms/op
                 executeQuery·p0.95:   24897.389 ms/op
                 executeQuery·p0.99:   24897.389 ms/op
                 executeQuery·p0.999:  24897.389 ms/op
                 executeQuery·p0.9999: 24897.389 ms/op
                 executeQuery·p1.00:   24897.389 ms/op

Iteration   3: 28387.049 ms/op
                 executeQuery·p0.00:   28387.049 ms/op
                 executeQuery·p0.50:   28387.049 ms/op
                 executeQuery·p0.90:   28387.049 ms/op
                 executeQuery·p0.95:   28387.049 ms/op
                 executeQuery·p0.99:   28387.049 ms/op
                 executeQuery·p0.999:  28387.049 ms/op
                 executeQuery·p0.9999: 28387.049 ms/op
                 executeQuery·p1.00:   28387.049 ms/op

Iteration   4: 25669.140 ms/op
                 executeQuery·p0.00:   25669.140 ms/op
                 executeQuery·p0.50:   25669.140 ms/op
                 executeQuery·p0.90:   25669.140 ms/op
                 executeQuery·p0.95:   25669.140 ms/op
                 executeQuery·p0.99:   25669.140 ms/op
                 executeQuery·p0.999:  25669.140 ms/op
                 executeQuery·p0.9999: 25669.140 ms/op
                 executeQuery·p1.00:   25669.140 ms/op

Iteration   5: 24763.171 ms/op
                 executeQuery·p0.00:   24763.171 ms/op
                 executeQuery·p0.50:   24763.171 ms/op
                 executeQuery·p0.90:   24763.171 ms/op
                 executeQuery·p0.95:   24763.171 ms/op
                 executeQuery·p0.99:   24763.171 ms/op
                 executeQuery·p0.999:  24763.171 ms/op
                 executeQuery·p0.9999: 24763.171 ms/op
                 executeQuery·p1.00:   24763.171 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  25789.936 ±(99.9%) 5750.473 ms/op

  Histogram, ms/op:
    [24000.000, 24500.000) = 0 
    [24500.000, 25000.000) = 2 
    [25000.000, 25500.000) = 1 
    [25500.000, 26000.000) = 1 
    [26000.000, 26500.000) = 0 
    [26500.000, 27000.000) = 0 
    [27000.000, 27500.000) = 0 
    [27500.000, 28000.000) = 0 
    [28000.000, 28500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  24763.171 ms/op
     p(50.0000) =  25232.933 ms/op
     p(90.0000) =  28387.049 ms/op
     p(95.0000) =  28387.049 ms/op
     p(99.0000) =  28387.049 ms/op
     p(99.9000) =  28387.049 ms/op
     p(99.9900) =  28387.049 ms/op
     p(99.9990) =  28387.049 ms/op
     p(99.9999) =  28387.049 ms/op
    p(100.0000) =  28387.049 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 25.00% complete, ETA 05:32:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

53418.656 ms/op
# Warmup Iteration   2: 51875.152 ms/op
# Warmup Iteration   3: 49257.906 ms/op
# Warmup Iteration   4: 51136.954 ms/op
# Warmup Iteration   5: 49459.233 ms/op
Iteration   1: 51472.499 ms/op
                 executeQuery·p0.00:   51472.499 ms/op
                 executeQuery·p0.50:   51472.499 ms/op
                 executeQuery·p0.90:   51472.499 ms/op
                 executeQuery·p0.95:   51472.499 ms/op
                 executeQuery·p0.99:   51472.499 ms/op
                 executeQuery·p0.999:  51472.499 ms/op
                 executeQuery·p0.9999: 51472.499 ms/op
                 executeQuery·p1.00:   51472.499 ms/op

Iteration   2: 49593.450 ms/op
                 executeQuery·p0.00:   49593.450 ms/op
                 executeQuery·p0.50:   49593.450 ms/op
                 executeQuery·p0.90:   49593.450 ms/op
                 executeQuery·p0.95:   49593.450 ms/op
                 executeQuery·p0.99:   49593.450 ms/op
                 executeQuery·p0.999:  49593.450 ms/op
                 executeQuery·p0.9999: 49593.450 ms/op
                 executeQuery·p1.00:   49593.450 ms/op

Iteration   3: 51204.063 ms/op
                 executeQuery·p0.00:   51204.063 ms/op
                 executeQuery·p0.50:   51204.063 ms/op
                 executeQuery·p0.90:   51204.063 ms/op
                 executeQuery·p0.95:   51204.063 ms/op
                 executeQuery·p0.99:   51204.063 ms/op
                 executeQuery·p0.999:  51204.063 ms/op
                 executeQuery·p0.9999: 51204.063 ms/op
                 executeQuery·p1.00:   51204.063 ms/op

Iteration   4: 50734.301 ms/op
                 executeQuery·p0.00:   50734.301 ms/op
                 executeQuery·p0.50:   50734.301 ms/op
                 executeQuery·p0.90:   50734.301 ms/op
                 executeQuery·p0.95:   50734.301 ms/op
                 executeQuery·p0.99:   50734.301 ms/op
                 executeQuery·p0.999:  50734.301 ms/op
                 executeQuery·p0.9999: 50734.301 ms/op
                 executeQuery·p1.00:   50734.301 ms/op

Iteration   5: 50465.866 ms/op
                 executeQuery·p0.00:   50465.866 ms/op
                 executeQuery·p0.50:   50465.866 ms/op
                 executeQuery·p0.90:   50465.866 ms/op
                 executeQuery·p0.95:   50465.866 ms/op
                 executeQuery·p0.99:   50465.866 ms/op
                 executeQuery·p0.999:  50465.866 ms/op
                 executeQuery·p0.9999: 50465.866 ms/op
                 executeQuery·p1.00:   50465.866 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  50694.036 ±(99.9%) 2810.643 ms/op

  Histogram, ms/op:
    [49000.000, 49250.000) = 0 
    [49250.000, 49500.000) = 0 
    [49500.000, 49750.000) = 1 
    [49750.000, 50000.000) = 0 
    [50000.000, 50250.000) = 0 
    [50250.000, 50500.000) = 1 
    [50500.000, 50750.000) = 1 
    [50750.000, 51000.000) = 0 
    [51000.000, 51250.000) = 1 
    [51250.000, 51500.000) = 1 
    [51500.000, 51750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  49593.450 ms/op
     p(50.0000) =  50734.301 ms/op
     p(90.0000) =  51472.499 ms/op
     p(95.0000) =  51472.499 ms/op
     p(99.0000) =  51472.499 ms/op
     p(99.9000) =  51472.499 ms/op
     p(99.9900) =  51472.499 ms/op
     p(99.9990) =  51472.499 ms/op
     p(99.9999) =  51472.499 ms/op
    p(100.0000) =  51472.499 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 26.04% complete, ETA 05:58:37
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

29360.128 ms/op
# Warmup Iteration   2: 8816.427 ms/op
# Warmup Iteration   3: 8568.963 ms/op
# Warmup Iteration   4: 8195.670 ms/op
# Warmup Iteration   5: 8199.864 ms/op
Iteration   1: 8178.893 ms/op
                 executeQuery·p0.00:   8178.893 ms/op
                 executeQuery·p0.50:   8178.893 ms/op
                 executeQuery·p0.90:   8178.893 ms/op
                 executeQuery·p0.95:   8178.893 ms/op
                 executeQuery·p0.99:   8178.893 ms/op
                 executeQuery·p0.999:  8178.893 ms/op
                 executeQuery·p0.9999: 8178.893 ms/op
                 executeQuery·p1.00:   8178.893 ms/op

Iteration   2: 8183.087 ms/op
                 executeQuery·p0.00:   8178.893 ms/op
                 executeQuery·p0.50:   8183.087 ms/op
                 executeQuery·p0.90:   8187.281 ms/op
                 executeQuery·p0.95:   8187.281 ms/op
                 executeQuery·p0.99:   8187.281 ms/op
                 executeQuery·p0.999:  8187.281 ms/op
                 executeQuery·p0.9999: 8187.281 ms/op
                 executeQuery·p1.00:   8187.281 ms/op

Iteration   3: 8195.670 ms/op
                 executeQuery·p0.00:   8195.670 ms/op
                 executeQuery·p0.50:   8195.670 ms/op
                 executeQuery·p0.90:   8195.670 ms/op
                 executeQuery·p0.95:   8195.670 ms/op
                 executeQuery·p0.99:   8195.670 ms/op
                 executeQuery·p0.999:  8195.670 ms/op
                 executeQuery·p0.9999: 8195.670 ms/op
                 executeQuery·p1.00:   8195.670 ms/op

Iteration   4: 8199.864 ms/op
                 executeQuery·p0.00:   8195.670 ms/op
                 executeQuery·p0.50:   8199.864 ms/op
                 executeQuery·p0.90:   8204.059 ms/op
                 executeQuery·p0.95:   8204.059 ms/op
                 executeQuery·p0.99:   8204.059 ms/op
                 executeQuery·p0.999:  8204.059 ms/op
                 executeQuery·p0.9999: 8204.059 ms/op
                 executeQuery·p1.00:   8204.059 ms/op

Iteration   5: 8199.864 ms/op
                 executeQuery·p0.00:   8195.670 ms/op
                 executeQuery·p0.50:   8199.864 ms/op
                 executeQuery·p0.90:   8204.059 ms/op
                 executeQuery·p0.95:   8204.059 ms/op
                 executeQuery·p0.99:   8204.059 ms/op
                 executeQuery·p0.999:  8204.059 ms/op
                 executeQuery·p0.9999: 8204.059 ms/op
                 executeQuery·p1.00:   8204.059 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   8191.476 ±(99.9%) 14.946 ms/op

  Histogram, ms/op:
    [8170.000, 8172.500) = 0 
    [8172.500, 8175.000) = 0 
    [8175.000, 8177.500) = 0 
    [8177.500, 8180.000) = 3 
    [8180.000, 8182.500) = 0 
    [8182.500, 8185.000) = 0 
    [8185.000, 8187.500) = 1 
    [8187.500, 8190.000) = 0 
    [8190.000, 8192.500) = 0 
    [8192.500, 8195.000) = 0 
    [8195.000, 8197.500) = 4 
    [8197.500, 8200.000) = 0 
    [8200.000, 8202.500) = 0 
    [8202.500, 8205.000) = 2 
    [8205.000, 8207.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   8178.893 ms/op
     p(50.0000) =   8195.670 ms/op
     p(90.0000) =   8204.059 ms/op
     p(95.0000) =   8204.059 ms/op
     p(99.0000) =   8204.059 ms/op
     p(99.9000) =   8204.059 ms/op
     p(99.9900) =   8204.059 ms/op
     p(99.9990) =   8204.059 ms/op
     p(99.9999) =   8204.059 ms/op
    p(100.0000) =   8204.059 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 27.08% complete, ETA 05:48:06
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16978.543 ms/op
# Warmup Iteration   2: 13673.431 ms/op
# Warmup Iteration   3: 12096.373 ms/op
# Warmup Iteration   4: 13539.213 ms/op
# Warmup Iteration   5: 12515.803 ms/op
Iteration   1: 12465.471 ms/op
                 executeQuery·p0.00:   12465.471 ms/op
                 executeQuery·p0.50:   12465.471 ms/op
                 executeQuery·p0.90:   12465.471 ms/op
                 executeQuery·p0.95:   12465.471 ms/op
                 executeQuery·p0.99:   12465.471 ms/op
                 executeQuery·p0.999:  12465.471 ms/op
                 executeQuery·p0.9999: 12465.471 ms/op
                 executeQuery·p1.00:   12465.471 ms/op

Iteration   2: 12683.575 ms/op
                 executeQuery·p0.00:   12683.575 ms/op
                 executeQuery·p0.50:   12683.575 ms/op
                 executeQuery·p0.90:   12683.575 ms/op
                 executeQuery·p0.95:   12683.575 ms/op
                 executeQuery·p0.99:   12683.575 ms/op
                 executeQuery·p0.999:  12683.575 ms/op
                 executeQuery·p0.9999: 12683.575 ms/op
                 executeQuery·p1.00:   12683.575 ms/op

Iteration   3: 12515.803 ms/op
                 executeQuery·p0.00:   12515.803 ms/op
                 executeQuery·p0.50:   12515.803 ms/op
                 executeQuery·p0.90:   12515.803 ms/op
                 executeQuery·p0.95:   12515.803 ms/op
                 executeQuery·p0.99:   12515.803 ms/op
                 executeQuery·p0.999:  12515.803 ms/op
                 executeQuery·p0.9999: 12515.803 ms/op
                 executeQuery·p1.00:   12515.803 ms/op

Iteration   4: 12499.026 ms/op
                 executeQuery·p0.00:   12499.026 ms/op
                 executeQuery·p0.50:   12499.026 ms/op
                 executeQuery·p0.90:   12499.026 ms/op
                 executeQuery·p0.95:   12499.026 ms/op
                 executeQuery·p0.99:   12499.026 ms/op
                 executeQuery·p0.999:  12499.026 ms/op
                 executeQuery·p0.9999: 12499.026 ms/op
                 executeQuery·p1.00:   12499.026 ms/op

Iteration   5: 12499.026 ms/op
                 executeQuery·p0.00:   12499.026 ms/op
                 executeQuery·p0.50:   12499.026 ms/op
                 executeQuery·p0.90:   12499.026 ms/op
                 executeQuery·p0.95:   12499.026 ms/op
                 executeQuery·p0.99:   12499.026 ms/op
                 executeQuery·p0.999:  12499.026 ms/op
                 executeQuery·p0.9999: 12499.026 ms/op
                 executeQuery·p1.00:   12499.026 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  12532.580 ±(99.9%) 332.565 ms/op

  Histogram, ms/op:
    [12400.000, 12425.000) = 0 
    [12425.000, 12450.000) = 0 
    [12450.000, 12475.000) = 1 
    [12475.000, 12500.000) = 2 
    [12500.000, 12525.000) = 1 
    [12525.000, 12550.000) = 0 
    [12550.000, 12575.000) = 0 
    [12575.000, 12600.000) = 0 
    [12600.000, 12625.000) = 0 
    [12625.000, 12650.000) = 0 
    [12650.000, 12675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12465.471 ms/op
     p(50.0000) =  12499.026 ms/op
     p(90.0000) =  12683.575 ms/op
     p(95.0000) =  12683.575 ms/op
     p(99.0000) =  12683.575 ms/op
     p(99.9000) =  12683.575 ms/op
     p(99.9900) =  12683.575 ms/op
     p(99.9990) =  12683.575 ms/op
     p(99.9999) =  12683.575 ms/op
    p(100.0000) =  12683.575 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 28.13% complete, ETA 05:36:06
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

17347.641 ms/op
# Warmup Iteration   2: 16106.127 ms/op
# Warmup Iteration   3: 14529.069 ms/op
# Warmup Iteration   4: 15032.386 ms/op
# Warmup Iteration   5: 15133.049 ms/op
Iteration   1: 15787.360 ms/op
                 executeQuery·p0.00:   15787.360 ms/op
                 executeQuery·p0.50:   15787.360 ms/op
                 executeQuery·p0.90:   15787.360 ms/op
                 executeQuery·p0.95:   15787.360 ms/op
                 executeQuery·p0.99:   15787.360 ms/op
                 executeQuery·p0.999:  15787.360 ms/op
                 executeQuery·p0.9999: 15787.360 ms/op
                 executeQuery·p1.00:   15787.360 ms/op

Iteration   2: 15166.603 ms/op
                 executeQuery·p0.00:   15166.603 ms/op
                 executeQuery·p0.50:   15166.603 ms/op
                 executeQuery·p0.90:   15166.603 ms/op
                 executeQuery·p0.95:   15166.603 ms/op
                 executeQuery·p0.99:   15166.603 ms/op
                 executeQuery·p0.999:  15166.603 ms/op
                 executeQuery·p0.9999: 15166.603 ms/op
                 executeQuery·p1.00:   15166.603 ms/op

Iteration   3: 14562.623 ms/op
                 executeQuery·p0.00:   14562.623 ms/op
                 executeQuery·p0.50:   14562.623 ms/op
                 executeQuery·p0.90:   14562.623 ms/op
                 executeQuery·p0.95:   14562.623 ms/op
                 executeQuery·p0.99:   14562.623 ms/op
                 executeQuery·p0.999:  14562.623 ms/op
                 executeQuery·p0.9999: 14562.623 ms/op
                 executeQuery·p1.00:   14562.623 ms/op

Iteration   4: 14612.955 ms/op
                 executeQuery·p0.00:   14612.955 ms/op
                 executeQuery·p0.50:   14612.955 ms/op
                 executeQuery·p0.90:   14612.955 ms/op
                 executeQuery·p0.95:   14612.955 ms/op
                 executeQuery·p0.99:   14612.955 ms/op
                 executeQuery·p0.999:  14612.955 ms/op
                 executeQuery·p0.9999: 14612.955 ms/op
                 executeQuery·p1.00:   14612.955 ms/op

Iteration   5: 15183.380 ms/op
                 executeQuery·p0.00:   15183.380 ms/op
                 executeQuery·p0.50:   15183.380 ms/op
                 executeQuery·p0.90:   15183.380 ms/op
                 executeQuery·p0.95:   15183.380 ms/op
                 executeQuery·p0.99:   15183.380 ms/op
                 executeQuery·p0.999:  15183.380 ms/op
                 executeQuery·p0.9999: 15183.380 ms/op
                 executeQuery·p1.00:   15183.380 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  15062.585 ±(99.9%) 1928.053 ms/op

  Histogram, ms/op:
    [14000.000, 14125.000) = 0 
    [14125.000, 14250.000) = 0 
    [14250.000, 14375.000) = 0 
    [14375.000, 14500.000) = 0 
    [14500.000, 14625.000) = 2 
    [14625.000, 14750.000) = 0 
    [14750.000, 14875.000) = 0 
    [14875.000, 15000.000) = 0 
    [15000.000, 15125.000) = 0 
    [15125.000, 15250.000) = 2 
    [15250.000, 15375.000) = 0 
    [15375.000, 15500.000) = 0 
    [15500.000, 15625.000) = 0 
    [15625.000, 15750.000) = 0 
    [15750.000, 15875.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  14562.623 ms/op
     p(50.0000) =  15166.603 ms/op
     p(90.0000) =  15787.360 ms/op
     p(95.0000) =  15787.360 ms/op
     p(99.0000) =  15787.360 ms/op
     p(99.9000) =  15787.360 ms/op
     p(99.9900) =  15787.360 ms/op
     p(99.9990) =  15787.360 ms/op
     p(99.9999) =  15787.360 ms/op
    p(100.0000) =  15787.360 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 29.17% complete, ETA 05:25:43
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

61941.481 ms/op
# Warmup Iteration   2: 51338.281 ms/op
# Warmup Iteration   3: 50532.975 ms/op
# Warmup Iteration   4: 52613.349 ms/op
# Warmup Iteration   5: 51606.716 ms/op
Iteration   1: 58451.821 ms/op
                 executeQuery·p0.00:   58451.821 ms/op
                 executeQuery·p0.50:   58451.821 ms/op
                 executeQuery·p0.90:   58451.821 ms/op
                 executeQuery·p0.95:   58451.821 ms/op
                 executeQuery·p0.99:   58451.821 ms/op
                 executeQuery·p0.999:  58451.821 ms/op
                 executeQuery·p0.9999: 58451.821 ms/op
                 executeQuery·p1.00:   58451.821 ms/op

Iteration   2: 51808.043 ms/op
                 executeQuery·p0.00:   51808.043 ms/op
                 executeQuery·p0.50:   51808.043 ms/op
                 executeQuery·p0.90:   51808.043 ms/op
                 executeQuery·p0.95:   51808.043 ms/op
                 executeQuery·p0.99:   51808.043 ms/op
                 executeQuery·p0.999:  51808.043 ms/op
                 executeQuery·p0.9999: 51808.043 ms/op
                 executeQuery·p1.00:   51808.043 ms/op

Iteration   3: 51002.737 ms/op
                 executeQuery·p0.00:   51002.737 ms/op
                 executeQuery·p0.50:   51002.737 ms/op
                 executeQuery·p0.90:   51002.737 ms/op
                 executeQuery·p0.95:   51002.737 ms/op
                 executeQuery·p0.99:   51002.737 ms/op
                 executeQuery·p0.999:  51002.737 ms/op
                 executeQuery·p0.9999: 51002.737 ms/op
                 executeQuery·p1.00:   51002.737 ms/op

Iteration   4: 50734.301 ms/op
                 executeQuery·p0.00:   50734.301 ms/op
                 executeQuery·p0.50:   50734.301 ms/op
                 executeQuery·p0.90:   50734.301 ms/op
                 executeQuery·p0.95:   50734.301 ms/op
                 executeQuery·p0.99:   50734.301 ms/op
                 executeQuery·p0.999:  50734.301 ms/op
                 executeQuery·p0.9999: 50734.301 ms/op
                 executeQuery·p1.00:   50734.301 ms/op

Iteration   5: 52277.805 ms/op
                 executeQuery·p0.00:   52277.805 ms/op
                 executeQuery·p0.50:   52277.805 ms/op
                 executeQuery·p0.90:   52277.805 ms/op
                 executeQuery·p0.95:   52277.805 ms/op
                 executeQuery·p0.99:   52277.805 ms/op
                 executeQuery·p0.999:  52277.805 ms/op
                 executeQuery·p0.9999: 52277.805 ms/op
                 executeQuery·p1.00:   52277.805 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  52854.941 ±(99.9%) 12280.161 ms/op

  Histogram, ms/op:
    [50000.000, 50500.000) = 0 
    [50500.000, 51000.000) = 1 
    [51000.000, 51500.000) = 1 
    [51500.000, 52000.000) = 1 
    [52000.000, 52500.000) = 1 
    [52500.000, 53000.000) = 0 
    [53000.000, 53500.000) = 0 
    [53500.000, 54000.000) = 0 
    [54000.000, 54500.000) = 0 
    [54500.000, 55000.000) = 0 
    [55000.000, 55500.000) = 0 
    [55500.000, 56000.000) = 0 
    [56000.000, 56500.000) = 0 
    [56500.000, 57000.000) = 0 
    [57000.000, 57500.000) = 0 
    [57500.000, 58000.000) = 0 
    [58000.000, 58500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  50734.301 ms/op
     p(50.0000) =  51808.043 ms/op
     p(90.0000) =  58451.821 ms/op
     p(95.0000) =  58451.821 ms/op
     p(99.0000) =  58451.821 ms/op
     p(99.9000) =  58451.821 ms/op
     p(99.9900) =  58451.821 ms/op
     p(99.9990) =  58451.821 ms/op
     p(99.9999) =  58451.821 ms/op
    p(100.0000) =  58451.821 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 30.21% complete, ETA 05:34:21
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_849100008 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_849100008() {
        this(4);
    }
    public KeyValueMap_849100008(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_849100008 aggregation_state_map = new KeyValueMap_849100008();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

112877.109 ms/op
# Warmup Iteration   2: 102810.780 ms/op
# Warmup Iteration   3: 101200.167 ms/op
# Warmup Iteration   4: 101200.167 ms/op
# Warmup Iteration   5: 102273.909 ms/op
Iteration   1: 102944.997 ms/op
                 executeQuery·p0.00:   102944.997 ms/op
                 executeQuery·p0.50:   102944.997 ms/op
                 executeQuery·p0.90:   102944.997 ms/op
                 executeQuery·p0.95:   102944.997 ms/op
                 executeQuery·p0.99:   102944.997 ms/op
                 executeQuery·p0.999:  102944.997 ms/op
                 executeQuery·p0.9999: 102944.997 ms/op
                 executeQuery·p1.00:   102944.997 ms/op

Iteration   2: 106434.658 ms/op
                 executeQuery·p0.00:   106434.658 ms/op
                 executeQuery·p0.50:   106434.658 ms/op
                 executeQuery·p0.90:   106434.658 ms/op
                 executeQuery·p0.95:   106434.658 ms/op
                 executeQuery·p0.99:   106434.658 ms/op
                 executeQuery·p0.999:  106434.658 ms/op
                 executeQuery·p0.9999: 106434.658 ms/op
                 executeQuery·p1.00:   106434.658 ms/op

Iteration   3: 102810.780 ms/op
                 executeQuery·p0.00:   102810.780 ms/op
                 executeQuery·p0.50:   102810.780 ms/op
                 executeQuery·p0.90:   102810.780 ms/op
                 executeQuery·p0.95:   102810.780 ms/op
                 executeQuery·p0.99:   102810.780 ms/op
                 executeQuery·p0.999:  102810.780 ms/op
                 executeQuery·p0.9999: 102810.780 ms/op
                 executeQuery·p1.00:   102810.780 ms/op

Iteration   4: 102273.909 ms/op
                 executeQuery·p0.00:   102273.909 ms/op
                 executeQuery·p0.50:   102273.909 ms/op
                 executeQuery·p0.90:   102273.909 ms/op
                 executeQuery·p0.95:   102273.909 ms/op
                 executeQuery·p0.99:   102273.909 ms/op
                 executeQuery·p0.999:  102273.909 ms/op
                 executeQuery·p0.9999: 102273.909 ms/op
                 executeQuery·p1.00:   102273.909 ms/op

Iteration   5: 100529.078 ms/op
                 executeQuery·p0.00:   100529.078 ms/op
                 executeQuery·p0.50:   100529.078 ms/op
                 executeQuery·p0.90:   100529.078 ms/op
                 executeQuery·p0.95:   100529.078 ms/op
                 executeQuery·p0.99:   100529.078 ms/op
                 executeQuery·p0.999:  100529.078 ms/op
                 executeQuery·p0.9999: 100529.078 ms/op
                 executeQuery·p1.00:   100529.078 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean = 102998.684 ±(99.9%) 8274.039 ms/op

  Histogram, ms/op:
    [100000.000, 100500.000) = 0 
    [100500.000, 101000.000) = 1 
    [101000.000, 101500.000) = 0 
    [101500.000, 102000.000) = 0 
    [102000.000, 102500.000) = 1 
    [102500.000, 103000.000) = 2 
    [103000.000, 103500.000) = 0 
    [103500.000, 104000.000) = 0 
    [104000.000, 104500.000) = 0 
    [104500.000, 105000.000) = 0 
    [105000.000, 105500.000) = 0 
    [105500.000, 106000.000) = 0 
    [106000.000, 106500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) = 100529.078 ms/op
     p(50.0000) = 102810.780 ms/op
     p(90.0000) = 106434.658 ms/op
     p(95.0000) = 106434.658 ms/op
     p(99.0000) = 106434.658 ms/op
     p(99.9000) = 106434.658 ms/op
     p(99.9900) = 106434.658 ms/op
     p(99.9990) = 106434.658 ms/op
     p(99.9999) = 106434.658 ms/op
    p(100.0000) = 106434.658 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 31.25% complete, ETA 06:11:55
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

82.811 ±(99.9%) 17.437 ms/op
# Warmup Iteration   2: 76.388 ±(99.9%) 0.607 ms/op
# Warmup Iteration   3: 77.680 ±(99.9%) 0.289 ms/op
# Warmup Iteration   4: 77.560 ±(99.9%) 0.246 ms/op
# Warmup Iteration   5: 77.747 ±(99.9%) 0.453 ms/op
Iteration   1: 75.760 ±(99.9%) 0.468 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   75.366 ms/op
                 executeFilterQuery·p0.90:   78.119 ms/op
                 executeFilterQuery·p0.95:   79.036 ms/op
                 executeFilterQuery·p0.99:   80.263 ms/op
                 executeFilterQuery·p0.999:  80.347 ms/op
                 executeFilterQuery·p0.9999: 80.347 ms/op
                 executeFilterQuery·p1.00:   80.347 ms/op

Iteration   2: 76.456 ±(99.9%) 0.505 ms/op
                 executeFilterQuery·p0.00:   73.794 ms/op
                 executeFilterQuery·p0.50:   77.070 ms/op
                 executeFilterQuery·p0.90:   78.381 ms/op
                 executeFilterQuery·p0.95:   78.709 ms/op
                 executeFilterQuery·p0.99:   79.652 ms/op
                 executeFilterQuery·p0.999:  79.692 ms/op
                 executeFilterQuery·p0.9999: 79.692 ms/op
                 executeFilterQuery·p1.00:   79.692 ms/op

Iteration   3: 76.160 ±(99.9%) 0.493 ms/op
                 executeFilterQuery·p0.00:   73.531 ms/op
                 executeFilterQuery·p0.50:   75.956 ms/op
                 executeFilterQuery·p0.90:   78.250 ms/op
                 executeFilterQuery·p0.95:   78.630 ms/op
                 executeFilterQuery·p0.99:   80.175 ms/op
                 executeFilterQuery·p0.999:  80.216 ms/op
                 executeFilterQuery·p0.9999: 80.216 ms/op
                 executeFilterQuery·p1.00:   80.216 ms/op

Iteration   4: 75.546 ±(99.9%) 0.551 ms/op
                 executeFilterQuery·p0.00:   72.090 ms/op
                 executeFilterQuery·p0.50:   75.366 ms/op
                 executeFilterQuery·p0.90:   77.595 ms/op
                 executeFilterQuery·p0.95:   78.302 ms/op
                 executeFilterQuery·p0.99:   86.434 ms/op
                 executeFilterQuery·p0.999:  89.915 ms/op
                 executeFilterQuery·p0.9999: 89.915 ms/op
                 executeFilterQuery·p1.00:   89.915 ms/op

Iteration   5: 74.444 ±(99.9%) 0.364 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   74.056 ms/op
                 executeFilterQuery·p0.90:   76.284 ms/op
                 executeFilterQuery·p0.95:   76.579 ms/op
                 executeFilterQuery·p0.99:   76.979 ms/op
                 executeFilterQuery·p0.999:  77.070 ms/op
                 executeFilterQuery·p0.9999: 77.070 ms/op
                 executeFilterQuery·p1.00:   77.070 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 655
  mean =     75.664 ±(99.9%) 0.228 ms/op

  Histogram, ms/op:
    [70.000, 71.250) = 0 
    [71.250, 72.500) = 2 
    [72.500, 73.750) = 68 
    [73.750, 75.000) = 201 
    [75.000, 76.250) = 164 
    [76.250, 77.500) = 112 
    [77.500, 78.750) = 84 
    [78.750, 80.000) = 19 
    [80.000, 81.250) = 4 
    [81.250, 82.500) = 0 
    [82.500, 83.750) = 0 
    [83.750, 85.000) = 0 
    [85.000, 86.250) = 0 
    [86.250, 87.500) = 0 
    [87.500, 88.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.090 ms/op
     p(50.0000) =     75.366 ms/op
     p(90.0000) =     78.119 ms/op
     p(95.0000) =     78.512 ms/op
     p(99.0000) =     79.807 ms/op
     p(99.9000) =     89.915 ms/op
     p(99.9900) =     89.915 ms/op
     p(99.9990) =     89.915 ms/op
     p(99.9999) =     89.915 ms/op
    p(100.0000) =     89.915 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 32.29% complete, ETA 05:58:03
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

84.044 ±(99.9%) 17.552 ms/op
# Warmup Iteration   2: 78.010 ±(99.9%) 0.293 ms/op
# Warmup Iteration   3: 78.123 ±(99.9%) 0.250 ms/op
# Warmup Iteration   4: 76.208 ±(99.9%) 0.549 ms/op
# Warmup Iteration   5: 75.089 ±(99.9%) 0.424 ms/op
Iteration   1: 76.342 ±(99.9%) 0.482 ms/op
                 executeFilterQuery·p0.00:   73.400 ms/op
                 executeFilterQuery·p0.50:   76.677 ms/op
                 executeFilterQuery·p0.90:   78.106 ms/op
                 executeFilterQuery·p0.95:   78.643 ms/op
                 executeFilterQuery·p0.99:   80.818 ms/op
                 executeFilterQuery·p0.999:  81.265 ms/op
                 executeFilterQuery·p0.9999: 81.265 ms/op
                 executeFilterQuery·p1.00:   81.265 ms/op

Iteration   2: 77.605 ±(99.9%) 0.241 ms/op
                 executeFilterQuery·p0.00:   76.415 ms/op
                 executeFilterQuery·p0.50:   77.726 ms/op
                 executeFilterQuery·p0.90:   78.538 ms/op
                 executeFilterQuery·p0.95:   79.325 ms/op
                 executeFilterQuery·p0.99:   80.331 ms/op
                 executeFilterQuery·p0.999:  80.478 ms/op
                 executeFilterQuery·p0.9999: 80.478 ms/op
                 executeFilterQuery·p1.00:   80.478 ms/op

Iteration   3: 75.154 ±(99.9%) 0.600 ms/op
                 executeFilterQuery·p0.00:   73.400 ms/op
                 executeFilterQuery·p0.50:   74.580 ms/op
                 executeFilterQuery·p0.90:   77.555 ms/op
                 executeFilterQuery·p0.95:   78.820 ms/op
                 executeFilterQuery·p0.99:   87.674 ms/op
                 executeFilterQuery·p0.999:  90.702 ms/op
                 executeFilterQuery·p0.9999: 90.702 ms/op
                 executeFilterQuery·p1.00:   90.702 ms/op

Iteration   4: 75.396 ±(99.9%) 0.312 ms/op
                 executeFilterQuery·p0.00:   74.056 ms/op
                 executeFilterQuery·p0.50:   75.235 ms/op
                 executeFilterQuery·p0.90:   76.638 ms/op
                 executeFilterQuery·p0.95:   78.296 ms/op
                 executeFilterQuery·p0.99:   79.785 ms/op
                 executeFilterQuery·p0.999:  80.347 ms/op
                 executeFilterQuery·p0.9999: 80.347 ms/op
                 executeFilterQuery·p1.00:   80.347 ms/op

Iteration   5: 75.468 ±(99.9%) 0.320 ms/op
                 executeFilterQuery·p0.00:   74.318 ms/op
                 executeFilterQuery·p0.50:   75.366 ms/op
                 executeFilterQuery·p0.90:   77.201 ms/op
                 executeFilterQuery·p0.95:   78.034 ms/op
                 executeFilterQuery·p0.99:   79.517 ms/op
                 executeFilterQuery·p0.999:  79.561 ms/op
                 executeFilterQuery·p0.9999: 79.561 ms/op
                 executeFilterQuery·p1.00:   79.561 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 653
  mean =     75.980 ±(99.9%) 0.215 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 0 
    [ 72.500,  75.000) = 248 
    [ 75.000,  77.500) = 262 
    [ 77.500,  80.000) = 137 
    [ 80.000,  82.500) = 5 
    [ 82.500,  85.000) = 0 
    [ 85.000,  87.500) = 0 
    [ 87.500,  90.000) = 0 
    [ 90.000,  92.500) = 1 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     73.400 ms/op
     p(50.0000) =     75.629 ms/op
     p(90.0000) =     77.988 ms/op
     p(95.0000) =     78.643 ms/op
     p(99.0000) =     80.135 ms/op
     p(99.9000) =     90.702 ms/op
     p(99.9900) =     90.702 ms/op
     p(99.9990) =     90.702 ms/op
     p(99.9999) =     90.702 ms/op
    p(100.0000) =     90.702 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 33.33% complete, ETA 05:44:57
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

84.344 ±(99.9%) 17.366 ms/op
# Warmup Iteration   2: 78.284 ±(99.9%) 0.601 ms/op
# Warmup Iteration   3: 79.036 ±(99.9%) 0.338 ms/op
# Warmup Iteration   4: 79.142 ±(99.9%) 0.309 ms/op
# Warmup Iteration   5: 79.359 ±(99.9%) 0.331 ms/op
Iteration   1: 76.586 ±(99.9%) 0.377 ms/op
                 executeFilterQuery·p0.00:   74.318 ms/op
                 executeFilterQuery·p0.50:   76.153 ms/op
                 executeFilterQuery·p0.90:   78.512 ms/op
                 executeFilterQuery·p0.95:   78.905 ms/op
                 executeFilterQuery·p0.99:   80.583 ms/op
                 executeFilterQuery·p0.999:  81.134 ms/op
                 executeFilterQuery·p0.9999: 81.134 ms/op
                 executeFilterQuery·p1.00:   81.134 ms/op

Iteration   2: 76.447 ±(99.9%) 0.440 ms/op
                 executeFilterQuery·p0.00:   74.449 ms/op
                 executeFilterQuery·p0.50:   75.825 ms/op
                 executeFilterQuery·p0.90:   78.381 ms/op
                 executeFilterQuery·p0.95:   78.964 ms/op
                 executeFilterQuery·p0.99:   80.618 ms/op
                 executeFilterQuery·p0.999:  80.740 ms/op
                 executeFilterQuery·p0.9999: 80.740 ms/op
                 executeFilterQuery·p1.00:   80.740 ms/op

Iteration   3: 76.898 ±(99.9%) 0.497 ms/op
                 executeFilterQuery·p0.00:   74.449 ms/op
                 executeFilterQuery·p0.50:   76.808 ms/op
                 executeFilterQuery·p0.90:   79.036 ms/op
                 executeFilterQuery·p0.95:   79.430 ms/op
                 executeFilterQuery·p0.99:   80.360 ms/op
                 executeFilterQuery·p0.999:  80.478 ms/op
                 executeFilterQuery·p0.9999: 80.478 ms/op
                 executeFilterQuery·p1.00:   80.478 ms/op

Iteration   4: 76.674 ±(99.9%) 0.660 ms/op
                 executeFilterQuery·p0.00:   73.794 ms/op
                 executeFilterQuery·p0.50:   76.022 ms/op
                 executeFilterQuery·p0.90:   79.167 ms/op
                 executeFilterQuery·p0.95:   79.823 ms/op
                 executeFilterQuery·p0.99:   88.303 ms/op
                 executeFilterQuery·p0.999:  89.129 ms/op
                 executeFilterQuery·p0.9999: 89.129 ms/op
                 executeFilterQuery·p1.00:   89.129 ms/op

Iteration   5: 75.614 ±(99.9%) 0.319 ms/op
                 executeFilterQuery·p0.00:   74.056 ms/op
                 executeFilterQuery·p0.50:   75.235 ms/op
                 executeFilterQuery·p0.90:   76.939 ms/op
                 executeFilterQuery·p0.95:   78.211 ms/op
                 executeFilterQuery·p0.99:   79.082 ms/op
                 executeFilterQuery·p0.999:  79.299 ms/op
                 executeFilterQuery·p0.9999: 79.299 ms/op
                 executeFilterQuery·p1.00:   79.299 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 649
  mean =     76.440 ±(99.9%) 0.214 ms/op

  Histogram, ms/op:
    [70.000, 71.250) = 0 
    [71.250, 72.500) = 0 
    [72.500, 73.750) = 0 
    [73.750, 75.000) = 136 
    [75.000, 76.250) = 224 
    [76.250, 77.500) = 105 
    [77.500, 78.750) = 123 
    [78.750, 80.000) = 52 
    [80.000, 81.250) = 7 
    [81.250, 82.500) = 0 
    [82.500, 83.750) = 0 
    [83.750, 85.000) = 0 
    [85.000, 86.250) = 0 
    [86.250, 87.500) = 1 
    [87.500, 88.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     73.794 ms/op
     p(50.0000) =     75.891 ms/op
     p(90.0000) =     78.643 ms/op
     p(95.0000) =     79.167 ms/op
     p(99.0000) =     80.413 ms/op
     p(99.9000) =     89.129 ms/op
     p(99.9900) =     89.129 ms/op
     p(99.9990) =     89.129 ms/op
     p(99.9999) =     89.129 ms/op
    p(100.0000) =     89.129 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 34.38% complete, ETA 05:32:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1749.025 ±(99.9%) 6452.641 ms/op
# Warmup Iteration   2: 735.876 ±(99.9%) 19.159 ms/op
# Warmup Iteration   3: 730.708 ±(99.9%) 16.487 ms/op
# Warmup Iteration   4: 751.230 ±(99.9%) 3.703 ms/op
# Warmup Iteration   5: 756.173 ±(99.9%) 7.899 ms/op
Iteration   1: 751.380 ±(99.9%) 7.346 ms/op
                 executeFilterQuery·p0.00:   734.003 ms/op
                 executeFilterQuery·p0.50:   749.732 ms/op
                 executeFilterQuery·p0.90:   759.693 ms/op
                 executeFilterQuery·p0.95:   760.218 ms/op
                 executeFilterQuery·p0.99:   760.218 ms/op
                 executeFilterQuery·p0.999:  760.218 ms/op
                 executeFilterQuery·p0.9999: 760.218 ms/op
                 executeFilterQuery·p1.00:   760.218 ms/op

Iteration   2: 753.701 ±(99.9%) 3.831 ms/op
                 executeFilterQuery·p0.00:   749.732 ms/op
                 executeFilterQuery·p0.50:   752.878 ms/op
                 executeFilterQuery·p0.90:   758.645 ms/op
                 executeFilterQuery·p0.95:   759.169 ms/op
                 executeFilterQuery·p0.99:   759.169 ms/op
                 executeFilterQuery·p0.999:  759.169 ms/op
                 executeFilterQuery·p0.9999: 759.169 ms/op
                 executeFilterQuery·p1.00:   759.169 ms/op

Iteration   3: 754.376 ±(99.9%) 4.539 ms/op
                 executeFilterQuery·p0.00:   746.586 ms/op
                 executeFilterQuery·p0.50:   756.023 ms/op
                 executeFilterQuery·p0.90:   758.120 ms/op
                 executeFilterQuery·p0.95:   758.120 ms/op
                 executeFilterQuery·p0.99:   758.120 ms/op
                 executeFilterQuery·p0.999:  758.120 ms/op
                 executeFilterQuery·p0.9999: 758.120 ms/op
                 executeFilterQuery·p1.00:   758.120 ms/op

Iteration   4: 754.151 ±(99.9%) 4.781 ms/op
                 executeFilterQuery·p0.00:   746.586 ms/op
                 executeFilterQuery·p0.50:   755.499 ms/op
                 executeFilterQuery·p0.90:   759.169 ms/op
                 executeFilterQuery·p0.95:   760.218 ms/op
                 executeFilterQuery·p0.99:   760.218 ms/op
                 executeFilterQuery·p0.999:  760.218 ms/op
                 executeFilterQuery·p0.9999: 760.218 ms/op
                 executeFilterQuery·p1.00:   760.218 ms/op

Iteration   5: 730.857 ±(99.9%) 16.792 ms/op
                 executeFilterQuery·p0.00:   719.323 ms/op
                 executeFilterQuery·p0.50:   725.090 ms/op
                 executeFilterQuery·p0.90:   757.072 ms/op
                 executeFilterQuery·p0.95:   758.120 ms/op
                 executeFilterQuery·p0.99:   758.120 ms/op
                 executeFilterQuery·p0.999:  758.120 ms/op
                 executeFilterQuery·p0.9999: 758.120 ms/op
                 executeFilterQuery·p1.00:   758.120 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 70
  mean =    748.893 ±(99.9%) 4.896 ms/op

  Histogram, ms/op:
    [710.000, 715.000) = 0 
    [715.000, 720.000) = 4 
    [720.000, 725.000) = 3 
    [725.000, 730.000) = 3 
    [730.000, 735.000) = 1 
    [735.000, 740.000) = 0 
    [740.000, 745.000) = 1 
    [745.000, 750.000) = 17 
    [750.000, 755.000) = 15 
    [755.000, 760.000) = 24 
    [760.000, 765.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    719.323 ms/op
     p(50.0000) =    753.402 ms/op
     p(90.0000) =    758.120 ms/op
     p(95.0000) =    759.169 ms/op
     p(99.0000) =    760.218 ms/op
     p(99.9000) =    760.218 ms/op
     p(99.9900) =    760.218 ms/op
     p(99.9990) =    760.218 ms/op
     p(99.9999) =    760.218 ms/op
    p(100.0000) =    760.218 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 35.42% complete, ETA 05:20:53
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1768.948 ±(99.9%) 6495.391 ms/op
# Warmup Iteration   2: 732.206 ±(99.9%) 22.131 ms/op
# Warmup Iteration   3: 723.967 ±(99.9%) 16.050 ms/op
# Warmup Iteration   4: 757.596 ±(99.9%) 9.817 ms/op
# Warmup Iteration   5: 749.957 ±(99.9%) 8.328 ms/op
Iteration   1: 750.406 ±(99.9%) 9.925 ms/op
                 executeFilterQuery·p0.00:   742.392 ms/op
                 executeFilterQuery·p0.50:   745.538 ms/op
                 executeFilterQuery·p0.90:   763.363 ms/op
                 executeFilterQuery·p0.95:   763.363 ms/op
                 executeFilterQuery·p0.99:   763.363 ms/op
                 executeFilterQuery·p0.999:  763.363 ms/op
                 executeFilterQuery·p0.9999: 763.363 ms/op
                 executeFilterQuery·p1.00:   763.363 ms/op

Iteration   2: 761.491 ±(99.9%) 6.314 ms/op
                 executeFilterQuery·p0.00:   748.683 ms/op
                 executeFilterQuery·p0.50:   763.363 ms/op
                 executeFilterQuery·p0.90:   767.033 ms/op
                 executeFilterQuery·p0.95:   767.558 ms/op
                 executeFilterQuery·p0.99:   767.558 ms/op
                 executeFilterQuery·p0.999:  767.558 ms/op
                 executeFilterQuery·p0.9999: 767.558 ms/op
                 executeFilterQuery·p1.00:   767.558 ms/op

Iteration   3: 747.260 ±(99.9%) 5.282 ms/op
                 executeFilterQuery·p0.00:   744.489 ms/op
                 executeFilterQuery·p0.50:   745.538 ms/op
                 executeFilterQuery·p0.90:   756.023 ms/op
                 executeFilterQuery·p0.95:   762.315 ms/op
                 executeFilterQuery·p0.99:   762.315 ms/op
                 executeFilterQuery·p0.999:  762.315 ms/op
                 executeFilterQuery·p0.9999: 762.315 ms/op
                 executeFilterQuery·p1.00:   762.315 ms/op

Iteration   4: 756.922 ±(99.9%) 10.100 ms/op
                 executeFilterQuery·p0.00:   743.440 ms/op
                 executeFilterQuery·p0.50:   758.120 ms/op
                 executeFilterQuery·p0.90:   766.509 ms/op
                 executeFilterQuery·p0.95:   767.558 ms/op
                 executeFilterQuery·p0.99:   767.558 ms/op
                 executeFilterQuery·p0.999:  767.558 ms/op
                 executeFilterQuery·p0.9999: 767.558 ms/op
                 executeFilterQuery·p1.00:   767.558 ms/op

Iteration   5: 721.795 ±(99.9%) 16.109 ms/op
                 executeFilterQuery·p0.00:   708.837 ms/op
                 executeFilterQuery·p0.50:   714.080 ms/op
                 executeFilterQuery·p0.90:   745.538 ms/op
                 executeFilterQuery·p0.95:   745.538 ms/op
                 executeFilterQuery·p0.99:   745.538 ms/op
                 executeFilterQuery·p0.999:  745.538 ms/op
                 executeFilterQuery·p0.9999: 745.538 ms/op
                 executeFilterQuery·p1.00:   745.538 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 70
  mean =    747.575 ±(99.9%) 6.771 ms/op

  Histogram, ms/op:
    [700.000, 705.000) = 0 
    [705.000, 710.000) = 3 
    [710.000, 715.000) = 5 
    [715.000, 720.000) = 1 
    [720.000, 725.000) = 1 
    [725.000, 730.000) = 0 
    [730.000, 735.000) = 1 
    [735.000, 740.000) = 0 
    [740.000, 745.000) = 12 
    [745.000, 750.000) = 19 
    [750.000, 755.000) = 1 
    [755.000, 760.000) = 8 
    [760.000, 765.000) = 10 

  Percentiles, ms/op:
      p(0.0000) =    708.837 ms/op
     p(50.0000) =    746.586 ms/op
     p(90.0000) =    765.460 ms/op
     p(95.0000) =    766.509 ms/op
     p(99.0000) =    767.558 ms/op
     p(99.9000) =    767.558 ms/op
     p(99.9900) =    767.558 ms/op
     p(99.9990) =    767.558 ms/op
     p(99.9999) =    767.558 ms/op
    p(100.0000) =    767.558 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 36.46% complete, ETA 05:09:48
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1777.686 ±(99.9%) 6298.984 ms/op
# Warmup Iteration   2: 743.965 ±(99.9%) 18.128 ms/op
# Warmup Iteration   3: 744.040 ±(99.9%) 18.574 ms/op
# Warmup Iteration   4: 761.865 ±(99.9%) 5.425 ms/op
# Warmup Iteration   5: 759.768 ±(99.9%) 5.055 ms/op
Iteration   1: 762.539 ±(99.9%) 6.916 ms/op
                 executeFilterQuery·p0.00:   754.975 ms/op
                 executeFilterQuery·p0.50:   764.412 ms/op
                 executeFilterQuery·p0.90:   769.655 ms/op
                 executeFilterQuery·p0.95:   770.703 ms/op
                 executeFilterQuery·p0.99:   770.703 ms/op
                 executeFilterQuery·p0.999:  770.703 ms/op
                 executeFilterQuery·p0.9999: 770.703 ms/op
                 executeFilterQuery·p1.00:   770.703 ms/op

Iteration   2: 762.315 ±(99.9%) 5.040 ms/op
                 executeFilterQuery·p0.00:   757.072 ms/op
                 executeFilterQuery·p0.50:   760.218 ms/op
                 executeFilterQuery·p0.90:   769.655 ms/op
                 executeFilterQuery·p0.95:   772.801 ms/op
                 executeFilterQuery·p0.99:   772.801 ms/op
                 executeFilterQuery·p0.999:  772.801 ms/op
                 executeFilterQuery·p0.9999: 772.801 ms/op
                 executeFilterQuery·p1.00:   772.801 ms/op

Iteration   3: 765.386 ±(99.9%) 6.093 ms/op
                 executeFilterQuery·p0.00:   757.072 ms/op
                 executeFilterQuery·p0.50:   766.509 ms/op
                 executeFilterQuery·p0.90:   771.752 ms/op
                 executeFilterQuery·p0.95:   771.752 ms/op
                 executeFilterQuery·p0.99:   771.752 ms/op
                 executeFilterQuery·p0.999:  771.752 ms/op
                 executeFilterQuery·p0.9999: 771.752 ms/op
                 executeFilterQuery·p1.00:   771.752 ms/op

Iteration   4: 764.936 ±(99.9%) 5.790 ms/op
                 executeFilterQuery·p0.00:   757.072 ms/op
                 executeFilterQuery·p0.50:   765.985 ms/op
                 executeFilterQuery·p0.90:   771.752 ms/op
                 executeFilterQuery·p0.95:   771.752 ms/op
                 executeFilterQuery·p0.99:   771.752 ms/op
                 executeFilterQuery·p0.999:  771.752 ms/op
                 executeFilterQuery·p0.9999: 771.752 ms/op
                 executeFilterQuery·p1.00:   771.752 ms/op

Iteration   5: 734.228 ±(99.9%) 19.669 ms/op
                 executeFilterQuery·p0.00:   721.420 ms/op
                 executeFilterQuery·p0.50:   726.139 ms/op
                 executeFilterQuery·p0.90:   768.606 ms/op
                 executeFilterQuery·p0.95:   770.703 ms/op
                 executeFilterQuery·p0.99:   770.703 ms/op
                 executeFilterQuery·p0.999:  770.703 ms/op
                 executeFilterQuery·p0.9999: 770.703 ms/op
                 executeFilterQuery·p1.00:   770.703 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 70
  mean =    757.881 ±(99.9%) 6.121 ms/op

  Histogram, ms/op:
    [720.000, 725.000) = 5 
    [725.000, 730.000) = 4 
    [730.000, 735.000) = 2 
    [735.000, 740.000) = 0 
    [740.000, 745.000) = 0 
    [745.000, 750.000) = 0 
    [750.000, 755.000) = 3 
    [755.000, 760.000) = 16 
    [760.000, 765.000) = 11 
    [765.000, 770.000) = 19 
    [770.000, 775.000) = 10 

  Percentiles, ms/op:
      p(0.0000) =    721.420 ms/op
     p(50.0000) =    762.315 ms/op
     p(90.0000) =    770.703 ms/op
     p(95.0000) =    771.752 ms/op
     p(99.0000) =    772.801 ms/op
     p(99.9000) =    772.801 ms/op
     p(99.9900) =    772.801 ms/op
     p(99.9990) =    772.801 ms/op
     p(99.9999) =    772.801 ms/op
    p(100.0000) =    772.801 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 37.50% complete, ETA 04:59:17
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

13488.882 ms/op
# Warmup Iteration   2: 1514.144 ±(99.9%) 418.827 ms/op
# Warmup Iteration   3: 1471.901 ±(99.9%) 47.266 ms/op
# Warmup Iteration   4: 1463.213 ±(99.9%) 77.117 ms/op
# Warmup Iteration   5: 1414.529 ±(99.9%) 21.540 ms/op
Iteration   1: 1442.241 ±(99.9%) 80.559 ms/op
                 executeFilterQuery·p0.00:   1409.286 ms/op
                 executeFilterQuery·p0.50:   1426.063 ms/op
                 executeFilterQuery·p0.90:   1493.172 ms/op
                 executeFilterQuery·p0.95:   1493.172 ms/op
                 executeFilterQuery·p0.99:   1493.172 ms/op
                 executeFilterQuery·p0.999:  1493.172 ms/op
                 executeFilterQuery·p0.9999: 1493.172 ms/op
                 executeFilterQuery·p1.00:   1493.172 ms/op

Iteration   2: 1482.087 ±(99.9%) 30.208 ms/op
                 executeFilterQuery·p0.00:   1457.521 ms/op
                 executeFilterQuery·p0.50:   1484.784 ms/op
                 executeFilterQuery·p0.90:   1497.367 ms/op
                 executeFilterQuery·p0.95:   1497.367 ms/op
                 executeFilterQuery·p0.99:   1497.367 ms/op
                 executeFilterQuery·p0.999:  1497.367 ms/op
                 executeFilterQuery·p0.9999: 1497.367 ms/op
                 executeFilterQuery·p1.00:   1497.367 ms/op

Iteration   3: 1480.889 ±(99.9%) 25.498 ms/op
                 executeFilterQuery·p0.00:   1468.006 ms/op
                 executeFilterQuery·p0.50:   1476.395 ms/op
                 executeFilterQuery·p0.90:   1495.269 ms/op
                 executeFilterQuery·p0.95:   1495.269 ms/op
                 executeFilterQuery·p0.99:   1495.269 ms/op
                 executeFilterQuery·p0.999:  1495.269 ms/op
                 executeFilterQuery·p0.9999: 1495.269 ms/op
                 executeFilterQuery·p1.00:   1495.269 ms/op

Iteration   4: 1490.775 ±(99.9%) 12.623 ms/op
                 executeFilterQuery·p0.00:   1478.492 ms/op
                 executeFilterQuery·p0.50:   1493.172 ms/op
                 executeFilterQuery·p0.90:   1495.269 ms/op
                 executeFilterQuery·p0.95:   1495.269 ms/op
                 executeFilterQuery·p0.99:   1495.269 ms/op
                 executeFilterQuery·p0.999:  1495.269 ms/op
                 executeFilterQuery·p0.9999: 1495.269 ms/op
                 executeFilterQuery·p1.00:   1495.269 ms/op

Iteration   5: 1487.780 ±(99.9%) 36.673 ms/op
                 executeFilterQuery·p0.00:   1470.104 ms/op
                 executeFilterQuery·p0.50:   1491.075 ms/op
                 executeFilterQuery·p0.90:   1516.241 ms/op
                 executeFilterQuery·p0.95:   1516.241 ms/op
                 executeFilterQuery·p0.99:   1516.241 ms/op
                 executeFilterQuery·p0.999:  1516.241 ms/op
                 executeFilterQuery·p0.9999: 1516.241 ms/op
                 executeFilterQuery·p1.00:   1516.241 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 35
  mean =   1476.755 ±(99.9%) 15.548 ms/op

  Histogram, ms/op:
    [1400.000, 1412.500) = 2 
    [1412.500, 1425.000) = 0 
    [1425.000, 1437.500) = 2 
    [1437.500, 1450.000) = 1 
    [1450.000, 1462.500) = 1 
    [1462.500, 1475.000) = 5 
    [1475.000, 1487.500) = 6 
    [1487.500, 1500.000) = 17 
    [1500.000, 1512.500) = 0 
    [1512.500, 1525.000) = 1 
    [1525.000, 1537.500) = 0 
    [1537.500, 1550.000) = 0 
    [1550.000, 1562.500) = 0 
    [1562.500, 1575.000) = 0 
    [1575.000, 1587.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1409.286 ms/op
     p(50.0000) =   1488.978 ms/op
     p(90.0000) =   1495.269 ms/op
     p(95.0000) =   1501.141 ms/op
     p(99.0000) =   1516.241 ms/op
     p(99.9000) =   1516.241 ms/op
     p(99.9900) =   1516.241 ms/op
     p(99.9990) =   1516.241 ms/op
     p(99.9999) =   1516.241 ms/op
    p(100.0000) =   1516.241 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 38.54% complete, ETA 04:49:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

12750.684 ms/op
# Warmup Iteration   2: 1549.795 ±(99.9%) 450.520 ms/op
# Warmup Iteration   3: 1442.241 ±(99.9%) 53.695 ms/op
# Warmup Iteration   4: 1495.869 ±(99.9%) 13.557 ms/op
# Warmup Iteration   5: 1493.172 ±(99.9%) 13.078 ms/op
Iteration   1: 1479.691 ±(99.9%) 104.868 ms/op
                 executeFilterQuery·p0.00:   1413.480 ms/op
                 executeFilterQuery·p0.50:   1488.978 ms/op
                 executeFilterQuery·p0.90:   1530.921 ms/op
                 executeFilterQuery·p0.95:   1530.921 ms/op
                 executeFilterQuery·p0.99:   1530.921 ms/op
                 executeFilterQuery·p0.999:  1530.921 ms/op
                 executeFilterQuery·p0.9999: 1530.921 ms/op
                 executeFilterQuery·p1.00:   1530.921 ms/op

Iteration   2: 1425.539 ±(99.9%) 19.847 ms/op
                 executeFilterQuery·p0.00:   1411.383 ms/op
                 executeFilterQuery·p0.50:   1428.161 ms/op
                 executeFilterQuery·p0.90:   1440.743 ms/op
                 executeFilterQuery·p0.95:   1440.743 ms/op
                 executeFilterQuery·p0.99:   1440.743 ms/op
                 executeFilterQuery·p0.999:  1440.743 ms/op
                 executeFilterQuery·p0.9999: 1440.743 ms/op
                 executeFilterQuery·p1.00:   1440.743 ms/op

Iteration   3: 1429.059 ±(99.9%) 14.393 ms/op
                 executeFilterQuery·p0.00:   1419.772 ms/op
                 executeFilterQuery·p0.50:   1428.161 ms/op
                 executeFilterQuery·p0.90:   1440.743 ms/op
                 executeFilterQuery·p0.95:   1440.743 ms/op
                 executeFilterQuery·p0.99:   1440.743 ms/op
                 executeFilterQuery·p0.999:  1440.743 ms/op
                 executeFilterQuery·p0.9999: 1440.743 ms/op
                 executeFilterQuery·p1.00:   1440.743 ms/op

Iteration   4: 1432.093 ±(99.9%) 40.236 ms/op
                 executeFilterQuery·p0.00:   1417.675 ms/op
                 executeFilterQuery·p0.50:   1427.112 ms/op
                 executeFilterQuery·p0.90:   1482.686 ms/op
                 executeFilterQuery·p0.95:   1482.686 ms/op
                 executeFilterQuery·p0.99:   1482.686 ms/op
                 executeFilterQuery·p0.999:  1482.686 ms/op
                 executeFilterQuery·p0.9999: 1482.686 ms/op
                 executeFilterQuery·p1.00:   1482.686 ms/op

Iteration   5: 1498.864 ±(99.9%) 24.040 ms/op
                 executeFilterQuery·p0.00:   1482.686 ms/op
                 executeFilterQuery·p0.50:   1497.367 ms/op
                 executeFilterQuery·p0.90:   1518.338 ms/op
                 executeFilterQuery·p0.95:   1518.338 ms/op
                 executeFilterQuery·p0.99:   1518.338 ms/op
                 executeFilterQuery·p0.999:  1518.338 ms/op
                 executeFilterQuery·p0.9999: 1518.338 ms/op
                 executeFilterQuery·p1.00:   1518.338 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 37
  mean =   1451.739 ±(99.9%) 22.162 ms/op

  Histogram, ms/op:
    [1400.000, 1412.500) = 1 
    [1412.500, 1425.000) = 8 
    [1425.000, 1437.500) = 13 
    [1437.500, 1450.000) = 2 
    [1450.000, 1462.500) = 0 
    [1462.500, 1475.000) = 1 
    [1475.000, 1487.500) = 2 
    [1487.500, 1500.000) = 4 
    [1500.000, 1512.500) = 2 
    [1512.500, 1525.000) = 3 
    [1525.000, 1537.500) = 1 
    [1537.500, 1550.000) = 0 
    [1550.000, 1562.500) = 0 
    [1562.500, 1575.000) = 0 
    [1575.000, 1587.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1411.383 ms/op
     p(50.0000) =   1430.258 ms/op
     p(90.0000) =   1516.241 ms/op
     p(95.0000) =   1519.596 ms/op
     p(99.0000) =   1530.921 ms/op
     p(99.9000) =   1530.921 ms/op
     p(99.9900) =   1530.921 ms/op
     p(99.9990) =   1530.921 ms/op
     p(99.9999) =   1530.921 ms/op
    p(100.0000) =   1530.921 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 39.58% complete, ETA 04:39:42
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

12733.907 ms/op
# Warmup Iteration   2: 1617.204 ±(99.9%) 521.025 ms/op
# Warmup Iteration   3: 3405.775 ±(99.9%) 59773.950 ms/op
# Warmup Iteration   4: 1542.006 ±(99.9%) 35.630 ms/op
# Warmup Iteration   5: 1489.577 ±(99.9%) 81.796 ms/op
Iteration   1: 1458.419 ±(99.9%) 8.116 ms/op
                 executeFilterQuery·p0.00:   1455.423 ms/op
                 executeFilterQuery·p0.50:   1457.521 ms/op
                 executeFilterQuery·p0.90:   1465.909 ms/op
                 executeFilterQuery·p0.95:   1465.909 ms/op
                 executeFilterQuery·p0.99:   1465.909 ms/op
                 executeFilterQuery·p0.999:  1465.909 ms/op
                 executeFilterQuery·p0.9999: 1465.909 ms/op
                 executeFilterQuery·p1.00:   1465.909 ms/op

Iteration   2: 1493.172 ±(99.9%) 78.658 ms/op
                 executeFilterQuery·p0.00:   1459.618 ms/op
                 executeFilterQuery·p0.50:   1482.686 ms/op
                 executeFilterQuery·p0.90:   1530.921 ms/op
                 executeFilterQuery·p0.95:   1530.921 ms/op
                 executeFilterQuery·p0.99:   1530.921 ms/op
                 executeFilterQuery·p0.999:  1530.921 ms/op
                 executeFilterQuery·p0.9999: 1530.921 ms/op
                 executeFilterQuery·p1.00:   1530.921 ms/op

Iteration   3: 1533.617 ±(99.9%) 13.557 ms/op
                 executeFilterQuery·p0.00:   1526.727 ms/op
                 executeFilterQuery·p0.50:   1530.921 ms/op
                 executeFilterQuery·p0.90:   1543.504 ms/op
                 executeFilterQuery·p0.95:   1543.504 ms/op
                 executeFilterQuery·p0.99:   1543.504 ms/op
                 executeFilterQuery·p0.999:  1543.504 ms/op
                 executeFilterQuery·p0.9999: 1543.504 ms/op
                 executeFilterQuery·p1.00:   1543.504 ms/op

Iteration   4: 1527.326 ±(99.9%) 6.519 ms/op
                 executeFilterQuery·p0.00:   1522.532 ms/op
                 executeFilterQuery·p0.50:   1528.824 ms/op
                 executeFilterQuery·p0.90:   1530.921 ms/op
                 executeFilterQuery·p0.95:   1530.921 ms/op
                 executeFilterQuery·p0.99:   1530.921 ms/op
                 executeFilterQuery·p0.999:  1530.921 ms/op
                 executeFilterQuery·p0.9999: 1530.921 ms/op
                 executeFilterQuery·p1.00:   1530.921 ms/op

Iteration   5: 1532.419 ±(99.9%) 10.810 ms/op
                 executeFilterQuery·p0.00:   1528.824 ms/op
                 executeFilterQuery·p0.50:   1530.921 ms/op
                 executeFilterQuery·p0.90:   1539.310 ms/op
                 executeFilterQuery·p0.95:   1539.310 ms/op
                 executeFilterQuery·p0.99:   1539.310 ms/op
                 executeFilterQuery·p0.999:  1539.310 ms/op
                 executeFilterQuery·p0.9999: 1539.310 ms/op
                 executeFilterQuery·p1.00:   1539.310 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 35
  mean =   1508.991 ±(99.9%) 20.320 ms/op

  Histogram, ms/op:
    [1450.000, 1460.000) = 8 
    [1460.000, 1470.000) = 2 
    [1470.000, 1480.000) = 0 
    [1480.000, 1490.000) = 1 
    [1490.000, 1500.000) = 0 
    [1500.000, 1510.000) = 0 
    [1510.000, 1520.000) = 0 
    [1520.000, 1530.000) = 13 
    [1530.000, 1540.000) = 10 

  Percentiles, ms/op:
      p(0.0000) =   1455.423 ms/op
     p(50.0000) =   1528.824 ms/op
     p(90.0000) =   1539.310 ms/op
     p(95.0000) =   1540.148 ms/op
     p(99.0000) =   1543.504 ms/op
     p(99.9000) =   1543.504 ms/op
     p(99.9900) =   1543.504 ms/op
     p(99.9990) =   1543.504 ms/op
     p(99.9999) =   1543.504 ms/op
    p(100.0000) =   1543.504 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 40.63% complete, ETA 04:30:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

81.644 ±(99.9%) 10.898 ms/op
# Warmup Iteration   2: 78.331 ±(99.9%) 0.295 ms/op
# Warmup Iteration   3: 78.353 ±(99.9%) 0.262 ms/op
# Warmup Iteration   4: 76.391 ±(99.9%) 0.602 ms/op
# Warmup Iteration   5: 75.871 ±(99.9%) 0.566 ms/op
Iteration   1: 76.426 ±(99.9%) 0.673 ms/op
                 executeFilterQuery·p0.00:   72.090 ms/op
                 executeFilterQuery·p0.50:   77.332 ms/op
                 executeFilterQuery·p0.90:   79.050 ms/op
                 executeFilterQuery·p0.95:   79.836 ms/op
                 executeFilterQuery·p0.99:   80.961 ms/op
                 executeFilterQuery·p0.999:  81.265 ms/op
                 executeFilterQuery·p0.9999: 81.265 ms/op
                 executeFilterQuery·p1.00:   81.265 ms/op

Iteration   2: 77.634 ±(99.9%) 0.394 ms/op
                 executeFilterQuery·p0.00:   75.629 ms/op
                 executeFilterQuery·p0.50:   77.464 ms/op
                 executeFilterQuery·p0.90:   78.945 ms/op
                 executeFilterQuery·p0.95:   79.299 ms/op
                 executeFilterQuery·p0.99:   85.323 ms/op
                 executeFilterQuery·p0.999:  87.163 ms/op
                 executeFilterQuery·p0.9999: 87.163 ms/op
                 executeFilterQuery·p1.00:   87.163 ms/op

Iteration   3: 74.406 ±(99.9%) 0.285 ms/op
                 executeFilterQuery·p0.00:   73.400 ms/op
                 executeFilterQuery·p0.50:   74.056 ms/op
                 executeFilterQuery·p0.90:   75.602 ms/op
                 executeFilterQuery·p0.95:   76.363 ms/op
                 executeFilterQuery·p0.99:   78.030 ms/op
                 executeFilterQuery·p0.999:  78.119 ms/op
                 executeFilterQuery·p0.9999: 78.119 ms/op
                 executeFilterQuery·p1.00:   78.119 ms/op

Iteration   4: 74.896 ±(99.9%) 0.293 ms/op
                 executeFilterQuery·p0.00:   73.662 ms/op
                 executeFilterQuery·p0.50:   74.842 ms/op
                 executeFilterQuery·p0.90:   76.415 ms/op
                 executeFilterQuery·p0.95:   77.201 ms/op
                 executeFilterQuery·p0.99:   78.510 ms/op
                 executeFilterQuery·p0.999:  78.643 ms/op
                 executeFilterQuery·p0.9999: 78.643 ms/op
                 executeFilterQuery·p1.00:   78.643 ms/op

Iteration   5: 76.857 ±(99.9%) 0.425 ms/op
                 executeFilterQuery·p0.00:   73.531 ms/op
                 executeFilterQuery·p0.50:   77.070 ms/op
                 executeFilterQuery·p0.90:   78.381 ms/op
                 executeFilterQuery·p0.95:   78.840 ms/op
                 executeFilterQuery·p0.99:   80.137 ms/op
                 executeFilterQuery·p0.999:  80.216 ms/op
                 executeFilterQuery·p0.9999: 80.216 ms/op
                 executeFilterQuery·p1.00:   80.216 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 649
  mean =     76.019 ±(99.9%) 0.247 ms/op

  Histogram, ms/op:
    [70.000, 71.250) = 0 
    [71.250, 72.500) = 3 
    [72.500, 73.750) = 63 
    [73.750, 75.000) = 193 
    [75.000, 76.250) = 88 
    [76.250, 77.500) = 139 
    [77.500, 78.750) = 116 
    [78.750, 80.000) = 39 
    [80.000, 81.250) = 6 
    [81.250, 82.500) = 1 
    [82.500, 83.750) = 0 
    [83.750, 85.000) = 0 
    [85.000, 86.250) = 0 
    [86.250, 87.500) = 1 
    [87.500, 88.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.090 ms/op
     p(50.0000) =     75.891 ms/op
     p(90.0000) =     78.381 ms/op
     p(95.0000) =     78.905 ms/op
     p(99.0000) =     80.216 ms/op
     p(99.9000) =     87.163 ms/op
     p(99.9900) =     87.163 ms/op
     p(99.9990) =     87.163 ms/op
     p(99.9999) =     87.163 ms/op
    p(100.0000) =     87.163 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 41.67% complete, ETA 04:21:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

81.533 ±(99.9%) 10.507 ms/op
# Warmup Iteration   2: 77.461 ±(99.9%) 1.038 ms/op
# Warmup Iteration   3: 78.757 ±(99.9%) 0.324 ms/op
# Warmup Iteration   4: 78.698 ±(99.9%) 0.258 ms/op
# Warmup Iteration   5: 78.406 ±(99.9%) 0.468 ms/op
Iteration   1: 75.170 ±(99.9%) 0.474 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   74.580 ms/op
                 executeFilterQuery·p0.90:   77.332 ms/op
                 executeFilterQuery·p0.95:   78.165 ms/op
                 executeFilterQuery·p0.99:   79.692 ms/op
                 executeFilterQuery·p0.999:  79.692 ms/op
                 executeFilterQuery·p0.9999: 79.692 ms/op
                 executeFilterQuery·p1.00:   79.692 ms/op

Iteration   2: 77.232 ±(99.9%) 0.541 ms/op
                 executeFilterQuery·p0.00:   73.269 ms/op
                 executeFilterQuery·p0.50:   77.201 ms/op
                 executeFilterQuery·p0.90:   79.705 ms/op
                 executeFilterQuery·p0.95:   80.085 ms/op
                 executeFilterQuery·p0.99:   80.702 ms/op
                 executeFilterQuery·p0.999:  80.740 ms/op
                 executeFilterQuery·p0.9999: 80.740 ms/op
                 executeFilterQuery·p1.00:   80.740 ms/op

Iteration   3: 76.384 ±(99.9%) 0.585 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   75.629 ms/op
                 executeFilterQuery·p0.90:   79.167 ms/op
                 executeFilterQuery·p0.95:   79.561 ms/op
                 executeFilterQuery·p0.99:   80.637 ms/op
                 executeFilterQuery·p0.999:  81.002 ms/op
                 executeFilterQuery·p0.9999: 81.002 ms/op
                 executeFilterQuery·p1.00:   81.002 ms/op

Iteration   4: 75.519 ±(99.9%) 0.687 ms/op
                 executeFilterQuery·p0.00:   73.269 ms/op
                 executeFilterQuery·p0.50:   74.842 ms/op
                 executeFilterQuery·p0.90:   77.464 ms/op
                 executeFilterQuery·p0.95:   80.006 ms/op
                 executeFilterQuery·p0.99:   89.229 ms/op
                 executeFilterQuery·p0.999:  90.571 ms/op
                 executeFilterQuery·p0.9999: 90.571 ms/op
                 executeFilterQuery·p1.00:   90.571 ms/op

Iteration   5: 74.884 ±(99.9%) 0.261 ms/op
                 executeFilterQuery·p0.00:   73.662 ms/op
                 executeFilterQuery·p0.50:   74.711 ms/op
                 executeFilterQuery·p0.90:   76.022 ms/op
                 executeFilterQuery·p0.95:   76.323 ms/op
                 executeFilterQuery·p0.99:   79.320 ms/op
                 executeFilterQuery·p0.999:  80.478 ms/op
                 executeFilterQuery·p0.9999: 80.478 ms/op
                 executeFilterQuery·p1.00:   80.478 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 654
  mean =     75.827 ±(99.9%) 0.256 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 0 
    [ 72.500,  75.000) = 321 
    [ 75.000,  77.500) = 212 
    [ 77.500,  80.000) = 104 
    [ 80.000,  82.500) = 14 
    [ 82.500,  85.000) = 1 
    [ 85.000,  87.500) = 1 
    [ 87.500,  90.000) = 0 
    [ 90.000,  92.500) = 1 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.745 ms/op
     p(50.0000) =     75.104 ms/op
     p(90.0000) =     78.905 ms/op
     p(95.0000) =     79.561 ms/op
     p(99.0000) =     80.609 ms/op
     p(99.9000) =     90.571 ms/op
     p(99.9900) =     90.571 ms/op
     p(99.9990) =     90.571 ms/op
     p(99.9999) =     90.571 ms/op
    p(100.0000) =     90.571 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 42.71% complete, ETA 04:12:54
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

109.905 ±(99.9%) 13.784 ms/op
# Warmup Iteration   2: 112.039 ±(99.9%) 0.257 ms/op
# Warmup Iteration   3: 111.897 ±(99.9%) 0.169 ms/op
# Warmup Iteration   4: 111.829 ±(99.9%) 0.209 ms/op
# Warmup Iteration   5: 111.838 ±(99.9%) 0.167 ms/op
Iteration   1: 111.638 ±(99.9%) 0.162 ms/op
                 executeFilterQuery·p0.00:   111.018 ms/op
                 executeFilterQuery·p0.50:   111.411 ms/op
                 executeFilterQuery·p0.90:   112.329 ms/op
                 executeFilterQuery·p0.95:   112.460 ms/op
                 executeFilterQuery·p0.99:   112.984 ms/op
                 executeFilterQuery·p0.999:  112.984 ms/op
                 executeFilterQuery·p0.9999: 112.984 ms/op
                 executeFilterQuery·p1.00:   112.984 ms/op

Iteration   2: 111.866 ±(99.9%) 0.658 ms/op
                 executeFilterQuery·p0.00:   111.149 ms/op
                 executeFilterQuery·p0.50:   111.411 ms/op
                 executeFilterQuery·p0.90:   112.329 ms/op
                 executeFilterQuery·p0.95:   112.591 ms/op
                 executeFilterQuery·p0.99:   128.319 ms/op
                 executeFilterQuery·p0.999:  128.319 ms/op
                 executeFilterQuery·p0.9999: 128.319 ms/op
                 executeFilterQuery·p1.00:   128.319 ms/op

Iteration   3: 111.626 ±(99.9%) 0.206 ms/op
                 executeFilterQuery·p0.00:   111.018 ms/op
                 executeFilterQuery·p0.50:   111.411 ms/op
                 executeFilterQuery·p0.90:   112.198 ms/op
                 executeFilterQuery·p0.95:   112.394 ms/op
                 executeFilterQuery·p0.99:   114.557 ms/op
                 executeFilterQuery·p0.999:  114.557 ms/op
                 executeFilterQuery·p0.9999: 114.557 ms/op
                 executeFilterQuery·p1.00:   114.557 ms/op

Iteration   4: 111.737 ±(99.9%) 0.427 ms/op
                 executeFilterQuery·p0.00:   110.887 ms/op
                 executeFilterQuery·p0.50:   111.542 ms/op
                 executeFilterQuery·p0.90:   112.198 ms/op
                 executeFilterQuery·p0.95:   112.460 ms/op
                 executeFilterQuery·p0.99:   121.897 ms/op
                 executeFilterQuery·p0.999:  121.897 ms/op
                 executeFilterQuery·p0.9999: 121.897 ms/op
                 executeFilterQuery·p1.00:   121.897 ms/op

Iteration   5: 111.552 ±(99.9%) 0.146 ms/op
                 executeFilterQuery·p0.00:   111.018 ms/op
                 executeFilterQuery·p0.50:   111.411 ms/op
                 executeFilterQuery·p0.90:   112.198 ms/op
                 executeFilterQuery·p0.95:   112.329 ms/op
                 executeFilterQuery·p0.99:   112.329 ms/op
                 executeFilterQuery·p0.999:  112.329 ms/op
                 executeFilterQuery·p0.9999: 112.329 ms/op
                 executeFilterQuery·p1.00:   112.329 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 446
  mean =    111.684 ±(99.9%) 0.163 ms/op

  Histogram, ms/op:
    [110.000, 111.250) = 66 
    [111.250, 112.500) = 366 
    [112.500, 113.750) = 10 
    [113.750, 115.000) = 2 
    [115.000, 116.250) = 0 
    [116.250, 117.500) = 0 
    [117.500, 118.750) = 0 
    [118.750, 120.000) = 0 
    [120.000, 121.250) = 0 
    [121.250, 122.500) = 1 
    [122.500, 123.750) = 0 
    [123.750, 125.000) = 0 
    [125.000, 126.250) = 0 
    [126.250, 127.500) = 0 
    [127.500, 128.750) = 1 

  Percentiles, ms/op:
      p(0.0000) =    110.887 ms/op
     p(50.0000) =    111.411 ms/op
     p(90.0000) =    112.329 ms/op
     p(95.0000) =    112.460 ms/op
     p(99.0000) =    113.540 ms/op
     p(99.9000) =    128.319 ms/op
     p(99.9900) =    128.319 ms/op
     p(99.9990) =    128.319 ms/op
     p(99.9999) =    128.319 ms/op
    p(100.0000) =    128.319 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 43.75% complete, ETA 04:04:36
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1056.440 ±(99.9%) 1433.089 ms/op
# Warmup Iteration   2: 747.185 ±(99.9%) 21.878 ms/op
# Warmup Iteration   3: 747.185 ±(99.9%) 18.533 ms/op
# Warmup Iteration   4: 756.173 ±(99.9%) 9.114 ms/op
# Warmup Iteration   5: 773.204 ±(99.9%) 2.487 ms/op
Iteration   1: 777.237 ±(99.9%) 4.974 ms/op
                 executeFilterQuery·p0.00:   771.752 ms/op
                 executeFilterQuery·p0.50:   779.092 ms/op
                 executeFilterQuery·p0.90:   783.496 ms/op
                 executeFilterQuery·p0.95:   784.335 ms/op
                 executeFilterQuery·p0.99:   784.335 ms/op
                 executeFilterQuery·p0.999:  784.335 ms/op
                 executeFilterQuery·p0.9999: 784.335 ms/op
                 executeFilterQuery·p1.00:   784.335 ms/op

Iteration   2: 773.284 ±(99.9%) 7.133 ms/op
                 executeFilterQuery·p0.00:   765.460 ms/op
                 executeFilterQuery·p0.50:   773.849 ms/op
                 executeFilterQuery·p0.90:   783.496 ms/op
                 executeFilterQuery·p0.95:   784.335 ms/op
                 executeFilterQuery·p0.99:   784.335 ms/op
                 executeFilterQuery·p0.999:  784.335 ms/op
                 executeFilterQuery·p0.9999: 784.335 ms/op
                 executeFilterQuery·p1.00:   784.335 ms/op

Iteration   3: 762.240 ±(99.9%) 9.704 ms/op
                 executeFilterQuery·p0.00:   743.440 ms/op
                 executeFilterQuery·p0.50:   761.266 ms/op
                 executeFilterQuery·p0.90:   773.849 ms/op
                 executeFilterQuery·p0.95:   774.898 ms/op
                 executeFilterQuery·p0.99:   774.898 ms/op
                 executeFilterQuery·p0.999:  774.898 ms/op
                 executeFilterQuery·p0.9999: 774.898 ms/op
                 executeFilterQuery·p1.00:   774.898 ms/op

Iteration   4: 767.961 ±(99.9%) 10.941 ms/op
                 executeFilterQuery·p0.00:   750.780 ms/op
                 executeFilterQuery·p0.50:   771.752 ms/op
                 executeFilterQuery·p0.90:   778.882 ms/op
                 executeFilterQuery·p0.95:   780.141 ms/op
                 executeFilterQuery·p0.99:   780.141 ms/op
                 executeFilterQuery·p0.999:  780.141 ms/op
                 executeFilterQuery·p0.9999: 780.141 ms/op
                 executeFilterQuery·p1.00:   780.141 ms/op

Iteration   5: 748.983 ±(99.9%) 20.263 ms/op
                 executeFilterQuery·p0.00:   730.857 ms/op
                 executeFilterQuery·p0.50:   741.343 ms/op
                 executeFilterQuery·p0.90:   777.519 ms/op
                 executeFilterQuery·p0.95:   780.141 ms/op
                 executeFilterQuery·p0.99:   780.141 ms/op
                 executeFilterQuery·p0.999:  780.141 ms/op
                 executeFilterQuery·p0.9999: 780.141 ms/op
                 executeFilterQuery·p1.00:   780.141 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 67
  mean =    765.633 ±(99.9%) 5.999 ms/op

  Histogram, ms/op:
    [730.000, 735.000) = 2 
    [735.000, 740.000) = 3 
    [740.000, 745.000) = 6 
    [745.000, 750.000) = 0 
    [750.000, 755.000) = 3 
    [755.000, 760.000) = 2 
    [760.000, 765.000) = 9 
    [765.000, 770.000) = 6 
    [770.000, 775.000) = 23 
    [775.000, 780.000) = 6 
    [780.000, 785.000) = 7 

  Percentiles, ms/op:
      p(0.0000) =    730.857 ms/op
     p(50.0000) =    771.752 ms/op
     p(90.0000) =    780.141 ms/op
     p(95.0000) =    782.238 ms/op
     p(99.0000) =    784.335 ms/op
     p(99.9000) =    784.335 ms/op
     p(99.9900) =    784.335 ms/op
     p(99.9990) =    784.335 ms/op
     p(99.9999) =    784.335 ms/op
    p(100.0000) =    784.335 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 44.79% complete, ETA 03:56:40
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1054.867 ±(99.9%) 1409.994 ms/op
# Warmup Iteration   2: 747.859 ±(99.9%) 26.507 ms/op
# Warmup Iteration   3: 748.384 ±(99.9%) 2.800 ms/op
# Warmup Iteration   4: 743.890 ±(99.9%) 16.050 ms/op
# Warmup Iteration   5: 710.935 ±(99.9%) 5.459 ms/op
Iteration   1: 721.570 ±(99.9%) 7.363 ms/op
                 executeFilterQuery·p0.00:   714.080 ms/op
                 executeFilterQuery·p0.50:   720.372 ms/op
                 executeFilterQuery·p0.90:   736.100 ms/op
                 executeFilterQuery·p0.95:   736.100 ms/op
                 executeFilterQuery·p0.99:   736.100 ms/op
                 executeFilterQuery·p0.999:  736.100 ms/op
                 executeFilterQuery·p0.9999: 736.100 ms/op
                 executeFilterQuery·p1.00:   736.100 ms/op

Iteration   2: 730.783 ±(99.9%) 19.850 ms/op
                 executeFilterQuery·p0.00:   716.177 ms/op
                 executeFilterQuery·p0.50:   723.517 ms/op
                 executeFilterQuery·p0.90:   768.082 ms/op
                 executeFilterQuery·p0.95:   771.752 ms/op
                 executeFilterQuery·p0.99:   771.752 ms/op
                 executeFilterQuery·p0.999:  771.752 ms/op
                 executeFilterQuery·p0.9999: 771.752 ms/op
                 executeFilterQuery·p1.00:   771.752 ms/op

Iteration   3: 762.315 ±(99.9%) 6.975 ms/op
                 executeFilterQuery·p0.00:   753.926 ms/op
                 executeFilterQuery·p0.50:   760.742 ms/op
                 executeFilterQuery·p0.90:   771.752 ms/op
                 executeFilterQuery·p0.95:   775.946 ms/op
                 executeFilterQuery·p0.99:   775.946 ms/op
                 executeFilterQuery·p0.999:  775.946 ms/op
                 executeFilterQuery·p0.9999: 775.946 ms/op
                 executeFilterQuery·p1.00:   775.946 ms/op

Iteration   4: 763.064 ±(99.9%) 4.508 ms/op
                 executeFilterQuery·p0.00:   753.926 ms/op
                 executeFilterQuery·p0.50:   764.412 ms/op
                 executeFilterQuery·p0.90:   767.558 ms/op
                 executeFilterQuery·p0.95:   767.558 ms/op
                 executeFilterQuery·p0.99:   767.558 ms/op
                 executeFilterQuery·p0.999:  767.558 ms/op
                 executeFilterQuery·p0.9999: 767.558 ms/op
                 executeFilterQuery·p1.00:   767.558 ms/op

Iteration   5: 754.151 ±(99.9%) 11.876 ms/op
                 executeFilterQuery·p0.00:   742.392 ms/op
                 executeFilterQuery·p0.50:   748.683 ms/op
                 executeFilterQuery·p0.90:   773.325 ms/op
                 executeFilterQuery·p0.95:   773.849 ms/op
                 executeFilterQuery·p0.99:   773.849 ms/op
                 executeFilterQuery·p0.999:  773.849 ms/op
                 executeFilterQuery·p0.9999: 773.849 ms/op
                 executeFilterQuery·p1.00:   773.849 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 70
  mean =    746.376 ±(99.9%) 8.133 ms/op

  Histogram, ms/op:
    [710.000, 715.000) = 1 
    [715.000, 720.000) = 8 
    [720.000, 725.000) = 11 
    [725.000, 730.000) = 1 
    [730.000, 735.000) = 1 
    [735.000, 740.000) = 3 
    [740.000, 745.000) = 3 
    [745.000, 750.000) = 6 
    [750.000, 755.000) = 3 
    [755.000, 760.000) = 7 
    [760.000, 765.000) = 13 
    [765.000, 770.000) = 9 
    [770.000, 775.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    714.080 ms/op
     p(50.0000) =    753.926 ms/op
     p(90.0000) =    767.558 ms/op
     p(95.0000) =    772.224 ms/op
     p(99.0000) =    775.946 ms/op
     p(99.9000) =    775.946 ms/op
     p(99.9900) =    775.946 ms/op
     p(99.9990) =    775.946 ms/op
     p(99.9999) =    775.946 ms/op
    p(100.0000) =    775.946 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 45.83% complete, ETA 03:49:03
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1374.814 ±(99.9%) 1811.713 ms/op
# Warmup Iteration   2: 1111.957 ±(99.9%) 5.221 ms/op
# Warmup Iteration   3: 1126.171 ±(99.9%) 76.685 ms/op
# Warmup Iteration   4: 1109.626 ±(99.9%) 2.755 ms/op
# Warmup Iteration   5: 1115.452 ±(99.9%) 35.872 ms/op
Iteration   1: 1107.995 ±(99.9%) 1.762 ms/op
                 executeFilterQuery·p0.00:   1107.296 ms/op
                 executeFilterQuery·p0.50:   1107.296 ms/op
                 executeFilterQuery·p0.90:   1109.393 ms/op
                 executeFilterQuery·p0.95:   1109.393 ms/op
                 executeFilterQuery·p0.99:   1109.393 ms/op
                 executeFilterQuery·p0.999:  1109.393 ms/op
                 executeFilterQuery·p0.9999: 1109.393 ms/op
                 executeFilterQuery·p1.00:   1109.393 ms/op

Iteration   2: 1110.558 ±(99.9%) 7.902 ms/op
                 executeFilterQuery·p0.00:   1105.199 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1121.976 ms/op
                 executeFilterQuery·p0.95:   1121.976 ms/op
                 executeFilterQuery·p0.99:   1121.976 ms/op
                 executeFilterQuery·p0.999:  1121.976 ms/op
                 executeFilterQuery·p0.9999: 1121.976 ms/op
                 executeFilterQuery·p1.00:   1121.976 ms/op

Iteration   3: 1108.555 ±(99.9%) 2.674 ms/op
                 executeFilterQuery·p0.00:   1105.199 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1111.281 ms/op
                 executeFilterQuery·p0.95:   1111.491 ms/op
                 executeFilterQuery·p0.99:   1111.491 ms/op
                 executeFilterQuery·p0.999:  1111.491 ms/op
                 executeFilterQuery·p0.9999: 1111.491 ms/op
                 executeFilterQuery·p1.00:   1111.491 ms/op

Iteration   4: 1109.184 ±(99.9%) 2.776 ms/op
                 executeFilterQuery·p0.00:   1105.199 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1111.491 ms/op
                 executeFilterQuery·p0.95:   1111.491 ms/op
                 executeFilterQuery·p0.99:   1111.491 ms/op
                 executeFilterQuery·p0.999:  1111.491 ms/op
                 executeFilterQuery·p0.9999: 1111.491 ms/op
                 executeFilterQuery·p1.00:   1111.491 ms/op

Iteration   5: 1109.859 ±(99.9%) 2.937 ms/op
                 executeFilterQuery·p0.00:   1107.296 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1111.491 ms/op
                 executeFilterQuery·p0.95:   1111.491 ms/op
                 executeFilterQuery·p0.99:   1111.491 ms/op
                 executeFilterQuery·p0.999:  1111.491 ms/op
                 executeFilterQuery·p0.9999: 1111.491 ms/op
                 executeFilterQuery·p1.00:   1111.491 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 47
  mean =   1109.215 ±(99.9%) 1.323 ms/op

  Histogram, ms/op:
    [1100.000, 1102.500) = 0 
    [1102.500, 1105.000) = 0 
    [1105.000, 1107.500) = 16 
    [1107.500, 1110.000) = 21 
    [1110.000, 1112.500) = 9 
    [1112.500, 1115.000) = 0 
    [1115.000, 1117.500) = 0 
    [1117.500, 1120.000) = 0 
    [1120.000, 1122.500) = 1 
    [1122.500, 1125.000) = 0 
    [1125.000, 1127.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1105.199 ms/op
     p(50.0000) =   1109.393 ms/op
     p(90.0000) =   1111.491 ms/op
     p(95.0000) =   1111.491 ms/op
     p(99.0000) =   1121.976 ms/op
     p(99.9000) =   1121.976 ms/op
     p(99.9900) =   1121.976 ms/op
     p(99.9990) =   1121.976 ms/op
     p(99.9999) =   1121.976 ms/op
    p(100.0000) =   1121.976 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 46.88% complete, ETA 03:41:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

3521.118 ±(99.9%) 62327.895 ms/op
# Warmup Iteration   2: 1481.488 ±(99.9%) 87.086 ms/op
# Warmup Iteration   3: 1520.136 ±(99.9%) 22.058 ms/op
# Warmup Iteration   4: 1448.233 ±(99.9%) 68.221 ms/op
# Warmup Iteration   5: 1443.739 ±(99.9%) 30.714 ms/op
Iteration   1: 1491.375 ±(99.9%) 80.638 ms/op
                 executeFilterQuery·p0.00:   1438.646 ms/op
                 executeFilterQuery·p0.50:   1505.755 ms/op
                 executeFilterQuery·p0.90:   1522.532 ms/op
                 executeFilterQuery·p0.95:   1522.532 ms/op
                 executeFilterQuery·p0.99:   1522.532 ms/op
                 executeFilterQuery·p0.999:  1522.532 ms/op
                 executeFilterQuery·p0.9999: 1522.532 ms/op
                 executeFilterQuery·p1.00:   1522.532 ms/op

Iteration   2: 1515.941 ±(99.9%) 14.540 ms/op
                 executeFilterQuery·p0.00:   1507.852 ms/op
                 executeFilterQuery·p0.50:   1520.435 ms/op
                 executeFilterQuery·p0.90:   1522.532 ms/op
                 executeFilterQuery·p0.95:   1522.532 ms/op
                 executeFilterQuery·p0.99:   1522.532 ms/op
                 executeFilterQuery·p0.999:  1522.532 ms/op
                 executeFilterQuery·p0.9999: 1522.532 ms/op
                 executeFilterQuery·p1.00:   1522.532 ms/op

Iteration   3: 1493.771 ±(99.9%) 94.296 ms/op
                 executeFilterQuery·p0.00:   1428.161 ms/op
                 executeFilterQuery·p0.50:   1514.144 ms/op
                 executeFilterQuery·p0.90:   1528.824 ms/op
                 executeFilterQuery·p0.95:   1528.824 ms/op
                 executeFilterQuery·p0.99:   1528.824 ms/op
                 executeFilterQuery·p0.999:  1528.824 ms/op
                 executeFilterQuery·p0.9999: 1528.824 ms/op
                 executeFilterQuery·p1.00:   1528.824 ms/op

Iteration   4: 1450.330 ±(99.9%) 19.447 ms/op
                 executeFilterQuery·p0.00:   1436.549 ms/op
                 executeFilterQuery·p0.50:   1451.229 ms/op
                 executeFilterQuery·p0.90:   1459.618 ms/op
                 executeFilterQuery·p0.95:   1459.618 ms/op
                 executeFilterQuery·p0.99:   1459.618 ms/op
                 executeFilterQuery·p0.999:  1459.618 ms/op
                 executeFilterQuery·p0.9999: 1459.618 ms/op
                 executeFilterQuery·p1.00:   1459.618 ms/op

Iteration   5: 1439.245 ±(99.9%) 15.597 ms/op
                 executeFilterQuery·p0.00:   1432.355 ms/op
                 executeFilterQuery·p0.50:   1438.646 ms/op
                 executeFilterQuery·p0.90:   1451.229 ms/op
                 executeFilterQuery·p0.95:   1451.229 ms/op
                 executeFilterQuery·p0.99:   1451.229 ms/op
                 executeFilterQuery·p0.999:  1451.229 ms/op
                 executeFilterQuery·p0.9999: 1451.229 ms/op
                 executeFilterQuery·p1.00:   1451.229 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 35
  mean =   1478.133 ±(99.9%) 22.901 ms/op

  Histogram, ms/op:
    [1400.000, 1412.500) = 0 
    [1412.500, 1425.000) = 0 
    [1425.000, 1437.500) = 5 
    [1437.500, 1450.000) = 7 
    [1450.000, 1462.500) = 6 
    [1462.500, 1475.000) = 0 
    [1475.000, 1487.500) = 0 
    [1487.500, 1500.000) = 0 
    [1500.000, 1512.500) = 7 
    [1512.500, 1525.000) = 9 
    [1525.000, 1537.500) = 1 
    [1537.500, 1550.000) = 0 
    [1550.000, 1562.500) = 0 
    [1562.500, 1575.000) = 0 
    [1575.000, 1587.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1428.161 ms/op
     p(50.0000) =   1459.618 ms/op
     p(90.0000) =   1522.532 ms/op
     p(95.0000) =   1523.791 ms/op
     p(99.0000) =   1528.824 ms/op
     p(99.9000) =   1528.824 ms/op
     p(99.9900) =   1528.824 ms/op
     p(99.9990) =   1528.824 ms/op
     p(99.9999) =   1528.824 ms/op
    p(100.0000) =   1528.824 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 47.92% complete, ETA 03:34:30
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

3442.825 ±(99.9%) 60518.346 ms/op
# Warmup Iteration   2: 1456.023 ±(99.9%) 76.293 ms/op
# Warmup Iteration   3: 1494.371 ±(99.9%) 4.609 ms/op
# Warmup Iteration   4: 1503.059 ±(99.9%) 10.810 ms/op
# Warmup Iteration   5: 1482.686 ±(99.9%) 79.176 ms/op
Iteration   1: 1415.840 ±(99.9%) 17.338 ms/op
                 executeFilterQuery·p0.00:   1396.703 ms/op
                 executeFilterQuery·p0.50:   1417.675 ms/op
                 executeFilterQuery·p0.90:   1428.161 ms/op
                 executeFilterQuery·p0.95:   1428.161 ms/op
                 executeFilterQuery·p0.99:   1428.161 ms/op
                 executeFilterQuery·p0.999:  1428.161 ms/op
                 executeFilterQuery·p0.9999: 1428.161 ms/op
                 executeFilterQuery·p1.00:   1428.161 ms/op

Iteration   2: 1421.869 ±(99.9%) 22.884 ms/op
                 executeFilterQuery·p0.00:   1396.703 ms/op
                 executeFilterQuery·p0.50:   1428.161 ms/op
                 executeFilterQuery·p0.90:   1430.258 ms/op
                 executeFilterQuery·p0.95:   1430.258 ms/op
                 executeFilterQuery·p0.99:   1430.258 ms/op
                 executeFilterQuery·p0.999:  1430.258 ms/op
                 executeFilterQuery·p0.9999: 1430.258 ms/op
                 executeFilterQuery·p1.00:   1430.258 ms/op

Iteration   3: 1423.442 ±(99.9%) 39.447 ms/op
                 executeFilterQuery·p0.00:   1396.703 ms/op
                 executeFilterQuery·p0.50:   1427.112 ms/op
                 executeFilterQuery·p0.90:   1461.715 ms/op
                 executeFilterQuery·p0.95:   1461.715 ms/op
                 executeFilterQuery·p0.99:   1461.715 ms/op
                 executeFilterQuery·p0.999:  1461.715 ms/op
                 executeFilterQuery·p0.9999: 1461.715 ms/op
                 executeFilterQuery·p1.00:   1461.715 ms/op

Iteration   4: 1488.978 ±(99.9%) 17.882 ms/op
                 executeFilterQuery·p0.00:   1476.395 ms/op
                 executeFilterQuery·p0.50:   1493.172 ms/op
                 executeFilterQuery·p0.90:   1495.269 ms/op
                 executeFilterQuery·p0.95:   1495.269 ms/op
                 executeFilterQuery·p0.99:   1495.269 ms/op
                 executeFilterQuery·p0.999:  1495.269 ms/op
                 executeFilterQuery·p0.9999: 1495.269 ms/op
                 executeFilterQuery·p1.00:   1495.269 ms/op

Iteration   5: 1490.775 ±(99.9%) 12.915 ms/op
                 executeFilterQuery·p0.00:   1478.492 ms/op
                 executeFilterQuery·p0.50:   1491.075 ms/op
                 executeFilterQuery·p0.90:   1495.269 ms/op
                 executeFilterQuery·p0.95:   1495.269 ms/op
                 executeFilterQuery·p0.99:   1495.269 ms/op
                 executeFilterQuery·p0.999:  1495.269 ms/op
                 executeFilterQuery·p0.9999: 1495.269 ms/op
                 executeFilterQuery·p1.00:   1495.269 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 38
  mean =   1445.986 ±(99.9%) 20.903 ms/op

  Histogram, ms/op:
    [1390.000, 1400.000) = 4 
    [1400.000, 1410.000) = 0 
    [1410.000, 1420.000) = 9 
    [1420.000, 1430.000) = 6 
    [1430.000, 1440.000) = 4 
    [1440.000, 1450.000) = 0 
    [1450.000, 1460.000) = 0 
    [1460.000, 1470.000) = 1 
    [1470.000, 1480.000) = 3 
    [1480.000, 1490.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1396.703 ms/op
     p(50.0000) =   1429.209 ms/op
     p(90.0000) =   1493.382 ms/op
     p(95.0000) =   1495.269 ms/op
     p(99.0000) =   1495.269 ms/op
     p(99.9000) =   1495.269 ms/op
     p(99.9900) =   1495.269 ms/op
     p(99.9990) =   1495.269 ms/op
     p(99.9999) =   1495.269 ms/op
    p(100.0000) =   1495.269 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 48.96% complete, ETA 03:27:38
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

2140.353 ±(99.9%) 654.495 ms/op
# Warmup Iteration   2: 2254.019 ±(99.9%) 14.446 ms/op
# Warmup Iteration   3: 2254.019 ±(99.9%) 33.491 ms/op
# Warmup Iteration   4: 2252.341 ±(99.9%) 27.974 ms/op
# Warmup Iteration   5: 2254.019 ±(99.9%) 27.025 ms/op
Iteration   1: 2259.052 ±(99.9%) 21.669 ms/op
                 executeFilterQuery·p0.00:   2252.341 ms/op
                 executeFilterQuery·p0.50:   2256.536 ms/op
                 executeFilterQuery·p0.90:   2264.924 ms/op
                 executeFilterQuery·p0.95:   2264.924 ms/op
                 executeFilterQuery·p0.99:   2264.924 ms/op
                 executeFilterQuery·p0.999:  2264.924 ms/op
                 executeFilterQuery·p0.9999: 2264.924 ms/op
                 executeFilterQuery·p1.00:   2264.924 ms/op

Iteration   2: 2257.374 ±(99.9%) 17.692 ms/op
                 executeFilterQuery·p0.00:   2252.341 ms/op
                 executeFilterQuery·p0.50:   2256.536 ms/op
                 executeFilterQuery·p0.90:   2264.924 ms/op
                 executeFilterQuery·p0.95:   2264.924 ms/op
                 executeFilterQuery·p0.99:   2264.924 ms/op
                 executeFilterQuery·p0.999:  2264.924 ms/op
                 executeFilterQuery·p0.9999: 2264.924 ms/op
                 executeFilterQuery·p1.00:   2264.924 ms/op

Iteration   3: 2275.829 ±(99.9%) 167.299 ms/op
                 executeFilterQuery·p0.00:   2248.147 ms/op
                 executeFilterQuery·p0.50:   2260.730 ms/op
                 executeFilterQuery·p0.90:   2353.005 ms/op
                 executeFilterQuery·p0.95:   2353.005 ms/op
                 executeFilterQuery·p0.99:   2353.005 ms/op
                 executeFilterQuery·p0.999:  2353.005 ms/op
                 executeFilterQuery·p0.9999: 2353.005 ms/op
                 executeFilterQuery·p1.00:   2353.005 ms/op

Iteration   4: 2253.180 ±(99.9%) 36.829 ms/op
                 executeFilterQuery·p0.00:   2243.953 ms/op
                 executeFilterQuery·p0.50:   2252.341 ms/op
                 executeFilterQuery·p0.90:   2269.118 ms/op
                 executeFilterQuery·p0.95:   2269.118 ms/op
                 executeFilterQuery·p0.99:   2269.118 ms/op
                 executeFilterQuery·p0.999:  2269.118 ms/op
                 executeFilterQuery·p0.9999: 2269.118 ms/op
                 executeFilterQuery·p1.00:   2269.118 ms/op

Iteration   5: 2287.573 ±(99.9%) 312.675 ms/op
                 executeFilterQuery·p0.00:   2248.147 ms/op
                 executeFilterQuery·p0.50:   2252.341 ms/op
                 executeFilterQuery·p0.90:   2432.696 ms/op
                 executeFilterQuery·p0.95:   2432.696 ms/op
                 executeFilterQuery·p0.99:   2432.696 ms/op
                 executeFilterQuery·p0.999:  2432.696 ms/op
                 executeFilterQuery·p0.9999: 2432.696 ms/op
                 executeFilterQuery·p1.00:   2432.696 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 25
  mean =   2266.602 ±(99.9%) 30.095 ms/op

  Histogram, ms/op:
    [2200.000, 2225.000) = 0 
    [2225.000, 2250.000) = 5 
    [2250.000, 2275.000) = 18 
    [2275.000, 2300.000) = 0 
    [2300.000, 2325.000) = 0 
    [2325.000, 2350.000) = 0 
    [2350.000, 2375.000) = 1 
    [2375.000, 2400.000) = 0 
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 1 
    [2450.000, 2475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2243.953 ms/op
     p(50.0000) =   2256.536 ms/op
     p(90.0000) =   2302.673 ms/op
     p(95.0000) =   2408.789 ms/op
     p(99.0000) =   2432.696 ms/op
     p(99.9000) =   2432.696 ms/op
     p(99.9900) =   2432.696 ms/op
     p(99.9990) =   2432.696 ms/op
     p(99.9999) =   2432.696 ms/op
    p(100.0000) =   2432.696 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 50.00% complete, ETA 03:21:04
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1369126716 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1369126716() {
        this(4);
    }
    public KeyMultiRecordMap_1369126716(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1369126716 join_map = new KeyMultiRecordMap_1369126716();
private final class KeyMultiRecordMap_994634927 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_994634927() {
        this(4);
    }
    public KeyMultiRecordMap_994634927(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_994634927 join_map_0 = new KeyMultiRecordMap_994634927();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4638.900 ±(99.9%) 4374.359 ms/op
# Warmup Iteration   2: 4518.664 ±(99.9%) 1786.917 ms/op
# Warmup Iteration   3: 4387.242 ±(99.9%) 153.039 ms/op
# Warmup Iteration   4: 4310.346 ±(99.9%) 584.429 ms/op
# Warmup Iteration   5: 4424.991 ±(99.9%) 3941.323 ms/op
Iteration   1: 4296.365 ±(99.9%) 1995.879 ms/op
                 executeQuery·p0.00:   4215.276 ms/op
                 executeQuery·p0.50:   4253.024 ms/op
                 executeQuery·p0.90:   4420.796 ms/op
                 executeQuery·p0.95:   4420.796 ms/op
                 executeQuery·p0.99:   4420.796 ms/op
                 executeQuery·p0.999:  4420.796 ms/op
                 executeQuery·p0.9999: 4420.796 ms/op
                 executeQuery·p1.00:   4420.796 ms/op

Iteration   2: 4397.029 ±(99.9%) 2371.288 ms/op
                 executeQuery·p0.00:   4282.384 ms/op
                 executeQuery·p0.50:   4370.465 ms/op
                 executeQuery·p0.90:   4538.237 ms/op
                 executeQuery·p0.95:   4538.237 ms/op
                 executeQuery·p0.99:   4538.237 ms/op
                 executeQuery·p0.999:  4538.237 ms/op
                 executeQuery·p0.9999: 4538.237 ms/op
                 executeQuery·p1.00:   4538.237 ms/op

Iteration   3: 4301.958 ±(99.9%) 1215.516 ms/op
                 executeQuery·p0.00:   4261.413 ms/op
                 executeQuery·p0.50:   4265.607 ms/op
                 executeQuery·p0.90:   4378.853 ms/op
                 executeQuery·p0.95:   4378.853 ms/op
                 executeQuery·p0.99:   4378.853 ms/op
                 executeQuery·p0.999:  4378.853 ms/op
                 executeQuery·p0.9999: 4378.853 ms/op
                 executeQuery·p1.00:   4378.853 ms/op

Iteration   4: 4297.763 ±(99.9%) 1283.465 ms/op
                 executeQuery·p0.00:   4253.024 ms/op
                 executeQuery·p0.50:   4261.413 ms/op
                 executeQuery·p0.90:   4378.853 ms/op
                 executeQuery·p0.95:   4378.853 ms/op
                 executeQuery·p0.99:   4378.853 ms/op
                 executeQuery·p0.999:  4378.853 ms/op
                 executeQuery·p0.9999: 4378.853 ms/op
                 executeQuery·p1.00:   4378.853 ms/op

Iteration   5: 4328.522 ±(99.9%) 1612.371 ms/op
                 executeQuery·p0.00:   4244.636 ms/op
                 executeQuery·p0.50:   4320.133 ms/op
                 executeQuery·p0.90:   4420.796 ms/op
                 executeQuery·p0.95:   4420.796 ms/op
                 executeQuery·p0.99:   4420.796 ms/op
                 executeQuery·p0.999:  4420.796 ms/op
                 executeQuery·p0.9999: 4420.796 ms/op
                 executeQuery·p1.00:   4420.796 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   4324.327 ±(99.9%) 96.469 ms/op

  Histogram, ms/op:
    [4200.000, 4225.000) = 1 
    [4225.000, 4250.000) = 1 
    [4250.000, 4275.000) = 5 
    [4275.000, 4300.000) = 1 
    [4300.000, 4325.000) = 1 
    [4325.000, 4350.000) = 0 
    [4350.000, 4375.000) = 1 
    [4375.000, 4400.000) = 2 
    [4400.000, 4425.000) = 2 
    [4425.000, 4450.000) = 0 
    [4450.000, 4475.000) = 0 
    [4475.000, 4500.000) = 0 
    [4500.000, 4525.000) = 0 
    [4525.000, 4550.000) = 1 
    [4550.000, 4575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4215.276 ms/op
     p(50.0000) =   4282.384 ms/op
     p(90.0000) =   4467.773 ms/op
     p(95.0000) =   4538.237 ms/op
     p(99.0000) =   4538.237 ms/op
     p(99.9000) =   4538.237 ms/op
     p(99.9900) =   4538.237 ms/op
     p(99.9990) =   4538.237 ms/op
     p(99.9999) =   4538.237 ms/op
    p(100.0000) =   4538.237 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 51.04% complete, ETA 03:15:01
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1369126716 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1369126716() {
        this(4);
    }
    public KeyMultiRecordMap_1369126716(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1369126716 join_map = new KeyMultiRecordMap_1369126716();
private final class KeyMultiRecordMap_994634927 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_994634927() {
        this(4);
    }
    public KeyMultiRecordMap_994634927(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_994634927 join_map_0 = new KeyMultiRecordMap_994634927();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

52210.696 ms/op
# Warmup Iteration   2: 50331.648 ms/op
# Warmup Iteration   3: 50264.539 ms/op
# Warmup Iteration   4: 48653.926 ms/op
# Warmup Iteration   5: 48452.600 ms/op
Iteration   1: 48452.600 ms/op
                 executeQuery·p0.00:   48452.600 ms/op
                 executeQuery·p0.50:   48452.600 ms/op
                 executeQuery·p0.90:   48452.600 ms/op
                 executeQuery·p0.95:   48452.600 ms/op
                 executeQuery·p0.99:   48452.600 ms/op
                 executeQuery·p0.999:  48452.600 ms/op
                 executeQuery·p0.9999: 48452.600 ms/op
                 executeQuery·p1.00:   48452.600 ms/op

Iteration   2: 48385.491 ms/op
                 executeQuery·p0.00:   48385.491 ms/op
                 executeQuery·p0.50:   48385.491 ms/op
                 executeQuery·p0.90:   48385.491 ms/op
                 executeQuery·p0.95:   48385.491 ms/op
                 executeQuery·p0.99:   48385.491 ms/op
                 executeQuery·p0.999:  48385.491 ms/op
                 executeQuery·p0.9999: 48385.491 ms/op
                 executeQuery·p1.00:   48385.491 ms/op

Iteration   3: 48653.926 ms/op
                 executeQuery·p0.00:   48653.926 ms/op
                 executeQuery·p0.50:   48653.926 ms/op
                 executeQuery·p0.90:   48653.926 ms/op
                 executeQuery·p0.95:   48653.926 ms/op
                 executeQuery·p0.99:   48653.926 ms/op
                 executeQuery·p0.999:  48653.926 ms/op
                 executeQuery·p0.9999: 48653.926 ms/op
                 executeQuery·p1.00:   48653.926 ms/op

Iteration   4: 48653.926 ms/op
                 executeQuery·p0.00:   48653.926 ms/op
                 executeQuery·p0.50:   48653.926 ms/op
                 executeQuery·p0.90:   48653.926 ms/op
                 executeQuery·p0.95:   48653.926 ms/op
                 executeQuery·p0.99:   48653.926 ms/op
                 executeQuery·p0.999:  48653.926 ms/op
                 executeQuery·p0.9999: 48653.926 ms/op
                 executeQuery·p1.00:   48653.926 ms/op

Iteration   5: 47915.729 ms/op
                 executeQuery·p0.00:   47915.729 ms/op
                 executeQuery·p0.50:   47915.729 ms/op
                 executeQuery·p0.90:   47915.729 ms/op
                 executeQuery·p0.95:   47915.729 ms/op
                 executeQuery·p0.99:   47915.729 ms/op
                 executeQuery·p0.999:  47915.729 ms/op
                 executeQuery·p0.9999: 47915.729 ms/op
                 executeQuery·p1.00:   47915.729 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  48412.334 ±(99.9%) 1164.290 ms/op

  Histogram, ms/op:
    [47900.000, 47950.000) = 1 
    [47950.000, 48000.000) = 0 
    [48000.000, 48050.000) = 0 
    [48050.000, 48100.000) = 0 
    [48100.000, 48150.000) = 0 
    [48150.000, 48200.000) = 0 
    [48200.000, 48250.000) = 0 
    [48250.000, 48300.000) = 0 
    [48300.000, 48350.000) = 0 
    [48350.000, 48400.000) = 1 
    [48400.000, 48450.000) = 0 
    [48450.000, 48500.000) = 1 
    [48500.000, 48550.000) = 0 
    [48550.000, 48600.000) = 0 
    [48600.000, 48650.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  47915.729 ms/op
     p(50.0000) =  48452.600 ms/op
     p(90.0000) =  48653.926 ms/op
     p(95.0000) =  48653.926 ms/op
     p(99.0000) =  48653.926 ms/op
     p(99.9000) =  48653.926 ms/op
     p(99.9900) =  48653.926 ms/op
     p(99.9990) =  48653.926 ms/op
     p(99.9999) =  48653.926 ms/op
    p(100.0000) =  48653.926 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 52.08% complete, ETA 03:14:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_676324260 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_676324260() {
        this(4);
    }
    public KeyMultiRecordMap_676324260(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_676324260 join_map = new KeyMultiRecordMap_676324260();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_568875456 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_568875456() {
        this(4);
    }
    public KeyMultiRecordMap_568875456(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_568875456 join_map_0 = new KeyMultiRecordMap_568875456();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4563.403 ±(99.9%) 3880.689 ms/op
# Warmup Iteration   2: 4549.422 ±(99.9%) 1074.914 ms/op
# Warmup Iteration   3: 4499.090 ±(99.9%) 233.772 ms/op
# Warmup Iteration   4: 4445.962 ±(99.9%) 2070.279 ms/op
# Warmup Iteration   5: 4440.370 ±(99.9%) 1421.977 ms/op
Iteration   1: 4496.294 ±(99.9%) 3711.009 ms/op
                 executeQuery·p0.00:   4378.853 ms/op
                 executeQuery·p0.50:   4378.853 ms/op
                 executeQuery·p0.90:   4731.175 ms/op
                 executeQuery·p0.95:   4731.175 ms/op
                 executeQuery·p0.99:   4731.175 ms/op
                 executeQuery·p0.999:  4731.175 ms/op
                 executeQuery·p0.9999: 4731.175 ms/op
                 executeQuery·p1.00:   4731.175 ms/op

Iteration   2: 4468.332 ±(99.9%) 2230.039 ms/op
                 executeQuery·p0.00:   4370.465 ms/op
                 executeQuery·p0.50:   4429.185 ms/op
                 executeQuery·p0.90:   4605.346 ms/op
                 executeQuery·p0.95:   4605.346 ms/op
                 executeQuery·p0.99:   4605.346 ms/op
                 executeQuery·p0.999:  4605.346 ms/op
                 executeQuery·p0.9999: 4605.346 ms/op
                 executeQuery·p1.00:   4605.346 ms/op

Iteration   3: 4462.739 ±(99.9%) 2058.935 ms/op
                 executeQuery·p0.00:   4370.465 ms/op
                 executeQuery·p0.50:   4429.185 ms/op
                 executeQuery·p0.90:   4588.569 ms/op
                 executeQuery·p0.95:   4588.569 ms/op
                 executeQuery·p0.99:   4588.569 ms/op
                 executeQuery·p0.999:  4588.569 ms/op
                 executeQuery·p0.9999: 4588.569 ms/op
                 executeQuery·p1.00:   4588.569 ms/op

Iteration   4: 4473.924 ±(99.9%) 1592.885 ms/op
                 executeQuery·p0.00:   4404.019 ms/op
                 executeQuery·p0.50:   4445.962 ms/op
                 executeQuery·p0.90:   4571.791 ms/op
                 executeQuery·p0.95:   4571.791 ms/op
                 executeQuery·p0.99:   4571.791 ms/op
                 executeQuery·p0.999:  4571.791 ms/op
                 executeQuery·p0.9999: 4571.791 ms/op
                 executeQuery·p1.00:   4571.791 ms/op

Iteration   5: 4457.147 ±(99.9%) 537.457 ms/op
                 executeQuery·p0.00:   4429.185 ms/op
                 executeQuery·p0.50:   4454.351 ms/op
                 executeQuery·p0.90:   4487.905 ms/op
                 executeQuery·p0.95:   4487.905 ms/op
                 executeQuery·p0.99:   4487.905 ms/op
                 executeQuery·p0.999:  4487.905 ms/op
                 executeQuery·p0.9999: 4487.905 ms/op
                 executeQuery·p1.00:   4487.905 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   4471.687 ±(99.9%) 113.511 ms/op

  Histogram, ms/op:
    [4300.000, 4350.000) = 0 
    [4350.000, 4400.000) = 4 
    [4400.000, 4450.000) = 5 
    [4450.000, 4500.000) = 2 
    [4500.000, 4550.000) = 0 
    [4550.000, 4600.000) = 2 
    [4600.000, 4650.000) = 1 
    [4650.000, 4700.000) = 0 
    [4700.000, 4750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4370.465 ms/op
     p(50.0000) =   4429.185 ms/op
     p(90.0000) =   4655.677 ms/op
     p(95.0000) =   4731.175 ms/op
     p(99.0000) =   4731.175 ms/op
     p(99.9000) =   4731.175 ms/op
     p(99.9900) =   4731.175 ms/op
     p(99.9990) =   4731.175 ms/op
     p(99.9999) =   4731.175 ms/op
    p(100.0000) =   4731.175 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 53.13% complete, ETA 03:08:42
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_676324260 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_676324260() {
        this(4);
    }
    public KeyMultiRecordMap_676324260(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_676324260 join_map = new KeyMultiRecordMap_676324260();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_568875456 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_568875456() {
        this(4);
    }
    public KeyMultiRecordMap_568875456(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_568875456 join_map_0 = new KeyMultiRecordMap_568875456();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

50868.519 ms/op
# Warmup Iteration   2: 50868.519 ms/op
# Warmup Iteration   3: 48788.144 ms/op
# Warmup Iteration   4: 47781.511 ms/op
# Warmup Iteration   5: 51271.172 ms/op
Iteration   1: 50935.628 ms/op
                 executeQuery·p0.00:   50935.628 ms/op
                 executeQuery·p0.50:   50935.628 ms/op
                 executeQuery·p0.90:   50935.628 ms/op
                 executeQuery·p0.95:   50935.628 ms/op
                 executeQuery·p0.99:   50935.628 ms/op
                 executeQuery·p0.999:  50935.628 ms/op
                 executeQuery·p0.9999: 50935.628 ms/op
                 executeQuery·p1.00:   50935.628 ms/op

Iteration   2: 50868.519 ms/op
                 executeQuery·p0.00:   50868.519 ms/op
                 executeQuery·p0.50:   50868.519 ms/op
                 executeQuery·p0.90:   50868.519 ms/op
                 executeQuery·p0.95:   50868.519 ms/op
                 executeQuery·p0.99:   50868.519 ms/op
                 executeQuery·p0.999:  50868.519 ms/op
                 executeQuery·p0.9999: 50868.519 ms/op
                 executeQuery·p1.00:   50868.519 ms/op

Iteration   3: 51069.846 ms/op
                 executeQuery·p0.00:   51069.846 ms/op
                 executeQuery·p0.50:   51069.846 ms/op
                 executeQuery·p0.90:   51069.846 ms/op
                 executeQuery·p0.95:   51069.846 ms/op
                 executeQuery·p0.99:   51069.846 ms/op
                 executeQuery·p0.999:  51069.846 ms/op
                 executeQuery·p0.9999: 51069.846 ms/op
                 executeQuery·p1.00:   51069.846 ms/op

Iteration   4: 50465.866 ms/op
                 executeQuery·p0.00:   50465.866 ms/op
                 executeQuery·p0.50:   50465.866 ms/op
                 executeQuery·p0.90:   50465.866 ms/op
                 executeQuery·p0.95:   50465.866 ms/op
                 executeQuery·p0.99:   50465.866 ms/op
                 executeQuery·p0.999:  50465.866 ms/op
                 executeQuery·p0.9999: 50465.866 ms/op
                 executeQuery·p1.00:   50465.866 ms/op

Iteration   5: 50734.301 ms/op
                 executeQuery·p0.00:   50734.301 ms/op
                 executeQuery·p0.50:   50734.301 ms/op
                 executeQuery·p0.90:   50734.301 ms/op
                 executeQuery·p0.95:   50734.301 ms/op
                 executeQuery·p0.99:   50734.301 ms/op
                 executeQuery·p0.999:  50734.301 ms/op
                 executeQuery·p0.9999: 50734.301 ms/op
                 executeQuery·p1.00:   50734.301 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  50814.832 ±(99.9%) 883.906 ms/op

  Histogram, ms/op:
    [50400.000, 50450.000) = 0 
    [50450.000, 50500.000) = 1 
    [50500.000, 50550.000) = 0 
    [50550.000, 50600.000) = 0 
    [50600.000, 50650.000) = 0 
    [50650.000, 50700.000) = 0 
    [50700.000, 50750.000) = 1 
    [50750.000, 50800.000) = 0 
    [50800.000, 50850.000) = 0 
    [50850.000, 50900.000) = 1 
    [50900.000, 50950.000) = 1 
    [50950.000, 51000.000) = 0 
    [51000.000, 51050.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  50465.866 ms/op
     p(50.0000) =  50868.519 ms/op
     p(90.0000) =  51069.846 ms/op
     p(95.0000) =  51069.846 ms/op
     p(99.0000) =  51069.846 ms/op
     p(99.9000) =  51069.846 ms/op
     p(99.9900) =  51069.846 ms/op
     p(99.9990) =  51069.846 ms/op
     p(99.9999) =  51069.846 ms/op
    p(100.0000) =  51069.846 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 54.17% complete, ETA 03:08:07
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1893.379 ±(99.9%) 418.562 ms/op
# Warmup Iteration   2: 1804.599 ±(99.9%) 14.284 ms/op
# Warmup Iteration   3: 1799.007 ±(99.9%) 6.875 ms/op
# Warmup Iteration   4: 1796.910 ±(99.9%) 6.875 ms/op
# Warmup Iteration   5: 1796.910 ±(99.9%) 4.427 ms/op
Iteration   1: 1795.512 ±(99.9%) 6.875 ms/op
                 executeQuery·p0.00:   1790.968 ms/op
                 executeQuery·p0.50:   1796.211 ms/op
                 executeQuery·p0.90:   1797.259 ms/op
                 executeQuery·p0.95:   1797.259 ms/op
                 executeQuery·p0.99:   1797.259 ms/op
                 executeQuery·p0.999:  1797.259 ms/op
                 executeQuery·p0.9999: 1797.259 ms/op
                 executeQuery·p1.00:   1797.259 ms/op

Iteration   2: 1799.007 ±(99.9%) 10.129 ms/op
                 executeQuery·p0.00:   1795.162 ms/op
                 executeQuery·p0.50:   1798.308 ms/op
                 executeQuery·p0.90:   1805.648 ms/op
                 executeQuery·p0.95:   1805.648 ms/op
                 executeQuery·p0.99:   1805.648 ms/op
                 executeQuery·p0.999:  1805.648 ms/op
                 executeQuery·p0.9999: 1805.648 ms/op
                 executeQuery·p1.00:   1805.648 ms/op

Iteration   3: 1797.259 ±(99.9%) 6.442 ms/op
                 executeQuery·p0.00:   1795.162 ms/op
                 executeQuery·p0.50:   1797.259 ms/op
                 executeQuery·p0.90:   1801.454 ms/op
                 executeQuery·p0.95:   1801.454 ms/op
                 executeQuery·p0.99:   1801.454 ms/op
                 executeQuery·p0.999:  1801.454 ms/op
                 executeQuery·p0.9999: 1801.454 ms/op
                 executeQuery·p1.00:   1801.454 ms/op

Iteration   4: 1798.308 ±(99.9%) 4.920 ms/op
                 executeQuery·p0.00:   1795.162 ms/op
                 executeQuery·p0.50:   1799.356 ms/op
                 executeQuery·p0.90:   1799.356 ms/op
                 executeQuery·p0.95:   1799.356 ms/op
                 executeQuery·p0.99:   1799.356 ms/op
                 executeQuery·p0.999:  1799.356 ms/op
                 executeQuery·p0.9999: 1799.356 ms/op
                 executeQuery·p1.00:   1799.356 ms/op

Iteration   5: 1805.997 ±(99.9%) 60.251 ms/op
                 executeQuery·p0.00:   1795.162 ms/op
                 executeQuery·p0.50:   1798.308 ms/op
                 executeQuery·p0.90:   1849.688 ms/op
                 executeQuery·p0.95:   1849.688 ms/op
                 executeQuery·p0.99:   1849.688 ms/op
                 executeQuery·p0.999:  1849.688 ms/op
                 executeQuery·p0.9999: 1849.688 ms/op
                 executeQuery·p1.00:   1849.688 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   1799.217 ±(99.9%) 6.602 ms/op

  Histogram, ms/op:
    [1790.000, 1795.000) = 1 
    [1795.000, 1800.000) = 26 
    [1800.000, 1805.000) = 1 
    [1805.000, 1810.000) = 1 
    [1810.000, 1815.000) = 0 
    [1815.000, 1820.000) = 0 
    [1820.000, 1825.000) = 0 
    [1825.000, 1830.000) = 0 
    [1830.000, 1835.000) = 0 
    [1835.000, 1840.000) = 0 
    [1840.000, 1845.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1790.968 ms/op
     p(50.0000) =   1797.259 ms/op
     p(90.0000) =   1801.244 ms/op
     p(95.0000) =   1825.466 ms/op
     p(99.0000) =   1849.688 ms/op
     p(99.9000) =   1849.688 ms/op
     p(99.9900) =   1849.688 ms/op
     p(99.9990) =   1849.688 ms/op
     p(99.9999) =   1849.688 ms/op
    p(100.0000) =   1849.688 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 55.21% complete, ETA 03:01:54
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
29293.019 ms/op
# Warmup Iteration   2: 29829.890 ms/op
# Warmup Iteration   3: 28017.951 ms/op
# Warmup Iteration   4: 23722.983 ms/op
# Warmup Iteration   5: 23488.102 ms/op
Iteration   1: 23488.102 ms/op
                 executeQuery·p0.00:   23488.102 ms/op
                 executeQuery·p0.50:   23488.102 ms/op
                 executeQuery·p0.90:   23488.102 ms/op
                 executeQuery·p0.95:   23488.102 ms/op
                 executeQuery·p0.99:   23488.102 ms/op
                 executeQuery·p0.999:  23488.102 ms/op
                 executeQuery·p0.9999: 23488.102 ms/op
                 executeQuery·p1.00:   23488.102 ms/op

Iteration   2: 23488.102 ms/op
                 executeQuery·p0.00:   23488.102 ms/op
                 executeQuery·p0.50:   23488.102 ms/op
                 executeQuery·p0.90:   23488.102 ms/op
                 executeQuery·p0.95:   23488.102 ms/op
                 executeQuery·p0.99:   23488.102 ms/op
                 executeQuery·p0.999:  23488.102 ms/op
                 executeQuery·p0.9999: 23488.102 ms/op
                 executeQuery·p1.00:   23488.102 ms/op

Iteration   3: 23488.102 ms/op
                 executeQuery·p0.00:   23488.102 ms/op
                 executeQuery·p0.50:   23488.102 ms/op
                 executeQuery·p0.90:   23488.102 ms/op
                 executeQuery·p0.95:   23488.102 ms/op
                 executeQuery·p0.99:   23488.102 ms/op
                 executeQuery·p0.999:  23488.102 ms/op
                 executeQuery·p0.9999: 23488.102 ms/op
                 executeQuery·p1.00:   23488.102 ms/op

Iteration   4: 23521.657 ms/op
                 executeQuery·p0.00:   23521.657 ms/op
                 executeQuery·p0.50:   23521.657 ms/op
                 executeQuery·p0.90:   23521.657 ms/op
                 executeQuery·p0.95:   23521.657 ms/op
                 executeQuery·p0.99:   23521.657 ms/op
                 executeQuery·p0.999:  23521.657 ms/op
                 executeQuery·p0.9999: 23521.657 ms/op
                 executeQuery·p1.00:   23521.657 ms/op

Iteration   5: 23521.657 ms/op
                 executeQuery·p0.00:   23521.657 ms/op
                 executeQuery·p0.50:   23521.657 ms/op
                 executeQuery·p0.90:   23521.657 ms/op
                 executeQuery·p0.95:   23521.657 ms/op
                 executeQuery·p0.99:   23521.657 ms/op
                 executeQuery·p0.999:  23521.657 ms/op
                 executeQuery·p0.9999: 23521.657 ms/op
                 executeQuery·p1.00:   23521.657 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  23501.524 ±(99.9%) 70.769 ms/op

  Histogram, ms/op:
    [23480.000, 23485.000) = 0 
    [23485.000, 23490.000) = 3 
    [23490.000, 23495.000) = 0 
    [23495.000, 23500.000) = 0 
    [23500.000, 23505.000) = 0 
    [23505.000, 23510.000) = 0 
    [23510.000, 23515.000) = 0 
    [23515.000, 23520.000) = 0 
    [23520.000, 23525.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  23488.102 ms/op
     p(50.0000) =  23488.102 ms/op
     p(90.0000) =  23521.657 ms/op
     p(95.0000) =  23521.657 ms/op
     p(99.0000) =  23521.657 ms/op
     p(99.9000) =  23521.657 ms/op
     p(99.9900) =  23521.657 ms/op
     p(99.9990) =  23521.657 ms/op
     p(99.9999) =  23521.657 ms/op
    p(100.0000) =  23521.657 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 56.25% complete, ETA 02:57:54
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1427.262 ±(99.9%) 250.107 ms/op
# Warmup Iteration   2: 1349.779 ±(99.9%) 47.052 ms/op
# Warmup Iteration   3: 1337.721 ±(99.9%) 7.559 ms/op
# Warmup Iteration   4: 1338.769 ±(99.9%) 9.077 ms/op
# Warmup Iteration   5: 1339.294 ±(99.9%) 10.265 ms/op
Iteration   1: 1337.721 ±(99.9%) 9.924 ms/op
                 executeQuery·p0.00:   1333.789 ms/op
                 executeQuery·p0.50:   1335.886 ms/op
                 executeQuery·p0.90:   1348.469 ms/op
                 executeQuery·p0.95:   1348.469 ms/op
                 executeQuery·p0.99:   1348.469 ms/op
                 executeQuery·p0.999:  1348.469 ms/op
                 executeQuery·p0.9999: 1348.469 ms/op
                 executeQuery·p1.00:   1348.469 ms/op

Iteration   2: 1337.197 ±(99.9%) 7.709 ms/op
                 executeQuery·p0.00:   1333.789 ms/op
                 executeQuery·p0.50:   1335.886 ms/op
                 executeQuery·p0.90:   1344.274 ms/op
                 executeQuery·p0.95:   1344.274 ms/op
                 executeQuery·p0.99:   1344.274 ms/op
                 executeQuery·p0.999:  1344.274 ms/op
                 executeQuery·p0.9999: 1344.274 ms/op
                 executeQuery·p1.00:   1344.274 ms/op

Iteration   3: 1341.653 ±(99.9%) 17.511 ms/op
                 executeQuery·p0.00:   1329.594 ms/op
                 executeQuery·p0.50:   1340.080 ms/op
                 executeQuery·p0.90:   1361.052 ms/op
                 executeQuery·p0.95:   1361.052 ms/op
                 executeQuery·p0.99:   1361.052 ms/op
                 executeQuery·p0.999:  1361.052 ms/op
                 executeQuery·p0.9999: 1361.052 ms/op
                 executeQuery·p1.00:   1361.052 ms/op

Iteration   4: 1349.255 ±(99.9%) 8.001 ms/op
                 executeQuery·p0.00:   1344.274 ms/op
                 executeQuery·p0.50:   1348.469 ms/op
                 executeQuery·p0.90:   1356.857 ms/op
                 executeQuery·p0.95:   1356.857 ms/op
                 executeQuery·p0.99:   1356.857 ms/op
                 executeQuery·p0.999:  1356.857 ms/op
                 executeQuery·p0.9999: 1356.857 ms/op
                 executeQuery·p1.00:   1356.857 ms/op

Iteration   5: 1348.207 ±(99.9%) 7.857 ms/op
                 executeQuery·p0.00:   1344.274 ms/op
                 executeQuery·p0.50:   1346.372 ms/op
                 executeQuery·p0.90:   1354.760 ms/op
                 executeQuery·p0.95:   1354.760 ms/op
                 executeQuery·p0.99:   1354.760 ms/op
                 executeQuery·p0.999:  1354.760 ms/op
                 executeQuery·p0.9999: 1354.760 ms/op
                 executeQuery·p1.00:   1354.760 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 40
  mean =   1342.806 ±(99.9%) 4.192 ms/op

  Histogram, ms/op:
    [1320.000, 1325.000) = 0 
    [1325.000, 1330.000) = 1 
    [1330.000, 1335.000) = 7 
    [1335.000, 1340.000) = 6 
    [1340.000, 1345.000) = 10 
    [1345.000, 1350.000) = 9 
    [1350.000, 1355.000) = 5 
    [1355.000, 1360.000) = 1 
    [1360.000, 1365.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1329.594 ms/op
     p(50.0000) =   1344.274 ms/op
     p(90.0000) =   1354.550 ms/op
     p(95.0000) =   1356.752 ms/op
     p(99.0000) =   1361.052 ms/op
     p(99.9000) =   1361.052 ms/op
     p(99.9900) =   1361.052 ms/op
     p(99.9990) =   1361.052 ms/op
     p(99.9999) =   1361.052 ms/op
    p(100.0000) =   1361.052 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 57.29% complete, ETA 02:51:52
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
19193.135 ms/op
# Warmup Iteration   2: 18924.700 ms/op
# Warmup Iteration   3: 17381.196 ms/op
# Warmup Iteration   4: 17079.206 ms/op
# Warmup Iteration   5: 17129.538 ms/op
Iteration   1: 17112.760 ms/op
                 executeQuery·p0.00:   17112.760 ms/op
                 executeQuery·p0.50:   17112.760 ms/op
                 executeQuery·p0.90:   17112.760 ms/op
                 executeQuery·p0.95:   17112.760 ms/op
                 executeQuery·p0.99:   17112.760 ms/op
                 executeQuery·p0.999:  17112.760 ms/op
                 executeQuery·p0.9999: 17112.760 ms/op
                 executeQuery·p1.00:   17112.760 ms/op

Iteration   2: 17112.760 ms/op
                 executeQuery·p0.00:   17112.760 ms/op
                 executeQuery·p0.50:   17112.760 ms/op
                 executeQuery·p0.90:   17112.760 ms/op
                 executeQuery·p0.95:   17112.760 ms/op
                 executeQuery·p0.99:   17112.760 ms/op
                 executeQuery·p0.999:  17112.760 ms/op
                 executeQuery·p0.9999: 17112.760 ms/op
                 executeQuery·p1.00:   17112.760 ms/op

Iteration   3: 17129.538 ms/op
                 executeQuery·p0.00:   17129.538 ms/op
                 executeQuery·p0.50:   17129.538 ms/op
                 executeQuery·p0.90:   17129.538 ms/op
                 executeQuery·p0.95:   17129.538 ms/op
                 executeQuery·p0.99:   17129.538 ms/op
                 executeQuery·p0.999:  17129.538 ms/op
                 executeQuery·p0.9999: 17129.538 ms/op
                 executeQuery·p1.00:   17129.538 ms/op

Iteration   4: 17079.206 ms/op
                 executeQuery·p0.00:   17079.206 ms/op
                 executeQuery·p0.50:   17079.206 ms/op
                 executeQuery·p0.90:   17079.206 ms/op
                 executeQuery·p0.95:   17079.206 ms/op
                 executeQuery·p0.99:   17079.206 ms/op
                 executeQuery·p0.999:  17079.206 ms/op
                 executeQuery·p0.9999: 17079.206 ms/op
                 executeQuery·p1.00:   17079.206 ms/op

Iteration   5: 17129.538 ms/op
                 executeQuery·p0.00:   17129.538 ms/op
                 executeQuery·p0.50:   17129.538 ms/op
                 executeQuery·p0.90:   17129.538 ms/op
                 executeQuery·p0.95:   17129.538 ms/op
                 executeQuery·p0.99:   17129.538 ms/op
                 executeQuery·p0.999:  17129.538 ms/op
                 executeQuery·p0.9999: 17129.538 ms/op
                 executeQuery·p1.00:   17129.538 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 5
  mean =  17112.760 ±(99.9%) 79.122 ms/op

  Histogram, ms/op:
    [17070.000, 17075.000) = 0 
    [17075.000, 17080.000) = 1 
    [17080.000, 17085.000) = 0 
    [17085.000, 17090.000) = 0 
    [17090.000, 17095.000) = 0 
    [17095.000, 17100.000) = 0 
    [17100.000, 17105.000) = 0 
    [17105.000, 17110.000) = 0 
    [17110.000, 17115.000) = 2 
    [17115.000, 17120.000) = 0 
    [17120.000, 17125.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  17079.206 ms/op
     p(50.0000) =  17112.760 ms/op
     p(90.0000) =  17129.538 ms/op
     p(95.0000) =  17129.538 ms/op
     p(99.0000) =  17129.538 ms/op
     p(99.9000) =  17129.538 ms/op
     p(99.9900) =  17129.538 ms/op
     p(99.9990) =  17129.538 ms/op
     p(99.9999) =  17129.538 ms/op
    p(100.0000) =  17129.538 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 58.33% complete, ETA 02:46:52
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1993.553 ±(99.9%) 104.294 ms/op
# Warmup Iteration   2: 1969.925 ±(99.9%) 10.949 ms/op
# Warmup Iteration   3: 1970.624 ±(99.9%) 3.037 ms/op
# Warmup Iteration   4: 1969.925 ±(99.9%) 3.037 ms/op
# Warmup Iteration   5: 1970.624 ±(99.9%) 3.037 ms/op
Iteration   1: 1977.964 ±(99.9%) 60.136 ms/op
                 executeQuery·p0.00:   1967.129 ms/op
                 executeQuery·p0.50:   1969.226 ms/op
                 executeQuery·p0.90:   2021.655 ms/op
                 executeQuery·p0.95:   2021.655 ms/op
                 executeQuery·p0.99:   2021.655 ms/op
                 executeQuery·p0.999:  2021.655 ms/op
                 executeQuery·p0.9999: 2021.655 ms/op
                 executeQuery·p1.00:   2021.655 ms/op

Iteration   2: 1972.721 ±(99.9%) 3.037 ms/op
                 executeQuery·p0.00:   1971.323 ms/op
                 executeQuery·p0.50:   1973.420 ms/op
                 executeQuery·p0.90:   1973.420 ms/op
                 executeQuery·p0.95:   1973.420 ms/op
                 executeQuery·p0.99:   1973.420 ms/op
                 executeQuery·p0.999:  1973.420 ms/op
                 executeQuery·p0.9999: 1973.420 ms/op
                 executeQuery·p1.00:   1973.420 ms/op

Iteration   3: 1972.371 ±(99.9%) 4.920 ms/op
                 executeQuery·p0.00:   1971.323 ms/op
                 executeQuery·p0.50:   1971.323 ms/op
                 executeQuery·p0.90:   1975.517 ms/op
                 executeQuery·p0.95:   1975.517 ms/op
                 executeQuery·p0.99:   1975.517 ms/op
                 executeQuery·p0.999:  1975.517 ms/op
                 executeQuery·p0.9999: 1975.517 ms/op
                 executeQuery·p1.00:   1975.517 ms/op

Iteration   4: 1972.022 ±(99.9%) 4.802 ms/op
                 executeQuery·p0.00:   1969.226 ms/op
                 executeQuery·p0.50:   1972.371 ms/op
                 executeQuery·p0.90:   1973.420 ms/op
                 executeQuery·p0.95:   1973.420 ms/op
                 executeQuery·p0.99:   1973.420 ms/op
                 executeQuery·p0.999:  1973.420 ms/op
                 executeQuery·p0.9999: 1973.420 ms/op
                 executeQuery·p1.00:   1973.420 ms/op

Iteration   5: 1972.371 ±(99.9%) 3.221 ms/op
                 executeQuery·p0.00:   1971.323 ms/op
                 executeQuery·p0.50:   1972.371 ms/op
                 executeQuery·p0.90:   1973.420 ms/op
                 executeQuery·p0.95:   1973.420 ms/op
                 executeQuery·p0.99:   1973.420 ms/op
                 executeQuery·p0.999:  1973.420 ms/op
                 executeQuery·p0.9999: 1973.420 ms/op
                 executeQuery·p1.00:   1973.420 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   1973.490 ±(99.9%) 6.195 ms/op

  Histogram, ms/op:
    [1960.000, 1965.000) = 0 
    [1965.000, 1970.000) = 5 
    [1970.000, 1975.000) = 23 
    [1975.000, 1980.000) = 1 
    [1980.000, 1985.000) = 0 
    [1985.000, 1990.000) = 0 
    [1990.000, 1995.000) = 0 
    [1995.000, 2000.000) = 0 
    [2000.000, 2005.000) = 0 
    [2005.000, 2010.000) = 0 
    [2010.000, 2015.000) = 0 
    [2015.000, 2020.000) = 0 
    [2020.000, 2025.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1967.129 ms/op
     p(50.0000) =   1971.323 ms/op
     p(90.0000) =   1973.420 ms/op
     p(95.0000) =   1996.279 ms/op
     p(99.0000) =   2021.655 ms/op
     p(99.9000) =   2021.655 ms/op
     p(99.9900) =   2021.655 ms/op
     p(99.9990) =   2021.655 ms/op
     p(99.9999) =   2021.655 ms/op
    p(100.0000) =   2021.655 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 59.38% complete, ETA 02:41:13
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
24159.191 ms/op
# Warmup Iteration   2: 26440.892 ms/op
# Warmup Iteration   3: 26004.685 ms/op
# Warmup Iteration   4: 26004.685 ms/op
# Warmup Iteration   5: 26004.685 ms/op
Iteration   1: 26004.685 ms/op
                 executeQuery·p0.00:   26004.685 ms/op
                 executeQuery·p0.50:   26004.685 ms/op
                 executeQuery·p0.90:   26004.685 ms/op
                 executeQuery·p0.95:   26004.685 ms/op
                 executeQuery·p0.99:   26004.685 ms/op
                 executeQuery·p0.999:  26004.685 ms/op
                 executeQuery·p0.9999: 26004.685 ms/op
                 executeQuery·p1.00:   26004.685 ms/op

Iteration   2: 26004.685 ms/op
                 executeQuery·p0.00:   26004.685 ms/op
                 executeQuery·p0.50:   26004.685 ms/op
                 executeQuery·p0.90:   26004.685 ms/op
                 executeQuery·p0.95:   26004.685 ms/op
                 executeQuery·p0.99:   26004.685 ms/op
                 executeQuery·p0.999:  26004.685 ms/op
                 executeQuery·p0.9999: 26004.685 ms/op
                 executeQuery·p1.00:   26004.685 ms/op

Iteration   3: 26004.685 ms/op
                 executeQuery·p0.00:   26004.685 ms/op
                 executeQuery·p0.50:   26004.685 ms/op
                 executeQuery·p0.90:   26004.685 ms/op
                 executeQuery·p0.95:   26004.685 ms/op
                 executeQuery·p0.99:   26004.685 ms/op
                 executeQuery·p0.999:  26004.685 ms/op
                 executeQuery·p0.9999: 26004.685 ms/op
                 executeQuery·p1.00:   26004.685 ms/op

Iteration   4: 26004.685 ms/op
                 executeQuery·p0.00:   26004.685 ms/op
                 executeQuery·p0.50:   26004.685 ms/op
                 executeQuery·p0.90:   26004.685 ms/op
                 executeQuery·p0.95:   26004.685 ms/op
                 executeQuery·p0.99:   26004.685 ms/op
                 executeQuery·p0.999:  26004.685 ms/op
                 executeQuery·p0.9999: 26004.685 ms/op
                 executeQuery·p1.00:   26004.685 ms/op

Iteration   5: 26004.685 ms/op
                 executeQuery·p0.00:   26004.685 ms/op
                 executeQuery·p0.50:   26004.685 ms/op
                 executeQuery·p0.90:   26004.685 ms/op
                 executeQuery·p0.95:   26004.685 ms/op
                 executeQuery·p0.99:   26004.685 ms/op
                 executeQuery·p0.999:  26004.685 ms/op
                 executeQuery·p0.9999: 26004.685 ms/op
                 executeQuery·p1.00:   26004.685 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  26004.685 ±(99.9%) 0.001 ms/op

  Histogram, ms/op:
    [26004.685, 26004.685) = 5 

  Percentiles, ms/op:
      p(0.0000) =  26004.685 ms/op
     p(50.0000) =  26004.685 ms/op
     p(90.0000) =  26004.685 ms/op
     p(95.0000) =  26004.685 ms/op
     p(99.0000) =  26004.685 ms/op
     p(99.9000) =  26004.685 ms/op
     p(99.9900) =  26004.685 ms/op
     p(99.9990) =  26004.685 ms/op
     p(99.9999) =  26004.685 ms/op
    p(100.0000) =  26004.685 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 60.42% complete, ETA 02:37:25
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1122.442 ±(99.9%) 174.611 ms/op
# Warmup Iteration   2: 1099.374 ±(99.9%) 50.666 ms/op
# Warmup Iteration   3: 1085.626 ±(99.9%) 3.940 ms/op
# Warmup Iteration   4: 1088.189 ±(99.9%) 4.808 ms/op
# Warmup Iteration   5: 1086.325 ±(99.9%) 4.316 ms/op
Iteration   1: 1088.888 ±(99.9%) 18.629 ms/op
                 executeQuery·p0.00:   1082.130 ms/op
                 executeQuery·p0.50:   1086.325 ms/op
                 executeQuery·p0.90:   1117.782 ms/op
                 executeQuery·p0.95:   1117.782 ms/op
                 executeQuery·p0.99:   1117.782 ms/op
                 executeQuery·p0.999:  1117.782 ms/op
                 executeQuery·p0.9999: 1117.782 ms/op
                 executeQuery·p1.00:   1117.782 ms/op

Iteration   2: 1083.808 ±(99.9%) 2.501 ms/op
                 executeQuery·p0.00:   1082.130 ms/op
                 executeQuery·p0.50:   1084.228 ms/op
                 executeQuery·p0.90:   1086.325 ms/op
                 executeQuery·p0.95:   1086.325 ms/op
                 executeQuery·p0.99:   1086.325 ms/op
                 executeQuery·p0.999:  1086.325 ms/op
                 executeQuery·p0.9999: 1086.325 ms/op
                 executeQuery·p1.00:   1086.325 ms/op

Iteration   3: 1092.849 ±(99.9%) 3.270 ms/op
                 executeQuery·p0.00:   1090.519 ms/op
                 executeQuery·p0.50:   1092.616 ms/op
                 executeQuery·p0.90:   1094.713 ms/op
                 executeQuery·p0.95:   1094.713 ms/op
                 executeQuery·p0.99:   1094.713 ms/op
                 executeQuery·p0.999:  1094.713 ms/op
                 executeQuery·p0.9999: 1094.713 ms/op
                 executeQuery·p1.00:   1094.713 ms/op

Iteration   4: 1093.548 ±(99.9%) 3.108 ms/op
                 executeQuery·p0.00:   1090.519 ms/op
                 executeQuery·p0.50:   1092.616 ms/op
                 executeQuery·p0.90:   1096.810 ms/op
                 executeQuery·p0.95:   1096.810 ms/op
                 executeQuery·p0.99:   1096.810 ms/op
                 executeQuery·p0.999:  1096.810 ms/op
                 executeQuery·p0.9999: 1096.810 ms/op
                 executeQuery·p1.00:   1096.810 ms/op

Iteration   5: 1093.082 ±(99.9%) 3.852 ms/op
                 executeQuery·p0.00:   1090.519 ms/op
                 executeQuery·p0.50:   1092.616 ms/op
                 executeQuery·p0.90:   1096.810 ms/op
                 executeQuery·p0.95:   1096.810 ms/op
                 executeQuery·p0.99:   1096.810 ms/op
                 executeQuery·p0.999:  1096.810 ms/op
                 executeQuery·p0.9999: 1096.810 ms/op
                 executeQuery·p1.00:   1096.810 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 46
  mean =   1090.291 ±(99.9%) 3.255 ms/op

  Histogram, ms/op:
    [1080.000, 1082.500) = 6 
    [1082.500, 1085.000) = 6 
    [1085.000, 1087.500) = 4 
    [1087.500, 1090.000) = 2 
    [1090.000, 1092.500) = 7 
    [1092.500, 1095.000) = 18 
    [1095.000, 1097.500) = 2 
    [1097.500, 1100.000) = 0 
    [1100.000, 1102.500) = 0 
    [1102.500, 1105.000) = 0 
    [1105.000, 1107.500) = 0 
    [1107.500, 1110.000) = 0 
    [1110.000, 1112.500) = 0 
    [1112.500, 1115.000) = 0 
    [1115.000, 1117.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1082.130 ms/op
     p(50.0000) =   1090.519 ms/op
     p(90.0000) =   1094.713 ms/op
     p(95.0000) =   1096.810 ms/op
     p(99.0000) =   1117.782 ms/op
     p(99.9000) =   1117.782 ms/op
     p(99.9900) =   1117.782 ms/op
     p(99.9990) =   1117.782 ms/op
     p(99.9999) =   1117.782 ms/op
    p(100.0000) =   1117.782 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 61.46% complete, ETA 02:31:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
13254.001 ms/op
# Warmup Iteration   2: 12985.565 ms/op
# Warmup Iteration   3: 13270.778 ms/op
# Warmup Iteration   4: 11777.606 ms/op
# Warmup Iteration   5: 11341.398 ms/op
Iteration   1: 11324.621 ms/op
                 executeQuery·p0.00:   11324.621 ms/op
                 executeQuery·p0.50:   11324.621 ms/op
                 executeQuery·p0.90:   11324.621 ms/op
                 executeQuery·p0.95:   11324.621 ms/op
                 executeQuery·p0.99:   11324.621 ms/op
                 executeQuery·p0.999:  11324.621 ms/op
                 executeQuery·p0.9999: 11324.621 ms/op
                 executeQuery·p1.00:   11324.621 ms/op

Iteration   2: 11358.175 ms/op
                 executeQuery·p0.00:   11358.175 ms/op
                 executeQuery·p0.50:   11358.175 ms/op
                 executeQuery·p0.90:   11358.175 ms/op
                 executeQuery·p0.95:   11358.175 ms/op
                 executeQuery·p0.99:   11358.175 ms/op
                 executeQuery·p0.999:  11358.175 ms/op
                 executeQuery·p0.9999: 11358.175 ms/op
                 executeQuery·p1.00:   11358.175 ms/op

Iteration   3: 11324.621 ms/op
                 executeQuery·p0.00:   11324.621 ms/op
                 executeQuery·p0.50:   11324.621 ms/op
                 executeQuery·p0.90:   11324.621 ms/op
                 executeQuery·p0.95:   11324.621 ms/op
                 executeQuery·p0.99:   11324.621 ms/op
                 executeQuery·p0.999:  11324.621 ms/op
                 executeQuery·p0.9999: 11324.621 ms/op
                 executeQuery·p1.00:   11324.621 ms/op

Iteration   4: 11324.621 ms/op
                 executeQuery·p0.00:   11324.621 ms/op
                 executeQuery·p0.50:   11324.621 ms/op
                 executeQuery·p0.90:   11324.621 ms/op
                 executeQuery·p0.95:   11324.621 ms/op
                 executeQuery·p0.99:   11324.621 ms/op
                 executeQuery·p0.999:  11324.621 ms/op
                 executeQuery·p0.9999: 11324.621 ms/op
                 executeQuery·p1.00:   11324.621 ms/op

Iteration   5: 11307.844 ms/op
                 executeQuery·p0.00:   11307.844 ms/op
                 executeQuery·p0.50:   11307.844 ms/op
                 executeQuery·p0.90:   11307.844 ms/op
                 executeQuery·p0.95:   11307.844 ms/op
                 executeQuery·p0.99:   11307.844 ms/op
                 executeQuery·p0.999:  11307.844 ms/op
                 executeQuery·p0.9999: 11307.844 ms/op
                 executeQuery·p1.00:   11307.844 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 5
  mean =  11327.976 ±(99.9%) 70.769 ms/op

  Histogram, ms/op:
    [11300.000, 11305.000) = 0 
    [11305.000, 11310.000) = 1 
    [11310.000, 11315.000) = 0 
    [11315.000, 11320.000) = 0 
    [11320.000, 11325.000) = 3 
    [11325.000, 11330.000) = 0 
    [11330.000, 11335.000) = 0 
    [11335.000, 11340.000) = 0 
    [11340.000, 11345.000) = 0 
    [11345.000, 11350.000) = 0 
    [11350.000, 11355.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  11307.844 ms/op
     p(50.0000) =  11324.621 ms/op
     p(90.0000) =  11358.175 ms/op
     p(95.0000) =  11358.175 ms/op
     p(99.0000) =  11358.175 ms/op
     p(99.9000) =  11358.175 ms/op
     p(99.9900) =  11358.175 ms/op
     p(99.9990) =  11358.175 ms/op
     p(99.9999) =  11358.175 ms/op
    p(100.0000) =  11358.175 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 62.50% complete, ETA 02:26:28
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
422.816 ±(99.9%) 167.217 ms/op
# Warmup Iteration   2: 382.963 ±(99.9%) 22.252 ms/op
# Warmup Iteration   3: 402.255 ±(99.9%) 27.515 ms/op
# Warmup Iteration   4: 442.499 ±(99.9%) 2.169 ms/op
# Warmup Iteration   5: 366.009 ±(99.9%) 3.287 ms/op
Iteration   1: 366.796 ±(99.9%) 6.550 ms/op
                 executeQuery·p0.00:   354.419 ms/op
                 executeQuery·p0.50:   368.574 ms/op
                 executeQuery·p0.90:   372.769 ms/op
                 executeQuery·p0.95:   390.647 ms/op
                 executeQuery·p0.99:   405.275 ms/op
                 executeQuery·p0.999:  405.275 ms/op
                 executeQuery·p0.9999: 405.275 ms/op
                 executeQuery·p1.00:   405.275 ms/op

Iteration   2: 361.946 ±(99.9%) 1.294 ms/op
                 executeQuery·p0.00:   358.613 ms/op
                 executeQuery·p0.50:   361.759 ms/op
                 executeQuery·p0.90:   364.013 ms/op
                 executeQuery·p0.95:   366.294 ms/op
                 executeQuery·p0.99:   367.002 ms/op
                 executeQuery·p0.999:  367.002 ms/op
                 executeQuery·p0.9999: 367.002 ms/op
                 executeQuery·p1.00:   367.002 ms/op

Iteration   3: 361.703 ±(99.9%) 4.258 ms/op
                 executeQuery·p0.00:   355.467 ms/op
                 executeQuery·p0.50:   360.710 ms/op
                 executeQuery·p0.90:   363.908 ms/op
                 executeQuery·p0.95:   379.375 ms/op
                 executeQuery·p0.99:   391.643 ms/op
                 executeQuery·p0.999:  391.643 ms/op
                 executeQuery·p0.9999: 391.643 ms/op
                 executeQuery·p1.00:   391.643 ms/op

Iteration   4: 361.721 ±(99.9%) 5.141 ms/op
                 executeQuery·p0.00:   356.516 ms/op
                 executeQuery·p0.50:   360.710 ms/op
                 executeQuery·p0.90:   362.440 ms/op
                 executeQuery·p0.95:   382.888 ms/op
                 executeQuery·p0.99:   398.459 ms/op
                 executeQuery·p0.999:  398.459 ms/op
                 executeQuery·p0.9999: 398.459 ms/op
                 executeQuery·p1.00:   398.459 ms/op

Iteration   5: 360.036 ±(99.9%) 1.085 ms/op
                 executeQuery·p0.00:   357.040 ms/op
                 executeQuery·p0.50:   359.662 ms/op
                 executeQuery·p0.90:   361.864 ms/op
                 executeQuery·p0.95:   363.384 ms/op
                 executeQuery·p0.99:   363.856 ms/op
                 executeQuery·p0.999:  363.856 ms/op
                 executeQuery·p0.9999: 363.856 ms/op
                 executeQuery·p1.00:   363.856 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 140
  mean =    362.440 ±(99.9%) 1.827 ms/op

  Histogram, ms/op:
    [350.000, 355.000) = 1 
    [355.000, 360.000) = 39 
    [360.000, 365.000) = 81 
    [365.000, 370.000) = 7 
    [370.000, 375.000) = 9 
    [375.000, 380.000) = 0 
    [380.000, 385.000) = 0 
    [385.000, 390.000) = 0 
    [390.000, 395.000) = 1 
    [395.000, 400.000) = 1 
    [400.000, 405.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    354.419 ms/op
     p(50.0000) =    360.710 ms/op
     p(90.0000) =    369.571 ms/op
     p(95.0000) =    371.720 ms/op
     p(99.0000) =    402.480 ms/op
     p(99.9000) =    405.275 ms/op
     p(99.9900) =    405.275 ms/op
     p(99.9990) =    405.275 ms/op
     p(99.9999) =    405.275 ms/op
    p(100.0000) =    405.275 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 63.54% complete, ETA 02:21:04
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
13555.991 ms/op
# Warmup Iteration   2: 4290.773 ±(99.9%) 5775.592 ms/op
# Warmup Iteration   3: 4276.792 ±(99.9%) 6733.880 ms/op
# Warmup Iteration   4: 4329.920 ±(99.9%) 1432.234 ms/op
# Warmup Iteration   5: 4443.166 ±(99.9%) 2721.923 ms/op
Iteration   1: 4338.308 ±(99.9%) 1553.809 ms/op
                 executeQuery·p0.00:   4240.441 ms/op
                 executeQuery·p0.50:   4378.853 ms/op
                 executeQuery·p0.90:   4395.631 ms/op
                 executeQuery·p0.95:   4395.631 ms/op
                 executeQuery·p0.99:   4395.631 ms/op
                 executeQuery·p0.999:  4395.631 ms/op
                 executeQuery·p0.9999: 4395.631 ms/op
                 executeQuery·p1.00:   4395.631 ms/op

Iteration   2: 4682.241 ±(99.9%) 6854.533 ms/op
                 executeQuery·p0.00:   4248.830 ms/op
                 executeQuery·p0.50:   4882.170 ms/op
                 executeQuery·p0.90:   4915.724 ms/op
                 executeQuery·p0.95:   4915.724 ms/op
                 executeQuery·p0.99:   4915.724 ms/op
                 executeQuery·p0.999:  4915.724 ms/op
                 executeQuery·p0.9999: 4915.724 ms/op
                 executeQuery·p1.00:   4915.724 ms/op

Iteration   3: 4471.128 ±(99.9%) 7536.318 ms/op
                 executeQuery·p0.00:   4135.584 ms/op
                 executeQuery·p0.50:   4345.299 ms/op
                 executeQuery·p0.90:   4932.502 ms/op
                 executeQuery·p0.95:   4932.502 ms/op
                 executeQuery·p0.99:   4932.502 ms/op
                 executeQuery·p0.999:  4932.502 ms/op
                 executeQuery·p0.9999: 4932.502 ms/op
                 executeQuery·p1.00:   4932.502 ms/op

Iteration   4: 4171.934 ±(99.9%) 1148.646 ms/op
                 executeQuery·p0.00:   4135.584 ms/op
                 executeQuery·p0.50:   4135.584 ms/op
                 executeQuery·p0.90:   4244.636 ms/op
                 executeQuery·p0.95:   4244.636 ms/op
                 executeQuery·p0.99:   4244.636 ms/op
                 executeQuery·p0.999:  4244.636 ms/op
                 executeQuery·p0.9999: 4244.636 ms/op
                 executeQuery·p1.00:   4244.636 ms/op

Iteration   5: 4212.479 ±(99.9%) 1088.446 ms/op
                 executeQuery·p0.00:   4143.972 ms/op
                 executeQuery·p0.50:   4240.441 ms/op
                 executeQuery·p0.90:   4253.024 ms/op
                 executeQuery·p0.95:   4253.024 ms/op
                 executeQuery·p0.99:   4253.024 ms/op
                 executeQuery·p0.999:  4253.024 ms/op
                 executeQuery·p0.9999: 4253.024 ms/op
                 executeQuery·p1.00:   4253.024 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   4375.218 ±(99.9%) 309.193 ms/op

  Histogram, ms/op:
    [4100.000, 4150.000) = 4 
    [4150.000, 4200.000) = 0 
    [4200.000, 4250.000) = 4 
    [4250.000, 4300.000) = 1 
    [4300.000, 4350.000) = 1 
    [4350.000, 4400.000) = 2 
    [4400.000, 4450.000) = 0 
    [4450.000, 4500.000) = 0 
    [4500.000, 4550.000) = 0 
    [4550.000, 4600.000) = 0 
    [4600.000, 4650.000) = 0 
    [4650.000, 4700.000) = 0 
    [4700.000, 4750.000) = 0 
    [4750.000, 4800.000) = 0 
    [4800.000, 4850.000) = 0 
    [4850.000, 4900.000) = 1 
    [4900.000, 4950.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   4135.584 ms/op
     p(50.0000) =   4248.830 ms/op
     p(90.0000) =   4922.435 ms/op
     p(95.0000) =   4932.502 ms/op
     p(99.0000) =   4932.502 ms/op
     p(99.9000) =   4932.502 ms/op
     p(99.9900) =   4932.502 ms/op
     p(99.9990) =   4932.502 ms/op
     p(99.9999) =   4932.502 ms/op
    p(100.0000) =   4932.502 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 64.58% complete, ETA 02:16:04
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
317.482 ±(99.9%) 76.988 ms/op
# Warmup Iteration   2: 282.329 ±(99.9%) 6.935 ms/op
# Warmup Iteration   3: 299.051 ±(99.9%) 10.054 ms/op
# Warmup Iteration   4: 283.056 ±(99.9%) 6.580 ms/op
# Warmup Iteration   5: 307.692 ±(99.9%) 0.650 ms/op
Iteration   1: 281.761 ±(99.9%) 7.772 ms/op
                 executeQuery·p0.00:   273.678 ms/op
                 executeQuery·p0.50:   275.775 ms/op
                 executeQuery·p0.90:   307.757 ms/op
                 executeQuery·p0.95:   308.517 ms/op
                 executeQuery·p0.99:   309.854 ms/op
                 executeQuery·p0.999:  309.854 ms/op
                 executeQuery·p0.9999: 309.854 ms/op
                 executeQuery·p1.00:   309.854 ms/op

Iteration   2: 279.271 ±(99.9%) 0.776 ms/op
                 executeQuery·p0.00:   275.775 ms/op
                 executeQuery·p0.50:   279.446 ms/op
                 executeQuery·p0.90:   281.018 ms/op
                 executeQuery·p0.95:   281.097 ms/op
                 executeQuery·p0.99:   281.543 ms/op
                 executeQuery·p0.999:  281.543 ms/op
                 executeQuery·p0.9999: 281.543 ms/op
                 executeQuery·p1.00:   281.543 ms/op

Iteration   3: 276.635 ±(99.9%) 4.174 ms/op
                 executeQuery·p0.00:   273.154 ms/op
                 executeQuery·p0.50:   275.251 ms/op
                 executeQuery·p0.90:   280.127 ms/op
                 executeQuery·p0.95:   285.763 ms/op
                 executeQuery·p0.99:   315.621 ms/op
                 executeQuery·p0.999:  315.621 ms/op
                 executeQuery·p0.9999: 315.621 ms/op
                 executeQuery·p1.00:   315.621 ms/op

Iteration   4: 276.314 ±(99.9%) 1.151 ms/op
                 executeQuery·p0.00:   273.154 ms/op
                 executeQuery·p0.50:   276.300 ms/op
                 executeQuery·p0.90:   278.921 ms/op
                 executeQuery·p0.95:   278.921 ms/op
                 executeQuery·p0.99:   278.921 ms/op
                 executeQuery·p0.999:  278.921 ms/op
                 executeQuery·p0.9999: 278.921 ms/op
                 executeQuery·p1.00:   278.921 ms/op

Iteration   5: 275.193 ±(99.9%) 0.753 ms/op
                 executeQuery·p0.00:   272.105 ms/op
                 executeQuery·p0.50:   274.727 ms/op
                 executeQuery·p0.90:   277.506 ms/op
                 executeQuery·p0.95:   277.951 ms/op
                 executeQuery·p0.99:   278.397 ms/op
                 executeQuery·p0.999:  278.397 ms/op
                 executeQuery·p0.9999: 278.397 ms/op
                 executeQuery·p1.00:   278.397 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 180
  mean =    277.835 ±(99.9%) 1.755 ms/op

  Histogram, ms/op:
    [270.000, 275.000) = 59 
    [275.000, 280.000) = 104 
    [280.000, 285.000) = 9 
    [285.000, 290.000) = 0 
    [290.000, 295.000) = 0 
    [295.000, 300.000) = 0 
    [300.000, 305.000) = 0 
    [305.000, 310.000) = 7 
    [310.000, 315.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    272.105 ms/op
     p(50.0000) =    275.775 ms/op
     p(90.0000) =    279.970 ms/op
     p(95.0000) =    281.516 ms/op
     p(99.0000) =    310.950 ms/op
     p(99.9000) =    315.621 ms/op
     p(99.9900) =    315.621 ms/op
     p(99.9990) =    315.621 ms/op
     p(99.9999) =    315.621 ms/op
    p(100.0000) =    315.621 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 65.63% complete, ETA 02:10:52
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5253.366 ms/op
# Warmup Iteration   2: 3639.258 ±(99.9%) 1227.500 ms/op
# Warmup Iteration   3: 3559.566 ±(99.9%) 896.729 ms/op
# Warmup Iteration   4: 3493.855 ±(99.9%) 1925.197 ms/op
# Warmup Iteration   5: 3590.324 ±(99.9%) 2071.693 ms/op
Iteration   1: 3541.391 ±(99.9%) 906.471 ms/op
                 executeQuery·p0.00:   3510.632 ms/op
                 executeQuery·p0.50:   3514.827 ms/op
                 executeQuery·p0.90:   3598.713 ms/op
                 executeQuery·p0.95:   3598.713 ms/op
                 executeQuery·p0.99:   3598.713 ms/op
                 executeQuery·p0.999:  3598.713 ms/op
                 executeQuery·p0.9999: 3598.713 ms/op
                 executeQuery·p1.00:   3598.713 ms/op

Iteration   2: 3499.448 ±(99.9%) 1890.414 ms/op
                 executeQuery·p0.00:   3388.998 ms/op
                 executeQuery·p0.50:   3514.827 ms/op
                 executeQuery·p0.90:   3594.519 ms/op
                 executeQuery·p0.95:   3594.519 ms/op
                 executeQuery·p0.99:   3594.519 ms/op
                 executeQuery·p0.999:  3594.519 ms/op
                 executeQuery·p0.9999: 3594.519 ms/op
                 executeQuery·p1.00:   3594.519 ms/op

Iteration   3: 3597.315 ±(99.9%) 1283.465 ms/op
                 executeQuery·p0.00:   3552.575 ms/op
                 executeQuery·p0.50:   3560.964 ms/op
                 executeQuery·p0.90:   3678.405 ms/op
                 executeQuery·p0.95:   3678.405 ms/op
                 executeQuery·p0.99:   3678.405 ms/op
                 executeQuery·p0.999:  3678.405 ms/op
                 executeQuery·p0.9999: 3678.405 ms/op
                 executeQuery·p1.00:   3678.405 ms/op

Iteration   4: 3559.566 ±(99.9%) 2166.107 ms/op
                 executeQuery·p0.00:   3422.552 ms/op
                 executeQuery·p0.50:   3623.879 ms/op
                 executeQuery·p0.90:   3632.267 ms/op
                 executeQuery·p0.95:   3632.267 ms/op
                 executeQuery·p0.99:   3632.267 ms/op
                 executeQuery·p0.999:  3632.267 ms/op
                 executeQuery·p0.9999: 3632.267 ms/op
                 executeQuery·p1.00:   3632.267 ms/op

Iteration   5: 3375.017 ±(99.9%) 2898.000 ms/op
                 executeQuery·p0.00:   3200.254 ms/op
                 executeQuery·p0.50:   3414.163 ms/op
                 executeQuery·p0.90:   3510.632 ms/op
                 executeQuery·p0.95:   3510.632 ms/op
                 executeQuery·p0.99:   3510.632 ms/op
                 executeQuery·p0.999:  3510.632 ms/op
                 executeQuery·p0.9999: 3510.632 ms/op
                 executeQuery·p1.00:   3510.632 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   3514.547 ±(99.9%) 128.686 ms/op

  Histogram, ms/op:
    [3200.000, 3250.000) = 1 
    [3250.000, 3300.000) = 0 
    [3300.000, 3350.000) = 0 
    [3350.000, 3400.000) = 1 
    [3400.000, 3450.000) = 2 
    [3450.000, 3500.000) = 0 
    [3500.000, 3550.000) = 4 
    [3550.000, 3600.000) = 4 
    [3600.000, 3650.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   3200.254 ms/op
     p(50.0000) =   3514.827 ms/op
     p(90.0000) =   3650.722 ms/op
     p(95.0000) =   3678.405 ms/op
     p(99.0000) =   3678.405 ms/op
     p(99.9000) =   3678.405 ms/op
     p(99.9900) =   3678.405 ms/op
     p(99.9990) =   3678.405 ms/op
     p(99.9999) =   3678.405 ms/op
    p(100.0000) =   3678.405 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 66.67% complete, ETA 02:05:50
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
355.617 ±(99.9%) 82.336 ms/op
# Warmup Iteration   2: 316.178 ±(99.9%) 6.917 ms/op
# Warmup Iteration   3: 327.409 ±(99.9%) 11.084 ms/op
# Warmup Iteration   4: 345.289 ±(99.9%) 1.540 ms/op
# Warmup Iteration   5: 342.161 ±(99.9%) 8.536 ms/op
Iteration   1: 317.391 ±(99.9%) 4.800 ms/op
                 executeQuery·p0.00:   310.903 ms/op
                 executeQuery·p0.50:   316.146 ms/op
                 executeQuery·p0.90:   320.707 ms/op
                 executeQuery·p0.95:   332.975 ms/op
                 executeQuery·p0.99:   355.467 ms/op
                 executeQuery·p0.999:  355.467 ms/op
                 executeQuery·p0.9999: 355.467 ms/op
                 executeQuery·p1.00:   355.467 ms/op

Iteration   2: 315.064 ±(99.9%) 1.157 ms/op
                 executeQuery·p0.00:   311.951 ms/op
                 executeQuery·p0.50:   315.097 ms/op
                 executeQuery·p0.90:   317.194 ms/op
                 executeQuery·p0.95:   318.793 ms/op
                 executeQuery·p0.99:   319.816 ms/op
                 executeQuery·p0.999:  319.816 ms/op
                 executeQuery·p0.9999: 319.816 ms/op
                 executeQuery·p1.00:   319.816 ms/op

Iteration   3: 312.738 ±(99.9%) 4.845 ms/op
                 executeQuery·p0.00:   305.660 ms/op
                 executeQuery·p0.50:   311.689 ms/op
                 executeQuery·p0.90:   316.146 ms/op
                 executeQuery·p0.95:   329.122 ms/op
                 executeQuery·p0.99:   351.273 ms/op
                 executeQuery·p0.999:  351.273 ms/op
                 executeQuery·p0.9999: 351.273 ms/op
                 executeQuery·p1.00:   351.273 ms/op

Iteration   4: 311.542 ±(99.9%) 1.565 ms/op
                 executeQuery·p0.00:   306.708 ms/op
                 executeQuery·p0.50:   311.951 ms/op
                 executeQuery·p0.90:   314.940 ms/op
                 executeQuery·p0.95:   315.805 ms/op
                 executeQuery·p0.99:   316.146 ms/op
                 executeQuery·p0.999:  316.146 ms/op
                 executeQuery·p0.9999: 316.146 ms/op
                 executeQuery·p1.00:   316.146 ms/op

Iteration   5: 311.460 ±(99.9%) 3.542 ms/op
                 executeQuery·p0.00:   306.184 ms/op
                 executeQuery·p0.50:   310.378 ms/op
                 executeQuery·p0.90:   313.000 ms/op
                 executeQuery·p0.95:   323.381 ms/op
                 executeQuery·p0.99:   339.739 ms/op
                 executeQuery·p0.999:  339.739 ms/op
                 executeQuery·p0.9999: 339.739 ms/op
                 executeQuery·p1.00:   339.739 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 160
  mean =    313.639 ±(99.9%) 1.567 ms/op

  Histogram, ms/op:
    [300.000, 305.000) = 0 
    [305.000, 310.000) = 36 
    [310.000, 315.000) = 78 
    [315.000, 320.000) = 40 
    [320.000, 325.000) = 3 
    [325.000, 330.000) = 0 
    [330.000, 335.000) = 0 
    [335.000, 340.000) = 1 
    [340.000, 345.000) = 0 
    [345.000, 350.000) = 0 
    [350.000, 355.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    305.660 ms/op
     p(50.0000) =    313.000 ms/op
     p(90.0000) =    317.666 ms/op
     p(95.0000) =    319.816 ms/op
     p(99.0000) =    352.909 ms/op
     p(99.9000) =    355.467 ms/op
     p(99.9900) =    355.467 ms/op
     p(99.9990) =    355.467 ms/op
     p(99.9999) =    355.467 ms/op
    p(100.0000) =    355.467 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 67.71% complete, ETA 02:00:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5519.704 ms/op
# Warmup Iteration   2: 3995.774 ±(99.9%) 4323.421 ms/op
# Warmup Iteration   3: 3850.371 ±(99.9%) 753.632 ms/op
# Warmup Iteration   4: 3805.632 ±(99.9%) 754.926 ms/op
# Warmup Iteration   5: 3907.693 ±(99.9%) 3566.454 ms/op
Iteration   1: 3804.234 ±(99.9%) 2080.154 ms/op
                 executeQuery·p0.00:   3678.405 ms/op
                 executeQuery·p0.50:   3833.594 ms/op
                 executeQuery·p0.90:   3900.703 ms/op
                 executeQuery·p0.95:   3900.703 ms/op
                 executeQuery·p0.99:   3900.703 ms/op
                 executeQuery·p0.999:  3900.703 ms/op
                 executeQuery·p0.9999: 3900.703 ms/op
                 executeQuery·p1.00:   3900.703 ms/op

Iteration   2: 3862.954 ±(99.9%) 607.356 ms/op
                 executeQuery·p0.00:   3825.205 ms/op
                 executeQuery·p0.50:   3875.537 ms/op
                 executeQuery·p0.90:   3888.120 ms/op
                 executeQuery·p0.95:   3888.120 ms/op
                 executeQuery·p0.99:   3888.120 ms/op
                 executeQuery·p0.999:  3888.120 ms/op
                 executeQuery·p0.9999: 3888.120 ms/op
                 executeQuery·p1.00:   3888.120 ms/op

Iteration   3: 3841.982 ±(99.9%) 1231.468 ms/op
                 executeQuery·p0.00:   3770.679 ms/op
                 executeQuery·p0.50:   3850.371 ms/op
                 executeQuery·p0.90:   3904.897 ms/op
                 executeQuery·p0.95:   3904.897 ms/op
                 executeQuery·p0.99:   3904.897 ms/op
                 executeQuery·p0.999:  3904.897 ms/op
                 executeQuery·p0.9999: 3904.897 ms/op
                 executeQuery·p1.00:   3904.897 ms/op

Iteration   4: 3958.025 ±(99.9%) 1492.298 ms/op
                 executeQuery·p0.00:   3875.537 ms/op
                 executeQuery·p0.50:   3959.423 ms/op
                 executeQuery·p0.90:   4039.115 ms/op
                 executeQuery·p0.95:   4039.115 ms/op
                 executeQuery·p0.99:   4039.115 ms/op
                 executeQuery·p0.999:  4039.115 ms/op
                 executeQuery·p0.9999: 4039.115 ms/op
                 executeQuery·p1.00:   4039.115 ms/op

Iteration   5: 3788.855 ±(99.9%) 2616.631 ms/op
                 executeQuery·p0.00:   3623.879 ms/op
                 executeQuery·p0.50:   3858.760 ms/op
                 executeQuery·p0.90:   3883.926 ms/op
                 executeQuery·p0.95:   3883.926 ms/op
                 executeQuery·p0.99:   3883.926 ms/op
                 executeQuery·p0.999:  3883.926 ms/op
                 executeQuery·p0.9999: 3883.926 ms/op
                 executeQuery·p1.00:   3883.926 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 15
  mean =   3851.210 ±(99.9%) 108.812 ms/op

  Histogram, ms/op:
    [3600.000, 3650.000) = 1 
    [3650.000, 3700.000) = 1 
    [3700.000, 3750.000) = 0 
    [3750.000, 3800.000) = 1 
    [3800.000, 3850.000) = 2 
    [3850.000, 3900.000) = 6 
    [3900.000, 3950.000) = 2 
    [3950.000, 4000.000) = 1 
    [4000.000, 4050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3623.879 ms/op
     p(50.0000) =   3875.537 ms/op
     p(90.0000) =   3991.300 ms/op
     p(95.0000) =   4039.115 ms/op
     p(99.0000) =   4039.115 ms/op
     p(99.9000) =   4039.115 ms/op
     p(99.9900) =   4039.115 ms/op
     p(99.9990) =   4039.115 ms/op
     p(99.9999) =   4039.115 ms/op
    p(100.0000) =   4039.115 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 68.75% complete, ETA 01:56:05
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
258.810 ±(99.9%) 18.997 ms/op
# Warmup Iteration   2: 251.082 ±(99.9%) 0.615 ms/op
# Warmup Iteration   3: 252.720 ±(99.9%) 1.385 ms/op
# Warmup Iteration   4: 251.999 ±(99.9%) 1.653 ms/op
# Warmup Iteration   5: 253.985 ±(99.9%) 2.877 ms/op
Iteration   1: 252.477 ±(99.9%) 0.576 ms/op
                 executeQuery·p0.00:   251.134 ms/op
                 executeQuery·p0.50:   252.183 ms/op
                 executeQuery·p0.90:   254.018 ms/op
                 executeQuery·p0.95:   255.040 ms/op
                 executeQuery·p0.99:   255.590 ms/op
                 executeQuery·p0.999:  255.590 ms/op
                 executeQuery·p0.9999: 255.590 ms/op
                 executeQuery·p1.00:   255.590 ms/op

Iteration   2: 255.944 ±(99.9%) 5.987 ms/op
                 executeQuery·p0.00:   251.396 ms/op
                 executeQuery·p0.50:   254.018 ms/op
                 executeQuery·p0.90:   257.425 ms/op
                 executeQuery·p0.95:   272.027 ms/op
                 executeQuery·p0.99:   317.719 ms/op
                 executeQuery·p0.999:  317.719 ms/op
                 executeQuery·p0.9999: 317.719 ms/op
                 executeQuery·p1.00:   317.719 ms/op

Iteration   3: 254.824 ±(99.9%) 0.758 ms/op
                 executeQuery·p0.00:   253.231 ms/op
                 executeQuery·p0.50:   254.280 ms/op
                 executeQuery·p0.90:   256.822 ms/op
                 executeQuery·p0.95:   257.674 ms/op
                 executeQuery·p0.99:   259.523 ms/op
                 executeQuery·p0.999:  259.523 ms/op
                 executeQuery·p0.9999: 259.523 ms/op
                 executeQuery·p1.00:   259.523 ms/op

Iteration   4: 255.505 ±(99.9%) 2.774 ms/op
                 executeQuery·p0.00:   252.707 ms/op
                 executeQuery·p0.50:   254.149 ms/op
                 executeQuery·p0.90:   259.024 ms/op
                 executeQuery·p0.95:   274.557 ms/op
                 executeQuery·p0.99:   275.775 ms/op
                 executeQuery·p0.999:  275.775 ms/op
                 executeQuery·p0.9999: 275.775 ms/op
                 executeQuery·p1.00:   275.775 ms/op

Iteration   5: 251.442 ±(99.9%) 1.101 ms/op
                 executeQuery·p0.00:   249.299 ms/op
                 executeQuery·p0.50:   250.741 ms/op
                 executeQuery·p0.90:   253.467 ms/op
                 executeQuery·p0.95:   254.267 ms/op
                 executeQuery·p0.99:   260.047 ms/op
                 executeQuery·p0.999:  260.047 ms/op
                 executeQuery·p0.9999: 260.047 ms/op
                 executeQuery·p1.00:   260.047 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 200
  mean =    254.039 ±(99.9%) 1.324 ms/op

  Histogram, ms/op:
    [240.000, 245.000) = 0 
    [245.000, 250.000) = 8 
    [250.000, 255.000) = 156 
    [255.000, 260.000) = 29 
    [260.000, 265.000) = 3 
    [265.000, 270.000) = 0 
    [270.000, 275.000) = 1 
    [275.000, 280.000) = 2 
    [280.000, 285.000) = 0 
    [285.000, 290.000) = 0 
    [290.000, 295.000) = 0 
    [295.000, 300.000) = 0 
    [300.000, 305.000) = 0 
    [305.000, 310.000) = 0 
    [310.000, 315.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    249.299 ms/op
     p(50.0000) =    253.624 ms/op
     p(90.0000) =    256.115 ms/op
     p(95.0000) =    257.674 ms/op
     p(99.0000) =    275.770 ms/op
     p(99.9000) =    317.719 ms/op
     p(99.9900) =    317.719 ms/op
     p(99.9990) =    317.719 ms/op
     p(99.9999) =    317.719 ms/op
    p(100.0000) =    317.719 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 69.79% complete, ETA 01:51:17
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2540.700 ±(99.9%) 2806.177 ms/op
# Warmup Iteration   2: 2218.787 ±(99.9%) 19.781 ms/op
# Warmup Iteration   3: 2503.999 ±(99.9%) 49.484 ms/op
# Warmup Iteration   4: 2517.631 ±(99.9%) 51.306 ms/op
# Warmup Iteration   5: 2514.485 ±(99.9%) 15.648 ms/op
Iteration   1: 2513.437 ±(99.9%) 46.288 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2514.485 ms/op
                 executeQuery·p0.90:   2520.777 ms/op
                 executeQuery·p0.95:   2520.777 ms/op
                 executeQuery·p0.99:   2520.777 ms/op
                 executeQuery·p0.999:  2520.777 ms/op
                 executeQuery·p0.9999: 2520.777 ms/op
                 executeQuery·p1.00:   2520.777 ms/op

Iteration   2: 2520.777 ±(99.9%) 66.390 ms/op
                 executeQuery·p0.00:   2508.194 ms/op
                 executeQuery·p0.50:   2520.777 ms/op
                 executeQuery·p0.90:   2533.360 ms/op
                 executeQuery·p0.95:   2533.360 ms/op
                 executeQuery·p0.99:   2533.360 ms/op
                 executeQuery·p0.999:  2533.360 ms/op
                 executeQuery·p0.9999: 2533.360 ms/op
                 executeQuery·p1.00:   2533.360 ms/op

Iteration   3: 2512.388 ±(99.9%) 22.130 ms/op
                 executeQuery·p0.00:   2508.194 ms/op
                 executeQuery·p0.50:   2512.388 ms/op
                 executeQuery·p0.90:   2516.582 ms/op
                 executeQuery·p0.95:   2516.582 ms/op
                 executeQuery·p0.99:   2516.582 ms/op
                 executeQuery·p0.999:  2516.582 ms/op
                 executeQuery·p0.9999: 2516.582 ms/op
                 executeQuery·p1.00:   2516.582 ms/op

Iteration   4: 2510.291 ±(99.9%) 15.648 ms/op
                 executeQuery·p0.00:   2508.194 ms/op
                 executeQuery·p0.50:   2510.291 ms/op
                 executeQuery·p0.90:   2512.388 ms/op
                 executeQuery·p0.95:   2512.388 ms/op
                 executeQuery·p0.99:   2512.388 ms/op
                 executeQuery·p0.999:  2512.388 ms/op
                 executeQuery·p0.9999: 2512.388 ms/op
                 executeQuery·p1.00:   2512.388 ms/op

Iteration   5: 2501.902 ±(99.9%) 34.991 ms/op
                 executeQuery·p0.00:   2495.611 ms/op
                 executeQuery·p0.50:   2501.902 ms/op
                 executeQuery·p0.90:   2508.194 ms/op
                 executeQuery·p0.95:   2508.194 ms/op
                 executeQuery·p0.99:   2508.194 ms/op
                 executeQuery·p0.999:  2508.194 ms/op
                 executeQuery·p0.9999: 2508.194 ms/op
                 executeQuery·p1.00:   2508.194 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   2511.759 ±(99.9%) 7.311 ms/op

  Histogram, ms/op:
    [2490.000, 2495.000) = 0 
    [2495.000, 2500.000) = 2 
    [2500.000, 2505.000) = 2 
    [2505.000, 2510.000) = 5 
    [2510.000, 2515.000) = 5 
    [2515.000, 2520.000) = 2 
    [2520.000, 2525.000) = 3 
    [2525.000, 2530.000) = 0 
    [2530.000, 2535.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2495.611 ms/op
     p(50.0000) =   2512.388 ms/op
     p(90.0000) =   2520.777 ms/op
     p(95.0000) =   2532.730 ms/op
     p(99.0000) =   2533.360 ms/op
     p(99.9000) =   2533.360 ms/op
     p(99.9900) =   2533.360 ms/op
     p(99.9990) =   2533.360 ms/op
     p(99.9999) =   2533.360 ms/op
    p(100.0000) =   2533.360 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 70.83% complete, ETA 01:46:34
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
69122.130 ms/op
# Warmup Iteration   2: 69793.219 ms/op
# Warmup Iteration   3: 24998.052 ms/op
# Warmup Iteration   4: 22447.915 ms/op
# Warmup Iteration   5: 22548.578 ms/op
Iteration   1: 22481.469 ms/op
                 executeQuery·p0.00:   22481.469 ms/op
                 executeQuery·p0.50:   22481.469 ms/op
                 executeQuery·p0.90:   22481.469 ms/op
                 executeQuery·p0.95:   22481.469 ms/op
                 executeQuery·p0.99:   22481.469 ms/op
                 executeQuery·p0.999:  22481.469 ms/op
                 executeQuery·p0.9999: 22481.469 ms/op
                 executeQuery·p1.00:   22481.469 ms/op

Iteration   2: 22615.687 ms/op
                 executeQuery·p0.00:   22615.687 ms/op
                 executeQuery·p0.50:   22615.687 ms/op
                 executeQuery·p0.90:   22615.687 ms/op
                 executeQuery·p0.95:   22615.687 ms/op
                 executeQuery·p0.99:   22615.687 ms/op
                 executeQuery·p0.999:  22615.687 ms/op
                 executeQuery·p0.9999: 22615.687 ms/op
                 executeQuery·p1.00:   22615.687 ms/op

Iteration   3: 22481.469 ms/op
                 executeQuery·p0.00:   22481.469 ms/op
                 executeQuery·p0.50:   22481.469 ms/op
                 executeQuery·p0.90:   22481.469 ms/op
                 executeQuery·p0.95:   22481.469 ms/op
                 executeQuery·p0.99:   22481.469 ms/op
                 executeQuery·p0.999:  22481.469 ms/op
                 executeQuery·p0.9999: 22481.469 ms/op
                 executeQuery·p1.00:   22481.469 ms/op

Iteration   4: 25165.824 ms/op
                 executeQuery·p0.00:   25165.824 ms/op
                 executeQuery·p0.50:   25165.824 ms/op
                 executeQuery·p0.90:   25165.824 ms/op
                 executeQuery·p0.95:   25165.824 ms/op
                 executeQuery·p0.99:   25165.824 ms/op
                 executeQuery·p0.999:  25165.824 ms/op
                 executeQuery·p0.9999: 25165.824 ms/op
                 executeQuery·p1.00:   25165.824 ms/op

Iteration   5: 26340.229 ms/op
                 executeQuery·p0.00:   26340.229 ms/op
                 executeQuery·p0.50:   26340.229 ms/op
                 executeQuery·p0.90:   26340.229 ms/op
                 executeQuery·p0.95:   26340.229 ms/op
                 executeQuery·p0.99:   26340.229 ms/op
                 executeQuery·p0.999:  26340.229 ms/op
                 executeQuery·p0.9999: 26340.229 ms/op
                 executeQuery·p1.00:   26340.229 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  23816.936 ±(99.9%) 6994.101 ms/op

  Histogram, ms/op:
    [22000.000, 22500.000) = 2 
    [22500.000, 23000.000) = 1 
    [23000.000, 23500.000) = 0 
    [23500.000, 24000.000) = 0 
    [24000.000, 24500.000) = 0 
    [24500.000, 25000.000) = 0 
    [25000.000, 25500.000) = 1 
    [25500.000, 26000.000) = 0 
    [26000.000, 26500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  22481.469 ms/op
     p(50.0000) =  22615.687 ms/op
     p(90.0000) =  26340.229 ms/op
     p(95.0000) =  26340.229 ms/op
     p(99.0000) =  26340.229 ms/op
     p(99.9000) =  26340.229 ms/op
     p(99.9900) =  26340.229 ms/op
     p(99.9990) =  26340.229 ms/op
     p(99.9999) =  26340.229 ms/op
    p(100.0000) =  26340.229 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 71.88% complete, ETA 01:43:25
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
362.077 ±(99.9%) 13.034 ms/op
# Warmup Iteration   2: 348.344 ±(99.9%) 2.297 ms/op
# Warmup Iteration   3: 347.910 ±(99.9%) 3.603 ms/op
# Warmup Iteration   4: 351.164 ±(99.9%) 9.576 ms/op
# Warmup Iteration   5: 349.537 ±(99.9%) 7.238 ms/op
Iteration   1: 345.705 ±(99.9%) 1.137 ms/op
                 executeQuery·p0.00:   343.933 ms/op
                 executeQuery·p0.50:   345.506 ms/op
                 executeQuery·p0.90:   347.079 ms/op
                 executeQuery·p0.95:   350.749 ms/op
                 executeQuery·p0.99:   350.749 ms/op
                 executeQuery·p0.999:  350.749 ms/op
                 executeQuery·p0.9999: 350.749 ms/op
                 executeQuery·p1.00:   350.749 ms/op

Iteration   2: 350.441 ±(99.9%) 8.413 ms/op
                 executeQuery·p0.00:   344.457 ms/op
                 executeQuery·p0.50:   346.554 ms/op
                 executeQuery·p0.90:   371.196 ms/op
                 executeQuery·p0.95:   390.595 ms/op
                 executeQuery·p0.99:   398.983 ms/op
                 executeQuery·p0.999:  398.983 ms/op
                 executeQuery·p0.9999: 398.983 ms/op
                 executeQuery·p1.00:   398.983 ms/op

Iteration   3: 348.832 ±(99.9%) 6.693 ms/op
                 executeQuery·p0.00:   343.933 ms/op
                 executeQuery·p0.50:   346.030 ms/op
                 executeQuery·p0.90:   354.419 ms/op
                 executeQuery·p0.95:   383.255 ms/op
                 executeQuery·p0.99:   386.925 ms/op
                 executeQuery·p0.999:  386.925 ms/op
                 executeQuery·p0.9999: 386.925 ms/op
                 executeQuery·p1.00:   386.925 ms/op

Iteration   4: 348.868 ±(99.9%) 6.666 ms/op
                 executeQuery·p0.00:   343.409 ms/op
                 executeQuery·p0.50:   346.554 ms/op
                 executeQuery·p0.90:   353.894 ms/op
                 executeQuery·p0.95:   376.177 ms/op
                 executeQuery·p0.99:   396.362 ms/op
                 executeQuery·p0.999:  396.362 ms/op
                 executeQuery·p0.9999: 396.362 ms/op
                 executeQuery·p1.00:   396.362 ms/op

Iteration   5: 347.476 ±(99.9%) 3.072 ms/op
                 executeQuery·p0.00:   343.933 ms/op
                 executeQuery·p0.50:   346.030 ms/op
                 executeQuery·p0.90:   351.273 ms/op
                 executeQuery·p0.95:   360.448 ms/op
                 executeQuery·p0.99:   367.526 ms/op
                 executeQuery·p0.999:  367.526 ms/op
                 executeQuery·p0.9999: 367.526 ms/op
                 executeQuery·p1.00:   367.526 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 145
  mean =    348.265 ±(99.9%) 2.398 ms/op

  Histogram, ms/op:
    [340.000, 345.000) = 49 
    [345.000, 350.000) = 73 
    [350.000, 355.000) = 15 
    [355.000, 360.000) = 1 
    [360.000, 365.000) = 0 
    [365.000, 370.000) = 1 
    [370.000, 375.000) = 1 
    [375.000, 380.000) = 1 
    [380.000, 385.000) = 1 
    [385.000, 390.000) = 1 
    [390.000, 395.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    343.409 ms/op
     p(50.0000) =    346.030 ms/op
     p(90.0000) =    351.692 ms/op
     p(95.0000) =    364.066 ms/op
     p(99.0000) =    397.777 ms/op
     p(99.9000) =    398.983 ms/op
     p(99.9900) =    398.983 ms/op
     p(99.9990) =    398.983 ms/op
     p(99.9999) =    398.983 ms/op
    p(100.0000) =    398.983 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 72.92% complete, ETA 01:38:49
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3587.528 ±(99.9%) 3003.176 ms/op
# Warmup Iteration   2: 3539.993 ±(99.9%) 994.756 ms/op
# Warmup Iteration   3: 3553.974 ±(99.9%) 159.288 ms/op
# Warmup Iteration   4: 3600.111 ±(99.9%) 853.232 ms/op
# Warmup Iteration   5: 3609.898 ±(99.9%) 1778.706 ms/op
Iteration   1: 3569.353 ±(99.9%) 577.711 ms/op
                 executeQuery·p0.00:   3539.993 ms/op
                 executeQuery·p0.50:   3565.158 ms/op
                 executeQuery·p0.90:   3602.907 ms/op
                 executeQuery·p0.95:   3602.907 ms/op
                 executeQuery·p0.99:   3602.907 ms/op
                 executeQuery·p0.999:  3602.907 ms/op
                 executeQuery·p0.9999: 3602.907 ms/op
                 executeQuery·p1.00:   3602.907 ms/op

Iteration   2: 3560.964 ±(99.9%) 530.144 ms/op
                 executeQuery·p0.00:   3544.187 ms/op
                 executeQuery·p0.50:   3544.187 ms/op
                 executeQuery·p0.90:   3594.519 ms/op
                 executeQuery·p0.95:   3594.519 ms/op
                 executeQuery·p0.99:   3594.519 ms/op
                 executeQuery·p0.999:  3594.519 ms/op
                 executeQuery·p0.9999: 3594.519 ms/op
                 executeQuery·p1.00:   3594.519 ms/op

Iteration   3: 3653.239 ±(99.9%) 2519.347 ms/op
                 executeQuery·p0.00:   3569.353 ms/op
                 executeQuery·p0.50:   3577.741 ms/op
                 executeQuery·p0.90:   3812.622 ms/op
                 executeQuery·p0.95:   3812.622 ms/op
                 executeQuery·p0.99:   3812.622 ms/op
                 executeQuery·p0.999:  3812.622 ms/op
                 executeQuery·p0.9999: 3812.622 ms/op
                 executeQuery·p1.00:   3812.622 ms/op

Iteration   4: 3579.139 ±(99.9%) 361.618 ms/op
                 executeQuery·p0.00:   3556.770 ms/op
                 executeQuery·p0.50:   3586.130 ms/op
                 executeQuery·p0.90:   3594.519 ms/op
                 executeQuery·p0.95:   3594.519 ms/op
                 executeQuery·p0.99:   3594.519 ms/op
                 executeQuery·p0.999:  3594.519 ms/op
                 executeQuery·p0.9999: 3594.519 ms/op
                 executeQuery·p1.00:   3594.519 ms/op

Iteration   5: 3467.291 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   3464.495 ms/op
                 executeQuery·p0.50:   3464.495 ms/op
                 executeQuery·p0.90:   3472.884 ms/op
                 executeQuery·p0.95:   3472.884 ms/op
                 executeQuery·p0.99:   3472.884 ms/op
                 executeQuery·p0.999:  3472.884 ms/op
                 executeQuery·p0.9999: 3472.884 ms/op
                 executeQuery·p1.00:   3472.884 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 15
  mean =   3565.997 ±(99.9%) 88.230 ms/op

  Histogram, ms/op:
    [3400.000, 3450.000) = 0 
    [3450.000, 3500.000) = 3 
    [3500.000, 3550.000) = 3 
    [3550.000, 3600.000) = 7 
    [3600.000, 3650.000) = 1 
    [3650.000, 3700.000) = 0 
    [3700.000, 3750.000) = 0 
    [3750.000, 3800.000) = 0 
    [3800.000, 3850.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3464.495 ms/op
     p(50.0000) =   3565.158 ms/op
     p(90.0000) =   3686.793 ms/op
     p(95.0000) =   3812.622 ms/op
     p(99.0000) =   3812.622 ms/op
     p(99.9000) =   3812.622 ms/op
     p(99.9900) =   3812.622 ms/op
     p(99.9990) =   3812.622 ms/op
     p(99.9999) =   3812.622 ms/op
    p(100.0000) =   3812.622 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 73.96% complete, ETA 01:34:20
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
34124.857 ms/op
# Warmup Iteration   2: 35701.916 ms/op
# Warmup Iteration   3: 34628.174 ms/op
# Warmup Iteration   4: 35567.698 ms/op
# Warmup Iteration   5: 34762.392 ms/op
Iteration   1: 34426.847 ms/op
                 executeQuery·p0.00:   34426.847 ms/op
                 executeQuery·p0.50:   34426.847 ms/op
                 executeQuery·p0.90:   34426.847 ms/op
                 executeQuery·p0.95:   34426.847 ms/op
                 executeQuery·p0.99:   34426.847 ms/op
                 executeQuery·p0.999:  34426.847 ms/op
                 executeQuery·p0.9999: 34426.847 ms/op
                 executeQuery·p1.00:   34426.847 ms/op

Iteration   2: 35165.045 ms/op
                 executeQuery·p0.00:   35165.045 ms/op
                 executeQuery·p0.50:   35165.045 ms/op
                 executeQuery·p0.90:   35165.045 ms/op
                 executeQuery·p0.95:   35165.045 ms/op
                 executeQuery·p0.99:   35165.045 ms/op
                 executeQuery·p0.999:  35165.045 ms/op
                 executeQuery·p0.9999: 35165.045 ms/op
                 executeQuery·p1.00:   35165.045 ms/op

Iteration   3: 34561.065 ms/op
                 executeQuery·p0.00:   34561.065 ms/op
                 executeQuery·p0.50:   34561.065 ms/op
                 executeQuery·p0.90:   34561.065 ms/op
                 executeQuery·p0.95:   34561.065 ms/op
                 executeQuery·p0.99:   34561.065 ms/op
                 executeQuery·p0.999:  34561.065 ms/op
                 executeQuery·p0.9999: 34561.065 ms/op
                 executeQuery·p1.00:   34561.065 ms/op

Iteration   4: 34628.174 ms/op
                 executeQuery·p0.00:   34628.174 ms/op
                 executeQuery·p0.50:   34628.174 ms/op
                 executeQuery·p0.90:   34628.174 ms/op
                 executeQuery·p0.95:   34628.174 ms/op
                 executeQuery·p0.99:   34628.174 ms/op
                 executeQuery·p0.999:  34628.174 ms/op
                 executeQuery·p0.9999: 34628.174 ms/op
                 executeQuery·p1.00:   34628.174 ms/op

Iteration   5: 35299.262 ms/op
                 executeQuery·p0.00:   35299.262 ms/op
                 executeQuery·p0.50:   35299.262 ms/op
                 executeQuery·p0.90:   35299.262 ms/op
                 executeQuery·p0.95:   35299.262 ms/op
                 executeQuery·p0.99:   35299.262 ms/op
                 executeQuery·p0.999:  35299.262 ms/op
                 executeQuery·p0.9999: 35299.262 ms/op
                 executeQuery·p1.00:   35299.262 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 5
  mean =  34816.079 ±(99.9%) 1500.128 ms/op

  Histogram, ms/op:
    [34400.000, 34450.000) = 1 
    [34450.000, 34500.000) = 0 
    [34500.000, 34550.000) = 0 
    [34550.000, 34600.000) = 1 
    [34600.000, 34650.000) = 1 
    [34650.000, 34700.000) = 0 
    [34700.000, 34750.000) = 0 
    [34750.000, 34800.000) = 0 
    [34800.000, 34850.000) = 0 
    [34850.000, 34900.000) = 0 
    [34900.000, 34950.000) = 0 
    [34950.000, 35000.000) = 0 
    [35000.000, 35050.000) = 0 
    [35050.000, 35100.000) = 0 
    [35100.000, 35150.000) = 0 
    [35150.000, 35200.000) = 1 
    [35200.000, 35250.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  34426.847 ms/op
     p(50.0000) =  34628.174 ms/op
     p(90.0000) =  35299.262 ms/op
     p(95.0000) =  35299.262 ms/op
     p(99.0000) =  35299.262 ms/op
     p(99.9000) =  35299.262 ms/op
     p(99.9900) =  35299.262 ms/op
     p(99.9990) =  35299.262 ms/op
     p(99.9999) =  35299.262 ms/op
    p(100.0000) =  35299.262 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 75.00% complete, ETA 01:31:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
498.152 ±(99.9%) 58.922 ms/op
# Warmup Iteration   2: 571.474 ±(99.9%) 2.582 ms/op
# Warmup Iteration   3: 509.582 ±(99.9%) 52.205 ms/op
# Warmup Iteration   4: 450.135 ±(99.9%) 0.694 ms/op
# Warmup Iteration   5: 455.821 ±(99.9%) 1.131 ms/op
Iteration   1: 452.825 ±(99.9%) 2.813 ms/op
                 executeQuery·p0.00:   447.742 ms/op
                 executeQuery·p0.50:   454.558 ms/op
                 executeQuery·p0.90:   456.655 ms/op
                 executeQuery·p0.95:   457.074 ms/op
                 executeQuery·p0.99:   457.179 ms/op
                 executeQuery·p0.999:  457.179 ms/op
                 executeQuery·p0.9999: 457.179 ms/op
                 executeQuery·p1.00:   457.179 ms/op

Iteration   2: 448.791 ±(99.9%) 0.649 ms/op
                 executeQuery·p0.00:   447.218 ms/op
                 executeQuery·p0.50:   448.791 ms/op
                 executeQuery·p0.90:   449.839 ms/op
                 executeQuery·p0.95:   450.259 ms/op
                 executeQuery·p0.99:   450.363 ms/op
                 executeQuery·p0.999:  450.363 ms/op
                 executeQuery·p0.9999: 450.363 ms/op
                 executeQuery·p1.00:   450.363 ms/op

Iteration   3: 455.249 ±(99.9%) 1.626 ms/op
                 executeQuery·p0.00:   448.266 ms/op
                 executeQuery·p0.50:   455.606 ms/op
                 executeQuery·p0.90:   457.022 ms/op
                 executeQuery·p0.95:   458.962 ms/op
                 executeQuery·p0.99:   459.276 ms/op
                 executeQuery·p0.999:  459.276 ms/op
                 executeQuery·p0.9999: 459.276 ms/op
                 executeQuery·p1.00:   459.276 ms/op

Iteration   4: 452.916 ±(99.9%) 2.900 ms/op
                 executeQuery·p0.00:   447.742 ms/op
                 executeQuery·p0.50:   454.558 ms/op
                 executeQuery·p0.90:   457.494 ms/op
                 executeQuery·p0.95:   457.703 ms/op
                 executeQuery·p0.99:   457.703 ms/op
                 executeQuery·p0.999:  457.703 ms/op
                 executeQuery·p0.9999: 457.703 ms/op
                 executeQuery·p1.00:   457.703 ms/op

Iteration   5: 448.608 ±(99.9%) 0.853 ms/op
                 executeQuery·p0.00:   446.693 ms/op
                 executeQuery·p0.50:   448.791 ms/op
                 executeQuery·p0.90:   449.839 ms/op
                 executeQuery·p0.95:   450.259 ms/op
                 executeQuery·p0.99:   450.363 ms/op
                 executeQuery·p0.999:  450.363 ms/op
                 executeQuery·p0.9999: 450.363 ms/op
                 executeQuery·p1.00:   450.363 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 114
  mean =    451.647 ±(99.9%) 1.135 ms/op

  Histogram, ms/op:
    [440.000, 441.250) = 0 
    [441.250, 442.500) = 0 
    [442.500, 443.750) = 0 
    [443.750, 445.000) = 0 
    [445.000, 446.250) = 0 
    [446.250, 447.500) = 5 
    [447.500, 448.750) = 24 
    [448.750, 450.000) = 34 
    [450.000, 451.250) = 2 
    [451.250, 452.500) = 0 
    [452.500, 453.750) = 1 
    [453.750, 455.000) = 13 
    [455.000, 456.250) = 26 
    [456.250, 457.500) = 6 
    [457.500, 458.750) = 2 

  Percentiles, ms/op:
      p(0.0000) =    446.693 ms/op
     p(50.0000) =    449.839 ms/op
     p(90.0000) =    456.131 ms/op
     p(95.0000) =    457.179 ms/op
     p(99.0000) =    459.040 ms/op
     p(99.9000) =    459.276 ms/op
     p(99.9900) =    459.276 ms/op
     p(99.9990) =    459.276 ms/op
     p(99.9999) =    459.276 ms/op
    p(100.0000) =    459.276 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 76.04% complete, ETA 01:26:48
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5047.146 ±(99.9%) 9095.660 ms/op
# Warmup Iteration   2: 5523.898 ms/op
# Warmup Iteration   3: 4426.389 ±(99.9%) 88.357 ms/op
# Warmup Iteration   4: 4465.536 ±(99.9%) 318.577 ms/op
# Warmup Iteration   5: 4479.517 ±(99.9%) 930.903 ms/op
Iteration   1: 4454.351 ±(99.9%) 153.039 ms/op
                 executeQuery·p0.00:   4445.962 ms/op
                 executeQuery·p0.50:   4454.351 ms/op
                 executeQuery·p0.90:   4462.739 ms/op
                 executeQuery·p0.95:   4462.739 ms/op
                 executeQuery·p0.99:   4462.739 ms/op
                 executeQuery·p0.999:  4462.739 ms/op
                 executeQuery·p0.9999: 4462.739 ms/op
                 executeQuery·p1.00:   4462.739 ms/op

Iteration   2: 4448.758 ±(99.9%) 353.429 ms/op
                 executeQuery·p0.00:   4437.574 ms/op
                 executeQuery·p0.50:   4437.574 ms/op
                 executeQuery·p0.90:   4471.128 ms/op
                 executeQuery·p0.95:   4471.128 ms/op
                 executeQuery·p0.99:   4471.128 ms/op
                 executeQuery·p0.999:  4471.128 ms/op
                 executeQuery·p0.9999: 4471.128 ms/op
                 executeQuery·p1.00:   4471.128 ms/op

Iteration   3: 4613.734 ±(99.9%) 3976.081 ms/op
                 executeQuery·p0.00:   4487.905 ms/op
                 executeQuery·p0.50:   4487.905 ms/op
                 executeQuery·p0.90:   4865.393 ms/op
                 executeQuery·p0.95:   4865.393 ms/op
                 executeQuery·p0.99:   4865.393 ms/op
                 executeQuery·p0.999:  4865.393 ms/op
                 executeQuery·p0.9999: 4865.393 ms/op
                 executeQuery·p1.00:   4865.393 ms/op

Iteration   4: 5305.795 ms/op
                 executeQuery·p0.00:   5293.212 ms/op
                 executeQuery·p0.50:   5305.795 ms/op
                 executeQuery·p0.90:   5318.377 ms/op
                 executeQuery·p0.95:   5318.377 ms/op
                 executeQuery·p0.99:   5318.377 ms/op
                 executeQuery·p0.999:  5318.377 ms/op
                 executeQuery·p0.9999: 5318.377 ms/op
                 executeQuery·p1.00:   5318.377 ms/op

Iteration   5: 4725.583 ±(99.9%) 9102.095 ms/op
                 executeQuery·p0.00:   4429.185 ms/op
                 executeQuery·p0.50:   4445.962 ms/op
                 executeQuery·p0.90:   5301.600 ms/op
                 executeQuery·p0.95:   5301.600 ms/op
                 executeQuery·p0.99:   5301.600 ms/op
                 executeQuery·p0.999:  5301.600 ms/op
                 executeQuery·p0.9999: 5301.600 ms/op
                 executeQuery·p1.00:   5301.600 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 14
  mean =   4667.062 ±(99.9%) 408.831 ms/op

  Histogram, ms/op:
    [4400.000, 4500.000) = 10 
    [4500.000, 4600.000) = 0 
    [4600.000, 4700.000) = 0 
    [4700.000, 4800.000) = 0 
    [4800.000, 4900.000) = 1 
    [4900.000, 5000.000) = 0 
    [5000.000, 5100.000) = 0 
    [5100.000, 5200.000) = 0 
    [5200.000, 5300.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4429.185 ms/op
     p(50.0000) =   4466.934 ms/op
     p(90.0000) =   5309.989 ms/op
     p(95.0000) =   5318.377 ms/op
     p(99.0000) =   5318.377 ms/op
     p(99.9000) =   5318.377 ms/op
     p(99.9900) =   5318.377 ms/op
     p(99.9990) =   5318.377 ms/op
     p(99.9999) =   5318.377 ms/op
    p(100.0000) =   5318.377 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 77.08% complete, ETA 01:22:34
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
47110.423 ms/op
# Warmup Iteration   2: 44627.395 ms/op
# Warmup Iteration   3: 43889.197 ms/op
# Warmup Iteration   4: 43285.217 ms/op
# Warmup Iteration   5: 43486.544 ms/op
Iteration   1: 43754.979 ms/op
                 executeQuery·p0.00:   43754.979 ms/op
                 executeQuery·p0.50:   43754.979 ms/op
                 executeQuery·p0.90:   43754.979 ms/op
                 executeQuery·p0.95:   43754.979 ms/op
                 executeQuery·p0.99:   43754.979 ms/op
                 executeQuery·p0.999:  43754.979 ms/op
                 executeQuery·p0.9999: 43754.979 ms/op
                 executeQuery·p1.00:   43754.979 ms/op

Iteration   2: 43754.979 ms/op
                 executeQuery·p0.00:   43754.979 ms/op
                 executeQuery·p0.50:   43754.979 ms/op
                 executeQuery·p0.90:   43754.979 ms/op
                 executeQuery·p0.95:   43754.979 ms/op
                 executeQuery·p0.99:   43754.979 ms/op
                 executeQuery·p0.999:  43754.979 ms/op
                 executeQuery·p0.9999: 43754.979 ms/op
                 executeQuery·p1.00:   43754.979 ms/op

Iteration   3: 43754.979 ms/op
                 executeQuery·p0.00:   43754.979 ms/op
                 executeQuery·p0.50:   43754.979 ms/op
                 executeQuery·p0.90:   43754.979 ms/op
                 executeQuery·p0.95:   43754.979 ms/op
                 executeQuery·p0.99:   43754.979 ms/op
                 executeQuery·p0.999:  43754.979 ms/op
                 executeQuery·p0.9999: 43754.979 ms/op
                 executeQuery·p1.00:   43754.979 ms/op

Iteration   4: 43889.197 ms/op
                 executeQuery·p0.00:   43889.197 ms/op
                 executeQuery·p0.50:   43889.197 ms/op
                 executeQuery·p0.90:   43889.197 ms/op
                 executeQuery·p0.95:   43889.197 ms/op
                 executeQuery·p0.99:   43889.197 ms/op
                 executeQuery·p0.999:  43889.197 ms/op
                 executeQuery·p0.9999: 43889.197 ms/op
                 executeQuery·p1.00:   43889.197 ms/op

Iteration   5: 43754.979 ms/op
                 executeQuery·p0.00:   43754.979 ms/op
                 executeQuery·p0.50:   43754.979 ms/op
                 executeQuery·p0.90:   43754.979 ms/op
                 executeQuery·p0.95:   43754.979 ms/op
                 executeQuery·p0.99:   43754.979 ms/op
                 executeQuery·p0.999:  43754.979 ms/op
                 executeQuery·p0.9999: 43754.979 ms/op
                 executeQuery·p1.00:   43754.979 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  43781.823 ±(99.9%) 231.131 ms/op

  Histogram, ms/op:
    [43700.000, 43712.500) = 0 
    [43712.500, 43725.000) = 0 
    [43725.000, 43737.500) = 0 
    [43737.500, 43750.000) = 0 
    [43750.000, 43762.500) = 4 
    [43762.500, 43775.000) = 0 
    [43775.000, 43787.500) = 0 
    [43787.500, 43800.000) = 0 
    [43800.000, 43812.500) = 0 
    [43812.500, 43825.000) = 0 
    [43825.000, 43837.500) = 0 
    [43837.500, 43850.000) = 0 
    [43850.000, 43862.500) = 0 
    [43862.500, 43875.000) = 0 
    [43875.000, 43887.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =  43754.979 ms/op
     p(50.0000) =  43754.979 ms/op
     p(90.0000) =  43889.197 ms/op
     p(95.0000) =  43889.197 ms/op
     p(99.0000) =  43889.197 ms/op
     p(99.9000) =  43889.197 ms/op
     p(99.9900) =  43889.197 ms/op
     p(99.9990) =  43889.197 ms/op
     p(99.9999) =  43889.197 ms/op
    p(100.0000) =  43889.197 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 78.13% complete, ETA 01:19:50
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
475.696 ±(99.9%) 60.231 ms/op
# Warmup Iteration   2: 531.656 ±(99.9%) 5.086 ms/op
# Warmup Iteration   3: 446.329 ±(99.9%) 40.731 ms/op
# Warmup Iteration   4: 415.173 ±(99.9%) 3.690 ms/op
# Warmup Iteration   5: 415.152 ±(99.9%) 3.062 ms/op
Iteration   1: 416.612 ±(99.9%) 3.363 ms/op
                 executeQuery·p0.00:   409.993 ms/op
                 executeQuery·p0.50:   415.760 ms/op
                 executeQuery·p0.90:   422.838 ms/op
                 executeQuery·p0.95:   427.688 ms/op
                 executeQuery·p0.99:   428.868 ms/op
                 executeQuery·p0.999:  428.868 ms/op
                 executeQuery·p0.9999: 428.868 ms/op
                 executeQuery·p1.00:   428.868 ms/op

Iteration   2: 413.957 ±(99.9%) 2.362 ms/op
                 executeQuery·p0.00:   408.945 ms/op
                 executeQuery·p0.50:   412.615 ms/op
                 executeQuery·p0.90:   419.116 ms/op
                 executeQuery·p0.95:   420.898 ms/op
                 executeQuery·p0.99:   421.528 ms/op
                 executeQuery·p0.999:  421.528 ms/op
                 executeQuery·p0.9999: 421.528 ms/op
                 executeQuery·p1.00:   421.528 ms/op

Iteration   3: 417.923 ±(99.9%) 4.798 ms/op
                 executeQuery·p0.00:   409.993 ms/op
                 executeQuery·p0.50:   416.023 ms/op
                 executeQuery·p0.90:   429.392 ms/op
                 executeQuery·p0.95:   431.882 ms/op
                 executeQuery·p0.99:   432.538 ms/op
                 executeQuery·p0.999:  432.538 ms/op
                 executeQuery·p0.9999: 432.538 ms/op
                 executeQuery·p1.00:   432.538 ms/op

Iteration   4: 420.501 ±(99.9%) 4.535 ms/op
                 executeQuery·p0.00:   413.139 ms/op
                 executeQuery·p0.50:   419.168 ms/op
                 executeQuery·p0.90:   431.751 ms/op
                 executeQuery·p0.95:   433.848 ms/op
                 executeQuery·p0.99:   434.110 ms/op
                 executeQuery·p0.999:  434.110 ms/op
                 executeQuery·p0.9999: 434.110 ms/op
                 executeQuery·p1.00:   434.110 ms/op

Iteration   5: 415.935 ±(99.9%) 4.096 ms/op
                 executeQuery·p0.00:   407.896 ms/op
                 executeQuery·p0.50:   416.285 ms/op
                 executeQuery·p0.90:   421.790 ms/op
                 executeQuery·p0.95:   430.309 ms/op
                 executeQuery·p0.99:   433.062 ms/op
                 executeQuery·p0.999:  433.062 ms/op
                 executeQuery·p0.9999: 433.062 ms/op
                 executeQuery·p1.00:   433.062 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 121
  mean =    416.961 ±(99.9%) 1.680 ms/op

  Histogram, ms/op:
    [400.000, 402.500) = 0 
    [402.500, 405.000) = 0 
    [405.000, 407.500) = 0 
    [407.500, 410.000) = 8 
    [410.000, 412.500) = 15 
    [412.500, 415.000) = 26 
    [415.000, 417.500) = 29 
    [417.500, 420.000) = 15 
    [420.000, 422.500) = 14 
    [422.500, 425.000) = 4 
    [425.000, 427.500) = 2 
    [427.500, 430.000) = 3 
    [430.000, 432.500) = 1 
    [432.500, 435.000) = 4 
    [435.000, 437.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    407.896 ms/op
     p(50.0000) =    415.760 ms/op
     p(90.0000) =    424.149 ms/op
     p(95.0000) =    429.811 ms/op
     p(99.0000) =    433.880 ms/op
     p(99.9000) =    434.110 ms/op
     p(99.9900) =    434.110 ms/op
     p(99.9990) =    434.110 ms/op
     p(99.9999) =    434.110 ms/op
    p(100.0000) =    434.110 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 79.17% complete, ETA 01:15:29
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4753.545 ±(99.9%) 9347.106 ms/op
# Warmup Iteration   2: 5440.012 ms/op
# Warmup Iteration   3: 4223.664 ±(99.9%) 535.638 ms/op
# Warmup Iteration   4: 4155.157 ±(99.9%) 637.154 ms/op
# Warmup Iteration   5: 4181.721 ±(99.9%) 827.687 ms/op
Iteration   1: 4185.915 ±(99.9%) 729.952 ms/op
                 executeQuery·p0.00:   4148.167 ms/op
                 executeQuery·p0.50:   4181.721 ms/op
                 executeQuery·p0.90:   4227.858 ms/op
                 executeQuery·p0.95:   4227.858 ms/op
                 executeQuery·p0.99:   4227.858 ms/op
                 executeQuery·p0.999:  4227.858 ms/op
                 executeQuery·p0.9999: 4227.858 ms/op
                 executeQuery·p1.00:   4227.858 ms/op

Iteration   2: 4146.769 ±(99.9%) 361.618 ms/op
                 executeQuery·p0.00:   4131.389 ms/op
                 executeQuery·p0.50:   4139.778 ms/op
                 executeQuery·p0.90:   4169.138 ms/op
                 executeQuery·p0.95:   4169.138 ms/op
                 executeQuery·p0.99:   4169.138 ms/op
                 executeQuery·p0.999:  4169.138 ms/op
                 executeQuery·p0.9999: 4169.138 ms/op
                 executeQuery·p1.00:   4169.138 ms/op

Iteration   3: 4177.527 ±(99.9%) 501.773 ms/op
                 executeQuery·p0.00:   4148.167 ms/op
                 executeQuery·p0.50:   4181.721 ms/op
                 executeQuery·p0.90:   4202.693 ms/op
                 executeQuery·p0.95:   4202.693 ms/op
                 executeQuery·p0.99:   4202.693 ms/op
                 executeQuery·p0.999:  4202.693 ms/op
                 executeQuery·p0.9999: 4202.693 ms/op
                 executeQuery·p1.00:   4202.693 ms/op

Iteration   4: 4187.313 ±(99.9%) 1107.115 ms/op
                 executeQuery·p0.00:   4148.167 ms/op
                 executeQuery·p0.50:   4156.555 ms/op
                 executeQuery·p0.90:   4257.219 ms/op
                 executeQuery·p0.95:   4257.219 ms/op
                 executeQuery·p0.99:   4257.219 ms/op
                 executeQuery·p0.999:  4257.219 ms/op
                 executeQuery·p0.9999: 4257.219 ms/op
                 executeQuery·p1.00:   4257.219 ms/op

Iteration   5: 4190.110 ±(99.9%) 350.657 ms/op
                 executeQuery·p0.00:   4173.332 ms/op
                 executeQuery·p0.50:   4185.915 ms/op
                 executeQuery·p0.90:   4211.081 ms/op
                 executeQuery·p0.95:   4211.081 ms/op
                 executeQuery·p0.99:   4211.081 ms/op
                 executeQuery·p0.999:  4211.081 ms/op
                 executeQuery·p0.9999: 4211.081 ms/op
                 executeQuery·p1.00:   4211.081 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 15
  mean =   4177.527 ±(99.9%) 37.706 ms/op

  Histogram, ms/op:
    [4100.000, 4112.500) = 0 
    [4112.500, 4125.000) = 0 
    [4125.000, 4137.500) = 1 
    [4137.500, 4150.000) = 4 
    [4150.000, 4162.500) = 1 
    [4162.500, 4175.000) = 2 
    [4175.000, 4187.500) = 3 
    [4187.500, 4200.000) = 0 
    [4200.000, 4212.500) = 2 
    [4212.500, 4225.000) = 0 
    [4225.000, 4237.500) = 1 
    [4237.500, 4250.000) = 0 
    [4250.000, 4262.500) = 1 
    [4262.500, 4275.000) = 0 
    [4275.000, 4287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4131.389 ms/op
     p(50.0000) =   4173.332 ms/op
     p(90.0000) =   4239.602 ms/op
     p(95.0000) =   4257.219 ms/op
     p(99.0000) =   4257.219 ms/op
     p(99.9000) =   4257.219 ms/op
     p(99.9900) =   4257.219 ms/op
     p(99.9990) =   4257.219 ms/op
     p(99.9999) =   4257.219 ms/op
    p(100.0000) =   4257.219 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 80.21% complete, ETA 01:11:18
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
44023.415 ms/op
# Warmup Iteration   2: 41003.516 ms/op
# Warmup Iteration   3: 41473.278 ms/op
# Warmup Iteration   4: 41003.516 ms/op
# Warmup Iteration   5: 41204.842 ms/op
Iteration   1: 41204.842 ms/op
                 executeQuery·p0.00:   41204.842 ms/op
                 executeQuery·p0.50:   41204.842 ms/op
                 executeQuery·p0.90:   41204.842 ms/op
                 executeQuery·p0.95:   41204.842 ms/op
                 executeQuery·p0.99:   41204.842 ms/op
                 executeQuery·p0.999:  41204.842 ms/op
                 executeQuery·p0.9999: 41204.842 ms/op
                 executeQuery·p1.00:   41204.842 ms/op

Iteration   2: 41540.387 ms/op
                 executeQuery·p0.00:   41540.387 ms/op
                 executeQuery·p0.50:   41540.387 ms/op
                 executeQuery·p0.90:   41540.387 ms/op
                 executeQuery·p0.95:   41540.387 ms/op
                 executeQuery·p0.99:   41540.387 ms/op
                 executeQuery·p0.999:  41540.387 ms/op
                 executeQuery·p0.9999: 41540.387 ms/op
                 executeQuery·p1.00:   41540.387 ms/op

Iteration   3: 41003.516 ms/op
                 executeQuery·p0.00:   41003.516 ms/op
                 executeQuery·p0.50:   41003.516 ms/op
                 executeQuery·p0.90:   41003.516 ms/op
                 executeQuery·p0.95:   41003.516 ms/op
                 executeQuery·p0.99:   41003.516 ms/op
                 executeQuery·p0.999:  41003.516 ms/op
                 executeQuery·p0.9999: 41003.516 ms/op
                 executeQuery·p1.00:   41003.516 ms/op

Iteration   4: 41070.625 ms/op
                 executeQuery·p0.00:   41070.625 ms/op
                 executeQuery·p0.50:   41070.625 ms/op
                 executeQuery·p0.90:   41070.625 ms/op
                 executeQuery·p0.95:   41070.625 ms/op
                 executeQuery·p0.99:   41070.625 ms/op
                 executeQuery·p0.999:  41070.625 ms/op
                 executeQuery·p0.9999: 41070.625 ms/op
                 executeQuery·p1.00:   41070.625 ms/op

Iteration   5: 41003.516 ms/op
                 executeQuery·p0.00:   41003.516 ms/op
                 executeQuery·p0.50:   41003.516 ms/op
                 executeQuery·p0.90:   41003.516 ms/op
                 executeQuery·p0.95:   41003.516 ms/op
                 executeQuery·p0.99:   41003.516 ms/op
                 executeQuery·p0.999:  41003.516 ms/op
                 executeQuery·p0.9999: 41003.516 ms/op
                 executeQuery·p1.00:   41003.516 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 5
  mean =  41164.577 ±(99.9%) 868.665 ms/op

  Histogram, ms/op:
    [41000.000, 41050.000) = 2 
    [41050.000, 41100.000) = 1 
    [41100.000, 41150.000) = 0 
    [41150.000, 41200.000) = 0 
    [41200.000, 41250.000) = 1 
    [41250.000, 41300.000) = 0 
    [41300.000, 41350.000) = 0 
    [41350.000, 41400.000) = 0 
    [41400.000, 41450.000) = 0 
    [41450.000, 41500.000) = 0 
    [41500.000, 41550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  41003.516 ms/op
     p(50.0000) =  41070.625 ms/op
     p(90.0000) =  41540.387 ms/op
     p(95.0000) =  41540.387 ms/op
     p(99.0000) =  41540.387 ms/op
     p(99.9000) =  41540.387 ms/op
     p(99.9900) =  41540.387 ms/op
     p(99.9990) =  41540.387 ms/op
     p(99.9999) =  41540.387 ms/op
    p(100.0000) =  41540.387 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 81.25% complete, ETA 01:08:17
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
147.419 ±(99.9%) 21.525 ms/op
# Warmup Iteration   2: 123.505 ±(99.9%) 1.074 ms/op
# Warmup Iteration   3: 122.803 ±(99.9%) 0.837 ms/op
# Warmup Iteration   4: 122.908 ±(99.9%) 1.220 ms/op
# Warmup Iteration   5: 124.266 ±(99.9%) 0.720 ms/op
Iteration   1: 124.226 ±(99.9%) 0.635 ms/op
                 executeQuery·p0.00:   120.848 ms/op
                 executeQuery·p0.50:   124.781 ms/op
                 executeQuery·p0.90:   125.646 ms/op
                 executeQuery·p0.95:   126.734 ms/op
                 executeQuery·p0.99:   127.795 ms/op
                 executeQuery·p0.999:  127.795 ms/op
                 executeQuery·p0.9999: 127.795 ms/op
                 executeQuery·p1.00:   127.795 ms/op

Iteration   2: 124.643 ±(99.9%) 0.714 ms/op
                 executeQuery·p0.00:   120.717 ms/op
                 executeQuery·p0.50:   124.912 ms/op
                 executeQuery·p0.90:   126.589 ms/op
                 executeQuery·p0.95:   127.527 ms/op
                 executeQuery·p0.99:   129.761 ms/op
                 executeQuery·p0.999:  129.761 ms/op
                 executeQuery·p0.9999: 129.761 ms/op
                 executeQuery·p1.00:   129.761 ms/op

Iteration   3: 123.405 ±(99.9%) 1.192 ms/op
                 executeQuery·p0.00:   118.882 ms/op
                 executeQuery·p0.50:   123.208 ms/op
                 executeQuery·p0.90:   125.436 ms/op
                 executeQuery·p0.95:   125.921 ms/op
                 executeQuery·p0.99:   142.868 ms/op
                 executeQuery·p0.999:  142.868 ms/op
                 executeQuery·p0.9999: 142.868 ms/op
                 executeQuery·p1.00:   142.868 ms/op

Iteration   4: 123.692 ±(99.9%) 0.594 ms/op
                 executeQuery·p0.00:   119.407 ms/op
                 executeQuery·p0.50:   123.994 ms/op
                 executeQuery·p0.90:   125.383 ms/op
                 executeQuery·p0.95:   126.209 ms/op
                 executeQuery·p0.99:   127.009 ms/op
                 executeQuery·p0.999:  127.009 ms/op
                 executeQuery·p0.9999: 127.009 ms/op
                 executeQuery·p1.00:   127.009 ms/op

Iteration   5: 123.609 ±(99.9%) 0.698 ms/op
                 executeQuery·p0.00:   119.669 ms/op
                 executeQuery·p0.50:   124.256 ms/op
                 executeQuery·p0.90:   125.410 ms/op
                 executeQuery·p0.95:   125.829 ms/op
                 executeQuery·p0.99:   126.747 ms/op
                 executeQuery·p0.999:  126.747 ms/op
                 executeQuery·p0.9999: 126.747 ms/op
                 executeQuery·p1.00:   126.747 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 404
  mean =    123.913 ±(99.9%) 0.352 ms/op

  Histogram, ms/op:
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 0 
    [115.000, 117.500) = 0 
    [117.500, 120.000) = 11 
    [120.000, 122.500) = 86 
    [122.500, 125.000) = 198 
    [125.000, 127.500) = 100 
    [127.500, 130.000) = 7 
    [130.000, 132.500) = 0 
    [132.500, 135.000) = 1 
    [135.000, 137.500) = 0 
    [137.500, 140.000) = 0 
    [140.000, 142.500) = 0 
    [142.500, 145.000) = 1 
    [145.000, 147.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    118.882 ms/op
     p(50.0000) =    124.387 ms/op
     p(90.0000) =    125.567 ms/op
     p(95.0000) =    126.550 ms/op
     p(99.0000) =    129.309 ms/op
     p(99.9000) =    142.868 ms/op
     p(99.9900) =    142.868 ms/op
     p(99.9990) =    142.868 ms/op
     p(99.9999) =    142.868 ms/op
    p(100.0000) =    142.868 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 82.29% complete, ETA 01:04:02
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2939.683 ±(99.9%) 5053.514 ms/op
# Warmup Iteration   2: 2111.832 ±(99.9%) 1705.704 ms/op
# Warmup Iteration   3: 1904.913 ±(99.9%) 16.908 ms/op
# Warmup Iteration   4: 1890.233 ±(99.9%) 54.874 ms/op
# Warmup Iteration   5: 1895.476 ±(99.9%) 44.542 ms/op
Iteration   1: 1895.476 ±(99.9%) 42.475 ms/op
                 executeQuery·p0.00:   1866.465 ms/op
                 executeQuery·p0.50:   1897.923 ms/op
                 executeQuery·p0.90:   1908.408 ms/op
                 executeQuery·p0.95:   1908.408 ms/op
                 executeQuery·p0.99:   1908.408 ms/op
                 executeQuery·p0.999:  1908.408 ms/op
                 executeQuery·p0.9999: 1908.408 ms/op
                 executeQuery·p1.00:   1908.408 ms/op

Iteration   2: 1905.962 ±(99.9%) 9.422 ms/op
                 executeQuery·p0.00:   1902.117 ms/op
                 executeQuery·p0.50:   1906.311 ms/op
                 executeQuery·p0.90:   1910.505 ms/op
                 executeQuery·p0.95:   1910.505 ms/op
                 executeQuery·p0.99:   1910.505 ms/op
                 executeQuery·p0.999:  1910.505 ms/op
                 executeQuery·p0.9999: 1910.505 ms/op
                 executeQuery·p1.00:   1910.505 ms/op

Iteration   3: 1907.360 ±(99.9%) 8.919 ms/op
                 executeQuery·p0.00:   1902.117 ms/op
                 executeQuery·p0.50:   1907.360 ms/op
                 executeQuery·p0.90:   1910.505 ms/op
                 executeQuery·p0.95:   1910.505 ms/op
                 executeQuery·p0.99:   1910.505 ms/op
                 executeQuery·p0.999:  1910.505 ms/op
                 executeQuery·p0.9999: 1910.505 ms/op
                 executeQuery·p1.00:   1910.505 ms/op

Iteration   4: 1901.418 ±(99.9%) 56.855 ms/op
                 executeQuery·p0.00:   1860.174 ms/op
                 executeQuery·p0.50:   1910.505 ms/op
                 executeQuery·p0.90:   1910.505 ms/op
                 executeQuery·p0.95:   1910.505 ms/op
                 executeQuery·p0.99:   1910.505 ms/op
                 executeQuery·p0.999:  1910.505 ms/op
                 executeQuery·p0.9999: 1910.505 ms/op
                 executeQuery·p1.00:   1910.505 ms/op

Iteration   5: 1922.389 ±(99.9%) 28.488 ms/op
                 executeQuery·p0.00:   1908.408 ms/op
                 executeQuery·p0.50:   1925.186 ms/op
                 executeQuery·p0.90:   1933.574 ms/op
                 executeQuery·p0.95:   1933.574 ms/op
                 executeQuery·p0.99:   1933.574 ms/op
                 executeQuery·p0.999:  1933.574 ms/op
                 executeQuery·p0.9999: 1933.574 ms/op
                 executeQuery·p1.00:   1933.574 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   1906.521 ±(99.9%) 9.793 ms/op

  Histogram, ms/op:
    [1860.000, 1865.000) = 1 
    [1865.000, 1870.000) = 1 
    [1870.000, 1875.000) = 0 
    [1875.000, 1880.000) = 0 
    [1880.000, 1885.000) = 0 
    [1885.000, 1890.000) = 0 
    [1890.000, 1895.000) = 0 
    [1895.000, 1900.000) = 2 
    [1900.000, 1905.000) = 4 
    [1905.000, 1910.000) = 10 
    [1910.000, 1915.000) = 8 
    [1915.000, 1920.000) = 0 
    [1920.000, 1925.000) = 1 
    [1925.000, 1930.000) = 2 
    [1930.000, 1935.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1860.174 ms/op
     p(50.0000) =   1908.408 ms/op
     p(90.0000) =   1928.541 ms/op
     p(95.0000) =   1931.267 ms/op
     p(99.0000) =   1933.574 ms/op
     p(99.9000) =   1933.574 ms/op
     p(99.9900) =   1933.574 ms/op
     p(99.9990) =   1933.574 ms/op
     p(99.9999) =   1933.574 ms/op
    p(100.0000) =   1933.574 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 83.33% complete, ETA 00:59:54
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
49257.906 ms/op
# Warmup Iteration   2: 34829.500 ms/op
# Warmup Iteration   3: 32614.908 ms/op
# Warmup Iteration   4: 25098.715 ms/op
# Warmup Iteration   5: 23857.201 ms/op
Iteration   1: 33923.531 ms/op
                 executeQuery·p0.00:   33923.531 ms/op
                 executeQuery·p0.50:   33923.531 ms/op
                 executeQuery·p0.90:   33923.531 ms/op
                 executeQuery·p0.95:   33923.531 ms/op
                 executeQuery·p0.99:   33923.531 ms/op
                 executeQuery·p0.999:  33923.531 ms/op
                 executeQuery·p0.9999: 33923.531 ms/op
                 executeQuery·p1.00:   33923.531 ms/op

Iteration   2: 22984.786 ms/op
                 executeQuery·p0.00:   22984.786 ms/op
                 executeQuery·p0.50:   22984.786 ms/op
                 executeQuery·p0.90:   22984.786 ms/op
                 executeQuery·p0.95:   22984.786 ms/op
                 executeQuery·p0.99:   22984.786 ms/op
                 executeQuery·p0.999:  22984.786 ms/op
                 executeQuery·p0.9999: 22984.786 ms/op
                 executeQuery·p1.00:   22984.786 ms/op

Iteration   3: 23152.558 ms/op
                 executeQuery·p0.00:   23152.558 ms/op
                 executeQuery·p0.50:   23152.558 ms/op
                 executeQuery·p0.90:   23152.558 ms/op
                 executeQuery·p0.95:   23152.558 ms/op
                 executeQuery·p0.99:   23152.558 ms/op
                 executeQuery·p0.999:  23152.558 ms/op
                 executeQuery·p0.9999: 23152.558 ms/op
                 executeQuery·p1.00:   23152.558 ms/op

Iteration   4: 23152.558 ms/op
                 executeQuery·p0.00:   23152.558 ms/op
                 executeQuery·p0.50:   23152.558 ms/op
                 executeQuery·p0.90:   23152.558 ms/op
                 executeQuery·p0.95:   23152.558 ms/op
                 executeQuery·p0.99:   23152.558 ms/op
                 executeQuery·p0.999:  23152.558 ms/op
                 executeQuery·p0.9999: 23152.558 ms/op
                 executeQuery·p1.00:   23152.558 ms/op

Iteration   5: 23253.221 ms/op
                 executeQuery·p0.00:   23253.221 ms/op
                 executeQuery·p0.50:   23253.221 ms/op
                 executeQuery·p0.90:   23253.221 ms/op
                 executeQuery·p0.95:   23253.221 ms/op
                 executeQuery·p0.99:   23253.221 ms/op
                 executeQuery·p0.999:  23253.221 ms/op
                 executeQuery·p0.9999: 23253.221 ms/op
                 executeQuery·p1.00:   23253.221 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  25293.331 ±(99.9%) 18580.863 ms/op

  Histogram, ms/op:
    [20000.000, 21250.000) = 0 
    [21250.000, 22500.000) = 0 
    [22500.000, 23750.000) = 4 
    [23750.000, 25000.000) = 0 
    [25000.000, 26250.000) = 0 
    [26250.000, 27500.000) = 0 
    [27500.000, 28750.000) = 0 
    [28750.000, 30000.000) = 0 
    [30000.000, 31250.000) = 0 
    [31250.000, 32500.000) = 0 
    [32500.000, 33750.000) = 0 
    [33750.000, 35000.000) = 1 
    [35000.000, 36250.000) = 0 
    [36250.000, 37500.000) = 0 
    [37500.000, 38750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  22984.786 ms/op
     p(50.0000) =  23152.558 ms/op
     p(90.0000) =  33923.531 ms/op
     p(95.0000) =  33923.531 ms/op
     p(99.0000) =  33923.531 ms/op
     p(99.9000) =  33923.531 ms/op
     p(99.9900) =  33923.531 ms/op
     p(99.9990) =  33923.531 ms/op
     p(99.9999) =  33923.531 ms/op
    p(100.0000) =  33923.531 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 84.38% complete, ETA 00:56:23
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
148.868 ±(99.9%) 24.995 ms/op
# Warmup Iteration   2: 127.780 ±(99.9%) 0.638 ms/op
# Warmup Iteration   3: 127.892 ±(99.9%) 0.692 ms/op
# Warmup Iteration   4: 127.262 ±(99.9%) 0.377 ms/op
# Warmup Iteration   5: 127.587 ±(99.9%) 0.453 ms/op
Iteration   1: 126.888 ±(99.9%) 0.536 ms/op
                 executeQuery·p0.00:   124.781 ms/op
                 executeQuery·p0.50:   126.878 ms/op
                 executeQuery·p0.90:   128.346 ms/op
                 executeQuery·p0.95:   130.168 ms/op
                 executeQuery·p0.99:   132.121 ms/op
                 executeQuery·p0.999:  132.121 ms/op
                 executeQuery·p0.9999: 132.121 ms/op
                 executeQuery·p1.00:   132.121 ms/op

Iteration   2: 126.384 ±(99.9%) 0.435 ms/op
                 executeQuery·p0.00:   124.781 ms/op
                 executeQuery·p0.50:   126.484 ms/op
                 executeQuery·p0.90:   127.559 ms/op
                 executeQuery·p0.95:   128.018 ms/op
                 executeQuery·p0.99:   131.203 ms/op
                 executeQuery·p0.999:  131.203 ms/op
                 executeQuery·p0.9999: 131.203 ms/op
                 executeQuery·p1.00:   131.203 ms/op

Iteration   3: 126.302 ±(99.9%) 0.588 ms/op
                 executeQuery·p0.00:   124.387 ms/op
                 executeQuery·p0.50:   126.091 ms/op
                 executeQuery·p0.90:   127.533 ms/op
                 executeQuery·p0.95:   128.385 ms/op
                 executeQuery·p0.99:   135.528 ms/op
                 executeQuery·p0.999:  135.528 ms/op
                 executeQuery·p0.9999: 135.528 ms/op
                 executeQuery·p1.00:   135.528 ms/op

Iteration   4: 126.296 ±(99.9%) 0.486 ms/op
                 executeQuery·p0.00:   124.518 ms/op
                 executeQuery·p0.50:   126.091 ms/op
                 executeQuery·p0.90:   127.821 ms/op
                 executeQuery·p0.95:   128.477 ms/op
                 executeQuery·p0.99:   131.990 ms/op
                 executeQuery·p0.999:  131.990 ms/op
                 executeQuery·p0.9999: 131.990 ms/op
                 executeQuery·p1.00:   131.990 ms/op

Iteration   5: 126.011 ±(99.9%) 0.385 ms/op
                 executeQuery·p0.00:   124.518 ms/op
                 executeQuery·p0.50:   125.829 ms/op
                 executeQuery·p0.90:   127.297 ms/op
                 executeQuery·p0.95:   127.933 ms/op
                 executeQuery·p0.99:   128.582 ms/op
                 executeQuery·p0.999:  128.582 ms/op
                 executeQuery·p0.9999: 128.582 ms/op
                 executeQuery·p1.00:   128.582 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 386
  mean =    126.375 ±(99.9%) 0.217 ms/op

  Histogram, ms/op:
    [120.000, 121.250) = 0 
    [121.250, 122.500) = 0 
    [122.500, 123.750) = 0 
    [123.750, 125.000) = 30 
    [125.000, 126.250) = 166 
    [126.250, 127.500) = 136 
    [127.500, 128.750) = 41 
    [128.750, 130.000) = 6 
    [130.000, 131.250) = 4 
    [131.250, 132.500) = 2 
    [132.500, 133.750) = 0 
    [133.750, 135.000) = 0 
    [135.000, 136.250) = 1 
    [136.250, 137.500) = 0 
    [137.500, 138.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    124.387 ms/op
     p(50.0000) =    126.222 ms/op
     p(90.0000) =    127.664 ms/op
     p(95.0000) =    128.405 ms/op
     p(99.0000) =    131.305 ms/op
     p(99.9000) =    135.528 ms/op
     p(99.9900) =    135.528 ms/op
     p(99.9990) =    135.528 ms/op
     p(99.9999) =    135.528 ms/op
    p(100.0000) =    135.528 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 85.42% complete, ETA 00:52:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2151.678 ±(99.9%) 1536.245 ms/op
# Warmup Iteration   2: 1881.495 ±(99.9%) 51.054 ms/op
# Warmup Iteration   3: 1866.815 ±(99.9%) 23.351 ms/op
# Warmup Iteration   4: 1866.116 ±(99.9%) 22.135 ms/op
# Warmup Iteration   5: 1863.320 ±(99.9%) 17.346 ms/op
Iteration   1: 1845.494 ±(99.9%) 32.848 ms/op
                 executeQuery·p0.00:   1826.619 ms/op
                 executeQuery·p0.50:   1848.639 ms/op
                 executeQuery·p0.90:   1855.980 ms/op
                 executeQuery·p0.95:   1855.980 ms/op
                 executeQuery·p0.99:   1855.980 ms/op
                 executeQuery·p0.999:  1855.980 ms/op
                 executeQuery·p0.9999: 1855.980 ms/op
                 executeQuery·p1.00:   1855.980 ms/op

Iteration   2: 1843.397 ±(99.9%) 30.444 ms/op
                 executeQuery·p0.00:   1830.814 ms/op
                 executeQuery·p0.50:   1843.397 ms/op
                 executeQuery·p0.90:   1853.882 ms/op
                 executeQuery·p0.95:   1853.882 ms/op
                 executeQuery·p0.99:   1853.882 ms/op
                 executeQuery·p0.999:  1853.882 ms/op
                 executeQuery·p0.9999: 1853.882 ms/op
                 executeQuery·p1.00:   1853.882 ms/op

Iteration   3: 1844.096 ±(99.9%) 25.947 ms/op
                 executeQuery·p0.00:   1835.008 ms/op
                 executeQuery·p0.50:   1842.348 ms/op
                 executeQuery·p0.90:   1860.174 ms/op
                 executeQuery·p0.95:   1860.174 ms/op
                 executeQuery·p0.99:   1860.174 ms/op
                 executeQuery·p0.999:  1860.174 ms/op
                 executeQuery·p0.9999: 1860.174 ms/op
                 executeQuery·p1.00:   1860.174 ms/op

Iteration   4: 1846.542 ±(99.9%) 36.960 ms/op
                 executeQuery·p0.00:   1826.619 ms/op
                 executeQuery·p0.50:   1850.737 ms/op
                 executeQuery·p0.90:   1862.271 ms/op
                 executeQuery·p0.95:   1862.271 ms/op
                 executeQuery·p0.99:   1862.271 ms/op
                 executeQuery·p0.999:  1862.271 ms/op
                 executeQuery·p0.9999: 1862.271 ms/op
                 executeQuery·p1.00:   1862.271 ms/op

Iteration   5: 1852.834 ±(99.9%) 26.496 ms/op
                 executeQuery·p0.00:   1837.105 ms/op
                 executeQuery·p0.50:   1852.834 ms/op
                 executeQuery·p0.90:   1864.368 ms/op
                 executeQuery·p0.95:   1864.368 ms/op
                 executeQuery·p0.99:   1864.368 ms/op
                 executeQuery·p0.999:  1864.368 ms/op
                 executeQuery·p0.9999: 1864.368 ms/op
                 executeQuery·p1.00:   1864.368 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   1846.472 ±(99.9%) 7.189 ms/op

  Histogram, ms/op:
    [1820.000, 1825.000) = 0 
    [1825.000, 1830.000) = 2 
    [1830.000, 1835.000) = 1 
    [1835.000, 1840.000) = 8 
    [1840.000, 1845.000) = 0 
    [1845.000, 1850.000) = 5 
    [1850.000, 1855.000) = 8 
    [1855.000, 1860.000) = 2 
    [1860.000, 1865.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =   1826.619 ms/op
     p(50.0000) =   1849.688 ms/op
     p(90.0000) =   1860.174 ms/op
     p(95.0000) =   1863.215 ms/op
     p(99.0000) =   1864.368 ms/op
     p(99.9000) =   1864.368 ms/op
     p(99.9900) =   1864.368 ms/op
     p(99.9990) =   1864.368 ms/op
     p(99.9999) =   1864.368 ms/op
    p(100.0000) =   1864.368 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 86.46% complete, ETA 00:48:15
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
30702.305 ms/op
# Warmup Iteration   2: 21541.945 ms/op
# Warmup Iteration   3: 21407.728 ms/op
# Warmup Iteration   4: 21810.381 ms/op
# Warmup Iteration   5: 21508.391 ms/op
Iteration   1: 22246.588 ms/op
                 executeQuery·p0.00:   22246.588 ms/op
                 executeQuery·p0.50:   22246.588 ms/op
                 executeQuery·p0.90:   22246.588 ms/op
                 executeQuery·p0.95:   22246.588 ms/op
                 executeQuery·p0.99:   22246.588 ms/op
                 executeQuery·p0.999:  22246.588 ms/op
                 executeQuery·p0.9999: 22246.588 ms/op
                 executeQuery·p1.00:   22246.588 ms/op

Iteration   2: 22145.925 ms/op
                 executeQuery·p0.00:   22145.925 ms/op
                 executeQuery·p0.50:   22145.925 ms/op
                 executeQuery·p0.90:   22145.925 ms/op
                 executeQuery·p0.95:   22145.925 ms/op
                 executeQuery·p0.99:   22145.925 ms/op
                 executeQuery·p0.999:  22145.925 ms/op
                 executeQuery·p0.9999: 22145.925 ms/op
                 executeQuery·p1.00:   22145.925 ms/op

Iteration   3: 22145.925 ms/op
                 executeQuery·p0.00:   22145.925 ms/op
                 executeQuery·p0.50:   22145.925 ms/op
                 executeQuery·p0.90:   22145.925 ms/op
                 executeQuery·p0.95:   22145.925 ms/op
                 executeQuery·p0.99:   22145.925 ms/op
                 executeQuery·p0.999:  22145.925 ms/op
                 executeQuery·p0.9999: 22145.925 ms/op
                 executeQuery·p1.00:   22145.925 ms/op

Iteration   4: 22145.925 ms/op
                 executeQuery·p0.00:   22145.925 ms/op
                 executeQuery·p0.50:   22145.925 ms/op
                 executeQuery·p0.90:   22145.925 ms/op
                 executeQuery·p0.95:   22145.925 ms/op
                 executeQuery·p0.99:   22145.925 ms/op
                 executeQuery·p0.999:  22145.925 ms/op
                 executeQuery·p0.9999: 22145.925 ms/op
                 executeQuery·p1.00:   22145.925 ms/op

Iteration   5: 22078.816 ms/op
                 executeQuery·p0.00:   22078.816 ms/op
                 executeQuery·p0.50:   22078.816 ms/op
                 executeQuery·p0.90:   22078.816 ms/op
                 executeQuery·p0.95:   22078.816 ms/op
                 executeQuery·p0.99:   22078.816 ms/op
                 executeQuery·p0.999:  22078.816 ms/op
                 executeQuery·p0.9999: 22078.816 ms/op
                 executeQuery·p1.00:   22078.816 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  22152.636 ±(99.9%) 231.131 ms/op

  Histogram, ms/op:
    [22000.000, 22025.000) = 0 
    [22025.000, 22050.000) = 0 
    [22050.000, 22075.000) = 0 
    [22075.000, 22100.000) = 1 
    [22100.000, 22125.000) = 0 
    [22125.000, 22150.000) = 3 
    [22150.000, 22175.000) = 0 
    [22175.000, 22200.000) = 0 
    [22200.000, 22225.000) = 0 
    [22225.000, 22250.000) = 1 
    [22250.000, 22275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  22078.816 ms/op
     p(50.0000) =  22145.925 ms/op
     p(90.0000) =  22246.588 ms/op
     p(95.0000) =  22246.588 ms/op
     p(99.0000) =  22246.588 ms/op
     p(99.9000) =  22246.588 ms/op
     p(99.9900) =  22246.588 ms/op
     p(99.9990) =  22246.588 ms/op
     p(99.9999) =  22246.588 ms/op
    p(100.0000) =  22246.588 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 87.50% complete, ETA 00:44:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
161.734 ±(99.9%) 21.764 ms/op
# Warmup Iteration   2: 147.974 ±(99.9%) 0.737 ms/op
# Warmup Iteration   3: 147.200 ±(99.9%) 0.612 ms/op
# Warmup Iteration   4: 147.297 ±(99.9%) 0.535 ms/op
# Warmup Iteration   5: 146.936 ±(99.9%) 0.372 ms/op
Iteration   1: 147.031 ±(99.9%) 0.379 ms/op
                 executeQuery·p0.00:   144.703 ms/op
                 executeQuery·p0.50:   147.063 ms/op
                 executeQuery·p0.90:   148.374 ms/op
                 executeQuery·p0.95:   148.898 ms/op
                 executeQuery·p0.99:   149.160 ms/op
                 executeQuery·p0.999:  149.160 ms/op
                 executeQuery·p0.9999: 149.160 ms/op
                 executeQuery·p1.00:   149.160 ms/op

Iteration   2: 146.601 ±(99.9%) 0.485 ms/op
                 executeQuery·p0.00:   143.655 ms/op
                 executeQuery·p0.50:   146.538 ms/op
                 executeQuery·p0.90:   147.640 ms/op
                 executeQuery·p0.95:   148.898 ms/op
                 executeQuery·p0.99:   150.733 ms/op
                 executeQuery·p0.999:  150.733 ms/op
                 executeQuery·p0.9999: 150.733 ms/op
                 executeQuery·p1.00:   150.733 ms/op

Iteration   3: 146.554 ±(99.9%) 0.407 ms/op
                 executeQuery·p0.00:   144.179 ms/op
                 executeQuery·p0.50:   146.538 ms/op
                 executeQuery·p0.90:   147.640 ms/op
                 executeQuery·p0.95:   148.111 ms/op
                 executeQuery·p0.99:   149.160 ms/op
                 executeQuery·p0.999:  149.160 ms/op
                 executeQuery·p0.9999: 149.160 ms/op
                 executeQuery·p1.00:   149.160 ms/op

Iteration   4: 146.628 ±(99.9%) 0.552 ms/op
                 executeQuery·p0.00:   144.179 ms/op
                 executeQuery·p0.50:   146.538 ms/op
                 executeQuery·p0.90:   147.325 ms/op
                 executeQuery·p0.95:   148.269 ms/op
                 executeQuery·p0.99:   155.189 ms/op
                 executeQuery·p0.999:  155.189 ms/op
                 executeQuery·p0.9999: 155.189 ms/op
                 executeQuery·p1.00:   155.189 ms/op

Iteration   5: 146.582 ±(99.9%) 0.391 ms/op
                 executeQuery·p0.00:   144.703 ms/op
                 executeQuery·p0.50:   146.538 ms/op
                 executeQuery·p0.90:   147.640 ms/op
                 executeQuery·p0.95:   148.269 ms/op
                 executeQuery·p0.99:   150.733 ms/op
                 executeQuery·p0.999:  150.733 ms/op
                 executeQuery·p0.9999: 150.733 ms/op
                 executeQuery·p1.00:   150.733 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 334
  mean =    146.678 ±(99.9%) 0.195 ms/op

  Histogram, ms/op:
    [140.000, 141.250) = 0 
    [141.250, 142.500) = 0 
    [142.500, 143.750) = 1 
    [143.750, 145.000) = 15 
    [145.000, 146.250) = 74 
    [146.250, 147.500) = 194 
    [147.500, 148.750) = 38 
    [148.750, 150.000) = 8 
    [150.000, 151.250) = 3 
    [151.250, 152.500) = 0 
    [152.500, 153.750) = 0 
    [153.750, 155.000) = 0 
    [155.000, 156.250) = 1 
    [156.250, 157.500) = 0 
    [157.500, 158.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    143.655 ms/op
     p(50.0000) =    146.538 ms/op
     p(90.0000) =    147.849 ms/op
     p(95.0000) =    148.374 ms/op
     p(99.0000) =    150.549 ms/op
     p(99.9000) =    155.189 ms/op
     p(99.9900) =    155.189 ms/op
     p(99.9990) =    155.189 ms/op
     p(99.9999) =    155.189 ms/op
    p(100.0000) =    155.189 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 88.54% complete, ETA 00:40:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2237.242 ±(99.9%) 1436.459 ms/op
# Warmup Iteration   2: 2027.527 ±(99.9%) 46.879 ms/op
# Warmup Iteration   3: 2028.785 ±(99.9%) 86.712 ms/op
# Warmup Iteration   4: 2011.588 ±(99.9%) 47.911 ms/op
# Warmup Iteration   5: 2009.910 ±(99.9%) 21.058 ms/op
Iteration   1: 2020.816 ±(99.9%) 21.058 ms/op
                 executeQuery·p0.00:   2013.266 ms/op
                 executeQuery·p0.50:   2019.557 ms/op
                 executeQuery·p0.90:   2027.946 ms/op
                 executeQuery·p0.95:   2027.946 ms/op
                 executeQuery·p0.99:   2027.946 ms/op
                 executeQuery·p0.999:  2027.946 ms/op
                 executeQuery·p0.9999: 2027.946 ms/op
                 executeQuery·p1.00:   2027.946 ms/op

Iteration   2: 2022.074 ±(99.9%) 33.974 ms/op
                 executeQuery·p0.00:   2009.072 ms/op
                 executeQuery·p0.50:   2021.655 ms/op
                 executeQuery·p0.90:   2032.140 ms/op
                 executeQuery·p0.95:   2032.140 ms/op
                 executeQuery·p0.99:   2032.140 ms/op
                 executeQuery·p0.999:  2032.140 ms/op
                 executeQuery·p0.9999: 2032.140 ms/op
                 executeQuery·p1.00:   2032.140 ms/op

Iteration   3: 2018.299 ±(99.9%) 40.215 ms/op
                 executeQuery·p0.00:   2006.974 ms/op
                 executeQuery·p0.50:   2023.752 ms/op
                 executeQuery·p0.90:   2027.946 ms/op
                 executeQuery·p0.95:   2027.946 ms/op
                 executeQuery·p0.99:   2027.946 ms/op
                 executeQuery·p0.999:  2027.946 ms/op
                 executeQuery·p0.9999: 2027.946 ms/op
                 executeQuery·p1.00:   2027.946 ms/op

Iteration   4: 2012.008 ±(99.9%) 32.099 ms/op
                 executeQuery·p0.00:   2004.877 ms/op
                 executeQuery·p0.50:   2009.072 ms/op
                 executeQuery·p0.90:   2025.849 ms/op
                 executeQuery·p0.95:   2025.849 ms/op
                 executeQuery·p0.99:   2025.849 ms/op
                 executeQuery·p0.999:  2025.849 ms/op
                 executeQuery·p0.9999: 2025.849 ms/op
                 executeQuery·p1.00:   2025.849 ms/op

Iteration   5: 2019.977 ±(99.9%) 35.842 ms/op
                 executeQuery·p0.00:   2009.072 ms/op
                 executeQuery·p0.50:   2023.752 ms/op
                 executeQuery·p0.90:   2030.043 ms/op
                 executeQuery·p0.95:   2030.043 ms/op
                 executeQuery·p0.99:   2030.043 ms/op
                 executeQuery·p0.999:  2030.043 ms/op
                 executeQuery·p0.9999: 2030.043 ms/op
                 executeQuery·p1.00:   2030.043 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 25
  mean =   2018.635 ±(99.9%) 6.494 ms/op

  Histogram, ms/op:
    [2000.000, 2002.500) = 0 
    [2002.500, 2005.000) = 1 
    [2005.000, 2007.500) = 3 
    [2007.500, 2010.000) = 3 
    [2010.000, 2012.500) = 1 
    [2012.500, 2015.000) = 2 
    [2015.000, 2017.500) = 0 
    [2017.500, 2020.000) = 3 
    [2020.000, 2022.500) = 1 
    [2022.500, 2025.000) = 3 
    [2025.000, 2027.500) = 3 
    [2027.500, 2030.000) = 3 
    [2030.000, 2032.500) = 2 
    [2032.500, 2035.000) = 0 
    [2035.000, 2037.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2004.877 ms/op
     p(50.0000) =   2019.557 ms/op
     p(90.0000) =   2028.785 ms/op
     p(95.0000) =   2031.511 ms/op
     p(99.0000) =   2032.140 ms/op
     p(99.9000) =   2032.140 ms/op
     p(99.9900) =   2032.140 ms/op
     p(99.9990) =   2032.140 ms/op
     p(99.9999) =   2032.140 ms/op
    p(100.0000) =   2032.140 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 89.58% complete, ETA 00:36:40
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
30299.652 ms/op
# Warmup Iteration   2: 21273.510 ms/op
# Warmup Iteration   3: 21105.738 ms/op
# Warmup Iteration   4: 21340.619 ms/op
# Warmup Iteration   5: 21508.391 ms/op
Iteration   1: 22649.242 ms/op
                 executeQuery·p0.00:   22649.242 ms/op
                 executeQuery·p0.50:   22649.242 ms/op
                 executeQuery·p0.90:   22649.242 ms/op
                 executeQuery·p0.95:   22649.242 ms/op
                 executeQuery·p0.99:   22649.242 ms/op
                 executeQuery·p0.999:  22649.242 ms/op
                 executeQuery·p0.9999: 22649.242 ms/op
                 executeQuery·p1.00:   22649.242 ms/op

Iteration   2: 22548.578 ms/op
                 executeQuery·p0.00:   22548.578 ms/op
                 executeQuery·p0.50:   22548.578 ms/op
                 executeQuery·p0.90:   22548.578 ms/op
                 executeQuery·p0.95:   22548.578 ms/op
                 executeQuery·p0.99:   22548.578 ms/op
                 executeQuery·p0.999:  22548.578 ms/op
                 executeQuery·p0.9999: 22548.578 ms/op
                 executeQuery·p1.00:   22548.578 ms/op

Iteration   3: 22682.796 ms/op
                 executeQuery·p0.00:   22682.796 ms/op
                 executeQuery·p0.50:   22682.796 ms/op
                 executeQuery·p0.90:   22682.796 ms/op
                 executeQuery·p0.95:   22682.796 ms/op
                 executeQuery·p0.99:   22682.796 ms/op
                 executeQuery·p0.999:  22682.796 ms/op
                 executeQuery·p0.9999: 22682.796 ms/op
                 executeQuery·p1.00:   22682.796 ms/op

Iteration   4: 22649.242 ms/op
                 executeQuery·p0.00:   22649.242 ms/op
                 executeQuery·p0.50:   22649.242 ms/op
                 executeQuery·p0.90:   22649.242 ms/op
                 executeQuery·p0.95:   22649.242 ms/op
                 executeQuery·p0.99:   22649.242 ms/op
                 executeQuery·p0.999:  22649.242 ms/op
                 executeQuery·p0.9999: 22649.242 ms/op
                 executeQuery·p1.00:   22649.242 ms/op

Iteration   5: 22582.133 ms/op
                 executeQuery·p0.00:   22582.133 ms/op
                 executeQuery·p0.50:   22582.133 ms/op
                 executeQuery·p0.90:   22582.133 ms/op
                 executeQuery·p0.95:   22582.133 ms/op
                 executeQuery·p0.99:   22582.133 ms/op
                 executeQuery·p0.999:  22582.133 ms/op
                 executeQuery·p0.9999: 22582.133 ms/op
                 executeQuery·p1.00:   22582.133 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 5
  mean =  22622.398 ±(99.9%) 212.307 ms/op

  Histogram, ms/op:
    [22500.000, 22512.500) = 0 
    [22512.500, 22525.000) = 0 
    [22525.000, 22537.500) = 0 
    [22537.500, 22550.000) = 1 
    [22550.000, 22562.500) = 0 
    [22562.500, 22575.000) = 0 
    [22575.000, 22587.500) = 1 
    [22587.500, 22600.000) = 0 
    [22600.000, 22612.500) = 0 
    [22612.500, 22625.000) = 0 
    [22625.000, 22637.500) = 0 
    [22637.500, 22650.000) = 2 
    [22650.000, 22662.500) = 0 
    [22662.500, 22675.000) = 0 
    [22675.000, 22687.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =  22548.578 ms/op
     p(50.0000) =  22649.242 ms/op
     p(90.0000) =  22682.796 ms/op
     p(95.0000) =  22682.796 ms/op
     p(99.0000) =  22682.796 ms/op
     p(99.9000) =  22682.796 ms/op
     p(99.9900) =  22682.796 ms/op
     p(99.9990) =  22682.796 ms/op
     p(99.9999) =  22682.796 ms/op
    p(100.0000) =  22682.796 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 90.63% complete, ETA 00:33:01
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
43.479 ±(99.9%) 2.046 ms/op
# Warmup Iteration   2: 40.633 ±(99.9%) 0.401 ms/op
# Warmup Iteration   3: 40.900 ±(99.9%) 0.326 ms/op
# Warmup Iteration   4: 41.717 ±(99.9%) 0.285 ms/op
# Warmup Iteration   5: 42.491 ±(99.9%) 0.318 ms/op
Iteration   1: 41.857 ±(99.9%) 0.278 ms/op
                 executeQuery·p0.00:   40.239 ms/op
                 executeQuery·p0.50:   42.074 ms/op
                 executeQuery·p0.90:   43.450 ms/op
                 executeQuery·p0.95:   43.850 ms/op
                 executeQuery·p0.99:   44.841 ms/op
                 executeQuery·p0.999:  47.841 ms/op
                 executeQuery·p0.9999: 47.841 ms/op
                 executeQuery·p1.00:   47.841 ms/op

Iteration   2: 41.502 ±(99.9%) 0.247 ms/op
                 executeQuery·p0.00:   40.174 ms/op
                 executeQuery·p0.50:   40.862 ms/op
                 executeQuery·p0.90:   42.795 ms/op
                 executeQuery·p0.95:   43.775 ms/op
                 executeQuery·p0.99:   44.603 ms/op
                 executeQuery·p0.999:  44.761 ms/op
                 executeQuery·p0.9999: 44.761 ms/op
                 executeQuery·p1.00:   44.761 ms/op

Iteration   3: 39.844 ±(99.9%) 0.274 ms/op
                 executeQuery·p0.00:   38.470 ms/op
                 executeQuery·p0.50:   39.911 ms/op
                 executeQuery·p0.90:   41.550 ms/op
                 executeQuery·p0.95:   42.068 ms/op
                 executeQuery·p0.99:   43.809 ms/op
                 executeQuery·p0.999:  47.251 ms/op
                 executeQuery·p0.9999: 47.251 ms/op
                 executeQuery·p1.00:   47.251 ms/op

Iteration   4: 39.553 ±(99.9%) 0.249 ms/op
                 executeQuery·p0.00:   38.076 ms/op
                 executeQuery·p0.50:   39.649 ms/op
                 executeQuery·p0.90:   41.268 ms/op
                 executeQuery·p0.95:   41.638 ms/op
                 executeQuery·p0.99:   42.656 ms/op
                 executeQuery·p0.999:  43.319 ms/op
                 executeQuery·p0.9999: 43.319 ms/op
                 executeQuery·p1.00:   43.319 ms/op

Iteration   5: 39.314 ±(99.9%) 0.229 ms/op
                 executeQuery·p0.00:   38.076 ms/op
                 executeQuery·p0.50:   39.027 ms/op
                 executeQuery·p0.90:   40.731 ms/op
                 executeQuery·p0.95:   41.288 ms/op
                 executeQuery·p0.99:   42.235 ms/op
                 executeQuery·p0.999:  42.598 ms/op
                 executeQuery·p0.9999: 42.598 ms/op
                 executeQuery·p1.00:   42.598 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 1234
  mean =     40.386 ±(99.9%) 0.150 ms/op

  Histogram, ms/op:
    [38.000, 39.000) = 350 
    [39.000, 40.000) = 116 
    [40.000, 41.000) = 421 
    [41.000, 42.000) = 92 
    [42.000, 43.000) = 193 
    [43.000, 44.000) = 42 
    [44.000, 45.000) = 18 
    [45.000, 46.000) = 0 
    [46.000, 47.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     38.076 ms/op
     p(50.0000) =     40.436 ms/op
     p(90.0000) =     42.598 ms/op
     p(95.0000) =     43.057 ms/op
     p(99.0000) =     44.345 ms/op
     p(99.9000) =     47.703 ms/op
     p(99.9900) =     47.841 ms/op
     p(99.9990) =     47.841 ms/op
     p(99.9999) =     47.841 ms/op
    p(100.0000) =     47.841 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 91.67% complete, ETA 00:29:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
407.330 ±(99.9%) 52.503 ms/op
# Warmup Iteration   2: 376.516 ±(99.9%) 3.243 ms/op
# Warmup Iteration   3: 376.769 ±(99.9%) 4.286 ms/op
# Warmup Iteration   4: 386.824 ±(99.9%) 6.364 ms/op
# Warmup Iteration   5: 393.377 ±(99.9%) 1.831 ms/op
Iteration   1: 390.433 ±(99.9%) 2.222 ms/op
                 executeQuery·p0.00:   384.827 ms/op
                 executeQuery·p0.50:   390.857 ms/op
                 executeQuery·p0.90:   394.946 ms/op
                 executeQuery·p0.95:   396.336 ms/op
                 executeQuery·p0.99:   396.886 ms/op
                 executeQuery·p0.999:  396.886 ms/op
                 executeQuery·p0.9999: 396.886 ms/op
                 executeQuery·p1.00:   396.886 ms/op

Iteration   2: 393.115 ±(99.9%) 1.596 ms/op
                 executeQuery·p0.00:   389.546 ms/op
                 executeQuery·p0.50:   392.430 ms/op
                 executeQuery·p0.90:   396.152 ms/op
                 executeQuery·p0.95:   397.227 ms/op
                 executeQuery·p0.99:   397.410 ms/op
                 executeQuery·p0.999:  397.410 ms/op
                 executeQuery·p0.9999: 397.410 ms/op
                 executeQuery·p1.00:   397.410 ms/op

Iteration   3: 392.430 ±(99.9%) 1.575 ms/op
                 executeQuery·p0.00:   388.497 ms/op
                 executeQuery·p0.50:   392.167 ms/op
                 executeQuery·p0.90:   396.362 ms/op
                 executeQuery·p0.95:   396.703 ms/op
                 executeQuery·p0.99:   396.886 ms/op
                 executeQuery·p0.999:  396.886 ms/op
                 executeQuery·p0.9999: 396.886 ms/op
                 executeQuery·p1.00:   396.886 ms/op

Iteration   4: 392.127 ±(99.9%) 1.457 ms/op
                 executeQuery·p0.00:   387.973 ms/op
                 executeQuery·p0.50:   391.643 ms/op
                 executeQuery·p0.90:   394.946 ms/op
                 executeQuery·p0.95:   395.654 ms/op
                 executeQuery·p0.99:   395.837 ms/op
                 executeQuery·p0.999:  395.837 ms/op
                 executeQuery·p0.9999: 395.837 ms/op
                 executeQuery·p1.00:   395.837 ms/op

Iteration   5: 391.845 ±(99.9%) 1.689 ms/op
                 executeQuery·p0.00:   384.827 ms/op
                 executeQuery·p0.50:   391.643 ms/op
                 executeQuery·p0.90:   395.470 ms/op
                 executeQuery·p0.95:   396.519 ms/op
                 executeQuery·p0.99:   396.886 ms/op
                 executeQuery·p0.999:  396.886 ms/op
                 executeQuery·p0.9999: 396.886 ms/op
                 executeQuery·p1.00:   396.886 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 130
  mean =    391.990 ±(99.9%) 0.736 ms/op

  Histogram, ms/op:
    [380.000, 381.250) = 0 
    [381.250, 382.500) = 0 
    [382.500, 383.750) = 0 
    [383.750, 385.000) = 2 
    [385.000, 386.250) = 1 
    [386.250, 387.500) = 2 
    [387.500, 388.750) = 9 
    [388.750, 390.000) = 5 
    [390.000, 391.250) = 28 
    [391.250, 392.500) = 38 
    [392.500, 393.750) = 16 
    [393.750, 395.000) = 11 
    [395.000, 396.250) = 11 
    [396.250, 397.500) = 7 
    [397.500, 398.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    384.827 ms/op
     p(50.0000) =    391.643 ms/op
     p(90.0000) =    395.785 ms/op
     p(95.0000) =    396.362 ms/op
     p(99.0000) =    397.248 ms/op
     p(99.9000) =    397.410 ms/op
     p(99.9900) =    397.410 ms/op
     p(99.9990) =    397.410 ms/op
     p(99.9999) =    397.410 ms/op
    p(100.0000) =    397.410 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 92.71% complete, ETA 00:25:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3928.665 ±(99.9%) 4998.052 ms/op
# Warmup Iteration   2: 3805.632 ±(99.9%) 44.179 ms/op
# Warmup Iteration   3: 3812.622 ±(99.9%) 202.452 ms/op
# Warmup Iteration   4: 3832.196 ±(99.9%) 860.067 ms/op
# Warmup Iteration   5: 3814.020 ±(99.9%) 345.047 ms/op
Iteration   1: 3839.186 ±(99.9%) 983.906 ms/op
                 executeQuery·p0.00:   3800.039 ms/op
                 executeQuery·p0.50:   3816.817 ms/op
                 executeQuery·p0.90:   3900.703 ms/op
                 executeQuery·p0.95:   3900.703 ms/op
                 executeQuery·p0.99:   3900.703 ms/op
                 executeQuery·p0.999:  3900.703 ms/op
                 executeQuery·p0.9999: 3900.703 ms/op
                 executeQuery·p1.00:   3900.703 ms/op

Iteration   2: 3807.030 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   3800.039 ms/op
                 executeQuery·p0.50:   3808.428 ms/op
                 executeQuery·p0.90:   3812.622 ms/op
                 executeQuery·p0.95:   3812.622 ms/op
                 executeQuery·p0.99:   3812.622 ms/op
                 executeQuery·p0.999:  3812.622 ms/op
                 executeQuery·p0.9999: 3812.622 ms/op
                 executeQuery·p1.00:   3812.622 ms/op

Iteration   3: 3818.215 ±(99.9%) 353.429 ms/op
                 executeQuery·p0.00:   3795.845 ms/op
                 executeQuery·p0.50:   3829.400 ms/op
                 executeQuery·p0.90:   3829.400 ms/op
                 executeQuery·p0.95:   3829.400 ms/op
                 executeQuery·p0.99:   3829.400 ms/op
                 executeQuery·p0.999:  3829.400 ms/op
                 executeQuery·p0.9999: 3829.400 ms/op
                 executeQuery·p1.00:   3829.400 ms/op

Iteration   4: 3854.565 ±(99.9%) 501.773 ms/op
                 executeQuery·p0.00:   3825.205 ms/op
                 executeQuery·p0.50:   3858.760 ms/op
                 executeQuery·p0.90:   3879.731 ms/op
                 executeQuery·p0.95:   3879.731 ms/op
                 executeQuery·p0.99:   3879.731 ms/op
                 executeQuery·p0.999:  3879.731 ms/op
                 executeQuery·p0.9999: 3879.731 ms/op
                 executeQuery·p1.00:   3879.731 ms/op

Iteration   5: 3872.741 ±(99.9%) 710.989 ms/op
                 executeQuery·p0.00:   3829.400 ms/op
                 executeQuery·p0.50:   3883.926 ms/op
                 executeQuery·p0.90:   3904.897 ms/op
                 executeQuery·p0.95:   3904.897 ms/op
                 executeQuery·p0.99:   3904.897 ms/op
                 executeQuery·p0.999:  3904.897 ms/op
                 executeQuery·p0.9999: 3904.897 ms/op
                 executeQuery·p1.00:   3904.897 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   3838.347 ±(99.9%) 40.101 ms/op

  Histogram, ms/op:
    [3700.000, 3725.000) = 0 
    [3725.000, 3750.000) = 0 
    [3750.000, 3775.000) = 0 
    [3775.000, 3800.000) = 1 
    [3800.000, 3825.000) = 5 
    [3825.000, 3850.000) = 4 
    [3850.000, 3875.000) = 1 
    [3875.000, 3900.000) = 2 
    [3900.000, 3925.000) = 2 
    [3925.000, 3950.000) = 0 
    [3950.000, 3975.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3795.845 ms/op
     p(50.0000) =   3829.400 ms/op
     p(90.0000) =   3902.380 ms/op
     p(95.0000) =   3904.897 ms/op
     p(99.0000) =   3904.897 ms/op
     p(99.9000) =   3904.897 ms/op
     p(99.9900) =   3904.897 ms/op
     p(99.9990) =   3904.897 ms/op
     p(99.9999) =   3904.897 ms/op
    p(100.0000) =   3904.897 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 93.75% complete, ETA 00:21:38
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
41.753 ±(99.9%) 2.033 ms/op
# Warmup Iteration   2: 40.621 ±(99.9%) 0.267 ms/op
# Warmup Iteration   3: 40.504 ±(99.9%) 0.246 ms/op
# Warmup Iteration   4: 40.131 ±(99.9%) 0.184 ms/op
# Warmup Iteration   5: 39.871 ±(99.9%) 0.143 ms/op
Iteration   1: 40.043 ±(99.9%) 0.178 ms/op
                 executeQuery·p0.00:   38.994 ms/op
                 executeQuery·p0.50:   39.911 ms/op
                 executeQuery·p0.90:   41.353 ms/op
                 executeQuery·p0.95:   41.681 ms/op
                 executeQuery·p0.99:   42.646 ms/op
                 executeQuery·p0.999:  43.188 ms/op
                 executeQuery·p0.9999: 43.188 ms/op
                 executeQuery·p1.00:   43.188 ms/op

Iteration   2: 39.816 ±(99.9%) 0.158 ms/op
                 executeQuery·p0.00:   38.928 ms/op
                 executeQuery·p0.50:   39.453 ms/op
                 executeQuery·p0.90:   41.091 ms/op
                 executeQuery·p0.95:   41.491 ms/op
                 executeQuery·p0.99:   42.110 ms/op
                 executeQuery·p0.999:  42.336 ms/op
                 executeQuery·p0.9999: 42.336 ms/op
                 executeQuery·p1.00:   42.336 ms/op

Iteration   3: 39.840 ±(99.9%) 0.148 ms/op
                 executeQuery·p0.00:   38.928 ms/op
                 executeQuery·p0.50:   39.584 ms/op
                 executeQuery·p0.90:   40.894 ms/op
                 executeQuery·p0.95:   41.396 ms/op
                 executeQuery·p0.99:   41.781 ms/op
                 executeQuery·p0.999:  41.878 ms/op
                 executeQuery·p0.9999: 41.878 ms/op
                 executeQuery·p1.00:   41.878 ms/op

Iteration   4: 39.841 ±(99.9%) 0.158 ms/op
                 executeQuery·p0.00:   38.863 ms/op
                 executeQuery·p0.50:   39.453 ms/op
                 executeQuery·p0.90:   41.045 ms/op
                 executeQuery·p0.95:   41.635 ms/op
                 executeQuery·p0.99:   41.982 ms/op
                 executeQuery·p0.999:  42.402 ms/op
                 executeQuery·p0.9999: 42.402 ms/op
                 executeQuery·p1.00:   42.402 ms/op

Iteration   5: 39.873 ±(99.9%) 0.168 ms/op
                 executeQuery·p0.00:   38.928 ms/op
                 executeQuery·p0.50:   39.584 ms/op
                 executeQuery·p0.90:   41.222 ms/op
                 executeQuery·p0.95:   41.681 ms/op
                 executeQuery·p0.99:   42.110 ms/op
                 executeQuery·p0.999:  42.402 ms/op
                 executeQuery·p0.9999: 42.402 ms/op
                 executeQuery·p1.00:   42.402 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 1225
  mean =     39.882 ±(99.9%) 0.072 ms/op

  Histogram, ms/op:
    [38.000, 38.500) = 0 
    [38.500, 39.000) = 33 
    [39.000, 39.500) = 518 
    [39.500, 40.000) = 247 
    [40.000, 40.500) = 207 
    [40.500, 41.000) = 76 
    [41.000, 41.500) = 74 
    [41.500, 42.000) = 54 
    [42.000, 42.500) = 14 
    [42.500, 43.000) = 1 
    [43.000, 43.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     38.863 ms/op
     p(50.0000) =     39.584 ms/op
     p(90.0000) =     41.091 ms/op
     p(95.0000) =     41.550 ms/op
     p(99.0000) =     42.074 ms/op
     p(99.9000) =     43.144 ms/op
     p(99.9900) =     43.188 ms/op
     p(99.9990) =     43.188 ms/op
     p(99.9999) =     43.188 ms/op
    p(100.0000) =     43.188 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 94.79% complete, ETA 00:17:55
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
394.910 ±(99.9%) 38.050 ms/op
# Warmup Iteration   2: 408.462 ±(99.9%) 13.710 ms/op
# Warmup Iteration   3: 418.032 ±(99.9%) 2.182 ms/op
# Warmup Iteration   4: 416.197 ±(99.9%) 1.516 ms/op
# Warmup Iteration   5: 414.974 ±(99.9%) 1.513 ms/op
Iteration   1: 413.904 ±(99.9%) 1.494 ms/op
                 executeQuery·p0.00:   411.042 ms/op
                 executeQuery·p0.50:   413.139 ms/op
                 executeQuery·p0.90:   417.333 ms/op
                 executeQuery·p0.95:   418.251 ms/op
                 executeQuery·p0.99:   418.382 ms/op
                 executeQuery·p0.999:  418.382 ms/op
                 executeQuery·p0.9999: 418.382 ms/op
                 executeQuery·p1.00:   418.382 ms/op

Iteration   2: 414.384 ±(99.9%) 1.355 ms/op
                 executeQuery·p0.00:   411.566 ms/op
                 executeQuery·p0.50:   414.450 ms/op
                 executeQuery·p0.90:   416.809 ms/op
                 executeQuery·p0.95:   417.202 ms/op
                 executeQuery·p0.99:   417.333 ms/op
                 executeQuery·p0.999:  417.333 ms/op
                 executeQuery·p0.9999: 417.333 ms/op
                 executeQuery·p1.00:   417.333 ms/op

Iteration   3: 414.319 ±(99.9%) 1.477 ms/op
                 executeQuery·p0.00:   410.518 ms/op
                 executeQuery·p0.50:   414.188 ms/op
                 executeQuery·p0.90:   416.809 ms/op
                 executeQuery·p0.95:   417.989 ms/op
                 executeQuery·p0.99:   418.382 ms/op
                 executeQuery·p0.999:  418.382 ms/op
                 executeQuery·p0.9999: 418.382 ms/op
                 executeQuery·p1.00:   418.382 ms/op

Iteration   4: 413.969 ±(99.9%) 1.714 ms/op
                 executeQuery·p0.00:   411.042 ms/op
                 executeQuery·p0.50:   413.139 ms/op
                 executeQuery·p0.90:   417.333 ms/op
                 executeQuery·p0.95:   418.644 ms/op
                 executeQuery·p0.99:   418.906 ms/op
                 executeQuery·p0.999:  418.906 ms/op
                 executeQuery·p0.9999: 418.906 ms/op
                 executeQuery·p1.00:   418.906 ms/op

Iteration   5: 413.423 ±(99.9%) 1.297 ms/op
                 executeQuery·p0.00:   411.042 ms/op
                 executeQuery·p0.50:   412.877 ms/op
                 executeQuery·p0.90:   416.285 ms/op
                 executeQuery·p0.95:   416.678 ms/op
                 executeQuery·p0.99:   416.809 ms/op
                 executeQuery·p0.999:  416.809 ms/op
                 executeQuery·p0.9999: 416.809 ms/op
                 executeQuery·p1.00:   416.809 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 120
  mean =    414.000 ±(99.9%) 0.590 ms/op

  Histogram, ms/op:
    [410.000, 410.500) = 0 
    [410.500, 411.000) = 1 
    [411.000, 411.500) = 3 
    [411.500, 412.000) = 6 
    [412.000, 412.500) = 23 
    [412.500, 413.000) = 7 
    [413.000, 413.500) = 17 
    [413.500, 414.000) = 8 
    [414.000, 414.500) = 9 
    [414.500, 415.000) = 8 
    [415.000, 415.500) = 6 
    [415.500, 416.000) = 9 
    [416.000, 416.500) = 10 
    [416.500, 417.000) = 7 
    [417.000, 417.500) = 1 
    [417.500, 418.000) = 2 
    [418.000, 418.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    410.518 ms/op
     p(50.0000) =    413.663 ms/op
     p(90.0000) =    416.809 ms/op
     p(95.0000) =    417.307 ms/op
     p(99.0000) =    418.796 ms/op
     p(99.9000) =    418.906 ms/op
     p(99.9900) =    418.906 ms/op
     p(99.9990) =    418.906 ms/op
     p(99.9999) =    418.906 ms/op
    p(100.0000) =    418.906 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 95.83% complete, ETA 00:14:15
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3893.712 ±(99.9%) 6145.602 ms/op
# Warmup Iteration   2: 4078.262 ±(99.9%) 3335.710 ms/op
# Warmup Iteration   3: 4184.517 ±(99.9%) 116.886 ms/op
# Warmup Iteration   4: 4188.712 ±(99.9%) 448.365 ms/op
# Warmup Iteration   5: 4171.934 ±(99.9%) 553.557 ms/op
Iteration   1: 4156.555 ±(99.9%) 275.896 ms/op
                 executeQuery·p0.00:   4139.778 ms/op
                 executeQuery·p0.50:   4160.750 ms/op
                 executeQuery·p0.90:   4169.138 ms/op
                 executeQuery·p0.95:   4169.138 ms/op
                 executeQuery·p0.99:   4169.138 ms/op
                 executeQuery·p0.999:  4169.138 ms/op
                 executeQuery·p0.9999: 4169.138 ms/op
                 executeQuery·p1.00:   4169.138 ms/op

Iteration   2: 4174.731 ±(99.9%) 392.669 ms/op
                 executeQuery·p0.00:   4156.555 ms/op
                 executeQuery·p0.50:   4169.138 ms/op
                 executeQuery·p0.90:   4198.498 ms/op
                 executeQuery·p0.95:   4198.498 ms/op
                 executeQuery·p0.99:   4198.498 ms/op
                 executeQuery·p0.999:  4198.498 ms/op
                 executeQuery·p0.9999: 4198.498 ms/op
                 executeQuery·p1.00:   4198.498 ms/op

Iteration   3: 4173.332 ±(99.9%) 426.044 ms/op
                 executeQuery·p0.00:   4152.361 ms/op
                 executeQuery·p0.50:   4169.138 ms/op
                 executeQuery·p0.90:   4198.498 ms/op
                 executeQuery·p0.95:   4198.498 ms/op
                 executeQuery·p0.99:   4198.498 ms/op
                 executeQuery·p0.999:  4198.498 ms/op
                 executeQuery·p0.9999: 4198.498 ms/op
                 executeQuery·p1.00:   4198.498 ms/op

Iteration   4: 4177.527 ±(99.9%) 776.590 ms/op
                 executeQuery·p0.00:   4139.778 ms/op
                 executeQuery·p0.50:   4169.138 ms/op
                 executeQuery·p0.90:   4223.664 ms/op
                 executeQuery·p0.95:   4223.664 ms/op
                 executeQuery·p0.99:   4223.664 ms/op
                 executeQuery·p0.999:  4223.664 ms/op
                 executeQuery·p0.9999: 4223.664 ms/op
                 executeQuery·p1.00:   4223.664 ms/op

Iteration   5: 4095.039 ±(99.9%) 467.543 ms/op
                 executeQuery·p0.00:   4072.669 ms/op
                 executeQuery·p0.50:   4089.446 ms/op
                 executeQuery·p0.90:   4123.001 ms/op
                 executeQuery·p0.95:   4123.001 ms/op
                 executeQuery·p0.99:   4123.001 ms/op
                 executeQuery·p0.999:  4123.001 ms/op
                 executeQuery·p0.9999: 4123.001 ms/op
                 executeQuery·p1.00:   4123.001 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   4155.437 ±(99.9%) 42.284 ms/op

  Histogram, ms/op:
    [4000.000, 4025.000) = 0 
    [4025.000, 4050.000) = 0 
    [4050.000, 4075.000) = 1 
    [4075.000, 4100.000) = 1 
    [4100.000, 4125.000) = 1 
    [4125.000, 4150.000) = 2 
    [4150.000, 4175.000) = 7 
    [4175.000, 4200.000) = 2 
    [4200.000, 4225.000) = 1 
    [4225.000, 4250.000) = 0 
    [4250.000, 4275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4072.669 ms/op
     p(50.0000) =   4160.750 ms/op
     p(90.0000) =   4208.565 ms/op
     p(95.0000) =   4223.664 ms/op
     p(99.0000) =   4223.664 ms/op
     p(99.9000) =   4223.664 ms/op
     p(99.9900) =   4223.664 ms/op
     p(99.9990) =   4223.664 ms/op
     p(99.9999) =   4223.664 ms/op
    p(100.0000) =   4223.664 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 96.88% complete, ETA 00:10:38
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
42.678 ±(99.9%) 2.180 ms/op
# Warmup Iteration   2: 47.312 ±(99.9%) 0.505 ms/op
# Warmup Iteration   3: 47.201 ±(99.9%) 0.094 ms/op
# Warmup Iteration   4: 47.290 ±(99.9%) 0.138 ms/op
# Warmup Iteration   5: 47.408 ±(99.9%) 0.201 ms/op
Iteration   1: 47.413 ±(99.9%) 0.144 ms/op
                 executeQuery·p0.00:   46.662 ms/op
                 executeQuery·p0.50:   47.251 ms/op
                 executeQuery·p0.90:   48.123 ms/op
                 executeQuery·p0.95:   48.693 ms/op
                 executeQuery·p0.99:   50.918 ms/op
                 executeQuery·p0.999:  51.118 ms/op
                 executeQuery·p0.9999: 51.118 ms/op
                 executeQuery·p1.00:   51.118 ms/op

Iteration   2: 47.205 ±(99.9%) 0.137 ms/op
                 executeQuery·p0.00:   46.268 ms/op
                 executeQuery·p0.50:   47.120 ms/op
                 executeQuery·p0.90:   47.841 ms/op
                 executeQuery·p0.95:   48.103 ms/op
                 executeQuery·p0.99:   50.646 ms/op
                 executeQuery·p0.999:  50.790 ms/op
                 executeQuery·p0.9999: 50.790 ms/op
                 executeQuery·p1.00:   50.790 ms/op

Iteration   3: 47.261 ±(99.9%) 0.142 ms/op
                 executeQuery·p0.00:   46.399 ms/op
                 executeQuery·p0.50:   47.186 ms/op
                 executeQuery·p0.90:   47.972 ms/op
                 executeQuery·p0.95:   48.300 ms/op
                 executeQuery·p0.99:   49.983 ms/op
                 executeQuery·p0.999:  50.921 ms/op
                 executeQuery·p0.9999: 50.921 ms/op
                 executeQuery·p1.00:   50.921 ms/op

Iteration   4: 47.199 ±(99.9%) 0.153 ms/op
                 executeQuery·p0.00:   46.334 ms/op
                 executeQuery·p0.50:   47.120 ms/op
                 executeQuery·p0.90:   47.710 ms/op
                 executeQuery·p0.95:   48.103 ms/op
                 executeQuery·p0.99:   50.653 ms/op
                 executeQuery·p0.999:  51.053 ms/op
                 executeQuery·p0.9999: 51.053 ms/op
                 executeQuery·p1.00:   51.053 ms/op

Iteration   5: 47.207 ±(99.9%) 0.150 ms/op
                 executeQuery·p0.00:   46.334 ms/op
                 executeQuery·p0.50:   46.989 ms/op
                 executeQuery·p0.90:   47.907 ms/op
                 executeQuery·p0.95:   48.267 ms/op
                 executeQuery·p0.99:   50.810 ms/op
                 executeQuery·p0.999:  51.511 ms/op
                 executeQuery·p0.9999: 51.511 ms/op
                 executeQuery·p1.00:   51.511 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 1037
  mean =     47.257 ±(99.9%) 0.065 ms/op

  Histogram, ms/op:
    [46.000, 46.500) = 40 
    [46.500, 47.000) = 363 
    [47.000, 47.500) = 389 
    [47.500, 48.000) = 160 
    [48.000, 48.500) = 52 
    [48.500, 49.000) = 16 
    [49.000, 49.500) = 1 
    [49.500, 50.000) = 2 
    [50.000, 50.500) = 4 
    [50.500, 51.000) = 7 
    [51.000, 51.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =     46.268 ms/op
     p(50.0000) =     47.120 ms/op
     p(90.0000) =     47.907 ms/op
     p(95.0000) =     48.234 ms/op
     p(99.0000) =     50.519 ms/op
     p(99.9000) =     51.496 ms/op
     p(99.9900) =     51.511 ms/op
     p(99.9990) =     51.511 ms/op
     p(99.9999) =     51.511 ms/op
    p(100.0000) =     51.511 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 97.92% complete, ETA 00:07:03
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
414.821 ±(99.9%) 52.820 ms/op
# Warmup Iteration   2: 428.758 ±(99.9%) 18.189 ms/op
# Warmup Iteration   3: 441.975 ±(99.9%) 3.486 ms/op
# Warmup Iteration   4: 442.681 ±(99.9%) 3.129 ms/op
# Warmup Iteration   5: 441.291 ±(99.9%) 1.974 ms/op
Iteration   1: 440.903 ±(99.9%) 2.539 ms/op
                 executeQuery·p0.00:   437.780 ms/op
                 executeQuery·p0.50:   439.878 ms/op
                 executeQuery·p0.90:   445.959 ms/op
                 executeQuery·p0.95:   448.686 ms/op
                 executeQuery·p0.99:   449.315 ms/op
                 executeQuery·p0.999:  449.315 ms/op
                 executeQuery·p0.9999: 449.315 ms/op
                 executeQuery·p1.00:   449.315 ms/op

Iteration   2: 440.903 ±(99.9%) 2.367 ms/op
                 executeQuery·p0.00:   437.256 ms/op
                 executeQuery·p0.50:   439.878 ms/op
                 executeQuery·p0.90:   446.274 ms/op
                 executeQuery·p0.95:   447.113 ms/op
                 executeQuery·p0.99:   447.218 ms/op
                 executeQuery·p0.999:  447.218 ms/op
                 executeQuery·p0.9999: 447.218 ms/op
                 executeQuery·p1.00:   447.218 ms/op

Iteration   3: 442.066 ±(99.9%) 2.757 ms/op
                 executeQuery·p0.00:   437.780 ms/op
                 executeQuery·p0.50:   440.402 ms/op
                 executeQuery·p0.90:   447.008 ms/op
                 executeQuery·p0.95:   449.315 ms/op
                 executeQuery·p0.99:   449.839 ms/op
                 executeQuery·p0.999:  449.839 ms/op
                 executeQuery·p0.9999: 449.839 ms/op
                 executeQuery·p1.00:   449.839 ms/op

Iteration   4: 440.516 ±(99.9%) 2.080 ms/op
                 executeQuery·p0.00:   437.780 ms/op
                 executeQuery·p0.50:   439.353 ms/op
                 executeQuery·p0.90:   445.959 ms/op
                 executeQuery·p0.95:   446.169 ms/op
                 executeQuery·p0.99:   446.169 ms/op
                 executeQuery·p0.999:  446.169 ms/op
                 executeQuery·p0.9999: 446.169 ms/op
                 executeQuery·p1.00:   446.169 ms/op

Iteration   5: 440.926 ±(99.9%) 1.992 ms/op
                 executeQuery·p0.00:   438.305 ms/op
                 executeQuery·p0.50:   439.878 ms/op
                 executeQuery·p0.90:   445.645 ms/op
                 executeQuery·p0.95:   446.064 ms/op
                 executeQuery·p0.99:   446.169 ms/op
                 executeQuery·p0.999:  446.169 ms/op
                 executeQuery·p0.9999: 446.169 ms/op
                 executeQuery·p1.00:   446.169 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 115
  mean =    441.063 ±(99.9%) 0.940 ms/op

  Histogram, ms/op:
    [430.000, 431.250) = 0 
    [431.250, 432.500) = 0 
    [432.500, 433.750) = 0 
    [433.750, 435.000) = 0 
    [435.000, 436.250) = 0 
    [436.250, 437.500) = 1 
    [437.500, 438.750) = 16 
    [438.750, 440.000) = 45 
    [440.000, 441.250) = 16 
    [441.250, 442.500) = 8 
    [442.500, 443.750) = 3 
    [443.750, 445.000) = 4 
    [445.000, 446.250) = 16 
    [446.250, 447.500) = 4 
    [447.500, 448.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    437.256 ms/op
     p(50.0000) =    439.878 ms/op
     p(90.0000) =    446.169 ms/op
     p(95.0000) =    446.693 ms/op
     p(99.0000) =    449.755 ms/op
     p(99.9000) =    449.839 ms/op
     p(99.9900) =    449.839 ms/op
     p(99.9990) =    449.839 ms/op
     p(99.9999) =    449.839 ms/op
    p(100.0000) =    449.839 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 98.96% complete, ETA 00:03:30
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4083.854 ±(99.9%) 3933.391 ms/op
# Warmup Iteration   2: 4328.522 ±(99.9%) 701.315 ms/op
# Warmup Iteration   3: 4345.299 ±(99.9%) 153.039 ms/op
# Warmup Iteration   4: 4350.891 ±(99.9%) 353.429 ms/op
# Warmup Iteration   5: 4384.446 ±(99.9%) 706.859 ms/op
Iteration   1: 4364.872 ±(99.9%) 176.715 ms/op
                 executeQuery·p0.00:   4353.688 ms/op
                 executeQuery·p0.50:   4370.465 ms/op
                 executeQuery·p0.90:   4370.465 ms/op
                 executeQuery·p0.95:   4370.465 ms/op
                 executeQuery·p0.99:   4370.465 ms/op
                 executeQuery·p0.999:  4370.465 ms/op
                 executeQuery·p0.9999: 4370.465 ms/op
                 executeQuery·p1.00:   4370.465 ms/op

Iteration   2: 4387.242 ±(99.9%) 852.088 ms/op
                 executeQuery·p0.00:   4336.910 ms/op
                 executeQuery·p0.50:   4395.631 ms/op
                 executeQuery·p0.90:   4429.185 ms/op
                 executeQuery·p0.95:   4429.185 ms/op
                 executeQuery·p0.99:   4429.185 ms/op
                 executeQuery·p0.999:  4429.185 ms/op
                 executeQuery·p0.9999: 4429.185 ms/op
                 executeQuery·p1.00:   4429.185 ms/op

Iteration   3: 4376.057 ±(99.9%) 983.906 ms/op
                 executeQuery·p0.00:   4336.910 ms/op
                 executeQuery·p0.50:   4353.688 ms/op
                 executeQuery·p0.90:   4437.574 ms/op
                 executeQuery·p0.95:   4437.574 ms/op
                 executeQuery·p0.99:   4437.574 ms/op
                 executeQuery·p0.999:  4437.574 ms/op
                 executeQuery·p0.9999: 4437.574 ms/op
                 executeQuery·p1.00:   4437.574 ms/op

Iteration   4: 4373.261 ±(99.9%) 1018.987 ms/op
                 executeQuery·p0.00:   4336.910 ms/op
                 executeQuery·p0.50:   4345.299 ms/op
                 executeQuery·p0.90:   4437.574 ms/op
                 executeQuery·p0.95:   4437.574 ms/op
                 executeQuery·p0.99:   4437.574 ms/op
                 executeQuery·p0.999:  4437.574 ms/op
                 executeQuery·p0.9999: 4437.574 ms/op
                 executeQuery·p1.00:   4437.574 ms/op

Iteration   5: 4283.782 ±(99.9%) 710.989 ms/op
                 executeQuery·p0.00:   4257.219 ms/op
                 executeQuery·p0.50:   4265.607 ms/op
                 executeQuery·p0.90:   4328.522 ms/op
                 executeQuery·p0.95:   4328.522 ms/op
                 executeQuery·p0.99:   4328.522 ms/op
                 executeQuery·p0.999:  4328.522 ms/op
                 executeQuery·p0.9999: 4328.522 ms/op
                 executeQuery·p1.00:   4328.522 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 15
  mean =   4357.043 ±(99.9%) 57.528 ms/op

  Histogram, ms/op:
    [4200.000, 4225.000) = 0 
    [4225.000, 4250.000) = 0 
    [4250.000, 4275.000) = 2 
    [4275.000, 4300.000) = 0 
    [4300.000, 4325.000) = 0 
    [4325.000, 4350.000) = 5 
    [4350.000, 4375.000) = 4 
    [4375.000, 4400.000) = 1 
    [4400.000, 4425.000) = 0 
    [4425.000, 4450.000) = 3 
    [4450.000, 4475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4257.219 ms/op
     p(50.0000) =   4353.688 ms/op
     p(90.0000) =   4437.574 ms/op
     p(95.0000) =   4437.574 ms/op
     p(99.0000) =   4437.574 ms/op
     p(99.9000) =   4437.574 ms/op
     p(99.9900) =   4437.574 ms/op
     p(99.9990) =   4437.574 ms/op
     p(99.9999) =   4437.574 ms/op
    p(100.0000) =   4437.574 ms/op


# Run complete. Total time: 05:35:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                                                            (tableFilePath)                     (tpchInstance)    Mode   Cnt       Score       Error  Units
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   130     395.882 ±     0.702  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           390.595              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           396.362              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           397.935              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           398.983              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           405.311              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           405.799              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           405.799              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           405.799              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample    95     538.273 ±     0.861  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           534.249              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           537.919              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           540.017              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           543.582              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           550.502              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           550.502              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           550.502              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           550.502              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample    70     725.899 ±     3.788  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           708.837              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           725.615              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           739.246              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           740.295              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           758.120              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           758.120              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           758.120              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           758.120              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample     5    2038.432 ±   101.345  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          1998.586              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2038.432              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2067.792              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2067.792              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2067.792              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2067.792              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2067.792              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2067.792              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample     5    5086.852 ±   538.865  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          4907.336              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5167.383              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5217.714              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5217.714              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5217.714              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5217.714              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5217.714              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5217.714              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    15    3905.177 ±     4.631  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3900.703              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3904.897              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3912.447              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3917.480              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3917.480              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3917.480              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3917.480              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3917.480              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    10    5113.695 ±    27.527  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5091.885              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5108.662              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5149.766              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5150.605              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5150.605              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5150.605              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5150.605              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5150.605              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    10    7294.734 ±   101.494  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7205.814              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7289.700              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7406.302              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7407.141              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7407.141              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7407.141              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7407.141              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7407.141              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample     5   21629.187 ±  4985.416  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         20602.421              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         21005.074              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         23823.647              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         23823.647              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         23823.647              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         23823.647              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         23823.647              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         23823.647              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample     5   50036.369 ±  6310.237  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         48251.273              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         49593.450              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         52344.914              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         52344.914              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         52344.914              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         52344.914              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         52344.914              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         52344.914              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    10    7326.610 ±    55.828  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7281.312              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7323.255              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7408.819              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7415.529              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7415.529              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7415.529              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7415.529              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7415.529              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample     5   12864.769 ±   355.023  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12801.016              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12801.016              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13002.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13002.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13002.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13002.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13002.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13002.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample     5   14441.828 ±   459.999  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14260.634              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14512.292              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14529.069              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14529.069              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14529.069              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14529.069              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14529.069              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14529.069              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample     5   48761.301 ±  1650.606  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         48184.164              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         48721.035              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49392.124              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49392.124              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49392.124              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49392.124              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49392.124              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49392.124              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample     5   99160.057 ±  2792.767  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         97978.941              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99321.119              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99857.990              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99857.990              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99857.990              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99857.990              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99857.990              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99857.990              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   120     427.753 ±     0.723  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           424.673              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           427.295              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           428.868              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           429.392              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           446.484              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           450.888              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           450.888              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           450.888              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample    95     535.353 ±     0.805  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           533.201              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           534.774              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           538.339              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           539.178              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           548.405              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           548.405              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           548.405              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           548.405              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample    69     752.042 ±     6.329  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           719.323              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           752.878              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           773.849              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           776.471              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           783.286              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           783.286              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           783.286              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           783.286              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample     5    2285.896 ±   401.502  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2197.815              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2243.953              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2457.862              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2457.862              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2457.862              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2457.862              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2457.862              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2457.862              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample     5    5056.653 ±   343.674  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          4966.056              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5058.331              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5175.771              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5175.771              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5175.771              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5175.771              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5175.771              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5175.771              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    15    3874.698 ±    92.209  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3829.400              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3841.982              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4085.252              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4085.252              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4085.252              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4085.252              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4085.252              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4085.252              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    10    5361.998 ±   280.023  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5242.880              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5259.657              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5767.168              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5788.140              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5788.140              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5788.140              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5788.140              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5788.140              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    10    7079.985 ±   239.216  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          6752.829              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7138.705              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7220.914              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7222.591              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7222.591              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7222.591              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7222.591              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7222.591              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample     5   25789.936 ±  5750.473  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24763.171              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         25232.933              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         28387.049              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         28387.049              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         28387.049              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         28387.049              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         28387.049              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         28387.049              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample     5   50694.036 ±  2810.643  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         49593.450              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         50734.301              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51472.499              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51472.499              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51472.499              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51472.499              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51472.499              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51472.499              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    10    8191.476 ±    14.946  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8178.893              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8195.670              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8204.059              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8204.059              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8204.059              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8204.059              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8204.059              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8204.059              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample     5   12532.580 ±   332.565  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12465.471              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12499.026              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12683.575              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12683.575              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12683.575              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12683.575              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12683.575              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12683.575              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample     5   15062.585 ±  1928.053  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14562.623              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15166.603              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15787.360              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15787.360              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15787.360              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15787.360              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15787.360              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15787.360              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample     5   52854.941 ± 12280.161  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         50734.301              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51808.043              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         58451.821              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         58451.821              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         58451.821              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         58451.821              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         58451.821              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         58451.821              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample     5  102998.684 ±  8274.039  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        100529.078              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102810.780              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        106434.658              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        106434.658              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        106434.658              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        106434.658              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        106434.658              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        106434.658              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample   655      75.664 ±     0.228  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            72.090              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            75.366              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            78.119              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            78.512              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            79.807              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            89.915              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            89.915              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            89.915              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample   653      75.980 ±     0.215  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            73.400              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            75.629              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            77.988              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            78.643              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            80.135              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            90.702              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            90.702              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            90.702              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample   649      76.440 ±     0.214  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            73.794              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            75.891              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            78.643              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            79.167              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            80.413              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            89.129              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            89.129              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            89.129              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample    70     748.893 ±     4.896  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           719.323              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           753.402              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           758.120              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           759.169              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           760.218              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           760.218              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           760.218              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           760.218              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample    70     747.575 ±     6.771  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           708.837              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           746.586              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           765.460              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           766.509              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           767.558              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           767.558              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           767.558              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           767.558              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample    70     757.881 ±     6.121  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           721.420              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           762.315              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           770.703              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           771.752              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           772.801              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           772.801              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           772.801              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           772.801              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    35    1476.755 ±    15.548  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1409.286              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1488.978              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1495.269              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1501.141              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1516.241              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1516.241              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1516.241              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1516.241              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    37    1451.739 ±    22.162  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1411.383              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1430.258              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1516.241              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1519.596              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1530.921              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1530.921              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1530.921              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1530.921              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    35    1508.991 ±    20.320  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1455.423              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1528.824              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1539.310              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1540.148              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1543.504              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1543.504              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1543.504              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1543.504              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample   649      76.019 ±     0.247  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            72.090              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            75.891              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            78.381              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            78.905              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            80.216              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            87.163              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            87.163              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            87.163              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample   654      75.827 ±     0.256  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            72.745              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            75.104              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            78.905              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            79.561              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            80.609              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            90.571              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            90.571              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            90.571              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample   446     111.684 ±     0.163  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           110.887              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           111.411              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           112.329              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           112.460              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           113.540              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           128.319              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           128.319              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           128.319              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample    67     765.633 ±     5.999  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           730.857              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           771.752              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           780.141              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           782.238              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           784.335              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           784.335              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           784.335              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           784.335              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample    70     746.376 ±     8.133  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           714.080              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           753.926              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           767.558              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           772.224              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           775.946              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           775.946              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           775.946              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           775.946              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample    47    1109.215 ±     1.323  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1105.199              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1109.393              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1111.491              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1111.491              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1121.976              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1121.976              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1121.976              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1121.976              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    35    1478.133 ±    22.901  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1428.161              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1459.618              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1522.532              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1523.791              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1528.824              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1528.824              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1528.824              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1528.824              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    38    1445.986 ±    20.903  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1396.703              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1429.209              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1493.382              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1495.269              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1495.269              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1495.269              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1495.269              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1495.269              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    25    2266.602 ±    30.095  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2243.953              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2256.536              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2302.673              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2408.789              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2432.696              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2432.696              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2432.696              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2432.696              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    15    4324.327 ±    96.469  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4215.276              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4282.384              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4467.773              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4538.237              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4538.237              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4538.237              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4538.237              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4538.237              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   48412.334 ±  1164.290  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         47915.729              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48452.600              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48653.926              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48653.926              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48653.926              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                           /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48653.926              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48653.926              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48653.926              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    15    4471.687 ±   113.511  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4370.465              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4429.185              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4655.677              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4731.175              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4731.175              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4731.175              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4731.175              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4731.175              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   50814.832 ±   883.906  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50465.866              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50868.519              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51069.846              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51069.846              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51069.846              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                              /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51069.846              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                             /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51069.846              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51069.846              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    30    1799.217 ±     6.602  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1790.968              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1797.259              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1801.244              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1825.466              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1849.688              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1849.688              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1849.688              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1849.688              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   23501.524 ±    70.769  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23488.102              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23488.102              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23521.657              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23521.657              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23521.657              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23521.657              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23521.657              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23521.657              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    40    1342.806 ±     4.192  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1329.594              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1344.274              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1354.550              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1356.752              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1361.052              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1361.052              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1361.052              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1361.052              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   17112.760 ±    79.122  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17079.206              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17112.760              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17129.538              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17129.538              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17129.538              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17129.538              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17129.538              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17129.538              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    30    1973.490 ±     6.195  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1967.129              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1971.323              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1973.420              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1996.279              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2021.655              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2021.655              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2021.655              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2021.655              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   26004.685 ±     0.001  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26004.685              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26004.685              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26004.685              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26004.685              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26004.685              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26004.685              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26004.685              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26004.685              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    46    1090.291 ±     3.255  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1082.130              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1090.519              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1094.713              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1096.810              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1117.782              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                           /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1117.782              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1117.782              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1117.782              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   11327.976 ±    70.769  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         11307.844              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         11324.621              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         11358.175              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         11358.175              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         11358.175              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                      /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         11358.175              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                     /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         11358.175              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         11358.175              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   140     362.440 ±     1.827  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           354.419              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           360.710              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           369.571              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           371.720              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           402.480              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           405.275              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           405.275              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           405.275              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    4375.218 ±   309.193  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4135.584              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4248.830              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4922.435              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4932.502              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4932.502              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4932.502              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4932.502              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4932.502              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   180     277.835 ±     1.755  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           272.105              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           275.775              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           279.970              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           281.516              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           310.950              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           315.621              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           315.621              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           315.621              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    3514.547 ±   128.686  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3200.254              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3514.827              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3650.722              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3678.405              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3678.405              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3678.405              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3678.405              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3678.405              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   160     313.639 ±     1.567  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           305.660              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           313.000              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           317.666              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           319.816              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           352.909              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           355.467              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           355.467              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           355.467              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    3851.210 ±   108.812  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3623.879              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3875.537              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3991.300              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4039.115              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4039.115              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4039.115              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4039.115              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4039.115              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   200     254.039 ±     1.324  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           249.299              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           253.624              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           256.115              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           257.674              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           275.770              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           317.719              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           317.719              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           317.719              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20    2511.759 ±     7.311  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2495.611              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2512.388              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2520.777              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2532.730              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2533.360              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2533.360              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2533.360              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2533.360              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   23816.936 ±  6994.101  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22481.469              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22615.687              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         26340.229              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         26340.229              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         26340.229              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         26340.229              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         26340.229              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         26340.229              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   145     348.265 ±     2.398  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           343.409              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           346.030              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           351.692              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           364.066              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           397.777              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           398.983              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           398.983              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           398.983              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    3565.997 ±    88.230  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3464.495              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3565.158              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3686.793              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3812.622              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3812.622              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3812.622              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3812.622              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3812.622              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   34816.079 ±  1500.128  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34426.847              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34628.174              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35299.262              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35299.262              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35299.262              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35299.262              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35299.262              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35299.262              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   114     451.647 ±     1.135  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           446.693              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           449.839              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           456.131              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           457.179              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           459.040              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           459.276              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           459.276              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           459.276              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    14    4667.062 ±   408.831  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4429.185              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4466.934              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5309.989              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5318.377              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5318.377              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5318.377              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5318.377              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5318.377              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   43781.823 ±   231.131  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43754.979              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43754.979              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43889.197              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43889.197              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43889.197              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43889.197              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43889.197              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43889.197              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   121     416.961 ±     1.680  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           407.896              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           415.760              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           424.149              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           429.811              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           433.880              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           434.110              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           434.110              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           434.110              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    4177.527 ±    37.706  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4131.389              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4173.332              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4239.602              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4257.219              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4257.219              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4257.219              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4257.219              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4257.219              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   41164.577 ±   868.665  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         41003.516              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         41070.625              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         41540.387              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         41540.387              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         41540.387              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         41540.387              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         41540.387              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         41540.387              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   404     123.913 ±     0.352  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           118.882              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           124.387              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           125.567              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           126.550              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           129.309              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           142.868              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           142.868              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           142.868              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    1906.521 ±     9.793  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1860.174              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1908.408              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1928.541              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1931.267              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1933.574              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1933.574              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1933.574              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1933.574              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   25293.331 ± 18580.863  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22984.786              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         23152.558              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33923.531              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33923.531              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33923.531              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33923.531              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33923.531              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33923.531              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   386     126.375 ±     0.217  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           124.387              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           126.222              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           127.664              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           128.405              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           131.305              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           135.528              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           135.528              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           135.528              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    1846.472 ±     7.189  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1826.619              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1849.688              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1860.174              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1863.215              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1864.368              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1864.368              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1864.368              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1864.368              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   22152.636 ±   231.131  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22078.816              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22145.925              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22246.588              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22246.588              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22246.588              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22246.588              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22246.588              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22246.588              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   334     146.678 ±     0.195  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           143.655              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           146.538              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           147.849              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           148.374              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           150.549              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           155.189              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           155.189              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           155.189              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    25    2018.635 ±     6.494  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2004.877              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2019.557              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2028.785              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2031.511              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2032.140              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2032.140              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2032.140              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2032.140              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   22622.398 ±   212.307  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22548.578              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22649.242              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22682.796              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22682.796              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22682.796              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22682.796              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22682.796              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22682.796              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1234      40.386 ±     0.150  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            38.076              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            40.436              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            42.598              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            43.057              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            44.345              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            47.703              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            47.841              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            47.841              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   130     391.990 ±     0.736  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           384.827              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           391.643              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           395.785              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           396.362              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           397.248              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           397.410              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           397.410              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           397.410              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15    3838.347 ±    40.101  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3795.845              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3829.400              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3902.380              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3904.897              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3904.897              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3904.897              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3904.897              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3904.897              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1225      39.882 ±     0.072  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            38.863              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            39.584              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            41.091              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            41.550              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            42.074              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            43.144              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            43.188              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            43.188              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   120     414.000 ±     0.590  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           410.518              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           413.663              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           416.809              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           417.307              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           418.796              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           418.906              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           418.906              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           418.906              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15    4155.437 ±    42.284  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4072.669              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4160.750              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4208.565              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4223.664              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4223.664              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4223.664              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4223.664              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4223.664              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1037      47.257 ±     0.065  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            46.268              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            47.120              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            47.907              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            48.234              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            50.519              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            51.496              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            51.511              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            51.511              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   115     441.063 ±     0.940  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           437.256              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           439.878              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           446.169              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           446.693              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           449.755              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           449.839              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           449.839              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           449.839              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15    4357.043 ±    57.528  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4257.219              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4353.688              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4437.574              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4437.574              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4437.574              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4437.574              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4437.574              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4437.574              ms/op

Benchmark result is saved to jmh-result.csv

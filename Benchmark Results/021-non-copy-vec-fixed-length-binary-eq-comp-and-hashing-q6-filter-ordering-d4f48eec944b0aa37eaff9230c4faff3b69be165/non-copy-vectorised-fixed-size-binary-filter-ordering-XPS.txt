# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 0.00% complete, ETA 02:50:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

331.333 ±(99.9%) 17.047 ms/op
# Warmup Iteration   2: 324.416 ±(99.9%) 6.040 ms/op
# Warmup Iteration   3: 321.733 ±(99.9%) 0.565 ms/op
# Warmup Iteration   4: 322.217 ±(99.9%) 0.941 ms/op
# Warmup Iteration   5: 322.792 ±(99.9%) 0.888 ms/op
Iteration   1: 322.200 ±(99.9%) 0.697 ms/op
                 executeQuery·p0.00:   321.389 ms/op
                 executeQuery·p0.50:   321.913 ms/op
                 executeQuery·p0.90:   322.857 ms/op
                 executeQuery·p0.95:   324.849 ms/op
                 executeQuery·p0.99:   327.680 ms/op
                 executeQuery·p0.999:  327.680 ms/op
                 executeQuery·p0.9999: 327.680 ms/op
                 executeQuery·p1.00:   327.680 ms/op

Iteration   2: 322.640 ±(99.9%) 1.195 ms/op
                 executeQuery·p0.00:   320.864 ms/op
                 executeQuery·p0.50:   321.913 ms/op
                 executeQuery·p0.90:   325.059 ms/op
                 executeQuery·p0.95:   328.729 ms/op
                 executeQuery·p0.99:   328.729 ms/op
                 executeQuery·p0.999:  328.729 ms/op
                 executeQuery·p0.9999: 328.729 ms/op
                 executeQuery·p1.00:   328.729 ms/op

Iteration   3: 322.961 ±(99.9%) 0.855 ms/op
                 executeQuery·p0.00:   321.389 ms/op
                 executeQuery·p0.50:   322.961 ms/op
                 executeQuery·p0.90:   323.381 ms/op
                 executeQuery·p0.95:   327.156 ms/op
                 executeQuery·p0.99:   328.729 ms/op
                 executeQuery·p0.999:  328.729 ms/op
                 executeQuery·p0.9999: 328.729 ms/op
                 executeQuery·p1.00:   328.729 ms/op

Iteration   4: 323.604 ±(99.9%) 1.886 ms/op
                 executeQuery·p0.00:   321.389 ms/op
                 executeQuery·p0.50:   322.961 ms/op
                 executeQuery·p0.90:   327.785 ms/op
                 executeQuery·p0.95:   332.923 ms/op
                 executeQuery·p0.99:   334.496 ms/op
                 executeQuery·p0.999:  334.496 ms/op
                 executeQuery·p0.9999: 334.496 ms/op
                 executeQuery·p1.00:   334.496 ms/op

Iteration   5: 323.706 ±(99.9%) 1.646 ms/op
                 executeQuery·p0.00:   321.389 ms/op
                 executeQuery·p0.50:   323.486 ms/op
                 executeQuery·p0.90:   324.429 ms/op
                 executeQuery·p0.95:   331.874 ms/op
                 executeQuery·p0.99:   335.020 ms/op
                 executeQuery·p0.999:  335.020 ms/op
                 executeQuery·p0.9999: 335.020 ms/op
                 executeQuery·p1.00:   335.020 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 155
  mean =    323.022 ±(99.9%) 0.564 ms/op

  Histogram, ms/op:
    [320.000, 321.250) = 1 
    [321.250, 322.500) = 81 
    [322.500, 323.750) = 58 
    [323.750, 325.000) = 4 
    [325.000, 326.250) = 2 
    [326.250, 327.500) = 0 
    [327.500, 328.750) = 5 
    [328.750, 330.000) = 1 
    [330.000, 331.250) = 0 
    [331.250, 332.500) = 1 
    [332.500, 333.750) = 0 
    [333.750, 335.000) = 1 
    [335.000, 336.250) = 1 
    [336.250, 337.500) = 0 
    [337.500, 338.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    320.864 ms/op
     p(50.0000) =    322.437 ms/op
     p(90.0000) =    323.695 ms/op
     p(95.0000) =    328.729 ms/op
     p(99.0000) =    334.726 ms/op
     p(99.9000) =    335.020 ms/op
     p(99.9900) =    335.020 ms/op
     p(99.9990) =    335.020 ms/op
     p(99.9999) =    335.020 ms/op
    p(100.0000) =    335.020 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 0.98% complete, ETA 02:52:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

434.065 ±(99.9%) 13.113 ms/op
# Warmup Iteration   2: 498.348 ±(99.9%) 100.032 ms/op
# Warmup Iteration   3: 434.703 ±(99.9%) 26.899 ms/op
# Warmup Iteration   4: 426.880 ±(99.9%) 1.972 ms/op
# Warmup Iteration   5: 425.853 ±(99.9%) 2.193 ms/op
Iteration   1: 425.569 ±(99.9%) 2.125 ms/op
                 executeQuery·p0.00:   419.955 ms/op
                 executeQuery·p0.50:   425.460 ms/op
                 executeQuery·p0.90:   428.081 ms/op
                 executeQuery·p0.95:   433.455 ms/op
                 executeQuery·p0.99:   435.159 ms/op
                 executeQuery·p0.999:  435.159 ms/op
                 executeQuery·p0.9999: 435.159 ms/op
                 executeQuery·p1.00:   435.159 ms/op

Iteration   2: 427.098 ±(99.9%) 1.401 ms/op
                 executeQuery·p0.00:   424.149 ms/op
                 executeQuery·p0.50:   426.770 ms/op
                 executeQuery·p0.90:   430.178 ms/op
                 executeQuery·p0.95:   431.227 ms/op
                 executeQuery·p0.99:   431.489 ms/op
                 executeQuery·p0.999:  431.489 ms/op
                 executeQuery·p0.9999: 431.489 ms/op
                 executeQuery·p1.00:   431.489 ms/op

Iteration   3: 428.889 ±(99.9%) 2.152 ms/op
                 executeQuery·p0.00:   424.673 ms/op
                 executeQuery·p0.50:   428.868 ms/op
                 executeQuery·p0.90:   433.062 ms/op
                 executeQuery·p0.95:   435.028 ms/op
                 executeQuery·p0.99:   435.159 ms/op
                 executeQuery·p0.999:  435.159 ms/op
                 executeQuery·p0.9999: 435.159 ms/op
                 executeQuery·p1.00:   435.159 ms/op

Iteration   4: 425.787 ±(99.9%) 2.355 ms/op
                 executeQuery·p0.00:   422.576 ms/op
                 executeQuery·p0.50:   424.935 ms/op
                 executeQuery·p0.90:   430.965 ms/op
                 executeQuery·p0.95:   434.897 ms/op
                 executeQuery·p0.99:   435.683 ms/op
                 executeQuery·p0.999:  435.683 ms/op
                 executeQuery·p0.9999: 435.683 ms/op
                 executeQuery·p1.00:   435.683 ms/op

Iteration   5: 426.093 ±(99.9%) 2.584 ms/op
                 executeQuery·p0.00:   421.003 ms/op
                 executeQuery·p0.50:   425.722 ms/op
                 executeQuery·p0.90:   432.275 ms/op
                 executeQuery·p0.95:   435.159 ms/op
                 executeQuery·p0.99:   435.159 ms/op
                 executeQuery·p0.999:  435.159 ms/op
                 executeQuery·p0.9999: 435.159 ms/op
                 executeQuery·p1.00:   435.159 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 120
  mean =    426.687 ±(99.9%) 0.930 ms/op

  Histogram, ms/op:
    [410.000, 412.500) = 0 
    [412.500, 415.000) = 0 
    [415.000, 417.500) = 0 
    [417.500, 420.000) = 1 
    [420.000, 422.500) = 2 
    [422.500, 425.000) = 33 
    [425.000, 427.500) = 51 
    [427.500, 430.000) = 18 
    [430.000, 432.500) = 8 
    [432.500, 435.000) = 2 
    [435.000, 437.500) = 5 

  Percentiles, ms/op:
      p(0.0000) =    419.955 ms/op
     p(50.0000) =    426.246 ms/op
     p(90.0000) =    430.965 ms/op
     p(95.0000) =    434.530 ms/op
     p(99.0000) =    435.573 ms/op
     p(99.9000) =    435.683 ms/op
     p(99.9900) =    435.683 ms/op
     p(99.9990) =    435.683 ms/op
     p(99.9999) =    435.683 ms/op
    p(100.0000) =    435.683 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 1.96% complete, ETA 02:51:54
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

635.044 ±(99.9%) 33.477 ms/op
# Warmup Iteration   2: 617.415 ±(99.9%) 3.290 ms/op
# Warmup Iteration   3: 619.119 ±(99.9%) 4.884 ms/op
# Warmup Iteration   4: 620.626 ±(99.9%) 4.511 ms/op
# Warmup Iteration   5: 619.381 ±(99.9%) 5.384 ms/op
Iteration   1: 617.546 ±(99.9%) 4.487 ms/op
                 executeQuery·p0.00:   613.417 ms/op
                 executeQuery·p0.50:   616.038 ms/op
                 executeQuery·p0.90:   626.314 ms/op
                 executeQuery·p0.95:   627.048 ms/op
                 executeQuery·p0.99:   627.048 ms/op
                 executeQuery·p0.999:  627.048 ms/op
                 executeQuery·p0.9999: 627.048 ms/op
                 executeQuery·p1.00:   627.048 ms/op

Iteration   2: 628.163 ±(99.9%) 8.563 ms/op
                 executeQuery·p0.00:   616.563 ms/op
                 executeQuery·p0.50:   626.000 ms/op
                 executeQuery·p0.90:   641.309 ms/op
                 executeQuery·p0.95:   650.117 ms/op
                 executeQuery·p0.99:   650.117 ms/op
                 executeQuery·p0.999:  650.117 ms/op
                 executeQuery·p0.9999: 650.117 ms/op
                 executeQuery·p1.00:   650.117 ms/op

Iteration   3: 608.482 ±(99.9%) 33.624 ms/op
                 executeQuery·p0.00:   535.822 ms/op
                 executeQuery·p0.50:   624.951 ms/op
                 executeQuery·p0.90:   627.048 ms/op
                 executeQuery·p0.95:   627.048 ms/op
                 executeQuery·p0.99:   627.048 ms/op
                 executeQuery·p0.999:  627.048 ms/op
                 executeQuery·p0.9999: 627.048 ms/op
                 executeQuery·p1.00:   627.048 ms/op

Iteration   4: 534.857 ±(99.9%) 2.105 ms/op
                 executeQuery·p0.00:   531.628 ms/op
                 executeQuery·p0.50:   534.774 ms/op
                 executeQuery·p0.90:   537.919 ms/op
                 executeQuery·p0.95:   537.919 ms/op
                 executeQuery·p0.99:   537.919 ms/op
                 executeQuery·p0.999:  537.919 ms/op
                 executeQuery·p0.9999: 537.919 ms/op
                 executeQuery·p1.00:   537.919 ms/op

Iteration   5: 537.285 ±(99.9%) 3.091 ms/op
                 executeQuery·p0.00:   532.152 ms/op
                 executeQuery·p0.50:   537.919 ms/op
                 executeQuery·p0.90:   542.114 ms/op
                 executeQuery·p0.95:   547.357 ms/op
                 executeQuery·p0.99:   547.357 ms/op
                 executeQuery·p0.999:  547.357 ms/op
                 executeQuery·p0.9999: 547.357 ms/op
                 executeQuery·p1.00:   547.357 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 87
  mean =    582.140 ±(99.9%) 16.107 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 27 
    [537.500, 550.000) = 14 
    [550.000, 562.500) = 0 
    [562.500, 575.000) = 0 
    [575.000, 587.500) = 0 
    [587.500, 600.000) = 0 
    [600.000, 612.500) = 1 
    [612.500, 625.000) = 26 
    [625.000, 637.500) = 17 
    [637.500, 650.000) = 1 
    [650.000, 662.500) = 1 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    531.628 ms/op
     p(50.0000) =    613.417 ms/op
     p(90.0000) =    627.048 ms/op
     p(95.0000) =    633.759 ms/op
     p(99.0000) =    650.117 ms/op
     p(99.9000) =    650.117 ms/op
     p(99.9900) =    650.117 ms/op
     p(99.9990) =    650.117 ms/op
     p(99.9999) =    650.117 ms/op
    p(100.0000) =    650.117 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 2.94% complete, ETA 02:50:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

1012.400 ms/op
# Warmup Iteration   2: 912.785 ms/op
# Warmup Iteration   3: 805.306 ms/op
# Warmup Iteration   4: 799.539 ms/op
# Warmup Iteration   5: 799.539 ms/op
Iteration   1: 721.945 ms/op
                 executeQuery·p0.00:   718.275 ms/op
                 executeQuery·p0.50:   721.945 ms/op
                 executeQuery·p0.90:   725.615 ms/op
                 executeQuery·p0.95:   725.615 ms/op
                 executeQuery·p0.99:   725.615 ms/op
                 executeQuery·p0.999:  725.615 ms/op
                 executeQuery·p0.9999: 725.615 ms/op
                 executeQuery·p1.00:   725.615 ms/op

Iteration   2: 716.177 ms/op
                 executeQuery·p0.00:   716.177 ms/op
                 executeQuery·p0.50:   716.177 ms/op
                 executeQuery·p0.90:   716.177 ms/op
                 executeQuery·p0.95:   716.177 ms/op
                 executeQuery·p0.99:   716.177 ms/op
                 executeQuery·p0.999:  716.177 ms/op
                 executeQuery·p0.9999: 716.177 ms/op
                 executeQuery·p1.00:   716.177 ms/op

Iteration   3: 783.286 ms/op
                 executeQuery·p0.00:   713.032 ms/op
                 executeQuery·p0.50:   783.286 ms/op
                 executeQuery·p0.90:   853.541 ms/op
                 executeQuery·p0.95:   853.541 ms/op
                 executeQuery·p0.99:   853.541 ms/op
                 executeQuery·p0.999:  853.541 ms/op
                 executeQuery·p0.9999: 853.541 ms/op
                 executeQuery·p1.00:   853.541 ms/op

Iteration   4: 785.908 ms/op
                 executeQuery·p0.00:   706.740 ms/op
                 executeQuery·p0.50:   785.908 ms/op
                 executeQuery·p0.90:   865.075 ms/op
                 executeQuery·p0.95:   865.075 ms/op
                 executeQuery·p0.99:   865.075 ms/op
                 executeQuery·p0.999:  865.075 ms/op
                 executeQuery·p0.9999: 865.075 ms/op
                 executeQuery·p1.00:   865.075 ms/op

Iteration   5: 877.134 ms/op
                 executeQuery·p0.00:   842.007 ms/op
                 executeQuery·p0.50:   877.134 ms/op
                 executeQuery·p0.90:   912.261 ms/op
                 executeQuery·p0.95:   912.261 ms/op
                 executeQuery·p0.99:   912.261 ms/op
                 executeQuery·p0.999:  912.261 ms/op
                 executeQuery·p0.9999: 912.261 ms/op
                 executeQuery·p1.00:   912.261 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =    776.890 ±(99.9%) 122.049 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 5 
    [ 725.000,  750.000) = 1 
    [ 750.000,  775.000) = 0 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 1 
    [ 850.000,  875.000) = 2 
    [ 875.000,  900.000) = 0 
    [ 900.000,  925.000) = 1 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    706.740 ms/op
     p(50.0000) =    721.945 ms/op
     p(90.0000) =    907.543 ms/op
     p(95.0000) =    912.261 ms/op
     p(99.0000) =    912.261 ms/op
     p(99.9000) =    912.261 ms/op
     p(99.9900) =    912.261 ms/op
     p(99.9990) =    912.261 ms/op
     p(99.9999) =    912.261 ms/op
    p(100.0000) =    912.261 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 3.92% complete, ETA 03:15:14
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2843.738 ms/op
# Warmup Iteration   2: 2441.085 ms/op
# Warmup Iteration   3: 2445.279 ms/op
# Warmup Iteration   4: 2478.834 ms/op
# Warmup Iteration   5: 2516.582 ms/op
Iteration   1: 2503.999 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2503.999 ms/op
                 executeQuery·p0.90:   2503.999 ms/op
                 executeQuery·p0.95:   2503.999 ms/op
                 executeQuery·p0.99:   2503.999 ms/op
                 executeQuery·p0.999:  2503.999 ms/op
                 executeQuery·p0.9999: 2503.999 ms/op
                 executeQuery·p1.00:   2503.999 ms/op

Iteration   2: 2617.246 ms/op
                 executeQuery·p0.00:   2617.246 ms/op
                 executeQuery·p0.50:   2617.246 ms/op
                 executeQuery·p0.90:   2617.246 ms/op
                 executeQuery·p0.95:   2617.246 ms/op
                 executeQuery·p0.99:   2617.246 ms/op
                 executeQuery·p0.999:  2617.246 ms/op
                 executeQuery·p0.9999: 2617.246 ms/op
                 executeQuery·p1.00:   2617.246 ms/op

Iteration   3: 2466.251 ms/op
                 executeQuery·p0.00:   2466.251 ms/op
                 executeQuery·p0.50:   2466.251 ms/op
                 executeQuery·p0.90:   2466.251 ms/op
                 executeQuery·p0.95:   2466.251 ms/op
                 executeQuery·p0.99:   2466.251 ms/op
                 executeQuery·p0.999:  2466.251 ms/op
                 executeQuery·p0.9999: 2466.251 ms/op
                 executeQuery·p1.00:   2466.251 ms/op

Iteration   4: 2483.028 ms/op
                 executeQuery·p0.00:   2483.028 ms/op
                 executeQuery·p0.50:   2483.028 ms/op
                 executeQuery·p0.90:   2483.028 ms/op
                 executeQuery·p0.95:   2483.028 ms/op
                 executeQuery·p0.99:   2483.028 ms/op
                 executeQuery·p0.999:  2483.028 ms/op
                 executeQuery·p0.9999: 2483.028 ms/op
                 executeQuery·p1.00:   2483.028 ms/op

Iteration   5: 2499.805 ms/op
                 executeQuery·p0.00:   2499.805 ms/op
                 executeQuery·p0.50:   2499.805 ms/op
                 executeQuery·p0.90:   2499.805 ms/op
                 executeQuery·p0.95:   2499.805 ms/op
                 executeQuery·p0.99:   2499.805 ms/op
                 executeQuery·p0.999:  2499.805 ms/op
                 executeQuery·p0.9999: 2499.805 ms/op
                 executeQuery·p1.00:   2499.805 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =   2514.066 ±(99.9%) 229.432 ms/op

  Histogram, ms/op:
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 0 
    [2450.000, 2475.000) = 1 
    [2475.000, 2500.000) = 2 
    [2500.000, 2525.000) = 1 
    [2525.000, 2550.000) = 0 
    [2550.000, 2575.000) = 0 
    [2575.000, 2600.000) = 0 
    [2600.000, 2625.000) = 1 
    [2625.000, 2650.000) = 0 
    [2650.000, 2675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2466.251 ms/op
     p(50.0000) =   2499.805 ms/op
     p(90.0000) =   2617.246 ms/op
     p(95.0000) =   2617.246 ms/op
     p(99.0000) =   2617.246 ms/op
     p(99.9000) =   2617.246 ms/op
     p(99.9900) =   2617.246 ms/op
     p(99.9990) =   2617.246 ms/op
     p(99.9999) =   2617.246 ms/op
    p(100.0000) =   2617.246 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 4.90% complete, ETA 04:18:25
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3485.467 ±(99.9%) 3598.868 ms/op
# Warmup Iteration   2: 3060.793 ±(99.9%) 251.713 ms/op
# Warmup Iteration   3: 3031.433 ±(99.9%) 40.655 ms/op
# Warmup Iteration   4: 3056.599 ±(99.9%) 295.561 ms/op
# Warmup Iteration   5: 3055.550 ±(99.9%) 118.142 ms/op
Iteration   1: 3039.822 ±(99.9%) 13.552 ms/op
                 executeQuery·p0.00:   3036.676 ms/op
                 executeQuery·p0.50:   3040.870 ms/op
                 executeQuery·p0.90:   3040.870 ms/op
                 executeQuery·p0.95:   3040.870 ms/op
                 executeQuery·p0.99:   3040.870 ms/op
                 executeQuery·p0.999:  3040.870 ms/op
                 executeQuery·p0.9999: 3040.870 ms/op
                 executeQuery·p1.00:   3040.870 ms/op

Iteration   2: 3063.939 ±(99.9%) 113.921 ms/op
                 executeQuery·p0.00:   3040.870 ms/op
                 executeQuery·p0.50:   3066.036 ms/op
                 executeQuery·p0.90:   3082.813 ms/op
                 executeQuery·p0.95:   3082.813 ms/op
                 executeQuery·p0.99:   3082.813 ms/op
                 executeQuery·p0.999:  3082.813 ms/op
                 executeQuery·p0.9999: 3082.813 ms/op
                 executeQuery·p1.00:   3082.813 ms/op

Iteration   3: 3049.259 ±(99.9%) 162.621 ms/op
                 executeQuery·p0.00:   3028.287 ms/op
                 executeQuery·p0.50:   3045.065 ms/op
                 executeQuery·p0.90:   3078.619 ms/op
                 executeQuery·p0.95:   3078.619 ms/op
                 executeQuery·p0.99:   3078.619 ms/op
                 executeQuery·p0.999:  3078.619 ms/op
                 executeQuery·p0.9999: 3078.619 ms/op
                 executeQuery·p1.00:   3078.619 ms/op

Iteration   4: 3045.065 ±(99.9%) 134.611 ms/op
                 executeQuery·p0.00:   3028.287 ms/op
                 executeQuery·p0.50:   3038.773 ms/op
                 executeQuery·p0.90:   3074.425 ms/op
                 executeQuery·p0.95:   3074.425 ms/op
                 executeQuery·p0.99:   3074.425 ms/op
                 executeQuery·p0.999:  3074.425 ms/op
                 executeQuery·p0.9999: 3074.425 ms/op
                 executeQuery·p1.00:   3074.425 ms/op

Iteration   5: 3034.579 ±(99.9%) 15.648 ms/op
                 executeQuery·p0.00:   3032.482 ms/op
                 executeQuery·p0.50:   3034.579 ms/op
                 executeQuery·p0.90:   3036.676 ms/op
                 executeQuery·p0.95:   3036.676 ms/op
                 executeQuery·p0.99:   3036.676 ms/op
                 executeQuery·p0.999:  3036.676 ms/op
                 executeQuery·p0.9999: 3036.676 ms/op
                 executeQuery·p1.00:   3036.676 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   3046.533 ±(99.9%) 15.644 ms/op

  Histogram, ms/op:
    [3020.000, 3025.000) = 0 
    [3025.000, 3030.000) = 3 
    [3030.000, 3035.000) = 3 
    [3035.000, 3040.000) = 3 
    [3040.000, 3045.000) = 4 
    [3045.000, 3050.000) = 1 
    [3050.000, 3055.000) = 0 
    [3055.000, 3060.000) = 0 
    [3060.000, 3065.000) = 2 
    [3065.000, 3070.000) = 0 
    [3070.000, 3075.000) = 2 
    [3075.000, 3080.000) = 1 
    [3080.000, 3085.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3028.287 ms/op
     p(50.0000) =   3040.870 ms/op
     p(90.0000) =   3078.200 ms/op
     p(95.0000) =   3082.604 ms/op
     p(99.0000) =   3082.813 ms/op
     p(99.9000) =   3082.813 ms/op
     p(99.9900) =   3082.813 ms/op
     p(99.9990) =   3082.813 ms/op
     p(99.9999) =   3082.813 ms/op
    p(100.0000) =   3082.813 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 5.88% complete, ETA 04:05:36
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4106.224 ±(99.9%) 6137.339 ms/op
# Warmup Iteration   2: 4120.205 ±(99.9%) 1504.023 ms/op
# Warmup Iteration   3: 4118.807 ±(99.9%) 275.896 ms/op
# Warmup Iteration   4: 4085.252 ±(99.9%) 597.638 ms/op
# Warmup Iteration   5: 4088.048 ±(99.9%) 176.715 ms/op
Iteration   1: 4106.224 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   4102.029 ms/op
                 executeQuery·p0.50:   4106.224 ms/op
                 executeQuery·p0.90:   4110.418 ms/op
                 executeQuery·p0.95:   4110.418 ms/op
                 executeQuery·p0.99:   4110.418 ms/op
                 executeQuery·p0.999:  4110.418 ms/op
                 executeQuery·p0.9999: 4110.418 ms/op
                 executeQuery·p1.00:   4110.418 ms/op

Iteration   2: 4089.446 ±(99.9%) 229.559 ms/op
                 executeQuery·p0.00:   4076.863 ms/op
                 executeQuery·p0.50:   4089.446 ms/op
                 executeQuery·p0.90:   4102.029 ms/op
                 executeQuery·p0.95:   4102.029 ms/op
                 executeQuery·p0.99:   4102.029 ms/op
                 executeQuery·p0.999:  4102.029 ms/op
                 executeQuery·p0.9999: 4102.029 ms/op
                 executeQuery·p1.00:   4102.029 ms/op

Iteration   3: 4102.029 ±(99.9%) 753.632 ms/op
                 executeQuery·p0.00:   4068.475 ms/op
                 executeQuery·p0.50:   4089.446 ms/op
                 executeQuery·p0.90:   4148.167 ms/op
                 executeQuery·p0.95:   4148.167 ms/op
                 executeQuery·p0.99:   4148.167 ms/op
                 executeQuery·p0.999:  4148.167 ms/op
                 executeQuery·p0.9999: 4148.167 ms/op
                 executeQuery·p1.00:   4148.167 ms/op

Iteration   4: 4093.641 ±(99.9%) 535.638 ms/op
                 executeQuery·p0.00:   4060.086 ms/op
                 executeQuery·p0.50:   4106.224 ms/op
                 executeQuery·p0.90:   4114.612 ms/op
                 executeQuery·p0.95:   4114.612 ms/op
                 executeQuery·p0.99:   4114.612 ms/op
                 executeQuery·p0.999:  4114.612 ms/op
                 executeQuery·p0.9999: 4114.612 ms/op
                 executeQuery·p1.00:   4114.612 ms/op

Iteration   5: 4062.882 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   4060.086 ms/op
                 executeQuery·p0.50:   4064.281 ms/op
                 executeQuery·p0.90:   4064.281 ms/op
                 executeQuery·p0.95:   4064.281 ms/op
                 executeQuery·p0.99:   4064.281 ms/op
                 executeQuery·p0.999:  4064.281 ms/op
                 executeQuery·p0.9999: 4064.281 ms/op
                 executeQuery·p1.00:   4064.281 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   4090.845 ±(99.9%) 27.046 ms/op

  Histogram, ms/op:
    [4060.000, 4065.000) = 4 
    [4065.000, 4070.000) = 1 
    [4070.000, 4075.000) = 0 
    [4075.000, 4080.000) = 1 
    [4080.000, 4085.000) = 0 
    [4085.000, 4090.000) = 2 
    [4090.000, 4095.000) = 0 
    [4095.000, 4100.000) = 0 
    [4100.000, 4105.000) = 2 
    [4105.000, 4110.000) = 2 
    [4110.000, 4115.000) = 2 
    [4115.000, 4120.000) = 0 
    [4120.000, 4125.000) = 0 
    [4125.000, 4130.000) = 0 
    [4130.000, 4135.000) = 0 
    [4135.000, 4140.000) = 0 
    [4140.000, 4145.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4060.086 ms/op
     p(50.0000) =   4089.446 ms/op
     p(90.0000) =   4128.034 ms/op
     p(95.0000) =   4148.167 ms/op
     p(99.0000) =   4148.167 ms/op
     p(99.9000) =   4148.167 ms/op
     p(99.9900) =   4148.167 ms/op
     p(99.9990) =   4148.167 ms/op
     p(99.9999) =   4148.167 ms/op
    p(100.0000) =   4148.167 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 6.86% complete, ETA 03:56:29
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6392.119 ms/op
# Warmup Iteration   2: 6119.490 ms/op
# Warmup Iteration   3: 6215.959 ms/op
# Warmup Iteration   4: 6157.238 ms/op
# Warmup Iteration   5: 6169.821 ms/op
Iteration   1: 6178.210 ms/op
                 executeQuery·p0.00:   6174.015 ms/op
                 executeQuery·p0.50:   6178.210 ms/op
                 executeQuery·p0.90:   6182.404 ms/op
                 executeQuery·p0.95:   6182.404 ms/op
                 executeQuery·p0.99:   6182.404 ms/op
                 executeQuery·p0.999:  6182.404 ms/op
                 executeQuery·p0.9999: 6182.404 ms/op
                 executeQuery·p1.00:   6182.404 ms/op

Iteration   2: 6178.210 ms/op
                 executeQuery·p0.00:   6140.461 ms/op
                 executeQuery·p0.50:   6178.210 ms/op
                 executeQuery·p0.90:   6215.959 ms/op
                 executeQuery·p0.95:   6215.959 ms/op
                 executeQuery·p0.99:   6215.959 ms/op
                 executeQuery·p0.999:  6215.959 ms/op
                 executeQuery·p0.9999: 6215.959 ms/op
                 executeQuery·p1.00:   6215.959 ms/op

Iteration   3: 6190.793 ms/op
                 executeQuery·p0.00:   6174.015 ms/op
                 executeQuery·p0.50:   6190.793 ms/op
                 executeQuery·p0.90:   6207.570 ms/op
                 executeQuery·p0.95:   6207.570 ms/op
                 executeQuery·p0.99:   6207.570 ms/op
                 executeQuery·p0.999:  6207.570 ms/op
                 executeQuery·p0.9999: 6207.570 ms/op
                 executeQuery·p1.00:   6207.570 ms/op

Iteration   4: 5339.349 ms/op
                 executeQuery·p0.00:   5335.155 ms/op
                 executeQuery·p0.50:   5339.349 ms/op
                 executeQuery·p0.90:   5343.543 ms/op
                 executeQuery·p0.95:   5343.543 ms/op
                 executeQuery·p0.99:   5343.543 ms/op
                 executeQuery·p0.999:  5343.543 ms/op
                 executeQuery·p0.9999: 5343.543 ms/op
                 executeQuery·p1.00:   5343.543 ms/op

Iteration   5: 5343.543 ms/op
                 executeQuery·p0.00:   5343.543 ms/op
                 executeQuery·p0.50:   5343.543 ms/op
                 executeQuery·p0.90:   5343.543 ms/op
                 executeQuery·p0.95:   5343.543 ms/op
                 executeQuery·p0.99:   5343.543 ms/op
                 executeQuery·p0.999:  5343.543 ms/op
                 executeQuery·p0.9999: 5343.543 ms/op
                 executeQuery·p1.00:   5343.543 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   5846.021 ±(99.9%) 657.270 ms/op

  Histogram, ms/op:
    [5300.000, 5400.000) = 4 
    [5400.000, 5500.000) = 0 
    [5500.000, 5600.000) = 0 
    [5600.000, 5700.000) = 0 
    [5700.000, 5800.000) = 0 
    [5800.000, 5900.000) = 0 
    [5900.000, 6000.000) = 0 
    [6000.000, 6100.000) = 0 
    [6100.000, 6200.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =   5335.155 ms/op
     p(50.0000) =   6157.238 ms/op
     p(90.0000) =   6215.120 ms/op
     p(95.0000) =   6215.959 ms/op
     p(99.0000) =   6215.959 ms/op
     p(99.9000) =   6215.959 ms/op
     p(99.9900) =   6215.959 ms/op
     p(99.9990) =   6215.959 ms/op
     p(99.9999) =   6215.959 ms/op
    p(100.0000) =   6215.959 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 7.84% complete, ETA 03:48:42
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

9714.008 ms/op
# Warmup Iteration   2: 9210.692 ms/op
# Warmup Iteration   3: 8925.479 ms/op
# Warmup Iteration   4: 9160.360 ms/op
# Warmup Iteration   5: 9227.469 ms/op
Iteration   1: 7650.410 ms/op
                 executeQuery·p0.00:   7650.410 ms/op
                 executeQuery·p0.50:   7650.410 ms/op
                 executeQuery·p0.90:   7650.410 ms/op
                 executeQuery·p0.95:   7650.410 ms/op
                 executeQuery·p0.99:   7650.410 ms/op
                 executeQuery·p0.999:  7650.410 ms/op
                 executeQuery·p0.9999: 7650.410 ms/op
                 executeQuery·p1.00:   7650.410 ms/op

Iteration   2: 7323.255 ms/op
                 executeQuery·p0.00:   7323.255 ms/op
                 executeQuery·p0.50:   7323.255 ms/op
                 executeQuery·p0.90:   7323.255 ms/op
                 executeQuery·p0.95:   7323.255 ms/op
                 executeQuery·p0.99:   7323.255 ms/op
                 executeQuery·p0.999:  7323.255 ms/op
                 executeQuery·p0.9999: 7323.255 ms/op
                 executeQuery·p1.00:   7323.255 ms/op

Iteration   3: 8547.992 ms/op
                 executeQuery·p0.00:   8547.992 ms/op
                 executeQuery·p0.50:   8547.992 ms/op
                 executeQuery·p0.90:   8547.992 ms/op
                 executeQuery·p0.95:   8547.992 ms/op
                 executeQuery·p0.99:   8547.992 ms/op
                 executeQuery·p0.999:  8547.992 ms/op
                 executeQuery·p0.9999: 8547.992 ms/op
                 executeQuery·p1.00:   8547.992 ms/op

Iteration   4: 8464.105 ms/op
                 executeQuery·p0.00:   8464.105 ms/op
                 executeQuery·p0.50:   8464.105 ms/op
                 executeQuery·p0.90:   8464.105 ms/op
                 executeQuery·p0.95:   8464.105 ms/op
                 executeQuery·p0.99:   8464.105 ms/op
                 executeQuery·p0.999:  8464.105 ms/op
                 executeQuery·p0.9999: 8464.105 ms/op
                 executeQuery·p1.00:   8464.105 ms/op

Iteration   5: 8413.774 ms/op
                 executeQuery·p0.00:   8413.774 ms/op
                 executeQuery·p0.50:   8413.774 ms/op
                 executeQuery·p0.90:   8413.774 ms/op
                 executeQuery·p0.95:   8413.774 ms/op
                 executeQuery·p0.99:   8413.774 ms/op
                 executeQuery·p0.999:  8413.774 ms/op
                 executeQuery·p0.9999: 8413.774 ms/op
                 executeQuery·p1.00:   8413.774 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =   8079.907 ±(99.9%) 2139.767 ms/op

  Histogram, ms/op:
    [7000.000, 7125.000) = 0 
    [7125.000, 7250.000) = 0 
    [7250.000, 7375.000) = 1 
    [7375.000, 7500.000) = 0 
    [7500.000, 7625.000) = 0 
    [7625.000, 7750.000) = 1 
    [7750.000, 7875.000) = 0 
    [7875.000, 8000.000) = 0 
    [8000.000, 8125.000) = 0 
    [8125.000, 8250.000) = 0 
    [8250.000, 8375.000) = 0 
    [8375.000, 8500.000) = 2 
    [8500.000, 8625.000) = 1 
    [8625.000, 8750.000) = 0 
    [8750.000, 8875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7323.255 ms/op
     p(50.0000) =   8413.774 ms/op
     p(90.0000) =   8547.992 ms/op
     p(95.0000) =   8547.992 ms/op
     p(99.0000) =   8547.992 ms/op
     p(99.9000) =   8547.992 ms/op
     p(99.9900) =   8547.992 ms/op
     p(99.9990) =   8547.992 ms/op
     p(99.9999) =   8547.992 ms/op
    p(100.0000) =   8547.992 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 8.82% complete, ETA 03:48:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

23857.201 ms/op
# Warmup Iteration   2: 23655.875 ms/op
# Warmup Iteration   3: 24461.181 ms/op
# Warmup Iteration   4: 23722.983 ms/op
# Warmup Iteration   5: 24293.409 ms/op
Iteration   1: 24326.963 ms/op
                 executeQuery·p0.00:   24326.963 ms/op
                 executeQuery·p0.50:   24326.963 ms/op
                 executeQuery·p0.90:   24326.963 ms/op
                 executeQuery·p0.95:   24326.963 ms/op
                 executeQuery·p0.99:   24326.963 ms/op
                 executeQuery·p0.999:  24326.963 ms/op
                 executeQuery·p0.9999: 24326.963 ms/op
                 executeQuery·p1.00:   24326.963 ms/op

Iteration   2: 24360.518 ms/op
                 executeQuery·p0.00:   24360.518 ms/op
                 executeQuery·p0.50:   24360.518 ms/op
                 executeQuery·p0.90:   24360.518 ms/op
                 executeQuery·p0.95:   24360.518 ms/op
                 executeQuery·p0.99:   24360.518 ms/op
                 executeQuery·p0.999:  24360.518 ms/op
                 executeQuery·p0.9999: 24360.518 ms/op
                 executeQuery·p1.00:   24360.518 ms/op

Iteration   3: 23823.647 ms/op
                 executeQuery·p0.00:   23823.647 ms/op
                 executeQuery·p0.50:   23823.647 ms/op
                 executeQuery·p0.90:   23823.647 ms/op
                 executeQuery·p0.95:   23823.647 ms/op
                 executeQuery·p0.99:   23823.647 ms/op
                 executeQuery·p0.999:  23823.647 ms/op
                 executeQuery·p0.9999: 23823.647 ms/op
                 executeQuery·p1.00:   23823.647 ms/op

Iteration   4: 23655.875 ms/op
                 executeQuery·p0.00:   23655.875 ms/op
                 executeQuery·p0.50:   23655.875 ms/op
                 executeQuery·p0.90:   23655.875 ms/op
                 executeQuery·p0.95:   23655.875 ms/op
                 executeQuery·p0.99:   23655.875 ms/op
                 executeQuery·p0.999:  23655.875 ms/op
                 executeQuery·p0.9999: 23655.875 ms/op
                 executeQuery·p1.00:   23655.875 ms/op

Iteration   5: 25031.606 ms/op
                 executeQuery·p0.00:   25031.606 ms/op
                 executeQuery·p0.50:   25031.606 ms/op
                 executeQuery·p0.90:   25031.606 ms/op
                 executeQuery·p0.95:   25031.606 ms/op
                 executeQuery·p0.99:   25031.606 ms/op
                 executeQuery·p0.999:  25031.606 ms/op
                 executeQuery·p0.9999: 25031.606 ms/op
                 executeQuery·p1.00:   25031.606 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  24239.722 ±(99.9%) 2076.565 ms/op

  Histogram, ms/op:
    [23000.000, 23250.000) = 0 
    [23250.000, 23500.000) = 0 
    [23500.000, 23750.000) = 1 
    [23750.000, 24000.000) = 1 
    [24000.000, 24250.000) = 0 
    [24250.000, 24500.000) = 2 
    [24500.000, 24750.000) = 0 
    [24750.000, 25000.000) = 0 
    [25000.000, 25250.000) = 1 
    [25250.000, 25500.000) = 0 
    [25500.000, 25750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  23655.875 ms/op
     p(50.0000) =  24326.963 ms/op
     p(90.0000) =  25031.606 ms/op
     p(95.0000) =  25031.606 ms/op
     p(99.0000) =  25031.606 ms/op
     p(99.9000) =  25031.606 ms/op
     p(99.9900) =  25031.606 ms/op
     p(99.9990) =  25031.606 ms/op
     p(99.9999) =  25031.606 ms/op
    p(100.0000) =  25031.606 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 9.80% complete, ETA 04:47:58
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6983.516 ms/op
# Warmup Iteration   2: 6203.376 ms/op
# Warmup Iteration   3: 6073.352 ms/op
# Warmup Iteration   4: 6069.158 ms/op
# Warmup Iteration   5: 6060.769 ms/op
Iteration   1: 6060.769 ms/op
                 executeQuery·p0.00:   6056.575 ms/op
                 executeQuery·p0.50:   6060.769 ms/op
                 executeQuery·p0.90:   6064.964 ms/op
                 executeQuery·p0.95:   6064.964 ms/op
                 executeQuery·p0.99:   6064.964 ms/op
                 executeQuery·p0.999:  6064.964 ms/op
                 executeQuery·p0.9999: 6064.964 ms/op
                 executeQuery·p1.00:   6064.964 ms/op

Iteration   2: 6077.546 ms/op
                 executeQuery·p0.00:   6056.575 ms/op
                 executeQuery·p0.50:   6077.546 ms/op
                 executeQuery·p0.90:   6098.518 ms/op
                 executeQuery·p0.95:   6098.518 ms/op
                 executeQuery·p0.99:   6098.518 ms/op
                 executeQuery·p0.999:  6098.518 ms/op
                 executeQuery·p0.9999: 6098.518 ms/op
                 executeQuery·p1.00:   6098.518 ms/op

Iteration   3: 6056.575 ms/op
                 executeQuery·p0.00:   6056.575 ms/op
                 executeQuery·p0.50:   6056.575 ms/op
                 executeQuery·p0.90:   6056.575 ms/op
                 executeQuery·p0.95:   6056.575 ms/op
                 executeQuery·p0.99:   6056.575 ms/op
                 executeQuery·p0.999:  6056.575 ms/op
                 executeQuery·p0.9999: 6056.575 ms/op
                 executeQuery·p1.00:   6056.575 ms/op

Iteration   4: 6052.381 ms/op
                 executeQuery·p0.00:   6048.186 ms/op
                 executeQuery·p0.50:   6052.381 ms/op
                 executeQuery·p0.90:   6056.575 ms/op
                 executeQuery·p0.95:   6056.575 ms/op
                 executeQuery·p0.99:   6056.575 ms/op
                 executeQuery·p0.999:  6056.575 ms/op
                 executeQuery·p0.9999: 6056.575 ms/op
                 executeQuery·p1.00:   6056.575 ms/op

Iteration   5: 6060.769 ms/op
                 executeQuery·p0.00:   6056.575 ms/op
                 executeQuery·p0.50:   6060.769 ms/op
                 executeQuery·p0.90:   6064.964 ms/op
                 executeQuery·p0.95:   6064.964 ms/op
                 executeQuery·p0.99:   6064.964 ms/op
                 executeQuery·p0.999:  6064.964 ms/op
                 executeQuery·p0.9999: 6064.964 ms/op
                 executeQuery·p1.00:   6064.964 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   6061.608 ±(99.9%) 20.882 ms/op

  Histogram, ms/op:
    [6040.000, 6045.000) = 0 
    [6045.000, 6050.000) = 1 
    [6050.000, 6055.000) = 0 
    [6055.000, 6060.000) = 6 
    [6060.000, 6065.000) = 2 
    [6065.000, 6070.000) = 0 
    [6070.000, 6075.000) = 0 
    [6075.000, 6080.000) = 0 
    [6080.000, 6085.000) = 0 
    [6085.000, 6090.000) = 0 
    [6090.000, 6095.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   6048.186 ms/op
     p(50.0000) =   6056.575 ms/op
     p(90.0000) =   6095.163 ms/op
     p(95.0000) =   6098.518 ms/op
     p(99.0000) =   6098.518 ms/op
     p(99.9000) =   6098.518 ms/op
     p(99.9900) =   6098.518 ms/op
     p(99.9990) =   6098.518 ms/op
     p(99.9999) =   6098.518 ms/op
    p(100.0000) =   6098.518 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 10.78% complete, ETA 04:36:11
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

10074.718 ms/op
# Warmup Iteration   2: 10284.433 ms/op
# Warmup Iteration   3: 10485.760 ms/op
# Warmup Iteration   4: 10049.552 ms/op
# Warmup Iteration   5: 10032.775 ms/op
Iteration   1: 10032.775 ms/op
                 executeQuery·p0.00:   10032.775 ms/op
                 executeQuery·p0.50:   10032.775 ms/op
                 executeQuery·p0.90:   10032.775 ms/op
                 executeQuery·p0.95:   10032.775 ms/op
                 executeQuery·p0.99:   10032.775 ms/op
                 executeQuery·p0.999:  10032.775 ms/op
                 executeQuery·p0.9999: 10032.775 ms/op
                 executeQuery·p1.00:   10032.775 ms/op

Iteration   2: 10116.661 ms/op
                 executeQuery·p0.00:   10116.661 ms/op
                 executeQuery·p0.50:   10116.661 ms/op
                 executeQuery·p0.90:   10116.661 ms/op
                 executeQuery·p0.95:   10116.661 ms/op
                 executeQuery·p0.99:   10116.661 ms/op
                 executeQuery·p0.999:  10116.661 ms/op
                 executeQuery·p0.9999: 10116.661 ms/op
                 executeQuery·p1.00:   10116.661 ms/op

Iteration   3: 10015.998 ms/op
                 executeQuery·p0.00:   10015.998 ms/op
                 executeQuery·p0.50:   10015.998 ms/op
                 executeQuery·p0.90:   10015.998 ms/op
                 executeQuery·p0.95:   10015.998 ms/op
                 executeQuery·p0.99:   10015.998 ms/op
                 executeQuery·p0.999:  10015.998 ms/op
                 executeQuery·p0.9999: 10015.998 ms/op
                 executeQuery·p1.00:   10015.998 ms/op

Iteration   4: 10015.998 ms/op
                 executeQuery·p0.00:   10015.998 ms/op
                 executeQuery·p0.50:   10015.998 ms/op
                 executeQuery·p0.90:   10015.998 ms/op
                 executeQuery·p0.95:   10015.998 ms/op
                 executeQuery·p0.99:   10015.998 ms/op
                 executeQuery·p0.999:  10015.998 ms/op
                 executeQuery·p0.9999: 10015.998 ms/op
                 executeQuery·p1.00:   10015.998 ms/op

Iteration   5: 9999.221 ms/op
                 executeQuery·p0.00:   9999.221 ms/op
                 executeQuery·p0.50:   9999.221 ms/op
                 executeQuery·p0.90:   9999.221 ms/op
                 executeQuery·p0.95:   9999.221 ms/op
                 executeQuery·p0.99:   9999.221 ms/op
                 executeQuery·p0.999:  9999.221 ms/op
                 executeQuery·p0.9999: 9999.221 ms/op
                 executeQuery·p1.00:   9999.221 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  10036.131 ±(99.9%) 179.266 ms/op

  Histogram, ms/op:
    [ 9900.000,  9925.000) = 0 
    [ 9925.000,  9950.000) = 0 
    [ 9950.000,  9975.000) = 0 
    [ 9975.000, 10000.000) = 1 
    [10000.000, 10025.000) = 2 
    [10025.000, 10050.000) = 1 
    [10050.000, 10075.000) = 0 
    [10075.000, 10100.000) = 0 
    [10100.000, 10125.000) = 1 
    [10125.000, 10150.000) = 0 
    [10150.000, 10175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   9999.221 ms/op
     p(50.0000) =  10015.998 ms/op
     p(90.0000) =  10116.661 ms/op
     p(95.0000) =  10116.661 ms/op
     p(99.0000) =  10116.661 ms/op
     p(99.9000) =  10116.661 ms/op
     p(99.9900) =  10116.661 ms/op
     p(99.9990) =  10116.661 ms/op
     p(99.9999) =  10116.661 ms/op
    p(100.0000) =  10116.661 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 11.76% complete, ETA 04:24:29
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

12314.477 ms/op
# Warmup Iteration   2: 11593.056 ms/op
# Warmup Iteration   3: 12096.373 ms/op
# Warmup Iteration   4: 12700.353 ms/op
# Warmup Iteration   5: 12096.373 ms/op
Iteration   1: 12062.818 ms/op
                 executeQuery·p0.00:   12062.818 ms/op
                 executeQuery·p0.50:   12062.818 ms/op
                 executeQuery·p0.90:   12062.818 ms/op
                 executeQuery·p0.95:   12062.818 ms/op
                 executeQuery·p0.99:   12062.818 ms/op
                 executeQuery·p0.999:  12062.818 ms/op
                 executeQuery·p0.9999: 12062.818 ms/op
                 executeQuery·p1.00:   12062.818 ms/op

Iteration   2: 12062.818 ms/op
                 executeQuery·p0.00:   12062.818 ms/op
                 executeQuery·p0.50:   12062.818 ms/op
                 executeQuery·p0.90:   12062.818 ms/op
                 executeQuery·p0.95:   12062.818 ms/op
                 executeQuery·p0.99:   12062.818 ms/op
                 executeQuery·p0.999:  12062.818 ms/op
                 executeQuery·p0.9999: 12062.818 ms/op
                 executeQuery·p1.00:   12062.818 ms/op

Iteration   3: 12700.353 ms/op
                 executeQuery·p0.00:   12700.353 ms/op
                 executeQuery·p0.50:   12700.353 ms/op
                 executeQuery·p0.90:   12700.353 ms/op
                 executeQuery·p0.95:   12700.353 ms/op
                 executeQuery·p0.99:   12700.353 ms/op
                 executeQuery·p0.999:  12700.353 ms/op
                 executeQuery·p0.9999: 12700.353 ms/op
                 executeQuery·p1.00:   12700.353 ms/op

Iteration   4: 13186.892 ms/op
                 executeQuery·p0.00:   13186.892 ms/op
                 executeQuery·p0.50:   13186.892 ms/op
                 executeQuery·p0.90:   13186.892 ms/op
                 executeQuery·p0.95:   13186.892 ms/op
                 executeQuery·p0.99:   13186.892 ms/op
                 executeQuery·p0.999:  13186.892 ms/op
                 executeQuery·p0.9999: 13186.892 ms/op
                 executeQuery·p1.00:   13186.892 ms/op

Iteration   5: 12079.596 ms/op
                 executeQuery·p0.00:   12079.596 ms/op
                 executeQuery·p0.50:   12079.596 ms/op
                 executeQuery·p0.90:   12079.596 ms/op
                 executeQuery·p0.95:   12079.596 ms/op
                 executeQuery·p0.99:   12079.596 ms/op
                 executeQuery·p0.999:  12079.596 ms/op
                 executeQuery·p0.9999: 12079.596 ms/op
                 executeQuery·p1.00:   12079.596 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  12418.495 ±(99.9%) 1961.318 ms/op

  Histogram, ms/op:
    [12000.000, 12125.000) = 3 
    [12125.000, 12250.000) = 0 
    [12250.000, 12375.000) = 0 
    [12375.000, 12500.000) = 0 
    [12500.000, 12625.000) = 0 
    [12625.000, 12750.000) = 1 
    [12750.000, 12875.000) = 0 
    [12875.000, 13000.000) = 0 
    [13000.000, 13125.000) = 0 
    [13125.000, 13250.000) = 1 
    [13250.000, 13375.000) = 0 
    [13375.000, 13500.000) = 0 
    [13500.000, 13625.000) = 0 
    [13625.000, 13750.000) = 0 
    [13750.000, 13875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12062.818 ms/op
     p(50.0000) =  12079.596 ms/op
     p(90.0000) =  13186.892 ms/op
     p(95.0000) =  13186.892 ms/op
     p(99.0000) =  13186.892 ms/op
     p(99.9000) =  13186.892 ms/op
     p(99.9900) =  13186.892 ms/op
     p(99.9990) =  13186.892 ms/op
     p(99.9999) =  13186.892 ms/op
    p(100.0000) =  13186.892 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 12.75% complete, ETA 04:15:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1810812146 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1810812146() {
        this(4);
    }
    public KeyValueMap_1810812146(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1810812146 aggregation_state_map = new KeyValueMap_1810812146();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

19058.917 ms/op
# Warmup Iteration   2: 17481.859 ms/op
# Warmup Iteration   3: 19159.581 ms/op
# Warmup Iteration   4: 17750.295 ms/op
# Warmup Iteration   5: 17347.641 ms/op
Iteration   1: 16995.320 ms/op
                 executeQuery·p0.00:   16995.320 ms/op
                 executeQuery·p0.50:   16995.320 ms/op
                 executeQuery·p0.90:   16995.320 ms/op
                 executeQuery·p0.95:   16995.320 ms/op
                 executeQuery·p0.99:   16995.320 ms/op
                 executeQuery·p0.999:  16995.320 ms/op
                 executeQuery·p0.9999: 16995.320 ms/op
                 executeQuery·p1.00:   16995.320 ms/op

Iteration   2: 14663.287 ms/op
                 executeQuery·p0.00:   14663.287 ms/op
                 executeQuery·p0.50:   14663.287 ms/op
                 executeQuery·p0.90:   14663.287 ms/op
                 executeQuery·p0.95:   14663.287 ms/op
                 executeQuery·p0.99:   14663.287 ms/op
                 executeQuery·p0.999:  14663.287 ms/op
                 executeQuery·p0.9999: 14663.287 ms/op
                 executeQuery·p1.00:   14663.287 ms/op

Iteration   3: 18253.611 ms/op
                 executeQuery·p0.00:   18253.611 ms/op
                 executeQuery·p0.50:   18253.611 ms/op
                 executeQuery·p0.90:   18253.611 ms/op
                 executeQuery·p0.95:   18253.611 ms/op
                 executeQuery·p0.99:   18253.611 ms/op
                 executeQuery·p0.999:  18253.611 ms/op
                 executeQuery·p0.9999: 18253.611 ms/op
                 executeQuery·p1.00:   18253.611 ms/op

Iteration   4: 18018.730 ms/op
                 executeQuery·p0.00:   18018.730 ms/op
                 executeQuery·p0.50:   18018.730 ms/op
                 executeQuery·p0.90:   18018.730 ms/op
                 executeQuery·p0.95:   18018.730 ms/op
                 executeQuery·p0.99:   18018.730 ms/op
                 executeQuery·p0.999:  18018.730 ms/op
                 executeQuery·p0.9999: 18018.730 ms/op
                 executeQuery·p1.00:   18018.730 ms/op

Iteration   5: 23890.756 ms/op
                 executeQuery·p0.00:   23890.756 ms/op
                 executeQuery·p0.50:   23890.756 ms/op
                 executeQuery·p0.90:   23890.756 ms/op
                 executeQuery·p0.95:   23890.756 ms/op
                 executeQuery·p0.99:   23890.756 ms/op
                 executeQuery·p0.999:  23890.756 ms/op
                 executeQuery·p0.9999: 23890.756 ms/op
                 executeQuery·p1.00:   23890.756 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  18364.341 ±(99.9%) 13092.895 ms/op

  Histogram, ms/op:
    [14000.000, 15000.000) = 1 
    [15000.000, 16000.000) = 0 
    [16000.000, 17000.000) = 1 
    [17000.000, 18000.000) = 0 
    [18000.000, 19000.000) = 2 
    [19000.000, 20000.000) = 0 
    [20000.000, 21000.000) = 0 
    [21000.000, 22000.000) = 0 
    [22000.000, 23000.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  14663.287 ms/op
     p(50.0000) =  18018.730 ms/op
     p(90.0000) =  23890.756 ms/op
     p(95.0000) =  23890.756 ms/op
     p(99.0000) =  23890.756 ms/op
     p(99.9000) =  23890.756 ms/op
     p(99.9900) =  23890.756 ms/op
     p(99.9990) =  23890.756 ms/op
     p(99.9999) =  23890.756 ms/op
    p(100.0000) =  23890.756 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 13.73% complete, ETA 04:22:27
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_1718009307 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1718009307() {
        this(4);
    }
    public KeyValueMap_1718009307(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1718009307 aggregation_state_map = new KeyValueMap_1718009307();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

48653.926 ms/op
# Warmup Iteration   2: 71672.267 ms/op
# Warmup Iteration   3: 46841.987 ms/op
# Warmup Iteration   4: 48385.491 ms/op
# Warmup Iteration   5: 46305.116 ms/op
Iteration   1: 48519.709 ms/op
                 executeQuery·p0.00:   48519.709 ms/op
                 executeQuery·p0.50:   48519.709 ms/op
                 executeQuery·p0.90:   48519.709 ms/op
                 executeQuery·p0.95:   48519.709 ms/op
                 executeQuery·p0.99:   48519.709 ms/op
                 executeQuery·p0.999:  48519.709 ms/op
                 executeQuery·p0.9999: 48519.709 ms/op
                 executeQuery·p1.00:   48519.709 ms/op

Iteration   2: 49861.886 ms/op
                 executeQuery·p0.00:   49861.886 ms/op
                 executeQuery·p0.50:   49861.886 ms/op
                 executeQuery·p0.90:   49861.886 ms/op
                 executeQuery·p0.95:   49861.886 ms/op
                 executeQuery·p0.99:   49861.886 ms/op
                 executeQuery·p0.999:  49861.886 ms/op
                 executeQuery·p0.9999: 49861.886 ms/op
                 executeQuery·p1.00:   49861.886 ms/op

Iteration   3: 46103.790 ms/op
                 executeQuery·p0.00:   46103.790 ms/op
                 executeQuery·p0.50:   46103.790 ms/op
                 executeQuery·p0.90:   46103.790 ms/op
                 executeQuery·p0.95:   46103.790 ms/op
                 executeQuery·p0.99:   46103.790 ms/op
                 executeQuery·p0.999:  46103.790 ms/op
                 executeQuery·p0.9999: 46103.790 ms/op
                 executeQuery·p1.00:   46103.790 ms/op

Iteration   4: 46305.116 ms/op
                 executeQuery·p0.00:   46305.116 ms/op
                 executeQuery·p0.50:   46305.116 ms/op
                 executeQuery·p0.90:   46305.116 ms/op
                 executeQuery·p0.95:   46305.116 ms/op
                 executeQuery·p0.99:   46305.116 ms/op
                 executeQuery·p0.999:  46305.116 ms/op
                 executeQuery·p0.9999: 46305.116 ms/op
                 executeQuery·p1.00:   46305.116 ms/op

Iteration   5: 48989.471 ms/op
                 executeQuery·p0.00:   48989.471 ms/op
                 executeQuery·p0.50:   48989.471 ms/op
                 executeQuery·p0.90:   48989.471 ms/op
                 executeQuery·p0.95:   48989.471 ms/op
                 executeQuery·p0.99:   48989.471 ms/op
                 executeQuery·p0.999:  48989.471 ms/op
                 executeQuery·p0.9999: 48989.471 ms/op
                 executeQuery·p1.00:   48989.471 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  47955.994 ±(99.9%) 6435.972 ms/op

  Histogram, ms/op:
    [46000.000, 46250.000) = 1 
    [46250.000, 46500.000) = 1 
    [46500.000, 46750.000) = 0 
    [46750.000, 47000.000) = 0 
    [47000.000, 47250.000) = 0 
    [47250.000, 47500.000) = 0 
    [47500.000, 47750.000) = 0 
    [47750.000, 48000.000) = 0 
    [48000.000, 48250.000) = 0 
    [48250.000, 48500.000) = 0 
    [48500.000, 48750.000) = 1 
    [48750.000, 49000.000) = 1 
    [49000.000, 49250.000) = 0 
    [49250.000, 49500.000) = 0 
    [49500.000, 49750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  46103.790 ms/op
     p(50.0000) =  48519.709 ms/op
     p(90.0000) =  49861.886 ms/op
     p(95.0000) =  49861.886 ms/op
     p(99.0000) =  49861.886 ms/op
     p(99.9000) =  49861.886 ms/op
     p(99.9900) =  49861.886 ms/op
     p(99.9990) =  49861.886 ms/op
     p(99.9999) =  49861.886 ms/op
    p(100.0000) =  49861.886 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 14.71% complete, ETA 05:20:56
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1343115580 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1343115580() {
        this(4);
    }
    public KeyValueMap_1343115580(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1343115580 aggregation_state_map = new KeyValueMap_1343115580();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

342.779 ±(99.9%) 18.836 ms/op
# Warmup Iteration   2: 333.587 ±(99.9%) 1.241 ms/op
# Warmup Iteration   3: 335.160 ±(99.9%) 5.157 ms/op
# Warmup Iteration   4: 333.168 ±(99.9%) 2.323 ms/op
# Warmup Iteration   5: 334.933 ±(99.9%) 1.207 ms/op
Iteration   1: 339.249 ±(99.9%) 5.597 ms/op
                 executeQuery·p0.00:   330.826 ms/op
                 executeQuery·p0.50:   335.020 ms/op
                 executeQuery·p0.90:   355.415 ms/op
                 executeQuery·p0.95:   356.752 ms/op
                 executeQuery·p0.99:   357.040 ms/op
                 executeQuery·p0.999:  357.040 ms/op
                 executeQuery·p0.9999: 357.040 ms/op
                 executeQuery·p1.00:   357.040 ms/op

Iteration   2: 338.218 ±(99.9%) 5.724 ms/op
                 executeQuery·p0.00:   330.826 ms/op
                 executeQuery·p0.50:   334.758 ms/op
                 executeQuery·p0.90:   353.894 ms/op
                 executeQuery·p0.95:   356.988 ms/op
                 executeQuery·p0.99:   357.564 ms/op
                 executeQuery·p0.999:  357.564 ms/op
                 executeQuery·p0.9999: 357.564 ms/op
                 executeQuery·p1.00:   357.564 ms/op

Iteration   3: 333.884 ±(99.9%) 1.635 ms/op
                 executeQuery·p0.00:   328.729 ms/op
                 executeQuery·p0.50:   334.496 ms/op
                 executeQuery·p0.90:   336.593 ms/op
                 executeQuery·p0.95:   337.117 ms/op
                 executeQuery·p0.99:   337.117 ms/op
                 executeQuery·p0.999:  337.117 ms/op
                 executeQuery·p0.9999: 337.117 ms/op
                 executeQuery·p1.00:   337.117 ms/op

Iteration   4: 338.026 ±(99.9%) 3.365 ms/op
                 executeQuery·p0.00:   332.399 ms/op
                 executeQuery·p0.50:   336.593 ms/op
                 executeQuery·p0.90:   345.453 ms/op
                 executeQuery·p0.95:   351.561 ms/op
                 executeQuery·p0.99:   357.040 ms/op
                 executeQuery·p0.999:  357.040 ms/op
                 executeQuery·p0.9999: 357.040 ms/op
                 executeQuery·p1.00:   357.040 ms/op

Iteration   5: 335.282 ±(99.9%) 1.166 ms/op
                 executeQuery·p0.00:   331.874 ms/op
                 executeQuery·p0.50:   336.331 ms/op
                 executeQuery·p0.90:   336.593 ms/op
                 executeQuery·p0.95:   337.065 ms/op
                 executeQuery·p0.99:   337.641 ms/op
                 executeQuery·p0.999:  337.641 ms/op
                 executeQuery·p0.9999: 337.641 ms/op
                 executeQuery·p1.00:   337.641 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 150
  mean =    336.932 ±(99.9%) 1.705 ms/op

  Histogram, ms/op:
    [320.000, 322.500) = 0 
    [322.500, 325.000) = 0 
    [325.000, 327.500) = 0 
    [327.500, 330.000) = 3 
    [330.000, 332.500) = 19 
    [332.500, 335.000) = 34 
    [335.000, 337.500) = 70 
    [337.500, 340.000) = 6 
    [340.000, 342.500) = 1 
    [342.500, 345.000) = 2 
    [345.000, 347.500) = 2 
    [347.500, 350.000) = 0 
    [350.000, 352.500) = 0 
    [352.500, 355.000) = 7 
    [355.000, 357.500) = 5 

  Percentiles, ms/op:
      p(0.0000) =    328.729 ms/op
     p(50.0000) =    335.544 ms/op
     p(90.0000) =    345.453 ms/op
     p(95.0000) =    354.655 ms/op
     p(99.0000) =    357.297 ms/op
     p(99.9000) =    357.564 ms/op
     p(99.9900) =    357.564 ms/op
     p(99.9990) =    357.564 ms/op
     p(99.9999) =    357.564 ms/op
    p(100.0000) =    357.564 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 15.69% complete, ETA 05:06:37
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_409110600 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_409110600() {
        this(4);
    }
    public KeyValueMap_409110600(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_409110600 aggregation_state_map = new KeyValueMap_409110600();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

440.949 ±(99.9%) 20.018 ms/op
# Warmup Iteration   2: 434.270 ±(99.9%) 5.928 ms/op
# Warmup Iteration   3: 432.166 ±(99.9%) 2.481 ms/op
# Warmup Iteration   4: 432.931 ±(99.9%) 4.176 ms/op
# Warmup Iteration   5: 432.909 ±(99.9%) 2.044 ms/op
Iteration   1: 431.183 ±(99.9%) 2.778 ms/op
                 executeQuery·p0.00:   427.819 ms/op
                 executeQuery·p0.50:   430.703 ms/op
                 executeQuery·p0.90:   435.421 ms/op
                 executeQuery·p0.95:   442.368 ms/op
                 executeQuery·p0.99:   444.072 ms/op
                 executeQuery·p0.999:  444.072 ms/op
                 executeQuery·p0.9999: 444.072 ms/op
                 executeQuery·p1.00:   444.072 ms/op

Iteration   2: 434.794 ±(99.9%) 2.665 ms/op
                 executeQuery·p0.00:   430.440 ms/op
                 executeQuery·p0.50:   433.586 ms/op
                 executeQuery·p0.90:   438.829 ms/op
                 executeQuery·p0.95:   443.862 ms/op
                 executeQuery·p0.99:   445.121 ms/op
                 executeQuery·p0.999:  445.121 ms/op
                 executeQuery·p0.9999: 445.121 ms/op
                 executeQuery·p1.00:   445.121 ms/op

Iteration   3: 435.638 ±(99.9%) 2.907 ms/op
                 executeQuery·p0.00:   429.916 ms/op
                 executeQuery·p0.50:   435.683 ms/op
                 executeQuery·p0.90:   438.934 ms/op
                 executeQuery·p0.95:   445.225 ms/op
                 executeQuery·p0.99:   446.693 ms/op
                 executeQuery·p0.999:  446.693 ms/op
                 executeQuery·p0.9999: 446.693 ms/op
                 executeQuery·p1.00:   446.693 ms/op

Iteration   4: 433.996 ±(99.9%) 2.789 ms/op
                 executeQuery·p0.00:   429.916 ms/op
                 executeQuery·p0.50:   433.586 ms/op
                 executeQuery·p0.90:   440.192 ms/op
                 executeQuery·p0.95:   442.499 ms/op
                 executeQuery·p0.99:   443.023 ms/op
                 executeQuery·p0.999:  443.023 ms/op
                 executeQuery·p0.9999: 443.023 ms/op
                 executeQuery·p1.00:   443.023 ms/op

Iteration   5: 434.772 ±(99.9%) 3.168 ms/op
                 executeQuery·p0.00:   430.440 ms/op
                 executeQuery·p0.50:   433.586 ms/op
                 executeQuery·p0.90:   439.144 ms/op
                 executeQuery·p0.95:   446.484 ms/op
                 executeQuery·p0.99:   448.266 ms/op
                 executeQuery·p0.999:  448.266 ms/op
                 executeQuery·p0.9999: 448.266 ms/op
                 executeQuery·p1.00:   448.266 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 116
  mean =    434.052 ±(99.9%) 1.225 ms/op

  Histogram, ms/op:
    [420.000, 422.500) = 0 
    [422.500, 425.000) = 0 
    [425.000, 427.500) = 0 
    [427.500, 430.000) = 14 
    [430.000, 432.500) = 29 
    [432.500, 435.000) = 35 
    [435.000, 437.500) = 18 
    [437.500, 440.000) = 14 
    [440.000, 442.500) = 1 
    [442.500, 445.000) = 2 
    [445.000, 447.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    427.819 ms/op
     p(50.0000) =    433.586 ms/op
     p(90.0000) =    438.829 ms/op
     p(95.0000) =    440.795 ms/op
     p(99.0000) =    447.999 ms/op
     p(99.9000) =    448.266 ms/op
     p(99.9900) =    448.266 ms/op
     p(99.9990) =    448.266 ms/op
     p(99.9999) =    448.266 ms/op
    p(100.0000) =    448.266 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 16.67% complete, ETA 04:53:50
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1758629107 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1758629107() {
        this(4);
    }
    public KeyValueMap_1758629107(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1758629107 aggregation_state_map = new KeyValueMap_1758629107();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

639.828 ±(99.9%) 29.734 ms/op
# Warmup Iteration   2: 650.445 ±(99.9%) 6.485 ms/op
# Warmup Iteration   3: 658.576 ±(99.9%) 9.297 ms/op
# Warmup Iteration   4: 656.212 ±(99.9%) 8.030 ms/op
# Warmup Iteration   5: 649.855 ±(99.9%) 3.082 ms/op
Iteration   1: 631.833 ±(99.9%) 8.149 ms/op
                 executeQuery·p0.00:   622.854 ms/op
                 executeQuery·p0.50:   629.146 ms/op
                 executeQuery·p0.90:   648.649 ms/op
                 executeQuery·p0.95:   650.117 ms/op
                 executeQuery·p0.99:   650.117 ms/op
                 executeQuery·p0.999:  650.117 ms/op
                 executeQuery·p0.9999: 650.117 ms/op
                 executeQuery·p1.00:   650.117 ms/op

Iteration   2: 627.442 ±(99.9%) 12.626 ms/op
                 executeQuery·p0.00:   618.660 ms/op
                 executeQuery·p0.50:   620.757 ms/op
                 executeQuery·p0.90:   651.061 ms/op
                 executeQuery·p0.95:   653.263 ms/op
                 executeQuery·p0.99:   653.263 ms/op
                 executeQuery·p0.999:  653.263 ms/op
                 executeQuery·p0.9999: 653.263 ms/op
                 executeQuery·p1.00:   653.263 ms/op

Iteration   3: 641.270 ±(99.9%) 23.883 ms/op
                 executeQuery·p0.00:   553.648 ms/op
                 executeQuery·p0.50:   645.923 ms/op
                 executeQuery·p0.90:   651.166 ms/op
                 executeQuery·p0.95:   651.166 ms/op
                 executeQuery·p0.99:   651.166 ms/op
                 executeQuery·p0.999:  651.166 ms/op
                 executeQuery·p0.9999: 651.166 ms/op
                 executeQuery·p1.00:   651.166 ms/op

Iteration   4: 558.716 ±(99.9%) 2.335 ms/op
                 executeQuery·p0.00:   556.794 ms/op
                 executeQuery·p0.50:   557.842 ms/op
                 executeQuery·p0.90:   562.561 ms/op
                 executeQuery·p0.95:   567.280 ms/op
                 executeQuery·p0.99:   567.280 ms/op
                 executeQuery·p0.999:  567.280 ms/op
                 executeQuery·p0.9999: 567.280 ms/op
                 executeQuery·p1.00:   567.280 ms/op

Iteration   5: 561.687 ±(99.9%) 4.421 ms/op
                 executeQuery·p0.00:   557.842 ms/op
                 executeQuery·p0.50:   559.415 ms/op
                 executeQuery·p0.90:   567.070 ms/op
                 executeQuery·p0.95:   574.620 ms/op
                 executeQuery·p0.99:   574.620 ms/op
                 executeQuery·p0.999:  574.620 ms/op
                 executeQuery·p0.9999: 574.620 ms/op
                 executeQuery·p1.00:   574.620 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 84
  mean =    602.095 ±(99.9%) 14.402 ms/op

  Histogram, ms/op:
    [550.000, 560.000) = 26 
    [560.000, 570.000) = 10 
    [570.000, 580.000) = 1 
    [580.000, 590.000) = 0 
    [590.000, 600.000) = 0 
    [600.000, 610.000) = 0 
    [610.000, 620.000) = 6 
    [620.000, 630.000) = 15 
    [630.000, 640.000) = 5 
    [640.000, 650.000) = 15 

  Percentiles, ms/op:
      p(0.0000) =    553.648 ms/op
     p(50.0000) =    619.708 ms/op
     p(90.0000) =    648.020 ms/op
     p(95.0000) =    650.117 ms/op
     p(99.0000) =    653.263 ms/op
     p(99.9000) =    653.263 ms/op
     p(99.9900) =    653.263 ms/op
     p(99.9990) =    653.263 ms/op
     p(99.9999) =    653.263 ms/op
    p(100.0000) =    653.263 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 17.65% complete, ETA 04:42:25
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1758629107 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1758629107() {
        this(4);
    }
    public KeyValueMap_1758629107(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1758629107 aggregation_state_map = new KeyValueMap_1758629107();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

1131.938 ms/op
# Warmup Iteration   2: 939.524 ms/op
# Warmup Iteration   3: 813.171 ms/op
# Warmup Iteration   4: 904.397 ms/op
# Warmup Iteration   5: 868.221 ms/op
Iteration   1: 806.355 ms/op
                 executeQuery·p0.00:   728.760 ms/op
                 executeQuery·p0.50:   806.355 ms/op
                 executeQuery·p0.90:   883.950 ms/op
                 executeQuery·p0.95:   883.950 ms/op
                 executeQuery·p0.99:   883.950 ms/op
                 executeQuery·p0.999:  883.950 ms/op
                 executeQuery·p0.9999: 883.950 ms/op
                 executeQuery·p1.00:   883.950 ms/op

Iteration   2: 901.775 ms/op
                 executeQuery·p0.00:   891.290 ms/op
                 executeQuery·p0.50:   901.775 ms/op
                 executeQuery·p0.90:   912.261 ms/op
                 executeQuery·p0.95:   912.261 ms/op
                 executeQuery·p0.99:   912.261 ms/op
                 executeQuery·p0.999:  912.261 ms/op
                 executeQuery·p0.9999: 912.261 ms/op
                 executeQuery·p1.00:   912.261 ms/op

Iteration   3: 901.251 ms/op
                 executeQuery·p0.00:   886.047 ms/op
                 executeQuery·p0.50:   901.251 ms/op
                 executeQuery·p0.90:   916.455 ms/op
                 executeQuery·p0.95:   916.455 ms/op
                 executeQuery·p0.99:   916.455 ms/op
                 executeQuery·p0.999:  916.455 ms/op
                 executeQuery·p0.9999: 916.455 ms/op
                 executeQuery·p1.00:   916.455 ms/op

Iteration   4: 905.445 ms/op
                 executeQuery·p0.00:   904.921 ms/op
                 executeQuery·p0.50:   905.445 ms/op
                 executeQuery·p0.90:   905.970 ms/op
                 executeQuery·p0.95:   905.970 ms/op
                 executeQuery·p0.99:   905.970 ms/op
                 executeQuery·p0.999:  905.970 ms/op
                 executeQuery·p0.9999: 905.970 ms/op
                 executeQuery·p1.00:   905.970 ms/op

Iteration   5: 818.414 ms/op
                 executeQuery·p0.00:   753.926 ms/op
                 executeQuery·p0.50:   818.414 ms/op
                 executeQuery·p0.90:   882.901 ms/op
                 executeQuery·p0.95:   882.901 ms/op
                 executeQuery·p0.99:   882.901 ms/op
                 executeQuery·p0.999:  882.901 ms/op
                 executeQuery·p0.9999: 882.901 ms/op
                 executeQuery·p1.00:   882.901 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =    866.648 ±(99.9%) 101.842 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 1 
    [ 750.000,  775.000) = 1 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 4 
    [ 900.000,  925.000) = 4 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    728.760 ms/op
     p(50.0000) =    888.668 ms/op
     p(90.0000) =    916.036 ms/op
     p(95.0000) =    916.455 ms/op
     p(99.0000) =    916.455 ms/op
     p(99.9000) =    916.455 ms/op
     p(99.9900) =    916.455 ms/op
     p(99.9990) =    916.455 ms/op
     p(99.9999) =    916.455 ms/op
    p(100.0000) =    916.455 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 18.63% complete, ETA 04:36:48
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1758629107 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1758629107() {
        this(4);
    }
    public KeyValueMap_1758629107(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1758629107 aggregation_state_map = new KeyValueMap_1758629107();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2738.881 ms/op
# Warmup Iteration   2: 2587.886 ms/op
# Warmup Iteration   3: 2617.246 ms/op
# Warmup Iteration   4: 2948.596 ms/op
# Warmup Iteration   5: 2462.056 ms/op
Iteration   1: 2587.886 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2587.886 ms/op
                 executeQuery·p0.90:   2587.886 ms/op
                 executeQuery·p0.95:   2587.886 ms/op
                 executeQuery·p0.99:   2587.886 ms/op
                 executeQuery·p0.999:  2587.886 ms/op
                 executeQuery·p0.9999: 2587.886 ms/op
                 executeQuery·p1.00:   2587.886 ms/op

Iteration   2: 2751.463 ms/op
                 executeQuery·p0.00:   2751.463 ms/op
                 executeQuery·p0.50:   2751.463 ms/op
                 executeQuery·p0.90:   2751.463 ms/op
                 executeQuery·p0.95:   2751.463 ms/op
                 executeQuery·p0.99:   2751.463 ms/op
                 executeQuery·p0.999:  2751.463 ms/op
                 executeQuery·p0.9999: 2751.463 ms/op
                 executeQuery·p1.00:   2751.463 ms/op

Iteration   3: 2415.919 ms/op
                 executeQuery·p0.00:   2415.919 ms/op
                 executeQuery·p0.50:   2415.919 ms/op
                 executeQuery·p0.90:   2415.919 ms/op
                 executeQuery·p0.95:   2415.919 ms/op
                 executeQuery·p0.99:   2415.919 ms/op
                 executeQuery·p0.999:  2415.919 ms/op
                 executeQuery·p0.9999: 2415.919 ms/op
                 executeQuery·p1.00:   2415.919 ms/op

Iteration   4: 3934.257 ms/op
                 executeQuery·p0.00:   3934.257 ms/op
                 executeQuery·p0.50:   3934.257 ms/op
                 executeQuery·p0.90:   3934.257 ms/op
                 executeQuery·p0.95:   3934.257 ms/op
                 executeQuery·p0.99:   3934.257 ms/op
                 executeQuery·p0.999:  3934.257 ms/op
                 executeQuery·p0.9999: 3934.257 ms/op
                 executeQuery·p1.00:   3934.257 ms/op

Iteration   5: 2474.639 ms/op
                 executeQuery·p0.00:   2474.639 ms/op
                 executeQuery·p0.50:   2474.639 ms/op
                 executeQuery·p0.90:   2474.639 ms/op
                 executeQuery·p0.95:   2474.639 ms/op
                 executeQuery·p0.99:   2474.639 ms/op
                 executeQuery·p0.999:  2474.639 ms/op
                 executeQuery·p0.9999: 2474.639 ms/op
                 executeQuery·p1.00:   2474.639 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =   2832.833 ±(99.9%) 2421.528 ms/op

  Histogram, ms/op:
    [2000.000, 2125.000) = 0 
    [2125.000, 2250.000) = 0 
    [2250.000, 2375.000) = 0 
    [2375.000, 2500.000) = 2 
    [2500.000, 2625.000) = 1 
    [2625.000, 2750.000) = 0 
    [2750.000, 2875.000) = 1 
    [2875.000, 3000.000) = 0 
    [3000.000, 3125.000) = 0 
    [3125.000, 3250.000) = 0 
    [3250.000, 3375.000) = 0 
    [3375.000, 3500.000) = 0 
    [3500.000, 3625.000) = 0 
    [3625.000, 3750.000) = 0 
    [3750.000, 3875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2415.919 ms/op
     p(50.0000) =   2587.886 ms/op
     p(90.0000) =   3934.257 ms/op
     p(95.0000) =   3934.257 ms/op
     p(99.0000) =   3934.257 ms/op
     p(99.9000) =   3934.257 ms/op
     p(99.9900) =   3934.257 ms/op
     p(99.9990) =   3934.257 ms/op
     p(99.9999) =   3934.257 ms/op
    p(100.0000) =   3934.257 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 19.61% complete, ETA 04:42:24
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_409110600 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_409110600() {
        this(4);
    }
    public KeyValueMap_409110600(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_409110600 aggregation_state_map = new KeyValueMap_409110600();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3660.229 ±(99.9%) 4573.507 ms/op
# Warmup Iteration   2: 3341.462 ±(99.9%) 4860.257 ms/op
# Warmup Iteration   3: 3186.622 ±(99.9%) 25.950 ms/op
# Warmup Iteration   4: 3295.674 ±(99.9%) 1185.425 ms/op
# Warmup Iteration   5: 3282.043 ±(99.9%) 723.382 ms/op
Iteration   1: 3195.011 ±(99.9%) 113.652 ms/op
                 executeQuery·p0.00:   3183.477 ms/op
                 executeQuery·p0.50:   3187.671 ms/op
                 executeQuery·p0.90:   3221.225 ms/op
                 executeQuery·p0.95:   3221.225 ms/op
                 executeQuery·p0.99:   3221.225 ms/op
                 executeQuery·p0.999:  3221.225 ms/op
                 executeQuery·p0.9999: 3221.225 ms/op
                 executeQuery·p1.00:   3221.225 ms/op

Iteration   2: 3187.671 ±(99.9%) 38.330 ms/op
                 executeQuery·p0.00:   3179.282 ms/op
                 executeQuery·p0.50:   3189.768 ms/op
                 executeQuery·p0.90:   3191.865 ms/op
                 executeQuery·p0.95:   3191.865 ms/op
                 executeQuery·p0.99:   3191.865 ms/op
                 executeQuery·p0.999:  3191.865 ms/op
                 executeQuery·p0.9999: 3191.865 ms/op
                 executeQuery·p1.00:   3191.865 ms/op

Iteration   3: 3198.157 ±(99.9%) 81.311 ms/op
                 executeQuery·p0.00:   3187.671 ms/op
                 executeQuery·p0.50:   3196.060 ms/op
                 executeQuery·p0.90:   3212.837 ms/op
                 executeQuery·p0.95:   3212.837 ms/op
                 executeQuery·p0.99:   3212.837 ms/op
                 executeQuery·p0.999:  3212.837 ms/op
                 executeQuery·p0.9999: 3212.837 ms/op
                 executeQuery·p1.00:   3212.837 ms/op

Iteration   4: 3193.962 ±(99.9%) 71.709 ms/op
                 executeQuery·p0.00:   3179.282 ms/op
                 executeQuery·p0.50:   3196.060 ms/op
                 executeQuery·p0.90:   3204.448 ms/op
                 executeQuery·p0.95:   3204.448 ms/op
                 executeQuery·p0.99:   3204.448 ms/op
                 executeQuery·p0.999:  3204.448 ms/op
                 executeQuery·p0.9999: 3204.448 ms/op
                 executeQuery·p1.00:   3204.448 ms/op

Iteration   5: 3206.545 ±(99.9%) 173.547 ms/op
                 executeQuery·p0.00:   3179.282 ms/op
                 executeQuery·p0.50:   3208.643 ms/op
                 executeQuery·p0.90:   3229.614 ms/op
                 executeQuery·p0.95:   3229.614 ms/op
                 executeQuery·p0.99:   3229.614 ms/op
                 executeQuery·p0.999:  3229.614 ms/op
                 executeQuery·p0.9999: 3229.614 ms/op
                 executeQuery·p1.00:   3229.614 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   3196.269 ±(99.9%) 13.805 ms/op

  Histogram, ms/op:
    [3170.000, 3175.000) = 0 
    [3175.000, 3180.000) = 3 
    [3180.000, 3185.000) = 1 
    [3185.000, 3190.000) = 6 
    [3190.000, 3195.000) = 3 
    [3195.000, 3200.000) = 0 
    [3200.000, 3205.000) = 3 
    [3205.000, 3210.000) = 0 
    [3210.000, 3215.000) = 1 
    [3215.000, 3220.000) = 0 
    [3220.000, 3225.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3179.282 ms/op
     p(50.0000) =   3189.768 ms/op
     p(90.0000) =   3228.775 ms/op
     p(95.0000) =   3229.614 ms/op
     p(99.0000) =   3229.614 ms/op
     p(99.9000) =   3229.614 ms/op
     p(99.9900) =   3229.614 ms/op
     p(99.9990) =   3229.614 ms/op
     p(99.9999) =   3229.614 ms/op
    p(100.0000) =   3229.614 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 20.59% complete, ETA 04:33:44
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1758629107 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1758629107() {
        this(4);
    }
    public KeyValueMap_1758629107(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1758629107 aggregation_state_map = new KeyValueMap_1758629107();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4388.640 ±(99.9%) 5318.166 ms/op
# Warmup Iteration   2: 4132.788 ±(99.9%) 11228.427 ms/op
# Warmup Iteration   3: 4183.119 ±(99.9%) 5302.178 ms/op
# Warmup Iteration   4: 3731.532 ±(99.9%) 192.570 ms/op
# Warmup Iteration   5: 3779.068 ±(99.9%) 551.792 ms/op
Iteration   1: 4260.015 ±(99.9%) 6409.564 ms/op
                 executeQuery·p0.00:   3871.343 ms/op
                 executeQuery·p0.50:   4353.688 ms/op
                 executeQuery·p0.90:   4555.014 ms/op
                 executeQuery·p0.95:   4555.014 ms/op
                 executeQuery·p0.99:   4555.014 ms/op
                 executeQuery·p0.999:  4555.014 ms/op
                 executeQuery·p0.9999: 4555.014 ms/op
                 executeQuery·p1.00:   4555.014 ms/op

Iteration   2: 4405.417 ±(99.9%) 2016.310 ms/op
                 executeQuery·p0.00:   4282.384 ms/op
                 executeQuery·p0.50:   4437.574 ms/op
                 executeQuery·p0.90:   4496.294 ms/op
                 executeQuery·p0.95:   4496.294 ms/op
                 executeQuery·p0.99:   4496.294 ms/op
                 executeQuery·p0.999:  4496.294 ms/op
                 executeQuery·p0.9999: 4496.294 ms/op
                 executeQuery·p1.00:   4496.294 ms/op

Iteration   3: 4444.564 ±(99.9%) 3239.536 ms/op
                 executeQuery·p0.00:   4290.773 ms/op
                 executeQuery·p0.50:   4404.019 ms/op
                 executeQuery·p0.90:   4638.900 ms/op
                 executeQuery·p0.95:   4638.900 ms/op
                 executeQuery·p0.99:   4638.900 ms/op
                 executeQuery·p0.999:  4638.900 ms/op
                 executeQuery·p0.9999: 4638.900 ms/op
                 executeQuery·p1.00:   4638.900 ms/op

Iteration   4: 4404.019 ±(99.9%) 551.792 ms/op
                 executeQuery·p0.00:   4370.465 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4429.185 ms/op
                 executeQuery·p0.95:   4429.185 ms/op
                 executeQuery·p0.99:   4429.185 ms/op
                 executeQuery·p0.999:  4429.185 ms/op
                 executeQuery·p0.9999: 4429.185 ms/op
                 executeQuery·p1.00:   4429.185 ms/op

Iteration   5: 3994.376 ±(99.9%) 6031.158 ms/op
                 executeQuery·p0.00:   3749.708 ms/op
                 executeQuery·p0.50:   3862.954 ms/op
                 executeQuery·p0.90:   4370.465 ms/op
                 executeQuery·p0.95:   4370.465 ms/op
                 executeQuery·p0.99:   4370.465 ms/op
                 executeQuery·p0.999:  4370.465 ms/op
                 executeQuery·p0.9999: 4370.465 ms/op
                 executeQuery·p1.00:   4370.465 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   4301.678 ±(99.9%) 281.143 ms/op

  Histogram, ms/op:
    [3700.000, 3800.000) = 1 
    [3800.000, 3900.000) = 2 
    [3900.000, 4000.000) = 0 
    [4000.000, 4100.000) = 0 
    [4100.000, 4200.000) = 0 
    [4200.000, 4300.000) = 2 
    [4300.000, 4400.000) = 3 
    [4400.000, 4500.000) = 5 
    [4500.000, 4600.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3749.708 ms/op
     p(50.0000) =   4370.465 ms/op
     p(90.0000) =   4588.569 ms/op
     p(95.0000) =   4638.900 ms/op
     p(99.0000) =   4638.900 ms/op
     p(99.9000) =   4638.900 ms/op
     p(99.9900) =   4638.900 ms/op
     p(99.9990) =   4638.900 ms/op
     p(99.9999) =   4638.900 ms/op
    p(100.0000) =   4638.900 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 21.57% complete, ETA 04:25:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1758629107 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1758629107() {
        this(4);
    }
    public KeyValueMap_1758629107(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1758629107 aggregation_state_map = new KeyValueMap_1758629107();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6987.710 ms/op
# Warmup Iteration   2: 7340.032 ms/op
# Warmup Iteration   3: 7239.369 ms/op
# Warmup Iteration   4: 6920.602 ms/op
# Warmup Iteration   5: 6719.275 ms/op
Iteration   1: 7126.122 ms/op
                 executeQuery·p0.00:   6987.710 ms/op
                 executeQuery·p0.50:   7126.122 ms/op
                 executeQuery·p0.90:   7264.535 ms/op
                 executeQuery·p0.95:   7264.535 ms/op
                 executeQuery·p0.99:   7264.535 ms/op
                 executeQuery·p0.999:  7264.535 ms/op
                 executeQuery·p0.9999: 7264.535 ms/op
                 executeQuery·p1.00:   7264.535 ms/op

Iteration   2: 7579.107 ms/op
                 executeQuery·p0.00:   7423.918 ms/op
                 executeQuery·p0.50:   7579.107 ms/op
                 executeQuery·p0.90:   7734.297 ms/op
                 executeQuery·p0.95:   7734.297 ms/op
                 executeQuery·p0.99:   7734.297 ms/op
                 executeQuery·p0.999:  7734.297 ms/op
                 executeQuery·p0.9999: 7734.297 ms/op
                 executeQuery·p1.00:   7734.297 ms/op

Iteration   3: 6673.138 ms/op
                 executeQuery·p0.00:   6400.508 ms/op
                 executeQuery·p0.50:   6673.138 ms/op
                 executeQuery·p0.90:   6945.767 ms/op
                 executeQuery·p0.95:   6945.767 ms/op
                 executeQuery·p0.99:   6945.767 ms/op
                 executeQuery·p0.999:  6945.767 ms/op
                 executeQuery·p0.9999: 6945.767 ms/op
                 executeQuery·p1.00:   6945.767 ms/op

Iteration   4: 5364.515 ms/op
                 executeQuery·p0.00:   5293.212 ms/op
                 executeQuery·p0.50:   5364.515 ms/op
                 executeQuery·p0.90:   5435.818 ms/op
                 executeQuery·p0.95:   5435.818 ms/op
                 executeQuery·p0.99:   5435.818 ms/op
                 executeQuery·p0.999:  5435.818 ms/op
                 executeQuery·p0.9999: 5435.818 ms/op
                 executeQuery·p1.00:   5435.818 ms/op

Iteration   5: 6283.067 ms/op
                 executeQuery·p0.00:   6232.736 ms/op
                 executeQuery·p0.50:   6283.067 ms/op
                 executeQuery·p0.90:   6333.399 ms/op
                 executeQuery·p0.95:   6333.399 ms/op
                 executeQuery·p0.99:   6333.399 ms/op
                 executeQuery·p0.999:  6333.399 ms/op
                 executeQuery·p0.9999: 6333.399 ms/op
                 executeQuery·p1.00:   6333.399 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   6605.190 ±(99.9%) 1232.929 ms/op

  Histogram, ms/op:
    [5000.000, 5250.000) = 0 
    [5250.000, 5500.000) = 2 
    [5500.000, 5750.000) = 0 
    [5750.000, 6000.000) = 0 
    [6000.000, 6250.000) = 1 
    [6250.000, 6500.000) = 2 
    [6500.000, 6750.000) = 0 
    [6750.000, 7000.000) = 2 
    [7000.000, 7250.000) = 0 
    [7250.000, 7500.000) = 2 
    [7500.000, 7750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   5293.212 ms/op
     p(50.0000) =   6673.138 ms/op
     p(90.0000) =   7703.259 ms/op
     p(95.0000) =   7734.297 ms/op
     p(99.0000) =   7734.297 ms/op
     p(99.9000) =   7734.297 ms/op
     p(99.9900) =   7734.297 ms/op
     p(99.9990) =   7734.297 ms/op
     p(99.9999) =   7734.297 ms/op
    p(100.0000) =   7734.297 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 22.55% complete, ETA 04:18:57
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1758629107 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1758629107() {
        this(4);
    }
    public KeyValueMap_1758629107(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1758629107 aggregation_state_map = new KeyValueMap_1758629107();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

10619.978 ms/op
# Warmup Iteration   2: 16793.993 ms/op
# Warmup Iteration   3: 15820.915 ms/op
# Warmup Iteration   4: 16357.786 ms/op
# Warmup Iteration   5: 16693.330 ms/op
Iteration   1: 9579.790 ms/op
                 executeQuery·p0.00:   9579.790 ms/op
                 executeQuery·p0.50:   9579.790 ms/op
                 executeQuery·p0.90:   9579.790 ms/op
                 executeQuery·p0.95:   9579.790 ms/op
                 executeQuery·p0.99:   9579.790 ms/op
                 executeQuery·p0.999:  9579.790 ms/op
                 executeQuery·p0.9999: 9579.790 ms/op
                 executeQuery·p1.00:   9579.790 ms/op

Iteration   2: 9512.681 ms/op
                 executeQuery·p0.00:   9512.681 ms/op
                 executeQuery·p0.50:   9512.681 ms/op
                 executeQuery·p0.90:   9512.681 ms/op
                 executeQuery·p0.95:   9512.681 ms/op
                 executeQuery·p0.99:   9512.681 ms/op
                 executeQuery·p0.999:  9512.681 ms/op
                 executeQuery·p0.9999: 9512.681 ms/op
                 executeQuery·p1.00:   9512.681 ms/op

Iteration   3: 11005.854 ms/op
                 executeQuery·p0.00:   11005.854 ms/op
                 executeQuery·p0.50:   11005.854 ms/op
                 executeQuery·p0.90:   11005.854 ms/op
                 executeQuery·p0.95:   11005.854 ms/op
                 executeQuery·p0.99:   11005.854 ms/op
                 executeQuery·p0.999:  11005.854 ms/op
                 executeQuery·p0.9999: 11005.854 ms/op
                 executeQuery·p1.00:   11005.854 ms/op

Iteration   4: 16106.127 ms/op
                 executeQuery·p0.00:   16106.127 ms/op
                 executeQuery·p0.50:   16106.127 ms/op
                 executeQuery·p0.90:   16106.127 ms/op
                 executeQuery·p0.95:   16106.127 ms/op
                 executeQuery·p0.99:   16106.127 ms/op
                 executeQuery·p0.999:  16106.127 ms/op
                 executeQuery·p0.9999: 16106.127 ms/op
                 executeQuery·p1.00:   16106.127 ms/op

Iteration   5: 16039.018 ms/op
                 executeQuery·p0.00:   16039.018 ms/op
                 executeQuery·p0.50:   16039.018 ms/op
                 executeQuery·p0.90:   16039.018 ms/op
                 executeQuery·p0.95:   16039.018 ms/op
                 executeQuery·p0.99:   16039.018 ms/op
                 executeQuery·p0.999:  16039.018 ms/op
                 executeQuery·p0.9999: 16039.018 ms/op
                 executeQuery·p1.00:   16039.018 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  12448.694 ±(99.9%) 12944.095 ms/op

  Histogram, ms/op:
    [ 9000.000,  9500.000) = 0 
    [ 9500.000, 10000.000) = 2 
    [10000.000, 10500.000) = 0 
    [10500.000, 11000.000) = 0 
    [11000.000, 11500.000) = 1 
    [11500.000, 12000.000) = 0 
    [12000.000, 12500.000) = 0 
    [12500.000, 13000.000) = 0 
    [13000.000, 13500.000) = 0 
    [13500.000, 14000.000) = 0 
    [14000.000, 14500.000) = 0 
    [14500.000, 15000.000) = 0 
    [15000.000, 15500.000) = 0 
    [15500.000, 16000.000) = 0 
    [16000.000, 16500.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   9512.681 ms/op
     p(50.0000) =  11005.854 ms/op
     p(90.0000) =  16106.127 ms/op
     p(95.0000) =  16106.127 ms/op
     p(99.0000) =  16106.127 ms/op
     p(99.9000) =  16106.127 ms/op
     p(99.9900) =  16106.127 ms/op
     p(99.9990) =  16106.127 ms/op
     p(99.9999) =  16106.127 ms/op
    p(100.0000) =  16106.127 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 23.53% complete, ETA 04:16:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_409110600 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_409110600() {
        this(4);
    }
    public KeyValueMap_409110600(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_409110600 aggregation_state_map = new KeyValueMap_409110600();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

41943.040 ms/op
# Warmup Iteration   2: 41473.278 ms/op
# Warmup Iteration   3: 40332.427 ms/op
# Warmup Iteration   4: 41540.387 ms/op
# Warmup Iteration   5: 25501.368 ms/op
Iteration   1: 26541.556 ms/op
                 executeQuery·p0.00:   26541.556 ms/op
                 executeQuery·p0.50:   26541.556 ms/op
                 executeQuery·p0.90:   26541.556 ms/op
                 executeQuery·p0.95:   26541.556 ms/op
                 executeQuery·p0.99:   26541.556 ms/op
                 executeQuery·p0.999:  26541.556 ms/op
                 executeQuery·p0.9999: 26541.556 ms/op
                 executeQuery·p1.00:   26541.556 ms/op

Iteration   2: 34024.194 ms/op
                 executeQuery·p0.00:   34024.194 ms/op
                 executeQuery·p0.50:   34024.194 ms/op
                 executeQuery·p0.90:   34024.194 ms/op
                 executeQuery·p0.95:   34024.194 ms/op
                 executeQuery·p0.99:   34024.194 ms/op
                 executeQuery·p0.999:  34024.194 ms/op
                 executeQuery·p0.9999: 34024.194 ms/op
                 executeQuery·p1.00:   34024.194 ms/op

Iteration   3: 27481.080 ms/op
                 executeQuery·p0.00:   27481.080 ms/op
                 executeQuery·p0.50:   27481.080 ms/op
                 executeQuery·p0.90:   27481.080 ms/op
                 executeQuery·p0.95:   27481.080 ms/op
                 executeQuery·p0.99:   27481.080 ms/op
                 executeQuery·p0.999:  27481.080 ms/op
                 executeQuery·p0.9999: 27481.080 ms/op
                 executeQuery·p1.00:   27481.080 ms/op

Iteration   4: 34326.184 ms/op
                 executeQuery·p0.00:   34326.184 ms/op
                 executeQuery·p0.50:   34326.184 ms/op
                 executeQuery·p0.90:   34326.184 ms/op
                 executeQuery·p0.95:   34326.184 ms/op
                 executeQuery·p0.99:   34326.184 ms/op
                 executeQuery·p0.999:  34326.184 ms/op
                 executeQuery·p0.9999: 34326.184 ms/op
                 executeQuery·p1.00:   34326.184 ms/op

Iteration   5: 23957.864 ms/op
                 executeQuery·p0.00:   23957.864 ms/op
                 executeQuery·p0.50:   23957.864 ms/op
                 executeQuery·p0.90:   23957.864 ms/op
                 executeQuery·p0.95:   23957.864 ms/op
                 executeQuery·p0.99:   23957.864 ms/op
                 executeQuery·p0.999:  23957.864 ms/op
                 executeQuery·p0.9999: 23957.864 ms/op
                 executeQuery·p1.00:   23957.864 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  29266.176 ±(99.9%) 17961.377 ms/op

  Histogram, ms/op:
    [20000.000, 21250.000) = 0 
    [21250.000, 22500.000) = 0 
    [22500.000, 23750.000) = 0 
    [23750.000, 25000.000) = 1 
    [25000.000, 26250.000) = 0 
    [26250.000, 27500.000) = 2 
    [27500.000, 28750.000) = 0 
    [28750.000, 30000.000) = 0 
    [30000.000, 31250.000) = 0 
    [31250.000, 32500.000) = 0 
    [32500.000, 33750.000) = 0 
    [33750.000, 35000.000) = 2 
    [35000.000, 36250.000) = 0 
    [36250.000, 37500.000) = 0 
    [37500.000, 38750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  23957.864 ms/op
     p(50.0000) =  27481.080 ms/op
     p(90.0000) =  34326.184 ms/op
     p(95.0000) =  34326.184 ms/op
     p(99.0000) =  34326.184 ms/op
     p(99.9000) =  34326.184 ms/op
     p(99.9900) =  34326.184 ms/op
     p(99.9990) =  34326.184 ms/op
     p(99.9999) =  34326.184 ms/op
    p(100.0000) =  34326.184 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 24.51% complete, ETA 04:36:14
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1758629107 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1758629107() {
        this(4);
    }
    public KeyValueMap_1758629107(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1758629107 aggregation_state_map = new KeyValueMap_1758629107();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6029.312 ms/op
# Warmup Iteration   2: 7038.042 ms/op
# Warmup Iteration   3: 5859.443 ms/op
# Warmup Iteration   4: 6362.759 ms/op
# Warmup Iteration   5: 6870.270 ms/op
Iteration   1: 6811.550 ms/op
                 executeQuery·p0.00:   6744.441 ms/op
                 executeQuery·p0.50:   6811.550 ms/op
                 executeQuery·p0.90:   6878.659 ms/op
                 executeQuery·p0.95:   6878.659 ms/op
                 executeQuery·p0.99:   6878.659 ms/op
                 executeQuery·p0.999:  6878.659 ms/op
                 executeQuery·p0.9999: 6878.659 ms/op
                 executeQuery·p1.00:   6878.659 ms/op

Iteration   2: 7134.511 ms/op
                 executeQuery·p0.00:   6819.938 ms/op
                 executeQuery·p0.50:   7134.511 ms/op
                 executeQuery·p0.90:   7449.084 ms/op
                 executeQuery·p0.95:   7449.084 ms/op
                 executeQuery·p0.99:   7449.084 ms/op
                 executeQuery·p0.999:  7449.084 ms/op
                 executeQuery·p0.9999: 7449.084 ms/op
                 executeQuery·p1.00:   7449.084 ms/op

Iteration   3: 6748.635 ms/op
                 executeQuery·p0.00:   6744.441 ms/op
                 executeQuery·p0.50:   6748.635 ms/op
                 executeQuery·p0.90:   6752.829 ms/op
                 executeQuery·p0.95:   6752.829 ms/op
                 executeQuery·p0.99:   6752.829 ms/op
                 executeQuery·p0.999:  6752.829 ms/op
                 executeQuery·p0.9999: 6752.829 ms/op
                 executeQuery·p1.00:   6752.829 ms/op

Iteration   4: 6811.550 ms/op
                 executeQuery·p0.00:   6786.384 ms/op
                 executeQuery·p0.50:   6811.550 ms/op
                 executeQuery·p0.90:   6836.716 ms/op
                 executeQuery·p0.95:   6836.716 ms/op
                 executeQuery·p0.99:   6836.716 ms/op
                 executeQuery·p0.999:  6836.716 ms/op
                 executeQuery·p0.9999: 6836.716 ms/op
                 executeQuery·p1.00:   6836.716 ms/op

Iteration   5: 6769.607 ms/op
                 executeQuery·p0.00:   6761.218 ms/op
                 executeQuery·p0.50:   6769.607 ms/op
                 executeQuery·p0.90:   6777.995 ms/op
                 executeQuery·p0.95:   6777.995 ms/op
                 executeQuery·p0.99:   6777.995 ms/op
                 executeQuery·p0.999:  6777.995 ms/op
                 executeQuery·p0.9999: 6777.995 ms/op
                 executeQuery·p1.00:   6777.995 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   6855.170 ±(99.9%) 322.442 ms/op

  Histogram, ms/op:
    [6700.000, 6750.000) = 2 
    [6750.000, 6800.000) = 4 
    [6800.000, 6850.000) = 2 
    [6850.000, 6900.000) = 1 
    [6900.000, 6950.000) = 0 
    [6950.000, 7000.000) = 0 
    [7000.000, 7050.000) = 0 
    [7050.000, 7100.000) = 0 
    [7100.000, 7150.000) = 0 
    [7150.000, 7200.000) = 0 
    [7200.000, 7250.000) = 0 
    [7250.000, 7300.000) = 0 
    [7300.000, 7350.000) = 0 
    [7350.000, 7400.000) = 0 
    [7400.000, 7450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   6744.441 ms/op
     p(50.0000) =   6782.190 ms/op
     p(90.0000) =   7392.041 ms/op
     p(95.0000) =   7449.084 ms/op
     p(99.0000) =   7449.084 ms/op
     p(99.9000) =   7449.084 ms/op
     p(99.9900) =   7449.084 ms/op
     p(99.9990) =   7449.084 ms/op
     p(99.9999) =   7449.084 ms/op
    p(100.0000) =   7449.084 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 25.49% complete, ETA 04:28:43
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_409110600 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_409110600() {
        this(4);
    }
    public KeyValueMap_409110600(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_409110600 aggregation_state_map = new KeyValueMap_409110600();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

9319.743 ms/op
# Warmup Iteration   2: 10234.102 ms/op
# Warmup Iteration   3: 9940.500 ms/op
# Warmup Iteration   4: 10183.770 ms/op
# Warmup Iteration   5: 9940.500 ms/op
Iteration   1: 9873.392 ms/op
                 executeQuery·p0.00:   9865.003 ms/op
                 executeQuery·p0.50:   9873.392 ms/op
                 executeQuery·p0.90:   9881.780 ms/op
                 executeQuery·p0.95:   9881.780 ms/op
                 executeQuery·p0.99:   9881.780 ms/op
                 executeQuery·p0.999:  9881.780 ms/op
                 executeQuery·p0.9999: 9881.780 ms/op
                 executeQuery·p1.00:   9881.780 ms/op

Iteration   2: 10066.330 ms/op
                 executeQuery·p0.00:   9898.557 ms/op
                 executeQuery·p0.50:   10066.330 ms/op
                 executeQuery·p0.90:   10234.102 ms/op
                 executeQuery·p0.95:   10234.102 ms/op
                 executeQuery·p0.99:   10234.102 ms/op
                 executeQuery·p0.999:  10234.102 ms/op
                 executeQuery·p0.9999: 10234.102 ms/op
                 executeQuery·p1.00:   10234.102 ms/op

Iteration   3: 9906.946 ms/op
                 executeQuery·p0.00:   9898.557 ms/op
                 executeQuery·p0.50:   9906.946 ms/op
                 executeQuery·p0.90:   9915.335 ms/op
                 executeQuery·p0.95:   9915.335 ms/op
                 executeQuery·p0.99:   9915.335 ms/op
                 executeQuery·p0.999:  9915.335 ms/op
                 executeQuery·p0.9999: 9915.335 ms/op
                 executeQuery·p1.00:   9915.335 ms/op

Iteration   4: 10015.998 ms/op
                 executeQuery·p0.00:   9865.003 ms/op
                 executeQuery·p0.50:   10015.998 ms/op
                 executeQuery·p0.90:   10166.993 ms/op
                 executeQuery·p0.95:   10166.993 ms/op
                 executeQuery·p0.99:   10166.993 ms/op
                 executeQuery·p0.999:  10166.993 ms/op
                 executeQuery·p0.9999: 10166.993 ms/op
                 executeQuery·p1.00:   10166.993 ms/op

Iteration   5: 10024.387 ms/op
                 executeQuery·p0.00:   9881.780 ms/op
                 executeQuery·p0.50:   10024.387 ms/op
                 executeQuery·p0.90:   10166.993 ms/op
                 executeQuery·p0.95:   10166.993 ms/op
                 executeQuery·p0.99:   10166.993 ms/op
                 executeQuery·p0.999:  10166.993 ms/op
                 executeQuery·p0.9999: 10166.993 ms/op
                 executeQuery·p1.00:   10166.993 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   9977.410 ±(99.9%) 224.031 ms/op

  Histogram, ms/op:
    [ 9800.000,  9850.000) = 0 
    [ 9850.000,  9900.000) = 6 
    [ 9900.000,  9950.000) = 1 
    [ 9950.000, 10000.000) = 0 
    [10000.000, 10050.000) = 0 
    [10050.000, 10100.000) = 0 
    [10100.000, 10150.000) = 0 
    [10150.000, 10200.000) = 2 
    [10200.000, 10250.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   9865.003 ms/op
     p(50.0000) =   9898.557 ms/op
     p(90.0000) =  10227.391 ms/op
     p(95.0000) =  10234.102 ms/op
     p(99.0000) =  10234.102 ms/op
     p(99.9000) =  10234.102 ms/op
     p(99.9900) =  10234.102 ms/op
     p(99.9990) =  10234.102 ms/op
     p(99.9999) =  10234.102 ms/op
    p(100.0000) =  10234.102 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 26.47% complete, ETA 04:24:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_409110600 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_409110600() {
        this(4);
    }
    public KeyValueMap_409110600(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_409110600 aggregation_state_map = new KeyValueMap_409110600();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

13740.540 ms/op
# Warmup Iteration   2: 13455.327 ms/op
# Warmup Iteration   3: 12901.679 ms/op
# Warmup Iteration   4: 12817.793 ms/op
# Warmup Iteration   5: 12918.456 ms/op
Iteration   1: 12633.244 ms/op
                 executeQuery·p0.00:   12633.244 ms/op
                 executeQuery·p0.50:   12633.244 ms/op
                 executeQuery·p0.90:   12633.244 ms/op
                 executeQuery·p0.95:   12633.244 ms/op
                 executeQuery·p0.99:   12633.244 ms/op
                 executeQuery·p0.999:  12633.244 ms/op
                 executeQuery·p0.9999: 12633.244 ms/op
                 executeQuery·p1.00:   12633.244 ms/op

Iteration   2: 12582.912 ms/op
                 executeQuery·p0.00:   12582.912 ms/op
                 executeQuery·p0.50:   12582.912 ms/op
                 executeQuery·p0.90:   12582.912 ms/op
                 executeQuery·p0.95:   12582.912 ms/op
                 executeQuery·p0.99:   12582.912 ms/op
                 executeQuery·p0.999:  12582.912 ms/op
                 executeQuery·p0.9999: 12582.912 ms/op
                 executeQuery·p1.00:   12582.912 ms/op

Iteration   3: 12599.689 ms/op
                 executeQuery·p0.00:   12599.689 ms/op
                 executeQuery·p0.50:   12599.689 ms/op
                 executeQuery·p0.90:   12599.689 ms/op
                 executeQuery·p0.95:   12599.689 ms/op
                 executeQuery·p0.99:   12599.689 ms/op
                 executeQuery·p0.999:  12599.689 ms/op
                 executeQuery·p0.9999: 12599.689 ms/op
                 executeQuery·p1.00:   12599.689 ms/op

Iteration   4: 12566.135 ms/op
                 executeQuery·p0.00:   12566.135 ms/op
                 executeQuery·p0.50:   12566.135 ms/op
                 executeQuery·p0.90:   12566.135 ms/op
                 executeQuery·p0.95:   12566.135 ms/op
                 executeQuery·p0.99:   12566.135 ms/op
                 executeQuery·p0.999:  12566.135 ms/op
                 executeQuery·p0.9999: 12566.135 ms/op
                 executeQuery·p1.00:   12566.135 ms/op

Iteration   5: 12599.689 ms/op
                 executeQuery·p0.00:   12599.689 ms/op
                 executeQuery·p0.50:   12599.689 ms/op
                 executeQuery·p0.90:   12599.689 ms/op
                 executeQuery·p0.95:   12599.689 ms/op
                 executeQuery·p0.99:   12599.689 ms/op
                 executeQuery·p0.999:  12599.689 ms/op
                 executeQuery·p0.9999: 12599.689 ms/op
                 executeQuery·p1.00:   12599.689 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  12596.334 ±(99.9%) 95.822 ms/op

  Histogram, ms/op:
    [12560.000, 12565.000) = 0 
    [12565.000, 12570.000) = 1 
    [12570.000, 12575.000) = 0 
    [12575.000, 12580.000) = 0 
    [12580.000, 12585.000) = 1 
    [12585.000, 12590.000) = 0 
    [12590.000, 12595.000) = 0 
    [12595.000, 12600.000) = 2 
    [12600.000, 12605.000) = 0 
    [12605.000, 12610.000) = 0 
    [12610.000, 12615.000) = 0 
    [12615.000, 12620.000) = 0 
    [12620.000, 12625.000) = 0 
    [12625.000, 12630.000) = 0 
    [12630.000, 12635.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  12566.135 ms/op
     p(50.0000) =  12599.689 ms/op
     p(90.0000) =  12633.244 ms/op
     p(95.0000) =  12633.244 ms/op
     p(99.0000) =  12633.244 ms/op
     p(99.9000) =  12633.244 ms/op
     p(99.9900) =  12633.244 ms/op
     p(99.9990) =  12633.244 ms/op
     p(99.9999) =  12633.244 ms/op
    p(100.0000) =  12633.244 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 27.45% complete, ETA 04:17:05
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_409110600 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_409110600() {
        this(4);
    }
    public KeyValueMap_409110600(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_409110600 aggregation_state_map = new KeyValueMap_409110600();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

20166.214 ms/op
# Warmup Iteration   2: 29460.791 ms/op
# Warmup Iteration   3: 24998.052 ms/op
# Warmup Iteration   4: 19461.571 ms/op
# Warmup Iteration   5: 16424.894 ms/op
Iteration   1: 18152.948 ms/op
                 executeQuery·p0.00:   18152.948 ms/op
                 executeQuery·p0.50:   18152.948 ms/op
                 executeQuery·p0.90:   18152.948 ms/op
                 executeQuery·p0.95:   18152.948 ms/op
                 executeQuery·p0.99:   18152.948 ms/op
                 executeQuery·p0.999:  18152.948 ms/op
                 executeQuery·p0.9999: 18152.948 ms/op
                 executeQuery·p1.00:   18152.948 ms/op

Iteration   2: 19025.363 ms/op
                 executeQuery·p0.00:   19025.363 ms/op
                 executeQuery·p0.50:   19025.363 ms/op
                 executeQuery·p0.90:   19025.363 ms/op
                 executeQuery·p0.95:   19025.363 ms/op
                 executeQuery·p0.99:   19025.363 ms/op
                 executeQuery·p0.999:  19025.363 ms/op
                 executeQuery·p0.9999: 19025.363 ms/op
                 executeQuery·p1.00:   19025.363 ms/op

Iteration   3: 19562.234 ms/op
                 executeQuery·p0.00:   19562.234 ms/op
                 executeQuery·p0.50:   19562.234 ms/op
                 executeQuery·p0.90:   19562.234 ms/op
                 executeQuery·p0.95:   19562.234 ms/op
                 executeQuery·p0.99:   19562.234 ms/op
                 executeQuery·p0.999:  19562.234 ms/op
                 executeQuery·p0.9999: 19562.234 ms/op
                 executeQuery·p1.00:   19562.234 ms/op

Iteration   4: 28152.168 ms/op
                 executeQuery·p0.00:   28152.168 ms/op
                 executeQuery·p0.50:   28152.168 ms/op
                 executeQuery·p0.90:   28152.168 ms/op
                 executeQuery·p0.95:   28152.168 ms/op
                 executeQuery·p0.99:   28152.168 ms/op
                 executeQuery·p0.999:  28152.168 ms/op
                 executeQuery·p0.9999: 28152.168 ms/op
                 executeQuery·p1.00:   28152.168 ms/op

Iteration   5: 20031.996 ms/op
                 executeQuery·p0.00:   20031.996 ms/op
                 executeQuery·p0.50:   20031.996 ms/op
                 executeQuery·p0.90:   20031.996 ms/op
                 executeQuery·p0.95:   20031.996 ms/op
                 executeQuery·p0.99:   20031.996 ms/op
                 executeQuery·p0.999:  20031.996 ms/op
                 executeQuery·p0.9999: 20031.996 ms/op
                 executeQuery·p1.00:   20031.996 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  20984.942 ±(99.9%) 15660.513 ms/op

  Histogram, ms/op:
    [18000.000, 19000.000) = 1 
    [19000.000, 20000.000) = 2 
    [20000.000, 21000.000) = 1 
    [21000.000, 22000.000) = 0 
    [22000.000, 23000.000) = 0 
    [23000.000, 24000.000) = 0 
    [24000.000, 25000.000) = 0 
    [25000.000, 26000.000) = 0 
    [26000.000, 27000.000) = 0 
    [27000.000, 28000.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  18152.948 ms/op
     p(50.0000) =  19562.234 ms/op
     p(90.0000) =  28152.168 ms/op
     p(95.0000) =  28152.168 ms/op
     p(99.0000) =  28152.168 ms/op
     p(99.9000) =  28152.168 ms/op
     p(99.9900) =  28152.168 ms/op
     p(99.9990) =  28152.168 ms/op
     p(99.9999) =  28152.168 ms/op
    p(100.0000) =  28152.168 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 28.43% complete, ETA 04:17:09
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1758629107 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1758629107() {
        this(4);
    }
    public KeyValueMap_1758629107(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1758629107 aggregation_state_map = new KeyValueMap_1758629107();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

54760.833 ms/op
# Warmup Iteration   2: 51472.499 ms/op
# Warmup Iteration   3: 49794.777 ms/op
# Warmup Iteration   4: 52277.805 ms/op
# Warmup Iteration   5: 50465.866 ms/op
Iteration   1: 51606.716 ms/op
                 executeQuery·p0.00:   51606.716 ms/op
                 executeQuery·p0.50:   51606.716 ms/op
                 executeQuery·p0.90:   51606.716 ms/op
                 executeQuery·p0.95:   51606.716 ms/op
                 executeQuery·p0.99:   51606.716 ms/op
                 executeQuery·p0.999:  51606.716 ms/op
                 executeQuery·p0.9999: 51606.716 ms/op
                 executeQuery·p1.00:   51606.716 ms/op

Iteration   2: 54156.853 ms/op
                 executeQuery·p0.00:   54156.853 ms/op
                 executeQuery·p0.50:   54156.853 ms/op
                 executeQuery·p0.90:   54156.853 ms/op
                 executeQuery·p0.95:   54156.853 ms/op
                 executeQuery·p0.99:   54156.853 ms/op
                 executeQuery·p0.999:  54156.853 ms/op
                 executeQuery·p0.9999: 54156.853 ms/op
                 executeQuery·p1.00:   54156.853 ms/op

Iteration   3: 50197.430 ms/op
                 executeQuery·p0.00:   50197.430 ms/op
                 executeQuery·p0.50:   50197.430 ms/op
                 executeQuery·p0.90:   50197.430 ms/op
                 executeQuery·p0.95:   50197.430 ms/op
                 executeQuery·p0.99:   50197.430 ms/op
                 executeQuery·p0.999:  50197.430 ms/op
                 executeQuery·p0.9999: 50197.430 ms/op
                 executeQuery·p1.00:   50197.430 ms/op

Iteration   4: 50398.757 ms/op
                 executeQuery·p0.00:   50398.757 ms/op
                 executeQuery·p0.50:   50398.757 ms/op
                 executeQuery·p0.90:   50398.757 ms/op
                 executeQuery·p0.95:   50398.757 ms/op
                 executeQuery·p0.99:   50398.757 ms/op
                 executeQuery·p0.999:  50398.757 ms/op
                 executeQuery·p0.9999: 50398.757 ms/op
                 executeQuery·p1.00:   50398.757 ms/op

Iteration   5: 53083.111 ms/op
                 executeQuery·p0.00:   53083.111 ms/op
                 executeQuery·p0.50:   53083.111 ms/op
                 executeQuery·p0.90:   53083.111 ms/op
                 executeQuery·p0.95:   53083.111 ms/op
                 executeQuery·p0.99:   53083.111 ms/op
                 executeQuery·p0.999:  53083.111 ms/op
                 executeQuery·p0.9999: 53083.111 ms/op
                 executeQuery·p1.00:   53083.111 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  51888.574 ±(99.9%) 6594.326 ms/op

  Histogram, ms/op:
    [50000.000, 50500.000) = 2 
    [50500.000, 51000.000) = 0 
    [51000.000, 51500.000) = 0 
    [51500.000, 52000.000) = 1 
    [52000.000, 52500.000) = 0 
    [52500.000, 53000.000) = 0 
    [53000.000, 53500.000) = 1 
    [53500.000, 54000.000) = 0 
    [54000.000, 54500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  50197.430 ms/op
     p(50.0000) =  51606.716 ms/op
     p(90.0000) =  54156.853 ms/op
     p(95.0000) =  54156.853 ms/op
     p(99.0000) =  54156.853 ms/op
     p(99.9000) =  54156.853 ms/op
     p(99.9900) =  54156.853 ms/op
     p(99.9990) =  54156.853 ms/op
     p(99.9999) =  54156.853 ms/op
    p(100.0000) =  54156.853 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 29.41% complete, ETA 04:37:40
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

47.113 ±(99.9%) 4.244 ms/op
# Warmup Iteration   2: 46.947 ±(99.9%) 0.282 ms/op
# Warmup Iteration   3: 46.756 ±(99.9%) 0.287 ms/op
# Warmup Iteration   4: 45.566 ±(99.9%) 0.202 ms/op
# Warmup Iteration   5: 45.530 ±(99.9%) 0.156 ms/op
Iteration   1: 45.578 ±(99.9%) 0.155 ms/op
                 executeFilterQuery·p0.00:   44.237 ms/op
                 executeFilterQuery·p0.50:   45.613 ms/op
                 executeFilterQuery·p0.90:   46.137 ms/op
                 executeFilterQuery·p0.95:   46.406 ms/op
                 executeFilterQuery·p0.99:   48.117 ms/op
                 executeFilterQuery·p0.999:  52.363 ms/op
                 executeFilterQuery·p0.9999: 52.363 ms/op
                 executeFilterQuery·p1.00:   52.363 ms/op

Iteration   2: 45.791 ±(99.9%) 0.119 ms/op
                 executeFilterQuery·p0.00:   44.302 ms/op
                 executeFilterQuery·p0.50:   45.744 ms/op
                 executeFilterQuery·p0.90:   46.399 ms/op
                 executeFilterQuery·p0.95:   46.609 ms/op
                 executeFilterQuery·p0.99:   47.567 ms/op
                 executeFilterQuery·p0.999:  48.038 ms/op
                 executeFilterQuery·p0.9999: 48.038 ms/op
                 executeFilterQuery·p1.00:   48.038 ms/op

Iteration   3: 45.112 ±(99.9%) 0.172 ms/op
                 executeFilterQuery·p0.00:   43.516 ms/op
                 executeFilterQuery·p0.50:   45.154 ms/op
                 executeFilterQuery·p0.90:   46.072 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   47.355 ms/op
                 executeFilterQuery·p0.999:  47.841 ms/op
                 executeFilterQuery·p0.9999: 47.841 ms/op
                 executeFilterQuery·p1.00:   47.841 ms/op

Iteration   4: 45.657 ±(99.9%) 0.138 ms/op
                 executeFilterQuery·p0.00:   44.171 ms/op
                 executeFilterQuery·p0.50:   45.613 ms/op
                 executeFilterQuery·p0.90:   46.137 ms/op
                 executeFilterQuery·p0.95:   46.665 ms/op
                 executeFilterQuery·p0.99:   48.840 ms/op
                 executeFilterQuery·p0.999:  49.021 ms/op
                 executeFilterQuery·p0.9999: 49.021 ms/op
                 executeFilterQuery·p1.00:   49.021 ms/op

Iteration   5: 45.521 ±(99.9%) 0.127 ms/op
                 executeFilterQuery·p0.00:   43.909 ms/op
                 executeFilterQuery·p0.50:   45.613 ms/op
                 executeFilterQuery·p0.90:   46.078 ms/op
                 executeFilterQuery·p0.95:   46.203 ms/op
                 executeFilterQuery·p0.99:   46.930 ms/op
                 executeFilterQuery·p0.999:  49.611 ms/op
                 executeFilterQuery·p0.9999: 49.611 ms/op
                 executeFilterQuery·p1.00:   49.611 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1091
  mean =     45.531 ±(99.9%) 0.067 ms/op

  Histogram, ms/op:
    [43.000, 44.000) = 10 
    [44.000, 45.000) = 181 
    [45.000, 46.000) = 674 
    [46.000, 47.000) = 209 
    [47.000, 48.000) = 10 
    [48.000, 49.000) = 4 
    [49.000, 50.000) = 2 
    [50.000, 51.000) = 0 
    [51.000, 52.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     43.516 ms/op
     p(50.0000) =     45.613 ms/op
     p(90.0000) =     46.203 ms/op
     p(95.0000) =     46.465 ms/op
     p(99.0000) =     47.519 ms/op
     p(99.9000) =     52.110 ms/op
     p(99.9900) =     52.363 ms/op
     p(99.9990) =     52.363 ms/op
     p(99.9999) =     52.363 ms/op
    p(100.0000) =     52.363 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 30.39% complete, ETA 04:28:52
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

49.273 ±(99.9%) 4.721 ms/op
# Warmup Iteration   2: 47.204 ±(99.9%) 0.132 ms/op
# Warmup Iteration   3: 46.825 ±(99.9%) 0.246 ms/op
# Warmup Iteration   4: 45.918 ±(99.9%) 0.095 ms/op
# Warmup Iteration   5: 46.550 ±(99.9%) 0.197 ms/op
Iteration   1: 47.160 ±(99.9%) 0.130 ms/op
                 executeFilterQuery·p0.00:   45.744 ms/op
                 executeFilterQuery·p0.50:   47.186 ms/op
                 executeFilterQuery·p0.90:   47.828 ms/op
                 executeFilterQuery·p0.95:   47.933 ms/op
                 executeFilterQuery·p0.99:   49.692 ms/op
                 executeFilterQuery·p0.999:  50.659 ms/op
                 executeFilterQuery·p0.9999: 50.659 ms/op
                 executeFilterQuery·p1.00:   50.659 ms/op

Iteration   2: 46.735 ±(99.9%) 0.185 ms/op
                 executeFilterQuery·p0.00:   44.892 ms/op
                 executeFilterQuery·p0.50:   46.858 ms/op
                 executeFilterQuery·p0.90:   47.514 ms/op
                 executeFilterQuery·p0.95:   47.730 ms/op
                 executeFilterQuery·p0.99:   49.050 ms/op
                 executeFilterQuery·p0.999:  49.742 ms/op
                 executeFilterQuery·p0.9999: 49.742 ms/op
                 executeFilterQuery·p1.00:   49.742 ms/op

Iteration   3: 46.417 ±(99.9%) 0.230 ms/op
                 executeFilterQuery·p0.00:   44.827 ms/op
                 executeFilterQuery·p0.50:   46.137 ms/op
                 executeFilterQuery·p0.90:   47.317 ms/op
                 executeFilterQuery·p0.95:   48.415 ms/op
                 executeFilterQuery·p0.99:   51.134 ms/op
                 executeFilterQuery·p0.999:  53.346 ms/op
                 executeFilterQuery·p0.9999: 53.346 ms/op
                 executeFilterQuery·p1.00:   53.346 ms/op

Iteration   4: 46.652 ±(99.9%) 0.085 ms/op
                 executeFilterQuery·p0.00:   45.285 ms/op
                 executeFilterQuery·p0.50:   46.662 ms/op
                 executeFilterQuery·p0.90:   47.120 ms/op
                 executeFilterQuery·p0.95:   47.186 ms/op
                 executeFilterQuery·p0.99:   47.308 ms/op
                 executeFilterQuery·p0.999:  47.514 ms/op
                 executeFilterQuery·p0.9999: 47.514 ms/op
                 executeFilterQuery·p1.00:   47.514 ms/op

Iteration   5: 45.683 ±(99.9%) 0.091 ms/op
                 executeFilterQuery·p0.00:   44.761 ms/op
                 executeFilterQuery·p0.50:   45.744 ms/op
                 executeFilterQuery·p0.90:   46.137 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   46.662 ms/op
                 executeFilterQuery·p0.999:  46.924 ms/op
                 executeFilterQuery·p0.9999: 46.924 ms/op
                 executeFilterQuery·p1.00:   46.924 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1069
  mean =     46.524 ±(99.9%) 0.084 ms/op

  Histogram, ms/op:
    [44.000, 45.000) = 17 
    [45.000, 46.000) = 346 
    [46.000, 47.000) = 413 
    [47.000, 48.000) = 269 
    [48.000, 49.000) = 12 
    [49.000, 50.000) = 9 
    [50.000, 51.000) = 1 
    [51.000, 52.000) = 1 
    [52.000, 53.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     44.761 ms/op
     p(50.0000) =     46.465 ms/op
     p(90.0000) =     47.448 ms/op
     p(95.0000) =     47.710 ms/op
     p(99.0000) =     49.106 ms/op
     p(99.9000) =     53.209 ms/op
     p(99.9900) =     53.346 ms/op
     p(99.9990) =     53.346 ms/op
     p(99.9999) =     53.346 ms/op
    p(100.0000) =     53.346 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 31.37% complete, ETA 04:20:30
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

51.044 ±(99.9%) 4.984 ms/op
# Warmup Iteration   2: 50.849 ±(99.9%) 0.189 ms/op
# Warmup Iteration   3: 50.803 ±(99.9%) 0.174 ms/op
# Warmup Iteration   4: 49.488 ±(99.9%) 0.405 ms/op
# Warmup Iteration   5: 48.155 ±(99.9%) 0.386 ms/op
Iteration   1: 48.613 ±(99.9%) 0.348 ms/op
                 executeFilterQuery·p0.00:   46.858 ms/op
                 executeFilterQuery·p0.50:   48.300 ms/op
                 executeFilterQuery·p0.90:   50.659 ms/op
                 executeFilterQuery·p0.95:   50.725 ms/op
                 executeFilterQuery·p0.99:   51.354 ms/op
                 executeFilterQuery·p0.999:  51.708 ms/op
                 executeFilterQuery·p0.9999: 51.708 ms/op
                 executeFilterQuery·p1.00:   51.708 ms/op

Iteration   2: 48.846 ±(99.9%) 0.377 ms/op
                 executeFilterQuery·p0.00:   46.662 ms/op
                 executeFilterQuery·p0.50:   50.004 ms/op
                 executeFilterQuery·p0.90:   50.397 ms/op
                 executeFilterQuery·p0.95:   50.594 ms/op
                 executeFilterQuery·p0.99:   51.377 ms/op
                 executeFilterQuery·p0.999:  51.446 ms/op
                 executeFilterQuery·p0.9999: 51.446 ms/op
                 executeFilterQuery·p1.00:   51.446 ms/op

Iteration   3: 48.258 ±(99.9%) 0.392 ms/op
                 executeFilterQuery·p0.00:   46.596 ms/op
                 executeFilterQuery·p0.50:   46.989 ms/op
                 executeFilterQuery·p0.90:   50.397 ms/op
                 executeFilterQuery·p0.95:   50.594 ms/op
                 executeFilterQuery·p0.99:   51.039 ms/op
                 executeFilterQuery·p0.999:  52.363 ms/op
                 executeFilterQuery·p0.9999: 52.363 ms/op
                 executeFilterQuery·p1.00:   52.363 ms/op

Iteration   4: 48.176 ±(99.9%) 0.381 ms/op
                 executeFilterQuery·p0.00:   46.596 ms/op
                 executeFilterQuery·p0.50:   46.989 ms/op
                 executeFilterQuery·p0.90:   50.332 ms/op
                 executeFilterQuery·p0.95:   50.440 ms/op
                 executeFilterQuery·p0.99:   50.777 ms/op
                 executeFilterQuery·p0.999:  51.315 ms/op
                 executeFilterQuery·p0.9999: 51.315 ms/op
                 executeFilterQuery·p1.00:   51.315 ms/op

Iteration   5: 47.435 ±(99.9%) 0.230 ms/op
                 executeFilterQuery·p0.00:   46.662 ms/op
                 executeFilterQuery·p0.50:   47.055 ms/op
                 executeFilterQuery·p0.90:   49.080 ms/op
                 executeFilterQuery·p0.95:   50.266 ms/op
                 executeFilterQuery·p0.99:   50.594 ms/op
                 executeFilterQuery·p0.999:  50.790 ms/op
                 executeFilterQuery·p0.9999: 50.790 ms/op
                 executeFilterQuery·p1.00:   50.790 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1030
  mean =     48.260 ±(99.9%) 0.162 ms/op

  Histogram, ms/op:
    [46.000, 46.500) = 0 
    [46.500, 47.000) = 381 
    [47.000, 47.500) = 201 
    [47.500, 48.000) = 22 
    [48.000, 48.500) = 29 
    [48.500, 49.000) = 19 
    [49.000, 49.500) = 18 
    [49.500, 50.000) = 25 
    [50.000, 50.500) = 271 
    [50.500, 51.000) = 56 
    [51.000, 51.500) = 6 
    [51.500, 52.000) = 1 
    [52.000, 52.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     46.596 ms/op
     p(50.0000) =     47.186 ms/op
     p(90.0000) =     50.397 ms/op
     p(95.0000) =     50.594 ms/op
     p(99.0000) =     50.856 ms/op
     p(99.9000) =     52.343 ms/op
     p(99.9900) =     52.363 ms/op
     p(99.9990) =     52.363 ms/op
     p(99.9999) =     52.363 ms/op
    p(100.0000) =     52.363 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 32.35% complete, ETA 04:12:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

566.406 ±(99.9%) 466.073 ms/op
# Warmup Iteration   2: 445.280 ±(99.9%) 8.283 ms/op
# Warmup Iteration   3: 452.529 ±(99.9%) 5.119 ms/op
# Warmup Iteration   4: 450.477 ±(99.9%) 3.787 ms/op
# Warmup Iteration   5: 448.038 ±(99.9%) 5.170 ms/op
Iteration   1: 447.446 ±(99.9%) 6.740 ms/op
                 executeFilterQuery·p0.00:   434.110 ms/op
                 executeFilterQuery·p0.50:   447.218 ms/op
                 executeFilterQuery·p0.90:   460.115 ms/op
                 executeFilterQuery·p0.95:   463.051 ms/op
                 executeFilterQuery·p0.99:   463.471 ms/op
                 executeFilterQuery·p0.999:  463.471 ms/op
                 executeFilterQuery·p0.9999: 463.471 ms/op
                 executeFilterQuery·p1.00:   463.471 ms/op

Iteration   2: 447.035 ±(99.9%) 4.916 ms/op
                 executeFilterQuery·p0.00:   432.538 ms/op
                 executeFilterQuery·p0.50:   448.791 ms/op
                 executeFilterQuery·p0.90:   453.614 ms/op
                 executeFilterQuery·p0.95:   456.969 ms/op
                 executeFilterQuery·p0.99:   457.703 ms/op
                 executeFilterQuery·p0.999:  457.703 ms/op
                 executeFilterQuery·p0.9999: 457.703 ms/op
                 executeFilterQuery·p1.00:   457.703 ms/op

Iteration   3: 448.266 ±(99.9%) 6.800 ms/op
                 executeFilterQuery·p0.00:   430.965 ms/op
                 executeFilterQuery·p0.50:   447.742 ms/op
                 executeFilterQuery·p0.90:   457.703 ms/op
                 executeFilterQuery·p0.95:   459.381 ms/op
                 executeFilterQuery·p0.99:   459.801 ms/op
                 executeFilterQuery·p0.999:  459.801 ms/op
                 executeFilterQuery·p0.9999: 459.801 ms/op
                 executeFilterQuery·p1.00:   459.801 ms/op

Iteration   4: 442.773 ±(99.9%) 7.521 ms/op
                 executeFilterQuery·p0.00:   430.965 ms/op
                 executeFilterQuery·p0.50:   440.402 ms/op
                 executeFilterQuery·p0.90:   455.082 ms/op
                 executeFilterQuery·p0.95:   458.437 ms/op
                 executeFilterQuery·p0.99:   459.276 ms/op
                 executeFilterQuery·p0.999:  459.276 ms/op
                 executeFilterQuery·p0.9999: 459.276 ms/op
                 executeFilterQuery·p1.00:   459.276 ms/op

Iteration   5: 443.001 ±(99.9%) 7.412 ms/op
                 executeFilterQuery·p0.00:   429.916 ms/op
                 executeFilterQuery·p0.50:   445.121 ms/op
                 executeFilterQuery·p0.90:   456.969 ms/op
                 executeFilterQuery·p0.95:   458.228 ms/op
                 executeFilterQuery·p0.99:   458.228 ms/op
                 executeFilterQuery·p0.999:  458.228 ms/op
                 executeFilterQuery·p0.9999: 458.228 ms/op
                 executeFilterQuery·p1.00:   458.228 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 115
  mean =    445.704 ±(99.9%) 2.740 ms/op

  Histogram, ms/op:
    [420.000, 425.000) = 0 
    [425.000, 430.000) = 2 
    [430.000, 435.000) = 16 
    [435.000, 440.000) = 17 
    [440.000, 445.000) = 10 
    [445.000, 450.000) = 28 
    [450.000, 455.000) = 23 
    [455.000, 460.000) = 17 
    [460.000, 465.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    429.916 ms/op
     p(50.0000) =    445.645 ms/op
     p(90.0000) =    457.389 ms/op
     p(95.0000) =    458.228 ms/op
     p(99.0000) =    463.135 ms/op
     p(99.9000) =    463.471 ms/op
     p(99.9900) =    463.471 ms/op
     p(99.9990) =    463.471 ms/op
     p(99.9999) =    463.471 ms/op
    p(100.0000) =    463.471 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 33.33% complete, ETA 04:05:03
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

687.167 ±(99.9%) 828.564 ms/op
# Warmup Iteration   2: 454.963 ±(99.9%) 4.035 ms/op
# Warmup Iteration   3: 447.924 ±(99.9%) 3.991 ms/op
# Warmup Iteration   4: 458.180 ±(99.9%) 3.830 ms/op
# Warmup Iteration   5: 461.659 ±(99.9%) 6.663 ms/op
Iteration   1: 458.966 ±(99.9%) 9.699 ms/op
                 executeFilterQuery·p0.00:   436.208 ms/op
                 executeFilterQuery·p0.50:   460.587 ms/op
                 executeFilterQuery·p0.90:   474.218 ms/op
                 executeFilterQuery·p0.95:   476.788 ms/op
                 executeFilterQuery·p0.99:   477.102 ms/op
                 executeFilterQuery·p0.999:  477.102 ms/op
                 executeFilterQuery·p0.9999: 477.102 ms/op
                 executeFilterQuery·p1.00:   477.102 ms/op

Iteration   2: 453.986 ±(99.9%) 7.775 ms/op
                 executeFilterQuery·p0.00:   438.829 ms/op
                 executeFilterQuery·p0.50:   456.393 ms/op
                 executeFilterQuery·p0.90:   460.325 ms/op
                 executeFilterQuery·p0.95:   477.705 ms/op
                 executeFilterQuery·p0.99:   480.772 ms/op
                 executeFilterQuery·p0.999:  480.772 ms/op
                 executeFilterQuery·p0.9999: 480.772 ms/op
                 executeFilterQuery·p1.00:   480.772 ms/op

Iteration   3: 440.220 ±(99.9%) 4.061 ms/op
                 executeFilterQuery·p0.00:   433.062 ms/op
                 executeFilterQuery·p0.50:   438.829 ms/op
                 executeFilterQuery·p0.90:   445.435 ms/op
                 executeFilterQuery·p0.95:   452.775 ms/op
                 executeFilterQuery·p0.99:   454.558 ms/op
                 executeFilterQuery·p0.999:  454.558 ms/op
                 executeFilterQuery·p0.9999: 454.558 ms/op
                 executeFilterQuery·p1.00:   454.558 ms/op

Iteration   4: 438.647 ±(99.9%) 5.922 ms/op
                 executeFilterQuery·p0.00:   430.440 ms/op
                 executeFilterQuery·p0.50:   433.586 ms/op
                 executeFilterQuery·p0.90:   450.363 ms/op
                 executeFilterQuery·p0.95:   450.363 ms/op
                 executeFilterQuery·p0.99:   450.363 ms/op
                 executeFilterQuery·p0.999:  450.363 ms/op
                 executeFilterQuery·p0.9999: 450.363 ms/op
                 executeFilterQuery·p1.00:   450.363 ms/op

Iteration   5: 437.461 ±(99.9%) 4.449 ms/op
                 executeFilterQuery·p0.00:   431.489 ms/op
                 executeFilterQuery·p0.50:   435.159 ms/op
                 executeFilterQuery·p0.90:   445.225 ms/op
                 executeFilterQuery·p0.95:   447.742 ms/op
                 executeFilterQuery·p0.99:   448.266 ms/op
                 executeFilterQuery·p0.999:  448.266 ms/op
                 executeFilterQuery·p0.9999: 448.266 ms/op
                 executeFilterQuery·p1.00:   448.266 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 113
  mean =    445.668 ±(99.9%) 3.822 ms/op

  Histogram, ms/op:
    [430.000, 435.000) = 25 
    [435.000, 440.000) = 19 
    [440.000, 445.000) = 19 
    [445.000, 450.000) = 15 
    [450.000, 455.000) = 9 
    [455.000, 460.000) = 11 
    [460.000, 465.000) = 6 
    [465.000, 470.000) = 3 
    [470.000, 475.000) = 3 
    [475.000, 480.000) = 2 
    [480.000, 485.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    430.440 ms/op
     p(50.0000) =    443.548 ms/op
     p(90.0000) =    462.841 ms/op
     p(95.0000) =    470.444 ms/op
     p(99.0000) =    480.258 ms/op
     p(99.9000) =    480.772 ms/op
     p(99.9900) =    480.772 ms/op
     p(99.9990) =    480.772 ms/op
     p(99.9999) =    480.772 ms/op
    p(100.0000) =    480.772 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 34.31% complete, ETA 03:57:50
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

744.639 ±(99.9%) 887.672 ms/op
# Warmup Iteration   2: 485.166 ±(99.9%) 11.071 ms/op
# Warmup Iteration   3: 497.075 ±(99.9%) 5.019 ms/op
# Warmup Iteration   4: 496.226 ±(99.9%) 6.240 ms/op
# Warmup Iteration   5: 509.084 ±(99.9%) 7.854 ms/op
Iteration   1: 506.567 ±(99.9%) 8.504 ms/op
                 executeFilterQuery·p0.00:   484.442 ms/op
                 executeFilterQuery·p0.50:   505.938 ms/op
                 executeFilterQuery·p0.90:   518.678 ms/op
                 executeFilterQuery·p0.95:   530.003 ms/op
                 executeFilterQuery·p0.99:   530.579 ms/op
                 executeFilterQuery·p0.999:  530.579 ms/op
                 executeFilterQuery·p0.9999: 530.579 ms/op
                 executeFilterQuery·p1.00:   530.579 ms/op

Iteration   2: 483.069 ±(99.9%) 16.155 ms/op
                 executeFilterQuery·p0.00:   471.335 ms/op
                 executeFilterQuery·p0.50:   477.626 ms/op
                 executeFilterQuery·p0.90:   513.068 ms/op
                 executeFilterQuery·p0.95:   546.937 ms/op
                 executeFilterQuery·p0.99:   550.502 ms/op
                 executeFilterQuery·p0.999:  550.502 ms/op
                 executeFilterQuery·p0.9999: 550.502 ms/op
                 executeFilterQuery·p1.00:   550.502 ms/op

Iteration   3: 474.528 ±(99.9%) 2.308 ms/op
                 executeFilterQuery·p0.00:   469.238 ms/op
                 executeFilterQuery·p0.50:   473.956 ms/op
                 executeFilterQuery·p0.90:   478.518 ms/op
                 executeFilterQuery·p0.95:   480.903 ms/op
                 executeFilterQuery·p0.99:   481.296 ms/op
                 executeFilterQuery·p0.999:  481.296 ms/op
                 executeFilterQuery·p0.9999: 481.296 ms/op
                 executeFilterQuery·p1.00:   481.296 ms/op

Iteration   4: 490.059 ±(99.9%) 12.955 ms/op
                 executeFilterQuery·p0.00:   473.432 ms/op
                 executeFilterQuery·p0.50:   483.394 ms/op
                 executeFilterQuery·p0.90:   513.488 ms/op
                 executeFilterQuery·p0.95:   513.802 ms/op
                 executeFilterQuery·p0.99:   513.802 ms/op
                 executeFilterQuery·p0.999:  513.802 ms/op
                 executeFilterQuery·p0.9999: 513.802 ms/op
                 executeFilterQuery·p1.00:   513.802 ms/op

Iteration   5: 485.790 ±(99.9%) 10.800 ms/op
                 executeFilterQuery·p0.00:   473.432 ms/op
                 executeFilterQuery·p0.50:   480.772 ms/op
                 executeFilterQuery·p0.90:   510.552 ms/op
                 executeFilterQuery·p0.95:   513.645 ms/op
                 executeFilterQuery·p0.99:   513.802 ms/op
                 executeFilterQuery·p0.999:  513.802 ms/op
                 executeFilterQuery·p0.9999: 513.802 ms/op
                 executeFilterQuery·p1.00:   513.802 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 105
  mean =    487.698 ±(99.9%) 5.522 ms/op

  Histogram, ms/op:
    [460.000, 470.000) = 1 
    [470.000, 480.000) = 54 
    [480.000, 490.000) = 12 
    [490.000, 500.000) = 10 
    [500.000, 510.000) = 13 
    [510.000, 520.000) = 13 
    [520.000, 530.000) = 0 
    [530.000, 540.000) = 1 
    [540.000, 550.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    469.238 ms/op
     p(50.0000) =    479.199 ms/op
     p(90.0000) =    513.278 ms/op
     p(95.0000) =    514.536 ms/op
     p(99.0000) =    549.307 ms/op
     p(99.9000) =    550.502 ms/op
     p(99.9900) =    550.502 ms/op
     p(99.9990) =    550.502 ms/op
     p(99.9999) =    550.502 ms/op
    p(100.0000) =    550.502 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 35.29% complete, ETA 03:50:58
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1691.353 ±(99.9%) 4831.293 ms/op
# Warmup Iteration   2: 888.668 ±(99.9%) 23.616 ms/op
# Warmup Iteration   3: 915.312 ±(99.9%) 26.339 ms/op
# Warmup Iteration   4: 886.484 ±(99.9%) 18.231 ms/op
# Warmup Iteration   5: 878.182 ±(99.9%) 8.269 ms/op
Iteration   1: 884.561 ±(99.9%) 15.573 ms/op
                 executeFilterQuery·p0.00:   867.172 ms/op
                 executeFilterQuery·p0.50:   882.377 ms/op
                 executeFilterQuery·p0.90:   907.123 ms/op
                 executeFilterQuery·p0.95:   908.067 ms/op
                 executeFilterQuery·p0.99:   908.067 ms/op
                 executeFilterQuery·p0.999:  908.067 ms/op
                 executeFilterQuery·p0.9999: 908.067 ms/op
                 executeFilterQuery·p1.00:   908.067 ms/op

Iteration   2: 877.920 ±(99.9%) 17.819 ms/op
                 executeFilterQuery·p0.00:   856.687 ms/op
                 executeFilterQuery·p0.50:   874.512 ms/op
                 executeFilterQuery·p0.90:   902.195 ms/op
                 executeFilterQuery·p0.95:   905.970 ms/op
                 executeFilterQuery·p0.99:   905.970 ms/op
                 executeFilterQuery·p0.999:  905.970 ms/op
                 executeFilterQuery·p0.9999: 905.970 ms/op
                 executeFilterQuery·p1.00:   905.970 ms/op

Iteration   3: 885.959 ±(99.9%) 14.762 ms/op
                 executeFilterQuery·p0.00:   869.270 ms/op
                 executeFilterQuery·p0.50:   883.425 ms/op
                 executeFilterQuery·p0.90:   906.179 ms/op
                 executeFilterQuery·p0.95:   908.067 ms/op
                 executeFilterQuery·p0.99:   908.067 ms/op
                 executeFilterQuery·p0.999:  908.067 ms/op
                 executeFilterQuery·p0.9999: 908.067 ms/op
                 executeFilterQuery·p1.00:   908.067 ms/op

Iteration   4: 897.232 ±(99.9%) 12.912 ms/op
                 executeFilterQuery·p0.00:   882.901 ms/op
                 executeFilterQuery·p0.50:   899.678 ms/op
                 executeFilterQuery·p0.90:   912.576 ms/op
                 executeFilterQuery·p0.95:   915.407 ms/op
                 executeFilterQuery·p0.99:   915.407 ms/op
                 executeFilterQuery·p0.999:  915.407 ms/op
                 executeFilterQuery·p0.9999: 915.407 ms/op
                 executeFilterQuery·p1.00:   915.407 ms/op

Iteration   5: 872.765 ±(99.9%) 15.036 ms/op
                 executeFilterQuery·p0.00:   858.784 ms/op
                 executeFilterQuery·p0.50:   870.842 ms/op
                 executeFilterQuery·p0.90:   891.185 ms/op
                 executeFilterQuery·p0.95:   893.387 ms/op
                 executeFilterQuery·p0.99:   893.387 ms/op
                 executeFilterQuery·p0.999:  893.387 ms/op
                 executeFilterQuery·p0.9999: 893.387 ms/op
                 executeFilterQuery·p1.00:   893.387 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 60
  mean =    883.687 ±(99.9%) 6.364 ms/op

  Histogram, ms/op:
    [850.000, 855.000) = 0 
    [855.000, 860.000) = 3 
    [860.000, 865.000) = 3 
    [865.000, 870.000) = 5 
    [870.000, 875.000) = 6 
    [875.000, 880.000) = 8 
    [880.000, 885.000) = 12 
    [885.000, 890.000) = 4 
    [890.000, 895.000) = 5 
    [895.000, 900.000) = 3 
    [900.000, 905.000) = 6 
    [905.000, 910.000) = 4 
    [910.000, 915.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    856.687 ms/op
     p(50.0000) =    882.901 ms/op
     p(90.0000) =    904.921 ms/op
     p(95.0000) =    907.962 ms/op
     p(99.0000) =    915.407 ms/op
     p(99.9000) =    915.407 ms/op
     p(99.9900) =    915.407 ms/op
     p(99.9990) =    915.407 ms/op
     p(99.9999) =    915.407 ms/op
    p(100.0000) =    915.407 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 36.27% complete, ETA 03:44:27
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1689.256 ±(99.9%) 4501.003 ms/op
# Warmup Iteration   2: 879.056 ±(99.9%) 28.192 ms/op
# Warmup Iteration   3: 887.095 ±(99.9%) 26.430 ms/op
# Warmup Iteration   4: 872.066 ±(99.9%) 7.561 ms/op
# Warmup Iteration   5: 888.843 ±(99.9%) 17.231 ms/op
Iteration   1: 902.737 ±(99.9%) 14.818 ms/op
                 executeFilterQuery·p0.00:   881.852 ms/op
                 executeFilterQuery·p0.50:   904.397 ms/op
                 executeFilterQuery·p0.90:   921.803 ms/op
                 executeFilterQuery·p0.95:   925.893 ms/op
                 executeFilterQuery·p0.99:   925.893 ms/op
                 executeFilterQuery·p0.999:  925.893 ms/op
                 executeFilterQuery·p0.9999: 925.893 ms/op
                 executeFilterQuery·p1.00:   925.893 ms/op

Iteration   2: 904.746 ±(99.9%) 12.051 ms/op
                 executeFilterQuery·p0.00:   895.484 ms/op
                 executeFilterQuery·p0.50:   900.727 ms/op
                 executeFilterQuery·p0.90:   919.287 ms/op
                 executeFilterQuery·p0.95:   919.601 ms/op
                 executeFilterQuery·p0.99:   919.601 ms/op
                 executeFilterQuery·p0.999:  919.601 ms/op
                 executeFilterQuery·p0.9999: 919.601 ms/op
                 executeFilterQuery·p1.00:   919.601 ms/op

Iteration   3: 884.911 ±(99.9%) 22.572 ms/op
                 executeFilterQuery·p0.00:   859.832 ms/op
                 executeFilterQuery·p0.50:   879.231 ms/op
                 executeFilterQuery·p0.90:   911.317 ms/op
                 executeFilterQuery·p0.95:   912.261 ms/op
                 executeFilterQuery·p0.99:   912.261 ms/op
                 executeFilterQuery·p0.999:  912.261 ms/op
                 executeFilterQuery·p0.9999: 912.261 ms/op
                 executeFilterQuery·p1.00:   912.261 ms/op

Iteration   4: 874.687 ±(99.9%) 11.832 ms/op
                 executeFilterQuery·p0.00:   856.687 ms/op
                 executeFilterQuery·p0.50:   876.085 ms/op
                 executeFilterQuery·p0.90:   884.998 ms/op
                 executeFilterQuery·p0.95:   884.998 ms/op
                 executeFilterQuery·p0.99:   884.998 ms/op
                 executeFilterQuery·p0.999:  884.998 ms/op
                 executeFilterQuery·p0.9999: 884.998 ms/op
                 executeFilterQuery·p1.00:   884.998 ms/op

Iteration   5: 875.648 ±(99.9%) 13.546 ms/op
                 executeFilterQuery·p0.00:   859.832 ms/op
                 executeFilterQuery·p0.50:   877.658 ms/op
                 executeFilterQuery·p0.90:   891.290 ms/op
                 executeFilterQuery·p0.95:   894.435 ms/op
                 executeFilterQuery·p0.99:   894.435 ms/op
                 executeFilterQuery·p0.999:  894.435 ms/op
                 executeFilterQuery·p0.9999: 894.435 ms/op
                 executeFilterQuery·p1.00:   894.435 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 60
  mean =    888.546 ±(99.9%) 7.822 ms/op

  Histogram, ms/op:
    [850.000, 855.000) = 0 
    [855.000, 860.000) = 4 
    [860.000, 865.000) = 2 
    [865.000, 870.000) = 4 
    [870.000, 875.000) = 5 
    [875.000, 880.000) = 7 
    [880.000, 885.000) = 9 
    [885.000, 890.000) = 1 
    [890.000, 895.000) = 4 
    [895.000, 900.000) = 7 
    [900.000, 905.000) = 6 
    [905.000, 910.000) = 5 
    [910.000, 915.000) = 2 
    [915.000, 920.000) = 3 
    [920.000, 925.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    856.687 ms/op
     p(50.0000) =    884.998 ms/op
     p(90.0000) =    911.947 ms/op
     p(95.0000) =    918.553 ms/op
     p(99.0000) =    925.893 ms/op
     p(99.9000) =    925.893 ms/op
     p(99.9900) =    925.893 ms/op
     p(99.9990) =    925.893 ms/op
     p(99.9999) =    925.893 ms/op
    p(100.0000) =    925.893 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 37.25% complete, ETA 03:38:12
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2056.258 ±(99.9%) 7026.802 ms/op
# Warmup Iteration   2: 1030.331 ±(99.9%) 37.561 ms/op
# Warmup Iteration   3: 1058.223 ±(99.9%) 10.021 ms/op
# Warmup Iteration   4: 1046.898 ±(99.9%) 27.389 ms/op
# Warmup Iteration   5: 1061.054 ±(99.9%) 31.311 ms/op
Iteration   1: 1021.418 ±(99.9%) 41.919 ms/op
                 executeFilterQuery·p0.00:   987.759 ms/op
                 executeFilterQuery·p0.50:   1009.254 ms/op
                 executeFilterQuery·p0.90:   1067.346 ms/op
                 executeFilterQuery·p0.95:   1068.499 ms/op
                 executeFilterQuery·p0.99:   1068.499 ms/op
                 executeFilterQuery·p0.999:  1068.499 ms/op
                 executeFilterQuery·p0.9999: 1068.499 ms/op
                 executeFilterQuery·p1.00:   1068.499 ms/op

Iteration   2: 1018.377 ±(99.9%) 26.818 ms/op
                 executeFilterQuery·p0.00:   1000.342 ms/op
                 executeFilterQuery·p0.50:   1015.546 ms/op
                 executeFilterQuery·p0.90:   1050.778 ms/op
                 executeFilterQuery·p0.95:   1051.722 ms/op
                 executeFilterQuery·p0.99:   1051.722 ms/op
                 executeFilterQuery·p0.999:  1051.722 ms/op
                 executeFilterQuery·p0.9999: 1051.722 ms/op
                 executeFilterQuery·p1.00:   1051.722 ms/op

Iteration   3: 1023.200 ±(99.9%) 23.993 ms/op
                 executeFilterQuery·p0.00:   1001.390 ms/op
                 executeFilterQuery·p0.50:   1021.313 ms/op
                 executeFilterQuery·p0.90:   1047.003 ms/op
                 executeFilterQuery·p0.95:   1047.527 ms/op
                 executeFilterQuery·p0.99:   1047.527 ms/op
                 executeFilterQuery·p0.999:  1047.527 ms/op
                 executeFilterQuery·p0.9999: 1047.527 ms/op
                 executeFilterQuery·p1.00:   1047.527 ms/op

Iteration   4: 1015.441 ±(99.9%) 28.193 ms/op
                 executeFilterQuery·p0.00:   996.147 ms/op
                 executeFilterQuery·p0.50:   1007.157 ms/op
                 executeFilterQuery·p0.90:   1048.052 ms/op
                 executeFilterQuery·p0.95:   1049.625 ms/op
                 executeFilterQuery·p0.99:   1049.625 ms/op
                 executeFilterQuery·p0.999:  1049.625 ms/op
                 executeFilterQuery·p0.9999: 1049.625 ms/op
                 executeFilterQuery·p1.00:   1049.625 ms/op

Iteration   5: 1046.584 ±(99.9%) 24.587 ms/op
                 executeFilterQuery·p0.00:   1008.730 ms/op
                 executeFilterQuery·p0.50:   1051.197 ms/op
                 executeFilterQuery·p0.90:   1063.780 ms/op
                 executeFilterQuery·p0.95:   1064.305 ms/op
                 executeFilterQuery·p0.99:   1064.305 ms/op
                 executeFilterQuery·p0.999:  1064.305 ms/op
                 executeFilterQuery·p0.9999: 1064.305 ms/op
                 executeFilterQuery·p1.00:   1064.305 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 50
  mean =   1025.004 ±(99.9%) 10.887 ms/op

  Histogram, ms/op:
    [ 980.000,  985.000) = 0 
    [ 985.000,  990.000) = 1 
    [ 990.000,  995.000) = 0 
    [ 995.000, 1000.000) = 3 
    [1000.000, 1005.000) = 8 
    [1005.000, 1010.000) = 6 
    [1010.000, 1015.000) = 3 
    [1015.000, 1020.000) = 5 
    [1020.000, 1025.000) = 1 
    [1025.000, 1030.000) = 1 
    [1030.000, 1035.000) = 5 
    [1035.000, 1040.000) = 2 
    [1040.000, 1045.000) = 2 
    [1045.000, 1050.000) = 3 
    [1050.000, 1055.000) = 5 
    [1055.000, 1060.000) = 3 
    [1060.000, 1065.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    987.759 ms/op
     p(50.0000) =   1017.119 ms/op
     p(90.0000) =   1056.755 ms/op
     p(95.0000) =   1061.421 ms/op
     p(99.0000) =   1068.499 ms/op
     p(99.9000) =   1068.499 ms/op
     p(99.9900) =   1068.499 ms/op
     p(99.9990) =   1068.499 ms/op
     p(99.9999) =   1068.499 ms/op
    p(100.0000) =   1068.499 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 38.24% complete, ETA 03:32:07
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

46.430 ±(99.9%) 1.386 ms/op
# Warmup Iteration   2: 45.269 ±(99.9%) 0.141 ms/op
# Warmup Iteration   3: 44.888 ±(99.9%) 0.108 ms/op
# Warmup Iteration   4: 44.615 ±(99.9%) 0.217 ms/op
# Warmup Iteration   5: 44.259 ±(99.9%) 0.141 ms/op
Iteration   1: 44.216 ±(99.9%) 0.177 ms/op
                 executeFilterQuery·p0.00:   43.123 ms/op
                 executeFilterQuery·p0.50:   43.975 ms/op
                 executeFilterQuery·p0.90:   45.312 ms/op
                 executeFilterQuery·p0.95:   45.679 ms/op
                 executeFilterQuery·p0.99:   47.365 ms/op
                 executeFilterQuery·p0.999:  50.332 ms/op
                 executeFilterQuery·p0.9999: 50.332 ms/op
                 executeFilterQuery·p1.00:   50.332 ms/op

Iteration   2: 44.228 ±(99.9%) 0.148 ms/op
                 executeFilterQuery·p0.00:   42.992 ms/op
                 executeFilterQuery·p0.50:   44.040 ms/op
                 executeFilterQuery·p0.90:   45.023 ms/op
                 executeFilterQuery·p0.95:   45.154 ms/op
                 executeFilterQuery·p0.99:   47.122 ms/op
                 executeFilterQuery·p0.999:  48.169 ms/op
                 executeFilterQuery·p0.9999: 48.169 ms/op
                 executeFilterQuery·p1.00:   48.169 ms/op

Iteration   3: 44.267 ±(99.9%) 0.149 ms/op
                 executeFilterQuery·p0.00:   42.861 ms/op
                 executeFilterQuery·p0.50:   44.433 ms/op
                 executeFilterQuery·p0.90:   45.023 ms/op
                 executeFilterQuery·p0.95:   45.154 ms/op
                 executeFilterQuery·p0.99:   45.530 ms/op
                 executeFilterQuery·p0.999:  48.497 ms/op
                 executeFilterQuery·p0.9999: 48.497 ms/op
                 executeFilterQuery·p1.00:   48.497 ms/op

Iteration   4: 44.715 ±(99.9%) 0.125 ms/op
                 executeFilterQuery·p0.00:   43.188 ms/op
                 executeFilterQuery·p0.50:   44.827 ms/op
                 executeFilterQuery·p0.90:   45.285 ms/op
                 executeFilterQuery·p0.95:   45.416 ms/op
                 executeFilterQuery·p0.99:   45.976 ms/op
                 executeFilterQuery·p0.999:  46.006 ms/op
                 executeFilterQuery·p0.9999: 46.006 ms/op
                 executeFilterQuery·p1.00:   46.006 ms/op

Iteration   5: 44.222 ±(99.9%) 0.164 ms/op
                 executeFilterQuery·p0.00:   43.057 ms/op
                 executeFilterQuery·p0.50:   44.237 ms/op
                 executeFilterQuery·p0.90:   44.958 ms/op
                 executeFilterQuery·p0.95:   45.220 ms/op
                 executeFilterQuery·p0.99:   45.824 ms/op
                 executeFilterQuery·p0.999:  50.266 ms/op
                 executeFilterQuery·p0.9999: 50.266 ms/op
                 executeFilterQuery·p1.00:   50.266 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1122
  mean =     44.329 ±(99.9%) 0.071 ms/op

  Histogram, ms/op:
    [42.000, 42.500) = 0 
    [42.500, 43.000) = 3 
    [43.000, 43.500) = 95 
    [43.500, 44.000) = 389 
    [44.000, 44.500) = 194 
    [44.500, 45.000) = 276 
    [45.000, 45.500) = 133 
    [45.500, 46.000) = 18 
    [46.000, 46.500) = 6 
    [46.500, 47.000) = 1 
    [47.000, 47.500) = 2 
    [47.500, 48.000) = 1 
    [48.000, 48.500) = 2 
    [48.500, 49.000) = 0 
    [49.000, 49.500) = 0 
    [49.500, 50.000) = 0 
    [50.000, 50.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =     42.861 ms/op
     p(50.0000) =     44.302 ms/op
     p(90.0000) =     45.154 ms/op
     p(95.0000) =     45.285 ms/op
     p(99.0000) =     46.057 ms/op
     p(99.9000) =     50.324 ms/op
     p(99.9900) =     50.332 ms/op
     p(99.9990) =     50.332 ms/op
     p(99.9999) =     50.332 ms/op
    p(100.0000) =     50.332 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 39.22% complete, ETA 03:26:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

57.255 ±(99.9%) 1.644 ms/op
# Warmup Iteration   2: 59.757 ±(99.9%) 0.377 ms/op
# Warmup Iteration   3: 58.780 ±(99.9%) 0.353 ms/op
# Warmup Iteration   4: 57.691 ±(99.9%) 0.436 ms/op
# Warmup Iteration   5: 56.718 ±(99.9%) 0.277 ms/op
Iteration   1: 56.876 ±(99.9%) 0.420 ms/op
                 executeFilterQuery·p0.00:   54.460 ms/op
                 executeFilterQuery·p0.50:   56.099 ms/op
                 executeFilterQuery·p0.90:   58.615 ms/op
                 executeFilterQuery·p0.95:   58.864 ms/op
                 executeFilterQuery·p0.99:   63.517 ms/op
                 executeFilterQuery·p0.999:  72.483 ms/op
                 executeFilterQuery·p0.9999: 72.483 ms/op
                 executeFilterQuery·p1.00:   72.483 ms/op

Iteration   2: 57.980 ±(99.9%) 0.540 ms/op
                 executeFilterQuery·p0.00:   55.837 ms/op
                 executeFilterQuery·p0.50:   56.295 ms/op
                 executeFilterQuery·p0.90:   60.752 ms/op
                 executeFilterQuery·p0.95:   60.863 ms/op
                 executeFilterQuery·p0.99:   62.053 ms/op
                 executeFilterQuery·p0.999:  62.915 ms/op
                 executeFilterQuery·p0.9999: 62.915 ms/op
                 executeFilterQuery·p1.00:   62.915 ms/op

Iteration   3: 56.984 ±(99.9%) 0.360 ms/op
                 executeFilterQuery·p0.00:   55.050 ms/op
                 executeFilterQuery·p0.50:   56.361 ms/op
                 executeFilterQuery·p0.90:   59.834 ms/op
                 executeFilterQuery·p0.95:   60.110 ms/op
                 executeFilterQuery·p0.99:   60.988 ms/op
                 executeFilterQuery·p0.999:  61.735 ms/op
                 executeFilterQuery·p0.9999: 61.735 ms/op
                 executeFilterQuery·p1.00:   61.735 ms/op

Iteration   4: 56.156 ±(99.9%) 0.260 ms/op
                 executeFilterQuery·p0.00:   54.460 ms/op
                 executeFilterQuery·p0.50:   56.099 ms/op
                 executeFilterQuery·p0.90:   56.309 ms/op
                 executeFilterQuery·p0.95:   56.361 ms/op
                 executeFilterQuery·p0.99:   61.723 ms/op
                 executeFilterQuery·p0.999:  68.420 ms/op
                 executeFilterQuery·p0.9999: 68.420 ms/op
                 executeFilterQuery·p1.00:   68.420 ms/op

Iteration   5: 55.967 ±(99.9%) 0.345 ms/op
                 executeFilterQuery·p0.00:   55.181 ms/op
                 executeFilterQuery·p0.50:   55.443 ms/op
                 executeFilterQuery·p0.90:   58.530 ms/op
                 executeFilterQuery·p0.95:   59.641 ms/op
                 executeFilterQuery·p0.99:   61.499 ms/op
                 executeFilterQuery·p0.999:  63.570 ms/op
                 executeFilterQuery·p0.9999: 63.570 ms/op
                 executeFilterQuery·p1.00:   63.570 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 877
  mean =     56.784 ±(99.9%) 0.191 ms/op

  Histogram, ms/op:
    [50.000, 52.500) = 0 
    [52.500, 55.000) = 2 
    [55.000, 57.500) = 684 
    [57.500, 60.000) = 115 
    [60.000, 62.500) = 72 
    [62.500, 65.000) = 2 
    [65.000, 67.500) = 0 
    [67.500, 70.000) = 1 
    [70.000, 72.500) = 1 
    [72.500, 75.000) = 0 
    [75.000, 77.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     54.460 ms/op
     p(50.0000) =     56.164 ms/op
     p(90.0000) =     59.834 ms/op
     p(95.0000) =     60.424 ms/op
     p(99.0000) =     61.028 ms/op
     p(99.9000) =     72.483 ms/op
     p(99.9900) =     72.483 ms/op
     p(99.9990) =     72.483 ms/op
     p(99.9999) =     72.483 ms/op
    p(100.0000) =     72.483 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 40.20% complete, ETA 03:20:24
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

92.846 ±(99.9%) 2.642 ms/op
# Warmup Iteration   2: 99.927 ±(99.9%) 0.582 ms/op
# Warmup Iteration   3: 100.469 ±(99.9%) 0.372 ms/op
# Warmup Iteration   4: 101.640 ±(99.9%) 0.655 ms/op
# Warmup Iteration   5: 102.532 ±(99.9%) 0.626 ms/op
Iteration   1: 103.730 ±(99.9%) 0.215 ms/op
                 executeFilterQuery·p0.00:   101.057 ms/op
                 executeFilterQuery·p0.50:   103.809 ms/op
                 executeFilterQuery·p0.90:   104.110 ms/op
                 executeFilterQuery·p0.95:   104.242 ms/op
                 executeFilterQuery·p0.99:   105.775 ms/op
                 executeFilterQuery·p0.999:  105.775 ms/op
                 executeFilterQuery·p0.9999: 105.775 ms/op
                 executeFilterQuery·p1.00:   105.775 ms/op

Iteration   2: 100.976 ±(99.9%) 0.847 ms/op
                 executeFilterQuery·p0.00:   99.090 ms/op
                 executeFilterQuery·p0.50:   99.353 ms/op
                 executeFilterQuery·p0.90:   103.940 ms/op
                 executeFilterQuery·p0.95:   103.940 ms/op
                 executeFilterQuery·p0.99:   113.246 ms/op
                 executeFilterQuery·p0.999:  113.246 ms/op
                 executeFilterQuery·p0.9999: 113.246 ms/op
                 executeFilterQuery·p1.00:   113.246 ms/op

Iteration   3: 101.577 ±(99.9%) 0.732 ms/op
                 executeFilterQuery·p0.00:   98.959 ms/op
                 executeFilterQuery·p0.50:   102.629 ms/op
                 executeFilterQuery·p0.90:   103.809 ms/op
                 executeFilterQuery·p0.95:   103.940 ms/op
                 executeFilterQuery·p0.99:   104.989 ms/op
                 executeFilterQuery·p0.999:  104.989 ms/op
                 executeFilterQuery·p0.9999: 104.989 ms/op
                 executeFilterQuery·p1.00:   104.989 ms/op

Iteration   4: 102.256 ±(99.9%) 0.716 ms/op
                 executeFilterQuery·p0.00:   98.959 ms/op
                 executeFilterQuery·p0.50:   103.547 ms/op
                 executeFilterQuery·p0.90:   103.940 ms/op
                 executeFilterQuery·p0.95:   104.071 ms/op
                 executeFilterQuery·p0.99:   104.071 ms/op
                 executeFilterQuery·p0.999:  104.071 ms/op
                 executeFilterQuery·p0.9999: 104.071 ms/op
                 executeFilterQuery·p1.00:   104.071 ms/op

Iteration   5: 100.206 ±(99.9%) 0.618 ms/op
                 executeFilterQuery·p0.00:   99.090 ms/op
                 executeFilterQuery·p0.50:   99.353 ms/op
                 executeFilterQuery·p0.90:   103.796 ms/op
                 executeFilterQuery·p0.95:   104.196 ms/op
                 executeFilterQuery·p0.99:   106.682 ms/op
                 executeFilterQuery·p0.999:  106.693 ms/op
                 executeFilterQuery·p0.9999: 106.693 ms/op
                 executeFilterQuery·p1.00:   106.693 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 491
  mean =    101.733 ±(99.9%) 0.340 ms/op

  Histogram, ms/op:
    [ 90.000,  92.500) = 0 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 
    [ 97.500, 100.000) = 207 
    [100.000, 102.500) = 25 
    [102.500, 105.000) = 252 
    [105.000, 107.500) = 6 
    [107.500, 110.000) = 0 
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 1 
    [115.000, 117.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     98.959 ms/op
     p(50.0000) =    102.892 ms/op
     p(90.0000) =    103.940 ms/op
     p(95.0000) =    104.071 ms/op
     p(99.0000) =    105.644 ms/op
     p(99.9000) =    113.246 ms/op
     p(99.9900) =    113.246 ms/op
     p(99.9990) =    113.246 ms/op
     p(99.9999) =    113.246 ms/op
    p(100.0000) =    113.246 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 41.18% complete, ETA 03:14:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

458.347 ±(99.9%) 25.412 ms/op
# Warmup Iteration   2: 449.520 ±(99.9%) 5.188 ms/op
# Warmup Iteration   3: 451.480 ±(99.9%) 4.068 ms/op
# Warmup Iteration   4: 452.483 ±(99.9%) 4.095 ms/op
# Warmup Iteration   5: 451.663 ±(99.9%) 4.304 ms/op
Iteration   1: 443.593 ±(99.9%) 6.646 ms/op
                 executeFilterQuery·p0.00:   430.440 ms/op
                 executeFilterQuery·p0.50:   443.548 ms/op
                 executeFilterQuery·p0.90:   453.929 ms/op
                 executeFilterQuery·p0.95:   467.350 ms/op
                 executeFilterQuery·p0.99:   469.762 ms/op
                 executeFilterQuery·p0.999:  469.762 ms/op
                 executeFilterQuery·p0.9999: 469.762 ms/op
                 executeFilterQuery·p1.00:   469.762 ms/op

Iteration   2: 441.815 ±(99.9%) 4.191 ms/op
                 executeFilterQuery·p0.00:   431.489 ms/op
                 executeFilterQuery·p0.50:   443.023 ms/op
                 executeFilterQuery·p0.90:   448.057 ms/op
                 executeFilterQuery·p0.95:   450.783 ms/op
                 executeFilterQuery·p0.99:   451.412 ms/op
                 executeFilterQuery·p0.999:  451.412 ms/op
                 executeFilterQuery·p0.9999: 451.412 ms/op
                 executeFilterQuery·p1.00:   451.412 ms/op

Iteration   3: 441.975 ±(99.9%) 4.932 ms/op
                 executeFilterQuery·p0.00:   430.440 ms/op
                 executeFilterQuery·p0.50:   441.975 ms/op
                 executeFilterQuery·p0.90:   451.727 ms/op
                 executeFilterQuery·p0.95:   451.936 ms/op
                 executeFilterQuery·p0.99:   451.936 ms/op
                 executeFilterQuery·p0.999:  451.936 ms/op
                 executeFilterQuery·p0.9999: 451.936 ms/op
                 executeFilterQuery·p1.00:   451.936 ms/op

Iteration   4: 444.049 ±(99.9%) 4.188 ms/op
                 executeFilterQuery·p0.00:   430.440 ms/op
                 executeFilterQuery·p0.50:   445.121 ms/op
                 executeFilterQuery·p0.90:   451.307 ms/op
                 executeFilterQuery·p0.95:   452.356 ms/op
                 executeFilterQuery·p0.99:   452.461 ms/op
                 executeFilterQuery·p0.999:  452.461 ms/op
                 executeFilterQuery·p0.9999: 452.461 ms/op
                 executeFilterQuery·p1.00:   452.461 ms/op

Iteration   5: 442.590 ±(99.9%) 4.602 ms/op
                 executeFilterQuery·p0.00:   430.440 ms/op
                 executeFilterQuery·p0.50:   442.499 ms/op
                 executeFilterQuery·p0.90:   451.517 ms/op
                 executeFilterQuery·p0.95:   452.356 ms/op
                 executeFilterQuery·p0.99:   452.461 ms/op
                 executeFilterQuery·p0.999:  452.461 ms/op
                 executeFilterQuery·p0.9999: 452.461 ms/op
                 executeFilterQuery·p1.00:   452.461 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 115
  mean =    442.805 ±(99.9%) 1.975 ms/op

  Histogram, ms/op:
    [430.000, 432.500) = 8 
    [432.500, 435.000) = 2 
    [435.000, 437.500) = 12 
    [437.500, 440.000) = 16 
    [440.000, 442.500) = 15 
    [442.500, 445.000) = 14 
    [445.000, 447.500) = 26 
    [447.500, 450.000) = 9 
    [450.000, 452.500) = 11 
    [452.500, 455.000) = 0 
    [455.000, 457.500) = 0 
    [457.500, 460.000) = 1 
    [460.000, 462.500) = 0 
    [462.500, 465.000) = 0 
    [465.000, 467.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    430.440 ms/op
     p(50.0000) =    443.023 ms/op
     p(90.0000) =    450.573 ms/op
     p(95.0000) =    451.936 ms/op
     p(99.0000) =    467.833 ms/op
     p(99.9000) =    469.762 ms/op
     p(99.9900) =    469.762 ms/op
     p(99.9990) =    469.762 ms/op
     p(99.9999) =    469.762 ms/op
    p(100.0000) =    469.762 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 42.16% complete, ETA 03:09:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

572.144 ±(99.9%) 31.474 ms/op
# Warmup Iteration   2: 582.659 ±(99.9%) 11.673 ms/op
# Warmup Iteration   3: 597.873 ±(99.9%) 10.161 ms/op
# Warmup Iteration   4: 603.733 ±(99.9%) 9.362 ms/op
# Warmup Iteration   5: 606.817 ±(99.9%) 4.016 ms/op
Iteration   1: 610.148 ±(99.9%) 18.061 ms/op
                 executeFilterQuery·p0.00:   585.105 ms/op
                 executeFilterQuery·p0.50:   608.174 ms/op
                 executeFilterQuery·p0.90:   625.161 ms/op
                 executeFilterQuery·p0.95:   676.332 ms/op
                 executeFilterQuery·p0.99:   676.332 ms/op
                 executeFilterQuery·p0.999:  676.332 ms/op
                 executeFilterQuery·p0.9999: 676.332 ms/op
                 executeFilterQuery·p1.00:   676.332 ms/op

Iteration   2: 609.099 ±(99.9%) 10.997 ms/op
                 executeFilterQuery·p0.00:   571.474 ms/op
                 executeFilterQuery·p0.50:   611.320 ms/op
                 executeFilterQuery·p0.90:   618.660 ms/op
                 executeFilterQuery·p0.95:   622.854 ms/op
                 executeFilterQuery·p0.99:   622.854 ms/op
                 executeFilterQuery·p0.999:  622.854 ms/op
                 executeFilterQuery·p0.9999: 622.854 ms/op
                 executeFilterQuery·p1.00:   622.854 ms/op

Iteration   3: 578.057 ±(99.9%) 16.078 ms/op
                 executeFilterQuery·p0.00:   568.328 ms/op
                 executeFilterQuery·p0.50:   573.571 ms/op
                 executeFilterQuery·p0.90:   593.913 ms/op
                 executeFilterQuery·p0.95:   644.874 ms/op
                 executeFilterQuery·p0.99:   644.874 ms/op
                 executeFilterQuery·p0.999:  644.874 ms/op
                 executeFilterQuery·p0.9999: 644.874 ms/op
                 executeFilterQuery·p1.00:   644.874 ms/op

Iteration   4: 573.047 ±(99.9%) 1.909 ms/op
                 executeFilterQuery·p0.00:   570.425 ms/op
                 executeFilterQuery·p0.50:   572.522 ms/op
                 executeFilterQuery·p0.90:   576.822 ms/op
                 executeFilterQuery·p0.95:   577.765 ms/op
                 executeFilterQuery·p0.99:   577.765 ms/op
                 executeFilterQuery·p0.999:  577.765 ms/op
                 executeFilterQuery·p0.9999: 577.765 ms/op
                 executeFilterQuery·p1.00:   577.765 ms/op

Iteration   5: 572.756 ±(99.9%) 2.141 ms/op
                 executeFilterQuery·p0.00:   569.377 ms/op
                 executeFilterQuery·p0.50:   572.522 ms/op
                 executeFilterQuery·p0.90:   576.822 ms/op
                 executeFilterQuery·p0.95:   577.765 ms/op
                 executeFilterQuery·p0.99:   577.765 ms/op
                 executeFilterQuery·p0.999:  577.765 ms/op
                 executeFilterQuery·p0.9999: 577.765 ms/op
                 executeFilterQuery·p1.00:   577.765 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 88
  mean =    588.144 ±(99.9%) 7.650 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 0 
    [537.500, 550.000) = 0 
    [550.000, 562.500) = 0 
    [562.500, 575.000) = 44 
    [575.000, 587.500) = 10 
    [587.500, 600.000) = 4 
    [600.000, 612.500) = 22 
    [612.500, 625.000) = 6 
    [625.000, 637.500) = 0 
    [637.500, 650.000) = 1 
    [650.000, 662.500) = 0 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    568.328 ms/op
     p(50.0000) =    575.144 ms/op
     p(90.0000) =    612.473 ms/op
     p(95.0000) =    617.139 ms/op
     p(99.0000) =    676.332 ms/op
     p(99.9000) =    676.332 ms/op
     p(99.9900) =    676.332 ms/op
     p(99.9990) =    676.332 ms/op
     p(99.9999) =    676.332 ms/op
    p(100.0000) =    676.332 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 43.14% complete, ETA 03:04:23
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

907.686 ±(99.9%) 94.590 ms/op
# Warmup Iteration   2: 956.111 ±(99.9%) 12.854 ms/op
# Warmup Iteration   3: 966.024 ±(99.9%) 25.788 ms/op
# Warmup Iteration   4: 988.807 ±(99.9%) 14.045 ms/op
# Warmup Iteration   5: 995.385 ±(99.9%) 11.347 ms/op
Iteration   1: 992.715 ±(99.9%) 14.503 ms/op
                 executeFilterQuery·p0.00:   968.884 ms/op
                 executeFilterQuery·p0.50:   997.196 ms/op
                 executeFilterQuery·p0.90:   1003.068 ms/op
                 executeFilterQuery·p0.95:   1003.487 ms/op
                 executeFilterQuery·p0.99:   1003.487 ms/op
                 executeFilterQuery·p0.999:  1003.487 ms/op
                 executeFilterQuery·p0.9999: 1003.487 ms/op
                 executeFilterQuery·p1.00:   1003.487 ms/op

Iteration   2: 991.476 ±(99.9%) 25.487 ms/op
                 executeFilterQuery·p0.00:   959.447 ms/op
                 executeFilterQuery·p0.50:   993.001 ms/op
                 executeFilterQuery·p0.90:   1020.264 ms/op
                 executeFilterQuery·p0.95:   1024.459 ms/op
                 executeFilterQuery·p0.99:   1024.459 ms/op
                 executeFilterQuery·p0.999:  1024.459 ms/op
                 executeFilterQuery·p0.9999: 1024.459 ms/op
                 executeFilterQuery·p1.00:   1024.459 ms/op

Iteration   3: 991.476 ±(99.9%) 18.575 ms/op
                 executeFilterQuery·p0.00:   959.447 ms/op
                 executeFilterQuery·p0.50:   998.244 ms/op
                 executeFilterQuery·p0.90:   1002.439 ms/op
                 executeFilterQuery·p0.95:   1002.439 ms/op
                 executeFilterQuery·p0.99:   1002.439 ms/op
                 executeFilterQuery·p0.999:  1002.439 ms/op
                 executeFilterQuery·p0.9999: 1002.439 ms/op
                 executeFilterQuery·p1.00:   1002.439 ms/op

Iteration   4: 982.992 ±(99.9%) 23.859 ms/op
                 executeFilterQuery·p0.00:   959.447 ms/op
                 executeFilterQuery·p0.50:   990.904 ms/op
                 executeFilterQuery·p0.90:   1002.648 ms/op
                 executeFilterQuery·p0.95:   1003.487 ms/op
                 executeFilterQuery·p0.99:   1003.487 ms/op
                 executeFilterQuery·p0.999:  1003.487 ms/op
                 executeFilterQuery·p0.9999: 1003.487 ms/op
                 executeFilterQuery·p1.00:   1003.487 ms/op

Iteration   5: 975.271 ±(99.9%) 24.192 ms/op
                 executeFilterQuery·p0.00:   956.301 ms/op
                 executeFilterQuery·p0.50:   967.836 ms/op
                 executeFilterQuery·p0.90:   1002.019 ms/op
                 executeFilterQuery·p0.95:   1002.439 ms/op
                 executeFilterQuery·p0.99:   1002.439 ms/op
                 executeFilterQuery·p0.999:  1002.439 ms/op
                 executeFilterQuery·p0.9999: 1002.439 ms/op
                 executeFilterQuery·p1.00:   1002.439 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 55
  mean =    986.786 ±(99.9%) 7.775 ms/op

  Histogram, ms/op:
    [ 950.000,  955.000) = 0 
    [ 955.000,  960.000) = 6 
    [ 960.000,  965.000) = 3 
    [ 965.000,  970.000) = 5 
    [ 970.000,  975.000) = 1 
    [ 975.000,  980.000) = 1 
    [ 980.000,  985.000) = 5 
    [ 985.000,  990.000) = 4 
    [ 990.000,  995.000) = 6 
    [ 995.000, 1000.000) = 10 
    [1000.000, 1005.000) = 13 
    [1005.000, 1010.000) = 0 
    [1010.000, 1015.000) = 0 
    [1015.000, 1020.000) = 0 
    [1020.000, 1025.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    956.301 ms/op
     p(50.0000) =    991.953 ms/op
     p(90.0000) =   1002.439 ms/op
     p(95.0000) =   1003.487 ms/op
     p(99.0000) =   1024.459 ms/op
     p(99.9000) =   1024.459 ms/op
     p(99.9900) =   1024.459 ms/op
     p(99.9990) =   1024.459 ms/op
     p(99.9999) =   1024.459 ms/op
    p(100.0000) =   1024.459 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 44.12% complete, ETA 02:59:29
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

891.814 ±(99.9%) 56.674 ms/op
# Warmup Iteration   2: 872.328 ±(99.9%) 9.608 ms/op
# Warmup Iteration   3: 880.367 ±(99.9%) 17.147 ms/op
# Warmup Iteration   4: 880.891 ±(99.9%) 7.025 ms/op
# Warmup Iteration   5: 876.872 ±(99.9%) 18.282 ms/op
Iteration   1: 872.153 ±(99.9%) 15.538 ms/op
                 executeFilterQuery·p0.00:   850.395 ms/op
                 executeFilterQuery·p0.50:   871.891 ms/op
                 executeFilterQuery·p0.90:   889.717 ms/op
                 executeFilterQuery·p0.95:   891.290 ms/op
                 executeFilterQuery·p0.99:   891.290 ms/op
                 executeFilterQuery·p0.999:  891.290 ms/op
                 executeFilterQuery·p0.9999: 891.290 ms/op
                 executeFilterQuery·p1.00:   891.290 ms/op

Iteration   2: 875.386 ±(99.9%) 18.217 ms/op
                 executeFilterQuery·p0.00:   857.735 ms/op
                 executeFilterQuery·p0.50:   871.367 ms/op
                 executeFilterQuery·p0.90:   904.502 ms/op
                 executeFilterQuery·p0.95:   910.164 ms/op
                 executeFilterQuery·p0.99:   910.164 ms/op
                 executeFilterQuery·p0.999:  910.164 ms/op
                 executeFilterQuery·p0.9999: 910.164 ms/op
                 executeFilterQuery·p1.00:   910.164 ms/op

Iteration   3: 884.649 ±(99.9%) 21.583 ms/op
                 executeFilterQuery·p0.00:   869.270 ms/op
                 executeFilterQuery·p0.50:   880.280 ms/op
                 executeFilterQuery·p0.90:   919.601 ms/op
                 executeFilterQuery·p0.95:   929.038 ms/op
                 executeFilterQuery·p0.99:   929.038 ms/op
                 executeFilterQuery·p0.999:  929.038 ms/op
                 executeFilterQuery·p0.9999: 929.038 ms/op
                 executeFilterQuery·p1.00:   929.038 ms/op

Iteration   4: 881.765 ±(99.9%) 10.442 ms/op
                 executeFilterQuery·p0.00:   866.124 ms/op
                 executeFilterQuery·p0.50:   883.425 ms/op
                 executeFilterQuery·p0.90:   889.926 ms/op
                 executeFilterQuery·p0.95:   890.241 ms/op
                 executeFilterQuery·p0.99:   890.241 ms/op
                 executeFilterQuery·p0.999:  890.241 ms/op
                 executeFilterQuery·p0.9999: 890.241 ms/op
                 executeFilterQuery·p1.00:   890.241 ms/op

Iteration   5: 878.969 ±(99.9%) 17.680 ms/op
                 executeFilterQuery·p0.00:   861.929 ms/op
                 executeFilterQuery·p0.50:   879.231 ms/op
                 executeFilterQuery·p0.90:   905.445 ms/op
                 executeFilterQuery·p0.95:   913.310 ms/op
                 executeFilterQuery·p0.99:   913.310 ms/op
                 executeFilterQuery·p0.999:  913.310 ms/op
                 executeFilterQuery·p0.9999: 913.310 ms/op
                 executeFilterQuery·p1.00:   913.310 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 60
  mean =    878.584 ±(99.9%) 6.099 ms/op

  Histogram, ms/op:
    [850.000, 855.000) = 1 
    [855.000, 860.000) = 2 
    [860.000, 865.000) = 4 
    [865.000, 870.000) = 7 
    [870.000, 875.000) = 14 
    [875.000, 880.000) = 5 
    [880.000, 885.000) = 9 
    [885.000, 890.000) = 10 
    [890.000, 895.000) = 4 
    [895.000, 900.000) = 1 
    [900.000, 905.000) = 0 
    [905.000, 910.000) = 0 
    [910.000, 915.000) = 2 
    [915.000, 920.000) = 0 
    [920.000, 925.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    850.395 ms/op
     p(50.0000) =    877.658 ms/op
     p(90.0000) =    891.290 ms/op
     p(95.0000) =    909.535 ms/op
     p(99.0000) =    929.038 ms/op
     p(99.9000) =    929.038 ms/op
     p(99.9900) =    929.038 ms/op
     p(99.9990) =    929.038 ms/op
     p(99.9999) =    929.038 ms/op
    p(100.0000) =    929.038 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 45.10% complete, ETA 02:54:40
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1159.259 ±(99.9%) 102.847 ms/op
# Warmup Iteration   2: 1158.327 ±(99.9%) 20.321 ms/op
# Warmup Iteration   3: 1176.269 ±(99.9%) 9.231 ms/op
# Warmup Iteration   4: 1174.638 ±(99.9%) 6.461 ms/op
# Warmup Iteration   5: 1174.405 ±(99.9%) 7.048 ms/op
Iteration   1: 1188.386 ±(99.9%) 25.837 ms/op
                 executeFilterQuery·p0.00:   1174.405 ms/op
                 executeFilterQuery·p0.50:   1180.697 ms/op
                 executeFilterQuery·p0.90:   1207.960 ms/op
                 executeFilterQuery·p0.95:   1207.960 ms/op
                 executeFilterQuery·p0.99:   1207.960 ms/op
                 executeFilterQuery·p0.999:  1207.960 ms/op
                 executeFilterQuery·p0.9999: 1207.960 ms/op
                 executeFilterQuery·p1.00:   1207.960 ms/op

Iteration   2: 1160.191 ±(99.9%) 51.787 ms/op
                 executeFilterQuery·p0.00:   1132.462 ms/op
                 executeFilterQuery·p0.50:   1140.851 ms/op
                 executeFilterQuery·p0.90:   1201.668 ms/op
                 executeFilterQuery·p0.95:   1201.668 ms/op
                 executeFilterQuery·p0.99:   1201.668 ms/op
                 executeFilterQuery·p0.999:  1201.668 ms/op
                 executeFilterQuery·p0.9999: 1201.668 ms/op
                 executeFilterQuery·p1.00:   1201.668 ms/op

Iteration   3: 1161.822 ±(99.9%) 82.479 ms/op
                 executeFilterQuery·p0.00:   1136.656 ms/op
                 executeFilterQuery·p0.50:   1149.239 ms/op
                 executeFilterQuery·p0.90:   1291.846 ms/op
                 executeFilterQuery·p0.95:   1291.846 ms/op
                 executeFilterQuery·p0.99:   1291.846 ms/op
                 executeFilterQuery·p0.999:  1291.846 ms/op
                 executeFilterQuery·p0.9999: 1291.846 ms/op
                 executeFilterQuery·p1.00:   1291.846 ms/op

Iteration   4: 1148.773 ±(99.9%) 21.493 ms/op
                 executeFilterQuery·p0.00:   1134.559 ms/op
                 executeFilterQuery·p0.50:   1147.142 ms/op
                 executeFilterQuery·p0.90:   1168.114 ms/op
                 executeFilterQuery·p0.95:   1168.114 ms/op
                 executeFilterQuery·p0.99:   1168.114 ms/op
                 executeFilterQuery·p0.999:  1168.114 ms/op
                 executeFilterQuery·p0.9999: 1168.114 ms/op
                 executeFilterQuery·p1.00:   1168.114 ms/op

Iteration   5: 1164.851 ±(99.9%) 105.725 ms/op
                 executeFilterQuery·p0.00:   1128.268 ms/op
                 executeFilterQuery·p0.50:   1140.851 ms/op
                 executeFilterQuery·p0.90:   1329.594 ms/op
                 executeFilterQuery·p0.95:   1329.594 ms/op
                 executeFilterQuery·p0.99:   1329.594 ms/op
                 executeFilterQuery·p0.999:  1329.594 ms/op
                 executeFilterQuery·p0.9999: 1329.594 ms/op
                 executeFilterQuery·p1.00:   1329.594 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 45
  mean =   1164.805 ±(99.9%) 20.863 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 23 
    [1150.000, 1175.000) = 12 
    [1175.000, 1200.000) = 3 
    [1200.000, 1225.000) = 5 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1128.268 ms/op
     p(50.0000) =   1149.239 ms/op
     p(90.0000) =   1204.604 ms/op
     p(95.0000) =   1266.680 ms/op
     p(99.0000) =   1329.594 ms/op
     p(99.9000) =   1329.594 ms/op
     p(99.9900) =   1329.594 ms/op
     p(99.9990) =   1329.594 ms/op
     p(99.9999) =   1329.594 ms/op
    p(100.0000) =   1329.594 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 46.08% complete, ETA 02:49:59
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1828.367 ±(99.9%) 401.283 ms/op
# Warmup Iteration   2: 1953.847 ±(99.9%) 37.131 ms/op
# Warmup Iteration   3: 1962.585 ±(99.9%) 24.507 ms/op
# Warmup Iteration   4: 1965.381 ±(99.9%) 15.961 ms/op
# Warmup Iteration   5: 1960.837 ±(99.9%) 17.837 ms/op
Iteration   1: 1963.983 ±(99.9%) 14.761 ms/op
                 executeFilterQuery·p0.00:   1958.740 ms/op
                 executeFilterQuery·p0.50:   1962.934 ms/op
                 executeFilterQuery·p0.90:   1973.420 ms/op
                 executeFilterQuery·p0.95:   1973.420 ms/op
                 executeFilterQuery·p0.99:   1973.420 ms/op
                 executeFilterQuery·p0.999:  1973.420 ms/op
                 executeFilterQuery·p0.9999: 1973.420 ms/op
                 executeFilterQuery·p1.00:   1973.420 ms/op

Iteration   2: 1951.400 ±(99.9%) 21.925 ms/op
                 executeFilterQuery·p0.00:   1944.060 ms/op
                 executeFilterQuery·p0.50:   1949.303 ms/op
                 executeFilterQuery·p0.90:   1962.934 ms/op
                 executeFilterQuery·p0.95:   1962.934 ms/op
                 executeFilterQuery·p0.99:   1962.934 ms/op
                 executeFilterQuery·p0.999:  1962.934 ms/op
                 executeFilterQuery·p0.9999: 1962.934 ms/op
                 executeFilterQuery·p1.00:   1962.934 ms/op

Iteration   3: 1947.555 ±(99.9%) 7.122 ms/op
                 executeFilterQuery·p0.00:   1944.060 ms/op
                 executeFilterQuery·p0.50:   1947.206 ms/op
                 executeFilterQuery·p0.90:   1950.351 ms/op
                 executeFilterQuery·p0.95:   1950.351 ms/op
                 executeFilterQuery·p0.99:   1950.351 ms/op
                 executeFilterQuery·p0.999:  1950.351 ms/op
                 executeFilterQuery·p0.9999: 1950.351 ms/op
                 executeFilterQuery·p1.00:   1950.351 ms/op

Iteration   4: 1956.643 ±(99.9%) 44.321 ms/op
                 executeFilterQuery·p0.00:   1946.157 ms/op
                 executeFilterQuery·p0.50:   1950.351 ms/op
                 executeFilterQuery·p0.90:   1988.100 ms/op
                 executeFilterQuery·p0.95:   1988.100 ms/op
                 executeFilterQuery·p0.99:   1988.100 ms/op
                 executeFilterQuery·p0.999:  1988.100 ms/op
                 executeFilterQuery·p0.9999: 1988.100 ms/op
                 executeFilterQuery·p1.00:   1988.100 ms/op

Iteration   5: 1978.313 ±(99.9%) 128.070 ms/op
                 executeFilterQuery·p0.00:   1950.351 ms/op
                 executeFilterQuery·p0.50:   1955.594 ms/op
                 executeFilterQuery·p0.90:   2065.695 ms/op
                 executeFilterQuery·p0.95:   2065.695 ms/op
                 executeFilterQuery·p0.99:   2065.695 ms/op
                 executeFilterQuery·p0.999:  2065.695 ms/op
                 executeFilterQuery·p0.9999: 2065.695 ms/op
                 executeFilterQuery·p1.00:   2065.695 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 30
  mean =   1959.579 ±(99.9%) 15.544 ms/op

  Histogram, ms/op:
    [1900.000, 1912.500) = 0 
    [1912.500, 1925.000) = 0 
    [1925.000, 1937.500) = 0 
    [1937.500, 1950.000) = 9 
    [1950.000, 1962.500) = 14 
    [1962.500, 1975.000) = 4 
    [1975.000, 1987.500) = 0 
    [1987.500, 2000.000) = 2 
    [2000.000, 2012.500) = 0 
    [2012.500, 2025.000) = 0 
    [2025.000, 2037.500) = 0 
    [2037.500, 2050.000) = 0 
    [2050.000, 2062.500) = 0 
    [2062.500, 2075.000) = 1 
    [2075.000, 2087.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1944.060 ms/op
     p(50.0000) =   1950.351 ms/op
     p(90.0000) =   1986.632 ms/op
     p(95.0000) =   2025.325 ms/op
     p(99.0000) =   2065.695 ms/op
     p(99.9000) =   2065.695 ms/op
     p(99.9900) =   2065.695 ms/op
     p(99.9990) =   2065.695 ms/op
     p(99.9999) =   2065.695 ms/op
    p(100.0000) =   2065.695 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 47.06% complete, ETA 02:45:38
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1193806754 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1193806754() {
        this(4);
    }
    public KeyMultiRecordMap_1193806754(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1193806754 join_map = new KeyMultiRecordMap_1193806754();
private final class KeyMultiRecordMap_304872413 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_304872413() {
        this(4);
    }
    public KeyMultiRecordMap_304872413(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_304872413 join_map_0 = new KeyMultiRecordMap_304872413();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

3435.135 ±(99.9%) 577.711 ms/op
# Warmup Iteration   2: 3387.600 ±(99.9%) 694.322 ms/op
# Warmup Iteration   3: 3285.189 ±(99.9%) 552.086 ms/op
# Warmup Iteration   4: 3307.209 ±(99.9%) 787.248 ms/op
# Warmup Iteration   5: 3274.703 ±(99.9%) 1003.533 ms/op
Iteration   1: 3201.303 ±(99.9%) 712.425 ms/op
                 executeQuery·p0.00:   3091.202 ms/op
                 executeQuery·p0.50:   3181.380 ms/op
                 executeQuery·p0.90:   3351.249 ms/op
                 executeQuery·p0.95:   3351.249 ms/op
                 executeQuery·p0.99:   3351.249 ms/op
                 executeQuery·p0.999:  3351.249 ms/op
                 executeQuery·p0.9999: 3351.249 ms/op
                 executeQuery·p1.00:   3351.249 ms/op

Iteration   2: 3119.514 ±(99.9%) 488.052 ms/op
                 executeQuery·p0.00:   3070.231 ms/op
                 executeQuery·p0.50:   3089.105 ms/op
                 executeQuery·p0.90:   3229.614 ms/op
                 executeQuery·p0.95:   3229.614 ms/op
                 executeQuery·p0.99:   3229.614 ms/op
                 executeQuery·p0.999:  3229.614 ms/op
                 executeQuery·p0.9999: 3229.614 ms/op
                 executeQuery·p1.00:   3229.614 ms/op

Iteration   3: 3278.897 ±(99.9%) 589.827 ms/op
                 executeQuery·p0.00:   3154.117 ms/op
                 executeQuery·p0.50:   3294.626 ms/op
                 executeQuery·p0.90:   3372.220 ms/op
                 executeQuery·p0.95:   3372.220 ms/op
                 executeQuery·p0.99:   3372.220 ms/op
                 executeQuery·p0.999:  3372.220 ms/op
                 executeQuery·p0.9999: 3372.220 ms/op
                 executeQuery·p1.00:   3372.220 ms/op

Iteration   4: 3186.622 ±(99.9%) 1001.335 ms/op
                 executeQuery·p0.00:   3066.036 ms/op
                 executeQuery·p0.50:   3141.534 ms/op
                 executeQuery·p0.90:   3397.386 ms/op
                 executeQuery·p0.95:   3397.386 ms/op
                 executeQuery·p0.99:   3397.386 ms/op
                 executeQuery·p0.999:  3397.386 ms/op
                 executeQuery·p0.9999: 3397.386 ms/op
                 executeQuery·p1.00:   3397.386 ms/op

Iteration   5: 3209.691 ±(99.9%) 1068.530 ms/op
                 executeQuery·p0.00:   3045.065 ms/op
                 executeQuery·p0.50:   3185.574 ms/op
                 executeQuery·p0.90:   3422.552 ms/op
                 executeQuery·p0.95:   3422.552 ms/op
                 executeQuery·p0.99:   3422.552 ms/op
                 executeQuery·p0.999:  3422.552 ms/op
                 executeQuery·p0.9999: 3422.552 ms/op
                 executeQuery·p1.00:   3422.552 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   3199.205 ±(99.9%) 106.264 ms/op

  Histogram, ms/op:
    [3000.000, 3050.000) = 1 
    [3050.000, 3100.000) = 5 
    [3100.000, 3150.000) = 2 
    [3150.000, 3200.000) = 2 
    [3200.000, 3250.000) = 3 
    [3250.000, 3300.000) = 2 
    [3300.000, 3350.000) = 1 
    [3350.000, 3400.000) = 3 
    [3400.000, 3450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3045.065 ms/op
     p(50.0000) =   3181.380 ms/op
     p(90.0000) =   3394.870 ms/op
     p(95.0000) =   3421.294 ms/op
     p(99.0000) =   3422.552 ms/op
     p(99.9000) =   3422.552 ms/op
     p(99.9900) =   3422.552 ms/op
     p(99.9990) =   3422.552 ms/op
     p(99.9999) =   3422.552 ms/op
    p(100.0000) =   3422.552 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 48.04% complete, ETA 02:41:30
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1592471644 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1592471644() {
        this(4);
    }
    public KeyMultiRecordMap_1592471644(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1592471644 join_map = new KeyMultiRecordMap_1592471644();
private final class KeyMultiRecordMap_1000671389 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1000671389() {
        this(4);
    }
    public KeyMultiRecordMap_1000671389(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1000671389 join_map_0 = new KeyMultiRecordMap_1000671389();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

37513.855 ms/op
# Warmup Iteration   2: 38252.052 ms/op
# Warmup Iteration   3: 39258.685 ms/op
# Warmup Iteration   4: 41473.278 ms/op
# Warmup Iteration   5: 41943.040 ms/op
Iteration   1: 41741.713 ms/op
                 executeQuery·p0.00:   41741.713 ms/op
                 executeQuery·p0.50:   41741.713 ms/op
                 executeQuery·p0.90:   41741.713 ms/op
                 executeQuery·p0.95:   41741.713 ms/op
                 executeQuery·p0.99:   41741.713 ms/op
                 executeQuery·p0.999:  41741.713 ms/op
                 executeQuery·p0.9999: 41741.713 ms/op
                 executeQuery·p1.00:   41741.713 ms/op

Iteration   2: 40265.318 ms/op
                 executeQuery·p0.00:   40265.318 ms/op
                 executeQuery·p0.50:   40265.318 ms/op
                 executeQuery·p0.90:   40265.318 ms/op
                 executeQuery·p0.95:   40265.318 ms/op
                 executeQuery·p0.99:   40265.318 ms/op
                 executeQuery·p0.999:  40265.318 ms/op
                 executeQuery·p0.9999: 40265.318 ms/op
                 executeQuery·p1.00:   40265.318 ms/op

Iteration   3: 41204.842 ms/op
                 executeQuery·p0.00:   41204.842 ms/op
                 executeQuery·p0.50:   41204.842 ms/op
                 executeQuery·p0.90:   41204.842 ms/op
                 executeQuery·p0.95:   41204.842 ms/op
                 executeQuery·p0.99:   41204.842 ms/op
                 executeQuery·p0.999:  41204.842 ms/op
                 executeQuery·p0.9999: 41204.842 ms/op
                 executeQuery·p1.00:   41204.842 ms/op

Iteration   4: 38520.488 ms/op
                 executeQuery·p0.00:   38520.488 ms/op
                 executeQuery·p0.50:   38520.488 ms/op
                 executeQuery·p0.90:   38520.488 ms/op
                 executeQuery·p0.95:   38520.488 ms/op
                 executeQuery·p0.99:   38520.488 ms/op
                 executeQuery·p0.999:  38520.488 ms/op
                 executeQuery·p0.9999: 38520.488 ms/op
                 executeQuery·p1.00:   38520.488 ms/op

Iteration   5: 40131.101 ms/op
                 executeQuery·p0.00:   40131.101 ms/op
                 executeQuery·p0.50:   40131.101 ms/op
                 executeQuery·p0.90:   40131.101 ms/op
                 executeQuery·p0.95:   40131.101 ms/op
                 executeQuery·p0.99:   40131.101 ms/op
                 executeQuery·p0.999:  40131.101 ms/op
                 executeQuery·p0.9999: 40131.101 ms/op
                 executeQuery·p1.00:   40131.101 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  40372.693 ±(99.9%) 4742.412 ms/op

  Histogram, ms/op:
    [38000.000, 38250.000) = 0 
    [38250.000, 38500.000) = 0 
    [38500.000, 38750.000) = 1 
    [38750.000, 39000.000) = 0 
    [39000.000, 39250.000) = 0 
    [39250.000, 39500.000) = 0 
    [39500.000, 39750.000) = 0 
    [39750.000, 40000.000) = 0 
    [40000.000, 40250.000) = 1 
    [40250.000, 40500.000) = 1 
    [40500.000, 40750.000) = 0 
    [40750.000, 41000.000) = 0 
    [41000.000, 41250.000) = 1 
    [41250.000, 41500.000) = 0 
    [41500.000, 41750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  38520.488 ms/op
     p(50.0000) =  40265.318 ms/op
     p(90.0000) =  41741.713 ms/op
     p(95.0000) =  41741.713 ms/op
     p(99.0000) =  41741.713 ms/op
     p(99.9000) =  41741.713 ms/op
     p(99.9900) =  41741.713 ms/op
     p(99.9990) =  41741.713 ms/op
     p(99.9999) =  41741.713 ms/op
    p(100.0000) =  41741.713 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 49.02% complete, ETA 02:42:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1698254049 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1698254049() {
        this(4);
    }
    public KeyMultiRecordMap_1698254049(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1698254049 join_map = new KeyMultiRecordMap_1698254049();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_580253511 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_580253511() {
        this(4);
    }
    public KeyMultiRecordMap_580253511(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_580253511 join_map_0 = new KeyMultiRecordMap_580253511();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

3428.144 ±(99.9%) 1877.984 ms/op
# Warmup Iteration   2: 3474.282 ±(99.9%) 3309.275 ms/op
# Warmup Iteration   3: 3495.253 ±(99.9%) 2662.109 ms/op
# Warmup Iteration   4: 3471.486 ±(99.9%) 345.047 ms/op
# Warmup Iteration   5: 3349.851 ±(99.9%) 710.989 ms/op
Iteration   1: 3524.613 ±(99.9%) 1594.722 ms/op
                 executeQuery·p0.00:   3447.718 ms/op
                 executeQuery·p0.50:   3506.438 ms/op
                 executeQuery·p0.90:   3619.684 ms/op
                 executeQuery·p0.95:   3619.684 ms/op
                 executeQuery·p0.99:   3619.684 ms/op
                 executeQuery·p0.999:  3619.684 ms/op
                 executeQuery·p0.9999: 3619.684 ms/op
                 executeQuery·p1.00:   3619.684 ms/op

Iteration   2: 3457.505 ±(99.9%) 2843.954 ms/op
                 executeQuery·p0.00:   3351.249 ms/op
                 executeQuery·p0.50:   3384.803 ms/op
                 executeQuery·p0.90:   3636.462 ms/op
                 executeQuery·p0.95:   3636.462 ms/op
                 executeQuery·p0.99:   3636.462 ms/op
                 executeQuery·p0.999:  3636.462 ms/op
                 executeQuery·p0.9999: 3636.462 ms/op
                 executeQuery·p1.00:   3636.462 ms/op

Iteration   3: 3433.737 ±(99.9%) 2098.836 ms/op
                 executeQuery·p0.00:   3300.917 ms/op
                 executeQuery·p0.50:   3498.050 ms/op
                 executeQuery·p0.90:   3502.244 ms/op
                 executeQuery·p0.95:   3502.244 ms/op
                 executeQuery·p0.99:   3502.244 ms/op
                 executeQuery·p0.999:  3502.244 ms/op
                 executeQuery·p0.9999: 3502.244 ms/op
                 executeQuery·p1.00:   3502.244 ms/op

Iteration   4: 3444.922 ±(99.9%) 1360.962 ms/op
                 executeQuery·p0.00:   3359.638 ms/op
                 executeQuery·p0.50:   3477.078 ms/op
                 executeQuery·p0.90:   3498.050 ms/op
                 executeQuery·p0.95:   3498.050 ms/op
                 executeQuery·p0.99:   3498.050 ms/op
                 executeQuery·p0.999:  3498.050 ms/op
                 executeQuery·p0.9999: 3498.050 ms/op
                 executeQuery·p1.00:   3498.050 ms/op

Iteration   5: 3622.481 ±(99.9%) 1456.557 ms/op
                 executeQuery·p0.00:   3539.993 ms/op
                 executeQuery·p0.50:   3628.073 ms/op
                 executeQuery·p0.90:   3699.376 ms/op
                 executeQuery·p0.95:   3699.376 ms/op
                 executeQuery·p0.99:   3699.376 ms/op
                 executeQuery·p0.999:  3699.376 ms/op
                 executeQuery·p0.9999: 3699.376 ms/op
                 executeQuery·p1.00:   3699.376 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   3496.651 ±(99.9%) 124.074 ms/op

  Histogram, ms/op:
    [3300.000, 3325.000) = 1 
    [3325.000, 3350.000) = 0 
    [3350.000, 3375.000) = 2 
    [3375.000, 3400.000) = 1 
    [3400.000, 3425.000) = 0 
    [3425.000, 3450.000) = 1 
    [3450.000, 3475.000) = 0 
    [3475.000, 3500.000) = 3 
    [3500.000, 3525.000) = 2 
    [3525.000, 3550.000) = 1 
    [3550.000, 3575.000) = 0 
    [3575.000, 3600.000) = 0 
    [3600.000, 3625.000) = 1 
    [3625.000, 3650.000) = 2 
    [3650.000, 3675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3300.917 ms/op
     p(50.0000) =   3498.050 ms/op
     p(90.0000) =   3661.627 ms/op
     p(95.0000) =   3699.376 ms/op
     p(99.0000) =   3699.376 ms/op
     p(99.9000) =   3699.376 ms/op
     p(99.9900) =   3699.376 ms/op
     p(99.9990) =   3699.376 ms/op
     p(99.9999) =   3699.376 ms/op
    p(100.0000) =   3699.376 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 50.00% complete, ETA 02:37:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1958674763 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1958674763() {
        this(4);
    }
    public KeyMultiRecordMap_1958674763(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1958674763 join_map = new KeyMultiRecordMap_1958674763();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_405718200 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_405718200() {
        this(4);
    }
    public KeyMultiRecordMap_405718200(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_405718200 join_map_0 = new KeyMultiRecordMap_405718200();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

36708.549 ms/op
# Warmup Iteration   2: 38990.250 ms/op
# Warmup Iteration   3: 37916.508 ms/op
# Warmup Iteration   4: 35567.698 ms/op
# Warmup Iteration   5: 36641.440 ms/op
Iteration   1: 37111.202 ms/op
                 executeQuery·p0.00:   37111.202 ms/op
                 executeQuery·p0.50:   37111.202 ms/op
                 executeQuery·p0.90:   37111.202 ms/op
                 executeQuery·p0.95:   37111.202 ms/op
                 executeQuery·p0.99:   37111.202 ms/op
                 executeQuery·p0.999:  37111.202 ms/op
                 executeQuery·p0.9999: 37111.202 ms/op
                 executeQuery·p1.00:   37111.202 ms/op

Iteration   2: 38319.161 ms/op
                 executeQuery·p0.00:   38319.161 ms/op
                 executeQuery·p0.50:   38319.161 ms/op
                 executeQuery·p0.90:   38319.161 ms/op
                 executeQuery·p0.95:   38319.161 ms/op
                 executeQuery·p0.99:   38319.161 ms/op
                 executeQuery·p0.999:  38319.161 ms/op
                 executeQuery·p0.9999: 38319.161 ms/op
                 executeQuery·p1.00:   38319.161 ms/op

Iteration   3: 39057.359 ms/op
                 executeQuery·p0.00:   39057.359 ms/op
                 executeQuery·p0.50:   39057.359 ms/op
                 executeQuery·p0.90:   39057.359 ms/op
                 executeQuery·p0.95:   39057.359 ms/op
                 executeQuery·p0.99:   39057.359 ms/op
                 executeQuery·p0.999:  39057.359 ms/op
                 executeQuery·p0.9999: 39057.359 ms/op
                 executeQuery·p1.00:   39057.359 ms/op

Iteration   4: 39191.577 ms/op
                 executeQuery·p0.00:   39191.577 ms/op
                 executeQuery·p0.50:   39191.577 ms/op
                 executeQuery·p0.90:   39191.577 ms/op
                 executeQuery·p0.95:   39191.577 ms/op
                 executeQuery·p0.99:   39191.577 ms/op
                 executeQuery·p0.999:  39191.577 ms/op
                 executeQuery·p0.9999: 39191.577 ms/op
                 executeQuery·p1.00:   39191.577 ms/op

Iteration   5: 38319.161 ms/op
                 executeQuery·p0.00:   38319.161 ms/op
                 executeQuery·p0.50:   38319.161 ms/op
                 executeQuery·p0.90:   38319.161 ms/op
                 executeQuery·p0.95:   38319.161 ms/op
                 executeQuery·p0.99:   38319.161 ms/op
                 executeQuery·p0.999:  38319.161 ms/op
                 executeQuery·p0.9999: 38319.161 ms/op
                 executeQuery·p1.00:   38319.161 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  38399.692 ±(99.9%) 3182.776 ms/op

  Histogram, ms/op:
    [37000.000, 37250.000) = 1 
    [37250.000, 37500.000) = 0 
    [37500.000, 37750.000) = 0 
    [37750.000, 38000.000) = 0 
    [38000.000, 38250.000) = 0 
    [38250.000, 38500.000) = 2 
    [38500.000, 38750.000) = 0 
    [38750.000, 39000.000) = 0 
    [39000.000, 39250.000) = 2 
    [39250.000, 39500.000) = 0 
    [39500.000, 39750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  37111.202 ms/op
     p(50.0000) =  38319.161 ms/op
     p(90.0000) =  39191.577 ms/op
     p(95.0000) =  39191.577 ms/op
     p(99.0000) =  39191.577 ms/op
     p(99.9000) =  39191.577 ms/op
     p(99.9900) =  39191.577 ms/op
     p(99.9990) =  39191.577 ms/op
     p(99.9999) =  39191.577 ms/op
    p(100.0000) =  39191.577 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 50.98% complete, ETA 02:37:48
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1519.237 ±(99.9%) 276.876 ms/op
# Warmup Iteration   2: 1464.411 ±(99.9%) 53.278 ms/op
# Warmup Iteration   3: 1456.921 ±(99.9%) 46.255 ms/op
# Warmup Iteration   4: 1471.602 ±(99.9%) 27.094 ms/op
# Warmup Iteration   5: 1469.804 ±(99.9%) 63.159 ms/op
Iteration   1: 1463.213 ±(99.9%) 23.093 ms/op
                 executeQuery·p0.00:   1444.938 ms/op
                 executeQuery·p0.50:   1461.715 ms/op
                 executeQuery·p0.90:   1478.492 ms/op
                 executeQuery·p0.95:   1478.492 ms/op
                 executeQuery·p0.99:   1478.492 ms/op
                 executeQuery·p0.999:  1478.492 ms/op
                 executeQuery·p0.9999: 1478.492 ms/op
                 executeQuery·p1.00:   1478.492 ms/op

Iteration   2: 1465.610 ±(99.9%) 25.643 ms/op
                 executeQuery·p0.00:   1447.035 ms/op
                 executeQuery·p0.50:   1468.006 ms/op
                 executeQuery·p0.90:   1480.589 ms/op
                 executeQuery·p0.95:   1480.589 ms/op
                 executeQuery·p0.99:   1480.589 ms/op
                 executeQuery·p0.999:  1480.589 ms/op
                 executeQuery·p0.9999: 1480.589 ms/op
                 executeQuery·p1.00:   1480.589 ms/op

Iteration   3: 1454.824 ±(99.9%) 19.420 ms/op
                 executeQuery·p0.00:   1442.841 ms/op
                 executeQuery·p0.50:   1455.423 ms/op
                 executeQuery·p0.90:   1468.006 ms/op
                 executeQuery·p0.95:   1468.006 ms/op
                 executeQuery·p0.99:   1468.006 ms/op
                 executeQuery·p0.999:  1468.006 ms/op
                 executeQuery·p0.9999: 1468.006 ms/op
                 executeQuery·p1.00:   1468.006 ms/op

Iteration   4: 1538.710 ±(99.9%) 97.857 ms/op
                 executeQuery·p0.00:   1447.035 ms/op
                 executeQuery·p0.50:   1553.990 ms/op
                 executeQuery·p0.90:   1581.253 ms/op
                 executeQuery·p0.95:   1581.253 ms/op
                 executeQuery·p0.99:   1581.253 ms/op
                 executeQuery·p0.999:  1581.253 ms/op
                 executeQuery·p0.9999: 1581.253 ms/op
                 executeQuery·p1.00:   1581.253 ms/op

Iteration   5: 1560.581 ±(99.9%) 8.806 ms/op
                 executeQuery·p0.00:   1553.990 ms/op
                 executeQuery·p0.50:   1560.281 ms/op
                 executeQuery·p0.90:   1566.573 ms/op
                 executeQuery·p0.95:   1566.573 ms/op
                 executeQuery·p0.99:   1566.573 ms/op
                 executeQuery·p0.999:  1566.573 ms/op
                 executeQuery·p0.9999: 1566.573 ms/op
                 executeQuery·p1.00:   1566.573 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 35
  mean =   1496.588 ±(99.9%) 29.722 ms/op

  Histogram, ms/op:
    [1400.000, 1412.500) = 0 
    [1412.500, 1425.000) = 0 
    [1425.000, 1437.500) = 0 
    [1437.500, 1450.000) = 5 
    [1450.000, 1462.500) = 8 
    [1462.500, 1475.000) = 7 
    [1475.000, 1487.500) = 2 
    [1487.500, 1500.000) = 0 
    [1500.000, 1512.500) = 0 
    [1512.500, 1525.000) = 0 
    [1525.000, 1537.500) = 1 
    [1537.500, 1550.000) = 1 
    [1550.000, 1562.500) = 9 
    [1562.500, 1575.000) = 1 
    [1575.000, 1587.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1442.841 ms/op
     p(50.0000) =   1468.006 ms/op
     p(90.0000) =   1562.378 ms/op
     p(95.0000) =   1569.509 ms/op
     p(99.0000) =   1581.253 ms/op
     p(99.9000) =   1581.253 ms/op
     p(99.9900) =   1581.253 ms/op
     p(99.9990) =   1581.253 ms/op
     p(99.9999) =   1581.253 ms/op
    p(100.0000) =   1581.253 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 51.96% complete, ETA 02:33:24
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
21609.054 ms/op
# Warmup Iteration   2: 22582.133 ms/op
# Warmup Iteration   3: 21676.163 ms/op
# Warmup Iteration   4: 20568.867 ms/op
# Warmup Iteration   5: 20568.867 ms/op
Iteration   1: 20568.867 ms/op
                 executeQuery·p0.00:   20568.867 ms/op
                 executeQuery·p0.50:   20568.867 ms/op
                 executeQuery·p0.90:   20568.867 ms/op
                 executeQuery·p0.95:   20568.867 ms/op
                 executeQuery·p0.99:   20568.867 ms/op
                 executeQuery·p0.999:  20568.867 ms/op
                 executeQuery·p0.9999: 20568.867 ms/op
                 executeQuery·p1.00:   20568.867 ms/op

Iteration   2: 20568.867 ms/op
                 executeQuery·p0.00:   20568.867 ms/op
                 executeQuery·p0.50:   20568.867 ms/op
                 executeQuery·p0.90:   20568.867 ms/op
                 executeQuery·p0.95:   20568.867 ms/op
                 executeQuery·p0.99:   20568.867 ms/op
                 executeQuery·p0.999:  20568.867 ms/op
                 executeQuery·p0.9999: 20568.867 ms/op
                 executeQuery·p1.00:   20568.867 ms/op

Iteration   3: 20602.421 ms/op
                 executeQuery·p0.00:   20602.421 ms/op
                 executeQuery·p0.50:   20602.421 ms/op
                 executeQuery·p0.90:   20602.421 ms/op
                 executeQuery·p0.95:   20602.421 ms/op
                 executeQuery·p0.99:   20602.421 ms/op
                 executeQuery·p0.999:  20602.421 ms/op
                 executeQuery·p0.9999: 20602.421 ms/op
                 executeQuery·p1.00:   20602.421 ms/op

Iteration   4: 20602.421 ms/op
                 executeQuery·p0.00:   20602.421 ms/op
                 executeQuery·p0.50:   20602.421 ms/op
                 executeQuery·p0.90:   20602.421 ms/op
                 executeQuery·p0.95:   20602.421 ms/op
                 executeQuery·p0.99:   20602.421 ms/op
                 executeQuery·p0.999:  20602.421 ms/op
                 executeQuery·p0.9999: 20602.421 ms/op
                 executeQuery·p1.00:   20602.421 ms/op

Iteration   5: 20568.867 ms/op
                 executeQuery·p0.00:   20568.867 ms/op
                 executeQuery·p0.50:   20568.867 ms/op
                 executeQuery·p0.90:   20568.867 ms/op
                 executeQuery·p0.95:   20568.867 ms/op
                 executeQuery·p0.99:   20568.867 ms/op
                 executeQuery·p0.999:  20568.867 ms/op
                 executeQuery·p0.9999: 20568.867 ms/op
                 executeQuery·p1.00:   20568.867 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  20582.289 ±(99.9%) 70.769 ms/op

  Histogram, ms/op:
    [20560.000, 20565.000) = 0 
    [20565.000, 20570.000) = 3 
    [20570.000, 20575.000) = 0 
    [20575.000, 20580.000) = 0 
    [20580.000, 20585.000) = 0 
    [20585.000, 20590.000) = 0 
    [20590.000, 20595.000) = 0 
    [20595.000, 20600.000) = 0 
    [20600.000, 20605.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  20568.867 ms/op
     p(50.0000) =  20568.867 ms/op
     p(90.0000) =  20602.421 ms/op
     p(95.0000) =  20602.421 ms/op
     p(99.0000) =  20602.421 ms/op
     p(99.9000) =  20602.421 ms/op
     p(99.9900) =  20602.421 ms/op
     p(99.9990) =  20602.421 ms/op
     p(99.9999) =  20602.421 ms/op
    p(100.0000) =  20602.421 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 52.94% complete, ETA 02:30:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1195.027 ±(99.9%) 112.552 ms/op
# Warmup Iteration   2: 1202.134 ±(99.9%) 76.843 ms/op
# Warmup Iteration   3: 1192.347 ±(99.9%) 8.096 ms/op
# Warmup Iteration   4: 1190.716 ±(99.9%) 8.771 ms/op
# Warmup Iteration   5: 1193.046 ±(99.9%) 11.614 ms/op
Iteration   1: 1202.833 ±(99.9%) 7.289 ms/op
                 executeQuery·p0.00:   1193.279 ms/op
                 executeQuery·p0.50:   1203.765 ms/op
                 executeQuery·p0.90:   1210.057 ms/op
                 executeQuery·p0.95:   1210.057 ms/op
                 executeQuery·p0.99:   1210.057 ms/op
                 executeQuery·p0.999:  1210.057 ms/op
                 executeQuery·p0.9999: 1210.057 ms/op
                 executeQuery·p1.00:   1210.057 ms/op

Iteration   2: 1200.736 ±(99.9%) 5.874 ms/op
                 executeQuery·p0.00:   1195.377 ms/op
                 executeQuery·p0.50:   1201.668 ms/op
                 executeQuery·p0.90:   1207.960 ms/op
                 executeQuery·p0.95:   1207.960 ms/op
                 executeQuery·p0.99:   1207.960 ms/op
                 executeQuery·p0.999:  1207.960 ms/op
                 executeQuery·p0.9999: 1207.960 ms/op
                 executeQuery·p1.00:   1207.960 ms/op

Iteration   3: 1196.542 ±(99.9%) 8.830 ms/op
                 executeQuery·p0.00:   1189.085 ms/op
                 executeQuery·p0.50:   1199.571 ms/op
                 executeQuery·p0.90:   1201.668 ms/op
                 executeQuery·p0.95:   1201.668 ms/op
                 executeQuery·p0.99:   1201.668 ms/op
                 executeQuery·p0.999:  1201.668 ms/op
                 executeQuery·p0.9999: 1201.668 ms/op
                 executeQuery·p1.00:   1201.668 ms/op

Iteration   4: 1197.707 ±(99.9%) 6.697 ms/op
                 executeQuery·p0.00:   1191.182 ms/op
                 executeQuery·p0.50:   1199.571 ms/op
                 executeQuery·p0.90:   1201.668 ms/op
                 executeQuery·p0.95:   1201.668 ms/op
                 executeQuery·p0.99:   1201.668 ms/op
                 executeQuery·p0.999:  1201.668 ms/op
                 executeQuery·p0.9999: 1201.668 ms/op
                 executeQuery·p1.00:   1201.668 ms/op

Iteration   5: 1196.542 ±(99.9%) 13.547 ms/op
                 executeQuery·p0.00:   1180.697 ms/op
                 executeQuery·p0.50:   1197.474 ms/op
                 executeQuery·p0.90:   1207.960 ms/op
                 executeQuery·p0.95:   1207.960 ms/op
                 executeQuery·p0.99:   1207.960 ms/op
                 executeQuery·p0.999:  1207.960 ms/op
                 executeQuery·p0.9999: 1207.960 ms/op
                 executeQuery·p1.00:   1207.960 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 45
  mean =   1198.872 ±(99.9%) 2.963 ms/op

  Histogram, ms/op:
    [1180.000, 1182.500) = 1 
    [1182.500, 1185.000) = 0 
    [1185.000, 1187.500) = 0 
    [1187.500, 1190.000) = 2 
    [1190.000, 1192.500) = 3 
    [1192.500, 1195.000) = 5 
    [1195.000, 1197.500) = 4 
    [1197.500, 1200.000) = 10 
    [1200.000, 1202.500) = 11 
    [1202.500, 1205.000) = 6 
    [1205.000, 1207.500) = 0 
    [1207.500, 1210.000) = 2 
    [1210.000, 1212.500) = 1 
    [1212.500, 1215.000) = 0 
    [1215.000, 1217.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1180.697 ms/op
     p(50.0000) =   1199.571 ms/op
     p(90.0000) =   1203.765 ms/op
     p(95.0000) =   1207.960 ms/op
     p(99.0000) =   1210.057 ms/op
     p(99.9000) =   1210.057 ms/op
     p(99.9900) =   1210.057 ms/op
     p(99.9990) =   1210.057 ms/op
     p(99.9999) =   1210.057 ms/op
    p(100.0000) =   1210.057 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 53.92% complete, ETA 02:26:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
15015.608 ms/op
# Warmup Iteration   2: 15636.365 ms/op
# Warmup Iteration   3: 12633.244 ms/op
# Warmup Iteration   4: 15602.811 ms/op
# Warmup Iteration   5: 11962.155 ms/op
Iteration   1: 12012.487 ms/op
                 executeQuery·p0.00:   12012.487 ms/op
                 executeQuery·p0.50:   12012.487 ms/op
                 executeQuery·p0.90:   12012.487 ms/op
                 executeQuery·p0.95:   12012.487 ms/op
                 executeQuery·p0.99:   12012.487 ms/op
                 executeQuery·p0.999:  12012.487 ms/op
                 executeQuery·p0.9999: 12012.487 ms/op
                 executeQuery·p1.00:   12012.487 ms/op

Iteration   2: 12834.570 ms/op
                 executeQuery·p0.00:   12834.570 ms/op
                 executeQuery·p0.50:   12834.570 ms/op
                 executeQuery·p0.90:   12834.570 ms/op
                 executeQuery·p0.95:   12834.570 ms/op
                 executeQuery·p0.99:   12834.570 ms/op
                 executeQuery·p0.999:  12834.570 ms/op
                 executeQuery·p0.9999: 12834.570 ms/op
                 executeQuery·p1.00:   12834.570 ms/op

Iteration   3: 12012.487 ms/op
                 executeQuery·p0.00:   12012.487 ms/op
                 executeQuery·p0.50:   12012.487 ms/op
                 executeQuery·p0.90:   12012.487 ms/op
                 executeQuery·p0.95:   12012.487 ms/op
                 executeQuery·p0.99:   12012.487 ms/op
                 executeQuery·p0.999:  12012.487 ms/op
                 executeQuery·p0.9999: 12012.487 ms/op
                 executeQuery·p1.00:   12012.487 ms/op

Iteration   4: 12046.041 ms/op
                 executeQuery·p0.00:   12046.041 ms/op
                 executeQuery·p0.50:   12046.041 ms/op
                 executeQuery·p0.90:   12046.041 ms/op
                 executeQuery·p0.95:   12046.041 ms/op
                 executeQuery·p0.99:   12046.041 ms/op
                 executeQuery·p0.999:  12046.041 ms/op
                 executeQuery·p0.9999: 12046.041 ms/op
                 executeQuery·p1.00:   12046.041 ms/op

Iteration   5: 11995.709 ms/op
                 executeQuery·p0.00:   11995.709 ms/op
                 executeQuery·p0.50:   11995.709 ms/op
                 executeQuery·p0.90:   11995.709 ms/op
                 executeQuery·p0.95:   11995.709 ms/op
                 executeQuery·p0.99:   11995.709 ms/op
                 executeQuery·p0.999:  11995.709 ms/op
                 executeQuery·p0.9999: 11995.709 ms/op
                 executeQuery·p1.00:   11995.709 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 5
  mean =  12180.259 ±(99.9%) 1410.213 ms/op

  Histogram, ms/op:
    [11900.000, 12000.000) = 1 
    [12000.000, 12100.000) = 3 
    [12100.000, 12200.000) = 0 
    [12200.000, 12300.000) = 0 
    [12300.000, 12400.000) = 0 
    [12400.000, 12500.000) = 0 
    [12500.000, 12600.000) = 0 
    [12600.000, 12700.000) = 0 
    [12700.000, 12800.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  11995.709 ms/op
     p(50.0000) =  12012.487 ms/op
     p(90.0000) =  12834.570 ms/op
     p(95.0000) =  12834.570 ms/op
     p(99.0000) =  12834.570 ms/op
     p(99.9000) =  12834.570 ms/op
     p(99.9900) =  12834.570 ms/op
     p(99.9990) =  12834.570 ms/op
     p(99.9999) =  12834.570 ms/op
    p(100.0000) =  12834.570 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 54.90% complete, ETA 02:22:44
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1654.303 ±(99.9%) 153.191 ms/op
# Warmup Iteration   2: 1733.646 ±(99.9%) 79.655 ms/op
# Warmup Iteration   3: 1677.722 ±(99.9%) 139.909 ms/op
# Warmup Iteration   4: 1675.974 ±(99.9%) 17.998 ms/op
# Warmup Iteration   5: 1689.256 ±(99.9%) 6.168 ms/op
Iteration   1: 1689.256 ±(99.9%) 54.884 ms/op
                 executeQuery·p0.00:   1673.527 ms/op
                 executeQuery·p0.50:   1684.013 ms/op
                 executeQuery·p0.90:   1728.053 ms/op
                 executeQuery·p0.95:   1728.053 ms/op
                 executeQuery·p0.99:   1728.053 ms/op
                 executeQuery·p0.999:  1728.053 ms/op
                 executeQuery·p0.9999: 1728.053 ms/op
                 executeQuery·p1.00:   1728.053 ms/op

Iteration   2: 1766.152 ±(99.9%) 25.880 ms/op
                 executeQuery·p0.00:   1751.122 ms/op
                 executeQuery·p0.50:   1768.948 ms/op
                 executeQuery·p0.90:   1776.288 ms/op
                 executeQuery·p0.95:   1776.288 ms/op
                 executeQuery·p0.99:   1776.288 ms/op
                 executeQuery·p0.999:  1776.288 ms/op
                 executeQuery·p0.9999: 1776.288 ms/op
                 executeQuery·p1.00:   1776.288 ms/op

Iteration   3: 1760.909 ±(99.9%) 83.554 ms/op
                 executeQuery·p0.00:   1700.790 ms/op
                 executeQuery·p0.50:   1772.093 ms/op
                 executeQuery·p0.90:   1778.385 ms/op
                 executeQuery·p0.95:   1778.385 ms/op
                 executeQuery·p0.99:   1778.385 ms/op
                 executeQuery·p0.999:  1778.385 ms/op
                 executeQuery·p0.9999: 1778.385 ms/op
                 executeQuery·p1.00:   1778.385 ms/op

Iteration   4: 1778.035 ±(99.9%) 15.522 ms/op
                 executeQuery·p0.00:   1767.899 ms/op
                 executeQuery·p0.50:   1779.433 ms/op
                 executeQuery·p0.90:   1782.579 ms/op
                 executeQuery·p0.95:   1782.579 ms/op
                 executeQuery·p0.99:   1782.579 ms/op
                 executeQuery·p0.999:  1782.579 ms/op
                 executeQuery·p0.9999: 1782.579 ms/op
                 executeQuery·p1.00:   1782.579 ms/op

Iteration   5: 1707.431 ±(99.9%) 105.358 ms/op
                 executeQuery·p0.00:   1679.819 ms/op
                 executeQuery·p0.50:   1689.256 ms/op
                 executeQuery·p0.90:   1776.288 ms/op
                 executeQuery·p0.95:   1776.288 ms/op
                 executeQuery·p0.99:   1776.288 ms/op
                 executeQuery·p0.999:  1776.288 ms/op
                 executeQuery·p0.9999: 1776.288 ms/op
                 executeQuery·p1.00:   1776.288 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   1740.357 ±(99.9%) 28.075 ms/op

  Histogram, ms/op:
    [1600.000, 1612.500) = 0 
    [1612.500, 1625.000) = 0 
    [1625.000, 1637.500) = 0 
    [1637.500, 1650.000) = 0 
    [1650.000, 1662.500) = 0 
    [1662.500, 1675.000) = 1 
    [1675.000, 1687.500) = 6 
    [1687.500, 1700.000) = 2 
    [1700.000, 1712.500) = 1 
    [1712.500, 1725.000) = 0 
    [1725.000, 1737.500) = 2 
    [1737.500, 1750.000) = 0 
    [1750.000, 1762.500) = 2 
    [1762.500, 1775.000) = 7 
    [1775.000, 1787.500) = 9 

  Percentiles, ms/op:
      p(0.0000) =   1673.527 ms/op
     p(50.0000) =   1766.851 ms/op
     p(90.0000) =   1780.272 ms/op
     p(95.0000) =   1782.579 ms/op
     p(99.0000) =   1782.579 ms/op
     p(99.9000) =   1782.579 ms/op
     p(99.9900) =   1782.579 ms/op
     p(99.9990) =   1782.579 ms/op
     p(99.9999) =   1782.579 ms/op
    p(100.0000) =   1782.579 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 55.88% complete, ETA 02:18:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
18152.948 ms/op
# Warmup Iteration   2: 20736.639 ms/op
# Warmup Iteration   3: 19629.343 ms/op
# Warmup Iteration   4: 19998.441 ms/op
# Warmup Iteration   5: 18522.046 ms/op
Iteration   1: 18522.046 ms/op
                 executeQuery·p0.00:   18522.046 ms/op
                 executeQuery·p0.50:   18522.046 ms/op
                 executeQuery·p0.90:   18522.046 ms/op
                 executeQuery·p0.95:   18522.046 ms/op
                 executeQuery·p0.99:   18522.046 ms/op
                 executeQuery·p0.999:  18522.046 ms/op
                 executeQuery·p0.9999: 18522.046 ms/op
                 executeQuery·p1.00:   18522.046 ms/op

Iteration   2: 18454.938 ms/op
                 executeQuery·p0.00:   18454.938 ms/op
                 executeQuery·p0.50:   18454.938 ms/op
                 executeQuery·p0.90:   18454.938 ms/op
                 executeQuery·p0.95:   18454.938 ms/op
                 executeQuery·p0.99:   18454.938 ms/op
                 executeQuery·p0.999:  18454.938 ms/op
                 executeQuery·p0.9999: 18454.938 ms/op
                 executeQuery·p1.00:   18454.938 ms/op

Iteration   3: 18488.492 ms/op
                 executeQuery·p0.00:   18488.492 ms/op
                 executeQuery·p0.50:   18488.492 ms/op
                 executeQuery·p0.90:   18488.492 ms/op
                 executeQuery·p0.95:   18488.492 ms/op
                 executeQuery·p0.99:   18488.492 ms/op
                 executeQuery·p0.999:  18488.492 ms/op
                 executeQuery·p0.9999: 18488.492 ms/op
                 executeQuery·p1.00:   18488.492 ms/op

Iteration   4: 18488.492 ms/op
                 executeQuery·p0.00:   18488.492 ms/op
                 executeQuery·p0.50:   18488.492 ms/op
                 executeQuery·p0.90:   18488.492 ms/op
                 executeQuery·p0.95:   18488.492 ms/op
                 executeQuery·p0.99:   18488.492 ms/op
                 executeQuery·p0.999:  18488.492 ms/op
                 executeQuery·p0.9999: 18488.492 ms/op
                 executeQuery·p1.00:   18488.492 ms/op

Iteration   5: 18522.046 ms/op
                 executeQuery·p0.00:   18522.046 ms/op
                 executeQuery·p0.50:   18522.046 ms/op
                 executeQuery·p0.90:   18522.046 ms/op
                 executeQuery·p0.95:   18522.046 ms/op
                 executeQuery·p0.99:   18522.046 ms/op
                 executeQuery·p0.999:  18522.046 ms/op
                 executeQuery·p0.9999: 18522.046 ms/op
                 executeQuery·p1.00:   18522.046 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  18495.203 ±(99.9%) 108.102 ms/op

  Histogram, ms/op:
    [18450.000, 18455.000) = 1 
    [18455.000, 18460.000) = 0 
    [18460.000, 18465.000) = 0 
    [18465.000, 18470.000) = 0 
    [18470.000, 18475.000) = 0 
    [18475.000, 18480.000) = 0 
    [18480.000, 18485.000) = 0 
    [18485.000, 18490.000) = 2 
    [18490.000, 18495.000) = 0 
    [18495.000, 18500.000) = 0 
    [18500.000, 18505.000) = 0 
    [18505.000, 18510.000) = 0 
    [18510.000, 18515.000) = 0 
    [18515.000, 18520.000) = 0 
    [18520.000, 18525.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  18454.938 ms/op
     p(50.0000) =  18488.492 ms/op
     p(90.0000) =  18522.046 ms/op
     p(95.0000) =  18522.046 ms/op
     p(99.0000) =  18522.046 ms/op
     p(99.9000) =  18522.046 ms/op
     p(99.9900) =  18522.046 ms/op
     p(99.9990) =  18522.046 ms/op
     p(99.9999) =  18522.046 ms/op
    p(100.0000) =  18522.046 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 56.86% complete, ETA 02:15:44
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
762.315 ±(99.9%) 75.586 ms/op
# Warmup Iteration   2: 740.220 ±(99.9%) 4.942 ms/op
# Warmup Iteration   3: 768.606 ±(99.9%) 4.642 ms/op
# Warmup Iteration   4: 769.171 ±(99.9%) 2.438 ms/op
# Warmup Iteration   5: 769.010 ±(99.9%) 1.206 ms/op
Iteration   1: 768.284 ±(99.9%) 1.730 ms/op
                 executeQuery·p0.00:   765.460 ms/op
                 executeQuery·p0.50:   768.606 ms/op
                 executeQuery·p0.90:   770.284 ms/op
                 executeQuery·p0.95:   770.703 ms/op
                 executeQuery·p0.99:   770.703 ms/op
                 executeQuery·p0.999:  770.703 ms/op
                 executeQuery·p0.9999: 770.703 ms/op
                 executeQuery·p1.00:   770.703 ms/op

Iteration   2: 768.364 ±(99.9%) 1.464 ms/op
                 executeQuery·p0.00:   766.509 ms/op
                 executeQuery·p0.50:   768.606 ms/op
                 executeQuery·p0.90:   770.284 ms/op
                 executeQuery·p0.95:   770.703 ms/op
                 executeQuery·p0.99:   770.703 ms/op
                 executeQuery·p0.999:  770.703 ms/op
                 executeQuery·p0.9999: 770.703 ms/op
                 executeQuery·p1.00:   770.703 ms/op

Iteration   3: 768.768 ±(99.9%) 1.609 ms/op
                 executeQuery·p0.00:   766.509 ms/op
                 executeQuery·p0.50:   768.606 ms/op
                 executeQuery·p0.90:   770.913 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   4: 768.768 ±(99.9%) 1.975 ms/op
                 executeQuery·p0.00:   765.460 ms/op
                 executeQuery·p0.50:   768.606 ms/op
                 executeQuery·p0.90:   770.703 ms/op
                 executeQuery·p0.95:   770.703 ms/op
                 executeQuery·p0.99:   770.703 ms/op
                 executeQuery·p0.999:  770.703 ms/op
                 executeQuery·p0.9999: 770.703 ms/op
                 executeQuery·p1.00:   770.703 ms/op

Iteration   5: 767.477 ±(99.9%) 3.096 ms/op
                 executeQuery·p0.00:   763.363 ms/op
                 executeQuery·p0.50:   767.558 ms/op
                 executeQuery·p0.90:   772.171 ms/op
                 executeQuery·p0.95:   773.849 ms/op
                 executeQuery·p0.99:   773.849 ms/op
                 executeQuery·p0.999:  773.849 ms/op
                 executeQuery·p0.9999: 773.849 ms/op
                 executeQuery·p1.00:   773.849 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 65
  mean =    768.332 ±(99.9%) 0.741 ms/op

  Histogram, ms/op:
    [760.000, 761.250) = 0 
    [761.250, 762.500) = 0 
    [762.500, 763.750) = 1 
    [763.750, 765.000) = 1 
    [765.000, 766.250) = 3 
    [766.250, 767.500) = 6 
    [767.500, 768.750) = 35 
    [768.750, 770.000) = 11 
    [770.000, 771.250) = 6 
    [771.250, 772.500) = 1 
    [772.500, 773.750) = 0 
    [773.750, 775.000) = 1 
    [775.000, 776.250) = 0 
    [776.250, 777.500) = 0 
    [777.500, 778.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    763.363 ms/op
     p(50.0000) =    768.606 ms/op
     p(90.0000) =    770.703 ms/op
     p(95.0000) =    770.703 ms/op
     p(99.0000) =    773.849 ms/op
     p(99.9000) =    773.849 ms/op
     p(99.9900) =    773.849 ms/op
     p(99.9990) =    773.849 ms/op
     p(99.9999) =    773.849 ms/op
    p(100.0000) =    773.849 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 57.84% complete, ETA 02:11:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
10317.988 ms/op
# Warmup Iteration   2: 10276.045 ms/op
# Warmup Iteration   3: 9244.246 ms/op
# Warmup Iteration   4: 9261.023 ms/op
# Warmup Iteration   5: 8799.650 ms/op
Iteration   1: 8791.261 ms/op
                 executeQuery·p0.00:   8791.261 ms/op
                 executeQuery·p0.50:   8791.261 ms/op
                 executeQuery·p0.90:   8791.261 ms/op
                 executeQuery·p0.95:   8791.261 ms/op
                 executeQuery·p0.99:   8791.261 ms/op
                 executeQuery·p0.999:  8791.261 ms/op
                 executeQuery·p0.9999: 8791.261 ms/op
                 executeQuery·p1.00:   8791.261 ms/op

Iteration   2: 8808.038 ms/op
                 executeQuery·p0.00:   8808.038 ms/op
                 executeQuery·p0.50:   8808.038 ms/op
                 executeQuery·p0.90:   8808.038 ms/op
                 executeQuery·p0.95:   8808.038 ms/op
                 executeQuery·p0.99:   8808.038 ms/op
                 executeQuery·p0.999:  8808.038 ms/op
                 executeQuery·p0.9999: 8808.038 ms/op
                 executeQuery·p1.00:   8808.038 ms/op

Iteration   3: 8799.650 ms/op
                 executeQuery·p0.00:   8791.261 ms/op
                 executeQuery·p0.50:   8799.650 ms/op
                 executeQuery·p0.90:   8808.038 ms/op
                 executeQuery·p0.95:   8808.038 ms/op
                 executeQuery·p0.99:   8808.038 ms/op
                 executeQuery·p0.999:  8808.038 ms/op
                 executeQuery·p0.9999: 8808.038 ms/op
                 executeQuery·p1.00:   8808.038 ms/op

Iteration   4: 8791.261 ms/op
                 executeQuery·p0.00:   8791.261 ms/op
                 executeQuery·p0.50:   8791.261 ms/op
                 executeQuery·p0.90:   8791.261 ms/op
                 executeQuery·p0.95:   8791.261 ms/op
                 executeQuery·p0.99:   8791.261 ms/op
                 executeQuery·p0.999:  8791.261 ms/op
                 executeQuery·p0.9999: 8791.261 ms/op
                 executeQuery·p1.00:   8791.261 ms/op

Iteration   5: 8808.038 ms/op
                 executeQuery·p0.00:   8791.261 ms/op
                 executeQuery·p0.50:   8808.038 ms/op
                 executeQuery·p0.90:   8824.816 ms/op
                 executeQuery·p0.95:   8824.816 ms/op
                 executeQuery·p0.99:   8824.816 ms/op
                 executeQuery·p0.999:  8824.816 ms/op
                 executeQuery·p0.9999: 8824.816 ms/op
                 executeQuery·p1.00:   8824.816 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 10
  mean =   8799.650 ±(99.9%) 17.936 ms/op

  Histogram, ms/op:
    [8790.000, 8792.500) = 6 
    [8792.500, 8795.000) = 0 
    [8795.000, 8797.500) = 0 
    [8797.500, 8800.000) = 0 
    [8800.000, 8802.500) = 0 
    [8802.500, 8805.000) = 0 
    [8805.000, 8807.500) = 0 
    [8807.500, 8810.000) = 3 
    [8810.000, 8812.500) = 0 
    [8812.500, 8815.000) = 0 
    [8815.000, 8817.500) = 0 
    [8817.500, 8820.000) = 0 
    [8820.000, 8822.500) = 0 
    [8822.500, 8825.000) = 1 
    [8825.000, 8827.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   8791.261 ms/op
     p(50.0000) =   8791.261 ms/op
     p(90.0000) =   8823.138 ms/op
     p(95.0000) =   8824.816 ms/op
     p(99.0000) =   8824.816 ms/op
     p(99.9000) =   8824.816 ms/op
     p(99.9900) =   8824.816 ms/op
     p(99.9990) =   8824.816 ms/op
     p(99.9999) =   8824.816 ms/op
    p(100.0000) =   8824.816 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 58.82% complete, ETA 02:08:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
262.027 ±(99.9%) 50.342 ms/op
# Warmup Iteration   2: 251.566 ±(99.9%) 9.679 ms/op
# Warmup Iteration   3: 257.318 ±(99.9%) 8.637 ms/op
# Warmup Iteration   4: 238.495 ±(99.9%) 2.423 ms/op
# Warmup Iteration   5: 235.613 ±(99.9%) 2.681 ms/op
Iteration   1: 235.716 ±(99.9%) 2.580 ms/op
                 executeQuery·p0.00:   231.211 ms/op
                 executeQuery·p0.50:   235.143 ms/op
                 executeQuery·p0.90:   238.708 ms/op
                 executeQuery·p0.95:   241.802 ms/op
                 executeQuery·p0.99:   261.095 ms/op
                 executeQuery·p0.999:  261.095 ms/op
                 executeQuery·p0.9999: 261.095 ms/op
                 executeQuery·p1.00:   261.095 ms/op

Iteration   2: 237.234 ±(99.9%) 2.281 ms/op
                 executeQuery·p0.00:   232.522 ms/op
                 executeQuery·p0.50:   237.109 ms/op
                 executeQuery·p0.90:   238.472 ms/op
                 executeQuery·p0.95:   238.551 ms/op
                 executeQuery·p0.99:   261.620 ms/op
                 executeQuery·p0.999:  261.620 ms/op
                 executeQuery·p0.9999: 261.620 ms/op
                 executeQuery·p1.00:   261.620 ms/op

Iteration   3: 235.332 ±(99.9%) 2.293 ms/op
                 executeQuery·p0.00:   230.687 ms/op
                 executeQuery·p0.50:   234.881 ms/op
                 executeQuery·p0.90:   237.922 ms/op
                 executeQuery·p0.95:   239.075 ms/op
                 executeQuery·p0.99:   258.998 ms/op
                 executeQuery·p0.999:  258.998 ms/op
                 executeQuery·p0.9999: 258.998 ms/op
                 executeQuery·p1.00:   258.998 ms/op

Iteration   4: 234.265 ±(99.9%) 2.286 ms/op
                 executeQuery·p0.00:   230.949 ms/op
                 executeQuery·p0.50:   233.832 ms/op
                 executeQuery·p0.90:   235.825 ms/op
                 executeQuery·p0.95:   237.031 ms/op
                 executeQuery·p0.99:   259.523 ms/op
                 executeQuery·p0.999:  259.523 ms/op
                 executeQuery·p0.9999: 259.523 ms/op
                 executeQuery·p1.00:   259.523 ms/op

Iteration   5: 233.741 ±(99.9%) 2.353 ms/op
                 executeQuery·p0.00:   230.687 ms/op
                 executeQuery·p0.50:   233.046 ms/op
                 executeQuery·p0.90:   235.143 ms/op
                 executeQuery·p0.95:   235.615 ms/op
                 executeQuery·p0.99:   260.309 ms/op
                 executeQuery·p0.999:  260.309 ms/op
                 executeQuery·p0.9999: 260.309 ms/op
                 executeQuery·p1.00:   260.309 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 214
  mean =    235.249 ±(99.9%) 1.025 ms/op

  Histogram, ms/op:
    [230.000, 232.500) = 39 
    [232.500, 235.000) = 84 
    [235.000, 237.500) = 53 
    [237.500, 240.000) = 32 
    [240.000, 242.500) = 1 
    [242.500, 245.000) = 0 
    [245.000, 247.500) = 0 
    [247.500, 250.000) = 0 
    [250.000, 252.500) = 0 
    [252.500, 255.000) = 0 
    [255.000, 257.500) = 0 
    [257.500, 260.000) = 2 
    [260.000, 262.500) = 3 
    [262.500, 265.000) = 0 
    [265.000, 267.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    230.687 ms/op
     p(50.0000) =    234.619 ms/op
     p(90.0000) =    238.027 ms/op
     p(95.0000) =    238.551 ms/op
     p(99.0000) =    260.977 ms/op
     p(99.9000) =    261.620 ms/op
     p(99.9900) =    261.620 ms/op
     p(99.9990) =    261.620 ms/op
     p(99.9999) =    261.620 ms/op
    p(100.0000) =    261.620 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 59.80% complete, ETA 02:04:34
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5924.454 ms/op
# Warmup Iteration   2: 3206.545 ±(99.9%) 593.190 ms/op
# Warmup Iteration   3: 3219.128 ±(99.9%) 1359.597 ms/op
# Warmup Iteration   4: 3326.083 ±(99.9%) 713.326 ms/op
# Warmup Iteration   5: 3226.468 ±(99.9%) 708.979 ms/op
Iteration   1: 3235.906 ±(99.9%) 193.558 ms/op
                 executeQuery·p0.00:   3204.448 ms/op
                 executeQuery·p0.50:   3231.711 ms/op
                 executeQuery·p0.90:   3275.751 ms/op
                 executeQuery·p0.95:   3275.751 ms/op
                 executeQuery·p0.99:   3275.751 ms/op
                 executeQuery·p0.999:  3275.751 ms/op
                 executeQuery·p0.9999: 3275.751 ms/op
                 executeQuery·p1.00:   3275.751 ms/op

Iteration   2: 3122.659 ±(99.9%) 798.060 ms/op
                 executeQuery·p0.00:   2998.927 ms/op
                 executeQuery·p0.50:   3120.562 ms/op
                 executeQuery·p0.90:   3250.586 ms/op
                 executeQuery·p0.95:   3250.586 ms/op
                 executeQuery·p0.99:   3250.586 ms/op
                 executeQuery·p0.999:  3250.586 ms/op
                 executeQuery·p0.9999: 3250.586 ms/op
                 executeQuery·p1.00:   3250.586 ms/op

Iteration   3: 3210.740 ±(99.9%) 514.967 ms/op
                 executeQuery·p0.00:   3149.922 ms/op
                 executeQuery·p0.50:   3183.477 ms/op
                 executeQuery·p0.90:   3326.083 ms/op
                 executeQuery·p0.95:   3326.083 ms/op
                 executeQuery·p0.99:   3326.083 ms/op
                 executeQuery·p0.999:  3326.083 ms/op
                 executeQuery·p0.9999: 3326.083 ms/op
                 executeQuery·p1.00:   3326.083 ms/op

Iteration   4: 3147.825 ±(99.9%) 452.177 ms/op
                 executeQuery·p0.00:   3049.259 ms/op
                 executeQuery·p0.50:   3166.700 ms/op
                 executeQuery·p0.90:   3208.643 ms/op
                 executeQuery·p0.95:   3208.643 ms/op
                 executeQuery·p0.99:   3208.643 ms/op
                 executeQuery·p0.999:  3208.643 ms/op
                 executeQuery·p0.9999: 3208.643 ms/op
                 executeQuery·p1.00:   3208.643 ms/op

Iteration   5: 3164.602 ±(99.9%) 669.957 ms/op
                 executeQuery·p0.00:   3015.705 ms/op
                 executeQuery·p0.50:   3193.962 ms/op
                 executeQuery·p0.90:   3254.780 ms/op
                 executeQuery·p0.95:   3254.780 ms/op
                 executeQuery·p0.99:   3254.780 ms/op
                 executeQuery·p0.999:  3254.780 ms/op
                 executeQuery·p0.9999: 3254.780 ms/op
                 executeQuery·p1.00:   3254.780 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   3176.346 ±(99.9%) 76.818 ms/op

  Histogram, ms/op:
    [2900.000, 2950.000) = 0 
    [2950.000, 3000.000) = 1 
    [3000.000, 3050.000) = 3 
    [3050.000, 3100.000) = 0 
    [3100.000, 3150.000) = 2 
    [3150.000, 3200.000) = 3 
    [3200.000, 3250.000) = 7 
    [3250.000, 3300.000) = 3 
    [3300.000, 3350.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2998.927 ms/op
     p(50.0000) =   3202.351 ms/op
     p(90.0000) =   3273.654 ms/op
     p(95.0000) =   3323.566 ms/op
     p(99.0000) =   3326.083 ms/op
     p(99.9000) =   3326.083 ms/op
     p(99.9900) =   3326.083 ms/op
     p(99.9990) =   3326.083 ms/op
     p(99.9999) =   3326.083 ms/op
    p(100.0000) =   3326.083 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 60.78% complete, ETA 02:00:58
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
194.871 ±(99.9%) 35.087 ms/op
# Warmup Iteration   2: 181.590 ±(99.9%) 4.611 ms/op
# Warmup Iteration   3: 182.326 ±(99.9%) 4.089 ms/op
# Warmup Iteration   4: 173.535 ±(99.9%) 1.802 ms/op
# Warmup Iteration   5: 173.654 ±(99.9%) 0.749 ms/op
Iteration   1: 172.251 ±(99.9%) 2.137 ms/op
                 executeQuery·p0.00:   167.510 ms/op
                 executeQuery·p0.50:   172.229 ms/op
                 executeQuery·p0.90:   174.326 ms/op
                 executeQuery·p0.95:   174.640 ms/op
                 executeQuery·p0.99:   203.162 ms/op
                 executeQuery·p0.999:  203.162 ms/op
                 executeQuery·p0.9999: 203.162 ms/op
                 executeQuery·p1.00:   203.162 ms/op

Iteration   2: 173.137 ±(99.9%) 1.646 ms/op
                 executeQuery·p0.00:   168.296 ms/op
                 executeQuery·p0.50:   173.015 ms/op
                 executeQuery·p0.90:   174.588 ms/op
                 executeQuery·p0.95:   174.876 ms/op
                 executeQuery·p0.99:   197.394 ms/op
                 executeQuery·p0.999:  197.394 ms/op
                 executeQuery·p0.9999: 197.394 ms/op
                 executeQuery·p1.00:   197.394 ms/op

Iteration   3: 172.491 ±(99.9%) 1.811 ms/op
                 executeQuery·p0.00:   166.986 ms/op
                 executeQuery·p0.50:   172.753 ms/op
                 executeQuery·p0.90:   175.112 ms/op
                 executeQuery·p0.95:   175.138 ms/op
                 executeQuery·p0.99:   195.559 ms/op
                 executeQuery·p0.999:  195.559 ms/op
                 executeQuery·p0.9999: 195.559 ms/op
                 executeQuery·p1.00:   195.559 ms/op

Iteration   4: 173.042 ±(99.9%) 2.122 ms/op
                 executeQuery·p0.00:   167.510 ms/op
                 executeQuery·p0.50:   172.884 ms/op
                 executeQuery·p0.90:   174.326 ms/op
                 executeQuery·p0.95:   174.339 ms/op
                 executeQuery·p0.99:   205.783 ms/op
                 executeQuery·p0.999:  205.783 ms/op
                 executeQuery·p0.9999: 205.783 ms/op
                 executeQuery·p1.00:   205.783 ms/op

Iteration   5: 172.590 ±(99.9%) 0.769 ms/op
                 executeQuery·p0.00:   166.986 ms/op
                 executeQuery·p0.50:   172.753 ms/op
                 executeQuery·p0.90:   174.326 ms/op
                 executeQuery·p0.95:   174.601 ms/op
                 executeQuery·p0.99:   175.112 ms/op
                 executeQuery·p0.999:  175.112 ms/op
                 executeQuery·p0.9999: 175.112 ms/op
                 executeQuery·p1.00:   175.112 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 290
  mean =    172.702 ±(99.9%) 0.756 ms/op

  Histogram, ms/op:
    [160.000, 165.000) = 0 
    [165.000, 170.000) = 41 
    [170.000, 175.000) = 237 
    [175.000, 180.000) = 8 
    [180.000, 185.000) = 0 
    [185.000, 190.000) = 0 
    [190.000, 195.000) = 0 
    [195.000, 200.000) = 2 
    [200.000, 205.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    166.986 ms/op
     p(50.0000) =    172.753 ms/op
     p(90.0000) =    174.326 ms/op
     p(95.0000) =    174.850 ms/op
     p(99.0000) =    197.913 ms/op
     p(99.9000) =    205.783 ms/op
     p(99.9900) =    205.783 ms/op
     p(99.9990) =    205.783 ms/op
     p(99.9999) =    205.783 ms/op
    p(100.0000) =    205.783 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 61.76% complete, ETA 01:57:07
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3026.190 ±(99.9%) 7297.468 ms/op
# Warmup Iteration   2: 2304.351 ±(99.9%) 188.210 ms/op
# Warmup Iteration   3: 2266.602 ±(99.9%) 143.369 ms/op
# Warmup Iteration   4: 2314.417 ±(99.9%) 288.326 ms/op
# Warmup Iteration   5: 2321.128 ±(99.9%) 579.810 ms/op
Iteration   1: 2358.038 ±(99.9%) 401.404 ms/op
                 executeQuery·p0.00:   2243.953 ms/op
                 executeQuery·p0.50:   2344.616 ms/op
                 executeQuery·p0.90:   2516.582 ms/op
                 executeQuery·p0.95:   2516.582 ms/op
                 executeQuery·p0.99:   2516.582 ms/op
                 executeQuery·p0.999:  2516.582 ms/op
                 executeQuery·p0.9999: 2516.582 ms/op
                 executeQuery·p1.00:   2516.582 ms/op

Iteration   2: 2238.919 ±(99.9%) 177.070 ms/op
                 executeQuery·p0.00:   2206.204 ms/op
                 executeQuery·p0.50:   2218.787 ms/op
                 executeQuery·p0.90:   2315.256 ms/op
                 executeQuery·p0.95:   2315.256 ms/op
                 executeQuery·p0.99:   2315.256 ms/op
                 executeQuery·p0.999:  2315.256 ms/op
                 executeQuery·p0.9999: 2315.256 ms/op
                 executeQuery·p1.00:   2315.256 ms/op

Iteration   3: 2330.355 ±(99.9%) 336.386 ms/op
                 executeQuery·p0.00:   2260.730 ms/op
                 executeQuery·p0.50:   2290.090 ms/op
                 executeQuery·p0.90:   2478.834 ms/op
                 executeQuery·p0.95:   2478.834 ms/op
                 executeQuery·p0.99:   2478.834 ms/op
                 executeQuery·p0.999:  2478.834 ms/op
                 executeQuery·p0.9999: 2478.834 ms/op
                 executeQuery·p1.00:   2478.834 ms/op

Iteration   4: 2355.521 ±(99.9%) 244.566 ms/op
                 executeQuery·p0.00:   2298.479 ms/op
                 executeQuery·p0.50:   2340.422 ms/op
                 executeQuery·p0.90:   2462.056 ms/op
                 executeQuery·p0.95:   2462.056 ms/op
                 executeQuery·p0.99:   2462.056 ms/op
                 executeQuery·p0.999:  2462.056 ms/op
                 executeQuery·p0.9999: 2462.056 ms/op
                 executeQuery·p1.00:   2462.056 ms/op

Iteration   5: 2299.317 ±(99.9%) 172.972 ms/op
                 executeQuery·p0.00:   2248.147 ms/op
                 executeQuery·p0.50:   2285.896 ms/op
                 executeQuery·p0.90:   2365.587 ms/op
                 executeQuery·p0.95:   2365.587 ms/op
                 executeQuery·p0.99:   2365.587 ms/op
                 executeQuery·p0.999:  2365.587 ms/op
                 executeQuery·p0.9999: 2365.587 ms/op
                 executeQuery·p1.00:   2365.587 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 25
  mean =   2316.430 ±(99.9%) 60.282 ms/op

  Histogram, ms/op:
    [2200.000, 2225.000) = 3 
    [2225.000, 2250.000) = 3 
    [2250.000, 2275.000) = 1 
    [2275.000, 2300.000) = 6 
    [2300.000, 2325.000) = 3 
    [2325.000, 2350.000) = 3 
    [2350.000, 2375.000) = 2 
    [2375.000, 2400.000) = 1 
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 0 
    [2450.000, 2475.000) = 1 
    [2475.000, 2500.000) = 1 
    [2500.000, 2525.000) = 1 
    [2525.000, 2550.000) = 0 
    [2550.000, 2575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2206.204 ms/op
     p(50.0000) =   2298.479 ms/op
     p(90.0000) =   2468.767 ms/op
     p(95.0000) =   2505.258 ms/op
     p(99.0000) =   2516.582 ms/op
     p(99.9000) =   2516.582 ms/op
     p(99.9900) =   2516.582 ms/op
     p(99.9990) =   2516.582 ms/op
     p(99.9999) =   2516.582 ms/op
    p(100.0000) =   2516.582 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 62.75% complete, ETA 01:53:30
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
202.135 ±(99.9%) 27.506 ms/op
# Warmup Iteration   2: 193.699 ±(99.9%) 4.343 ms/op
# Warmup Iteration   3: 191.693 ±(99.9%) 2.329 ms/op
# Warmup Iteration   4: 193.503 ±(99.9%) 3.744 ms/op
# Warmup Iteration   5: 189.139 ±(99.9%) 2.437 ms/op
Iteration   1: 188.843 ±(99.9%) 1.025 ms/op
                 executeQuery·p0.00:   182.714 ms/op
                 executeQuery·p0.50:   189.530 ms/op
                 executeQuery·p0.90:   190.841 ms/op
                 executeQuery·p0.95:   191.785 ms/op
                 executeQuery·p0.99:   192.676 ms/op
                 executeQuery·p0.999:  192.676 ms/op
                 executeQuery·p0.9999: 192.676 ms/op
                 executeQuery·p1.00:   192.676 ms/op

Iteration   2: 187.121 ±(99.9%) 1.695 ms/op
                 executeQuery·p0.00:   181.404 ms/op
                 executeQuery·p0.50:   186.909 ms/op
                 executeQuery·p0.90:   189.268 ms/op
                 executeQuery·p0.95:   189.871 ms/op
                 executeQuery·p0.99:   207.356 ms/op
                 executeQuery·p0.999:  207.356 ms/op
                 executeQuery·p0.9999: 207.356 ms/op
                 executeQuery·p1.00:   207.356 ms/op

Iteration   3: 187.641 ±(99.9%) 1.811 ms/op
                 executeQuery·p0.00:   180.879 ms/op
                 executeQuery·p0.50:   188.219 ms/op
                 executeQuery·p0.90:   189.530 ms/op
                 executeQuery·p0.95:   189.871 ms/op
                 executeQuery·p0.99:   209.715 ms/op
                 executeQuery·p0.999:  209.715 ms/op
                 executeQuery·p0.9999: 209.715 ms/op
                 executeQuery·p1.00:   209.715 ms/op

Iteration   4: 184.918 ±(99.9%) 2.533 ms/op
                 executeQuery·p0.00:   179.569 ms/op
                 executeQuery·p0.50:   185.205 ms/op
                 executeQuery·p0.90:   188.088 ms/op
                 executeQuery·p0.95:   189.137 ms/op
                 executeQuery·p0.99:   216.793 ms/op
                 executeQuery·p0.999:  216.793 ms/op
                 executeQuery·p0.9999: 216.793 ms/op
                 executeQuery·p1.00:   216.793 ms/op

Iteration   5: 185.346 ±(99.9%) 0.954 ms/op
                 executeQuery·p0.00:   180.879 ms/op
                 executeQuery·p0.50:   185.598 ms/op
                 executeQuery·p0.90:   187.695 ms/op
                 executeQuery·p0.95:   187.957 ms/op
                 executeQuery·p0.99:   187.957 ms/op
                 executeQuery·p0.999:  187.957 ms/op
                 executeQuery·p0.9999: 187.957 ms/op
                 executeQuery·p1.00:   187.957 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 267
  mean =    186.761 ±(99.9%) 0.783 ms/op

  Histogram, ms/op:
    [170.000, 175.000) = 0 
    [175.000, 180.000) = 1 
    [180.000, 185.000) = 64 
    [185.000, 190.000) = 179 
    [190.000, 195.000) = 20 
    [195.000, 200.000) = 0 
    [200.000, 205.000) = 0 
    [205.000, 210.000) = 2 
    [210.000, 215.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    179.569 ms/op
     p(50.0000) =    186.909 ms/op
     p(90.0000) =    189.792 ms/op
     p(95.0000) =    190.474 ms/op
     p(99.0000) =    208.111 ms/op
     p(99.9000) =    216.793 ms/op
     p(99.9900) =    216.793 ms/op
     p(99.9990) =    216.793 ms/op
     p(99.9999) =    216.793 ms/op
    p(100.0000) =    216.793 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 63.73% complete, ETA 01:49:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3373.619 ±(99.9%) 23765.790 ms/op
# Warmup Iteration   2: 2609.906 ±(99.9%) 330.007 ms/op
# Warmup Iteration   3: 2498.127 ±(99.9%) 139.683 ms/op
# Warmup Iteration   4: 2465.202 ±(99.9%) 402.239 ms/op
# Warmup Iteration   5: 2500.644 ±(99.9%) 330.480 ms/op
Iteration   1: 2412.564 ±(99.9%) 352.627 ms/op
                 executeQuery·p0.00:   2323.644 ms/op
                 executeQuery·p0.50:   2386.559 ms/op
                 executeQuery·p0.90:   2558.525 ms/op
                 executeQuery·p0.95:   2558.525 ms/op
                 executeQuery·p0.99:   2558.525 ms/op
                 executeQuery·p0.999:  2558.525 ms/op
                 executeQuery·p0.9999: 2558.525 ms/op
                 executeQuery·p1.00:   2558.525 ms/op

Iteration   2: 2451.151 ±(99.9%) 479.463 ms/op
                 executeQuery·p0.00:   2365.587 ms/op
                 executeQuery·p0.50:   2390.753 ms/op
                 executeQuery·p0.90:   2667.577 ms/op
                 executeQuery·p0.95:   2667.577 ms/op
                 executeQuery·p0.99:   2667.577 ms/op
                 executeQuery·p0.999:  2667.577 ms/op
                 executeQuery·p0.9999: 2667.577 ms/op
                 executeQuery·p1.00:   2667.577 ms/op

Iteration   3: 2434.374 ±(99.9%) 224.838 ms/op
                 executeQuery·p0.00:   2369.782 ms/op
                 executeQuery·p0.50:   2411.725 ms/op
                 executeQuery·p0.90:   2520.777 ms/op
                 executeQuery·p0.95:   2520.777 ms/op
                 executeQuery·p0.99:   2520.777 ms/op
                 executeQuery·p0.999:  2520.777 ms/op
                 executeQuery·p0.9999: 2520.777 ms/op
                 executeQuery·p1.00:   2520.777 ms/op

Iteration   4: 2442.134 ±(99.9%) 671.736 ms/op
                 executeQuery·p0.00:   2336.227 ms/op
                 executeQuery·p0.50:   2447.376 ms/op
                 executeQuery·p0.90:   2537.554 ms/op
                 executeQuery·p0.95:   2537.554 ms/op
                 executeQuery·p0.99:   2537.554 ms/op
                 executeQuery·p0.999:  2537.554 ms/op
                 executeQuery·p0.9999: 2537.554 ms/op
                 executeQuery·p1.00:   2537.554 ms/op

Iteration   5: 2433.535 ±(99.9%) 225.938 ms/op
                 executeQuery·p0.00:   2336.227 ms/op
                 executeQuery·p0.50:   2441.085 ms/op
                 executeQuery·p0.90:   2487.222 ms/op
                 executeQuery·p0.95:   2487.222 ms/op
                 executeQuery·p0.99:   2487.222 ms/op
                 executeQuery·p0.999:  2487.222 ms/op
                 executeQuery·p0.9999: 2487.222 ms/op
                 executeQuery·p1.00:   2487.222 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 24
  mean =   2434.444 ±(99.9%) 64.027 ms/op

  Histogram, ms/op:
    [2300.000, 2325.000) = 1 
    [2325.000, 2350.000) = 2 
    [2350.000, 2375.000) = 4 
    [2375.000, 2400.000) = 3 
    [2400.000, 2425.000) = 2 
    [2425.000, 2450.000) = 4 
    [2450.000, 2475.000) = 2 
    [2475.000, 2500.000) = 1 
    [2500.000, 2525.000) = 2 
    [2525.000, 2550.000) = 1 
    [2550.000, 2575.000) = 1 
    [2575.000, 2600.000) = 0 
    [2600.000, 2625.000) = 0 
    [2625.000, 2650.000) = 0 
    [2650.000, 2675.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2323.644 ms/op
     p(50.0000) =   2422.211 ms/op
     p(90.0000) =   2548.040 ms/op
     p(95.0000) =   2640.314 ms/op
     p(99.0000) =   2667.577 ms/op
     p(99.9000) =   2667.577 ms/op
     p(99.9900) =   2667.577 ms/op
     p(99.9990) =   2667.577 ms/op
     p(99.9999) =   2667.577 ms/op
    p(100.0000) =   2667.577 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 64.71% complete, ETA 01:46:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
204.948 ±(99.9%) 7.651 ms/op
# Warmup Iteration   2: 203.771 ±(99.9%) 0.773 ms/op
# Warmup Iteration   3: 203.424 ±(99.9%) 0.303 ms/op
# Warmup Iteration   4: 204.146 ±(99.9%) 3.211 ms/op
# Warmup Iteration   5: 203.183 ±(99.9%) 0.331 ms/op
Iteration   1: 203.099 ±(99.9%) 0.314 ms/op
                 executeQuery·p0.00:   202.113 ms/op
                 executeQuery·p0.50:   203.162 ms/op
                 executeQuery·p0.90:   203.922 ms/op
                 executeQuery·p0.95:   204.564 ms/op
                 executeQuery·p0.99:   205.259 ms/op
                 executeQuery·p0.999:  205.259 ms/op
                 executeQuery·p0.9999: 205.259 ms/op
                 executeQuery·p1.00:   205.259 ms/op

Iteration   2: 203.481 ±(99.9%) 0.498 ms/op
                 executeQuery·p0.00:   202.113 ms/op
                 executeQuery·p0.50:   203.293 ms/op
                 executeQuery·p0.90:   205.521 ms/op
                 executeQuery·p0.95:   205.783 ms/op
                 executeQuery·p0.99:   206.045 ms/op
                 executeQuery·p0.999:  206.045 ms/op
                 executeQuery·p0.9999: 206.045 ms/op
                 executeQuery·p1.00:   206.045 ms/op

Iteration   3: 205.938 ±(99.9%) 0.248 ms/op
                 executeQuery·p0.00:   204.997 ms/op
                 executeQuery·p0.50:   206.045 ms/op
                 executeQuery·p0.90:   206.569 ms/op
                 executeQuery·p0.95:   206.963 ms/op
                 executeQuery·p0.99:   207.094 ms/op
                 executeQuery·p0.999:  207.094 ms/op
                 executeQuery·p0.9999: 207.094 ms/op
                 executeQuery·p1.00:   207.094 ms/op

Iteration   4: 205.756 ±(99.9%) 0.511 ms/op
                 executeQuery·p0.00:   204.210 ms/op
                 executeQuery·p0.50:   205.521 ms/op
                 executeQuery·p0.90:   206.569 ms/op
                 executeQuery·p0.95:   207.225 ms/op
                 executeQuery·p0.99:   211.550 ms/op
                 executeQuery·p0.999:  211.550 ms/op
                 executeQuery·p0.9999: 211.550 ms/op
                 executeQuery·p1.00:   211.550 ms/op

Iteration   5: 205.548 ±(99.9%) 0.317 ms/op
                 executeQuery·p0.00:   204.472 ms/op
                 executeQuery·p0.50:   205.521 ms/op
                 executeQuery·p0.90:   206.307 ms/op
                 executeQuery·p0.95:   206.701 ms/op
                 executeQuery·p0.99:   207.618 ms/op
                 executeQuery·p0.999:  207.618 ms/op
                 executeQuery·p0.9999: 207.618 ms/op
                 executeQuery·p1.00:   207.618 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 247
  mean =    204.753 ±(99.9%) 0.307 ms/op

  Histogram, ms/op:
    [202.000, 203.000) = 40 
    [203.000, 204.000) = 49 
    [204.000, 205.000) = 26 
    [205.000, 206.000) = 81 
    [206.000, 207.000) = 45 
    [207.000, 208.000) = 5 
    [208.000, 209.000) = 0 
    [209.000, 210.000) = 0 
    [210.000, 211.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    202.113 ms/op
     p(50.0000) =    205.259 ms/op
     p(90.0000) =    206.307 ms/op
     p(95.0000) =    206.569 ms/op
     p(99.0000) =    207.492 ms/op
     p(99.9000) =    211.550 ms/op
     p(99.9900) =    211.550 ms/op
     p(99.9990) =    211.550 ms/op
     p(99.9999) =    211.550 ms/op
    p(100.0000) =    211.550 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 65.69% complete, ETA 01:42:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1821.377 ±(99.9%) 369.448 ms/op
# Warmup Iteration   2: 1885.340 ±(99.9%) 419.908 ms/op
# Warmup Iteration   3: 2023.752 ±(99.9%) 37.444 ms/op
# Warmup Iteration   4: 2026.688 ±(99.9%) 14.670 ms/op
# Warmup Iteration   5: 2009.072 ±(99.9%) 90.826 ms/op
Iteration   1: 2014.944 ±(99.9%) 57.783 ms/op
                 executeQuery·p0.00:   2000.683 ms/op
                 executeQuery·p0.50:   2013.266 ms/op
                 executeQuery·p0.90:   2034.237 ms/op
                 executeQuery·p0.95:   2034.237 ms/op
                 executeQuery·p0.99:   2034.237 ms/op
                 executeQuery·p0.999:  2034.237 ms/op
                 executeQuery·p0.9999: 2034.237 ms/op
                 executeQuery·p1.00:   2034.237 ms/op

Iteration   2: 2019.138 ±(99.9%) 20.903 ms/op
                 executeQuery·p0.00:   2013.266 ms/op
                 executeQuery·p0.50:   2017.460 ms/op
                 executeQuery·p0.90:   2025.849 ms/op
                 executeQuery·p0.95:   2025.849 ms/op
                 executeQuery·p0.99:   2025.849 ms/op
                 executeQuery·p0.999:  2025.849 ms/op
                 executeQuery·p0.9999: 2025.849 ms/op
                 executeQuery·p1.00:   2025.849 ms/op

Iteration   3: 2033.818 ±(99.9%) 59.177 ms/op
                 executeQuery·p0.00:   2011.169 ms/op
                 executeQuery·p0.50:   2034.237 ms/op
                 executeQuery·p0.90:   2048.918 ms/op
                 executeQuery·p0.95:   2048.918 ms/op
                 executeQuery·p0.99:   2048.918 ms/op
                 executeQuery·p0.999:  2048.918 ms/op
                 executeQuery·p0.9999: 2048.918 ms/op
                 executeQuery·p1.00:   2048.918 ms/op

Iteration   4: 2038.012 ±(99.9%) 16.550 ms/op
                 executeQuery·p0.00:   2034.237 ms/op
                 executeQuery·p0.50:   2038.432 ms/op
                 executeQuery·p0.90:   2044.723 ms/op
                 executeQuery·p0.95:   2044.723 ms/op
                 executeQuery·p0.99:   2044.723 ms/op
                 executeQuery·p0.999:  2044.723 ms/op
                 executeQuery·p0.9999: 2044.723 ms/op
                 executeQuery·p1.00:   2044.723 ms/op

Iteration   5: 2027.107 ±(99.9%) 70.075 ms/op
                 executeQuery·p0.00:   1998.586 ms/op
                 executeQuery·p0.50:   2036.335 ms/op
                 executeQuery·p0.90:   2042.626 ms/op
                 executeQuery·p0.95:   2042.626 ms/op
                 executeQuery·p0.99:   2042.626 ms/op
                 executeQuery·p0.999:  2042.626 ms/op
                 executeQuery·p0.9999: 2042.626 ms/op
                 executeQuery·p1.00:   2042.626 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 25
  mean =   2026.604 ±(99.9%) 11.061 ms/op

  Histogram, ms/op:
    [1990.000, 1995.000) = 0 
    [1995.000, 2000.000) = 1 
    [2000.000, 2005.000) = 2 
    [2005.000, 2010.000) = 0 
    [2010.000, 2015.000) = 3 
    [2015.000, 2020.000) = 3 
    [2020.000, 2025.000) = 1 
    [2025.000, 2030.000) = 3 
    [2030.000, 2035.000) = 4 
    [2035.000, 2040.000) = 4 
    [2040.000, 2045.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1998.586 ms/op
     p(50.0000) =   2027.946 ms/op
     p(90.0000) =   2045.562 ms/op
     p(95.0000) =   2048.288 ms/op
     p(99.0000) =   2048.918 ms/op
     p(99.9000) =   2048.918 ms/op
     p(99.9900) =   2048.918 ms/op
     p(99.9990) =   2048.918 ms/op
     p(99.9999) =   2048.918 ms/op
    p(100.0000) =   2048.918 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 66.67% complete, ETA 01:39:07
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
41875.931 ms/op
# Warmup Iteration   2: 17280.532 ms/op
# Warmup Iteration   3: 20535.312 ms/op
# Warmup Iteration   4: 17548.968 ms/op
# Warmup Iteration   5: 17347.641 ms/op
Iteration   1: 17414.750 ms/op
                 executeQuery·p0.00:   17414.750 ms/op
                 executeQuery·p0.50:   17414.750 ms/op
                 executeQuery·p0.90:   17414.750 ms/op
                 executeQuery·p0.95:   17414.750 ms/op
                 executeQuery·p0.99:   17414.750 ms/op
                 executeQuery·p0.999:  17414.750 ms/op
                 executeQuery·p0.9999: 17414.750 ms/op
                 executeQuery·p1.00:   17414.750 ms/op

Iteration   2: 15938.355 ms/op
                 executeQuery·p0.00:   15938.355 ms/op
                 executeQuery·p0.50:   15938.355 ms/op
                 executeQuery·p0.90:   15938.355 ms/op
                 executeQuery·p0.95:   15938.355 ms/op
                 executeQuery·p0.99:   15938.355 ms/op
                 executeQuery·p0.999:  15938.355 ms/op
                 executeQuery·p0.9999: 15938.355 ms/op
                 executeQuery·p1.00:   15938.355 ms/op

Iteration   3: 16911.434 ms/op
                 executeQuery·p0.00:   16911.434 ms/op
                 executeQuery·p0.50:   16911.434 ms/op
                 executeQuery·p0.90:   16911.434 ms/op
                 executeQuery·p0.95:   16911.434 ms/op
                 executeQuery·p0.99:   16911.434 ms/op
                 executeQuery·p0.999:  16911.434 ms/op
                 executeQuery·p0.9999: 16911.434 ms/op
                 executeQuery·p1.00:   16911.434 ms/op

Iteration   4: 17347.641 ms/op
                 executeQuery·p0.00:   17347.641 ms/op
                 executeQuery·p0.50:   17347.641 ms/op
                 executeQuery·p0.90:   17347.641 ms/op
                 executeQuery·p0.95:   17347.641 ms/op
                 executeQuery·p0.99:   17347.641 ms/op
                 executeQuery·p0.999:  17347.641 ms/op
                 executeQuery·p0.9999: 17347.641 ms/op
                 executeQuery·p1.00:   17347.641 ms/op

Iteration   5: 20199.768 ms/op
                 executeQuery·p0.00:   20199.768 ms/op
                 executeQuery·p0.50:   20199.768 ms/op
                 executeQuery·p0.90:   20199.768 ms/op
                 executeQuery·p0.95:   20199.768 ms/op
                 executeQuery·p0.99:   20199.768 ms/op
                 executeQuery·p0.999:  20199.768 ms/op
                 executeQuery·p0.9999: 20199.768 ms/op
                 executeQuery·p1.00:   20199.768 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  17562.390 ±(99.9%) 6114.197 ms/op

  Histogram, ms/op:
    [15000.000, 15500.000) = 0 
    [15500.000, 16000.000) = 1 
    [16000.000, 16500.000) = 0 
    [16500.000, 17000.000) = 1 
    [17000.000, 17500.000) = 2 
    [17500.000, 18000.000) = 0 
    [18000.000, 18500.000) = 0 
    [18500.000, 19000.000) = 0 
    [19000.000, 19500.000) = 0 
    [19500.000, 20000.000) = 0 
    [20000.000, 20500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  15938.355 ms/op
     p(50.0000) =  17347.641 ms/op
     p(90.0000) =  20199.768 ms/op
     p(95.0000) =  20199.768 ms/op
     p(99.0000) =  20199.768 ms/op
     p(99.9000) =  20199.768 ms/op
     p(99.9900) =  20199.768 ms/op
     p(99.9990) =  20199.768 ms/op
     p(99.9999) =  20199.768 ms/op
    p(100.0000) =  20199.768 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 67.65% complete, ETA 01:36:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
286.411 ±(99.9%) 9.015 ms/op
# Warmup Iteration   2: 282.868 ±(99.9%) 3.930 ms/op
# Warmup Iteration   3: 281.980 ±(99.9%) 1.898 ms/op
# Warmup Iteration   4: 281.936 ±(99.9%) 2.232 ms/op
# Warmup Iteration   5: 282.795 ±(99.9%) 3.260 ms/op
Iteration   1: 281.397 ±(99.9%) 3.111 ms/op
                 executeQuery·p0.00:   276.824 ms/op
                 executeQuery·p0.50:   279.446 ms/op
                 executeQuery·p0.90:   287.939 ms/op
                 executeQuery·p0.95:   295.463 ms/op
                 executeQuery·p0.99:   303.038 ms/op
                 executeQuery·p0.999:  303.038 ms/op
                 executeQuery·p0.9999: 303.038 ms/op
                 executeQuery·p1.00:   303.038 ms/op

Iteration   2: 282.052 ±(99.9%) 4.153 ms/op
                 executeQuery·p0.00:   277.348 ms/op
                 executeQuery·p0.50:   279.970 ms/op
                 executeQuery·p0.90:   290.718 ms/op
                 executeQuery·p0.95:   302.304 ms/op
                 executeQuery·p0.99:   313.000 ms/op
                 executeQuery·p0.999:  313.000 ms/op
                 executeQuery·p0.9999: 313.000 ms/op
                 executeQuery·p1.00:   313.000 ms/op

Iteration   3: 281.499 ±(99.9%) 2.129 ms/op
                 executeQuery·p0.00:   277.348 ms/op
                 executeQuery·p0.50:   281.543 ms/op
                 executeQuery·p0.90:   283.430 ms/op
                 executeQuery·p0.95:   291.111 ms/op
                 executeQuery·p0.99:   297.796 ms/op
                 executeQuery·p0.999:  297.796 ms/op
                 executeQuery·p0.9999: 297.796 ms/op
                 executeQuery·p1.00:   297.796 ms/op

Iteration   4: 281.965 ±(99.9%) 1.135 ms/op
                 executeQuery·p0.00:   278.921 ms/op
                 executeQuery·p0.50:   281.543 ms/op
                 executeQuery·p0.90:   285.370 ms/op
                 executeQuery·p0.95:   286.497 ms/op
                 executeQuery·p0.99:   287.834 ms/op
                 executeQuery·p0.999:  287.834 ms/op
                 executeQuery·p0.9999: 287.834 ms/op
                 executeQuery·p1.00:   287.834 ms/op

Iteration   5: 282.023 ±(99.9%) 2.603 ms/op
                 executeQuery·p0.00:   277.873 ms/op
                 executeQuery·p0.50:   281.543 ms/op
                 executeQuery·p0.90:   284.426 ms/op
                 executeQuery·p0.95:   289.984 ms/op
                 executeQuery·p0.99:   305.136 ms/op
                 executeQuery·p0.999:  305.136 ms/op
                 executeQuery·p0.9999: 305.136 ms/op
                 executeQuery·p1.00:   305.136 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 180
  mean =    281.787 ±(99.9%) 1.160 ms/op

  Histogram, ms/op:
    [270.000, 275.000) = 0 
    [275.000, 280.000) = 70 
    [280.000, 285.000) = 92 
    [285.000, 290.000) = 10 
    [290.000, 295.000) = 3 
    [295.000, 300.000) = 1 
    [300.000, 305.000) = 2 
    [305.000, 310.000) = 1 
    [310.000, 315.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    276.824 ms/op
     p(50.0000) =    281.018 ms/op
     p(90.0000) =    285.108 ms/op
     p(95.0000) =    289.931 ms/op
     p(99.0000) =    306.630 ms/op
     p(99.9000) =    313.000 ms/op
     p(99.9900) =    313.000 ms/op
     p(99.9990) =    313.000 ms/op
     p(99.9999) =    313.000 ms/op
    p(100.0000) =    313.000 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 68.63% complete, ETA 01:32:58
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2794.455 ±(99.9%) 211.541 ms/op
# Warmup Iteration   2: 2747.269 ±(99.9%) 22.130 ms/op
# Warmup Iteration   3: 2714.763 ±(99.9%) 211.541 ms/op
# Warmup Iteration   4: 2687.500 ±(99.9%) 25.950 ms/op
# Warmup Iteration   5: 2759.852 ±(99.9%) 129.039 ms/op
Iteration   1: 2767.192 ±(99.9%) 281.124 ms/op
                 executeQuery·p0.00:   2734.686 ms/op
                 executeQuery·p0.50:   2751.463 ms/op
                 executeQuery·p0.90:   2831.155 ms/op
                 executeQuery·p0.95:   2831.155 ms/op
                 executeQuery·p0.99:   2831.155 ms/op
                 executeQuery·p0.999:  2831.155 ms/op
                 executeQuery·p0.9999: 2831.155 ms/op
                 executeQuery·p1.00:   2831.155 ms/op

Iteration   2: 2713.715 ±(99.9%) 134.611 ms/op
                 executeQuery·p0.00:   2688.549 ms/op
                 executeQuery·p0.50:   2715.812 ms/op
                 executeQuery·p0.90:   2734.686 ms/op
                 executeQuery·p0.95:   2734.686 ms/op
                 executeQuery·p0.99:   2734.686 ms/op
                 executeQuery·p0.999:  2734.686 ms/op
                 executeQuery·p0.9999: 2734.686 ms/op
                 executeQuery·p1.00:   2734.686 ms/op

Iteration   3: 2687.500 ±(99.9%) 80.933 ms/op
                 executeQuery·p0.00:   2675.966 ms/op
                 executeQuery·p0.50:   2684.355 ms/op
                 executeQuery·p0.90:   2705.326 ms/op
                 executeQuery·p0.95:   2705.326 ms/op
                 executeQuery·p0.99:   2705.326 ms/op
                 executeQuery·p0.999:  2705.326 ms/op
                 executeQuery·p0.9999: 2705.326 ms/op
                 executeQuery·p1.00:   2705.326 ms/op

Iteration   4: 2725.249 ±(99.9%) 291.389 ms/op
                 executeQuery·p0.00:   2680.160 ms/op
                 executeQuery·p0.50:   2728.395 ms/op
                 executeQuery·p0.90:   2764.046 ms/op
                 executeQuery·p0.95:   2764.046 ms/op
                 executeQuery·p0.99:   2764.046 ms/op
                 executeQuery·p0.999:  2764.046 ms/op
                 executeQuery·p0.9999: 2764.046 ms/op
                 executeQuery·p1.00:   2764.046 ms/op

Iteration   5: 2769.289 ±(99.9%) 1097.917 ms/op
                 executeQuery·p0.00:   2680.160 ms/op
                 executeQuery·p0.50:   2686.452 ms/op
                 executeQuery·p0.90:   3024.093 ms/op
                 executeQuery·p0.95:   3024.093 ms/op
                 executeQuery·p0.99:   3024.093 ms/op
                 executeQuery·p0.999:  3024.093 ms/op
                 executeQuery·p0.9999: 3024.093 ms/op
                 executeQuery·p1.00:   3024.093 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 20
  mean =   2732.589 ±(99.9%) 69.039 ms/op

  Histogram, ms/op:
    [2600.000, 2650.000) = 0 
    [2650.000, 2700.000) = 9 
    [2700.000, 2750.000) = 6 
    [2750.000, 2800.000) = 3 
    [2800.000, 2850.000) = 1 
    [2850.000, 2900.000) = 0 
    [2900.000, 2950.000) = 0 
    [2950.000, 3000.000) = 0 
    [3000.000, 3050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2675.966 ms/op
     p(50.0000) =   2705.326 ms/op
     p(90.0000) =   2824.444 ms/op
     p(95.0000) =   3014.446 ms/op
     p(99.0000) =   3024.093 ms/op
     p(99.9000) =   3024.093 ms/op
     p(99.9900) =   3024.093 ms/op
     p(99.9990) =   3024.093 ms/op
     p(99.9999) =   3024.093 ms/op
    p(100.0000) =   3024.093 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 69.61% complete, ETA 01:29:37
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
26541.556 ms/op
# Warmup Iteration   2: 27682.406 ms/op
# Warmup Iteration   3: 27413.971 ms/op
# Warmup Iteration   4: 27413.971 ms/op
# Warmup Iteration   5: 27212.644 ms/op
Iteration   1: 27111.981 ms/op
                 executeQuery·p0.00:   27111.981 ms/op
                 executeQuery·p0.50:   27111.981 ms/op
                 executeQuery·p0.90:   27111.981 ms/op
                 executeQuery·p0.95:   27111.981 ms/op
                 executeQuery·p0.99:   27111.981 ms/op
                 executeQuery·p0.999:  27111.981 ms/op
                 executeQuery·p0.9999: 27111.981 ms/op
                 executeQuery·p1.00:   27111.981 ms/op

Iteration   2: 27279.753 ms/op
                 executeQuery·p0.00:   27279.753 ms/op
                 executeQuery·p0.50:   27279.753 ms/op
                 executeQuery·p0.90:   27279.753 ms/op
                 executeQuery·p0.95:   27279.753 ms/op
                 executeQuery·p0.99:   27279.753 ms/op
                 executeQuery·p0.999:  27279.753 ms/op
                 executeQuery·p0.9999: 27279.753 ms/op
                 executeQuery·p1.00:   27279.753 ms/op

Iteration   3: 27380.417 ms/op
                 executeQuery·p0.00:   27380.417 ms/op
                 executeQuery·p0.50:   27380.417 ms/op
                 executeQuery·p0.90:   27380.417 ms/op
                 executeQuery·p0.95:   27380.417 ms/op
                 executeQuery·p0.99:   27380.417 ms/op
                 executeQuery·p0.999:  27380.417 ms/op
                 executeQuery·p0.9999: 27380.417 ms/op
                 executeQuery·p1.00:   27380.417 ms/op

Iteration   4: 27380.417 ms/op
                 executeQuery·p0.00:   27380.417 ms/op
                 executeQuery·p0.50:   27380.417 ms/op
                 executeQuery·p0.90:   27380.417 ms/op
                 executeQuery·p0.95:   27380.417 ms/op
                 executeQuery·p0.99:   27380.417 ms/op
                 executeQuery·p0.999:  27380.417 ms/op
                 executeQuery·p0.9999: 27380.417 ms/op
                 executeQuery·p1.00:   27380.417 ms/op

Iteration   5: 27413.971 ms/op
                 executeQuery·p0.00:   27413.971 ms/op
                 executeQuery·p0.50:   27413.971 ms/op
                 executeQuery·p0.90:   27413.971 ms/op
                 executeQuery·p0.95:   27413.971 ms/op
                 executeQuery·p0.99:   27413.971 ms/op
                 executeQuery·p0.999:  27413.971 ms/op
                 executeQuery·p0.9999: 27413.971 ms/op
                 executeQuery·p1.00:   27413.971 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 5
  mean =  27313.308 ±(99.9%) 474.734 ms/op

  Histogram, ms/op:
    [27100.000, 27125.000) = 1 
    [27125.000, 27150.000) = 0 
    [27150.000, 27175.000) = 0 
    [27175.000, 27200.000) = 0 
    [27200.000, 27225.000) = 0 
    [27225.000, 27250.000) = 0 
    [27250.000, 27275.000) = 0 
    [27275.000, 27300.000) = 1 
    [27300.000, 27325.000) = 0 
    [27325.000, 27350.000) = 0 
    [27350.000, 27375.000) = 0 
    [27375.000, 27400.000) = 2 
    [27400.000, 27425.000) = 1 
    [27425.000, 27450.000) = 0 
    [27450.000, 27475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  27111.981 ms/op
     p(50.0000) =  27380.417 ms/op
     p(90.0000) =  27413.971 ms/op
     p(95.0000) =  27413.971 ms/op
     p(99.0000) =  27413.971 ms/op
     p(99.9000) =  27413.971 ms/op
     p(99.9900) =  27413.971 ms/op
     p(99.9990) =  27413.971 ms/op
     p(99.9999) =  27413.971 ms/op
    p(100.0000) =  27413.971 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 70.59% complete, ETA 01:27:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
337.100 ±(99.9%) 11.063 ms/op
# Warmup Iteration   2: 346.554 ±(99.9%) 16.328 ms/op
# Warmup Iteration   3: 322.928 ±(99.9%) 2.518 ms/op
# Warmup Iteration   4: 325.025 ±(99.9%) 2.769 ms/op
# Warmup Iteration   5: 315.621 ±(99.9%) 1.072 ms/op
Iteration   1: 317.063 ±(99.9%) 1.627 ms/op
                 executeQuery·p0.00:   313.000 ms/op
                 executeQuery·p0.50:   316.146 ms/op
                 executeQuery·p0.90:   321.231 ms/op
                 executeQuery·p0.95:   322.804 ms/op
                 executeQuery·p0.99:   323.486 ms/op
                 executeQuery·p0.999:  323.486 ms/op
                 executeQuery·p0.9999: 323.486 ms/op
                 executeQuery·p1.00:   323.486 ms/op

Iteration   2: 315.408 ±(99.9%) 0.975 ms/op
                 executeQuery·p0.00:   314.049 ms/op
                 executeQuery·p0.50:   315.097 ms/op
                 executeQuery·p0.90:   316.146 ms/op
                 executeQuery·p0.95:   320.052 ms/op
                 executeQuery·p0.99:   322.437 ms/op
                 executeQuery·p0.999:  322.437 ms/op
                 executeQuery·p0.9999: 322.437 ms/op
                 executeQuery·p1.00:   322.437 ms/op

Iteration   3: 315.965 ±(99.9%) 1.574 ms/op
                 executeQuery·p0.00:   313.524 ms/op
                 executeQuery·p0.50:   315.097 ms/op
                 executeQuery·p0.90:   320.550 ms/op
                 executeQuery·p0.95:   322.621 ms/op
                 executeQuery·p0.99:   322.961 ms/op
                 executeQuery·p0.999:  322.961 ms/op
                 executeQuery·p0.9999: 322.961 ms/op
                 executeQuery·p1.00:   322.961 ms/op

Iteration   4: 315.867 ±(99.9%) 1.667 ms/op
                 executeQuery·p0.00:   311.951 ms/op
                 executeQuery·p0.50:   315.097 ms/op
                 executeQuery·p0.90:   320.917 ms/op
                 executeQuery·p0.95:   323.328 ms/op
                 executeQuery·p0.99:   324.010 ms/op
                 executeQuery·p0.999:  324.010 ms/op
                 executeQuery·p0.9999: 324.010 ms/op
                 executeQuery·p1.00:   324.010 ms/op

Iteration   5: 316.686 ±(99.9%) 1.394 ms/op
                 executeQuery·p0.00:   314.049 ms/op
                 executeQuery·p0.50:   316.146 ms/op
                 executeQuery·p0.90:   321.284 ms/op
                 executeQuery·p0.95:   322.437 ms/op
                 executeQuery·p0.99:   322.437 ms/op
                 executeQuery·p0.999:  322.437 ms/op
                 executeQuery·p0.9999: 322.437 ms/op
                 executeQuery·p1.00:   322.437 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 160
  mean =    316.198 ±(99.9%) 0.619 ms/op

  Histogram, ms/op:
    [310.000, 311.250) = 0 
    [311.250, 312.500) = 1 
    [312.500, 313.750) = 2 
    [313.750, 315.000) = 38 
    [315.000, 316.250) = 78 
    [316.250, 317.500) = 10 
    [317.500, 318.750) = 8 
    [318.750, 320.000) = 7 
    [320.000, 321.250) = 4 
    [321.250, 322.500) = 8 
    [322.500, 323.750) = 3 
    [323.750, 325.000) = 1 
    [325.000, 326.250) = 0 
    [326.250, 327.500) = 0 
    [327.500, 328.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    311.951 ms/op
     p(50.0000) =    315.097 ms/op
     p(90.0000) =    320.288 ms/op
     p(95.0000) =    322.437 ms/op
     p(99.0000) =    323.690 ms/op
     p(99.9000) =    324.010 ms/op
     p(99.9900) =    324.010 ms/op
     p(99.9990) =    324.010 ms/op
     p(99.9999) =    324.010 ms/op
    p(100.0000) =    324.010 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 71.57% complete, ETA 01:24:02
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3112.174 ±(99.9%) 901.371 ms/op
# Warmup Iteration   2: 3255.828 ±(99.9%) 974.315 ms/op
# Warmup Iteration   3: 3238.003 ±(99.9%) 146.794 ms/op
# Warmup Iteration   4: 3190.817 ±(99.9%) 71.281 ms/op
# Warmup Iteration   5: 3174.040 ±(99.9%) 176.173 ms/op
Iteration   1: 3167.748 ±(99.9%) 55.875 ms/op
                 executeQuery·p0.00:   3158.311 ms/op
                 executeQuery·p0.50:   3168.797 ms/op
                 executeQuery·p0.90:   3175.088 ms/op
                 executeQuery·p0.95:   3175.088 ms/op
                 executeQuery·p0.99:   3175.088 ms/op
                 executeQuery·p0.999:  3175.088 ms/op
                 executeQuery·p0.9999: 3175.088 ms/op
                 executeQuery·p1.00:   3175.088 ms/op

Iteration   2: 3167.748 ±(99.9%) 111.477 ms/op
                 executeQuery·p0.00:   3145.728 ms/op
                 executeQuery·p0.50:   3168.797 ms/op
                 executeQuery·p0.90:   3187.671 ms/op
                 executeQuery·p0.95:   3187.671 ms/op
                 executeQuery·p0.99:   3187.671 ms/op
                 executeQuery·p0.999:  3187.671 ms/op
                 executeQuery·p0.9999: 3187.671 ms/op
                 executeQuery·p1.00:   3187.671 ms/op

Iteration   3: 3159.359 ±(99.9%) 83.904 ms/op
                 executeQuery·p0.00:   3141.534 ms/op
                 executeQuery·p0.50:   3162.505 ms/op
                 executeQuery·p0.90:   3170.894 ms/op
                 executeQuery·p0.95:   3170.894 ms/op
                 executeQuery·p0.99:   3170.894 ms/op
                 executeQuery·p0.999:  3170.894 ms/op
                 executeQuery·p0.9999: 3170.894 ms/op
                 executeQuery·p1.00:   3170.894 ms/op

Iteration   4: 3155.165 ±(99.9%) 97.410 ms/op
                 executeQuery·p0.00:   3133.145 ms/op
                 executeQuery·p0.50:   3160.408 ms/op
                 executeQuery·p0.90:   3166.700 ms/op
                 executeQuery·p0.95:   3166.700 ms/op
                 executeQuery·p0.99:   3166.700 ms/op
                 executeQuery·p0.999:  3166.700 ms/op
                 executeQuery·p0.9999: 3166.700 ms/op
                 executeQuery·p1.00:   3166.700 ms/op

Iteration   5: 3177.185 ±(99.9%) 46.945 ms/op
                 executeQuery·p0.00:   3170.894 ms/op
                 executeQuery·p0.50:   3175.088 ms/op
                 executeQuery·p0.90:   3187.671 ms/op
                 executeQuery·p0.95:   3187.671 ms/op
                 executeQuery·p0.99:   3187.671 ms/op
                 executeQuery·p0.999:  3187.671 ms/op
                 executeQuery·p0.9999: 3187.671 ms/op
                 executeQuery·p1.00:   3187.671 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   3165.441 ±(99.9%) 11.998 ms/op

  Histogram, ms/op:
    [3130.000, 3135.000) = 1 
    [3135.000, 3140.000) = 0 
    [3140.000, 3145.000) = 1 
    [3145.000, 3150.000) = 1 
    [3150.000, 3155.000) = 0 
    [3155.000, 3160.000) = 3 
    [3160.000, 3165.000) = 2 
    [3165.000, 3170.000) = 3 
    [3170.000, 3175.000) = 3 
    [3175.000, 3180.000) = 4 
    [3180.000, 3185.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3133.145 ms/op
     p(50.0000) =   3166.700 ms/op
     p(90.0000) =   3186.413 ms/op
     p(95.0000) =   3187.671 ms/op
     p(99.0000) =   3187.671 ms/op
     p(99.9000) =   3187.671 ms/op
     p(99.9900) =   3187.671 ms/op
     p(99.9990) =   3187.671 ms/op
     p(99.9999) =   3187.671 ms/op
    p(100.0000) =   3187.671 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 72.55% complete, ETA 01:20:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
28722.594 ms/op
# Warmup Iteration   2: 29091.693 ms/op
# Warmup Iteration   3: 29326.574 ms/op
# Warmup Iteration   4: 29561.455 ms/op
# Warmup Iteration   5: 32312.918 ms/op
Iteration   1: 32380.027 ms/op
                 executeQuery·p0.00:   32380.027 ms/op
                 executeQuery·p0.50:   32380.027 ms/op
                 executeQuery·p0.90:   32380.027 ms/op
                 executeQuery·p0.95:   32380.027 ms/op
                 executeQuery·p0.99:   32380.027 ms/op
                 executeQuery·p0.999:  32380.027 ms/op
                 executeQuery·p0.9999: 32380.027 ms/op
                 executeQuery·p1.00:   32380.027 ms/op

Iteration   2: 32447.136 ms/op
                 executeQuery·p0.00:   32447.136 ms/op
                 executeQuery·p0.50:   32447.136 ms/op
                 executeQuery·p0.90:   32447.136 ms/op
                 executeQuery·p0.95:   32447.136 ms/op
                 executeQuery·p0.99:   32447.136 ms/op
                 executeQuery·p0.999:  32447.136 ms/op
                 executeQuery·p0.9999: 32447.136 ms/op
                 executeQuery·p1.00:   32447.136 ms/op

Iteration   3: 32346.472 ms/op
                 executeQuery·p0.00:   32346.472 ms/op
                 executeQuery·p0.50:   32346.472 ms/op
                 executeQuery·p0.90:   32346.472 ms/op
                 executeQuery·p0.95:   32346.472 ms/op
                 executeQuery·p0.99:   32346.472 ms/op
                 executeQuery·p0.999:  32346.472 ms/op
                 executeQuery·p0.9999: 32346.472 ms/op
                 executeQuery·p1.00:   32346.472 ms/op

Iteration   4: 32145.146 ms/op
                 executeQuery·p0.00:   32145.146 ms/op
                 executeQuery·p0.50:   32145.146 ms/op
                 executeQuery·p0.90:   32145.146 ms/op
                 executeQuery·p0.95:   32145.146 ms/op
                 executeQuery·p0.99:   32145.146 ms/op
                 executeQuery·p0.999:  32145.146 ms/op
                 executeQuery·p0.9999: 32145.146 ms/op
                 executeQuery·p1.00:   32145.146 ms/op

Iteration   5: 32346.472 ms/op
                 executeQuery·p0.00:   32346.472 ms/op
                 executeQuery·p0.50:   32346.472 ms/op
                 executeQuery·p0.90:   32346.472 ms/op
                 executeQuery·p0.95:   32346.472 ms/op
                 executeQuery·p0.99:   32346.472 ms/op
                 executeQuery·p0.999:  32346.472 ms/op
                 executeQuery·p0.9999: 32346.472 ms/op
                 executeQuery·p1.00:   32346.472 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  32333.051 ±(99.9%) 434.333 ms/op

  Histogram, ms/op:
    [32100.000, 32125.000) = 0 
    [32125.000, 32150.000) = 1 
    [32150.000, 32175.000) = 0 
    [32175.000, 32200.000) = 0 
    [32200.000, 32225.000) = 0 
    [32225.000, 32250.000) = 0 
    [32250.000, 32275.000) = 0 
    [32275.000, 32300.000) = 0 
    [32300.000, 32325.000) = 0 
    [32325.000, 32350.000) = 2 
    [32350.000, 32375.000) = 0 
    [32375.000, 32400.000) = 1 
    [32400.000, 32425.000) = 0 
    [32425.000, 32450.000) = 1 
    [32450.000, 32475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  32145.146 ms/op
     p(50.0000) =  32346.472 ms/op
     p(90.0000) =  32447.136 ms/op
     p(95.0000) =  32447.136 ms/op
     p(99.0000) =  32447.136 ms/op
     p(99.9000) =  32447.136 ms/op
     p(99.9900) =  32447.136 ms/op
     p(99.9990) =  32447.136 ms/op
     p(99.9999) =  32447.136 ms/op
    p(100.0000) =  32447.136 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 73.53% complete, ETA 01:18:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
306.565 ±(99.9%) 11.555 ms/op
# Warmup Iteration   2: 297.873 ±(99.9%) 6.731 ms/op
# Warmup Iteration   3: 286.321 ±(99.9%) 0.902 ms/op
# Warmup Iteration   4: 285.587 ±(99.9%) 0.867 ms/op
# Warmup Iteration   5: 286.351 ±(99.9%) 0.795 ms/op
Iteration   1: 285.527 ±(99.9%) 0.816 ms/op
                 executeQuery·p0.00:   283.640 ms/op
                 executeQuery·p0.50:   284.688 ms/op
                 executeQuery·p0.90:   287.310 ms/op
                 executeQuery·p0.95:   288.254 ms/op
                 executeQuery·p0.99:   289.931 ms/op
                 executeQuery·p0.999:  289.931 ms/op
                 executeQuery·p0.9999: 289.931 ms/op
                 executeQuery·p1.00:   289.931 ms/op

Iteration   2: 285.527 ±(99.9%) 0.782 ms/op
                 executeQuery·p0.00:   283.640 ms/op
                 executeQuery·p0.50:   285.213 ms/op
                 executeQuery·p0.90:   287.834 ms/op
                 executeQuery·p0.95:   288.568 ms/op
                 executeQuery·p0.99:   289.407 ms/op
                 executeQuery·p0.999:  289.407 ms/op
                 executeQuery·p0.9999: 289.407 ms/op
                 executeQuery·p1.00:   289.407 ms/op

Iteration   3: 285.078 ±(99.9%) 0.779 ms/op
                 executeQuery·p0.00:   283.640 ms/op
                 executeQuery·p0.50:   284.688 ms/op
                 executeQuery·p0.90:   287.205 ms/op
                 executeQuery·p0.95:   288.883 ms/op
                 executeQuery·p0.99:   288.883 ms/op
                 executeQuery·p0.999:  288.883 ms/op
                 executeQuery·p0.9999: 288.883 ms/op
                 executeQuery·p1.00:   288.883 ms/op

Iteration   4: 285.392 ±(99.9%) 0.896 ms/op
                 executeQuery·p0.00:   283.640 ms/op
                 executeQuery·p0.50:   284.688 ms/op
                 executeQuery·p0.90:   287.834 ms/op
                 executeQuery·p0.95:   288.463 ms/op
                 executeQuery·p0.99:   290.980 ms/op
                 executeQuery·p0.999:  290.980 ms/op
                 executeQuery·p0.9999: 290.980 ms/op
                 executeQuery·p1.00:   290.980 ms/op

Iteration   5: 292.912 ±(99.9%) 2.969 ms/op
                 executeQuery·p0.00:   284.688 ms/op
                 executeQuery·p0.50:   294.650 ms/op
                 executeQuery·p0.90:   296.957 ms/op
                 executeQuery·p0.95:   297.796 ms/op
                 executeQuery·p0.99:   297.796 ms/op
                 executeQuery·p0.999:  297.796 ms/op
                 executeQuery·p0.9999: 297.796 ms/op
                 executeQuery·p1.00:   297.796 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 175
  mean =    286.887 ±(99.9%) 0.987 ms/op

  Histogram, ms/op:
    [280.000, 281.250) = 0 
    [281.250, 282.500) = 0 
    [282.500, 283.750) = 4 
    [283.750, 285.000) = 74 
    [285.000, 286.250) = 39 
    [286.250, 287.500) = 19 
    [287.500, 288.750) = 8 
    [288.750, 290.000) = 4 
    [290.000, 291.250) = 1 
    [291.250, 292.500) = 0 
    [292.500, 293.750) = 0 
    [293.750, 295.000) = 10 
    [295.000, 296.250) = 7 
    [296.250, 297.500) = 7 
    [297.500, 298.750) = 2 

  Percentiles, ms/op:
      p(0.0000) =    283.640 ms/op
     p(50.0000) =    285.213 ms/op
     p(90.0000) =    294.650 ms/op
     p(95.0000) =    296.747 ms/op
     p(99.0000) =    297.796 ms/op
     p(99.9000) =    297.796 ms/op
     p(99.9900) =    297.796 ms/op
     p(99.9990) =    297.796 ms/op
     p(99.9999) =    297.796 ms/op
    p(100.0000) =    297.796 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 74.51% complete, ETA 01:15:27
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2876.244 ±(99.9%) 972.554 ms/op
# Warmup Iteration   2: 2797.601 ±(99.9%) 220.190 ms/op
# Warmup Iteration   3: 2732.589 ±(99.9%) 519.229 ms/op
# Warmup Iteration   4: 2637.169 ±(99.9%) 109.258 ms/op
# Warmup Iteration   5: 2597.323 ±(99.9%) 25.950 ms/op
Iteration   1: 2622.489 ±(99.9%) 67.759 ms/op
                 executeQuery·p0.00:   2608.857 ms/op
                 executeQuery·p0.50:   2623.537 ms/op
                 executeQuery·p0.90:   2634.023 ms/op
                 executeQuery·p0.95:   2634.023 ms/op
                 executeQuery·p0.99:   2634.023 ms/op
                 executeQuery·p0.999:  2634.023 ms/op
                 executeQuery·p0.9999: 2634.023 ms/op
                 executeQuery·p1.00:   2634.023 ms/op

Iteration   2: 2616.197 ±(99.9%) 102.314 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2617.246 ms/op
                 executeQuery·p0.90:   2629.829 ms/op
                 executeQuery·p0.95:   2629.829 ms/op
                 executeQuery·p0.99:   2629.829 ms/op
                 executeQuery·p0.999:  2629.829 ms/op
                 executeQuery·p0.9999: 2629.829 ms/op
                 executeQuery·p1.00:   2629.829 ms/op

Iteration   3: 2623.537 ±(99.9%) 137.313 ms/op
                 executeQuery·p0.00:   2604.663 ms/op
                 executeQuery·p0.50:   2619.343 ms/op
                 executeQuery·p0.90:   2650.800 ms/op
                 executeQuery·p0.95:   2650.800 ms/op
                 executeQuery·p0.99:   2650.800 ms/op
                 executeQuery·p0.999:  2650.800 ms/op
                 executeQuery·p0.9999: 2650.800 ms/op
                 executeQuery·p1.00:   2650.800 ms/op

Iteration   4: 2602.566 ±(99.9%) 68.209 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2604.663 ms/op
                 executeQuery·p0.90:   2613.051 ms/op
                 executeQuery·p0.95:   2613.051 ms/op
                 executeQuery·p0.99:   2613.051 ms/op
                 executeQuery·p0.999:  2613.051 ms/op
                 executeQuery·p0.9999: 2613.051 ms/op
                 executeQuery·p1.00:   2613.051 ms/op

Iteration   5: 2605.711 ±(99.9%) 46.288 ms/op
                 executeQuery·p0.00:   2596.274 ms/op
                 executeQuery·p0.50:   2606.760 ms/op
                 executeQuery·p0.90:   2613.051 ms/op
                 executeQuery·p0.95:   2613.051 ms/op
                 executeQuery·p0.99:   2613.051 ms/op
                 executeQuery·p0.999:  2613.051 ms/op
                 executeQuery·p0.9999: 2613.051 ms/op
                 executeQuery·p1.00:   2613.051 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 20
  mean =   2614.100 ±(99.9%) 13.205 ms/op

  Histogram, ms/op:
    [2580.000, 2585.000) = 0 
    [2585.000, 2590.000) = 1 
    [2590.000, 2595.000) = 0 
    [2595.000, 2600.000) = 1 
    [2600.000, 2605.000) = 6 
    [2605.000, 2610.000) = 3 
    [2610.000, 2615.000) = 2 
    [2615.000, 2620.000) = 0 
    [2620.000, 2625.000) = 1 
    [2625.000, 2630.000) = 4 
    [2630.000, 2635.000) = 1 
    [2635.000, 2640.000) = 0 
    [2640.000, 2645.000) = 0 
    [2645.000, 2650.000) = 0 
    [2650.000, 2655.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2587.886 ms/op
     p(50.0000) =   2608.857 ms/op
     p(90.0000) =   2633.603 ms/op
     p(95.0000) =   2649.961 ms/op
     p(99.0000) =   2650.800 ms/op
     p(99.9000) =   2650.800 ms/op
     p(99.9900) =   2650.800 ms/op
     p(99.9990) =   2650.800 ms/op
     p(99.9999) =   2650.800 ms/op
    p(100.0000) =   2650.800 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 75.49% complete, ETA 01:12:11
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
25769.804 ms/op
# Warmup Iteration   2: 26541.556 ms/op
# Warmup Iteration   3: 26206.011 ms/op
# Warmup Iteration   4: 27984.396 ms/op
# Warmup Iteration   5: 28387.049 ms/op
Iteration   1: 28286.386 ms/op
                 executeQuery·p0.00:   28286.386 ms/op
                 executeQuery·p0.50:   28286.386 ms/op
                 executeQuery·p0.90:   28286.386 ms/op
                 executeQuery·p0.95:   28286.386 ms/op
                 executeQuery·p0.99:   28286.386 ms/op
                 executeQuery·p0.999:  28286.386 ms/op
                 executeQuery·p0.9999: 28286.386 ms/op
                 executeQuery·p1.00:   28286.386 ms/op

Iteration   2: 28286.386 ms/op
                 executeQuery·p0.00:   28286.386 ms/op
                 executeQuery·p0.50:   28286.386 ms/op
                 executeQuery·p0.90:   28286.386 ms/op
                 executeQuery·p0.95:   28286.386 ms/op
                 executeQuery·p0.99:   28286.386 ms/op
                 executeQuery·p0.999:  28286.386 ms/op
                 executeQuery·p0.9999: 28286.386 ms/op
                 executeQuery·p1.00:   28286.386 ms/op

Iteration   3: 28252.832 ms/op
                 executeQuery·p0.00:   28252.832 ms/op
                 executeQuery·p0.50:   28252.832 ms/op
                 executeQuery·p0.90:   28252.832 ms/op
                 executeQuery·p0.95:   28252.832 ms/op
                 executeQuery·p0.99:   28252.832 ms/op
                 executeQuery·p0.999:  28252.832 ms/op
                 executeQuery·p0.9999: 28252.832 ms/op
                 executeQuery·p1.00:   28252.832 ms/op

Iteration   4: 28252.832 ms/op
                 executeQuery·p0.00:   28252.832 ms/op
                 executeQuery·p0.50:   28252.832 ms/op
                 executeQuery·p0.90:   28252.832 ms/op
                 executeQuery·p0.95:   28252.832 ms/op
                 executeQuery·p0.99:   28252.832 ms/op
                 executeQuery·p0.999:  28252.832 ms/op
                 executeQuery·p0.9999: 28252.832 ms/op
                 executeQuery·p1.00:   28252.832 ms/op

Iteration   5: 28286.386 ms/op
                 executeQuery·p0.00:   28286.386 ms/op
                 executeQuery·p0.50:   28286.386 ms/op
                 executeQuery·p0.90:   28286.386 ms/op
                 executeQuery·p0.95:   28286.386 ms/op
                 executeQuery·p0.99:   28286.386 ms/op
                 executeQuery·p0.999:  28286.386 ms/op
                 executeQuery·p0.9999: 28286.386 ms/op
                 executeQuery·p1.00:   28286.386 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 5
  mean =  28272.964 ±(99.9%) 70.769 ms/op

  Histogram, ms/op:
    [28250.000, 28252.500) = 0 
    [28252.500, 28255.000) = 2 
    [28255.000, 28257.500) = 0 
    [28257.500, 28260.000) = 0 
    [28260.000, 28262.500) = 0 
    [28262.500, 28265.000) = 0 
    [28265.000, 28267.500) = 0 
    [28267.500, 28270.000) = 0 
    [28270.000, 28272.500) = 0 
    [28272.500, 28275.000) = 0 
    [28275.000, 28277.500) = 0 
    [28277.500, 28280.000) = 0 
    [28280.000, 28282.500) = 0 
    [28282.500, 28285.000) = 0 
    [28285.000, 28287.500) = 3 

  Percentiles, ms/op:
      p(0.0000) =  28252.832 ms/op
     p(50.0000) =  28286.386 ms/op
     p(90.0000) =  28286.386 ms/op
     p(95.0000) =  28286.386 ms/op
     p(99.0000) =  28286.386 ms/op
     p(99.9000) =  28286.386 ms/op
     p(99.9900) =  28286.386 ms/op
     p(99.9990) =  28286.386 ms/op
     p(99.9999) =  28286.386 ms/op
    p(100.0000) =  28286.386 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 76.47% complete, ETA 01:09:50
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
96.674 ±(99.9%) 11.432 ms/op
# Warmup Iteration   2: 87.548 ±(99.9%) 0.676 ms/op
# Warmup Iteration   3: 87.497 ±(99.9%) 0.807 ms/op
# Warmup Iteration   4: 92.047 ±(99.9%) 0.599 ms/op
# Warmup Iteration   5: 87.602 ±(99.9%) 0.568 ms/op
Iteration   1: 86.223 ±(99.9%) 0.611 ms/op
                 executeQuery·p0.00:   84.017 ms/op
                 executeQuery·p0.50:   85.983 ms/op
                 executeQuery·p0.90:   87.818 ms/op
                 executeQuery·p0.95:   88.474 ms/op
                 executeQuery·p0.99:   100.481 ms/op
                 executeQuery·p0.999:  101.974 ms/op
                 executeQuery·p0.9999: 101.974 ms/op
                 executeQuery·p1.00:   101.974 ms/op

Iteration   2: 89.451 ±(99.9%) 0.994 ms/op
                 executeQuery·p0.00:   84.804 ms/op
                 executeQuery·p0.50:   90.243 ms/op
                 executeQuery·p0.90:   93.153 ms/op
                 executeQuery·p0.95:   93.585 ms/op
                 executeQuery·p0.99:   94.549 ms/op
                 executeQuery·p0.999:  94.634 ms/op
                 executeQuery·p0.9999: 94.634 ms/op
                 executeQuery·p1.00:   94.634 ms/op

Iteration   3: 87.045 ±(99.9%) 0.701 ms/op
                 executeQuery·p0.00:   84.673 ms/op
                 executeQuery·p0.50:   86.245 ms/op
                 executeQuery·p0.90:   91.541 ms/op
                 executeQuery·p0.95:   92.144 ms/op
                 executeQuery·p0.99:   93.129 ms/op
                 executeQuery·p0.999:  93.192 ms/op
                 executeQuery·p0.9999: 93.192 ms/op
                 executeQuery·p1.00:   93.192 ms/op

Iteration   4: 88.901 ±(99.9%) 0.701 ms/op
                 executeQuery·p0.00:   84.541 ms/op
                 executeQuery·p0.50:   89.260 ms/op
                 executeQuery·p0.90:   91.449 ms/op
                 executeQuery·p0.95:   91.881 ms/op
                 executeQuery·p0.99:   97.879 ms/op
                 executeQuery·p0.999:  98.697 ms/op
                 executeQuery·p0.9999: 98.697 ms/op
                 executeQuery·p1.00:   98.697 ms/op

Iteration   5: 90.568 ±(99.9%) 0.407 ms/op
                 executeQuery·p0.00:   87.032 ms/op
                 executeQuery·p0.50:   90.702 ms/op
                 executeQuery·p0.90:   92.013 ms/op
                 executeQuery·p0.95:   92.203 ms/op
                 executeQuery·p0.99:   92.537 ms/op
                 executeQuery·p0.999:  92.537 ms/op
                 executeQuery·p0.9999: 92.537 ms/op
                 executeQuery·p1.00:   92.537 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 565
  mean =     88.407 ±(99.9%) 0.380 ms/op

  Histogram, ms/op:
    [ 80.000,  82.500) = 0 
    [ 82.500,  85.000) = 39 
    [ 85.000,  87.500) = 222 
    [ 87.500,  90.000) = 108 
    [ 90.000,  92.500) = 164 
    [ 92.500,  95.000) = 30 
    [ 95.000,  97.500) = 0 
    [ 97.500, 100.000) = 1 
    [100.000, 102.500) = 1 
    [102.500, 105.000) = 0 
    [105.000, 107.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     84.017 ms/op
     p(50.0000) =     87.949 ms/op
     p(90.0000) =     91.934 ms/op
     p(95.0000) =     92.629 ms/op
     p(99.0000) =     93.630 ms/op
     p(99.9000) =    101.974 ms/op
     p(99.9900) =    101.974 ms/op
     p(99.9990) =    101.974 ms/op
     p(99.9999) =    101.974 ms/op
    p(100.0000) =    101.974 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 77.45% complete, ETA 01:06:34
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1884.291 ±(99.9%) 1175.789 ms/op
# Warmup Iteration   2: 1445.837 ±(99.9%) 498.013 ms/op
# Warmup Iteration   3: 1360.790 ±(99.9%) 39.719 ms/op
# Warmup Iteration   4: 1357.906 ±(99.9%) 65.009 ms/op
# Warmup Iteration   5: 1339.818 ±(99.9%) 59.142 ms/op
Iteration   1: 1339.556 ±(99.9%) 72.579 ms/op
                 executeQuery·p0.00:   1302.331 ms/op
                 executeQuery·p0.50:   1330.643 ms/op
                 executeQuery·p0.90:   1417.675 ms/op
                 executeQuery·p0.95:   1417.675 ms/op
                 executeQuery·p0.99:   1417.675 ms/op
                 executeQuery·p0.999:  1417.675 ms/op
                 executeQuery·p0.9999: 1417.675 ms/op
                 executeQuery·p1.00:   1417.675 ms/op

Iteration   2: 1364.984 ±(99.9%) 85.850 ms/op
                 executeQuery·p0.00:   1304.429 ms/op
                 executeQuery·p0.50:   1355.809 ms/op
                 executeQuery·p0.90:   1453.326 ms/op
                 executeQuery·p0.95:   1453.326 ms/op
                 executeQuery·p0.99:   1453.326 ms/op
                 executeQuery·p0.999:  1453.326 ms/op
                 executeQuery·p0.9999: 1453.326 ms/op
                 executeQuery·p1.00:   1453.326 ms/op

Iteration   3: 1377.567 ±(99.9%) 119.687 ms/op
                 executeQuery·p0.00:   1298.137 ms/op
                 executeQuery·p0.50:   1376.780 ms/op
                 executeQuery·p0.90:   1468.006 ms/op
                 executeQuery·p0.95:   1468.006 ms/op
                 executeQuery·p0.99:   1468.006 ms/op
                 executeQuery·p0.999:  1468.006 ms/op
                 executeQuery·p0.9999: 1468.006 ms/op
                 executeQuery·p1.00:   1468.006 ms/op

Iteration   4: 1362.887 ±(99.9%) 62.796 ms/op
                 executeQuery·p0.00:   1321.206 ms/op
                 executeQuery·p0.50:   1361.052 ms/op
                 executeQuery·p0.90:   1409.286 ms/op
                 executeQuery·p0.95:   1409.286 ms/op
                 executeQuery·p0.99:   1409.286 ms/op
                 executeQuery·p0.999:  1409.286 ms/op
                 executeQuery·p0.9999: 1409.286 ms/op
                 executeQuery·p1.00:   1409.286 ms/op

Iteration   5: 1405.616 ±(99.9%) 63.715 ms/op
                 executeQuery·p0.00:   1333.789 ms/op
                 executeQuery·p0.50:   1407.189 ms/op
                 executeQuery·p0.90:   1451.229 ms/op
                 executeQuery·p0.95:   1451.229 ms/op
                 executeQuery·p0.99:   1451.229 ms/op
                 executeQuery·p0.999:  1451.229 ms/op
                 executeQuery·p0.9999: 1451.229 ms/op
                 executeQuery·p1.00:   1451.229 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 40
  mean =   1370.122 ±(99.9%) 26.354 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 7 
    [1325.000, 1350.000) = 10 
    [1350.000, 1375.000) = 5 
    [1375.000, 1400.000) = 1 
    [1400.000, 1425.000) = 12 
    [1425.000, 1450.000) = 1 
    [1450.000, 1475.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   1298.137 ms/op
     p(50.0000) =   1364.197 ms/op
     p(90.0000) =   1435.081 ms/op
     p(95.0000) =   1453.221 ms/op
     p(99.0000) =   1468.006 ms/op
     p(99.9000) =   1468.006 ms/op
     p(99.9900) =   1468.006 ms/op
     p(99.9990) =   1468.006 ms/op
     p(99.9999) =   1468.006 ms/op
    p(100.0000) =   1468.006 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 78.43% complete, ETA 01:03:23
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
30165.434 ms/op
# Warmup Iteration   2: 26742.882 ms/op
# Warmup Iteration   3: 26138.903 ms/op
# Warmup Iteration   4: 21340.619 ms/op
# Warmup Iteration   5: 19159.581 ms/op
Iteration   1: 27447.525 ms/op
                 executeQuery·p0.00:   27447.525 ms/op
                 executeQuery·p0.50:   27447.525 ms/op
                 executeQuery·p0.90:   27447.525 ms/op
                 executeQuery·p0.95:   27447.525 ms/op
                 executeQuery·p0.99:   27447.525 ms/op
                 executeQuery·p0.999:  27447.525 ms/op
                 executeQuery·p0.9999: 27447.525 ms/op
                 executeQuery·p1.00:   27447.525 ms/op

Iteration   2: 19964.887 ms/op
                 executeQuery·p0.00:   19964.887 ms/op
                 executeQuery·p0.50:   19964.887 ms/op
                 executeQuery·p0.90:   19964.887 ms/op
                 executeQuery·p0.95:   19964.887 ms/op
                 executeQuery·p0.99:   19964.887 ms/op
                 executeQuery·p0.999:  19964.887 ms/op
                 executeQuery·p0.9999: 19964.887 ms/op
                 executeQuery·p1.00:   19964.887 ms/op

Iteration   3: 20333.986 ms/op
                 executeQuery·p0.00:   20333.986 ms/op
                 executeQuery·p0.50:   20333.986 ms/op
                 executeQuery·p0.90:   20333.986 ms/op
                 executeQuery·p0.95:   20333.986 ms/op
                 executeQuery·p0.99:   20333.986 ms/op
                 executeQuery·p0.999:  20333.986 ms/op
                 executeQuery·p0.9999: 20333.986 ms/op
                 executeQuery·p1.00:   20333.986 ms/op

Iteration   4: 20099.105 ms/op
                 executeQuery·p0.00:   20099.105 ms/op
                 executeQuery·p0.50:   20099.105 ms/op
                 executeQuery·p0.90:   20099.105 ms/op
                 executeQuery·p0.95:   20099.105 ms/op
                 executeQuery·p0.99:   20099.105 ms/op
                 executeQuery·p0.999:  20099.105 ms/op
                 executeQuery·p0.9999: 20099.105 ms/op
                 executeQuery·p1.00:   20099.105 ms/op

Iteration   5: 20132.659 ms/op
                 executeQuery·p0.00:   20132.659 ms/op
                 executeQuery·p0.50:   20132.659 ms/op
                 executeQuery·p0.90:   20132.659 ms/op
                 executeQuery·p0.95:   20132.659 ms/op
                 executeQuery·p0.99:   20132.659 ms/op
                 executeQuery·p0.999:  20132.659 ms/op
                 executeQuery·p0.9999: 20132.659 ms/op
                 executeQuery·p1.00:   20132.659 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  21595.632 ±(99.9%) 12606.908 ms/op

  Histogram, ms/op:
    [19000.000, 19500.000) = 0 
    [19500.000, 20000.000) = 1 
    [20000.000, 20500.000) = 3 
    [20500.000, 21000.000) = 0 
    [21000.000, 21500.000) = 0 
    [21500.000, 22000.000) = 0 
    [22000.000, 22500.000) = 0 
    [22500.000, 23000.000) = 0 
    [23000.000, 23500.000) = 0 
    [23500.000, 24000.000) = 0 
    [24000.000, 24500.000) = 0 
    [24500.000, 25000.000) = 0 
    [25000.000, 25500.000) = 0 
    [25500.000, 26000.000) = 0 
    [26000.000, 26500.000) = 0 
    [26500.000, 27000.000) = 0 
    [27000.000, 27500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  19964.887 ms/op
     p(50.0000) =  20132.659 ms/op
     p(90.0000) =  27447.525 ms/op
     p(95.0000) =  27447.525 ms/op
     p(99.0000) =  27447.525 ms/op
     p(99.9000) =  27447.525 ms/op
     p(99.9900) =  27447.525 ms/op
     p(99.9990) =  27447.525 ms/op
     p(99.9999) =  27447.525 ms/op
    p(100.0000) =  27447.525 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 79.41% complete, ETA 01:00:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
105.432 ±(99.9%) 10.694 ms/op
# Warmup Iteration   2: 96.553 ±(99.9%) 0.631 ms/op
# Warmup Iteration   3: 97.162 ±(99.9%) 0.463 ms/op
# Warmup Iteration   4: 97.318 ±(99.9%) 0.372 ms/op
# Warmup Iteration   5: 95.396 ±(99.9%) 0.472 ms/op
Iteration   1: 94.358 ±(99.9%) 0.294 ms/op
                 executeQuery·p0.00:   92.799 ms/op
                 executeQuery·p0.50:   94.372 ms/op
                 executeQuery·p0.90:   95.158 ms/op
                 executeQuery·p0.95:   95.420 ms/op
                 executeQuery·p0.99:   98.912 ms/op
                 executeQuery·p0.999:  98.959 ms/op
                 executeQuery·p0.9999: 98.959 ms/op
                 executeQuery·p1.00:   98.959 ms/op

Iteration   2: 94.489 ±(99.9%) 0.296 ms/op
                 executeQuery·p0.00:   92.930 ms/op
                 executeQuery·p0.50:   94.372 ms/op
                 executeQuery·p0.90:   95.551 ms/op
                 executeQuery·p0.95:   95.905 ms/op
                 executeQuery·p0.99:   98.865 ms/op
                 executeQuery·p0.999:  98.959 ms/op
                 executeQuery·p0.9999: 98.959 ms/op
                 executeQuery·p1.00:   98.959 ms/op

Iteration   3: 94.197 ±(99.9%) 0.216 ms/op
                 executeQuery·p0.00:   92.930 ms/op
                 executeQuery·p0.50:   94.241 ms/op
                 executeQuery·p0.90:   94.896 ms/op
                 executeQuery·p0.95:   95.289 ms/op
                 executeQuery·p0.99:   95.683 ms/op
                 executeQuery·p0.999:  95.683 ms/op
                 executeQuery·p0.9999: 95.683 ms/op
                 executeQuery·p1.00:   95.683 ms/op

Iteration   4: 94.442 ±(99.9%) 0.272 ms/op
                 executeQuery·p0.00:   92.799 ms/op
                 executeQuery·p0.50:   94.372 ms/op
                 executeQuery·p0.90:   95.342 ms/op
                 executeQuery·p0.95:   95.735 ms/op
                 executeQuery·p0.99:   97.578 ms/op
                 executeQuery·p0.999:  97.649 ms/op
                 executeQuery·p0.9999: 97.649 ms/op
                 executeQuery·p1.00:   97.649 ms/op

Iteration   5: 94.973 ±(99.9%) 0.467 ms/op
                 executeQuery·p0.00:   93.061 ms/op
                 executeQuery·p0.50:   94.700 ms/op
                 executeQuery·p0.90:   96.535 ms/op
                 executeQuery·p0.95:   97.321 ms/op
                 executeQuery·p0.99:   101.417 ms/op
                 executeQuery·p0.999:  101.450 ms/op
                 executeQuery·p0.9999: 101.450 ms/op
                 executeQuery·p1.00:   101.450 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 524
  mean =     94.491 ±(99.9%) 0.144 ms/op

  Histogram, ms/op:
    [ 92.000,  93.000) = 12 
    [ 93.000,  94.000) = 156 
    [ 94.000,  95.000) = 230 
    [ 95.000,  96.000) = 102 
    [ 96.000,  97.000) = 12 
    [ 97.000,  98.000) = 5 
    [ 98.000,  99.000) = 3 
    [ 99.000, 100.000) = 2 
    [100.000, 101.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     92.799 ms/op
     p(50.0000) =     94.372 ms/op
     p(90.0000) =     95.420 ms/op
     p(95.0000) =     95.945 ms/op
     p(99.0000) =     98.959 ms/op
     p(99.9000) =    101.450 ms/op
     p(99.9900) =    101.450 ms/op
     p(99.9990) =    101.450 ms/op
     p(99.9999) =    101.450 ms/op
    p(100.0000) =    101.450 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 80.39% complete, ETA 00:57:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1502.460 ±(99.9%) 487.204 ms/op
# Warmup Iteration   2: 1345.061 ±(99.9%) 28.429 ms/op
# Warmup Iteration   3: 1339.032 ±(99.9%) 31.353 ms/op
# Warmup Iteration   4: 1358.954 ±(99.9%) 66.164 ms/op
# Warmup Iteration   5: 1336.934 ±(99.9%) 30.836 ms/op
Iteration   1: 1333.789 ±(99.9%) 27.026 ms/op
                 executeQuery·p0.00:   1317.011 ms/op
                 executeQuery·p0.50:   1327.497 ms/op
                 executeQuery·p0.90:   1354.760 ms/op
                 executeQuery·p0.95:   1354.760 ms/op
                 executeQuery·p0.99:   1354.760 ms/op
                 executeQuery·p0.999:  1354.760 ms/op
                 executeQuery·p0.9999: 1354.760 ms/op
                 executeQuery·p1.00:   1354.760 ms/op

Iteration   2: 1348.993 ±(99.9%) 25.246 ms/op
                 executeQuery·p0.00:   1321.206 ms/op
                 executeQuery·p0.50:   1353.712 ms/op
                 executeQuery·p0.90:   1358.954 ms/op
                 executeQuery·p0.95:   1358.954 ms/op
                 executeQuery·p0.99:   1358.954 ms/op
                 executeQuery·p0.999:  1358.954 ms/op
                 executeQuery·p0.9999: 1358.954 ms/op
                 executeQuery·p1.00:   1358.954 ms/op

Iteration   3: 1355.022 ±(99.9%) 32.676 ms/op
                 executeQuery·p0.00:   1340.080 ms/op
                 executeQuery·p0.50:   1349.517 ms/op
                 executeQuery·p0.90:   1390.412 ms/op
                 executeQuery·p0.95:   1390.412 ms/op
                 executeQuery·p0.99:   1390.412 ms/op
                 executeQuery·p0.999:  1390.412 ms/op
                 executeQuery·p0.9999: 1390.412 ms/op
                 executeQuery·p1.00:   1390.412 ms/op

Iteration   4: 1365.246 ±(99.9%) 57.390 ms/op
                 executeQuery·p0.00:   1317.011 ms/op
                 executeQuery·p0.50:   1367.343 ms/op
                 executeQuery·p0.90:   1407.189 ms/op
                 executeQuery·p0.95:   1407.189 ms/op
                 executeQuery·p0.99:   1407.189 ms/op
                 executeQuery·p0.999:  1407.189 ms/op
                 executeQuery·p0.9999: 1407.189 ms/op
                 executeQuery·p1.00:   1407.189 ms/op

Iteration   5: 1337.983 ±(99.9%) 19.991 ms/op
                 executeQuery·p0.00:   1327.497 ms/op
                 executeQuery·p0.50:   1336.934 ms/op
                 executeQuery·p0.90:   1352.663 ms/op
                 executeQuery·p0.95:   1352.663 ms/op
                 executeQuery·p0.99:   1352.663 ms/op
                 executeQuery·p0.999:  1352.663 ms/op
                 executeQuery·p0.9999: 1352.663 ms/op
                 executeQuery·p1.00:   1352.663 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 40
  mean =   1348.207 ±(99.9%) 11.723 ms/op

  Histogram, ms/op:
    [1310.000, 1320.000) = 2 
    [1320.000, 1330.000) = 9 
    [1330.000, 1340.000) = 2 
    [1340.000, 1350.000) = 8 
    [1350.000, 1360.000) = 11 
    [1360.000, 1370.000) = 4 
    [1370.000, 1380.000) = 0 
    [1380.000, 1390.000) = 1 
    [1390.000, 1400.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1317.011 ms/op
     p(50.0000) =   1347.420 ms/op
     p(90.0000) =   1380.765 ms/op
     p(95.0000) =   1390.412 ms/op
     p(99.0000) =   1407.189 ms/op
     p(99.9000) =   1407.189 ms/op
     p(99.9900) =   1407.189 ms/op
     p(99.9990) =   1407.189 ms/op
     p(99.9999) =   1407.189 ms/op
    p(100.0000) =   1407.189 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 81.37% complete, ETA 00:54:27
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
24058.528 ms/op
# Warmup Iteration   2: 16592.667 ms/op
# Warmup Iteration   3: 16391.340 ms/op
# Warmup Iteration   4: 16978.543 ms/op
# Warmup Iteration   5: 18555.601 ms/op
Iteration   1: 16810.770 ms/op
                 executeQuery·p0.00:   16810.770 ms/op
                 executeQuery·p0.50:   16810.770 ms/op
                 executeQuery·p0.90:   16810.770 ms/op
                 executeQuery·p0.95:   16810.770 ms/op
                 executeQuery·p0.99:   16810.770 ms/op
                 executeQuery·p0.999:  16810.770 ms/op
                 executeQuery·p0.9999: 16810.770 ms/op
                 executeQuery·p1.00:   16810.770 ms/op

Iteration   2: 17817.403 ms/op
                 executeQuery·p0.00:   17817.403 ms/op
                 executeQuery·p0.50:   17817.403 ms/op
                 executeQuery·p0.90:   17817.403 ms/op
                 executeQuery·p0.95:   17817.403 ms/op
                 executeQuery·p0.99:   17817.403 ms/op
                 executeQuery·p0.999:  17817.403 ms/op
                 executeQuery·p0.9999: 17817.403 ms/op
                 executeQuery·p1.00:   17817.403 ms/op

Iteration   3: 19864.224 ms/op
                 executeQuery·p0.00:   19864.224 ms/op
                 executeQuery·p0.50:   19864.224 ms/op
                 executeQuery·p0.90:   19864.224 ms/op
                 executeQuery·p0.95:   19864.224 ms/op
                 executeQuery·p0.99:   19864.224 ms/op
                 executeQuery·p0.999:  19864.224 ms/op
                 executeQuery·p0.9999: 19864.224 ms/op
                 executeQuery·p1.00:   19864.224 ms/op

Iteration   4: 19864.224 ms/op
                 executeQuery·p0.00:   19864.224 ms/op
                 executeQuery·p0.50:   19864.224 ms/op
                 executeQuery·p0.90:   19864.224 ms/op
                 executeQuery·p0.95:   19864.224 ms/op
                 executeQuery·p0.99:   19864.224 ms/op
                 executeQuery·p0.999:  19864.224 ms/op
                 executeQuery·p0.9999: 19864.224 ms/op
                 executeQuery·p1.00:   19864.224 ms/op

Iteration   5: 20132.659 ms/op
                 executeQuery·p0.00:   20132.659 ms/op
                 executeQuery·p0.50:   20132.659 ms/op
                 executeQuery·p0.90:   20132.659 ms/op
                 executeQuery·p0.95:   20132.659 ms/op
                 executeQuery·p0.99:   20132.659 ms/op
                 executeQuery·p0.999:  20132.659 ms/op
                 executeQuery·p0.9999: 20132.659 ms/op
                 executeQuery·p1.00:   20132.659 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  18897.856 ±(99.9%) 5748.876 ms/op

  Histogram, ms/op:
    [16000.000, 16500.000) = 0 
    [16500.000, 17000.000) = 1 
    [17000.000, 17500.000) = 0 
    [17500.000, 18000.000) = 1 
    [18000.000, 18500.000) = 0 
    [18500.000, 19000.000) = 0 
    [19000.000, 19500.000) = 0 
    [19500.000, 20000.000) = 2 
    [20000.000, 20500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  16810.770 ms/op
     p(50.0000) =  19864.224 ms/op
     p(90.0000) =  20132.659 ms/op
     p(95.0000) =  20132.659 ms/op
     p(99.0000) =  20132.659 ms/op
     p(99.9000) =  20132.659 ms/op
     p(99.9900) =  20132.659 ms/op
     p(99.9990) =  20132.659 ms/op
     p(99.9999) =  20132.659 ms/op
    p(100.0000) =  20132.659 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 82.35% complete, ETA 00:51:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
111.087 ±(99.9%) 8.347 ms/op
# Warmup Iteration   2: 101.070 ±(99.9%) 0.443 ms/op
# Warmup Iteration   3: 102.378 ±(99.9%) 0.260 ms/op
# Warmup Iteration   4: 99.874 ±(99.9%) 0.229 ms/op
# Warmup Iteration   5: 100.480 ±(99.9%) 0.508 ms/op
Iteration   1: 94.843 ±(99.9%) 2.027 ms/op
                 executeQuery·p0.00:   83.886 ms/op
                 executeQuery·p0.50:   97.190 ms/op
                 executeQuery·p0.90:   101.581 ms/op
                 executeQuery·p0.95:   101.843 ms/op
                 executeQuery·p0.99:   105.559 ms/op
                 executeQuery·p0.999:  105.644 ms/op
                 executeQuery·p0.9999: 105.644 ms/op
                 executeQuery·p1.00:   105.644 ms/op

Iteration   2: 88.084 ±(99.9%) 0.402 ms/op
                 executeQuery·p0.00:   84.804 ms/op
                 executeQuery·p0.50:   88.211 ms/op
                 executeQuery·p0.90:   89.221 ms/op
                 executeQuery·p0.95:   89.522 ms/op
                 executeQuery·p0.99:   94.329 ms/op
                 executeQuery·p0.999:  95.027 ms/op
                 executeQuery·p0.9999: 95.027 ms/op
                 executeQuery·p1.00:   95.027 ms/op

Iteration   3: 87.040 ±(99.9%) 0.490 ms/op
                 executeQuery·p0.00:   84.935 ms/op
                 executeQuery·p0.50:   86.376 ms/op
                 executeQuery·p0.90:   89.391 ms/op
                 executeQuery·p0.95:   89.824 ms/op
                 executeQuery·p0.99:   91.811 ms/op
                 executeQuery·p0.999:  92.013 ms/op
                 executeQuery·p0.9999: 92.013 ms/op
                 executeQuery·p1.00:   92.013 ms/op

Iteration   4: 85.902 ±(99.9%) 0.370 ms/op
                 executeQuery·p0.00:   84.804 ms/op
                 executeQuery·p0.50:   85.656 ms/op
                 executeQuery·p0.90:   86.376 ms/op
                 executeQuery·p0.95:   89.555 ms/op
                 executeQuery·p0.99:   90.833 ms/op
                 executeQuery·p0.999:  90.833 ms/op
                 executeQuery·p0.9999: 90.833 ms/op
                 executeQuery·p1.00:   90.833 ms/op

Iteration   5: 86.749 ±(99.9%) 0.490 ms/op
                 executeQuery·p0.00:   84.148 ms/op
                 executeQuery·p0.50:   86.770 ms/op
                 executeQuery·p0.90:   88.605 ms/op
                 executeQuery·p0.95:   89.162 ms/op
                 executeQuery·p0.99:   90.964 ms/op
                 executeQuery·p0.999:  90.964 ms/op
                 executeQuery·p0.9999: 90.964 ms/op
                 executeQuery·p1.00:   90.964 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 557
  mean =     88.414 ±(99.9%) 0.602 ms/op

  Histogram, ms/op:
    [ 80.000,  82.500) = 0 
    [ 82.500,  85.000) = 30 
    [ 85.000,  87.500) = 251 
    [ 87.500,  90.000) = 205 
    [ 90.000,  92.500) = 13 
    [ 92.500,  95.000) = 1 
    [ 95.000,  97.500) = 5 
    [ 97.500, 100.000) = 16 
    [100.000, 102.500) = 33 
    [102.500, 105.000) = 2 
    [105.000, 107.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     83.886 ms/op
     p(50.0000) =     87.425 ms/op
     p(90.0000) =     95.578 ms/op
     p(95.0000) =    100.663 ms/op
     p(99.0000) =    101.843 ms/op
     p(99.9000) =    105.644 ms/op
     p(99.9900) =    105.644 ms/op
     p(99.9990) =    105.644 ms/op
     p(99.9999) =    105.644 ms/op
    p(100.0000) =    105.644 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 83.33% complete, ETA 00:48:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1572.864 ±(99.9%) 518.304 ms/op
# Warmup Iteration   2: 1419.772 ±(99.9%) 45.768 ms/op
# Warmup Iteration   3: 1386.742 ±(99.9%) 14.013 ms/op
# Warmup Iteration   4: 1387.004 ±(99.9%) 35.732 ms/op
# Warmup Iteration   5: 1404.305 ±(99.9%) 28.185 ms/op
Iteration   1: 1399.849 ±(99.9%) 27.195 ms/op
                 executeQuery·p0.00:   1375.732 ms/op
                 executeQuery·p0.50:   1401.946 ms/op
                 executeQuery·p0.90:   1421.869 ms/op
                 executeQuery·p0.95:   1421.869 ms/op
                 executeQuery·p0.99:   1421.869 ms/op
                 executeQuery·p0.999:  1421.869 ms/op
                 executeQuery·p0.9999: 1421.869 ms/op
                 executeQuery·p1.00:   1421.869 ms/op

Iteration   2: 1404.305 ±(99.9%) 28.104 ms/op
                 executeQuery·p0.00:   1388.315 ms/op
                 executeQuery·p0.50:   1402.995 ms/op
                 executeQuery·p0.90:   1428.161 ms/op
                 executeQuery·p0.95:   1428.161 ms/op
                 executeQuery·p0.99:   1428.161 ms/op
                 executeQuery·p0.999:  1428.161 ms/op
                 executeQuery·p0.9999: 1428.161 ms/op
                 executeQuery·p1.00:   1428.161 ms/op

Iteration   3: 1407.189 ±(99.9%) 46.018 ms/op
                 executeQuery·p0.00:   1382.023 ms/op
                 executeQuery·p0.50:   1400.898 ms/op
                 executeQuery·p0.90:   1461.715 ms/op
                 executeQuery·p0.95:   1461.715 ms/op
                 executeQuery·p0.99:   1461.715 ms/op
                 executeQuery·p0.999:  1461.715 ms/op
                 executeQuery·p0.9999: 1461.715 ms/op
                 executeQuery·p1.00:   1461.715 ms/op

Iteration   4: 1439.845 ±(99.9%) 60.907 ms/op
                 executeQuery·p0.00:   1398.800 ms/op
                 executeQuery·p0.50:   1432.355 ms/op
                 executeQuery·p0.90:   1476.395 ms/op
                 executeQuery·p0.95:   1476.395 ms/op
                 executeQuery·p0.99:   1476.395 ms/op
                 executeQuery·p0.999:  1476.395 ms/op
                 executeQuery·p0.9999: 1476.395 ms/op
                 executeQuery·p1.00:   1476.395 ms/op

Iteration   5: 1397.490 ±(99.9%) 18.677 ms/op
                 executeQuery·p0.00:   1382.023 ms/op
                 executeQuery·p0.50:   1395.655 ms/op
                 executeQuery·p0.90:   1413.480 ms/op
                 executeQuery·p0.95:   1413.480 ms/op
                 executeQuery·p0.99:   1413.480 ms/op
                 executeQuery·p0.999:  1413.480 ms/op
                 executeQuery·p0.9999: 1413.480 ms/op
                 executeQuery·p1.00:   1413.480 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 39
  mean =   1408.964 ±(99.9%) 13.304 ms/op

  Histogram, ms/op:
    [1300.000, 1312.500) = 0 
    [1312.500, 1325.000) = 0 
    [1325.000, 1337.500) = 0 
    [1337.500, 1350.000) = 0 
    [1350.000, 1362.500) = 0 
    [1362.500, 1375.000) = 0 
    [1375.000, 1387.500) = 3 
    [1387.500, 1400.000) = 14 
    [1400.000, 1412.500) = 10 
    [1412.500, 1425.000) = 5 
    [1425.000, 1437.500) = 3 
    [1437.500, 1450.000) = 0 
    [1450.000, 1462.500) = 2 
    [1462.500, 1475.000) = 1 
    [1475.000, 1487.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1375.732 ms/op
     p(50.0000) =   1402.995 ms/op
     p(90.0000) =   1451.229 ms/op
     p(95.0000) =   1468.006 ms/op
     p(99.0000) =   1476.395 ms/op
     p(99.9000) =   1476.395 ms/op
     p(99.9900) =   1476.395 ms/op
     p(99.9990) =   1476.395 ms/op
     p(99.9999) =   1476.395 ms/op
    p(100.0000) =   1476.395 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 84.31% complete, ETA 00:45:30
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
25769.804 ms/op
# Warmup Iteration   2: 19058.917 ms/op
# Warmup Iteration   3: 20434.649 ms/op
# Warmup Iteration   4: 20367.540 ms/op
# Warmup Iteration   5: 15032.386 ms/op
Iteration   1: 18152.948 ms/op
                 executeQuery·p0.00:   18152.948 ms/op
                 executeQuery·p0.50:   18152.948 ms/op
                 executeQuery·p0.90:   18152.948 ms/op
                 executeQuery·p0.95:   18152.948 ms/op
                 executeQuery·p0.99:   18152.948 ms/op
                 executeQuery·p0.999:  18152.948 ms/op
                 executeQuery·p0.9999: 18152.948 ms/op
                 executeQuery·p1.00:   18152.948 ms/op

Iteration   2: 17884.512 ms/op
                 executeQuery·p0.00:   17884.512 ms/op
                 executeQuery·p0.50:   17884.512 ms/op
                 executeQuery·p0.90:   17884.512 ms/op
                 executeQuery·p0.95:   17884.512 ms/op
                 executeQuery·p0.99:   17884.512 ms/op
                 executeQuery·p0.999:  17884.512 ms/op
                 executeQuery·p0.9999: 17884.512 ms/op
                 executeQuery·p1.00:   17884.512 ms/op

Iteration   3: 17985.176 ms/op
                 executeQuery·p0.00:   17985.176 ms/op
                 executeQuery·p0.50:   17985.176 ms/op
                 executeQuery·p0.90:   17985.176 ms/op
                 executeQuery·p0.95:   17985.176 ms/op
                 executeQuery·p0.99:   17985.176 ms/op
                 executeQuery·p0.999:  17985.176 ms/op
                 executeQuery·p0.9999: 17985.176 ms/op
                 executeQuery·p1.00:   17985.176 ms/op

Iteration   4: 18085.839 ms/op
                 executeQuery·p0.00:   18085.839 ms/op
                 executeQuery·p0.50:   18085.839 ms/op
                 executeQuery·p0.90:   18085.839 ms/op
                 executeQuery·p0.95:   18085.839 ms/op
                 executeQuery·p0.99:   18085.839 ms/op
                 executeQuery·p0.999:  18085.839 ms/op
                 executeQuery·p0.9999: 18085.839 ms/op
                 executeQuery·p1.00:   18085.839 ms/op

Iteration   5: 17985.176 ms/op
                 executeQuery·p0.00:   17985.176 ms/op
                 executeQuery·p0.50:   17985.176 ms/op
                 executeQuery·p0.90:   17985.176 ms/op
                 executeQuery·p0.95:   17985.176 ms/op
                 executeQuery·p0.99:   17985.176 ms/op
                 executeQuery·p0.999:  17985.176 ms/op
                 executeQuery·p0.9999: 17985.176 ms/op
                 executeQuery·p1.00:   17985.176 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 5
  mean =  18018.730 ±(99.9%) 398.240 ms/op

  Histogram, ms/op:
    [17800.000, 17825.000) = 0 
    [17825.000, 17850.000) = 0 
    [17850.000, 17875.000) = 0 
    [17875.000, 17900.000) = 1 
    [17900.000, 17925.000) = 0 
    [17925.000, 17950.000) = 0 
    [17950.000, 17975.000) = 0 
    [17975.000, 18000.000) = 2 
    [18000.000, 18025.000) = 0 
    [18025.000, 18050.000) = 0 
    [18050.000, 18075.000) = 0 
    [18075.000, 18100.000) = 1 
    [18100.000, 18125.000) = 0 
    [18125.000, 18150.000) = 0 
    [18150.000, 18175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  17884.512 ms/op
     p(50.0000) =  17985.176 ms/op
     p(90.0000) =  18152.948 ms/op
     p(95.0000) =  18152.948 ms/op
     p(99.0000) =  18152.948 ms/op
     p(99.9000) =  18152.948 ms/op
     p(99.9900) =  18152.948 ms/op
     p(99.9990) =  18152.948 ms/op
     p(99.9999) =  18152.948 ms/op
    p(100.0000) =  18152.948 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 85.29% complete, ETA 00:42:44
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
29.539 ±(99.9%) 1.059 ms/op
# Warmup Iteration   2: 28.212 ±(99.9%) 0.104 ms/op
# Warmup Iteration   3: 28.141 ±(99.9%) 0.068 ms/op
# Warmup Iteration   4: 28.173 ±(99.9%) 0.074 ms/op
# Warmup Iteration   5: 28.122 ±(99.9%) 0.091 ms/op
Iteration   1: 27.978 ±(99.9%) 0.054 ms/op
                 executeQuery·p0.00:   27.558 ms/op
                 executeQuery·p0.50:   27.918 ms/op
                 executeQuery·p0.90:   28.344 ms/op
                 executeQuery·p0.95:   28.480 ms/op
                 executeQuery·p0.99:   29.609 ms/op
                 executeQuery·p0.999:  29.983 ms/op
                 executeQuery·p0.9999: 29.983 ms/op
                 executeQuery·p1.00:   29.983 ms/op

Iteration   2: 28.248 ±(99.9%) 0.068 ms/op
                 executeQuery·p0.00:   27.591 ms/op
                 executeQuery·p0.50:   28.312 ms/op
                 executeQuery·p0.90:   28.541 ms/op
                 executeQuery·p0.95:   28.901 ms/op
                 executeQuery·p0.99:   29.723 ms/op
                 executeQuery·p0.999:  30.507 ms/op
                 executeQuery·p0.9999: 30.507 ms/op
                 executeQuery·p1.00:   30.507 ms/op

Iteration   3: 28.362 ±(99.9%) 0.047 ms/op
                 executeQuery·p0.00:   27.623 ms/op
                 executeQuery·p0.50:   28.377 ms/op
                 executeQuery·p0.90:   28.534 ms/op
                 executeQuery·p0.95:   28.849 ms/op
                 executeQuery·p0.99:   29.394 ms/op
                 executeQuery·p0.999:  29.983 ms/op
                 executeQuery·p0.9999: 29.983 ms/op
                 executeQuery·p1.00:   29.983 ms/op

Iteration   4: 28.456 ±(99.9%) 0.077 ms/op
                 executeQuery·p0.00:   27.820 ms/op
                 executeQuery·p0.50:   28.377 ms/op
                 executeQuery·p0.90:   28.833 ms/op
                 executeQuery·p0.95:   29.000 ms/op
                 executeQuery·p0.99:   30.834 ms/op
                 executeQuery·p0.999:  33.227 ms/op
                 executeQuery·p0.9999: 33.227 ms/op
                 executeQuery·p1.00:   33.227 ms/op

Iteration   5: 28.407 ±(99.9%) 0.048 ms/op
                 executeQuery·p0.00:   27.656 ms/op
                 executeQuery·p0.50:   28.344 ms/op
                 executeQuery·p0.90:   28.574 ms/op
                 executeQuery·p0.95:   28.934 ms/op
                 executeQuery·p0.99:   29.832 ms/op
                 executeQuery·p0.999:  29.950 ms/op
                 executeQuery·p0.9999: 29.950 ms/op
                 executeQuery·p1.00:   29.950 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 1761
  mean =     28.289 ±(99.9%) 0.030 ms/op

  Histogram, ms/op:
    [27.000, 27.500) = 0 
    [27.500, 28.000) = 397 
    [28.000, 28.500) = 1124 
    [28.500, 29.000) = 191 
    [29.000, 29.500) = 24 
    [29.500, 30.000) = 17 
    [30.000, 30.500) = 3 
    [30.500, 31.000) = 4 
    [31.000, 31.500) = 0 
    [31.500, 32.000) = 0 
    [32.000, 32.500) = 0 
    [32.500, 33.000) = 0 
    [33.000, 33.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     27.558 ms/op
     p(50.0000) =     28.312 ms/op
     p(90.0000) =     28.541 ms/op
     p(95.0000) =     28.901 ms/op
     p(99.0000) =     29.823 ms/op
     p(99.9000) =     31.529 ms/op
     p(99.9900) =     33.227 ms/op
     p(99.9990) =     33.227 ms/op
     p(99.9999) =     33.227 ms/op
    p(100.0000) =     33.227 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 86.27% complete, ETA 00:39:41
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
289.145 ±(99.9%) 36.275 ms/op
# Warmup Iteration   2: 268.753 ±(99.9%) 2.720 ms/op
# Warmup Iteration   3: 266.069 ±(99.9%) 1.324 ms/op
# Warmup Iteration   4: 271.029 ±(99.9%) 2.464 ms/op
# Warmup Iteration   5: 271.560 ±(99.9%) 2.608 ms/op
Iteration   1: 268.760 ±(99.9%) 1.831 ms/op
                 executeQuery·p0.00:   264.765 ms/op
                 executeQuery·p0.50:   268.042 ms/op
                 executeQuery·p0.90:   273.259 ms/op
                 executeQuery·p0.95:   275.775 ms/op
                 executeQuery·p0.99:   275.775 ms/op
                 executeQuery·p0.999:  275.775 ms/op
                 executeQuery·p0.9999: 275.775 ms/op
                 executeQuery·p1.00:   275.775 ms/op

Iteration   2: 269.436 ±(99.9%) 2.371 ms/op
                 executeQuery·p0.00:   265.028 ms/op
                 executeQuery·p0.50:   268.304 ms/op
                 executeQuery·p0.90:   275.985 ms/op
                 executeQuery·p0.95:   278.947 ms/op
                 executeQuery·p0.99:   279.446 ms/op
                 executeQuery·p0.999:  279.446 ms/op
                 executeQuery·p0.9999: 279.446 ms/op
                 executeQuery·p1.00:   279.446 ms/op

Iteration   3: 270.065 ±(99.9%) 2.616 ms/op
                 executeQuery·p0.00:   265.028 ms/op
                 executeQuery·p0.50:   268.435 ms/op
                 executeQuery·p0.90:   277.977 ms/op
                 executeQuery·p0.95:   280.075 ms/op
                 executeQuery·p0.99:   281.018 ms/op
                 executeQuery·p0.999:  281.018 ms/op
                 executeQuery·p0.9999: 281.018 ms/op
                 executeQuery·p1.00:   281.018 ms/op

Iteration   4: 267.690 ±(99.9%) 1.560 ms/op
                 executeQuery·p0.00:   265.290 ms/op
                 executeQuery·p0.50:   266.600 ms/op
                 executeQuery·p0.90:   272.682 ms/op
                 executeQuery·p0.95:   273.678 ms/op
                 executeQuery·p0.99:   273.678 ms/op
                 executeQuery·p0.999:  273.678 ms/op
                 executeQuery·p0.9999: 273.678 ms/op
                 executeQuery·p1.00:   273.678 ms/op

Iteration   5: 266.042 ±(99.9%) 0.739 ms/op
                 executeQuery·p0.00:   264.765 ms/op
                 executeQuery·p0.50:   265.552 ms/op
                 executeQuery·p0.90:   268.068 ms/op
                 executeQuery·p0.95:   270.008 ms/op
                 executeQuery·p0.99:   270.008 ms/op
                 executeQuery·p0.999:  270.008 ms/op
                 executeQuery·p0.9999: 270.008 ms/op
                 executeQuery·p1.00:   270.008 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 189
  mean =    268.390 ±(99.9%) 0.870 ms/op

  Histogram, ms/op:
    [260.000, 262.500) = 0 
    [262.500, 265.000) = 3 
    [265.000, 267.500) = 103 
    [267.500, 270.000) = 27 
    [270.000, 272.500) = 27 
    [272.500, 275.000) = 18 
    [275.000, 277.500) = 4 
    [277.500, 280.000) = 6 
    [280.000, 282.500) = 1 
    [282.500, 285.000) = 0 
    [285.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    264.765 ms/op
     p(50.0000) =    266.863 ms/op
     p(90.0000) =    273.678 ms/op
     p(95.0000) =    275.775 ms/op
     p(99.0000) =    280.075 ms/op
     p(99.9000) =    281.018 ms/op
     p(99.9900) =    281.018 ms/op
     p(99.9990) =    281.018 ms/op
     p(99.9999) =    281.018 ms/op
    p(100.0000) =    281.018 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 87.25% complete, ETA 00:36:41
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2940.207 ±(99.9%) 1422.527 ms/op
# Warmup Iteration   2: 2958.033 ±(99.9%) 71.281 ms/op
# Warmup Iteration   3: 2821.718 ±(99.9%) 1671.123 ms/op
# Warmup Iteration   4: 2603.614 ±(99.9%) 67.759 ms/op
# Warmup Iteration   5: 2617.246 ±(99.9%) 200.395 ms/op
Iteration   1: 2620.391 ±(99.9%) 140.617 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2617.246 ms/op
                 executeQuery·p0.90:   2646.606 ms/op
                 executeQuery·p0.95:   2646.606 ms/op
                 executeQuery·p0.99:   2646.606 ms/op
                 executeQuery·p0.999:  2646.606 ms/op
                 executeQuery·p0.9999: 2646.606 ms/op
                 executeQuery·p1.00:   2646.606 ms/op

Iteration   2: 2620.391 ±(99.9%) 133.469 ms/op
                 executeQuery·p0.00:   2596.274 ms/op
                 executeQuery·p0.50:   2619.343 ms/op
                 executeQuery·p0.90:   2646.606 ms/op
                 executeQuery·p0.95:   2646.606 ms/op
                 executeQuery·p0.99:   2646.606 ms/op
                 executeQuery·p0.999:  2646.606 ms/op
                 executeQuery·p0.9999: 2646.606 ms/op
                 executeQuery·p1.00:   2646.606 ms/op

Iteration   3: 2602.566 ±(99.9%) 100.198 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2600.468 ms/op
                 executeQuery·p0.90:   2621.440 ms/op
                 executeQuery·p0.95:   2621.440 ms/op
                 executeQuery·p0.99:   2621.440 ms/op
                 executeQuery·p0.999:  2621.440 ms/op
                 executeQuery·p0.9999: 2621.440 ms/op
                 executeQuery·p1.00:   2621.440 ms/op

Iteration   4: 2618.294 ±(99.9%) 133.469 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2617.246 ms/op
                 executeQuery·p0.90:   2638.217 ms/op
                 executeQuery·p0.95:   2638.217 ms/op
                 executeQuery·p0.99:   2638.217 ms/op
                 executeQuery·p0.999:  2638.217 ms/op
                 executeQuery·p0.9999: 2638.217 ms/op
                 executeQuery·p1.00:   2638.217 ms/op

Iteration   5: 2607.809 ±(99.9%) 77.849 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2602.566 ms/op
                 executeQuery·p0.90:   2625.634 ms/op
                 executeQuery·p0.95:   2625.634 ms/op
                 executeQuery·p0.99:   2625.634 ms/op
                 executeQuery·p0.999:  2625.634 ms/op
                 executeQuery·p0.9999: 2625.634 ms/op
                 executeQuery·p1.00:   2625.634 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   2613.890 ±(99.9%) 15.703 ms/op

  Histogram, ms/op:
    [2580.000, 2585.000) = 0 
    [2585.000, 2590.000) = 1 
    [2590.000, 2595.000) = 1 
    [2595.000, 2600.000) = 1 
    [2600.000, 2605.000) = 7 
    [2605.000, 2610.000) = 1 
    [2610.000, 2615.000) = 0 
    [2615.000, 2620.000) = 1 
    [2620.000, 2625.000) = 2 
    [2625.000, 2630.000) = 2 
    [2630.000, 2635.000) = 1 
    [2635.000, 2640.000) = 1 
    [2640.000, 2645.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2587.886 ms/op
     p(50.0000) =   2606.760 ms/op
     p(90.0000) =   2645.767 ms/op
     p(95.0000) =   2646.606 ms/op
     p(99.0000) =   2646.606 ms/op
     p(99.9000) =   2646.606 ms/op
     p(99.9900) =   2646.606 ms/op
     p(99.9990) =   2646.606 ms/op
     p(99.9999) =   2646.606 ms/op
    p(100.0000) =   2646.606 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 88.24% complete, ETA 00:33:44
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
34.411 ±(99.9%) 1.046 ms/op
# Warmup Iteration   2: 33.053 ±(99.9%) 0.117 ms/op
# Warmup Iteration   3: 33.397 ±(99.9%) 0.085 ms/op
# Warmup Iteration   4: 33.185 ±(99.9%) 0.068 ms/op
# Warmup Iteration   5: 33.200 ±(99.9%) 0.077 ms/op
Iteration   1: 33.449 ±(99.9%) 0.137 ms/op
                 executeQuery·p0.00:   32.604 ms/op
                 executeQuery·p0.50:   33.522 ms/op
                 executeQuery·p0.90:   33.948 ms/op
                 executeQuery·p0.95:   34.341 ms/op
                 executeQuery·p0.99:   35.327 ms/op
                 executeQuery·p0.999:  41.878 ms/op
                 executeQuery·p0.9999: 41.878 ms/op
                 executeQuery·p1.00:   41.878 ms/op

Iteration   2: 32.959 ±(99.9%) 0.060 ms/op
                 executeQuery·p0.00:   32.211 ms/op
                 executeQuery·p0.50:   32.866 ms/op
                 executeQuery·p0.90:   33.410 ms/op
                 executeQuery·p0.95:   33.620 ms/op
                 executeQuery·p0.99:   34.527 ms/op
                 executeQuery·p0.999:  34.734 ms/op
                 executeQuery·p0.9999: 34.734 ms/op
                 executeQuery·p1.00:   34.734 ms/op

Iteration   3: 33.237 ±(99.9%) 0.093 ms/op
                 executeQuery·p0.00:   32.637 ms/op
                 executeQuery·p0.50:   33.096 ms/op
                 executeQuery·p0.90:   33.751 ms/op
                 executeQuery·p0.95:   34.144 ms/op
                 executeQuery·p0.99:   34.602 ms/op
                 executeQuery·p0.999:  35.389 ms/op
                 executeQuery·p0.9999: 35.389 ms/op
                 executeQuery·p1.00:   35.389 ms/op

Iteration   4: 33.122 ±(99.9%) 0.087 ms/op
                 executeQuery·p0.00:   32.539 ms/op
                 executeQuery·p0.50:   32.866 ms/op
                 executeQuery·p0.90:   33.686 ms/op
                 executeQuery·p0.95:   33.751 ms/op
                 executeQuery·p0.99:   34.663 ms/op
                 executeQuery·p0.999:  35.127 ms/op
                 executeQuery·p0.9999: 35.127 ms/op
                 executeQuery·p1.00:   35.127 ms/op

Iteration   5: 32.859 ±(99.9%) 0.085 ms/op
                 executeQuery·p0.00:   31.949 ms/op
                 executeQuery·p0.50:   32.834 ms/op
                 executeQuery·p0.90:   33.260 ms/op
                 executeQuery·p0.95:   33.554 ms/op
                 executeQuery·p0.99:   34.456 ms/op
                 executeQuery·p0.999:  37.749 ms/op
                 executeQuery·p0.9999: 37.749 ms/op
                 executeQuery·p1.00:   37.749 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery":
  N = 1506
  mean =     33.124 ±(99.9%) 0.046 ms/op

  Histogram, ms/op:
    [31.000, 32.000) = 5 
    [32.000, 33.000) = 944 
    [33.000, 34.000) = 492 
    [34.000, 35.000) = 58 
    [35.000, 36.000) = 5 
    [36.000, 37.000) = 0 
    [37.000, 38.000) = 1 
    [38.000, 39.000) = 0 
    [39.000, 40.000) = 0 
    [40.000, 41.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     31.949 ms/op
     p(50.0000) =     32.899 ms/op
     p(90.0000) =     33.751 ms/op
     p(95.0000) =     33.882 ms/op
     p(99.0000) =     34.537 ms/op
     p(99.9000) =     39.784 ms/op
     p(99.9900) =     41.878 ms/op
     p(99.9990) =     41.878 ms/op
     p(99.9999) =     41.878 ms/op
    p(100.0000) =     41.878 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 89.22% complete, ETA 00:30:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
350.044 ±(99.9%) 42.816 ms/op
# Warmup Iteration   2: 314.393 ±(99.9%) 1.029 ms/op
# Warmup Iteration   3: 313.999 ±(99.9%) 0.954 ms/op
# Warmup Iteration   4: 313.819 ±(99.9%) 0.586 ms/op
# Warmup Iteration   5: 314.327 ±(99.9%) 1.328 ms/op
Iteration   1: 315.474 ±(99.9%) 2.006 ms/op
                 executeQuery·p0.00:   311.427 ms/op
                 executeQuery·p0.50:   314.049 ms/op
                 executeQuery·p0.90:   319.816 ms/op
                 executeQuery·p0.95:   320.366 ms/op
                 executeQuery·p0.99:   321.389 ms/op
                 executeQuery·p0.999:  321.389 ms/op
                 executeQuery·p0.9999: 321.389 ms/op
                 executeQuery·p1.00:   321.389 ms/op

Iteration   2: 317.047 ±(99.9%) 1.857 ms/op
                 executeQuery·p0.00:   310.903 ms/op
                 executeQuery·p0.50:   318.243 ms/op
                 executeQuery·p0.90:   319.816 ms/op
                 executeQuery·p0.95:   320.523 ms/op
                 executeQuery·p0.99:   320.864 ms/op
                 executeQuery·p0.999:  320.864 ms/op
                 executeQuery·p0.9999: 320.864 ms/op
                 executeQuery·p1.00:   320.864 ms/op

Iteration   3: 313.344 ±(99.9%) 0.724 ms/op
                 executeQuery·p0.00:   310.903 ms/op
                 executeQuery·p0.50:   313.524 ms/op
                 executeQuery·p0.90:   314.573 ms/op
                 executeQuery·p0.95:   315.097 ms/op
                 executeQuery·p0.99:   315.097 ms/op
                 executeQuery·p0.999:  315.097 ms/op
                 executeQuery·p0.9999: 315.097 ms/op
                 executeQuery·p1.00:   315.097 ms/op

Iteration   4: 315.900 ±(99.9%) 5.063 ms/op
                 executeQuery·p0.00:   310.903 ms/op
                 executeQuery·p0.50:   314.049 ms/op
                 executeQuery·p0.90:   320.759 ms/op
                 executeQuery·p0.95:   333.500 ms/op
                 executeQuery·p0.99:   355.992 ms/op
                 executeQuery·p0.999:  355.992 ms/op
                 executeQuery·p0.9999: 355.992 ms/op
                 executeQuery·p1.00:   355.992 ms/op

Iteration   5: 314.360 ±(99.9%) 2.148 ms/op
                 executeQuery·p0.00:   311.951 ms/op
                 executeQuery·p0.50:   313.524 ms/op
                 executeQuery·p0.90:   317.666 ms/op
                 executeQuery·p0.95:   323.984 ms/op
                 executeQuery·p0.99:   329.777 ms/op
                 executeQuery·p0.999:  329.777 ms/op
                 executeQuery·p0.9999: 329.777 ms/op
                 executeQuery·p1.00:   329.777 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery":
  N = 160
  mean =    315.225 ±(99.9%) 1.177 ms/op

  Histogram, ms/op:
    [310.000, 315.000) = 102 
    [315.000, 320.000) = 50 
    [320.000, 325.000) = 6 
    [325.000, 330.000) = 1 
    [330.000, 335.000) = 0 
    [335.000, 340.000) = 0 
    [340.000, 345.000) = 0 
    [345.000, 350.000) = 0 
    [350.000, 355.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    310.903 ms/op
     p(50.0000) =    314.049 ms/op
     p(90.0000) =    319.291 ms/op
     p(95.0000) =    320.314 ms/op
     p(99.0000) =    340.001 ms/op
     p(99.9000) =    355.992 ms/op
     p(99.9900) =    355.992 ms/op
     p(99.9990) =    355.992 ms/op
     p(99.9999) =    355.992 ms/op
    p(100.0000) =    355.992 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 90.20% complete, ETA 00:27:52
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3916.082 ±(99.9%) 10313.522 ms/op
# Warmup Iteration   2: 4160.750 ±(99.9%) 404.904 ms/op
# Warmup Iteration   3: 4155.157 ±(99.9%) 116.886 ms/op
# Warmup Iteration   4: 3092.251 ±(99.9%) 51.306 ms/op
# Warmup Iteration   5: 3107.979 ±(99.9%) 217.955 ms/op
Iteration   1: 3122.659 ±(99.9%) 71.709 ms/op
                 executeQuery·p0.00:   3107.979 ms/op
                 executeQuery·p0.50:   3124.756 ms/op
                 executeQuery·p0.90:   3133.145 ms/op
                 executeQuery·p0.95:   3133.145 ms/op
                 executeQuery·p0.99:   3133.145 ms/op
                 executeQuery·p0.999:  3133.145 ms/op
                 executeQuery·p0.9999: 3133.145 ms/op
                 executeQuery·p1.00:   3133.145 ms/op

Iteration   2: 3113.222 ±(99.9%) 106.993 ms/op
                 executeQuery·p0.00:   3099.591 ms/op
                 executeQuery·p0.50:   3107.979 ms/op
                 executeQuery·p0.90:   3137.339 ms/op
                 executeQuery·p0.95:   3137.339 ms/op
                 executeQuery·p0.99:   3137.339 ms/op
                 executeQuery·p0.999:  3137.339 ms/op
                 executeQuery·p0.9999: 3137.339 ms/op
                 executeQuery·p1.00:   3137.339 ms/op

Iteration   3: 3097.494 ±(99.9%) 27.104 ms/op
                 executeQuery·p0.00:   3091.202 ms/op
                 executeQuery·p0.50:   3099.591 ms/op
                 executeQuery·p0.90:   3099.591 ms/op
                 executeQuery·p0.95:   3099.591 ms/op
                 executeQuery·p0.99:   3099.591 ms/op
                 executeQuery·p0.999:  3099.591 ms/op
                 executeQuery·p0.9999: 3099.591 ms/op
                 executeQuery·p1.00:   3099.591 ms/op

Iteration   4: 3101.688 ±(99.9%) 78.241 ms/op
                 executeQuery·p0.00:   3087.008 ms/op
                 executeQuery·p0.50:   3101.688 ms/op
                 executeQuery·p0.90:   3116.368 ms/op
                 executeQuery·p0.95:   3116.368 ms/op
                 executeQuery·p0.99:   3116.368 ms/op
                 executeQuery·p0.999:  3116.368 ms/op
                 executeQuery·p0.9999: 3116.368 ms/op
                 executeQuery·p1.00:   3116.368 ms/op

Iteration   5: 3088.056 ±(99.9%) 13.552 ms/op
                 executeQuery·p0.00:   3087.008 ms/op
                 executeQuery·p0.50:   3087.008 ms/op
                 executeQuery·p0.90:   3091.202 ms/op
                 executeQuery·p0.95:   3091.202 ms/op
                 executeQuery·p0.99:   3091.202 ms/op
                 executeQuery·p0.999:  3091.202 ms/op
                 executeQuery·p0.9999: 3091.202 ms/op
                 executeQuery·p1.00:   3091.202 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery":
  N = 20
  mean =   3104.624 ±(99.9%) 13.556 ms/op

  Histogram, ms/op:
    [3080.000, 3085.000) = 0 
    [3085.000, 3090.000) = 4 
    [3090.000, 3095.000) = 2 
    [3095.000, 3100.000) = 5 
    [3100.000, 3105.000) = 1 
    [3105.000, 3110.000) = 3 
    [3110.000, 3115.000) = 0 
    [3115.000, 3120.000) = 1 
    [3120.000, 3125.000) = 1 
    [3125.000, 3130.000) = 1 
    [3130.000, 3135.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3087.008 ms/op
     p(50.0000) =   3099.591 ms/op
     p(90.0000) =   3132.726 ms/op
     p(95.0000) =   3137.130 ms/op
     p(99.0000) =   3137.339 ms/op
     p(99.9000) =   3137.339 ms/op
     p(99.9900) =   3137.339 ms/op
     p(99.9990) =   3137.339 ms/op
     p(99.9999) =   3137.339 ms/op
    p(100.0000) =   3137.339 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 91.18% complete, ETA 00:25:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
31.773 ±(99.9%) 1.026 ms/op
# Warmup Iteration   2: 34.731 ±(99.9%) 0.138 ms/op
# Warmup Iteration   3: 34.555 ±(99.9%) 0.134 ms/op
# Warmup Iteration   4: 33.891 ±(99.9%) 0.089 ms/op
# Warmup Iteration   5: 33.813 ±(99.9%) 0.095 ms/op
Iteration   1: 33.875 ±(99.9%) 0.115 ms/op
                 executeQuery·p0.00:   32.768 ms/op
                 executeQuery·p0.50:   33.751 ms/op
                 executeQuery·p0.90:   34.603 ms/op
                 executeQuery·p0.95:   34.931 ms/op
                 executeQuery·p0.99:   35.526 ms/op
                 executeQuery·p0.999:  38.666 ms/op
                 executeQuery·p0.9999: 38.666 ms/op
                 executeQuery·p1.00:   38.666 ms/op

Iteration   2: 33.988 ±(99.9%) 0.105 ms/op
                 executeQuery·p0.00:   32.735 ms/op
                 executeQuery·p0.50:   33.817 ms/op
                 executeQuery·p0.90:   34.865 ms/op
                 executeQuery·p0.95:   35.026 ms/op
                 executeQuery·p0.99:   35.562 ms/op
                 executeQuery·p0.999:  36.045 ms/op
                 executeQuery·p0.9999: 36.045 ms/op
                 executeQuery·p1.00:   36.045 ms/op

Iteration   3: 33.800 ±(99.9%) 0.089 ms/op
                 executeQuery·p0.00:   32.801 ms/op
                 executeQuery·p0.50:   33.751 ms/op
                 executeQuery·p0.90:   34.406 ms/op
                 executeQuery·p0.95:   34.800 ms/op
                 executeQuery·p0.99:   35.143 ms/op
                 executeQuery·p0.999:  36.241 ms/op
                 executeQuery·p0.9999: 36.241 ms/op
                 executeQuery·p1.00:   36.241 ms/op

Iteration   4: 33.662 ±(99.9%) 0.087 ms/op
                 executeQuery·p0.00:   32.899 ms/op
                 executeQuery·p0.50:   33.620 ms/op
                 executeQuery·p0.90:   34.190 ms/op
                 executeQuery·p0.95:   34.603 ms/op
                 executeQuery·p0.99:   34.935 ms/op
                 executeQuery·p0.999:  35.324 ms/op
                 executeQuery·p0.9999: 35.324 ms/op
                 executeQuery·p1.00:   35.324 ms/op

Iteration   5: 33.764 ±(99.9%) 0.113 ms/op
                 executeQuery·p0.00:   32.768 ms/op
                 executeQuery·p0.50:   33.686 ms/op
                 executeQuery·p0.90:   34.341 ms/op
                 executeQuery·p0.95:   34.757 ms/op
                 executeQuery·p0.99:   35.268 ms/op
                 executeQuery·p0.999:  39.715 ms/op
                 executeQuery·p0.9999: 39.715 ms/op
                 executeQuery·p1.00:   39.715 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 1455
  mean =     33.817 ±(99.9%) 0.046 ms/op

  Histogram, ms/op:
    [32.000, 32.500) = 0 
    [32.500, 33.000) = 47 
    [33.000, 33.500) = 281 
    [33.500, 34.000) = 792 
    [34.000, 34.500) = 181 
    [34.500, 35.000) = 117 
    [35.000, 35.500) = 27 
    [35.500, 36.000) = 6 
    [36.000, 36.500) = 2 
    [36.500, 37.000) = 0 
    [37.000, 37.500) = 0 
    [37.500, 38.000) = 0 
    [38.000, 38.500) = 0 
    [38.500, 39.000) = 1 
    [39.000, 39.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     32.735 ms/op
     p(50.0000) =     33.751 ms/op
     p(90.0000) =     34.537 ms/op
     p(95.0000) =     34.865 ms/op
     p(99.0000) =     35.418 ms/op
     p(99.9000) =     39.237 ms/op
     p(99.9900) =     39.715 ms/op
     p(99.9990) =     39.715 ms/op
     p(99.9999) =     39.715 ms/op
    p(100.0000) =     39.715 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 92.16% complete, ETA 00:22:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
299.338 ±(99.9%) 28.246 ms/op
# Warmup Iteration   2: 317.161 ±(99.9%) 3.265 ms/op
# Warmup Iteration   3: 318.947 ±(99.9%) 3.450 ms/op
# Warmup Iteration   4: 315.785 ±(99.9%) 1.046 ms/op
# Warmup Iteration   5: 316.965 ±(99.9%) 5.374 ms/op
Iteration   1: 317.604 ±(99.9%) 5.409 ms/op
                 executeQuery·p0.00:   311.951 ms/op
                 executeQuery·p0.50:   315.097 ms/op
                 executeQuery·p0.90:   325.111 ms/op
                 executeQuery·p0.95:   337.641 ms/op
                 executeQuery·p0.99:   358.089 ms/op
                 executeQuery·p0.999:  358.089 ms/op
                 executeQuery·p0.9999: 358.089 ms/op
                 executeQuery·p1.00:   358.089 ms/op

Iteration   2: 320.684 ±(99.9%) 4.859 ms/op
                 executeQuery·p0.00:   313.000 ms/op
                 executeQuery·p0.50:   321.389 ms/op
                 executeQuery·p0.90:   325.583 ms/op
                 executeQuery·p0.95:   335.623 ms/op
                 executeQuery·p0.99:   352.322 ms/op
                 executeQuery·p0.999:  352.322 ms/op
                 executeQuery·p0.9999: 352.322 ms/op
                 executeQuery·p1.00:   352.322 ms/op

Iteration   3: 317.096 ±(99.9%) 2.374 ms/op
                 executeQuery·p0.00:   313.000 ms/op
                 executeQuery·p0.50:   315.621 ms/op
                 executeQuery·p0.90:   324.377 ms/op
                 executeQuery·p0.95:   325.793 ms/op
                 executeQuery·p0.99:   327.156 ms/op
                 executeQuery·p0.999:  327.156 ms/op
                 executeQuery·p0.9999: 327.156 ms/op
                 executeQuery·p1.00:   327.156 ms/op

Iteration   4: 314.622 ±(99.9%) 1.412 ms/op
                 executeQuery·p0.00:   312.476 ms/op
                 executeQuery·p0.50:   314.049 ms/op
                 executeQuery·p0.90:   318.243 ms/op
                 executeQuery·p0.95:   321.048 ms/op
                 executeQuery·p0.99:   321.389 ms/op
                 executeQuery·p0.999:  321.389 ms/op
                 executeQuery·p0.9999: 321.389 ms/op
                 executeQuery·p1.00:   321.389 ms/op

Iteration   5: 319.406 ±(99.9%) 6.773 ms/op
                 executeQuery·p0.00:   311.427 ms/op
                 executeQuery·p0.50:   315.621 ms/op
                 executeQuery·p0.90:   325.950 ms/op
                 executeQuery·p0.95:   344.588 ms/op
                 executeQuery·p0.99:   370.147 ms/op
                 executeQuery·p0.999:  370.147 ms/op
                 executeQuery·p0.9999: 370.147 ms/op
                 executeQuery·p1.00:   370.147 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 160
  mean =    317.882 ±(99.9%) 1.958 ms/op

  Histogram, ms/op:
    [310.000, 315.000) = 70 
    [315.000, 320.000) = 47 
    [320.000, 325.000) = 26 
    [325.000, 330.000) = 13 
    [330.000, 335.000) = 1 
    [335.000, 340.000) = 0 
    [340.000, 345.000) = 0 
    [345.000, 350.000) = 0 
    [350.000, 355.000) = 1 
    [355.000, 360.000) = 1 
    [360.000, 365.000) = 0 
    [365.000, 370.000) = 0 
    [370.000, 375.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    311.427 ms/op
     p(50.0000) =    315.621 ms/op
     p(90.0000) =    325.059 ms/op
     p(95.0000) =    326.081 ms/op
     p(99.0000) =    362.792 ms/op
     p(99.9000) =    370.147 ms/op
     p(99.9900) =    370.147 ms/op
     p(99.9990) =    370.147 ms/op
     p(99.9999) =    370.147 ms/op
    p(100.0000) =    370.147 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 93.14% complete, ETA 00:19:17
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2960.130 ±(99.9%) 972.806 ms/op
# Warmup Iteration   2: 3142.582 ±(99.9%) 238.732 ms/op
# Warmup Iteration   3: 3125.805 ±(99.9%) 193.400 ms/op
# Warmup Iteration   4: 3139.437 ±(99.9%) 188.430 ms/op
# Warmup Iteration   5: 3148.874 ±(99.9%) 242.800 ms/op
Iteration   1: 3114.271 ±(99.9%) 104.972 ms/op
                 executeQuery·p0.00:   3095.396 ms/op
                 executeQuery·p0.50:   3114.271 ms/op
                 executeQuery·p0.90:   3133.145 ms/op
                 executeQuery·p0.95:   3133.145 ms/op
                 executeQuery·p0.99:   3133.145 ms/op
                 executeQuery·p0.999:  3133.145 ms/op
                 executeQuery·p0.9999: 3133.145 ms/op
                 executeQuery·p1.00:   3133.145 ms/op

Iteration   2: 3119.514 ±(99.9%) 80.933 ms/op
                 executeQuery·p0.00:   3103.785 ms/op
                 executeQuery·p0.50:   3120.562 ms/op
                 executeQuery·p0.90:   3133.145 ms/op
                 executeQuery·p0.95:   3133.145 ms/op
                 executeQuery·p0.99:   3133.145 ms/op
                 executeQuery·p0.999:  3133.145 ms/op
                 executeQuery·p0.9999: 3133.145 ms/op
                 executeQuery·p1.00:   3133.145 ms/op

Iteration   3: 3163.554 ±(99.9%) 340.956 ms/op
                 executeQuery·p0.00:   3128.951 ms/op
                 executeQuery·p0.50:   3141.534 ms/op
                 executeQuery·p0.90:   3242.197 ms/op
                 executeQuery·p0.95:   3242.197 ms/op
                 executeQuery·p0.99:   3242.197 ms/op
                 executeQuery·p0.999:  3242.197 ms/op
                 executeQuery·p0.9999: 3242.197 ms/op
                 executeQuery·p1.00:   3242.197 ms/op

Iteration   4: 3116.368 ±(99.9%) 117.101 ms/op
                 executeQuery·p0.00:   3099.591 ms/op
                 executeQuery·p0.50:   3112.174 ms/op
                 executeQuery·p0.90:   3141.534 ms/op
                 executeQuery·p0.95:   3141.534 ms/op
                 executeQuery·p0.99:   3141.534 ms/op
                 executeQuery·p0.999:  3141.534 ms/op
                 executeQuery·p0.9999: 3141.534 ms/op
                 executeQuery·p1.00:   3141.534 ms/op

Iteration   5: 3102.736 ±(99.9%) 25.950 ms/op
                 executeQuery·p0.00:   3099.591 ms/op
                 executeQuery·p0.50:   3101.688 ms/op
                 executeQuery·p0.90:   3107.979 ms/op
                 executeQuery·p0.95:   3107.979 ms/op
                 executeQuery·p0.99:   3107.979 ms/op
                 executeQuery·p0.999:  3107.979 ms/op
                 executeQuery·p0.9999: 3107.979 ms/op
                 executeQuery·p1.00:   3107.979 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   3123.288 ±(99.9%) 27.745 ms/op

  Histogram, ms/op:
    [3000.000, 3025.000) = 0 
    [3025.000, 3050.000) = 0 
    [3050.000, 3075.000) = 0 
    [3075.000, 3100.000) = 4 
    [3100.000, 3125.000) = 9 
    [3125.000, 3150.000) = 6 
    [3150.000, 3175.000) = 0 
    [3175.000, 3200.000) = 0 
    [3200.000, 3225.000) = 0 
    [3225.000, 3250.000) = 1 
    [3250.000, 3275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3095.396 ms/op
     p(50.0000) =   3116.368 ms/op
     p(90.0000) =   3141.534 ms/op
     p(95.0000) =   3237.164 ms/op
     p(99.0000) =   3242.197 ms/op
     p(99.9000) =   3242.197 ms/op
     p(99.9900) =   3242.197 ms/op
     p(99.9990) =   3242.197 ms/op
     p(99.9999) =   3242.197 ms/op
    p(100.0000) =   3242.197 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 94.12% complete, ETA 00:16:29
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
40.426 ±(99.9%) 1.361 ms/op
# Warmup Iteration   2: 43.753 ±(99.9%) 0.185 ms/op
# Warmup Iteration   3: 43.746 ±(99.9%) 0.067 ms/op
# Warmup Iteration   4: 43.784 ±(99.9%) 0.086 ms/op
# Warmup Iteration   5: 43.402 ±(99.9%) 0.069 ms/op
Iteration   1: 43.270 ±(99.9%) 0.077 ms/op
                 executeQuery·p0.00:   42.795 ms/op
                 executeQuery·p0.50:   43.188 ms/op
                 executeQuery·p0.90:   43.647 ms/op
                 executeQuery·p0.95:   43.778 ms/op
                 executeQuery·p0.99:   44.700 ms/op
                 executeQuery·p0.999:  46.465 ms/op
                 executeQuery·p0.9999: 46.465 ms/op
                 executeQuery·p1.00:   46.465 ms/op

Iteration   2: 43.225 ±(99.9%) 0.068 ms/op
                 executeQuery·p0.00:   42.729 ms/op
                 executeQuery·p0.50:   43.188 ms/op
                 executeQuery·p0.90:   43.581 ms/op
                 executeQuery·p0.95:   43.880 ms/op
                 executeQuery·p0.99:   44.647 ms/op
                 executeQuery·p0.999:  45.285 ms/op
                 executeQuery·p0.9999: 45.285 ms/op
                 executeQuery·p1.00:   45.285 ms/op

Iteration   3: 43.198 ±(99.9%) 0.068 ms/op
                 executeQuery·p0.00:   42.729 ms/op
                 executeQuery·p0.50:   43.123 ms/op
                 executeQuery·p0.90:   43.713 ms/op
                 executeQuery·p0.95:   43.844 ms/op
                 executeQuery·p0.99:   44.551 ms/op
                 executeQuery·p0.999:  44.630 ms/op
                 executeQuery·p0.9999: 44.630 ms/op
                 executeQuery·p1.00:   44.630 ms/op

Iteration   4: 43.105 ±(99.9%) 0.064 ms/op
                 executeQuery·p0.00:   42.795 ms/op
                 executeQuery·p0.50:   43.057 ms/op
                 executeQuery·p0.90:   43.385 ms/op
                 executeQuery·p0.95:   43.647 ms/op
                 executeQuery·p0.99:   44.021 ms/op
                 executeQuery·p0.999:  46.137 ms/op
                 executeQuery·p0.9999: 46.137 ms/op
                 executeQuery·p1.00:   46.137 ms/op

Iteration   5: 43.269 ±(99.9%) 0.098 ms/op
                 executeQuery·p0.00:   42.729 ms/op
                 executeQuery·p0.50:   43.123 ms/op
                 executeQuery·p0.90:   43.647 ms/op
                 executeQuery·p0.95:   43.945 ms/op
                 executeQuery·p0.99:   44.740 ms/op
                 executeQuery·p0.999:  47.710 ms/op
                 executeQuery·p0.9999: 47.710 ms/op
                 executeQuery·p1.00:   47.710 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery":
  N = 1142
  mean =     43.213 ±(99.9%) 0.034 ms/op

  Histogram, ms/op:
    [42.000, 42.500) = 0 
    [42.500, 43.000) = 284 
    [43.000, 43.500) = 691 
    [43.500, 44.000) = 139 
    [44.000, 44.500) = 19 
    [44.500, 45.000) = 4 
    [45.000, 45.500) = 2 
    [45.500, 46.000) = 0 
    [46.000, 46.500) = 2 
    [46.500, 47.000) = 0 
    [47.000, 47.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     42.729 ms/op
     p(50.0000) =     43.123 ms/op
     p(90.0000) =     43.647 ms/op
     p(95.0000) =     43.778 ms/op
     p(99.0000) =     44.368 ms/op
     p(99.9000) =     47.532 ms/op
     p(99.9900) =     47.710 ms/op
     p(99.9990) =     47.710 ms/op
     p(99.9999) =     47.710 ms/op
    p(100.0000) =     47.710 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 95.10% complete, ETA 00:13:41
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
389.506 ±(99.9%) 29.262 ms/op
# Warmup Iteration   2: 411.818 ±(99.9%) 12.703 ms/op
# Warmup Iteration   3: 420.829 ±(99.9%) 2.283 ms/op
# Warmup Iteration   4: 420.566 ±(99.9%) 1.507 ms/op
# Warmup Iteration   5: 423.100 ±(99.9%) 1.495 ms/op
Iteration   1: 422.685 ±(99.9%) 5.203 ms/op
                 executeQuery·p0.00:   418.382 ms/op
                 executeQuery·p0.50:   420.741 ms/op
                 executeQuery·p0.90:   426.246 ms/op
                 executeQuery·p0.95:   446.038 ms/op
                 executeQuery·p0.99:   452.461 ms/op
                 executeQuery·p0.999:  452.461 ms/op
                 executeQuery·p0.9999: 452.461 ms/op
                 executeQuery·p1.00:   452.461 ms/op

Iteration   2: 421.615 ±(99.9%) 4.586 ms/op
                 executeQuery·p0.00:   418.906 ms/op
                 executeQuery·p0.50:   420.217 ms/op
                 executeQuery·p0.90:   422.052 ms/op
                 executeQuery·p0.95:   442.499 ms/op
                 executeQuery·p0.99:   449.315 ms/op
                 executeQuery·p0.999:  449.315 ms/op
                 executeQuery·p0.9999: 449.315 ms/op
                 executeQuery·p1.00:   449.315 ms/op

Iteration   3: 420.676 ±(99.9%) 6.570 ms/op
                 executeQuery·p0.00:   416.285 ms/op
                 executeQuery·p0.50:   418.906 ms/op
                 executeQuery·p0.90:   421.003 ms/op
                 executeQuery·p0.95:   450.494 ms/op
                 executeQuery·p0.99:   460.325 ms/op
                 executeQuery·p0.999:  460.325 ms/op
                 executeQuery·p0.9999: 460.325 ms/op
                 executeQuery·p1.00:   460.325 ms/op

Iteration   4: 419.299 ±(99.9%) 0.764 ms/op
                 executeQuery·p0.00:   417.333 ms/op
                 executeQuery·p0.50:   419.430 ms/op
                 executeQuery·p0.90:   420.479 ms/op
                 executeQuery·p0.95:   421.659 ms/op
                 executeQuery·p0.99:   422.052 ms/op
                 executeQuery·p0.999:  422.052 ms/op
                 executeQuery·p0.9999: 422.052 ms/op
                 executeQuery·p1.00:   422.052 ms/op

Iteration   5: 417.770 ±(99.9%) 0.739 ms/op
                 executeQuery·p0.00:   416.285 ms/op
                 executeQuery·p0.50:   417.333 ms/op
                 executeQuery·p0.90:   419.430 ms/op
                 executeQuery·p0.95:   419.824 ms/op
                 executeQuery·p0.99:   419.955 ms/op
                 executeQuery·p0.999:  419.955 ms/op
                 executeQuery·p0.9999: 419.955 ms/op
                 executeQuery·p1.00:   419.955 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery":
  N = 120
  mean =    420.409 ±(99.9%) 1.775 ms/op

  Histogram, ms/op:
    [410.000, 415.000) = 0 
    [415.000, 420.000) = 85 
    [420.000, 425.000) = 30 
    [425.000, 430.000) = 2 
    [430.000, 435.000) = 0 
    [435.000, 440.000) = 0 
    [440.000, 445.000) = 0 
    [445.000, 450.000) = 1 
    [450.000, 455.000) = 1 
    [455.000, 460.000) = 0 
    [460.000, 465.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    416.285 ms/op
     p(50.0000) =    419.430 ms/op
     p(90.0000) =    422.052 ms/op
     p(95.0000) =    424.621 ms/op
     p(99.0000) =    458.673 ms/op
     p(99.9000) =    460.325 ms/op
     p(99.9900) =    460.325 ms/op
     p(99.9990) =    460.325 ms/op
     p(99.9999) =    460.325 ms/op
    p(100.0000) =    460.325 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 96.08% complete, ETA 00:10:54
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3864.352 ±(99.9%) 2083.436 ms/op
# Warmup Iteration   2: 4127.195 ±(99.9%) 2011.465 ms/op
# Warmup Iteration   3: 4176.129 ±(99.9%) 818.201 ms/op
# Warmup Iteration   4: 4178.925 ±(99.9%) 318.577 ms/op
# Warmup Iteration   5: 4157.953 ±(99.9%) 116.886 ms/op
Iteration   1: 4153.759 ±(99.9%) 176.715 ms/op
                 executeQuery·p0.00:   4148.167 ms/op
                 executeQuery·p0.50:   4148.167 ms/op
                 executeQuery·p0.90:   4164.944 ms/op
                 executeQuery·p0.95:   4164.944 ms/op
                 executeQuery·p0.99:   4164.944 ms/op
                 executeQuery·p0.999:  4164.944 ms/op
                 executeQuery·p0.9999: 4164.944 ms/op
                 executeQuery·p1.00:   4164.944 ms/op

Iteration   2: 4152.361 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   4148.167 ms/op
                 executeQuery·p0.50:   4152.361 ms/op
                 executeQuery·p0.90:   4156.555 ms/op
                 executeQuery·p0.95:   4156.555 ms/op
                 executeQuery·p0.99:   4156.555 ms/op
                 executeQuery·p0.999:  4156.555 ms/op
                 executeQuery·p0.9999: 4156.555 ms/op
                 executeQuery·p1.00:   4156.555 ms/op

Iteration   3: 4153.759 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   4148.167 ms/op
                 executeQuery·p0.50:   4152.361 ms/op
                 executeQuery·p0.90:   4160.750 ms/op
                 executeQuery·p0.95:   4160.750 ms/op
                 executeQuery·p0.99:   4160.750 ms/op
                 executeQuery·p0.999:  4160.750 ms/op
                 executeQuery·p0.9999: 4160.750 ms/op
                 executeQuery·p1.00:   4160.750 ms/op

Iteration   4: 4155.157 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   4148.167 ms/op
                 executeQuery·p0.50:   4156.555 ms/op
                 executeQuery·p0.90:   4160.750 ms/op
                 executeQuery·p0.95:   4160.750 ms/op
                 executeQuery·p0.99:   4160.750 ms/op
                 executeQuery·p0.999:  4160.750 ms/op
                 executeQuery·p0.9999: 4160.750 ms/op
                 executeQuery·p1.00:   4160.750 ms/op

Iteration   5: 4148.167 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   4143.972 ms/op
                 executeQuery·p0.50:   4148.167 ms/op
                 executeQuery·p0.90:   4152.361 ms/op
                 executeQuery·p0.95:   4152.361 ms/op
                 executeQuery·p0.99:   4152.361 ms/op
                 executeQuery·p0.999:  4152.361 ms/op
                 executeQuery·p0.9999: 4152.361 ms/op
                 executeQuery·p1.00:   4152.361 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery":
  N = 15
  mean =   4152.641 ±(99.9%) 6.446 ms/op

  Histogram, ms/op:
    [4140.000, 4142.500) = 0 
    [4142.500, 4145.000) = 1 
    [4145.000, 4147.500) = 0 
    [4147.500, 4150.000) = 6 
    [4150.000, 4152.500) = 3 
    [4152.500, 4155.000) = 0 
    [4155.000, 4157.500) = 2 
    [4157.500, 4160.000) = 0 
    [4160.000, 4162.500) = 2 
    [4162.500, 4165.000) = 1 
    [4165.000, 4167.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4143.972 ms/op
     p(50.0000) =   4152.361 ms/op
     p(90.0000) =   4162.427 ms/op
     p(95.0000) =   4164.944 ms/op
     p(99.0000) =   4164.944 ms/op
     p(99.9000) =   4164.944 ms/op
     p(99.9900) =   4164.944 ms/op
     p(99.9990) =   4164.944 ms/op
     p(99.9999) =   4164.944 ms/op
    p(100.0000) =   4164.944 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 97.06% complete, ETA 00:08:09
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
35.253 ±(99.9%) 1.182 ms/op
# Warmup Iteration   2: 36.802 ±(99.9%) 0.241 ms/op
# Warmup Iteration   3: 36.965 ±(99.9%) 0.166 ms/op
# Warmup Iteration   4: 36.144 ±(99.9%) 0.186 ms/op
# Warmup Iteration   5: 35.894 ±(99.9%) 0.092 ms/op
Iteration   1: 35.998 ±(99.9%) 0.124 ms/op
                 executeQuery·p0.00:   35.258 ms/op
                 executeQuery·p0.50:   35.783 ms/op
                 executeQuery·p0.90:   37.093 ms/op
                 executeQuery·p0.95:   37.375 ms/op
                 executeQuery·p0.99:   37.880 ms/op
                 executeQuery·p0.999:  38.273 ms/op
                 executeQuery·p0.9999: 38.273 ms/op
                 executeQuery·p1.00:   38.273 ms/op

Iteration   2: 36.124 ±(99.9%) 0.151 ms/op
                 executeQuery·p0.00:   35.127 ms/op
                 executeQuery·p0.50:   35.783 ms/op
                 executeQuery·p0.90:   37.356 ms/op
                 executeQuery·p0.95:   37.637 ms/op
                 executeQuery·p0.99:   38.720 ms/op
                 executeQuery·p0.999:  39.125 ms/op
                 executeQuery·p0.9999: 39.125 ms/op
                 executeQuery·p1.00:   39.125 ms/op

Iteration   3: 36.515 ±(99.9%) 0.175 ms/op
                 executeQuery·p0.00:   35.258 ms/op
                 executeQuery·p0.50:   36.274 ms/op
                 executeQuery·p0.90:   37.742 ms/op
                 executeQuery·p0.95:   38.076 ms/op
                 executeQuery·p0.99:   38.535 ms/op
                 executeQuery·p0.999:  38.601 ms/op
                 executeQuery·p0.9999: 38.601 ms/op
                 executeQuery·p1.00:   38.601 ms/op

Iteration   4: 36.136 ±(99.9%) 0.145 ms/op
                 executeQuery·p0.00:   35.258 ms/op
                 executeQuery·p0.50:   35.848 ms/op
                 executeQuery·p0.90:   37.356 ms/op
                 executeQuery·p0.95:   37.641 ms/op
                 executeQuery·p0.99:   38.195 ms/op
                 executeQuery·p0.999:  38.470 ms/op
                 executeQuery·p0.9999: 38.470 ms/op
                 executeQuery·p1.00:   38.470 ms/op

Iteration   5: 36.003 ±(99.9%) 0.127 ms/op
                 executeQuery·p0.00:   35.127 ms/op
                 executeQuery·p0.50:   35.750 ms/op
                 executeQuery·p0.90:   37.028 ms/op
                 executeQuery·p0.95:   37.290 ms/op
                 executeQuery·p0.99:   37.962 ms/op
                 executeQuery·p0.999:  38.470 ms/op
                 executeQuery·p0.9999: 38.470 ms/op
                 executeQuery·p1.00:   38.470 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 1362
  mean =     36.154 ±(99.9%) 0.067 ms/op

  Histogram, ms/op:
    [35.000, 35.500) = 130 
    [35.500, 36.000) = 673 
    [36.000, 36.500) = 195 
    [36.500, 37.000) = 112 
    [37.000, 37.500) = 160 
    [37.500, 38.000) = 66 
    [38.000, 38.500) = 20 
    [38.500, 39.000) = 4 
    [39.000, 39.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =     35.127 ms/op
     p(50.0000) =     35.848 ms/op
     p(90.0000) =     37.356 ms/op
     p(95.0000) =     37.618 ms/op
     p(99.0000) =     38.273 ms/op
     p(99.9000) =     39.101 ms/op
     p(99.9900) =     39.125 ms/op
     p(99.9990) =     39.125 ms/op
     p(99.9999) =     39.125 ms/op
    p(100.0000) =     39.125 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 98.04% complete, ETA 00:05:25
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
324.889 ±(99.9%) 17.398 ms/op
# Warmup Iteration   2: 358.782 ±(99.9%) 4.360 ms/op
# Warmup Iteration   3: 353.442 ±(99.9%) 5.683 ms/op
# Warmup Iteration   4: 351.851 ±(99.9%) 3.039 ms/op
# Warmup Iteration   5: 350.441 ±(99.9%) 2.615 ms/op
Iteration   1: 349.501 ±(99.9%) 1.419 ms/op
                 executeQuery·p0.00:   347.079 ms/op
                 executeQuery·p0.50:   349.176 ms/op
                 executeQuery·p0.90:   353.894 ms/op
                 executeQuery·p0.95:   355.205 ms/op
                 executeQuery·p0.99:   356.516 ms/op
                 executeQuery·p0.999:  356.516 ms/op
                 executeQuery·p0.9999: 356.516 ms/op
                 executeQuery·p1.00:   356.516 ms/op

Iteration   2: 350.224 ±(99.9%) 3.149 ms/op
                 executeQuery·p0.00:   346.554 ms/op
                 executeQuery·p0.50:   348.127 ms/op
                 executeQuery·p0.90:   359.662 ms/op
                 executeQuery·p0.95:   362.807 ms/op
                 executeQuery·p0.99:   363.332 ms/op
                 executeQuery·p0.999:  363.332 ms/op
                 executeQuery·p0.9999: 363.332 ms/op
                 executeQuery·p1.00:   363.332 ms/op

Iteration   3: 350.640 ±(99.9%) 2.354 ms/op
                 executeQuery·p0.00:   346.554 ms/op
                 executeQuery·p0.50:   349.176 ms/op
                 executeQuery·p0.90:   355.992 ms/op
                 executeQuery·p0.95:   358.875 ms/op
                 executeQuery·p0.99:   361.234 ms/op
                 executeQuery·p0.999:  361.234 ms/op
                 executeQuery·p0.9999: 361.234 ms/op
                 executeQuery·p1.00:   361.234 ms/op

Iteration   4: 350.966 ±(99.9%) 2.881 ms/op
                 executeQuery·p0.00:   346.554 ms/op
                 executeQuery·p0.50:   349.700 ms/op
                 executeQuery·p0.90:   360.186 ms/op
                 executeQuery·p0.95:   360.710 ms/op
                 executeQuery·p0.99:   361.234 ms/op
                 executeQuery·p0.999:  361.234 ms/op
                 executeQuery·p0.9999: 361.234 ms/op
                 executeQuery·p1.00:   361.234 ms/op

Iteration   5: 349.519 ±(99.9%) 2.558 ms/op
                 executeQuery·p0.00:   346.030 ms/op
                 executeQuery·p0.50:   348.652 ms/op
                 executeQuery·p0.90:   358.089 ms/op
                 executeQuery·p0.95:   359.662 ms/op
                 executeQuery·p0.99:   361.234 ms/op
                 executeQuery·p0.999:  361.234 ms/op
                 executeQuery·p0.9999: 361.234 ms/op
                 executeQuery·p1.00:   361.234 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 145
  mean =    350.170 ±(99.9%) 1.038 ms/op

  Histogram, ms/op:
    [340.000, 342.500) = 0 
    [342.500, 345.000) = 0 
    [345.000, 347.500) = 19 
    [347.500, 350.000) = 83 
    [350.000, 352.500) = 15 
    [352.500, 355.000) = 13 
    [355.000, 357.500) = 4 
    [357.500, 360.000) = 3 
    [360.000, 362.500) = 7 
    [362.500, 365.000) = 1 
    [365.000, 367.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    346.030 ms/op
     p(50.0000) =    348.652 ms/op
     p(90.0000) =    356.201 ms/op
     p(95.0000) =    360.186 ms/op
     p(99.0000) =    362.849 ms/op
     p(99.9000) =    363.332 ms/op
     p(99.9900) =    363.332 ms/op
     p(99.9990) =    363.332 ms/op
     p(99.9999) =    363.332 ms/op
    p(100.0000) =    363.332 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 99.02% complete, ETA 00:02:42
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3303.014 ±(99.9%) 1031.004 ms/op
# Warmup Iteration   2: 3534.400 ±(99.9%) 751.038 ms/op
# Warmup Iteration   3: 3482.670 ±(99.9%) 385.141 ms/op
# Warmup Iteration   4: 3474.282 ±(99.9%) 233.772 ms/op
# Warmup Iteration   5: 3570.751 ±(99.9%) 2126.551 ms/op
Iteration   1: 3531.604 ±(99.9%) 306.079 ms/op
                 executeQuery·p0.00:   3514.827 ms/op
                 executeQuery·p0.50:   3531.604 ms/op
                 executeQuery·p0.90:   3548.381 ms/op
                 executeQuery·p0.95:   3548.381 ms/op
                 executeQuery·p0.99:   3548.381 ms/op
                 executeQuery·p0.999:  3548.381 ms/op
                 executeQuery·p0.9999: 3548.381 ms/op
                 executeQuery·p1.00:   3548.381 ms/op

Iteration   2: 3514.827 ±(99.9%) 132.536 ms/op
                 executeQuery·p0.00:   3506.438 ms/op
                 executeQuery·p0.50:   3519.021 ms/op
                 executeQuery·p0.90:   3519.021 ms/op
                 executeQuery·p0.95:   3519.021 ms/op
                 executeQuery·p0.99:   3519.021 ms/op
                 executeQuery·p0.999:  3519.021 ms/op
                 executeQuery·p0.9999: 3519.021 ms/op
                 executeQuery·p1.00:   3519.021 ms/op

Iteration   3: 3513.429 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   3506.438 ms/op
                 executeQuery·p0.50:   3514.827 ms/op
                 executeQuery·p0.90:   3519.021 ms/op
                 executeQuery·p0.95:   3519.021 ms/op
                 executeQuery·p0.99:   3519.021 ms/op
                 executeQuery·p0.999:  3519.021 ms/op
                 executeQuery·p0.9999: 3519.021 ms/op
                 executeQuery·p1.00:   3519.021 ms/op

Iteration   4: 3542.789 ±(99.9%) 584.429 ms/op
                 executeQuery·p0.00:   3514.827 ms/op
                 executeQuery·p0.50:   3535.798 ms/op
                 executeQuery·p0.90:   3577.741 ms/op
                 executeQuery·p0.95:   3577.741 ms/op
                 executeQuery·p0.99:   3577.741 ms/op
                 executeQuery·p0.999:  3577.741 ms/op
                 executeQuery·p0.9999: 3577.741 ms/op
                 executeQuery·p1.00:   3577.741 ms/op

Iteration   5: 3616.888 ±(99.9%) 421.438 ms/op
                 executeQuery·p0.00:   3594.519 ms/op
                 executeQuery·p0.50:   3615.490 ms/op
                 executeQuery·p0.90:   3640.656 ms/op
                 executeQuery·p0.95:   3640.656 ms/op
                 executeQuery·p0.99:   3640.656 ms/op
                 executeQuery·p0.999:  3640.656 ms/op
                 executeQuery·p0.9999: 3640.656 ms/op
                 executeQuery·p1.00:   3640.656 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 15
  mean =   3543.907 ±(99.9%) 45.742 ms/op

  Histogram, ms/op:
    [3500.000, 3512.500) = 2 
    [3512.500, 3525.000) = 6 
    [3525.000, 3537.500) = 2 
    [3537.500, 3550.000) = 1 
    [3550.000, 3562.500) = 0 
    [3562.500, 3575.000) = 0 
    [3575.000, 3587.500) = 1 
    [3587.500, 3600.000) = 1 
    [3600.000, 3612.500) = 0 
    [3612.500, 3625.000) = 1 
    [3625.000, 3637.500) = 0 
    [3637.500, 3650.000) = 1 
    [3650.000, 3662.500) = 0 
    [3662.500, 3675.000) = 0 
    [3675.000, 3687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3506.438 ms/op
     p(50.0000) =   3519.021 ms/op
     p(90.0000) =   3625.556 ms/op
     p(95.0000) =   3640.656 ms/op
     p(99.0000) =   3640.656 ms/op
     p(99.9000) =   3640.656 ms/op
     p(99.9900) =   3640.656 ms/op
     p(99.9990) =   3640.656 ms/op
     p(99.9999) =   3640.656 ms/op
    p(100.0000) =   3640.656 ms/op


# Run complete. Total time: 04:34:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                                                            (tableFilePath)                     (tpchInstance)    Mode   Cnt      Score       Error  Units
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   155    323.022 ±     0.564  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          320.864              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          322.437              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          323.695              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          328.729              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          334.726              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          335.020              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          335.020              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          335.020              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample   120    426.687 ±     0.930  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          419.955              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          426.246              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          430.965              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          434.530              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          435.573              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          435.683              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          435.683              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          435.683              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample    87    582.140 ±    16.107  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          531.628              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          613.417              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          627.048              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          633.759              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          650.117              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          650.117              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          650.117              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          650.117              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample    10    776.890 ±   122.049  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          706.740              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          721.945              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          907.543              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          912.261              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          912.261              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          912.261              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          912.261              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          912.261              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample     5   2514.066 ±   229.432  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2466.251              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2499.805              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2617.246              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2617.246              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2617.246              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2617.246              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2617.246              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2617.246              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    20   3046.533 ±    15.644  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3028.287              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3040.870              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3078.200              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3082.604              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3082.813              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3082.813              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3082.813              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3082.813              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    15   4090.845 ±    27.046  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4060.086              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4089.446              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4128.034              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4148.167              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4148.167              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4148.167              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4148.167              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4148.167              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    10   5846.021 ±   657.270  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         5335.155              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6157.238              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6215.120              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6215.959              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6215.959              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6215.959              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6215.959              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6215.959              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample     5   8079.907 ±  2139.767  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         7323.255              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         8413.774              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         8547.992              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         8547.992              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         8547.992              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         8547.992              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         8547.992              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         8547.992              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample     5  24239.722 ±  2076.565  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        23655.875              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        24326.963              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25031.606              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25031.606              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25031.606              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25031.606              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25031.606              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25031.606              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    10   6061.608 ±    20.882  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6048.186              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6056.575              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6095.163              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6098.518              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6098.518              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6098.518              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6098.518              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6098.518              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample     5  10036.131 ±   179.266  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         9999.221              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10015.998              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10116.661              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10116.661              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10116.661              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10116.661              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10116.661              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10116.661              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample     5  12418.495 ±  1961.318  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12062.818              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12079.596              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13186.892              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13186.892              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13186.892              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13186.892              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13186.892              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13186.892              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample     5  18364.341 ± 13092.895  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        14663.287              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18018.730              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        23890.756              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        23890.756              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        23890.756              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        23890.756              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        23890.756              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        23890.756              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample     5  47955.994 ±  6435.972  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        46103.790              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        48519.709              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49861.886              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49861.886              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49861.886              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49861.886              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49861.886              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49861.886              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   150    336.932 ±     1.705  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          328.729              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          335.544              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          345.453              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          354.655              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          357.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          357.564              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          357.564              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          357.564              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample   116    434.052 ±     1.225  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          427.819              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          433.586              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          438.829              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          440.795              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          447.999              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          448.266              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          448.266              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          448.266              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample    84    602.095 ±    14.402  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          553.648              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          619.708              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          648.020              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          650.117              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          653.263              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          653.263              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          653.263              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          653.263              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample    10    866.648 ±   101.842  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          728.760              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          888.668              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          916.036              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          916.455              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          916.455              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          916.455              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          916.455              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          916.455              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample     5   2832.833 ±  2421.528  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2415.919              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2587.886              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         3934.257              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         3934.257              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         3934.257              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         3934.257              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         3934.257              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         3934.257              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    20   3196.269 ±    13.805  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3179.282              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3189.768              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3228.775              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3229.614              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3229.614              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3229.614              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3229.614              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3229.614              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    15   4301.678 ±   281.143  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         3749.708              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4370.465              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4588.569              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4638.900              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4638.900              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4638.900              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4638.900              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4638.900              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    10   6605.190 ±  1232.929  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         5293.212              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6673.138              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7703.259              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7734.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7734.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7734.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7734.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7734.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample     5  12448.694 ± 12944.095  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9512.681              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        11005.854              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        16106.127              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        16106.127              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        16106.127              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        16106.127              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        16106.127              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        16106.127              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample     5  29266.176 ± 17961.377  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        23957.864              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        27481.080              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        34326.184              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        34326.184              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        34326.184              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        34326.184              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        34326.184              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        34326.184              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    10   6855.170 ±   322.442  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6744.441              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6782.190              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7392.041              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7449.084              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7449.084              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7449.084              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7449.084              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7449.084              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample    10   9977.410 ±   224.031  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         9865.003              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         9898.557              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10227.391              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10234.102              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10234.102              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10234.102              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10234.102              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10234.102              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample     5  12596.334 ±    95.822  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12566.135              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12599.689              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12633.244              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12633.244              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12633.244              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12633.244              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12633.244              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12633.244              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample     5  20984.942 ± 15660.513  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18152.948              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        19562.234              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28152.168              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28152.168              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28152.168              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28152.168              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28152.168              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28152.168              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample     5  51888.574 ±  6594.326  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        50197.430              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        51606.716              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        54156.853              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        54156.853              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        54156.853              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        54156.853              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        54156.853              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        54156.853              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample  1091     45.531 ±     0.067  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           43.516              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           45.613              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           46.203              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           46.465              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           47.519              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           52.110              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           52.363              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           52.363              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample  1069     46.524 ±     0.084  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           44.761              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           46.465              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           47.448              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           47.710              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           49.106              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           53.209              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           53.346              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           53.346              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample  1030     48.260 ±     0.162  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           46.596              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           47.186              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           50.397              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           50.594              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           50.856              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           52.343              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           52.363              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           52.363              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample   115    445.704 ±     2.740  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          429.916              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          445.645              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          457.389              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          458.228              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          463.135              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          463.471              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          463.471              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          463.471              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample   113    445.668 ±     3.822  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          430.440              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          443.548              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          462.841              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          470.444              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          480.258              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          480.772              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          480.772              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          480.772              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample   105    487.698 ±     5.522  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          469.238              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          479.199              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          513.278              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          514.536              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          549.307              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          550.502              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          550.502              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          550.502              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    60    883.687 ±     6.364  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          856.687              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          882.901              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          904.921              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          907.962              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          915.407              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          915.407              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          915.407              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          915.407              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    60    888.546 ±     7.822  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          856.687              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          884.998              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          911.947              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          918.553              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          925.893              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          925.893              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          925.893              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          925.893              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    50   1025.004 ±    10.887  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          987.759              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1017.119              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1056.755              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1061.421              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1068.499              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1068.499              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1068.499              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1068.499              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample  1122     44.329 ±     0.071  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           42.861              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           44.302              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           45.154              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           45.285              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           46.057              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           50.324              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           50.332              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           50.332              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample   877     56.784 ±     0.191  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           54.460              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           56.164              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           59.834              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           60.424              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           61.028              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           72.483              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           72.483              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           72.483              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample   491    101.733 ±     0.340  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           98.959              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          102.892              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          103.940              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          104.071              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          105.644              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          113.246              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          113.246              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          113.246              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample   115    442.805 ±     1.975  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          430.440              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          443.023              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          450.573              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          451.936              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          467.833              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          469.762              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          469.762              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          469.762              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample    88    588.144 ±     7.650  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          568.328              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          575.144              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          612.473              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          617.139              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          676.332              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          676.332              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          676.332              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          676.332              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample    55    986.786 ±     7.775  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          956.301              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          991.953              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1002.439              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1003.487              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1024.459              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1024.459              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1024.459              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1024.459              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    60    878.584 ±     6.099  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          850.395              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          877.658              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          891.290              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          909.535              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          929.038              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          929.038              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          929.038              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          929.038              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    45   1164.805 ±    20.863  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1128.268              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1149.239              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1204.604              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1266.680              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1329.594              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1329.594              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1329.594              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1329.594              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    30   1959.579 ±    15.544  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1944.060              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1950.351              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1986.632              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         2025.325              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         2065.695              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         2065.695              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         2065.695              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         2065.695              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    20   3199.205 ±   106.264  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3045.065              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3181.380              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3394.870              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3421.294              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3422.552              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3422.552              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3422.552              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3422.552              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5  40372.693 ±  4742.412  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        38520.488              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        40265.318              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41741.713              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41741.713              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41741.713              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                           /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41741.713              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41741.713              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41741.713              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    15   3496.651 ±   124.074  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3300.917              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3498.050              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3661.627              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3699.376              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3699.376              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3699.376              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3699.376              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3699.376              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5  38399.692 ±  3182.776  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        37111.202              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        38319.161              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39191.577              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39191.577              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39191.577              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                              /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39191.577              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                             /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39191.577              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39191.577              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    35   1496.588 ±    29.722  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1442.841              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1468.006              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1562.378              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1569.509              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1581.253              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1581.253              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1581.253              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1581.253              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5  20582.289 ±    70.769  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        20568.867              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        20568.867              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        20602.421              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        20602.421              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        20602.421              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        20602.421              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        20602.421              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        20602.421              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    45   1198.872 ±     2.963  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1180.697              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1199.571              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1203.765              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1207.960              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1210.057              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1210.057              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1210.057              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1210.057              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5  12180.259 ±  1410.213  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        11995.709              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12012.487              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12834.570              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12834.570              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12834.570              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12834.570              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12834.570              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12834.570              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    30   1740.357 ±    28.075  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1673.527              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1766.851              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1780.272              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1782.579              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1782.579              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1782.579              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1782.579              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1782.579              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5  18495.203 ±   108.102  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18454.938              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18488.492              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18522.046              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18522.046              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18522.046              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18522.046              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18522.046              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18522.046              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    65    768.332 ±     0.741  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          763.363              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          768.606              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          770.703              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          770.703              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          773.849              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                           /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          773.849              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          773.849              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          773.849              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10   8799.650 ±    17.936  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         8791.261              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         8791.261              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         8823.138              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         8824.816              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         8824.816              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                      /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         8824.816              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                     /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         8824.816              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         8824.816              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   214    235.249 ±     1.025  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          230.687              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          234.619              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          238.027              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          238.551              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          260.977              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          261.620              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          261.620              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          261.620              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20   3176.346 ±    76.818  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2998.927              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3202.351              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3273.654              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3323.566              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3326.083              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3326.083              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3326.083              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3326.083              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   290    172.702 ±     0.756  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          166.986              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          172.753              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          174.326              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          174.850              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          197.913              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          205.783              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          205.783              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          205.783              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    25   2316.430 ±    60.282  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2206.204              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2298.479              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2468.767              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2505.258              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2516.582              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2516.582              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2516.582              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2516.582              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   267    186.761 ±     0.783  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          179.569              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          186.909              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          189.792              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          190.474              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          208.111              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          216.793              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          216.793              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          216.793              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    24   2434.444 ±    64.027  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2323.644              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2422.211              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2548.040              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2640.314              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2667.577              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2667.577              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2667.577              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2667.577              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   247    204.753 ±     0.307  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          202.113              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          205.259              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          206.307              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          206.569              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          207.492              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          211.550              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          211.550              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          211.550              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    25   2026.604 ±    11.061  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1998.586              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2027.946              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2045.562              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2048.288              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2048.918              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2048.918              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2048.918              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2048.918              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  17562.390 ±  6114.197  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        15938.355              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        17347.641              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20199.768              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20199.768              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20199.768              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20199.768              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20199.768              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20199.768              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   180    281.787 ±     1.160  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          276.824              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          281.018              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          285.108              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          289.931              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          306.630              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          313.000              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          313.000              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          313.000              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20   2732.589 ±    69.039  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2675.966              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2705.326              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2824.444              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3014.446              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3024.093              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3024.093              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3024.093              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3024.093              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  27313.308 ±   474.734  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27111.981              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27380.417              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   160    316.198 ±     0.619  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          311.951              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          315.097              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          320.288              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          322.437              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          323.690              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          324.010              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          324.010              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          324.010              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20   3165.441 ±    11.998  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3133.145              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3166.700              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3186.413              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3187.671              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3187.671              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3187.671              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3187.671              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3187.671              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  32333.051 ±   434.333  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        32145.146              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        32346.472              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        32447.136              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        32447.136              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        32447.136              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        32447.136              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        32447.136              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        32447.136              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   175    286.887 ±     0.987  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          283.640              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          285.213              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          294.650              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          296.747              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          297.796              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          297.796              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          297.796              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          297.796              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20   2614.100 ±    13.205  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2587.886              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2608.857              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2633.603              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2649.961              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2650.800              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2650.800              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2650.800              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2650.800              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  28272.964 ±    70.769  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        28252.832              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        28286.386              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        28286.386              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        28286.386              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        28286.386              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        28286.386              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        28286.386              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        28286.386              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   565     88.407 ±     0.380  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           84.017              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           87.949              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           91.934              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           92.629              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           93.630              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          101.974              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          101.974              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          101.974              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    40   1370.122 ±    26.354  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1298.137              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1364.197              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1435.081              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1453.221              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1468.006              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1468.006              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1468.006              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1468.006              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  21595.632 ± 12606.908  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        19964.887              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20132.659              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27447.525              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27447.525              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27447.525              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27447.525              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27447.525              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27447.525              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   524     94.491 ±     0.144  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           92.799              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           94.372              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           95.420              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           95.945              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           98.959              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          101.450              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          101.450              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          101.450              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    40   1348.207 ±    11.723  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1317.011              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1347.420              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1380.765              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1390.412              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1407.189              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1407.189              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1407.189              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1407.189              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  18897.856 ±  5748.876  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        16810.770              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        19864.224              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20132.659              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20132.659              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20132.659              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20132.659              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20132.659              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20132.659              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   557     88.414 ±     0.602  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           83.886              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           87.425              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           95.578              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          100.663              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          101.843              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          105.644              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          105.644              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          105.644              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    39   1408.964 ±    13.304  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1375.732              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1402.995              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1451.229              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1468.006              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1476.395              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1476.395              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1476.395              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1476.395              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  18018.730 ±   398.240  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        17884.512              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        17985.176              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18152.948              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18152.948              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18152.948              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18152.948              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18152.948              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18152.948              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1761     28.289 ±     0.030  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           27.558              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           28.312              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           28.541              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           28.901              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           29.823              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           31.529              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           33.227              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           33.227              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   189    268.390 ±     0.870  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          264.765              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          266.863              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          273.678              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          275.775              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          280.075              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          281.018              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          281.018              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          281.018              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    20   2613.890 ±    15.703  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2587.886              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2606.760              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2645.767              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2646.606              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2646.606              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2646.606              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2646.606              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2646.606              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery                                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1506     33.124 ±     0.046  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           31.949              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           32.899              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           33.751              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           33.882              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           34.537              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           39.784              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           41.878              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           41.878              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery                                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   160    315.225 ±     1.177  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          310.903              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          314.049              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          319.291              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          320.314              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          340.001              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          355.992              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          355.992              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          355.992              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery                                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    20   3104.624 ±    13.556  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3087.008              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3099.591              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3132.726              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3137.130              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3137.339              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3137.339              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3137.339              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3137.339              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1455     33.817 ±     0.046  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           32.735              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           33.751              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           34.537              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           34.865              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           35.418              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           39.237              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           39.715              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           39.715              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   160    317.882 ±     1.958  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          311.427              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          315.621              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          325.059              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          326.081              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          362.792              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          370.147              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          370.147              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          370.147              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    20   3123.288 ±    27.745  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3095.396              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3116.368              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3141.534              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3237.164              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3242.197              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3242.197              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3242.197              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3242.197              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery                                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1142     43.213 ±     0.034  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           42.729              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           43.123              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           43.647              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           43.778              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           44.368              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           47.532              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                             N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           47.710              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           47.710              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery                                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   120    420.409 ±     1.775  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          416.285              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          419.430              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          422.052              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          424.621              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          458.673              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          460.325              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                             N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          460.325              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          460.325              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery                                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15   4152.641 ±     6.446  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         4143.972              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         4152.361              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         4162.427              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         4164.944              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         4164.944              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         4164.944              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                             N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         4164.944              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         4164.944              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1362     36.154 ±     0.067  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           35.127              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           35.848              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           37.356              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           37.618              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           38.273              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           39.101              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           39.125              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           39.125              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   145    350.170 ±     1.038  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          346.030              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          348.652              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          356.201              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          360.186              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          362.849              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          363.332              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          363.332              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          363.332              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15   3543.907 ±    45.742  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3506.438              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3519.021              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3625.556              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3640.656              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3640.656              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3640.656              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3640.656              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3640.656              ms/op

Benchmark result is saved to jmh-result.csv

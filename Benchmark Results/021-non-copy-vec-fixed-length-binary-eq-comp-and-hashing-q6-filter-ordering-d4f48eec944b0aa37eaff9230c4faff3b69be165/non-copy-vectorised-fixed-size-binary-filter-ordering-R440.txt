# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 0.00% complete, ETA 02:50:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

420.392 ±(99.9%) 82.884 ms/op
# Warmup Iteration   2: 399.424 ±(99.9%) 4.300 ms/op
# Warmup Iteration   3: 399.843 ±(99.9%) 6.415 ms/op
# Warmup Iteration   4: 398.836 ±(99.9%) 1.260 ms/op
# Warmup Iteration   5: 398.648 ±(99.9%) 2.525 ms/op
Iteration   1: 397.430 ±(99.9%) 1.025 ms/op
                 executeQuery·p0.00:   392.167 ms/op
                 executeQuery·p0.50:   397.672 ms/op
                 executeQuery·p0.90:   398.983 ms/op
                 executeQuery·p0.95:   399.324 ms/op
                 executeQuery·p0.99:   399.507 ms/op
                 executeQuery·p0.999:  399.507 ms/op
                 executeQuery·p0.9999: 399.507 ms/op
                 executeQuery·p1.00:   399.507 ms/op

Iteration   2: 398.035 ±(99.9%) 0.584 ms/op
                 executeQuery·p0.00:   396.362 ms/op
                 executeQuery·p0.50:   398.197 ms/op
                 executeQuery·p0.90:   398.983 ms/op
                 executeQuery·p0.95:   399.324 ms/op
                 executeQuery·p0.99:   399.507 ms/op
                 executeQuery·p0.999:  399.507 ms/op
                 executeQuery·p0.9999: 399.507 ms/op
                 executeQuery·p1.00:   399.507 ms/op

Iteration   3: 399.738 ±(99.9%) 6.039 ms/op
                 executeQuery·p0.00:   396.362 ms/op
                 executeQuery·p0.50:   397.935 ms/op
                 executeQuery·p0.90:   399.507 ms/op
                 executeQuery·p0.95:   426.666 ms/op
                 executeQuery·p0.99:   438.305 ms/op
                 executeQuery·p0.999:  438.305 ms/op
                 executeQuery·p0.9999: 438.305 ms/op
                 executeQuery·p1.00:   438.305 ms/op

Iteration   4: 397.773 ±(99.9%) 0.657 ms/op
                 executeQuery·p0.00:   394.789 ms/op
                 executeQuery·p0.50:   397.935 ms/op
                 executeQuery·p0.90:   398.459 ms/op
                 executeQuery·p0.95:   398.459 ms/op
                 executeQuery·p0.99:   398.459 ms/op
                 executeQuery·p0.999:  398.459 ms/op
                 executeQuery·p0.9999: 398.459 ms/op
                 executeQuery·p1.00:   398.459 ms/op

Iteration   5: 397.955 ±(99.9%) 0.466 ms/op
                 executeQuery·p0.00:   395.837 ms/op
                 executeQuery·p0.50:   397.935 ms/op
                 executeQuery·p0.90:   398.459 ms/op
                 executeQuery·p0.95:   398.800 ms/op
                 executeQuery·p0.99:   398.983 ms/op
                 executeQuery·p0.999:  398.983 ms/op
                 executeQuery·p0.9999: 398.983 ms/op
                 executeQuery·p1.00:   398.983 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 129
  mean =    398.174 ±(99.9%) 1.092 ms/op

  Histogram, ms/op:
    [390.000, 395.000) = 2 
    [395.000, 400.000) = 126 
    [400.000, 405.000) = 0 
    [405.000, 410.000) = 0 
    [410.000, 415.000) = 0 
    [415.000, 420.000) = 0 
    [420.000, 425.000) = 0 
    [425.000, 430.000) = 0 
    [430.000, 435.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    392.167 ms/op
     p(50.0000) =    397.935 ms/op
     p(90.0000) =    398.983 ms/op
     p(95.0000) =    398.983 ms/op
     p(99.0000) =    426.666 ms/op
     p(99.9000) =    438.305 ms/op
     p(99.9900) =    438.305 ms/op
     p(99.9990) =    438.305 ms/op
     p(99.9999) =    438.305 ms/op
    p(100.0000) =    438.305 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 0.98% complete, ETA 02:54:57
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

567.280 ±(99.9%) 80.864 ms/op
# Warmup Iteration   2: 540.734 ±(99.9%) 2.724 ms/op
# Warmup Iteration   3: 540.706 ±(99.9%) 3.721 ms/op
# Warmup Iteration   4: 540.955 ±(99.9%) 1.293 ms/op
# Warmup Iteration   5: 541.783 ±(99.9%) 7.824 ms/op
Iteration   1: 540.624 ±(99.9%) 2.522 ms/op
                 executeQuery·p0.00:   536.871 ms/op
                 executeQuery·p0.50:   540.017 ms/op
                 executeQuery·p0.90:   544.211 ms/op
                 executeQuery·p0.95:   550.502 ms/op
                 executeQuery·p0.99:   550.502 ms/op
                 executeQuery·p0.999:  550.502 ms/op
                 executeQuery·p0.9999: 550.502 ms/op
                 executeQuery·p1.00:   550.502 ms/op

Iteration   2: 539.934 ±(99.9%) 2.892 ms/op
                 executeQuery·p0.00:   535.298 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   543.162 ms/op
                 executeQuery·p0.95:   551.551 ms/op
                 executeQuery·p0.99:   551.551 ms/op
                 executeQuery·p0.999:  551.551 ms/op
                 executeQuery·p0.9999: 551.551 ms/op
                 executeQuery·p1.00:   551.551 ms/op

Iteration   3: 537.395 ±(99.9%) 1.793 ms/op
                 executeQuery·p0.00:   534.774 ms/op
                 executeQuery·p0.50:   536.871 ms/op
                 executeQuery·p0.90:   540.017 ms/op
                 executeQuery·p0.95:   541.065 ms/op
                 executeQuery·p0.99:   541.065 ms/op
                 executeQuery·p0.999:  541.065 ms/op
                 executeQuery·p0.9999: 541.065 ms/op
                 executeQuery·p1.00:   541.065 ms/op

Iteration   4: 539.134 ±(99.9%) 1.970 ms/op
                 executeQuery·p0.00:   534.774 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   541.065 ms/op
                 executeQuery·p0.95:   546.308 ms/op
                 executeQuery·p0.99:   546.308 ms/op
                 executeQuery·p0.999:  546.308 ms/op
                 executeQuery·p0.9999: 546.308 ms/op
                 executeQuery·p1.00:   546.308 ms/op

Iteration   5: 539.134 ±(99.9%) 2.938 ms/op
                 executeQuery·p0.00:   534.774 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   540.017 ms/op
                 executeQuery·p0.95:   550.502 ms/op
                 executeQuery·p0.99:   550.502 ms/op
                 executeQuery·p0.999:  550.502 ms/op
                 executeQuery·p0.9999: 550.502 ms/op
                 executeQuery·p1.00:   550.502 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 95
  mean =    539.244 ±(99.9%) 1.009 ms/op

  Histogram, ms/op:
    [530.000, 532.500) = 0 
    [532.500, 535.000) = 6 
    [535.000, 537.500) = 13 
    [537.500, 540.000) = 40 
    [540.000, 542.500) = 30 
    [542.500, 545.000) = 2 
    [545.000, 547.500) = 1 
    [547.500, 550.000) = 0 
    [550.000, 552.500) = 3 
    [552.500, 555.000) = 0 
    [555.000, 557.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    534.774 ms/op
     p(50.0000) =    538.968 ms/op
     p(90.0000) =    541.065 ms/op
     p(95.0000) =    544.630 ms/op
     p(99.0000) =    551.551 ms/op
     p(99.9000) =    551.551 ms/op
     p(99.9900) =    551.551 ms/op
     p(99.9990) =    551.551 ms/op
     p(99.9999) =    551.551 ms/op
    p(100.0000) =    551.551 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 1.96% complete, ETA 02:54:02
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

740.444 ±(99.9%) 52.801 ms/op
# Warmup Iteration   2: 724.716 ±(99.9%) 7.858 ms/op
# Warmup Iteration   3: 726.139 ±(99.9%) 7.169 ms/op
# Warmup Iteration   4: 728.536 ±(99.9%) 5.253 ms/op
# Warmup Iteration   5: 724.117 ±(99.9%) 7.108 ms/op
Iteration   1: 731.681 ±(99.9%) 31.899 ms/op
                 executeQuery·p0.00:   718.275 ms/op
                 executeQuery·p0.50:   724.566 ms/op
                 executeQuery·p0.90:   779.616 ms/op
                 executeQuery·p0.95:   829.424 ms/op
                 executeQuery·p0.99:   829.424 ms/op
                 executeQuery·p0.999:  829.424 ms/op
                 executeQuery·p0.9999: 829.424 ms/op
                 executeQuery·p1.00:   829.424 ms/op

Iteration   2: 725.090 ±(99.9%) 4.169 ms/op
                 executeQuery·p0.00:   720.372 ms/op
                 executeQuery·p0.50:   725.090 ms/op
                 executeQuery·p0.90:   731.906 ms/op
                 executeQuery·p0.95:   732.955 ms/op
                 executeQuery·p0.99:   732.955 ms/op
                 executeQuery·p0.999:  732.955 ms/op
                 executeQuery·p0.9999: 732.955 ms/op
                 executeQuery·p1.00:   732.955 ms/op

Iteration   3: 723.967 ±(99.9%) 5.918 ms/op
                 executeQuery·p0.00:   710.935 ms/op
                 executeQuery·p0.50:   723.517 ms/op
                 executeQuery·p0.90:   731.906 ms/op
                 executeQuery·p0.95:   731.906 ms/op
                 executeQuery·p0.99:   731.906 ms/op
                 executeQuery·p0.999:  731.906 ms/op
                 executeQuery·p0.9999: 731.906 ms/op
                 executeQuery·p1.00:   731.906 ms/op

Iteration   4: 719.997 ±(99.9%) 7.122 ms/op
                 executeQuery·p0.00:   708.837 ms/op
                 executeQuery·p0.50:   722.469 ms/op
                 executeQuery·p0.90:   727.187 ms/op
                 executeQuery·p0.95:   727.712 ms/op
                 executeQuery·p0.99:   727.712 ms/op
                 executeQuery·p0.999:  727.712 ms/op
                 executeQuery·p0.9999: 727.712 ms/op
                 executeQuery·p1.00:   727.712 ms/op

Iteration   5: 728.985 ±(99.9%) 9.589 ms/op
                 executeQuery·p0.00:   718.275 ms/op
                 executeQuery·p0.50:   726.663 ms/op
                 executeQuery·p0.90:   742.392 ms/op
                 executeQuery·p0.95:   743.440 ms/op
                 executeQuery·p0.99:   743.440 ms/op
                 executeQuery·p0.999:  743.440 ms/op
                 executeQuery·p0.9999: 743.440 ms/op
                 executeQuery·p1.00:   743.440 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 70
  mean =    725.944 ±(99.9%) 5.755 ms/op

  Histogram, ms/op:
    [700.000, 712.500) = 2 
    [712.500, 725.000) = 37 
    [725.000, 737.500) = 26 
    [737.500, 750.000) = 4 
    [750.000, 762.500) = 0 
    [762.500, 775.000) = 0 
    [775.000, 787.500) = 0 
    [787.500, 800.000) = 0 
    [800.000, 812.500) = 0 
    [812.500, 825.000) = 0 
    [825.000, 837.500) = 1 
    [837.500, 850.000) = 0 
    [850.000, 862.500) = 0 
    [862.500, 875.000) = 0 
    [875.000, 887.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    708.837 ms/op
     p(50.0000) =    724.566 ms/op
     p(90.0000) =    732.850 ms/op
     p(95.0000) =    739.613 ms/op
     p(99.0000) =    829.424 ms/op
     p(99.9000) =    829.424 ms/op
     p(99.9900) =    829.424 ms/op
     p(99.9990) =    829.424 ms/op
     p(99.9999) =    829.424 ms/op
    p(100.0000) =    829.424 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 2.94% complete, ETA 02:52:52
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3024.093 ms/op
# Warmup Iteration   2: 2537.554 ms/op
# Warmup Iteration   3: 2478.834 ms/op
# Warmup Iteration   4: 2680.160 ms/op
# Warmup Iteration   5: 2411.725 ms/op
Iteration   1: 2449.474 ms/op
                 executeQuery·p0.00:   2449.474 ms/op
                 executeQuery·p0.50:   2449.474 ms/op
                 executeQuery·p0.90:   2449.474 ms/op
                 executeQuery·p0.95:   2449.474 ms/op
                 executeQuery·p0.99:   2449.474 ms/op
                 executeQuery·p0.999:  2449.474 ms/op
                 executeQuery·p0.9999: 2449.474 ms/op
                 executeQuery·p1.00:   2449.474 ms/op

Iteration   2: 2432.696 ms/op
                 executeQuery·p0.00:   2432.696 ms/op
                 executeQuery·p0.50:   2432.696 ms/op
                 executeQuery·p0.90:   2432.696 ms/op
                 executeQuery·p0.95:   2432.696 ms/op
                 executeQuery·p0.99:   2432.696 ms/op
                 executeQuery·p0.999:  2432.696 ms/op
                 executeQuery·p0.9999: 2432.696 ms/op
                 executeQuery·p1.00:   2432.696 ms/op

Iteration   3: 2449.474 ms/op
                 executeQuery·p0.00:   2449.474 ms/op
                 executeQuery·p0.50:   2449.474 ms/op
                 executeQuery·p0.90:   2449.474 ms/op
                 executeQuery·p0.95:   2449.474 ms/op
                 executeQuery·p0.99:   2449.474 ms/op
                 executeQuery·p0.999:  2449.474 ms/op
                 executeQuery·p0.9999: 2449.474 ms/op
                 executeQuery·p1.00:   2449.474 ms/op

Iteration   4: 2369.782 ms/op
                 executeQuery·p0.00:   2369.782 ms/op
                 executeQuery·p0.50:   2369.782 ms/op
                 executeQuery·p0.90:   2369.782 ms/op
                 executeQuery·p0.95:   2369.782 ms/op
                 executeQuery·p0.99:   2369.782 ms/op
                 executeQuery·p0.999:  2369.782 ms/op
                 executeQuery·p0.9999: 2369.782 ms/op
                 executeQuery·p1.00:   2369.782 ms/op

Iteration   5: 2445.279 ms/op
                 executeQuery·p0.00:   2445.279 ms/op
                 executeQuery·p0.50:   2445.279 ms/op
                 executeQuery·p0.90:   2445.279 ms/op
                 executeQuery·p0.95:   2445.279 ms/op
                 executeQuery·p0.99:   2445.279 ms/op
                 executeQuery·p0.999:  2445.279 ms/op
                 executeQuery·p0.9999: 2445.279 ms/op
                 executeQuery·p1.00:   2445.279 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =   2429.341 ±(99.9%) 130.911 ms/op

  Histogram, ms/op:
    [2360.000, 2365.000) = 0 
    [2365.000, 2370.000) = 1 
    [2370.000, 2375.000) = 0 
    [2375.000, 2380.000) = 0 
    [2380.000, 2385.000) = 0 
    [2385.000, 2390.000) = 0 
    [2390.000, 2395.000) = 0 
    [2395.000, 2400.000) = 0 
    [2400.000, 2405.000) = 0 
    [2405.000, 2410.000) = 0 
    [2410.000, 2415.000) = 0 
    [2415.000, 2420.000) = 0 
    [2420.000, 2425.000) = 0 
    [2425.000, 2430.000) = 0 
    [2430.000, 2435.000) = 1 
    [2435.000, 2440.000) = 0 
    [2440.000, 2445.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2369.782 ms/op
     p(50.0000) =   2445.279 ms/op
     p(90.0000) =   2449.474 ms/op
     p(95.0000) =   2449.474 ms/op
     p(99.0000) =   2449.474 ms/op
     p(99.9000) =   2449.474 ms/op
     p(99.9900) =   2449.474 ms/op
     p(99.9990) =   2449.474 ms/op
     p(99.9999) =   2449.474 ms/op
    p(100.0000) =   2449.474 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 3.92% complete, ETA 03:01:25
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5695.865 ms/op
# Warmup Iteration   2: 4999.610 ms/op
# Warmup Iteration   3: 4982.833 ms/op
# Warmup Iteration   4: 5142.217 ms/op
# Warmup Iteration   5: 4915.724 ms/op
Iteration   1: 5133.828 ms/op
                 executeQuery·p0.00:   5133.828 ms/op
                 executeQuery·p0.50:   5133.828 ms/op
                 executeQuery·p0.90:   5133.828 ms/op
                 executeQuery·p0.95:   5133.828 ms/op
                 executeQuery·p0.99:   5133.828 ms/op
                 executeQuery·p0.999:  5133.828 ms/op
                 executeQuery·p0.9999: 5133.828 ms/op
                 executeQuery·p1.00:   5133.828 ms/op

Iteration   2: 5142.217 ms/op
                 executeQuery·p0.00:   5142.217 ms/op
                 executeQuery·p0.50:   5142.217 ms/op
                 executeQuery·p0.90:   5142.217 ms/op
                 executeQuery·p0.95:   5142.217 ms/op
                 executeQuery·p0.99:   5142.217 ms/op
                 executeQuery·p0.999:  5142.217 ms/op
                 executeQuery·p0.9999: 5142.217 ms/op
                 executeQuery·p1.00:   5142.217 ms/op

Iteration   3: 4890.558 ms/op
                 executeQuery·p0.00:   4890.558 ms/op
                 executeQuery·p0.50:   4890.558 ms/op
                 executeQuery·p0.90:   4890.558 ms/op
                 executeQuery·p0.95:   4890.558 ms/op
                 executeQuery·p0.99:   4890.558 ms/op
                 executeQuery·p0.999:  4890.558 ms/op
                 executeQuery·p0.9999: 4890.558 ms/op
                 executeQuery·p1.00:   4890.558 ms/op

Iteration   4: 5158.994 ms/op
                 executeQuery·p0.00:   5158.994 ms/op
                 executeQuery·p0.50:   5158.994 ms/op
                 executeQuery·p0.90:   5158.994 ms/op
                 executeQuery·p0.95:   5158.994 ms/op
                 executeQuery·p0.99:   5158.994 ms/op
                 executeQuery·p0.999:  5158.994 ms/op
                 executeQuery·p0.9999: 5158.994 ms/op
                 executeQuery·p1.00:   5158.994 ms/op

Iteration   5: 5066.719 ms/op
                 executeQuery·p0.00:   5066.719 ms/op
                 executeQuery·p0.50:   5066.719 ms/op
                 executeQuery·p0.90:   5066.719 ms/op
                 executeQuery·p0.95:   5066.719 ms/op
                 executeQuery·p0.99:   5066.719 ms/op
                 executeQuery·p0.999:  5066.719 ms/op
                 executeQuery·p0.9999: 5066.719 ms/op
                 executeQuery·p1.00:   5066.719 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =   5078.463 ±(99.9%) 426.454 ms/op

  Histogram, ms/op:
    [4800.000, 4825.000) = 0 
    [4825.000, 4850.000) = 0 
    [4850.000, 4875.000) = 0 
    [4875.000, 4900.000) = 1 
    [4900.000, 4925.000) = 0 
    [4925.000, 4950.000) = 0 
    [4950.000, 4975.000) = 0 
    [4975.000, 5000.000) = 0 
    [5000.000, 5025.000) = 0 
    [5025.000, 5050.000) = 0 
    [5050.000, 5075.000) = 1 
    [5075.000, 5100.000) = 0 
    [5100.000, 5125.000) = 0 
    [5125.000, 5150.000) = 2 
    [5150.000, 5175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4890.558 ms/op
     p(50.0000) =   5133.828 ms/op
     p(90.0000) =   5158.994 ms/op
     p(95.0000) =   5158.994 ms/op
     p(99.0000) =   5158.994 ms/op
     p(99.9000) =   5158.994 ms/op
     p(99.9900) =   5158.994 ms/op
     p(99.9990) =   5158.994 ms/op
     p(99.9999) =   5158.994 ms/op
    p(100.0000) =   5158.994 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 4.90% complete, ETA 04:53:59
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6197.084 ms/op
# Warmup Iteration   2: 3794.447 ±(99.9%) 1990.003 ms/op
# Warmup Iteration   3: 3930.063 ±(99.9%) 729.952 ms/op
# Warmup Iteration   4: 3911.888 ±(99.9%) 44.179 ms/op
# Warmup Iteration   5: 3911.888 ±(99.9%) 44.179 ms/op
Iteration   1: 3909.091 ±(99.9%) 132.536 ms/op
                 executeQuery·p0.00:   3900.703 ms/op
                 executeQuery·p0.50:   3913.286 ms/op
                 executeQuery·p0.90:   3913.286 ms/op
                 executeQuery·p0.95:   3913.286 ms/op
                 executeQuery·p0.99:   3913.286 ms/op
                 executeQuery·p0.999:  3913.286 ms/op
                 executeQuery·p0.9999: 3913.286 ms/op
                 executeQuery·p1.00:   3913.286 ms/op

Iteration   2: 3900.703 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   3900.703 ms/op
                 executeQuery·p0.50:   3900.703 ms/op
                 executeQuery·p0.90:   3900.703 ms/op
                 executeQuery·p0.95:   3900.703 ms/op
                 executeQuery·p0.99:   3900.703 ms/op
                 executeQuery·p0.999:  3900.703 ms/op
                 executeQuery·p0.9999: 3900.703 ms/op
                 executeQuery·p1.00:   3900.703 ms/op

Iteration   3: 3903.499 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3900.703 ms/op
                 executeQuery·p0.50:   3904.897 ms/op
                 executeQuery·p0.90:   3904.897 ms/op
                 executeQuery·p0.95:   3904.897 ms/op
                 executeQuery·p0.99:   3904.897 ms/op
                 executeQuery·p0.999:  3904.897 ms/op
                 executeQuery·p0.9999: 3904.897 ms/op
                 executeQuery·p1.00:   3904.897 ms/op

Iteration   4: 3927.267 ±(99.9%) 706.859 ms/op
                 executeQuery·p0.00:   3904.897 ms/op
                 executeQuery·p0.50:   3904.897 ms/op
                 executeQuery·p0.90:   3972.006 ms/op
                 executeQuery·p0.95:   3972.006 ms/op
                 executeQuery·p0.99:   3972.006 ms/op
                 executeQuery·p0.999:  3972.006 ms/op
                 executeQuery·p0.9999: 3972.006 ms/op
                 executeQuery·p1.00:   3972.006 ms/op

Iteration   5: 3907.693 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3904.897 ms/op
                 executeQuery·p0.50:   3909.091 ms/op
                 executeQuery·p0.90:   3909.091 ms/op
                 executeQuery·p0.95:   3909.091 ms/op
                 executeQuery·p0.99:   3909.091 ms/op
                 executeQuery·p0.999:  3909.091 ms/op
                 executeQuery·p0.9999: 3909.091 ms/op
                 executeQuery·p1.00:   3909.091 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   3909.651 ±(99.9%) 19.014 ms/op

  Histogram, ms/op:
    [3900.000, 3905.000) = 10 
    [3905.000, 3910.000) = 2 
    [3910.000, 3915.000) = 2 
    [3915.000, 3920.000) = 0 
    [3920.000, 3925.000) = 0 
    [3925.000, 3930.000) = 0 
    [3930.000, 3935.000) = 0 
    [3935.000, 3940.000) = 0 
    [3940.000, 3945.000) = 0 
    [3945.000, 3950.000) = 0 
    [3950.000, 3955.000) = 0 
    [3955.000, 3960.000) = 0 
    [3960.000, 3965.000) = 0 
    [3965.000, 3970.000) = 0 
    [3970.000, 3975.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3900.703 ms/op
     p(50.0000) =   3904.897 ms/op
     p(90.0000) =   3936.774 ms/op
     p(95.0000) =   3972.006 ms/op
     p(99.0000) =   3972.006 ms/op
     p(99.9000) =   3972.006 ms/op
     p(99.9900) =   3972.006 ms/op
     p(99.9990) =   3972.006 ms/op
     p(99.9999) =   3972.006 ms/op
    p(100.0000) =   3972.006 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 5.88% complete, ETA 04:34:24
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_400202784 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_400202784() {
        this(4);
    }
    public KeyValueMap_400202784(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_400202784 aggregation_state_map = new KeyValueMap_400202784();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6870.270 ms/op
# Warmup Iteration   2: 5058.331 ms/op
# Warmup Iteration   3: 5121.245 ms/op
# Warmup Iteration   4: 5158.994 ms/op
# Warmup Iteration   5: 5142.217 ms/op
Iteration   1: 5121.245 ms/op
                 executeQuery·p0.00:   5117.051 ms/op
                 executeQuery·p0.50:   5121.245 ms/op
                 executeQuery·p0.90:   5125.439 ms/op
                 executeQuery·p0.95:   5125.439 ms/op
                 executeQuery·p0.99:   5125.439 ms/op
                 executeQuery·p0.999:  5125.439 ms/op
                 executeQuery·p0.9999: 5125.439 ms/op
                 executeQuery·p1.00:   5125.439 ms/op

Iteration   2: 5158.994 ms/op
                 executeQuery·p0.00:   5125.439 ms/op
                 executeQuery·p0.50:   5158.994 ms/op
                 executeQuery·p0.90:   5192.548 ms/op
                 executeQuery·p0.95:   5192.548 ms/op
                 executeQuery·p0.99:   5192.548 ms/op
                 executeQuery·p0.999:  5192.548 ms/op
                 executeQuery·p0.9999: 5192.548 ms/op
                 executeQuery·p1.00:   5192.548 ms/op

Iteration   3: 5117.051 ms/op
                 executeQuery·p0.00:   5117.051 ms/op
                 executeQuery·p0.50:   5117.051 ms/op
                 executeQuery·p0.90:   5117.051 ms/op
                 executeQuery·p0.95:   5117.051 ms/op
                 executeQuery·p0.99:   5117.051 ms/op
                 executeQuery·p0.999:  5117.051 ms/op
                 executeQuery·p0.9999: 5117.051 ms/op
                 executeQuery·p1.00:   5117.051 ms/op

Iteration   4: 5146.411 ms/op
                 executeQuery·p0.00:   5108.662 ms/op
                 executeQuery·p0.50:   5146.411 ms/op
                 executeQuery·p0.90:   5184.160 ms/op
                 executeQuery·p0.95:   5184.160 ms/op
                 executeQuery·p0.99:   5184.160 ms/op
                 executeQuery·p0.999:  5184.160 ms/op
                 executeQuery·p0.9999: 5184.160 ms/op
                 executeQuery·p1.00:   5184.160 ms/op

Iteration   5: 5108.662 ms/op
                 executeQuery·p0.00:   5108.662 ms/op
                 executeQuery·p0.50:   5108.662 ms/op
                 executeQuery·p0.90:   5108.662 ms/op
                 executeQuery·p0.95:   5108.662 ms/op
                 executeQuery·p0.99:   5108.662 ms/op
                 executeQuery·p0.999:  5108.662 ms/op
                 executeQuery·p0.9999: 5108.662 ms/op
                 executeQuery·p1.00:   5108.662 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   5130.473 ±(99.9%) 47.151 ms/op

  Histogram, ms/op:
    [5100.000, 5110.000) = 3 
    [5110.000, 5120.000) = 3 
    [5120.000, 5130.000) = 2 
    [5130.000, 5140.000) = 0 
    [5140.000, 5150.000) = 0 
    [5150.000, 5160.000) = 0 
    [5160.000, 5170.000) = 0 
    [5170.000, 5180.000) = 0 
    [5180.000, 5190.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   5108.662 ms/op
     p(50.0000) =   5117.051 ms/op
     p(90.0000) =   5191.709 ms/op
     p(95.0000) =   5192.548 ms/op
     p(99.0000) =   5192.548 ms/op
     p(99.9000) =   5192.548 ms/op
     p(99.9900) =   5192.548 ms/op
     p(99.9990) =   5192.548 ms/op
     p(99.9999) =   5192.548 ms/op
    p(100.0000) =   5192.548 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 6.86% complete, ETA 04:17:12
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7742.685 ms/op
# Warmup Iteration   2: 7054.819 ms/op
# Warmup Iteration   3: 7369.392 ms/op
# Warmup Iteration   4: 7205.814 ms/op
# Warmup Iteration   5: 7193.231 ms/op
Iteration   1: 7172.260 ms/op
                 executeQuery·p0.00:   7163.871 ms/op
                 executeQuery·p0.50:   7172.260 ms/op
                 executeQuery·p0.90:   7180.648 ms/op
                 executeQuery·p0.95:   7180.648 ms/op
                 executeQuery·p0.99:   7180.648 ms/op
                 executeQuery·p0.999:  7180.648 ms/op
                 executeQuery·p0.9999: 7180.648 ms/op
                 executeQuery·p1.00:   7180.648 ms/op

Iteration   2: 7486.833 ms/op
                 executeQuery·p0.00:   7407.141 ms/op
                 executeQuery·p0.50:   7486.833 ms/op
                 executeQuery·p0.90:   7566.524 ms/op
                 executeQuery·p0.95:   7566.524 ms/op
                 executeQuery·p0.99:   7566.524 ms/op
                 executeQuery·p0.999:  7566.524 ms/op
                 executeQuery·p0.9999: 7566.524 ms/op
                 executeQuery·p1.00:   7566.524 ms/op

Iteration   3: 7214.203 ms/op
                 executeQuery·p0.00:   7180.648 ms/op
                 executeQuery·p0.50:   7214.203 ms/op
                 executeQuery·p0.90:   7247.757 ms/op
                 executeQuery·p0.95:   7247.757 ms/op
                 executeQuery·p0.99:   7247.757 ms/op
                 executeQuery·p0.999:  7247.757 ms/op
                 executeQuery·p0.9999: 7247.757 ms/op
                 executeQuery·p1.00:   7247.757 ms/op

Iteration   4: 7230.980 ms/op
                 executeQuery·p0.00:   7180.648 ms/op
                 executeQuery·p0.50:   7230.980 ms/op
                 executeQuery·p0.90:   7281.312 ms/op
                 executeQuery·p0.95:   7281.312 ms/op
                 executeQuery·p0.99:   7281.312 ms/op
                 executeQuery·p0.999:  7281.312 ms/op
                 executeQuery·p0.9999: 7281.312 ms/op
                 executeQuery·p1.00:   7281.312 ms/op

Iteration   5: 7218.397 ms/op
                 executeQuery·p0.00:   7189.037 ms/op
                 executeQuery·p0.50:   7218.397 ms/op
                 executeQuery·p0.90:   7247.757 ms/op
                 executeQuery·p0.95:   7247.757 ms/op
                 executeQuery·p0.99:   7247.757 ms/op
                 executeQuery·p0.999:  7247.757 ms/op
                 executeQuery·p0.9999: 7247.757 ms/op
                 executeQuery·p1.00:   7247.757 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   7264.535 ±(99.9%) 194.739 ms/op

  Histogram, ms/op:
    [7100.000, 7150.000) = 0 
    [7150.000, 7200.000) = 5 
    [7200.000, 7250.000) = 2 
    [7250.000, 7300.000) = 1 
    [7300.000, 7350.000) = 0 
    [7350.000, 7400.000) = 0 
    [7400.000, 7450.000) = 1 
    [7450.000, 7500.000) = 0 
    [7500.000, 7550.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7163.871 ms/op
     p(50.0000) =   7218.397 ms/op
     p(90.0000) =   7550.586 ms/op
     p(95.0000) =   7566.524 ms/op
     p(99.0000) =   7566.524 ms/op
     p(99.9000) =   7566.524 ms/op
     p(99.9900) =   7566.524 ms/op
     p(99.9990) =   7566.524 ms/op
     p(99.9999) =   7566.524 ms/op
    p(100.0000) =   7566.524 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 7.84% complete, ETA 04:11:42
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

27648.852 ms/op
# Warmup Iteration   2: 25098.715 ms/op
# Warmup Iteration   3: 24125.637 ms/op
# Warmup Iteration   4: 24394.072 ms/op
# Warmup Iteration   5: 24024.973 ms/op
Iteration   1: 24226.300 ms/op
                 executeQuery·p0.00:   24226.300 ms/op
                 executeQuery·p0.50:   24226.300 ms/op
                 executeQuery·p0.90:   24226.300 ms/op
                 executeQuery·p0.95:   24226.300 ms/op
                 executeQuery·p0.99:   24226.300 ms/op
                 executeQuery·p0.999:  24226.300 ms/op
                 executeQuery·p0.9999: 24226.300 ms/op
                 executeQuery·p1.00:   24226.300 ms/op

Iteration   2: 23588.766 ms/op
                 executeQuery·p0.00:   23588.766 ms/op
                 executeQuery·p0.50:   23588.766 ms/op
                 executeQuery·p0.90:   23588.766 ms/op
                 executeQuery·p0.95:   23588.766 ms/op
                 executeQuery·p0.99:   23588.766 ms/op
                 executeQuery·p0.999:  23588.766 ms/op
                 executeQuery·p0.9999: 23588.766 ms/op
                 executeQuery·p1.00:   23588.766 ms/op

Iteration   3: 24125.637 ms/op
                 executeQuery·p0.00:   24125.637 ms/op
                 executeQuery·p0.50:   24125.637 ms/op
                 executeQuery·p0.90:   24125.637 ms/op
                 executeQuery·p0.95:   24125.637 ms/op
                 executeQuery·p0.99:   24125.637 ms/op
                 executeQuery·p0.999:  24125.637 ms/op
                 executeQuery·p0.9999: 24125.637 ms/op
                 executeQuery·p1.00:   24125.637 ms/op

Iteration   4: 24293.409 ms/op
                 executeQuery·p0.00:   24293.409 ms/op
                 executeQuery·p0.50:   24293.409 ms/op
                 executeQuery·p0.90:   24293.409 ms/op
                 executeQuery·p0.95:   24293.409 ms/op
                 executeQuery·p0.99:   24293.409 ms/op
                 executeQuery·p0.999:  24293.409 ms/op
                 executeQuery·p0.9999: 24293.409 ms/op
                 executeQuery·p1.00:   24293.409 ms/op

Iteration   5: 23790.092 ms/op
                 executeQuery·p0.00:   23790.092 ms/op
                 executeQuery·p0.50:   23790.092 ms/op
                 executeQuery·p0.90:   23790.092 ms/op
                 executeQuery·p0.95:   23790.092 ms/op
                 executeQuery·p0.99:   23790.092 ms/op
                 executeQuery·p0.999:  23790.092 ms/op
                 executeQuery·p0.9999: 23790.092 ms/op
                 executeQuery·p1.00:   23790.092 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  24004.841 ±(99.9%) 1165.007 ms/op

  Histogram, ms/op:
    [23500.000, 23550.000) = 0 
    [23550.000, 23600.000) = 1 
    [23600.000, 23650.000) = 0 
    [23650.000, 23700.000) = 0 
    [23700.000, 23750.000) = 0 
    [23750.000, 23800.000) = 1 
    [23800.000, 23850.000) = 0 
    [23850.000, 23900.000) = 0 
    [23900.000, 23950.000) = 0 
    [23950.000, 24000.000) = 0 
    [24000.000, 24050.000) = 0 
    [24050.000, 24100.000) = 0 
    [24100.000, 24150.000) = 1 
    [24150.000, 24200.000) = 0 
    [24200.000, 24250.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  23588.766 ms/op
     p(50.0000) =  24125.637 ms/op
     p(90.0000) =  24293.409 ms/op
     p(95.0000) =  24293.409 ms/op
     p(99.0000) =  24293.409 ms/op
     p(99.9000) =  24293.409 ms/op
     p(99.9900) =  24293.409 ms/op
     p(99.9990) =  24293.409 ms/op
     p(99.9999) =  24293.409 ms/op
    p(100.0000) =  24293.409 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 8.82% complete, ETA 04:42:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

51271.172 ms/op
# Warmup Iteration   2: 49727.668 ms/op
# Warmup Iteration   3: 49190.797 ms/op
# Warmup Iteration   4: 48318.382 ms/op
# Warmup Iteration   5: 49526.342 ms/op
Iteration   1: 49996.104 ms/op
                 executeQuery·p0.00:   49996.104 ms/op
                 executeQuery·p0.50:   49996.104 ms/op
                 executeQuery·p0.90:   49996.104 ms/op
                 executeQuery·p0.95:   49996.104 ms/op
                 executeQuery·p0.99:   49996.104 ms/op
                 executeQuery·p0.999:  49996.104 ms/op
                 executeQuery·p0.9999: 49996.104 ms/op
                 executeQuery·p1.00:   49996.104 ms/op

Iteration   2: 48586.818 ms/op
                 executeQuery·p0.00:   48586.818 ms/op
                 executeQuery·p0.50:   48586.818 ms/op
                 executeQuery·p0.90:   48586.818 ms/op
                 executeQuery·p0.95:   48586.818 ms/op
                 executeQuery·p0.99:   48586.818 ms/op
                 executeQuery·p0.999:  48586.818 ms/op
                 executeQuery·p0.9999: 48586.818 ms/op
                 executeQuery·p1.00:   48586.818 ms/op

Iteration   3: 51875.152 ms/op
                 executeQuery·p0.00:   51875.152 ms/op
                 executeQuery·p0.50:   51875.152 ms/op
                 executeQuery·p0.90:   51875.152 ms/op
                 executeQuery·p0.95:   51875.152 ms/op
                 executeQuery·p0.99:   51875.152 ms/op
                 executeQuery·p0.999:  51875.152 ms/op
                 executeQuery·p0.9999: 51875.152 ms/op
                 executeQuery·p1.00:   51875.152 ms/op

Iteration   4: 47445.967 ms/op
                 executeQuery·p0.00:   47445.967 ms/op
                 executeQuery·p0.50:   47445.967 ms/op
                 executeQuery·p0.90:   47445.967 ms/op
                 executeQuery·p0.95:   47445.967 ms/op
                 executeQuery·p0.99:   47445.967 ms/op
                 executeQuery·p0.999:  47445.967 ms/op
                 executeQuery·p0.9999: 47445.967 ms/op
                 executeQuery·p1.00:   47445.967 ms/op

Iteration   5: 49190.797 ms/op
                 executeQuery·p0.00:   49190.797 ms/op
                 executeQuery·p0.50:   49190.797 ms/op
                 executeQuery·p0.90:   49190.797 ms/op
                 executeQuery·p0.95:   49190.797 ms/op
                 executeQuery·p0.99:   49190.797 ms/op
                 executeQuery·p0.999:  49190.797 ms/op
                 executeQuery·p0.9999: 49190.797 ms/op
                 executeQuery·p1.00:   49190.797 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  49418.967 ±(99.9%) 6386.498 ms/op

  Histogram, ms/op:
    [47000.000, 47500.000) = 1 
    [47500.000, 48000.000) = 0 
    [48000.000, 48500.000) = 0 
    [48500.000, 49000.000) = 1 
    [49000.000, 49500.000) = 1 
    [49500.000, 50000.000) = 1 
    [50000.000, 50500.000) = 0 
    [50500.000, 51000.000) = 0 
    [51000.000, 51500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  47445.967 ms/op
     p(50.0000) =  49190.797 ms/op
     p(90.0000) =  51875.152 ms/op
     p(95.0000) =  51875.152 ms/op
     p(99.0000) =  51875.152 ms/op
     p(99.9000) =  51875.152 ms/op
     p(99.9900) =  51875.152 ms/op
     p(99.9990) =  51875.152 ms/op
     p(99.9999) =  51875.152 ms/op
    p(100.0000) =  51875.152 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 9.80% complete, ETA 06:28:21
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

17246.978 ms/op
# Warmup Iteration   2: 17716.740 ms/op
# Warmup Iteration   3: 7851.737 ms/op
# Warmup Iteration   4: 7797.211 ms/op
# Warmup Iteration   5: 7772.045 ms/op
Iteration   1: 7826.571 ms/op
                 executeQuery·p0.00:   7818.183 ms/op
                 executeQuery·p0.50:   7826.571 ms/op
                 executeQuery·p0.90:   7834.960 ms/op
                 executeQuery·p0.95:   7834.960 ms/op
                 executeQuery·p0.99:   7834.960 ms/op
                 executeQuery·p0.999:  7834.960 ms/op
                 executeQuery·p0.9999: 7834.960 ms/op
                 executeQuery·p1.00:   7834.960 ms/op

Iteration   2: 7813.988 ms/op
                 executeQuery·p0.00:   7801.405 ms/op
                 executeQuery·p0.50:   7813.988 ms/op
                 executeQuery·p0.90:   7826.571 ms/op
                 executeQuery·p0.95:   7826.571 ms/op
                 executeQuery·p0.99:   7826.571 ms/op
                 executeQuery·p0.999:  7826.571 ms/op
                 executeQuery·p0.9999: 7826.571 ms/op
                 executeQuery·p1.00:   7826.571 ms/op

Iteration   3: 7818.183 ms/op
                 executeQuery·p0.00:   7809.794 ms/op
                 executeQuery·p0.50:   7818.183 ms/op
                 executeQuery·p0.90:   7826.571 ms/op
                 executeQuery·p0.95:   7826.571 ms/op
                 executeQuery·p0.99:   7826.571 ms/op
                 executeQuery·p0.999:  7826.571 ms/op
                 executeQuery·p0.9999: 7826.571 ms/op
                 executeQuery·p1.00:   7826.571 ms/op

Iteration   4: 7830.766 ms/op
                 executeQuery·p0.00:   7826.571 ms/op
                 executeQuery·p0.50:   7830.766 ms/op
                 executeQuery·p0.90:   7834.960 ms/op
                 executeQuery·p0.95:   7834.960 ms/op
                 executeQuery·p0.99:   7834.960 ms/op
                 executeQuery·p0.999:  7834.960 ms/op
                 executeQuery·p0.9999: 7834.960 ms/op
                 executeQuery·p1.00:   7834.960 ms/op

Iteration   5: 7834.960 ms/op
                 executeQuery·p0.00:   7826.571 ms/op
                 executeQuery·p0.50:   7834.960 ms/op
                 executeQuery·p0.90:   7843.348 ms/op
                 executeQuery·p0.95:   7843.348 ms/op
                 executeQuery·p0.99:   7843.348 ms/op
                 executeQuery·p0.999:  7843.348 ms/op
                 executeQuery·p0.9999: 7843.348 ms/op
                 executeQuery·p1.00:   7843.348 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   7824.894 ±(99.9%) 18.716 ms/op

  Histogram, ms/op:
    [7800.000, 7805.000) = 1 
    [7805.000, 7810.000) = 1 
    [7810.000, 7815.000) = 0 
    [7815.000, 7820.000) = 1 
    [7820.000, 7825.000) = 0 
    [7825.000, 7830.000) = 4 
    [7830.000, 7835.000) = 2 
    [7835.000, 7840.000) = 0 
    [7840.000, 7845.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   7801.405 ms/op
     p(50.0000) =   7826.571 ms/op
     p(90.0000) =   7842.510 ms/op
     p(95.0000) =   7843.348 ms/op
     p(99.0000) =   7843.348 ms/op
     p(99.9000) =   7843.348 ms/op
     p(99.9900) =   7843.348 ms/op
     p(99.9990) =   7843.348 ms/op
     p(99.9999) =   7843.348 ms/op
    p(100.0000) =   7843.348 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 10.78% complete, ETA 06:11:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

17548.968 ms/op
# Warmup Iteration   2: 13656.654 ms/op
# Warmup Iteration   3: 12163.482 ms/op
# Warmup Iteration   4: 13321.110 ms/op
# Warmup Iteration   5: 12784.239 ms/op
Iteration   1: 12784.239 ms/op
                 executeQuery·p0.00:   12784.239 ms/op
                 executeQuery·p0.50:   12784.239 ms/op
                 executeQuery·p0.90:   12784.239 ms/op
                 executeQuery·p0.95:   12784.239 ms/op
                 executeQuery·p0.99:   12784.239 ms/op
                 executeQuery·p0.999:  12784.239 ms/op
                 executeQuery·p0.9999: 12784.239 ms/op
                 executeQuery·p1.00:   12784.239 ms/op

Iteration   2: 12784.239 ms/op
                 executeQuery·p0.00:   12784.239 ms/op
                 executeQuery·p0.50:   12784.239 ms/op
                 executeQuery·p0.90:   12784.239 ms/op
                 executeQuery·p0.95:   12784.239 ms/op
                 executeQuery·p0.99:   12784.239 ms/op
                 executeQuery·p0.999:  12784.239 ms/op
                 executeQuery·p0.9999: 12784.239 ms/op
                 executeQuery·p1.00:   12784.239 ms/op

Iteration   3: 12817.793 ms/op
                 executeQuery·p0.00:   12817.793 ms/op
                 executeQuery·p0.50:   12817.793 ms/op
                 executeQuery·p0.90:   12817.793 ms/op
                 executeQuery·p0.95:   12817.793 ms/op
                 executeQuery·p0.99:   12817.793 ms/op
                 executeQuery·p0.999:  12817.793 ms/op
                 executeQuery·p0.9999: 12817.793 ms/op
                 executeQuery·p1.00:   12817.793 ms/op

Iteration   4: 12801.016 ms/op
                 executeQuery·p0.00:   12801.016 ms/op
                 executeQuery·p0.50:   12801.016 ms/op
                 executeQuery·p0.90:   12801.016 ms/op
                 executeQuery·p0.95:   12801.016 ms/op
                 executeQuery·p0.99:   12801.016 ms/op
                 executeQuery·p0.999:  12801.016 ms/op
                 executeQuery·p0.9999: 12801.016 ms/op
                 executeQuery·p1.00:   12801.016 ms/op

Iteration   5: 12784.239 ms/op
                 executeQuery·p0.00:   12784.239 ms/op
                 executeQuery·p0.50:   12784.239 ms/op
                 executeQuery·p0.90:   12784.239 ms/op
                 executeQuery·p0.95:   12784.239 ms/op
                 executeQuery·p0.99:   12784.239 ms/op
                 executeQuery·p0.999:  12784.239 ms/op
                 executeQuery·p0.9999: 12784.239 ms/op
                 executeQuery·p1.00:   12784.239 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  12794.305 ±(99.9%) 57.783 ms/op

  Histogram, ms/op:
    [12780.000, 12782.500) = 0 
    [12782.500, 12785.000) = 3 
    [12785.000, 12787.500) = 0 
    [12787.500, 12790.000) = 0 
    [12790.000, 12792.500) = 0 
    [12792.500, 12795.000) = 0 
    [12795.000, 12797.500) = 0 
    [12797.500, 12800.000) = 0 
    [12800.000, 12802.500) = 1 
    [12802.500, 12805.000) = 0 
    [12805.000, 12807.500) = 0 
    [12807.500, 12810.000) = 0 
    [12810.000, 12812.500) = 0 
    [12812.500, 12815.000) = 0 
    [12815.000, 12817.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12784.239 ms/op
     p(50.0000) =  12784.239 ms/op
     p(90.0000) =  12817.793 ms/op
     p(95.0000) =  12817.793 ms/op
     p(99.0000) =  12817.793 ms/op
     p(99.9000) =  12817.793 ms/op
     p(99.9900) =  12817.793 ms/op
     p(99.9990) =  12817.793 ms/op
     p(99.9999) =  12817.793 ms/op
    p(100.0000) =  12817.793 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 11.76% complete, ETA 05:53:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

17481.859 ms/op
# Warmup Iteration   2: 14277.411 ms/op
# Warmup Iteration   3: 13841.203 ms/op
# Warmup Iteration   4: 14008.975 ms/op
# Warmup Iteration   5: 14411.629 ms/op
Iteration   1: 14461.960 ms/op
                 executeQuery·p0.00:   14461.960 ms/op
                 executeQuery·p0.50:   14461.960 ms/op
                 executeQuery·p0.90:   14461.960 ms/op
                 executeQuery·p0.95:   14461.960 ms/op
                 executeQuery·p0.99:   14461.960 ms/op
                 executeQuery·p0.999:  14461.960 ms/op
                 executeQuery·p0.9999: 14461.960 ms/op
                 executeQuery·p1.00:   14461.960 ms/op

Iteration   2: 14411.629 ms/op
                 executeQuery·p0.00:   14411.629 ms/op
                 executeQuery·p0.50:   14411.629 ms/op
                 executeQuery·p0.90:   14411.629 ms/op
                 executeQuery·p0.95:   14411.629 ms/op
                 executeQuery·p0.99:   14411.629 ms/op
                 executeQuery·p0.999:  14411.629 ms/op
                 executeQuery·p0.9999: 14411.629 ms/op
                 executeQuery·p1.00:   14411.629 ms/op

Iteration   3: 14378.074 ms/op
                 executeQuery·p0.00:   14378.074 ms/op
                 executeQuery·p0.50:   14378.074 ms/op
                 executeQuery·p0.90:   14378.074 ms/op
                 executeQuery·p0.95:   14378.074 ms/op
                 executeQuery·p0.99:   14378.074 ms/op
                 executeQuery·p0.999:  14378.074 ms/op
                 executeQuery·p0.9999: 14378.074 ms/op
                 executeQuery·p1.00:   14378.074 ms/op

Iteration   4: 14512.292 ms/op
                 executeQuery·p0.00:   14512.292 ms/op
                 executeQuery·p0.50:   14512.292 ms/op
                 executeQuery·p0.90:   14512.292 ms/op
                 executeQuery·p0.95:   14512.292 ms/op
                 executeQuery·p0.99:   14512.292 ms/op
                 executeQuery·p0.999:  14512.292 ms/op
                 executeQuery·p0.9999: 14512.292 ms/op
                 executeQuery·p1.00:   14512.292 ms/op

Iteration   5: 14294.188 ms/op
                 executeQuery·p0.00:   14294.188 ms/op
                 executeQuery·p0.50:   14294.188 ms/op
                 executeQuery·p0.90:   14294.188 ms/op
                 executeQuery·p0.95:   14294.188 ms/op
                 executeQuery·p0.99:   14294.188 ms/op
                 executeQuery·p0.999:  14294.188 ms/op
                 executeQuery·p0.9999: 14294.188 ms/op
                 executeQuery·p1.00:   14294.188 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  14411.629 ±(99.9%) 319.769 ms/op

  Histogram, ms/op:
    [14200.000, 14225.000) = 0 
    [14225.000, 14250.000) = 0 
    [14250.000, 14275.000) = 0 
    [14275.000, 14300.000) = 1 
    [14300.000, 14325.000) = 0 
    [14325.000, 14350.000) = 0 
    [14350.000, 14375.000) = 0 
    [14375.000, 14400.000) = 1 
    [14400.000, 14425.000) = 1 
    [14425.000, 14450.000) = 0 
    [14450.000, 14475.000) = 1 
    [14475.000, 14500.000) = 0 
    [14500.000, 14525.000) = 1 
    [14525.000, 14550.000) = 0 
    [14550.000, 14575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  14294.188 ms/op
     p(50.0000) =  14411.629 ms/op
     p(90.0000) =  14512.292 ms/op
     p(95.0000) =  14512.292 ms/op
     p(99.0000) =  14512.292 ms/op
     p(99.9000) =  14512.292 ms/op
     p(99.9900) =  14512.292 ms/op
     p(99.9990) =  14512.292 ms/op
     p(99.9999) =  14512.292 ms/op
    p(100.0000) =  14512.292 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 12.75% complete, ETA 05:39:55
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

55968.793 ms/op
# Warmup Iteration   2: 57982.058 ms/op
# Warmup Iteration   3: 43822.088 ms/op
# Warmup Iteration   4: 50801.410 ms/op
# Warmup Iteration   5: 47915.729 ms/op
Iteration   1: 47781.511 ms/op
                 executeQuery·p0.00:   47781.511 ms/op
                 executeQuery·p0.50:   47781.511 ms/op
                 executeQuery·p0.90:   47781.511 ms/op
                 executeQuery·p0.95:   47781.511 ms/op
                 executeQuery·p0.99:   47781.511 ms/op
                 executeQuery·p0.999:  47781.511 ms/op
                 executeQuery·p0.9999: 47781.511 ms/op
                 executeQuery·p1.00:   47781.511 ms/op

Iteration   2: 48385.491 ms/op
                 executeQuery·p0.00:   48385.491 ms/op
                 executeQuery·p0.50:   48385.491 ms/op
                 executeQuery·p0.90:   48385.491 ms/op
                 executeQuery·p0.95:   48385.491 ms/op
                 executeQuery·p0.99:   48385.491 ms/op
                 executeQuery·p0.999:  48385.491 ms/op
                 executeQuery·p0.9999: 48385.491 ms/op
                 executeQuery·p1.00:   48385.491 ms/op

Iteration   3: 48586.818 ms/op
                 executeQuery·p0.00:   48586.818 ms/op
                 executeQuery·p0.50:   48586.818 ms/op
                 executeQuery·p0.90:   48586.818 ms/op
                 executeQuery·p0.95:   48586.818 ms/op
                 executeQuery·p0.99:   48586.818 ms/op
                 executeQuery·p0.999:  48586.818 ms/op
                 executeQuery·p0.9999: 48586.818 ms/op
                 executeQuery·p1.00:   48586.818 ms/op

Iteration   4: 47982.838 ms/op
                 executeQuery·p0.00:   47982.838 ms/op
                 executeQuery·p0.50:   47982.838 ms/op
                 executeQuery·p0.90:   47982.838 ms/op
                 executeQuery·p0.95:   47982.838 ms/op
                 executeQuery·p0.99:   47982.838 ms/op
                 executeQuery·p0.999:  47982.838 ms/op
                 executeQuery·p0.9999: 47982.838 ms/op
                 executeQuery·p1.00:   47982.838 ms/op

Iteration   5: 48117.055 ms/op
                 executeQuery·p0.00:   48117.055 ms/op
                 executeQuery·p0.50:   48117.055 ms/op
                 executeQuery·p0.90:   48117.055 ms/op
                 executeQuery·p0.95:   48117.055 ms/op
                 executeQuery·p0.99:   48117.055 ms/op
                 executeQuery·p0.999:  48117.055 ms/op
                 executeQuery·p0.9999: 48117.055 ms/op
                 executeQuery·p1.00:   48117.055 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  48170.743 ±(99.9%) 1231.193 ms/op

  Histogram, ms/op:
    [47700.000, 47750.000) = 0 
    [47750.000, 47800.000) = 1 
    [47800.000, 47850.000) = 0 
    [47850.000, 47900.000) = 0 
    [47900.000, 47950.000) = 0 
    [47950.000, 48000.000) = 1 
    [48000.000, 48050.000) = 0 
    [48050.000, 48100.000) = 0 
    [48100.000, 48150.000) = 1 
    [48150.000, 48200.000) = 0 
    [48200.000, 48250.000) = 0 
    [48250.000, 48300.000) = 0 
    [48300.000, 48350.000) = 0 
    [48350.000, 48400.000) = 1 
    [48400.000, 48450.000) = 0 
    [48450.000, 48500.000) = 0 
    [48500.000, 48550.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  47781.511 ms/op
     p(50.0000) =  48117.055 ms/op
     p(90.0000) =  48586.818 ms/op
     p(95.0000) =  48586.818 ms/op
     p(99.0000) =  48586.818 ms/op
     p(99.9000) =  48586.818 ms/op
     p(99.9900) =  48586.818 ms/op
     p(99.9990) =  48586.818 ms/op
     p(99.9999) =  48586.818 ms/op
    p(100.0000) =  48586.818 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 13.73% complete, ETA 06:15:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_451331421 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_451331421() {
        this(4);
    }
    public KeyValueMap_451331421(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_451331421 aggregation_state_map = new KeyValueMap_451331421();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

103079.215 ms/op
# Warmup Iteration   2: 96770.982 ms/op
# Warmup Iteration   3: 97576.288 ms/op
# Warmup Iteration   4: 100797.514 ms/op
# Warmup Iteration   5: 98784.248 ms/op
Iteration   1: 98784.248 ms/op
                 executeQuery·p0.00:   98784.248 ms/op
                 executeQuery·p0.50:   98784.248 ms/op
                 executeQuery·p0.90:   98784.248 ms/op
                 executeQuery·p0.95:   98784.248 ms/op
                 executeQuery·p0.99:   98784.248 ms/op
                 executeQuery·p0.999:  98784.248 ms/op
                 executeQuery·p0.9999: 98784.248 ms/op
                 executeQuery·p1.00:   98784.248 ms/op

Iteration   2: 96770.982 ms/op
                 executeQuery·p0.00:   96770.982 ms/op
                 executeQuery·p0.50:   96770.982 ms/op
                 executeQuery·p0.90:   96770.982 ms/op
                 executeQuery·p0.95:   96770.982 ms/op
                 executeQuery·p0.99:   96770.982 ms/op
                 executeQuery·p0.999:  96770.982 ms/op
                 executeQuery·p0.9999: 96770.982 ms/op
                 executeQuery·p1.00:   96770.982 ms/op

Iteration   3: 97710.506 ms/op
                 executeQuery·p0.00:   97710.506 ms/op
                 executeQuery·p0.50:   97710.506 ms/op
                 executeQuery·p0.90:   97710.506 ms/op
                 executeQuery·p0.95:   97710.506 ms/op
                 executeQuery·p0.99:   97710.506 ms/op
                 executeQuery·p0.999:  97710.506 ms/op
                 executeQuery·p0.9999: 97710.506 ms/op
                 executeQuery·p1.00:   97710.506 ms/op

Iteration   4: 96368.329 ms/op
                 executeQuery·p0.00:   96368.329 ms/op
                 executeQuery·p0.50:   96368.329 ms/op
                 executeQuery·p0.90:   96368.329 ms/op
                 executeQuery·p0.95:   96368.329 ms/op
                 executeQuery·p0.99:   96368.329 ms/op
                 executeQuery·p0.999:  96368.329 ms/op
                 executeQuery·p0.9999: 96368.329 ms/op
                 executeQuery·p1.00:   96368.329 ms/op

Iteration   5: 96099.893 ms/op
                 executeQuery·p0.00:   96099.893 ms/op
                 executeQuery·p0.50:   96099.893 ms/op
                 executeQuery·p0.90:   96099.893 ms/op
                 executeQuery·p0.95:   96099.893 ms/op
                 executeQuery·p0.99:   96099.893 ms/op
                 executeQuery·p0.999:  96099.893 ms/op
                 executeQuery·p0.9999: 96099.893 ms/op
                 executeQuery·p1.00:   96099.893 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  97146.792 ±(99.9%) 4236.702 ms/op

  Histogram, ms/op:
    [96000.000, 96250.000) = 1 
    [96250.000, 96500.000) = 1 
    [96500.000, 96750.000) = 0 
    [96750.000, 97000.000) = 1 
    [97000.000, 97250.000) = 0 
    [97250.000, 97500.000) = 0 
    [97500.000, 97750.000) = 1 
    [97750.000, 98000.000) = 0 
    [98000.000, 98250.000) = 0 
    [98250.000, 98500.000) = 0 
    [98500.000, 98750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  96099.893 ms/op
     p(50.0000) =  96770.982 ms/op
     p(90.0000) =  98784.248 ms/op
     p(95.0000) =  98784.248 ms/op
     p(99.0000) =  98784.248 ms/op
     p(99.9000) =  98784.248 ms/op
     p(99.9900) =  98784.248 ms/op
     p(99.9990) =  98784.248 ms/op
     p(99.9999) =  98784.248 ms/op
    p(100.0000) =  98784.248 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 14.71% complete, ETA 08:02:45
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

425.503 ±(99.9%) 86.297 ms/op
# Warmup Iteration   2: 390.958 ±(99.9%) 4.744 ms/op
# Warmup Iteration   3: 390.453 ±(99.9%) 1.194 ms/op
# Warmup Iteration   4: 390.655 ±(99.9%) 2.210 ms/op
# Warmup Iteration   5: 391.018 ±(99.9%) 2.600 ms/op
Iteration   1: 392.127 ±(99.9%) 7.289 ms/op
                 executeQuery·p0.00:   389.022 ms/op
                 executeQuery·p0.50:   390.332 ms/op
                 executeQuery·p0.90:   391.119 ms/op
                 executeQuery·p0.95:   423.494 ms/op
                 executeQuery·p0.99:   440.926 ms/op
                 executeQuery·p0.999:  440.926 ms/op
                 executeQuery·p0.9999: 440.926 ms/op
                 executeQuery·p1.00:   440.926 ms/op

Iteration   2: 391.220 ±(99.9%) 2.943 ms/op
                 executeQuery·p0.00:   388.497 ms/op
                 executeQuery·p0.50:   390.070 ms/op
                 executeQuery·p0.90:   394.946 ms/op
                 executeQuery·p0.95:   405.039 ms/op
                 executeQuery·p0.99:   406.323 ms/op
                 executeQuery·p0.999:  406.323 ms/op
                 executeQuery·p0.9999: 406.323 ms/op
                 executeQuery·p1.00:   406.323 ms/op

Iteration   3: 391.825 ±(99.9%) 2.931 ms/op
                 executeQuery·p0.00:   389.022 ms/op
                 executeQuery·p0.50:   390.595 ms/op
                 executeQuery·p0.90:   400.451 ms/op
                 executeQuery·p0.95:   402.994 ms/op
                 executeQuery·p0.99:   403.177 ms/op
                 executeQuery·p0.999:  403.177 ms/op
                 executeQuery·p0.9999: 403.177 ms/op
                 executeQuery·p1.00:   403.177 ms/op

Iteration   4: 390.978 ±(99.9%) 2.240 ms/op
                 executeQuery·p0.00:   387.973 ms/op
                 executeQuery·p0.50:   390.070 ms/op
                 executeQuery·p0.90:   395.837 ms/op
                 executeQuery·p0.95:   400.530 ms/op
                 executeQuery·p0.99:   401.080 ms/op
                 executeQuery·p0.999:  401.080 ms/op
                 executeQuery·p0.9999: 401.080 ms/op
                 executeQuery·p1.00:   401.080 ms/op

Iteration   5: 390.877 ±(99.9%) 2.779 ms/op
                 executeQuery·p0.00:   387.449 ms/op
                 executeQuery·p0.50:   389.546 ms/op
                 executeQuery·p0.90:   399.822 ms/op
                 executeQuery·p0.95:   401.919 ms/op
                 executeQuery·p0.99:   402.653 ms/op
                 executeQuery·p0.999:  402.653 ms/op
                 executeQuery·p0.9999: 402.653 ms/op
                 executeQuery·p1.00:   402.653 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 130
  mean =    391.405 ±(99.9%) 1.629 ms/op

  Histogram, ms/op:
    [380.000, 385.000) = 0 
    [385.000, 390.000) = 48 
    [390.000, 395.000) = 70 
    [395.000, 400.000) = 4 
    [400.000, 405.000) = 6 
    [405.000, 410.000) = 1 
    [410.000, 415.000) = 0 
    [415.000, 420.000) = 0 
    [420.000, 425.000) = 0 
    [425.000, 430.000) = 0 
    [430.000, 435.000) = 0 
    [435.000, 440.000) = 0 
    [440.000, 445.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    387.449 ms/op
     p(50.0000) =    390.070 ms/op
     p(90.0000) =    394.160 ms/op
     p(95.0000) =    401.788 ms/op
     p(99.0000) =    430.199 ms/op
     p(99.9000) =    440.926 ms/op
     p(99.9900) =    440.926 ms/op
     p(99.9990) =    440.926 ms/op
     p(99.9999) =    440.926 ms/op
    p(100.0000) =    440.926 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 15.69% complete, ETA 07:36:42
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

566.522 ±(99.9%) 103.928 ms/op
# Warmup Iteration   2: 529.034 ±(99.9%) 3.154 ms/op
# Warmup Iteration   3: 534.663 ±(99.9%) 25.060 ms/op
# Warmup Iteration   4: 528.427 ±(99.9%) 2.987 ms/op
# Warmup Iteration   5: 528.731 ±(99.9%) 2.016 ms/op
Iteration   1: 527.185 ±(99.9%) 3.050 ms/op
                 executeQuery·p0.00:   524.812 ms/op
                 executeQuery·p0.50:   525.861 ms/op
                 executeQuery·p0.90:   533.725 ms/op
                 executeQuery·p0.95:   537.919 ms/op
                 executeQuery·p0.99:   537.919 ms/op
                 executeQuery·p0.999:  537.919 ms/op
                 executeQuery·p0.9999: 537.919 ms/op
                 executeQuery·p1.00:   537.919 ms/op

Iteration   2: 527.710 ±(99.9%) 2.537 ms/op
                 executeQuery·p0.00:   524.288 ms/op
                 executeQuery·p0.50:   527.958 ms/op
                 executeQuery·p0.90:   531.628 ms/op
                 executeQuery·p0.95:   534.774 ms/op
                 executeQuery·p0.99:   534.774 ms/op
                 executeQuery·p0.999:  534.774 ms/op
                 executeQuery·p0.9999: 534.774 ms/op
                 executeQuery·p1.00:   534.774 ms/op

Iteration   3: 526.744 ±(99.9%) 2.380 ms/op
                 executeQuery·p0.00:   524.288 ms/op
                 executeQuery·p0.50:   525.337 ms/op
                 executeQuery·p0.90:   530.055 ms/op
                 executeQuery·p0.95:   534.774 ms/op
                 executeQuery·p0.99:   534.774 ms/op
                 executeQuery·p0.999:  534.774 ms/op
                 executeQuery·p0.9999: 534.774 ms/op
                 executeQuery·p1.00:   534.774 ms/op

Iteration   4: 527.875 ±(99.9%) 4.662 ms/op
                 executeQuery·p0.00:   524.288 ms/op
                 executeQuery·p0.50:   525.861 ms/op
                 executeQuery·p0.90:   530.579 ms/op
                 executeQuery·p0.95:   547.357 ms/op
                 executeQuery·p0.99:   547.357 ms/op
                 executeQuery·p0.999:  547.357 ms/op
                 executeQuery·p0.9999: 547.357 ms/op
                 executeQuery·p1.00:   547.357 ms/op

Iteration   5: 538.223 ±(99.9%) 34.678 ms/op
                 executeQuery·p0.00:   523.764 ms/op
                 executeQuery·p0.50:   525.861 ms/op
                 executeQuery·p0.90:   583.008 ms/op
                 executeQuery·p0.95:   687.866 ms/op
                 executeQuery·p0.99:   687.866 ms/op
                 executeQuery·p0.999:  687.866 ms/op
                 executeQuery·p0.9999: 687.866 ms/op
                 executeQuery·p1.00:   687.866 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 95
  mean =    529.547 ±(99.9%) 6.175 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 14 
    [525.000, 537.500) = 77 
    [537.500, 550.000) = 2 
    [550.000, 562.500) = 0 
    [562.500, 575.000) = 0 
    [575.000, 587.500) = 1 
    [587.500, 600.000) = 0 
    [600.000, 612.500) = 0 
    [612.500, 625.000) = 0 
    [625.000, 637.500) = 0 
    [637.500, 650.000) = 0 
    [650.000, 662.500) = 0 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    523.764 ms/op
     p(50.0000) =    525.861 ms/op
     p(90.0000) =    530.999 ms/op
     p(95.0000) =    535.822 ms/op
     p(99.0000) =    687.866 ms/op
     p(99.9000) =    687.866 ms/op
     p(99.9900) =    687.866 ms/op
     p(99.9990) =    687.866 ms/op
     p(99.9999) =    687.866 ms/op
    p(100.0000) =    687.866 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 16.67% complete, ETA 07:13:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

781.431 ±(99.9%) 77.922 ms/op
# Warmup Iteration   2: 762.476 ±(99.9%) 30.569 ms/op
# Warmup Iteration   3: 778.527 ±(99.9%) 14.995 ms/op
# Warmup Iteration   4: 787.723 ±(99.9%) 24.836 ms/op
# Warmup Iteration   5: 793.933 ±(99.9%) 27.989 ms/op
Iteration   1: 789.336 ±(99.9%) 22.211 ms/op
                 executeQuery·p0.00:   751.829 ms/op
                 executeQuery·p0.50:   786.432 ms/op
                 executeQuery·p0.90:   813.905 ms/op
                 executeQuery·p0.95:   814.744 ms/op
                 executeQuery·p0.99:   814.744 ms/op
                 executeQuery·p0.999:  814.744 ms/op
                 executeQuery·p0.9999: 814.744 ms/op
                 executeQuery·p1.00:   814.744 ms/op

Iteration   2: 790.465 ±(99.9%) 23.808 ms/op
                 executeQuery·p0.00:   758.120 ms/op
                 executeQuery·p0.50:   789.578 ms/op
                 executeQuery·p0.90:   817.050 ms/op
                 executeQuery·p0.95:   817.889 ms/op
                 executeQuery·p0.99:   817.889 ms/op
                 executeQuery·p0.999:  817.889 ms/op
                 executeQuery·p0.9999: 817.889 ms/op
                 executeQuery·p1.00:   817.889 ms/op

Iteration   3: 780.786 ±(99.9%) 25.930 ms/op
                 executeQuery·p0.00:   747.635 ms/op
                 executeQuery·p0.50:   782.238 ms/op
                 executeQuery·p0.90:   821.245 ms/op
                 executeQuery·p0.95:   824.181 ms/op
                 executeQuery·p0.99:   824.181 ms/op
                 executeQuery·p0.999:  824.181 ms/op
                 executeQuery·p0.9999: 824.181 ms/op
                 executeQuery·p1.00:   824.181 ms/op

Iteration   4: 790.062 ±(99.9%) 30.478 ms/op
                 executeQuery·p0.00:   752.878 ms/op
                 executeQuery·p0.50:   789.578 ms/op
                 executeQuery·p0.90:   825.020 ms/op
                 executeQuery·p0.95:   828.375 ms/op
                 executeQuery·p0.99:   828.375 ms/op
                 executeQuery·p0.999:  828.375 ms/op
                 executeQuery·p0.9999: 828.375 ms/op
                 executeQuery·p1.00:   828.375 ms/op

Iteration   5: 787.803 ±(99.9%) 23.100 ms/op
                 executeQuery·p0.00:   761.266 ms/op
                 executeQuery·p0.50:   782.238 ms/op
                 executeQuery·p0.90:   815.582 ms/op
                 executeQuery·p0.95:   816.841 ms/op
                 executeQuery·p0.99:   816.841 ms/op
                 executeQuery·p0.999:  816.841 ms/op
                 executeQuery·p0.9999: 816.841 ms/op
                 executeQuery·p1.00:   816.841 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 65
  mean =    787.690 ±(99.9%) 8.878 ms/op

  Histogram, ms/op:
    [740.000, 745.000) = 0 
    [745.000, 750.000) = 1 
    [750.000, 755.000) = 3 
    [755.000, 760.000) = 3 
    [760.000, 765.000) = 4 
    [765.000, 770.000) = 1 
    [770.000, 775.000) = 5 
    [775.000, 780.000) = 4 
    [780.000, 785.000) = 13 
    [785.000, 790.000) = 6 
    [790.000, 795.000) = 3 
    [795.000, 800.000) = 3 
    [800.000, 805.000) = 1 
    [805.000, 810.000) = 5 
    [810.000, 815.000) = 5 
    [815.000, 820.000) = 6 
    [820.000, 825.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    747.635 ms/op
     p(50.0000) =    784.335 ms/op
     p(90.0000) =    816.841 ms/op
     p(95.0000) =    819.672 ms/op
     p(99.0000) =    828.375 ms/op
     p(99.9000) =    828.375 ms/op
     p(99.9900) =    828.375 ms/op
     p(99.9990) =    828.375 ms/op
     p(99.9999) =    828.375 ms/op
    p(100.0000) =    828.375 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 17.65% complete, ETA 06:52:44
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_341415147 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_341415147() {
        this(4);
    }
    public KeyValueMap_341415147(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_341415147 aggregation_state_map = new KeyValueMap_341415147();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3200.254 ms/op
# Warmup Iteration   2: 2956.984 ms/op
# Warmup Iteration   3: 2768.241 ms/op
# Warmup Iteration   4: 2860.515 ms/op
# Warmup Iteration   5: 2579.497 ms/op
Iteration   1: 2478.834 ms/op
                 executeQuery·p0.00:   2478.834 ms/op
                 executeQuery·p0.50:   2478.834 ms/op
                 executeQuery·p0.90:   2478.834 ms/op
                 executeQuery·p0.95:   2478.834 ms/op
                 executeQuery·p0.99:   2478.834 ms/op
                 executeQuery·p0.999:  2478.834 ms/op
                 executeQuery·p0.9999: 2478.834 ms/op
                 executeQuery·p1.00:   2478.834 ms/op

Iteration   2: 2197.815 ms/op
                 executeQuery·p0.00:   2197.815 ms/op
                 executeQuery·p0.50:   2197.815 ms/op
                 executeQuery·p0.90:   2197.815 ms/op
                 executeQuery·p0.95:   2197.815 ms/op
                 executeQuery·p0.99:   2197.815 ms/op
                 executeQuery·p0.999:  2197.815 ms/op
                 executeQuery·p0.9999: 2197.815 ms/op
                 executeQuery·p1.00:   2197.815 ms/op

Iteration   3: 2256.536 ms/op
                 executeQuery·p0.00:   2256.536 ms/op
                 executeQuery·p0.50:   2256.536 ms/op
                 executeQuery·p0.90:   2256.536 ms/op
                 executeQuery·p0.95:   2256.536 ms/op
                 executeQuery·p0.99:   2256.536 ms/op
                 executeQuery·p0.999:  2256.536 ms/op
                 executeQuery·p0.9999: 2256.536 ms/op
                 executeQuery·p1.00:   2256.536 ms/op

Iteration   4: 2206.204 ms/op
                 executeQuery·p0.00:   2206.204 ms/op
                 executeQuery·p0.50:   2206.204 ms/op
                 executeQuery·p0.90:   2206.204 ms/op
                 executeQuery·p0.95:   2206.204 ms/op
                 executeQuery·p0.99:   2206.204 ms/op
                 executeQuery·p0.999:  2206.204 ms/op
                 executeQuery·p0.9999: 2206.204 ms/op
                 executeQuery·p1.00:   2206.204 ms/op

Iteration   5: 2185.232 ms/op
                 executeQuery·p0.00:   2185.232 ms/op
                 executeQuery·p0.50:   2185.232 ms/op
                 executeQuery·p0.90:   2185.232 ms/op
                 executeQuery·p0.95:   2185.232 ms/op
                 executeQuery·p0.99:   2185.232 ms/op
                 executeQuery·p0.999:  2185.232 ms/op
                 executeQuery·p0.9999: 2185.232 ms/op
                 executeQuery·p1.00:   2185.232 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =   2264.924 ±(99.9%) 472.117 ms/op

  Histogram, ms/op:
    [2100.000, 2125.000) = 0 
    [2125.000, 2150.000) = 0 
    [2150.000, 2175.000) = 0 
    [2175.000, 2200.000) = 2 
    [2200.000, 2225.000) = 1 
    [2225.000, 2250.000) = 0 
    [2250.000, 2275.000) = 1 
    [2275.000, 2300.000) = 0 
    [2300.000, 2325.000) = 0 
    [2325.000, 2350.000) = 0 
    [2350.000, 2375.000) = 0 
    [2375.000, 2400.000) = 0 
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 0 
    [2450.000, 2475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2185.232 ms/op
     p(50.0000) =   2206.204 ms/op
     p(90.0000) =   2478.834 ms/op
     p(95.0000) =   2478.834 ms/op
     p(99.0000) =   2478.834 ms/op
     p(99.9000) =   2478.834 ms/op
     p(99.9900) =   2478.834 ms/op
     p(99.9990) =   2478.834 ms/op
     p(99.9999) =   2478.834 ms/op
    p(100.0000) =   2478.834 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 18.63% complete, ETA 06:36:11
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5570.036 ms/op
# Warmup Iteration   2: 5184.160 ms/op
# Warmup Iteration   3: 5335.155 ms/op
# Warmup Iteration   4: 5259.657 ms/op
# Warmup Iteration   5: 5033.165 ms/op
Iteration   1: 5133.828 ms/op
                 executeQuery·p0.00:   5133.828 ms/op
                 executeQuery·p0.50:   5133.828 ms/op
                 executeQuery·p0.90:   5133.828 ms/op
                 executeQuery·p0.95:   5133.828 ms/op
                 executeQuery·p0.99:   5133.828 ms/op
                 executeQuery·p0.999:  5133.828 ms/op
                 executeQuery·p0.9999: 5133.828 ms/op
                 executeQuery·p1.00:   5133.828 ms/op

Iteration   2: 5167.383 ms/op
                 executeQuery·p0.00:   5167.383 ms/op
                 executeQuery·p0.50:   5167.383 ms/op
                 executeQuery·p0.90:   5167.383 ms/op
                 executeQuery·p0.95:   5167.383 ms/op
                 executeQuery·p0.99:   5167.383 ms/op
                 executeQuery·p0.999:  5167.383 ms/op
                 executeQuery·p0.9999: 5167.383 ms/op
                 executeQuery·p1.00:   5167.383 ms/op

Iteration   3: 4974.445 ms/op
                 executeQuery·p0.00:   4974.445 ms/op
                 executeQuery·p0.50:   4974.445 ms/op
                 executeQuery·p0.90:   4974.445 ms/op
                 executeQuery·p0.95:   4974.445 ms/op
                 executeQuery·p0.99:   4974.445 ms/op
                 executeQuery·p0.999:  4974.445 ms/op
                 executeQuery·p0.9999: 4974.445 ms/op
                 executeQuery·p1.00:   4974.445 ms/op

Iteration   4: 5133.828 ms/op
                 executeQuery·p0.00:   5133.828 ms/op
                 executeQuery·p0.50:   5133.828 ms/op
                 executeQuery·p0.90:   5133.828 ms/op
                 executeQuery·p0.95:   5133.828 ms/op
                 executeQuery·p0.99:   5133.828 ms/op
                 executeQuery·p0.999:  5133.828 ms/op
                 executeQuery·p0.9999: 5133.828 ms/op
                 executeQuery·p1.00:   5133.828 ms/op

Iteration   5: 5075.108 ms/op
                 executeQuery·p0.00:   5075.108 ms/op
                 executeQuery·p0.50:   5075.108 ms/op
                 executeQuery·p0.90:   5075.108 ms/op
                 executeQuery·p0.95:   5075.108 ms/op
                 executeQuery·p0.99:   5075.108 ms/op
                 executeQuery·p0.999:  5075.108 ms/op
                 executeQuery·p0.9999: 5075.108 ms/op
                 executeQuery·p1.00:   5075.108 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =   5096.918 ±(99.9%) 293.037 ms/op

  Histogram, ms/op:
    [4900.000, 4925.000) = 0 
    [4925.000, 4950.000) = 0 
    [4950.000, 4975.000) = 1 
    [4975.000, 5000.000) = 0 
    [5000.000, 5025.000) = 0 
    [5025.000, 5050.000) = 0 
    [5050.000, 5075.000) = 0 
    [5075.000, 5100.000) = 1 
    [5100.000, 5125.000) = 0 
    [5125.000, 5150.000) = 2 
    [5150.000, 5175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4974.445 ms/op
     p(50.0000) =   5133.828 ms/op
     p(90.0000) =   5167.383 ms/op
     p(95.0000) =   5167.383 ms/op
     p(99.0000) =   5167.383 ms/op
     p(99.9000) =   5167.383 ms/op
     p(99.9900) =   5167.383 ms/op
     p(99.9990) =   5167.383 ms/op
     p(99.9999) =   5167.383 ms/op
    p(100.0000) =   5167.383 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 19.61% complete, ETA 06:44:56
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6694.109 ms/op
# Warmup Iteration   2: 4111.816 ±(99.9%) 5631.526 ms/op
# Warmup Iteration   3: 3948.238 ±(99.9%) 3493.469 ms/op
# Warmup Iteration   4: 3895.110 ±(99.9%) 1745.477 ms/op
# Warmup Iteration   5: 3837.788 ±(99.9%) 76.520 ms/op
Iteration   1: 3844.779 ±(99.9%) 159.288 ms/op
                 executeQuery·p0.00:   3837.788 ms/op
                 executeQuery·p0.50:   3841.982 ms/op
                 executeQuery·p0.90:   3854.565 ms/op
                 executeQuery·p0.95:   3854.565 ms/op
                 executeQuery·p0.99:   3854.565 ms/op
                 executeQuery·p0.999:  3854.565 ms/op
                 executeQuery·p0.9999: 3854.565 ms/op
                 executeQuery·p1.00:   3854.565 ms/op

Iteration   2: 3837.788 ±(99.9%) 153.039 ms/op
                 executeQuery·p0.00:   3829.400 ms/op
                 executeQuery·p0.50:   3837.788 ms/op
                 executeQuery·p0.90:   3846.177 ms/op
                 executeQuery·p0.95:   3846.177 ms/op
                 executeQuery·p0.99:   3846.177 ms/op
                 executeQuery·p0.999:  3846.177 ms/op
                 executeQuery·p0.9999: 3846.177 ms/op
                 executeQuery·p1.00:   3846.177 ms/op

Iteration   3: 3923.072 ±(99.9%) 2694.900 ms/op
                 executeQuery·p0.00:   3837.788 ms/op
                 executeQuery·p0.50:   3837.788 ms/op
                 executeQuery·p0.90:   4093.641 ms/op
                 executeQuery·p0.95:   4093.641 ms/op
                 executeQuery·p0.99:   4093.641 ms/op
                 executeQuery·p0.999:  4093.641 ms/op
                 executeQuery·p0.9999: 4093.641 ms/op
                 executeQuery·p1.00:   4093.641 ms/op

Iteration   4: 3841.982 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   3837.788 ms/op
                 executeQuery·p0.50:   3841.982 ms/op
                 executeQuery·p0.90:   3846.177 ms/op
                 executeQuery·p0.95:   3846.177 ms/op
                 executeQuery·p0.99:   3846.177 ms/op
                 executeQuery·p0.999:  3846.177 ms/op
                 executeQuery·p0.9999: 3846.177 ms/op
                 executeQuery·p1.00:   3846.177 ms/op

Iteration   5: 4123.001 ±(99.9%) 5439.363 ms/op
                 executeQuery·p0.00:   3833.594 ms/op
                 executeQuery·p0.50:   4106.224 ms/op
                 executeQuery·p0.90:   4429.185 ms/op
                 executeQuery·p0.95:   4429.185 ms/op
                 executeQuery·p0.99:   4429.185 ms/op
                 executeQuery·p0.999:  4429.185 ms/op
                 executeQuery·p0.9999: 4429.185 ms/op
                 executeQuery·p1.00:   4429.185 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   3914.124 ±(99.9%) 180.796 ms/op

  Histogram, ms/op:
    [3800.000, 3850.000) = 11 
    [3850.000, 3900.000) = 1 
    [3900.000, 3950.000) = 0 
    [3950.000, 4000.000) = 0 
    [4000.000, 4050.000) = 0 
    [4050.000, 4100.000) = 1 
    [4100.000, 4150.000) = 1 
    [4150.000, 4200.000) = 0 
    [4200.000, 4250.000) = 0 
    [4250.000, 4300.000) = 0 
    [4300.000, 4350.000) = 0 
    [4350.000, 4400.000) = 0 
    [4400.000, 4450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3829.400 ms/op
     p(50.0000) =   3841.982 ms/op
     p(90.0000) =   4235.408 ms/op
     p(95.0000) =   4429.185 ms/op
     p(99.0000) =   4429.185 ms/op
     p(99.9000) =   4429.185 ms/op
     p(99.9900) =   4429.185 ms/op
     p(99.9990) =   4429.185 ms/op
     p(99.9999) =   4429.185 ms/op
    p(100.0000) =   4429.185 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 20.59% complete, ETA 06:28:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7130.317 ms/op
# Warmup Iteration   2: 5700.059 ms/op
# Warmup Iteration   3: 5591.007 ms/op
# Warmup Iteration   4: 5813.305 ms/op
# Warmup Iteration   5: 5783.945 ms/op
Iteration   1: 5574.230 ms/op
                 executeQuery·p0.00:   5268.046 ms/op
                 executeQuery·p0.50:   5574.230 ms/op
                 executeQuery·p0.90:   5880.414 ms/op
                 executeQuery·p0.95:   5880.414 ms/op
                 executeQuery·p0.99:   5880.414 ms/op
                 executeQuery·p0.999:  5880.414 ms/op
                 executeQuery·p0.9999: 5880.414 ms/op
                 executeQuery·p1.00:   5880.414 ms/op

Iteration   2: 5263.852 ms/op
                 executeQuery·p0.00:   5259.657 ms/op
                 executeQuery·p0.50:   5263.852 ms/op
                 executeQuery·p0.90:   5268.046 ms/op
                 executeQuery·p0.95:   5268.046 ms/op
                 executeQuery·p0.99:   5268.046 ms/op
                 executeQuery·p0.999:  5268.046 ms/op
                 executeQuery·p0.9999: 5268.046 ms/op
                 executeQuery·p1.00:   5268.046 ms/op

Iteration   3: 5268.046 ms/op
                 executeQuery·p0.00:   5259.657 ms/op
                 executeQuery·p0.50:   5268.046 ms/op
                 executeQuery·p0.90:   5276.434 ms/op
                 executeQuery·p0.95:   5276.434 ms/op
                 executeQuery·p0.99:   5276.434 ms/op
                 executeQuery·p0.999:  5276.434 ms/op
                 executeQuery·p0.9999: 5276.434 ms/op
                 executeQuery·p1.00:   5276.434 ms/op

Iteration   4: 5259.657 ms/op
                 executeQuery·p0.00:   5251.269 ms/op
                 executeQuery·p0.50:   5259.657 ms/op
                 executeQuery·p0.90:   5268.046 ms/op
                 executeQuery·p0.95:   5268.046 ms/op
                 executeQuery·p0.99:   5268.046 ms/op
                 executeQuery·p0.999:  5268.046 ms/op
                 executeQuery·p0.9999: 5268.046 ms/op
                 executeQuery·p1.00:   5268.046 ms/op

Iteration   5: 5309.989 ms/op
                 executeQuery·p0.00:   5259.657 ms/op
                 executeQuery·p0.50:   5309.989 ms/op
                 executeQuery·p0.90:   5360.321 ms/op
                 executeQuery·p0.95:   5360.321 ms/op
                 executeQuery·p0.99:   5360.321 ms/op
                 executeQuery·p0.999:  5360.321 ms/op
                 executeQuery·p0.9999: 5360.321 ms/op
                 executeQuery·p1.00:   5360.321 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   5335.155 ±(99.9%) 293.436 ms/op

  Histogram, ms/op:
    [5200.000, 5250.000) = 0 
    [5250.000, 5300.000) = 8 
    [5300.000, 5350.000) = 0 
    [5350.000, 5400.000) = 1 
    [5400.000, 5450.000) = 0 
    [5450.000, 5500.000) = 0 
    [5500.000, 5550.000) = 0 
    [5550.000, 5600.000) = 0 
    [5600.000, 5650.000) = 0 
    [5650.000, 5700.000) = 0 
    [5700.000, 5750.000) = 0 
    [5750.000, 5800.000) = 0 
    [5800.000, 5850.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   5251.269 ms/op
     p(50.0000) =   5268.046 ms/op
     p(90.0000) =   5828.405 ms/op
     p(95.0000) =   5880.414 ms/op
     p(99.0000) =   5880.414 ms/op
     p(99.9000) =   5880.414 ms/op
     p(99.9900) =   5880.414 ms/op
     p(99.9990) =   5880.414 ms/op
     p(99.9999) =   5880.414 ms/op
    p(100.0000) =   5880.414 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 21.57% complete, ETA 06:13:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_341415147 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_341415147() {
        this(4);
    }
    public KeyValueMap_341415147(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_341415147 aggregation_state_map = new KeyValueMap_341415147();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

8388.608 ms/op
# Warmup Iteration   2: 7520.387 ms/op
# Warmup Iteration   3: 7105.151 ms/op
# Warmup Iteration   4: 7126.122 ms/op
# Warmup Iteration   5: 7184.843 ms/op
Iteration   1: 6962.545 ms/op
                 executeQuery·p0.00:   6937.379 ms/op
                 executeQuery·p0.50:   6962.545 ms/op
                 executeQuery·p0.90:   6987.710 ms/op
                 executeQuery·p0.95:   6987.710 ms/op
                 executeQuery·p0.99:   6987.710 ms/op
                 executeQuery·p0.999:  6987.710 ms/op
                 executeQuery·p0.9999: 6987.710 ms/op
                 executeQuery·p1.00:   6987.710 ms/op

Iteration   2: 7235.174 ms/op
                 executeQuery·p0.00:   7180.648 ms/op
                 executeQuery·p0.50:   7235.174 ms/op
                 executeQuery·p0.90:   7289.700 ms/op
                 executeQuery·p0.95:   7289.700 ms/op
                 executeQuery·p0.99:   7289.700 ms/op
                 executeQuery·p0.999:  7289.700 ms/op
                 executeQuery·p0.9999: 7289.700 ms/op
                 executeQuery·p1.00:   7289.700 ms/op

Iteration   3: 7163.871 ms/op
                 executeQuery·p0.00:   7054.819 ms/op
                 executeQuery·p0.50:   7163.871 ms/op
                 executeQuery·p0.90:   7272.923 ms/op
                 executeQuery·p0.95:   7272.923 ms/op
                 executeQuery·p0.99:   7272.923 ms/op
                 executeQuery·p0.999:  7272.923 ms/op
                 executeQuery·p0.9999: 7272.923 ms/op
                 executeQuery·p1.00:   7272.923 ms/op

Iteration   4: 7054.819 ms/op
                 executeQuery·p0.00:   6928.990 ms/op
                 executeQuery·p0.50:   7054.819 ms/op
                 executeQuery·p0.90:   7180.648 ms/op
                 executeQuery·p0.95:   7180.648 ms/op
                 executeQuery·p0.99:   7180.648 ms/op
                 executeQuery·p0.999:  7180.648 ms/op
                 executeQuery·p0.9999: 7180.648 ms/op
                 executeQuery·p1.00:   7180.648 ms/op

Iteration   5: 7029.654 ms/op
                 executeQuery·p0.00:   6903.824 ms/op
                 executeQuery·p0.50:   7029.654 ms/op
                 executeQuery·p0.90:   7155.483 ms/op
                 executeQuery·p0.95:   7155.483 ms/op
                 executeQuery·p0.99:   7155.483 ms/op
                 executeQuery·p0.999:  7155.483 ms/op
                 executeQuery·p0.9999: 7155.483 ms/op
                 executeQuery·p1.00:   7155.483 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   7089.213 ±(99.9%) 219.458 ms/op

  Histogram, ms/op:
    [6900.000, 6925.000) = 1 
    [6925.000, 6950.000) = 2 
    [6950.000, 6975.000) = 0 
    [6975.000, 7000.000) = 1 
    [7000.000, 7025.000) = 0 
    [7025.000, 7050.000) = 0 
    [7050.000, 7075.000) = 1 
    [7075.000, 7100.000) = 0 
    [7100.000, 7125.000) = 0 
    [7125.000, 7150.000) = 0 
    [7150.000, 7175.000) = 1 
    [7175.000, 7200.000) = 2 
    [7200.000, 7225.000) = 0 
    [7225.000, 7250.000) = 0 
    [7250.000, 7275.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   6903.824 ms/op
     p(50.0000) =   7105.151 ms/op
     p(90.0000) =   7288.023 ms/op
     p(95.0000) =   7289.700 ms/op
     p(99.0000) =   7289.700 ms/op
     p(99.9000) =   7289.700 ms/op
     p(99.9900) =   7289.700 ms/op
     p(99.9990) =   7289.700 ms/op
     p(99.9999) =   7289.700 ms/op
    p(100.0000) =   7289.700 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 22.55% complete, ETA 06:01:17
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

29863.444 ms/op
# Warmup Iteration   2: 26877.100 ms/op
# Warmup Iteration   3: 24024.973 ms/op
# Warmup Iteration   4: 25736.249 ms/op
# Warmup Iteration   5: 24696.062 ms/op
Iteration   1: 24897.389 ms/op
                 executeQuery·p0.00:   24897.389 ms/op
                 executeQuery·p0.50:   24897.389 ms/op
                 executeQuery·p0.90:   24897.389 ms/op
                 executeQuery·p0.95:   24897.389 ms/op
                 executeQuery·p0.99:   24897.389 ms/op
                 executeQuery·p0.999:  24897.389 ms/op
                 executeQuery·p0.9999: 24897.389 ms/op
                 executeQuery·p1.00:   24897.389 ms/op

Iteration   2: 25232.933 ms/op
                 executeQuery·p0.00:   25232.933 ms/op
                 executeQuery·p0.50:   25232.933 ms/op
                 executeQuery·p0.90:   25232.933 ms/op
                 executeQuery·p0.95:   25232.933 ms/op
                 executeQuery·p0.99:   25232.933 ms/op
                 executeQuery·p0.999:  25232.933 ms/op
                 executeQuery·p0.9999: 25232.933 ms/op
                 executeQuery·p1.00:   25232.933 ms/op

Iteration   3: 25635.586 ms/op
                 executeQuery·p0.00:   25635.586 ms/op
                 executeQuery·p0.50:   25635.586 ms/op
                 executeQuery·p0.90:   25635.586 ms/op
                 executeQuery·p0.95:   25635.586 ms/op
                 executeQuery·p0.99:   25635.586 ms/op
                 executeQuery·p0.999:  25635.586 ms/op
                 executeQuery·p0.9999: 25635.586 ms/op
                 executeQuery·p1.00:   25635.586 ms/op

Iteration   4: 25434.259 ms/op
                 executeQuery·p0.00:   25434.259 ms/op
                 executeQuery·p0.50:   25434.259 ms/op
                 executeQuery·p0.90:   25434.259 ms/op
                 executeQuery·p0.95:   25434.259 ms/op
                 executeQuery·p0.99:   25434.259 ms/op
                 executeQuery·p0.999:  25434.259 ms/op
                 executeQuery·p0.9999: 25434.259 ms/op
                 executeQuery·p1.00:   25434.259 ms/op

Iteration   5: 24863.834 ms/op
                 executeQuery·p0.00:   24863.834 ms/op
                 executeQuery·p0.50:   24863.834 ms/op
                 executeQuery·p0.90:   24863.834 ms/op
                 executeQuery·p0.95:   24863.834 ms/op
                 executeQuery·p0.99:   24863.834 ms/op
                 executeQuery·p0.999:  24863.834 ms/op
                 executeQuery·p0.9999: 24863.834 ms/op
                 executeQuery·p1.00:   24863.834 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  25212.800 ±(99.9%) 1290.769 ms/op

  Histogram, ms/op:
    [24800.000, 24850.000) = 0 
    [24850.000, 24900.000) = 2 
    [24900.000, 24950.000) = 0 
    [24950.000, 25000.000) = 0 
    [25000.000, 25050.000) = 0 
    [25050.000, 25100.000) = 0 
    [25100.000, 25150.000) = 0 
    [25150.000, 25200.000) = 0 
    [25200.000, 25250.000) = 1 
    [25250.000, 25300.000) = 0 
    [25300.000, 25350.000) = 0 
    [25350.000, 25400.000) = 0 
    [25400.000, 25450.000) = 1 
    [25450.000, 25500.000) = 0 
    [25500.000, 25550.000) = 0 
    [25550.000, 25600.000) = 0 
    [25600.000, 25650.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  24863.834 ms/op
     p(50.0000) =  25232.933 ms/op
     p(90.0000) =  25635.586 ms/op
     p(95.0000) =  25635.586 ms/op
     p(99.0000) =  25635.586 ms/op
     p(99.9000) =  25635.586 ms/op
     p(99.9900) =  25635.586 ms/op
     p(99.9990) =  25635.586 ms/op
     p(99.9999) =  25635.586 ms/op
    p(100.0000) =  25635.586 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 23.53% complete, ETA 06:01:24
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

55029.268 ms/op
# Warmup Iteration   2: 50398.757 ms/op
# Warmup Iteration   3: 52613.349 ms/op
# Warmup Iteration   4: 50264.539 ms/op
# Warmup Iteration   5: 50868.519 ms/op
Iteration   1: 51069.846 ms/op
                 executeQuery·p0.00:   51069.846 ms/op
                 executeQuery·p0.50:   51069.846 ms/op
                 executeQuery·p0.90:   51069.846 ms/op
                 executeQuery·p0.95:   51069.846 ms/op
                 executeQuery·p0.99:   51069.846 ms/op
                 executeQuery·p0.999:  51069.846 ms/op
                 executeQuery·p0.9999: 51069.846 ms/op
                 executeQuery·p1.00:   51069.846 ms/op

Iteration   2: 49727.668 ms/op
                 executeQuery·p0.00:   49727.668 ms/op
                 executeQuery·p0.50:   49727.668 ms/op
                 executeQuery·p0.90:   49727.668 ms/op
                 executeQuery·p0.95:   49727.668 ms/op
                 executeQuery·p0.99:   49727.668 ms/op
                 executeQuery·p0.999:  49727.668 ms/op
                 executeQuery·p0.9999: 49727.668 ms/op
                 executeQuery·p1.00:   49727.668 ms/op

Iteration   3: 51204.063 ms/op
                 executeQuery·p0.00:   51204.063 ms/op
                 executeQuery·p0.50:   51204.063 ms/op
                 executeQuery·p0.90:   51204.063 ms/op
                 executeQuery·p0.95:   51204.063 ms/op
                 executeQuery·p0.99:   51204.063 ms/op
                 executeQuery·p0.999:  51204.063 ms/op
                 executeQuery·p0.9999: 51204.063 ms/op
                 executeQuery·p1.00:   51204.063 ms/op

Iteration   4: 49861.886 ms/op
                 executeQuery·p0.00:   49861.886 ms/op
                 executeQuery·p0.50:   49861.886 ms/op
                 executeQuery·p0.90:   49861.886 ms/op
                 executeQuery·p0.95:   49861.886 ms/op
                 executeQuery·p0.99:   49861.886 ms/op
                 executeQuery·p0.999:  49861.886 ms/op
                 executeQuery·p0.9999: 49861.886 ms/op
                 executeQuery·p1.00:   49861.886 ms/op

Iteration   5: 53351.547 ms/op
                 executeQuery·p0.00:   53351.547 ms/op
                 executeQuery·p0.50:   53351.547 ms/op
                 executeQuery·p0.90:   53351.547 ms/op
                 executeQuery·p0.95:   53351.547 ms/op
                 executeQuery·p0.99:   53351.547 ms/op
                 executeQuery·p0.999:  53351.547 ms/op
                 executeQuery·p0.9999: 53351.547 ms/op
                 executeQuery·p1.00:   53351.547 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  51043.002 ±(99.9%) 5607.012 ms/op

  Histogram, ms/op:
    [49000.000, 49500.000) = 0 
    [49500.000, 50000.000) = 2 
    [50000.000, 50500.000) = 0 
    [50500.000, 51000.000) = 0 
    [51000.000, 51500.000) = 2 
    [51500.000, 52000.000) = 0 
    [52000.000, 52500.000) = 0 
    [52500.000, 53000.000) = 0 
    [53000.000, 53500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  49727.668 ms/op
     p(50.0000) =  51069.846 ms/op
     p(90.0000) =  53351.547 ms/op
     p(95.0000) =  53351.547 ms/op
     p(99.0000) =  53351.547 ms/op
     p(99.9000) =  53351.547 ms/op
     p(99.9900) =  53351.547 ms/op
     p(99.9990) =  53351.547 ms/op
     p(99.9999) =  53351.547 ms/op
    p(100.0000) =  53351.547 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 24.51% complete, ETA 06:30:29
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

17481.859 ms/op
# Warmup Iteration   2: 8803.844 ms/op
# Warmup Iteration   3: 8623.489 ms/op
# Warmup Iteration   4: 8233.419 ms/op
# Warmup Iteration   5: 8195.670 ms/op
Iteration   1: 8187.281 ms/op
                 executeQuery·p0.00:   8187.281 ms/op
                 executeQuery·p0.50:   8187.281 ms/op
                 executeQuery·p0.90:   8187.281 ms/op
                 executeQuery·p0.95:   8187.281 ms/op
                 executeQuery·p0.99:   8187.281 ms/op
                 executeQuery·p0.999:  8187.281 ms/op
                 executeQuery·p0.9999: 8187.281 ms/op
                 executeQuery·p1.00:   8187.281 ms/op

Iteration   2: 8195.670 ms/op
                 executeQuery·p0.00:   8187.281 ms/op
                 executeQuery·p0.50:   8195.670 ms/op
                 executeQuery·p0.90:   8204.059 ms/op
                 executeQuery·p0.95:   8204.059 ms/op
                 executeQuery·p0.99:   8204.059 ms/op
                 executeQuery·p0.999:  8204.059 ms/op
                 executeQuery·p0.9999: 8204.059 ms/op
                 executeQuery·p1.00:   8204.059 ms/op

Iteration   3: 8212.447 ms/op
                 executeQuery·p0.00:   8204.059 ms/op
                 executeQuery·p0.50:   8212.447 ms/op
                 executeQuery·p0.90:   8220.836 ms/op
                 executeQuery·p0.95:   8220.836 ms/op
                 executeQuery·p0.99:   8220.836 ms/op
                 executeQuery·p0.999:  8220.836 ms/op
                 executeQuery·p0.9999: 8220.836 ms/op
                 executeQuery·p1.00:   8220.836 ms/op

Iteration   4: 8212.447 ms/op
                 executeQuery·p0.00:   8204.059 ms/op
                 executeQuery·p0.50:   8212.447 ms/op
                 executeQuery·p0.90:   8220.836 ms/op
                 executeQuery·p0.95:   8220.836 ms/op
                 executeQuery·p0.99:   8220.836 ms/op
                 executeQuery·p0.999:  8220.836 ms/op
                 executeQuery·p0.9999: 8220.836 ms/op
                 executeQuery·p1.00:   8220.836 ms/op

Iteration   5: 8195.670 ms/op
                 executeQuery·p0.00:   8170.504 ms/op
                 executeQuery·p0.50:   8195.670 ms/op
                 executeQuery·p0.90:   8220.836 ms/op
                 executeQuery·p0.95:   8220.836 ms/op
                 executeQuery·p0.99:   8220.836 ms/op
                 executeQuery·p0.999:  8220.836 ms/op
                 executeQuery·p0.9999: 8220.836 ms/op
                 executeQuery·p1.00:   8220.836 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   8200.703 ±(99.9%) 26.197 ms/op

  Histogram, ms/op:
    [8170.000, 8175.000) = 1 
    [8175.000, 8180.000) = 0 
    [8180.000, 8185.000) = 0 
    [8185.000, 8190.000) = 3 
    [8190.000, 8195.000) = 0 
    [8195.000, 8200.000) = 0 
    [8200.000, 8205.000) = 3 
    [8205.000, 8210.000) = 0 
    [8210.000, 8215.000) = 0 
    [8215.000, 8220.000) = 0 
    [8220.000, 8225.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   8170.504 ms/op
     p(50.0000) =   8204.059 ms/op
     p(90.0000) =   8220.836 ms/op
     p(95.0000) =   8220.836 ms/op
     p(99.0000) =   8220.836 ms/op
     p(99.9000) =   8220.836 ms/op
     p(99.9900) =   8220.836 ms/op
     p(99.9990) =   8220.836 ms/op
     p(99.9999) =   8220.836 ms/op
    p(100.0000) =   8220.836 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 25.49% complete, ETA 06:18:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16928.211 ms/op
# Warmup Iteration   2: 12901.679 ms/op
# Warmup Iteration   3: 12784.239 ms/op
# Warmup Iteration   4: 14008.975 ms/op
# Warmup Iteration   5: 12247.368 ms/op
Iteration   1: 12532.580 ms/op
                 executeQuery·p0.00:   12532.580 ms/op
                 executeQuery·p0.50:   12532.580 ms/op
                 executeQuery·p0.90:   12532.580 ms/op
                 executeQuery·p0.95:   12532.580 ms/op
                 executeQuery·p0.99:   12532.580 ms/op
                 executeQuery·p0.999:  12532.580 ms/op
                 executeQuery·p0.9999: 12532.580 ms/op
                 executeQuery·p1.00:   12532.580 ms/op

Iteration   2: 12247.368 ms/op
                 executeQuery·p0.00:   12247.368 ms/op
                 executeQuery·p0.50:   12247.368 ms/op
                 executeQuery·p0.90:   12247.368 ms/op
                 executeQuery·p0.95:   12247.368 ms/op
                 executeQuery·p0.99:   12247.368 ms/op
                 executeQuery·p0.999:  12247.368 ms/op
                 executeQuery·p0.9999: 12247.368 ms/op
                 executeQuery·p1.00:   12247.368 ms/op

Iteration   3: 12415.140 ms/op
                 executeQuery·p0.00:   12415.140 ms/op
                 executeQuery·p0.50:   12415.140 ms/op
                 executeQuery·p0.90:   12415.140 ms/op
                 executeQuery·p0.95:   12415.140 ms/op
                 executeQuery·p0.99:   12415.140 ms/op
                 executeQuery·p0.999:  12415.140 ms/op
                 executeQuery·p0.9999: 12415.140 ms/op
                 executeQuery·p1.00:   12415.140 ms/op

Iteration   4: 12868.125 ms/op
                 executeQuery·p0.00:   12868.125 ms/op
                 executeQuery·p0.50:   12868.125 ms/op
                 executeQuery·p0.90:   12868.125 ms/op
                 executeQuery·p0.95:   12868.125 ms/op
                 executeQuery·p0.99:   12868.125 ms/op
                 executeQuery·p0.999:  12868.125 ms/op
                 executeQuery·p0.9999: 12868.125 ms/op
                 executeQuery·p1.00:   12868.125 ms/op

Iteration   5: 12247.368 ms/op
                 executeQuery·p0.00:   12247.368 ms/op
                 executeQuery·p0.50:   12247.368 ms/op
                 executeQuery·p0.90:   12247.368 ms/op
                 executeQuery·p0.95:   12247.368 ms/op
                 executeQuery·p0.99:   12247.368 ms/op
                 executeQuery·p0.999:  12247.368 ms/op
                 executeQuery·p0.9999: 12247.368 ms/op
                 executeQuery·p1.00:   12247.368 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  12462.116 ±(99.9%) 989.714 ms/op

  Histogram, ms/op:
    [12200.000, 12250.000) = 2 
    [12250.000, 12300.000) = 0 
    [12300.000, 12350.000) = 0 
    [12350.000, 12400.000) = 0 
    [12400.000, 12450.000) = 1 
    [12450.000, 12500.000) = 0 
    [12500.000, 12550.000) = 1 
    [12550.000, 12600.000) = 0 
    [12600.000, 12650.000) = 0 
    [12650.000, 12700.000) = 0 
    [12700.000, 12750.000) = 0 
    [12750.000, 12800.000) = 0 
    [12800.000, 12850.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12247.368 ms/op
     p(50.0000) =  12415.140 ms/op
     p(90.0000) =  12868.125 ms/op
     p(95.0000) =  12868.125 ms/op
     p(99.0000) =  12868.125 ms/op
     p(99.9000) =  12868.125 ms/op
     p(99.9900) =  12868.125 ms/op
     p(99.9990) =  12868.125 ms/op
     p(99.9999) =  12868.125 ms/op
    p(100.0000) =  12868.125 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 26.47% complete, ETA 06:06:11
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16793.993 ms/op
# Warmup Iteration   2: 16424.894 ms/op
# Warmup Iteration   3: 13472.104 ms/op
# Warmup Iteration   4: 15065.940 ms/op
# Warmup Iteration   5: 15317.598 ms/op
Iteration   1: 15418.262 ms/op
                 executeQuery·p0.00:   15418.262 ms/op
                 executeQuery·p0.50:   15418.262 ms/op
                 executeQuery·p0.90:   15418.262 ms/op
                 executeQuery·p0.95:   15418.262 ms/op
                 executeQuery·p0.99:   15418.262 ms/op
                 executeQuery·p0.999:  15418.262 ms/op
                 executeQuery·p0.9999: 15418.262 ms/op
                 executeQuery·p1.00:   15418.262 ms/op

Iteration   2: 14881.391 ms/op
                 executeQuery·p0.00:   14881.391 ms/op
                 executeQuery·p0.50:   14881.391 ms/op
                 executeQuery·p0.90:   14881.391 ms/op
                 executeQuery·p0.95:   14881.391 ms/op
                 executeQuery·p0.99:   14881.391 ms/op
                 executeQuery·p0.999:  14881.391 ms/op
                 executeQuery·p0.9999: 14881.391 ms/op
                 executeQuery·p1.00:   14881.391 ms/op

Iteration   3: 15267.267 ms/op
                 executeQuery·p0.00:   15267.267 ms/op
                 executeQuery·p0.50:   15267.267 ms/op
                 executeQuery·p0.90:   15267.267 ms/op
                 executeQuery·p0.95:   15267.267 ms/op
                 executeQuery·p0.99:   15267.267 ms/op
                 executeQuery·p0.999:  15267.267 ms/op
                 executeQuery·p0.9999: 15267.267 ms/op
                 executeQuery·p1.00:   15267.267 ms/op

Iteration   4: 15367.930 ms/op
                 executeQuery·p0.00:   15367.930 ms/op
                 executeQuery·p0.50:   15367.930 ms/op
                 executeQuery·p0.90:   15367.930 ms/op
                 executeQuery·p0.95:   15367.930 ms/op
                 executeQuery·p0.99:   15367.930 ms/op
                 executeQuery·p0.999:  15367.930 ms/op
                 executeQuery·p0.9999: 15367.930 ms/op
                 executeQuery·p1.00:   15367.930 ms/op

Iteration   5: 14864.613 ms/op
                 executeQuery·p0.00:   14864.613 ms/op
                 executeQuery·p0.50:   14864.613 ms/op
                 executeQuery·p0.90:   14864.613 ms/op
                 executeQuery·p0.95:   14864.613 ms/op
                 executeQuery·p0.99:   14864.613 ms/op
                 executeQuery·p0.999:  14864.613 ms/op
                 executeQuery·p0.9999: 14864.613 ms/op
                 executeQuery·p1.00:   14864.613 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  15159.892 ±(99.9%) 1030.212 ms/op

  Histogram, ms/op:
    [14800.000, 14850.000) = 0 
    [14850.000, 14900.000) = 2 
    [14900.000, 14950.000) = 0 
    [14950.000, 15000.000) = 0 
    [15000.000, 15050.000) = 0 
    [15050.000, 15100.000) = 0 
    [15100.000, 15150.000) = 0 
    [15150.000, 15200.000) = 0 
    [15200.000, 15250.000) = 0 
    [15250.000, 15300.000) = 1 
    [15300.000, 15350.000) = 0 
    [15350.000, 15400.000) = 1 
    [15400.000, 15450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  14864.613 ms/op
     p(50.0000) =  15267.267 ms/op
     p(90.0000) =  15418.262 ms/op
     p(95.0000) =  15418.262 ms/op
     p(99.0000) =  15418.262 ms/op
     p(99.9000) =  15418.262 ms/op
     p(99.9900) =  15418.262 ms/op
     p(99.9990) =  15418.262 ms/op
     p(99.9999) =  15418.262 ms/op
    p(100.0000) =  15418.262 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 27.45% complete, ETA 05:55:14
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

61538.828 ms/op
# Warmup Iteration   2: 53217.329 ms/op
# Warmup Iteration   3: 51740.934 ms/op
# Warmup Iteration   4: 53754.200 ms/op
# Warmup Iteration   5: 50868.519 ms/op
Iteration   1: 53485.765 ms/op
                 executeQuery·p0.00:   53485.765 ms/op
                 executeQuery·p0.50:   53485.765 ms/op
                 executeQuery·p0.90:   53485.765 ms/op
                 executeQuery·p0.95:   53485.765 ms/op
                 executeQuery·p0.99:   53485.765 ms/op
                 executeQuery·p0.999:  53485.765 ms/op
                 executeQuery·p0.9999: 53485.765 ms/op
                 executeQuery·p1.00:   53485.765 ms/op

Iteration   2: 51472.499 ms/op
                 executeQuery·p0.00:   51472.499 ms/op
                 executeQuery·p0.50:   51472.499 ms/op
                 executeQuery·p0.90:   51472.499 ms/op
                 executeQuery·p0.95:   51472.499 ms/op
                 executeQuery·p0.99:   51472.499 ms/op
                 executeQuery·p0.999:  51472.499 ms/op
                 executeQuery·p0.9999: 51472.499 ms/op
                 executeQuery·p1.00:   51472.499 ms/op

Iteration   3: 52210.696 ms/op
                 executeQuery·p0.00:   52210.696 ms/op
                 executeQuery·p0.50:   52210.696 ms/op
                 executeQuery·p0.90:   52210.696 ms/op
                 executeQuery·p0.95:   52210.696 ms/op
                 executeQuery·p0.99:   52210.696 ms/op
                 executeQuery·p0.999:  52210.696 ms/op
                 executeQuery·p0.9999: 52210.696 ms/op
                 executeQuery·p1.00:   52210.696 ms/op

Iteration   4: 53485.765 ms/op
                 executeQuery·p0.00:   53485.765 ms/op
                 executeQuery·p0.50:   53485.765 ms/op
                 executeQuery·p0.90:   53485.765 ms/op
                 executeQuery·p0.95:   53485.765 ms/op
                 executeQuery·p0.99:   53485.765 ms/op
                 executeQuery·p0.999:  53485.765 ms/op
                 executeQuery·p0.9999: 53485.765 ms/op
                 executeQuery·p1.00:   53485.765 ms/op

Iteration   5: 52076.478 ms/op
                 executeQuery·p0.00:   52076.478 ms/op
                 executeQuery·p0.50:   52076.478 ms/op
                 executeQuery·p0.90:   52076.478 ms/op
                 executeQuery·p0.95:   52076.478 ms/op
                 executeQuery·p0.99:   52076.478 ms/op
                 executeQuery·p0.999:  52076.478 ms/op
                 executeQuery·p0.9999: 52076.478 ms/op
                 executeQuery·p1.00:   52076.478 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  52546.241 ±(99.9%) 3471.777 ms/op

  Histogram, ms/op:
    [51000.000, 51250.000) = 0 
    [51250.000, 51500.000) = 1 
    [51500.000, 51750.000) = 0 
    [51750.000, 52000.000) = 0 
    [52000.000, 52250.000) = 2 
    [52250.000, 52500.000) = 0 
    [52500.000, 52750.000) = 0 
    [52750.000, 53000.000) = 0 
    [53000.000, 53250.000) = 0 
    [53250.000, 53500.000) = 2 
    [53500.000, 53750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  51472.499 ms/op
     p(50.0000) =  52210.696 ms/op
     p(90.0000) =  53485.765 ms/op
     p(95.0000) =  53485.765 ms/op
     p(99.0000) =  53485.765 ms/op
     p(99.9000) =  53485.765 ms/op
     p(99.9900) =  53485.765 ms/op
     p(99.9990) =  53485.765 ms/op
     p(99.9999) =  53485.765 ms/op
    p(100.0000) =  53485.765 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 28.43% complete, ETA 06:05:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_271383469 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_271383469() {
        this(4);
    }
    public KeyValueMap_271383469(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_271383469 aggregation_state_map = new KeyValueMap_271383469();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

107776.836 ms/op
# Warmup Iteration   2: 103213.433 ms/op
# Warmup Iteration   3: 97844.724 ms/op
# Warmup Iteration   4: 99186.901 ms/op
# Warmup Iteration   5: 99589.554 ms/op
Iteration   1: 99723.772 ms/op
                 executeQuery·p0.00:   99723.772 ms/op
                 executeQuery·p0.50:   99723.772 ms/op
                 executeQuery·p0.90:   99723.772 ms/op
                 executeQuery·p0.95:   99723.772 ms/op
                 executeQuery·p0.99:   99723.772 ms/op
                 executeQuery·p0.999:  99723.772 ms/op
                 executeQuery·p0.9999: 99723.772 ms/op
                 executeQuery·p1.00:   99723.772 ms/op

Iteration   2: 102139.691 ms/op
                 executeQuery·p0.00:   102139.691 ms/op
                 executeQuery·p0.50:   102139.691 ms/op
                 executeQuery·p0.90:   102139.691 ms/op
                 executeQuery·p0.95:   102139.691 ms/op
                 executeQuery·p0.99:   102139.691 ms/op
                 executeQuery·p0.999:  102139.691 ms/op
                 executeQuery·p0.9999: 102139.691 ms/op
                 executeQuery·p1.00:   102139.691 ms/op

Iteration   3: 102408.126 ms/op
                 executeQuery·p0.00:   102408.126 ms/op
                 executeQuery·p0.50:   102408.126 ms/op
                 executeQuery·p0.90:   102408.126 ms/op
                 executeQuery·p0.95:   102408.126 ms/op
                 executeQuery·p0.99:   102408.126 ms/op
                 executeQuery·p0.999:  102408.126 ms/op
                 executeQuery·p0.9999: 102408.126 ms/op
                 executeQuery·p1.00:   102408.126 ms/op

Iteration   4: 102273.909 ms/op
                 executeQuery·p0.00:   102273.909 ms/op
                 executeQuery·p0.50:   102273.909 ms/op
                 executeQuery·p0.90:   102273.909 ms/op
                 executeQuery·p0.95:   102273.909 ms/op
                 executeQuery·p0.99:   102273.909 ms/op
                 executeQuery·p0.999:  102273.909 ms/op
                 executeQuery·p0.9999: 102273.909 ms/op
                 executeQuery·p1.00:   102273.909 ms/op

Iteration   5: 101065.949 ms/op
                 executeQuery·p0.00:   101065.949 ms/op
                 executeQuery·p0.50:   101065.949 ms/op
                 executeQuery·p0.90:   101065.949 ms/op
                 executeQuery·p0.95:   101065.949 ms/op
                 executeQuery·p0.99:   101065.949 ms/op
                 executeQuery·p0.999:  101065.949 ms/op
                 executeQuery·p0.9999: 101065.949 ms/op
                 executeQuery·p1.00:   101065.949 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean = 101522.289 ±(99.9%) 4379.308 ms/op

  Histogram, ms/op:
    [ 99000.000,  99250.000) = 0 
    [ 99250.000,  99500.000) = 0 
    [ 99500.000,  99750.000) = 1 
    [ 99750.000, 100000.000) = 0 
    [100000.000, 100250.000) = 0 
    [100250.000, 100500.000) = 0 
    [100500.000, 100750.000) = 0 
    [100750.000, 101000.000) = 0 
    [101000.000, 101250.000) = 1 
    [101250.000, 101500.000) = 0 
    [101500.000, 101750.000) = 0 
    [101750.000, 102000.000) = 0 
    [102000.000, 102250.000) = 1 
    [102250.000, 102500.000) = 2 
    [102500.000, 102750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  99723.772 ms/op
     p(50.0000) = 102139.691 ms/op
     p(90.0000) = 102408.126 ms/op
     p(95.0000) = 102408.126 ms/op
     p(99.0000) = 102408.126 ms/op
     p(99.9000) = 102408.126 ms/op
     p(99.9900) = 102408.126 ms/op
     p(99.9990) = 102408.126 ms/op
     p(99.9999) = 102408.126 ms/op
    p(100.0000) = 102408.126 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 29.41% complete, ETA 06:44:04
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

83.582 ±(99.9%) 18.034 ms/op
# Warmup Iteration   2: 77.177 ±(99.9%) 0.529 ms/op
# Warmup Iteration   3: 78.859 ±(99.9%) 0.285 ms/op
# Warmup Iteration   4: 78.601 ±(99.9%) 0.324 ms/op
# Warmup Iteration   5: 78.398 ±(99.9%) 0.255 ms/op
Iteration   1: 74.997 ±(99.9%) 0.525 ms/op
                 executeFilterQuery·p0.00:   72.090 ms/op
                 executeFilterQuery·p0.50:   74.973 ms/op
                 executeFilterQuery·p0.90:   76.861 ms/op
                 executeFilterQuery·p0.95:   77.555 ms/op
                 executeFilterQuery·p0.99:   85.188 ms/op
                 executeFilterQuery·p0.999:  88.605 ms/op
                 executeFilterQuery·p0.9999: 88.605 ms/op
                 executeFilterQuery·p1.00:   88.605 ms/op

Iteration   2: 75.565 ±(99.9%) 0.426 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   75.891 ms/op
                 executeFilterQuery·p0.90:   77.424 ms/op
                 executeFilterQuery·p0.95:   77.726 ms/op
                 executeFilterQuery·p0.99:   79.477 ms/op
                 executeFilterQuery·p0.999:  79.823 ms/op
                 executeFilterQuery·p0.9999: 79.823 ms/op
                 executeFilterQuery·p1.00:   79.823 ms/op

Iteration   3: 75.249 ±(99.9%) 0.417 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   74.842 ms/op
                 executeFilterQuery·p0.90:   77.686 ms/op
                 executeFilterQuery·p0.95:   77.903 ms/op
                 executeFilterQuery·p0.99:   79.696 ms/op
                 executeFilterQuery·p0.999:  80.085 ms/op
                 executeFilterQuery·p0.9999: 80.085 ms/op
                 executeFilterQuery·p1.00:   80.085 ms/op

Iteration   4: 76.922 ±(99.9%) 0.662 ms/op
                 executeFilterQuery·p0.00:   73.662 ms/op
                 executeFilterQuery·p0.50:   76.808 ms/op
                 executeFilterQuery·p0.90:   79.561 ms/op
                 executeFilterQuery·p0.95:   79.888 ms/op
                 executeFilterQuery·p0.99:   87.333 ms/op
                 executeFilterQuery·p0.999:  90.046 ms/op
                 executeFilterQuery·p0.9999: 90.046 ms/op
                 executeFilterQuery·p1.00:   90.046 ms/op

Iteration   5: 76.127 ±(99.9%) 0.516 ms/op
                 executeFilterQuery·p0.00:   73.794 ms/op
                 executeFilterQuery·p0.50:   75.629 ms/op
                 executeFilterQuery·p0.90:   78.879 ms/op
                 executeFilterQuery·p0.95:   79.561 ms/op
                 executeFilterQuery·p0.99:   80.751 ms/op
                 executeFilterQuery·p0.999:  81.002 ms/op
                 executeFilterQuery·p0.9999: 81.002 ms/op
                 executeFilterQuery·p1.00:   81.002 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 656
  mean =     75.766 ±(99.9%) 0.242 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 1 
    [ 72.500,  75.000) = 278 
    [ 75.000,  77.500) = 272 
    [ 77.500,  80.000) = 98 
    [ 80.000,  82.500) = 5 
    [ 82.500,  85.000) = 0 
    [ 85.000,  87.500) = 0 
    [ 87.500,  90.000) = 1 
    [ 90.000,  92.500) = 1 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.090 ms/op
     p(50.0000) =     75.497 ms/op
     p(90.0000) =     78.250 ms/op
     p(95.0000) =     79.430 ms/op
     p(99.0000) =     80.141 ms/op
     p(99.9000) =     90.046 ms/op
     p(99.9900) =     90.046 ms/op
     p(99.9990) =     90.046 ms/op
     p(99.9999) =     90.046 ms/op
    p(100.0000) =     90.046 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 30.39% complete, ETA 06:29:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

84.472 ±(99.9%) 17.355 ms/op
# Warmup Iteration   2: 78.309 ±(99.9%) 0.564 ms/op
# Warmup Iteration   3: 79.799 ±(99.9%) 0.242 ms/op
# Warmup Iteration   4: 79.342 ±(99.9%) 0.374 ms/op
# Warmup Iteration   5: 79.790 ±(99.9%) 0.428 ms/op
Iteration   1: 77.024 ±(99.9%) 0.438 ms/op
                 executeFilterQuery·p0.00:   74.187 ms/op
                 executeFilterQuery·p0.50:   76.677 ms/op
                 executeFilterQuery·p0.90:   78.774 ms/op
                 executeFilterQuery·p0.95:   79.692 ms/op
                 executeFilterQuery·p0.99:   80.046 ms/op
                 executeFilterQuery·p0.999:  80.085 ms/op
                 executeFilterQuery·p0.9999: 80.085 ms/op
                 executeFilterQuery·p1.00:   80.085 ms/op

Iteration   2: 77.853 ±(99.9%) 0.485 ms/op
                 executeFilterQuery·p0.00:   74.842 ms/op
                 executeFilterQuery·p0.50:   78.119 ms/op
                 executeFilterQuery·p0.90:   79.705 ms/op
                 executeFilterQuery·p0.95:   80.419 ms/op
                 executeFilterQuery·p0.99:   81.227 ms/op
                 executeFilterQuery·p0.999:  81.265 ms/op
                 executeFilterQuery·p0.9999: 81.265 ms/op
                 executeFilterQuery·p1.00:   81.265 ms/op

Iteration   3: 76.120 ±(99.9%) 0.280 ms/op
                 executeFilterQuery·p0.00:   73.794 ms/op
                 executeFilterQuery·p0.50:   75.891 ms/op
                 executeFilterQuery·p0.90:   77.057 ms/op
                 executeFilterQuery·p0.95:   77.975 ms/op
                 executeFilterQuery·p0.99:   79.479 ms/op
                 executeFilterQuery·p0.999:  79.561 ms/op
                 executeFilterQuery·p0.9999: 79.561 ms/op
                 executeFilterQuery·p1.00:   79.561 ms/op

Iteration   4: 77.422 ±(99.9%) 0.582 ms/op
                 executeFilterQuery·p0.00:   73.794 ms/op
                 executeFilterQuery·p0.50:   77.464 ms/op
                 executeFilterQuery·p0.90:   79.430 ms/op
                 executeFilterQuery·p0.95:   79.692 ms/op
                 executeFilterQuery·p0.99:   87.306 ms/op
                 executeFilterQuery·p0.999:  90.309 ms/op
                 executeFilterQuery·p0.9999: 90.309 ms/op
                 executeFilterQuery·p1.00:   90.309 ms/op

Iteration   5: 76.174 ±(99.9%) 0.293 ms/op
                 executeFilterQuery·p0.00:   74.056 ms/op
                 executeFilterQuery·p0.50:   76.022 ms/op
                 executeFilterQuery·p0.90:   77.595 ms/op
                 executeFilterQuery·p0.95:   77.857 ms/op
                 executeFilterQuery·p0.99:   79.403 ms/op
                 executeFilterQuery·p0.999:  79.823 ms/op
                 executeFilterQuery·p0.9999: 79.823 ms/op
                 executeFilterQuery·p1.00:   79.823 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 646
  mean =     76.912 ±(99.9%) 0.208 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 0 
    [ 72.500,  75.000) = 39 
    [ 75.000,  77.500) = 391 
    [ 77.500,  80.000) = 204 
    [ 80.000,  82.500) = 11 
    [ 82.500,  85.000) = 0 
    [ 85.000,  87.500) = 0 
    [ 87.500,  90.000) = 0 
    [ 90.000,  92.500) = 1 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     73.794 ms/op
     p(50.0000) =     76.677 ms/op
     p(90.0000) =     79.430 ms/op
     p(95.0000) =     79.692 ms/op
     p(99.0000) =     80.617 ms/op
     p(99.9000) =     90.309 ms/op
     p(99.9900) =     90.309 ms/op
     p(99.9990) =     90.309 ms/op
     p(99.9999) =     90.309 ms/op
    p(100.0000) =     90.309 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 31.37% complete, ETA 06:15:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

86.072 ±(99.9%) 17.650 ms/op
# Warmup Iteration   2: 79.327 ±(99.9%) 0.615 ms/op
# Warmup Iteration   3: 80.422 ±(99.9%) 0.329 ms/op
# Warmup Iteration   4: 80.479 ±(99.9%) 0.338 ms/op
# Warmup Iteration   5: 80.601 ±(99.9%) 0.309 ms/op
Iteration   1: 77.971 ±(99.9%) 0.561 ms/op
                 executeFilterQuery·p0.00:   75.366 ms/op
                 executeFilterQuery·p0.50:   77.464 ms/op
                 executeFilterQuery·p0.90:   80.622 ms/op
                 executeFilterQuery·p0.95:   81.265 ms/op
                 executeFilterQuery·p0.99:   85.198 ms/op
                 executeFilterQuery·p0.999:  86.376 ms/op
                 executeFilterQuery·p0.9999: 86.376 ms/op
                 executeFilterQuery·p1.00:   86.376 ms/op

Iteration   2: 77.665 ±(99.9%) 0.467 ms/op
                 executeFilterQuery·p0.00:   75.366 ms/op
                 executeFilterQuery·p0.50:   77.464 ms/op
                 executeFilterQuery·p0.90:   79.836 ms/op
                 executeFilterQuery·p0.95:   80.871 ms/op
                 executeFilterQuery·p0.99:   81.265 ms/op
                 executeFilterQuery·p0.999:  81.265 ms/op
                 executeFilterQuery·p0.9999: 81.265 ms/op
                 executeFilterQuery·p1.00:   81.265 ms/op

Iteration   3: 77.799 ±(99.9%) 0.559 ms/op
                 executeFilterQuery·p0.00:   75.366 ms/op
                 executeFilterQuery·p0.50:   77.332 ms/op
                 executeFilterQuery·p0.90:   80.137 ms/op
                 executeFilterQuery·p0.95:   81.134 ms/op
                 executeFilterQuery·p0.99:   82.838 ms/op
                 executeFilterQuery·p0.999:  82.838 ms/op
                 executeFilterQuery·p0.9999: 82.838 ms/op
                 executeFilterQuery·p1.00:   82.838 ms/op

Iteration   4: 78.757 ±(99.9%) 0.648 ms/op
                 executeFilterQuery·p0.00:   75.497 ms/op
                 executeFilterQuery·p0.50:   78.119 ms/op
                 executeFilterQuery·p0.90:   81.658 ms/op
                 executeFilterQuery·p0.95:   82.221 ms/op
                 executeFilterQuery·p0.99:   88.614 ms/op
                 executeFilterQuery·p0.999:  90.702 ms/op
                 executeFilterQuery·p0.9999: 90.702 ms/op
                 executeFilterQuery·p1.00:   90.702 ms/op

Iteration   5: 78.147 ±(99.9%) 0.476 ms/op
                 executeFilterQuery·p0.00:   74.842 ms/op
                 executeFilterQuery·p0.50:   77.857 ms/op
                 executeFilterQuery·p0.90:   80.740 ms/op
                 executeFilterQuery·p0.95:   81.468 ms/op
                 executeFilterQuery·p0.99:   82.838 ms/op
                 executeFilterQuery·p0.999:  82.838 ms/op
                 executeFilterQuery·p0.9999: 82.838 ms/op
                 executeFilterQuery·p1.00:   82.838 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 637
  mean =     78.066 ±(99.9%) 0.244 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 0 
    [ 72.500,  75.000) = 1 
    [ 75.000,  77.500) = 299 
    [ 77.500,  80.000) = 243 
    [ 80.000,  82.500) = 84 
    [ 82.500,  85.000) = 8 
    [ 85.000,  87.500) = 1 
    [ 87.500,  90.000) = 0 
    [ 90.000,  92.500) = 1 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     74.842 ms/op
     p(50.0000) =     77.726 ms/op
     p(90.0000) =     80.740 ms/op
     p(95.0000) =     81.396 ms/op
     p(99.0000) =     82.838 ms/op
     p(99.9000) =     90.702 ms/op
     p(99.9900) =     90.702 ms/op
     p(99.9990) =     90.702 ms/op
     p(99.9999) =     90.702 ms/op
    p(100.0000) =     90.702 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 32.35% complete, ETA 06:02:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2035.915 ±(99.9%) 10285.946 ms/op
# Warmup Iteration   2: 739.021 ±(99.9%) 20.182 ms/op
# Warmup Iteration   3: 733.479 ±(99.9%) 15.800 ms/op
# Warmup Iteration   4: 753.027 ±(99.9%) 4.863 ms/op
# Warmup Iteration   5: 753.402 ±(99.9%) 5.285 ms/op
Iteration   1: 755.199 ±(99.9%) 5.532 ms/op
                 executeFilterQuery·p0.00:   748.683 ms/op
                 executeFilterQuery·p0.50:   754.975 ms/op
                 executeFilterQuery·p0.90:   763.888 ms/op
                 executeFilterQuery·p0.95:   764.412 ms/op
                 executeFilterQuery·p0.99:   764.412 ms/op
                 executeFilterQuery·p0.999:  764.412 ms/op
                 executeFilterQuery·p0.9999: 764.412 ms/op
                 executeFilterQuery·p1.00:   764.412 ms/op

Iteration   2: 756.023 ±(99.9%) 3.854 ms/op
                 executeFilterQuery·p0.00:   749.732 ms/op
                 executeFilterQuery·p0.50:   757.072 ms/op
                 executeFilterQuery·p0.90:   760.218 ms/op
                 executeFilterQuery·p0.95:   760.218 ms/op
                 executeFilterQuery·p0.99:   760.218 ms/op
                 executeFilterQuery·p0.999:  760.218 ms/op
                 executeFilterQuery·p0.9999: 760.218 ms/op
                 executeFilterQuery·p1.00:   760.218 ms/op

Iteration   3: 756.098 ±(99.9%) 6.569 ms/op
                 executeFilterQuery·p0.00:   749.732 ms/op
                 executeFilterQuery·p0.50:   754.450 ms/op
                 executeFilterQuery·p0.90:   766.509 ms/op
                 executeFilterQuery·p0.95:   770.703 ms/op
                 executeFilterQuery·p0.99:   770.703 ms/op
                 executeFilterQuery·p0.999:  770.703 ms/op
                 executeFilterQuery·p0.9999: 770.703 ms/op
                 executeFilterQuery·p1.00:   770.703 ms/op

Iteration   4: 752.728 ±(99.9%) 4.373 ms/op
                 executeFilterQuery·p0.00:   748.683 ms/op
                 executeFilterQuery·p0.50:   751.829 ms/op
                 executeFilterQuery·p0.90:   759.693 ms/op
                 executeFilterQuery·p0.95:   762.315 ms/op
                 executeFilterQuery·p0.99:   762.315 ms/op
                 executeFilterQuery·p0.999:  762.315 ms/op
                 executeFilterQuery·p0.9999: 762.315 ms/op
                 executeFilterQuery·p1.00:   762.315 ms/op

Iteration   5: 733.479 ±(99.9%) 17.296 ms/op
                 executeFilterQuery·p0.00:   718.275 ms/op
                 executeFilterQuery·p0.50:   726.663 ms/op
                 executeFilterQuery·p0.90:   763.888 ms/op
                 executeFilterQuery·p0.95:   765.460 ms/op
                 executeFilterQuery·p0.99:   765.460 ms/op
                 executeFilterQuery·p0.999:  765.460 ms/op
                 executeFilterQuery·p0.9999: 765.460 ms/op
                 executeFilterQuery·p1.00:   765.460 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 70
  mean =    750.706 ±(99.9%) 4.809 ms/op

  Histogram, ms/op:
    [710.000, 715.000) = 0 
    [715.000, 720.000) = 2 
    [720.000, 725.000) = 3 
    [725.000, 730.000) = 3 
    [730.000, 735.000) = 2 
    [735.000, 740.000) = 1 
    [740.000, 745.000) = 0 
    [745.000, 750.000) = 10 
    [750.000, 755.000) = 24 
    [755.000, 760.000) = 15 
    [760.000, 765.000) = 8 
    [765.000, 770.000) = 1 
    [770.000, 775.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    718.275 ms/op
     p(50.0000) =    752.878 ms/op
     p(90.0000) =    762.105 ms/op
     p(95.0000) =    763.835 ms/op
     p(99.0000) =    770.703 ms/op
     p(99.9000) =    770.703 ms/op
     p(99.9900) =    770.703 ms/op
     p(99.9990) =    770.703 ms/op
     p(99.9999) =    770.703 ms/op
    p(100.0000) =    770.703 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 33.33% complete, ETA 05:50:34
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1763.181 ±(99.9%) 6422.915 ms/op
# Warmup Iteration   2: 740.519 ±(99.9%) 15.403 ms/op
# Warmup Iteration   3: 742.617 ±(99.9%) 16.921 ms/op
# Warmup Iteration   4: 752.428 ±(99.9%) 6.589 ms/op
# Warmup Iteration   5: 755.799 ±(99.9%) 2.419 ms/op
Iteration   1: 751.305 ±(99.9%) 4.634 ms/op
                 executeFilterQuery·p0.00:   745.538 ms/op
                 executeFilterQuery·p0.50:   750.256 ms/op
                 executeFilterQuery·p0.90:   757.072 ms/op
                 executeFilterQuery·p0.95:   757.072 ms/op
                 executeFilterQuery·p0.99:   757.072 ms/op
                 executeFilterQuery·p0.999:  757.072 ms/op
                 executeFilterQuery·p0.9999: 757.072 ms/op
                 executeFilterQuery·p1.00:   757.072 ms/op

Iteration   2: 751.529 ±(99.9%) 4.764 ms/op
                 executeFilterQuery·p0.00:   745.538 ms/op
                 executeFilterQuery·p0.50:   750.780 ms/op
                 executeFilterQuery·p0.90:   758.645 ms/op
                 executeFilterQuery·p0.95:   760.218 ms/op
                 executeFilterQuery·p0.99:   760.218 ms/op
                 executeFilterQuery·p0.999:  760.218 ms/op
                 executeFilterQuery·p0.9999: 760.218 ms/op
                 executeFilterQuery·p1.00:   760.218 ms/op

Iteration   3: 755.199 ±(99.9%) 4.848 ms/op
                 executeFilterQuery·p0.00:   747.635 ms/op
                 executeFilterQuery·p0.50:   756.548 ms/op
                 executeFilterQuery·p0.90:   760.742 ms/op
                 executeFilterQuery·p0.95:   762.315 ms/op
                 executeFilterQuery·p0.99:   762.315 ms/op
                 executeFilterQuery·p0.999:  762.315 ms/op
                 executeFilterQuery·p0.9999: 762.315 ms/op
                 executeFilterQuery·p1.00:   762.315 ms/op

Iteration   4: 757.297 ±(99.9%) 1.327 ms/op
                 executeFilterQuery·p0.00:   756.023 ms/op
                 executeFilterQuery·p0.50:   757.072 ms/op
                 executeFilterQuery·p0.90:   759.169 ms/op
                 executeFilterQuery·p0.95:   760.218 ms/op
                 executeFilterQuery·p0.99:   760.218 ms/op
                 executeFilterQuery·p0.999:  760.218 ms/op
                 executeFilterQuery·p0.9999: 760.218 ms/op
                 executeFilterQuery·p1.00:   760.218 ms/op

Iteration   5: 732.430 ±(99.9%) 13.292 ms/op
                 executeFilterQuery·p0.00:   720.372 ms/op
                 executeFilterQuery·p0.50:   728.236 ms/op
                 executeFilterQuery·p0.90:   758.645 ms/op
                 executeFilterQuery·p0.95:   759.169 ms/op
                 executeFilterQuery·p0.99:   759.169 ms/op
                 executeFilterQuery·p0.999:  759.169 ms/op
                 executeFilterQuery·p0.9999: 759.169 ms/op
                 executeFilterQuery·p1.00:   759.169 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 70
  mean =    749.552 ±(99.9%) 4.424 ms/op

  Histogram, ms/op:
    [720.000, 725.000) = 3 
    [725.000, 730.000) = 6 
    [730.000, 735.000) = 1 
    [735.000, 740.000) = 2 
    [740.000, 745.000) = 0 
    [745.000, 750.000) = 15 
    [750.000, 755.000) = 11 
    [755.000, 760.000) = 29 
    [760.000, 765.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    720.372 ms/op
     p(50.0000) =    753.402 ms/op
     p(90.0000) =    758.120 ms/op
     p(95.0000) =    759.641 ms/op
     p(99.0000) =    762.315 ms/op
     p(99.9000) =    762.315 ms/op
     p(99.9900) =    762.315 ms/op
     p(99.9990) =    762.315 ms/op
     p(99.9999) =    762.315 ms/op
    p(100.0000) =    762.315 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 34.31% complete, ETA 05:38:59
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2009.701 ±(99.9%) 9481.565 ms/op
# Warmup Iteration   2: 756.173 ±(99.9%) 18.834 ms/op
# Warmup Iteration   3: 749.282 ±(99.9%) 14.982 ms/op
# Warmup Iteration   4: 769.010 ±(99.9%) 5.721 ms/op
# Warmup Iteration   5: 763.738 ±(99.9%) 4.113 ms/op
Iteration   1: 763.139 ±(99.9%) 4.154 ms/op
                 executeFilterQuery·p0.00:   760.218 ms/op
                 executeFilterQuery·p0.50:   762.315 ms/op
                 executeFilterQuery·p0.90:   769.655 ms/op
                 executeFilterQuery·p0.95:   774.898 ms/op
                 executeFilterQuery·p0.99:   774.898 ms/op
                 executeFilterQuery·p0.999:  774.898 ms/op
                 executeFilterQuery·p0.9999: 774.898 ms/op
                 executeFilterQuery·p1.00:   774.898 ms/op

Iteration   2: 771.510 ±(99.9%) 6.528 ms/op
                 executeFilterQuery·p0.00:   762.315 ms/op
                 executeFilterQuery·p0.50:   773.849 ms/op
                 executeFilterQuery·p0.90:   778.253 ms/op
                 executeFilterQuery·p0.95:   779.092 ms/op
                 executeFilterQuery·p0.99:   779.092 ms/op
                 executeFilterQuery·p0.999:  779.092 ms/op
                 executeFilterQuery·p0.9999: 779.092 ms/op
                 executeFilterQuery·p1.00:   779.092 ms/op

Iteration   3: 767.154 ±(99.9%) 2.833 ms/op
                 executeFilterQuery·p0.00:   764.412 ms/op
                 executeFilterQuery·p0.50:   766.509 ms/op
                 executeFilterQuery·p0.90:   771.542 ms/op
                 executeFilterQuery·p0.95:   772.801 ms/op
                 executeFilterQuery·p0.99:   772.801 ms/op
                 executeFilterQuery·p0.999:  772.801 ms/op
                 executeFilterQuery·p0.9999: 772.801 ms/op
                 executeFilterQuery·p1.00:   772.801 ms/op

Iteration   4: 774.656 ±(99.9%) 5.156 ms/op
                 executeFilterQuery·p0.00:   768.606 ms/op
                 executeFilterQuery·p0.50:   776.995 ms/op
                 executeFilterQuery·p0.90:   779.721 ms/op
                 executeFilterQuery·p0.95:   780.141 ms/op
                 executeFilterQuery·p0.99:   780.141 ms/op
                 executeFilterQuery·p0.999:  780.141 ms/op
                 executeFilterQuery·p0.9999: 780.141 ms/op
                 executeFilterQuery·p1.00:   780.141 ms/op

Iteration   5: 756.847 ±(99.9%) 18.801 ms/op
                 executeFilterQuery·p0.00:   730.857 ms/op
                 executeFilterQuery·p0.50:   761.790 ms/op
                 executeFilterQuery·p0.90:   778.043 ms/op
                 executeFilterQuery·p0.95:   781.189 ms/op
                 executeFilterQuery·p0.99:   781.189 ms/op
                 executeFilterQuery·p0.999:  781.189 ms/op
                 executeFilterQuery·p0.9999: 781.189 ms/op
                 executeFilterQuery·p1.00:   781.189 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 67
  mean =    766.462 ±(99.9%) 4.362 ms/op

  Histogram, ms/op:
    [730.000, 735.000) = 3 
    [735.000, 740.000) = 0 
    [740.000, 745.000) = 1 
    [745.000, 750.000) = 0 
    [750.000, 755.000) = 2 
    [755.000, 760.000) = 0 
    [760.000, 765.000) = 19 
    [765.000, 770.000) = 18 
    [770.000, 775.000) = 11 
    [775.000, 780.000) = 11 
    [780.000, 785.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    730.857 ms/op
     p(50.0000) =    766.509 ms/op
     p(90.0000) =    778.043 ms/op
     p(95.0000) =    779.092 ms/op
     p(99.0000) =    781.189 ms/op
     p(99.9000) =    781.189 ms/op
     p(99.9900) =    781.189 ms/op
     p(99.9990) =    781.189 ms/op
     p(99.9999) =    781.189 ms/op
    p(100.0000) =    781.189 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 35.29% complete, ETA 05:27:53
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

13069.451 ms/op
# Warmup Iteration   2: 1529.723 ±(99.9%) 419.527 ms/op
# Warmup Iteration   3: 1438.946 ±(99.9%) 54.569 ms/op
# Warmup Iteration   4: 1495.269 ±(99.9%) 30.120 ms/op
# Warmup Iteration   5: 1503.358 ±(99.9%) 50.609 ms/op
Iteration   1: 1498.265 ±(99.9%) 15.631 ms/op
                 executeFilterQuery·p0.00:   1488.978 ms/op
                 executeFilterQuery·p0.50:   1497.367 ms/op
                 executeFilterQuery·p0.90:   1509.949 ms/op
                 executeFilterQuery·p0.95:   1509.949 ms/op
                 executeFilterQuery·p0.99:   1509.949 ms/op
                 executeFilterQuery·p0.999:  1509.949 ms/op
                 executeFilterQuery·p0.9999: 1509.949 ms/op
                 executeFilterQuery·p1.00:   1509.949 ms/op

Iteration   2: 1493.172 ±(99.9%) 67.185 ms/op
                 executeFilterQuery·p0.00:   1438.646 ms/op
                 executeFilterQuery·p0.50:   1505.755 ms/op
                 executeFilterQuery·p0.90:   1516.241 ms/op
                 executeFilterQuery·p0.95:   1516.241 ms/op
                 executeFilterQuery·p0.99:   1516.241 ms/op
                 executeFilterQuery·p0.999:  1516.241 ms/op
                 executeFilterQuery·p0.9999: 1516.241 ms/op
                 executeFilterQuery·p1.00:   1516.241 ms/op

Iteration   3: 1435.351 ±(99.9%) 14.132 ms/op
                 executeFilterQuery·p0.00:   1423.966 ms/op
                 executeFilterQuery·p0.50:   1434.452 ms/op
                 executeFilterQuery·p0.90:   1444.938 ms/op
                 executeFilterQuery·p0.95:   1444.938 ms/op
                 executeFilterQuery·p0.99:   1444.938 ms/op
                 executeFilterQuery·p0.999:  1444.938 ms/op
                 executeFilterQuery·p0.9999: 1444.938 ms/op
                 executeFilterQuery·p1.00:   1444.938 ms/op

Iteration   4: 1438.347 ±(99.9%) 8.806 ms/op
                 executeFilterQuery·p0.00:   1432.355 ms/op
                 executeFilterQuery·p0.50:   1440.743 ms/op
                 executeFilterQuery·p0.90:   1442.841 ms/op
                 executeFilterQuery·p0.95:   1442.841 ms/op
                 executeFilterQuery·p0.99:   1442.841 ms/op
                 executeFilterQuery·p0.999:  1442.841 ms/op
                 executeFilterQuery·p0.9999: 1442.841 ms/op
                 executeFilterQuery·p1.00:   1442.841 ms/op

Iteration   5: 1435.950 ±(99.9%) 5.256 ms/op
                 executeFilterQuery·p0.00:   1432.355 ms/op
                 executeFilterQuery·p0.50:   1436.549 ms/op
                 executeFilterQuery·p0.90:   1438.646 ms/op
                 executeFilterQuery·p0.95:   1438.646 ms/op
                 executeFilterQuery·p0.99:   1438.646 ms/op
                 executeFilterQuery·p0.999:  1438.646 ms/op
                 executeFilterQuery·p0.9999: 1438.646 ms/op
                 executeFilterQuery·p1.00:   1438.646 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 35
  mean =   1460.217 ±(99.9%) 19.673 ms/op

  Histogram, ms/op:
    [1420.000, 1430.000) = 1 
    [1430.000, 1440.000) = 16 
    [1440.000, 1450.000) = 5 
    [1450.000, 1460.000) = 0 
    [1460.000, 1470.000) = 1 
    [1470.000, 1480.000) = 0 
    [1480.000, 1490.000) = 1 
    [1490.000, 1500.000) = 4 
    [1500.000, 1510.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =   1423.966 ms/op
     p(50.0000) =   1440.743 ms/op
     p(90.0000) =   1508.691 ms/op
     p(95.0000) =   1514.563 ms/op
     p(99.0000) =   1516.241 ms/op
     p(99.9000) =   1516.241 ms/op
     p(99.9900) =   1516.241 ms/op
     p(99.9990) =   1516.241 ms/op
     p(99.9999) =   1516.241 ms/op
    p(100.0000) =   1516.241 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 36.27% complete, ETA 05:17:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

14344.520 ms/op
# Warmup Iteration   2: 1582.151 ±(99.9%) 436.374 ms/op
# Warmup Iteration   3: 1479.091 ±(99.9%) 71.305 ms/op
# Warmup Iteration   4: 1533.917 ±(99.9%) 18.865 ms/op
# Warmup Iteration   5: 1532.719 ±(99.9%) 1.785 ms/op
Iteration   1: 1500.662 ±(99.9%) 102.138 ms/op
                 executeFilterQuery·p0.00:   1449.132 ms/op
                 executeFilterQuery·p0.50:   1526.727 ms/op
                 executeFilterQuery·p0.90:   1545.601 ms/op
                 executeFilterQuery·p0.95:   1545.601 ms/op
                 executeFilterQuery·p0.99:   1545.601 ms/op
                 executeFilterQuery·p0.999:  1545.601 ms/op
                 executeFilterQuery·p0.9999: 1545.601 ms/op
                 executeFilterQuery·p1.00:   1545.601 ms/op

Iteration   2: 1459.917 ±(99.9%) 29.043 ms/op
                 executeFilterQuery·p0.00:   1447.035 ms/op
                 executeFilterQuery·p0.50:   1455.423 ms/op
                 executeFilterQuery·p0.90:   1482.686 ms/op
                 executeFilterQuery·p0.95:   1482.686 ms/op
                 executeFilterQuery·p0.99:   1482.686 ms/op
                 executeFilterQuery·p0.999:  1482.686 ms/op
                 executeFilterQuery·p0.9999: 1482.686 ms/op
                 executeFilterQuery·p1.00:   1482.686 ms/op

Iteration   3: 1461.116 ±(99.9%) 20.537 ms/op
                 executeFilterQuery·p0.00:   1449.132 ms/op
                 executeFilterQuery·p0.50:   1459.618 ms/op
                 executeFilterQuery·p0.90:   1478.492 ms/op
                 executeFilterQuery·p0.95:   1478.492 ms/op
                 executeFilterQuery·p0.99:   1478.492 ms/op
                 executeFilterQuery·p0.999:  1478.492 ms/op
                 executeFilterQuery·p0.9999: 1478.492 ms/op
                 executeFilterQuery·p1.00:   1478.492 ms/op

Iteration   4: 1454.824 ±(99.9%) 8.926 ms/op
                 executeFilterQuery·p0.00:   1449.132 ms/op
                 executeFilterQuery·p0.50:   1457.521 ms/op
                 executeFilterQuery·p0.90:   1457.521 ms/op
                 executeFilterQuery·p0.95:   1457.521 ms/op
                 executeFilterQuery·p0.99:   1457.521 ms/op
                 executeFilterQuery·p0.999:  1457.521 ms/op
                 executeFilterQuery·p0.9999: 1457.521 ms/op
                 executeFilterQuery·p1.00:   1457.521 ms/op

Iteration   5: 1519.536 ±(99.9%) 6.010 ms/op
                 executeFilterQuery·p0.00:   1516.241 ms/op
                 executeFilterQuery·p0.50:   1520.435 ms/op
                 executeFilterQuery·p0.90:   1522.532 ms/op
                 executeFilterQuery·p0.95:   1522.532 ms/op
                 executeFilterQuery·p0.99:   1522.532 ms/op
                 executeFilterQuery·p0.999:  1522.532 ms/op
                 executeFilterQuery·p0.9999: 1522.532 ms/op
                 executeFilterQuery·p1.00:   1522.532 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 35
  mean =   1479.211 ±(99.9%) 20.250 ms/op

  Histogram, ms/op:
    [1440.000, 1450.000) = 6 
    [1450.000, 1460.000) = 13 
    [1460.000, 1470.000) = 3 
    [1470.000, 1480.000) = 1 
    [1480.000, 1490.000) = 1 
    [1490.000, 1500.000) = 0 
    [1500.000, 1510.000) = 0 
    [1510.000, 1520.000) = 3 
    [1520.000, 1530.000) = 5 
    [1530.000, 1540.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1447.035 ms/op
     p(50.0000) =   1459.618 ms/op
     p(90.0000) =   1530.082 ms/op
     p(95.0000) =   1540.568 ms/op
     p(99.0000) =   1545.601 ms/op
     p(99.9000) =   1545.601 ms/op
     p(99.9900) =   1545.601 ms/op
     p(99.9990) =   1545.601 ms/op
     p(99.9999) =   1545.601 ms/op
    p(100.0000) =   1545.601 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 37.25% complete, ETA 05:07:23
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

13757.317 ms/op
# Warmup Iteration   2: 1664.789 ±(99.9%) 668.691 ms/op
# Warmup Iteration   3: 1477.593 ±(99.9%) 66.398 ms/op
# Warmup Iteration   4: 1525.828 ±(99.9%) 84.925 ms/op
# Warmup Iteration   5: 3457.505 ±(99.9%) 60546.893 ms/op
Iteration   1: 1562.079 ±(99.9%) 18.780 ms/op
                 executeFilterQuery·p0.00:   1543.504 ms/op
                 executeFilterQuery·p0.50:   1564.475 ms/op
                 executeFilterQuery·p0.90:   1566.573 ms/op
                 executeFilterQuery·p0.95:   1566.573 ms/op
                 executeFilterQuery·p0.99:   1566.573 ms/op
                 executeFilterQuery·p0.999:  1566.573 ms/op
                 executeFilterQuery·p0.9999: 1566.573 ms/op
                 executeFilterQuery·p1.00:   1566.573 ms/op

Iteration   2: 1561.180 ±(99.9%) 21.098 ms/op
                 executeFilterQuery·p0.00:   1547.698 ms/op
                 executeFilterQuery·p0.50:   1564.475 ms/op
                 executeFilterQuery·p0.90:   1568.670 ms/op
                 executeFilterQuery·p0.95:   1568.670 ms/op
                 executeFilterQuery·p0.99:   1568.670 ms/op
                 executeFilterQuery·p0.999:  1568.670 ms/op
                 executeFilterQuery·p0.9999: 1568.670 ms/op
                 executeFilterQuery·p1.00:   1568.670 ms/op

Iteration   3: 1558.484 ±(99.9%) 32.659 ms/op
                 executeFilterQuery·p0.00:   1530.921 ms/op
                 executeFilterQuery·p0.50:   1566.573 ms/op
                 executeFilterQuery·p0.90:   1568.670 ms/op
                 executeFilterQuery·p0.95:   1568.670 ms/op
                 executeFilterQuery·p0.99:   1568.670 ms/op
                 executeFilterQuery·p0.999:  1568.670 ms/op
                 executeFilterQuery·p0.9999: 1568.670 ms/op
                 executeFilterQuery·p1.00:   1568.670 ms/op

Iteration   4: 1553.390 ±(99.9%) 34.463 ms/op
                 executeFilterQuery·p0.00:   1528.824 ms/op
                 executeFilterQuery·p0.50:   1564.475 ms/op
                 executeFilterQuery·p0.90:   1566.573 ms/op
                 executeFilterQuery·p0.95:   1566.573 ms/op
                 executeFilterQuery·p0.99:   1566.573 ms/op
                 executeFilterQuery·p0.999:  1566.573 ms/op
                 executeFilterQuery·p0.9999: 1566.573 ms/op
                 executeFilterQuery·p1.00:   1566.573 ms/op

Iteration   5: 1559.382 ±(99.9%) 26.278 ms/op
                 executeFilterQuery·p0.00:   1541.407 ms/op
                 executeFilterQuery·p0.50:   1564.475 ms/op
                 executeFilterQuery·p0.90:   1568.670 ms/op
                 executeFilterQuery·p0.95:   1568.670 ms/op
                 executeFilterQuery·p0.99:   1568.670 ms/op
                 executeFilterQuery·p0.999:  1568.670 ms/op
                 executeFilterQuery·p0.9999: 1568.670 ms/op
                 executeFilterQuery·p1.00:   1568.670 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 35
  mean =   1558.903 ±(99.9%) 7.193 ms/op

  Histogram, ms/op:
    [1520.000, 1525.000) = 0 
    [1525.000, 1530.000) = 1 
    [1530.000, 1535.000) = 1 
    [1535.000, 1540.000) = 1 
    [1540.000, 1545.000) = 3 
    [1545.000, 1550.000) = 4 
    [1550.000, 1555.000) = 0 
    [1555.000, 1560.000) = 0 
    [1560.000, 1565.000) = 11 

  Percentiles, ms/op:
      p(0.0000) =   1528.824 ms/op
     p(50.0000) =   1564.475 ms/op
     p(90.0000) =   1568.670 ms/op
     p(95.0000) =   1568.670 ms/op
     p(99.0000) =   1568.670 ms/op
     p(99.9000) =   1568.670 ms/op
     p(99.9900) =   1568.670 ms/op
     p(99.9990) =   1568.670 ms/op
     p(99.9999) =   1568.670 ms/op
    p(100.0000) =   1568.670 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 38.24% complete, ETA 04:57:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

81.844 ±(99.9%) 11.233 ms/op
# Warmup Iteration   2: 78.400 ±(99.9%) 0.699 ms/op
# Warmup Iteration   3: 80.271 ±(99.9%) 0.320 ms/op
# Warmup Iteration   4: 80.054 ±(99.9%) 0.266 ms/op
# Warmup Iteration   5: 78.868 ±(99.9%) 0.452 ms/op
Iteration   1: 79.261 ±(99.9%) 0.524 ms/op
                 executeFilterQuery·p0.00:   74.449 ms/op
                 executeFilterQuery·p0.50:   79.299 ms/op
                 executeFilterQuery·p0.90:   80.871 ms/op
                 executeFilterQuery·p0.95:   81.396 ms/op
                 executeFilterQuery·p0.99:   88.023 ms/op
                 executeFilterQuery·p0.999:  89.784 ms/op
                 executeFilterQuery·p0.9999: 89.784 ms/op
                 executeFilterQuery·p1.00:   89.784 ms/op

Iteration   2: 77.181 ±(99.9%) 0.419 ms/op
                 executeFilterQuery·p0.00:   73.531 ms/op
                 executeFilterQuery·p0.50:   76.808 ms/op
                 executeFilterQuery·p0.90:   79.167 ms/op
                 executeFilterQuery·p0.95:   79.757 ms/op
                 executeFilterQuery·p0.99:   80.832 ms/op
                 executeFilterQuery·p0.999:  80.871 ms/op
                 executeFilterQuery·p0.9999: 80.871 ms/op
                 executeFilterQuery·p1.00:   80.871 ms/op

Iteration   3: 76.707 ±(99.9%) 0.527 ms/op
                 executeFilterQuery·p0.00:   73.269 ms/op
                 executeFilterQuery·p0.50:   76.284 ms/op
                 executeFilterQuery·p0.90:   79.167 ms/op
                 executeFilterQuery·p0.95:   80.019 ms/op
                 executeFilterQuery·p0.99:   81.553 ms/op
                 executeFilterQuery·p0.999:  81.789 ms/op
                 executeFilterQuery·p0.9999: 81.789 ms/op
                 executeFilterQuery·p1.00:   81.789 ms/op

Iteration   4: 76.845 ±(99.9%) 0.508 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   76.546 ms/op
                 executeFilterQuery·p0.90:   79.036 ms/op
                 executeFilterQuery·p0.95:   79.954 ms/op
                 executeFilterQuery·p0.99:   80.832 ms/op
                 executeFilterQuery·p0.999:  80.871 ms/op
                 executeFilterQuery·p0.9999: 80.871 ms/op
                 executeFilterQuery·p1.00:   80.871 ms/op

Iteration   5: 76.342 ±(99.9%) 0.601 ms/op
                 executeFilterQuery·p0.00:   71.565 ms/op
                 executeFilterQuery·p0.50:   75.891 ms/op
                 executeFilterQuery·p0.90:   78.643 ms/op
                 executeFilterQuery·p0.95:   80.144 ms/op
                 executeFilterQuery·p0.99:   86.981 ms/op
                 executeFilterQuery·p0.999:  89.784 ms/op
                 executeFilterQuery·p0.9999: 89.784 ms/op
                 executeFilterQuery·p1.00:   89.784 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 640
  mean =     77.247 ±(99.9%) 0.263 ms/op

  Histogram, ms/op:
    [70.000, 71.250) = 0 
    [71.250, 72.500) = 1 
    [72.500, 73.750) = 14 
    [73.750, 75.000) = 49 
    [75.000, 76.250) = 178 
    [76.250, 77.500) = 135 
    [77.500, 78.750) = 105 
    [78.750, 80.000) = 101 
    [80.000, 81.250) = 47 
    [81.250, 82.500) = 8 
    [82.500, 83.750) = 0 
    [83.750, 85.000) = 0 
    [85.000, 86.250) = 0 
    [86.250, 87.500) = 0 
    [87.500, 88.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     71.565 ms/op
     p(50.0000) =     76.939 ms/op
     p(90.0000) =     79.941 ms/op
     p(95.0000) =     80.609 ms/op
     p(99.0000) =     81.789 ms/op
     p(99.9000) =     89.784 ms/op
     p(99.9900) =     89.784 ms/op
     p(99.9990) =     89.784 ms/op
     p(99.9999) =     89.784 ms/op
    p(100.0000) =     89.784 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 39.22% complete, ETA 04:48:27
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

82.483 ±(99.9%) 10.577 ms/op
# Warmup Iteration   2: 78.135 ±(99.9%) 0.614 ms/op
# Warmup Iteration   3: 79.602 ±(99.9%) 0.389 ms/op
# Warmup Iteration   4: 78.716 ±(99.9%) 0.339 ms/op
# Warmup Iteration   5: 78.832 ±(99.9%) 0.341 ms/op
Iteration   1: 77.913 ±(99.9%) 0.552 ms/op
                 executeFilterQuery·p0.00:   74.711 ms/op
                 executeFilterQuery·p0.50:   77.988 ms/op
                 executeFilterQuery·p0.90:   80.609 ms/op
                 executeFilterQuery·p0.95:   81.134 ms/op
                 executeFilterQuery·p0.99:   84.864 ms/op
                 executeFilterQuery·p0.999:  85.852 ms/op
                 executeFilterQuery·p0.9999: 85.852 ms/op
                 executeFilterQuery·p1.00:   85.852 ms/op

Iteration   2: 77.290 ±(99.9%) 0.556 ms/op
                 executeFilterQuery·p0.00:   74.449 ms/op
                 executeFilterQuery·p0.50:   77.398 ms/op
                 executeFilterQuery·p0.90:   79.980 ms/op
                 executeFilterQuery·p0.95:   80.681 ms/op
                 executeFilterQuery·p0.99:   81.954 ms/op
                 executeFilterQuery·p0.999:  82.182 ms/op
                 executeFilterQuery·p0.9999: 82.182 ms/op
                 executeFilterQuery·p1.00:   82.182 ms/op

Iteration   3: 76.894 ±(99.9%) 0.540 ms/op
                 executeFilterQuery·p0.00:   74.449 ms/op
                 executeFilterQuery·p0.50:   77.201 ms/op
                 executeFilterQuery·p0.90:   79.299 ms/op
                 executeFilterQuery·p0.95:   80.085 ms/op
                 executeFilterQuery·p0.99:   81.501 ms/op
                 executeFilterQuery·p0.999:  81.658 ms/op
                 executeFilterQuery·p0.9999: 81.658 ms/op
                 executeFilterQuery·p1.00:   81.658 ms/op

Iteration   4: 77.417 ±(99.9%) 0.561 ms/op
                 executeFilterQuery·p0.00:   74.711 ms/op
                 executeFilterQuery·p0.50:   76.939 ms/op
                 executeFilterQuery·p0.90:   80.360 ms/op
                 executeFilterQuery·p0.95:   80.812 ms/op
                 executeFilterQuery·p0.99:   85.266 ms/op
                 executeFilterQuery·p0.999:  86.901 ms/op
                 executeFilterQuery·p0.9999: 86.901 ms/op
                 executeFilterQuery·p1.00:   86.901 ms/op

Iteration   5: 75.933 ±(99.9%) 0.274 ms/op
                 executeFilterQuery·p0.00:   73.925 ms/op
                 executeFilterQuery·p0.50:   75.497 ms/op
                 executeFilterQuery·p0.90:   77.280 ms/op
                 executeFilterQuery·p0.95:   77.962 ms/op
                 executeFilterQuery·p0.99:   79.917 ms/op
                 executeFilterQuery·p0.999:  80.085 ms/op
                 executeFilterQuery·p0.9999: 80.085 ms/op
                 executeFilterQuery·p1.00:   80.085 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 644
  mean =     77.084 ±(99.9%) 0.238 ms/op

  Histogram, ms/op:
    [70.000, 71.250) = 0 
    [71.250, 72.500) = 0 
    [72.500, 73.750) = 0 
    [73.750, 75.000) = 61 
    [75.000, 76.250) = 192 
    [76.250, 77.500) = 145 
    [77.500, 78.750) = 137 
    [78.750, 80.000) = 54 
    [80.000, 81.250) = 43 
    [81.250, 82.500) = 10 
    [82.500, 83.750) = 0 
    [83.750, 85.000) = 0 
    [85.000, 86.250) = 1 
    [86.250, 87.500) = 1 
    [87.500, 88.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     73.925 ms/op
     p(50.0000) =     76.808 ms/op
     p(90.0000) =     79.692 ms/op
     p(95.0000) =     80.609 ms/op
     p(99.0000) =     81.396 ms/op
     p(99.9000) =     86.901 ms/op
     p(99.9900) =     86.901 ms/op
     p(99.9990) =     86.901 ms/op
     p(99.9999) =     86.901 ms/op
    p(100.0000) =     86.901 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 40.20% complete, ETA 04:39:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

111.538 ±(99.9%) 13.596 ms/op
# Warmup Iteration   2: 117.653 ±(99.9%) 0.295 ms/op
# Warmup Iteration   3: 117.239 ±(99.9%) 0.129 ms/op
# Warmup Iteration   4: 117.127 ±(99.9%) 0.107 ms/op
# Warmup Iteration   5: 117.240 ±(99.9%) 0.117 ms/op
Iteration   1: 117.177 ±(99.9%) 0.120 ms/op
                 executeFilterQuery·p0.00:   116.523 ms/op
                 executeFilterQuery·p0.50:   117.047 ms/op
                 executeFilterQuery·p0.90:   117.703 ms/op
                 executeFilterQuery·p0.95:   117.834 ms/op
                 executeFilterQuery·p0.99:   118.096 ms/op
                 executeFilterQuery·p0.999:  118.096 ms/op
                 executeFilterQuery·p0.9999: 118.096 ms/op
                 executeFilterQuery·p1.00:   118.096 ms/op

Iteration   2: 117.274 ±(99.9%) 0.209 ms/op
                 executeFilterQuery·p0.00:   116.654 ms/op
                 executeFilterQuery·p0.50:   117.178 ms/op
                 executeFilterQuery·p0.90:   117.703 ms/op
                 executeFilterQuery·p0.95:   117.886 ms/op
                 executeFilterQuery·p0.99:   120.586 ms/op
                 executeFilterQuery·p0.999:  120.586 ms/op
                 executeFilterQuery·p0.9999: 120.586 ms/op
                 executeFilterQuery·p1.00:   120.586 ms/op

Iteration   3: 117.558 ±(99.9%) 0.490 ms/op
                 executeFilterQuery·p0.00:   116.916 ms/op
                 executeFilterQuery·p0.50:   117.441 ms/op
                 executeFilterQuery·p0.90:   117.834 ms/op
                 executeFilterQuery·p0.95:   118.096 ms/op
                 executeFilterQuery·p0.99:   129.368 ms/op
                 executeFilterQuery·p0.999:  129.368 ms/op
                 executeFilterQuery·p0.9999: 129.368 ms/op
                 executeFilterQuery·p1.00:   129.368 ms/op

Iteration   4: 117.424 ±(99.9%) 0.114 ms/op
                 executeFilterQuery·p0.00:   116.916 ms/op
                 executeFilterQuery·p0.50:   117.309 ms/op
                 executeFilterQuery·p0.90:   117.834 ms/op
                 executeFilterQuery·p0.95:   118.057 ms/op
                 executeFilterQuery·p0.99:   118.358 ms/op
                 executeFilterQuery·p0.999:  118.358 ms/op
                 executeFilterQuery·p0.9999: 118.358 ms/op
                 executeFilterQuery·p1.00:   118.358 ms/op

Iteration   5: 117.541 ±(99.9%) 0.212 ms/op
                 executeFilterQuery·p0.00:   116.785 ms/op
                 executeFilterQuery·p0.50:   117.441 ms/op
                 executeFilterQuery·p0.90:   117.834 ms/op
                 executeFilterQuery·p0.95:   117.965 ms/op
                 executeFilterQuery·p0.99:   121.635 ms/op
                 executeFilterQuery·p0.999:  121.635 ms/op
                 executeFilterQuery·p0.9999: 121.635 ms/op
                 executeFilterQuery·p1.00:   121.635 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 425
  mean =    117.395 ±(99.9%) 0.118 ms/op

  Histogram, ms/op:
    [110.000, 111.250) = 0 
    [111.250, 112.500) = 0 
    [112.500, 113.750) = 0 
    [113.750, 115.000) = 0 
    [115.000, 116.250) = 0 
    [116.250, 117.500) = 310 
    [117.500, 118.750) = 110 
    [118.750, 120.000) = 1 
    [120.000, 121.250) = 2 
    [121.250, 122.500) = 1 
    [122.500, 123.750) = 0 
    [123.750, 125.000) = 0 
    [125.000, 126.250) = 0 
    [126.250, 127.500) = 0 
    [127.500, 128.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    116.523 ms/op
     p(50.0000) =    117.309 ms/op
     p(90.0000) =    117.834 ms/op
     p(95.0000) =    117.965 ms/op
     p(99.0000) =    119.960 ms/op
     p(99.9000) =    129.368 ms/op
     p(99.9900) =    129.368 ms/op
     p(99.9990) =    129.368 ms/op
     p(99.9999) =    129.368 ms/op
    p(100.0000) =    129.368 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 41.18% complete, ETA 04:30:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1126.054 ±(99.9%) 1764.848 ms/op
# Warmup Iteration   2: 762.465 ±(99.9%) 18.253 ms/op
# Warmup Iteration   3: 776.430 ±(99.9%) 12.843 ms/op
# Warmup Iteration   4: 772.397 ±(99.9%) 4.931 ms/op
# Warmup Iteration   5: 743.291 ±(99.9%) 24.932 ms/op
Iteration   1: 741.044 ±(99.9%) 5.379 ms/op
                 executeFilterQuery·p0.00:   732.955 ms/op
                 executeFilterQuery·p0.50:   740.295 ms/op
                 executeFilterQuery·p0.90:   748.159 ms/op
                 executeFilterQuery·p0.95:   748.683 ms/op
                 executeFilterQuery·p0.99:   748.683 ms/op
                 executeFilterQuery·p0.999:  748.683 ms/op
                 executeFilterQuery·p0.9999: 748.683 ms/op
                 executeFilterQuery·p1.00:   748.683 ms/op

Iteration   2: 743.216 ±(99.9%) 10.833 ms/op
                 executeFilterQuery·p0.00:   734.003 ms/op
                 executeFilterQuery·p0.50:   740.295 ms/op
                 executeFilterQuery·p0.90:   761.790 ms/op
                 executeFilterQuery·p0.95:   770.703 ms/op
                 executeFilterQuery·p0.99:   770.703 ms/op
                 executeFilterQuery·p0.999:  770.703 ms/op
                 executeFilterQuery·p0.9999: 770.703 ms/op
                 executeFilterQuery·p1.00:   770.703 ms/op

Iteration   3: 759.169 ±(99.9%) 19.414 ms/op
                 executeFilterQuery·p0.00:   731.906 ms/op
                 executeFilterQuery·p0.50:   770.703 ms/op
                 executeFilterQuery·p0.90:   774.898 ms/op
                 executeFilterQuery·p0.95:   775.946 ms/op
                 executeFilterQuery·p0.99:   775.946 ms/op
                 executeFilterQuery·p0.999:  775.946 ms/op
                 executeFilterQuery·p0.9999: 775.946 ms/op
                 executeFilterQuery·p1.00:   775.946 ms/op

Iteration   4: 772.801 ±(99.9%) 3.118 ms/op
                 executeFilterQuery·p0.00:   768.606 ms/op
                 executeFilterQuery·p0.50:   773.849 ms/op
                 executeFilterQuery·p0.90:   775.946 ms/op
                 executeFilterQuery·p0.95:   775.946 ms/op
                 executeFilterQuery·p0.99:   775.946 ms/op
                 executeFilterQuery·p0.999:  775.946 ms/op
                 executeFilterQuery·p0.9999: 775.946 ms/op
                 executeFilterQuery·p1.00:   775.946 ms/op

Iteration   5: 778.689 ±(99.9%) 4.543 ms/op
                 executeFilterQuery·p0.00:   771.752 ms/op
                 executeFilterQuery·p0.50:   780.141 ms/op
                 executeFilterQuery·p0.90:   782.867 ms/op
                 executeFilterQuery·p0.95:   783.286 ms/op
                 executeFilterQuery·p0.99:   783.286 ms/op
                 executeFilterQuery·p0.999:  783.286 ms/op
                 executeFilterQuery·p0.9999: 783.286 ms/op
                 executeFilterQuery·p1.00:   783.286 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 68
  mean =    758.491 ±(99.9%) 7.407 ms/op

  Histogram, ms/op:
    [730.000, 735.000) = 3 
    [735.000, 740.000) = 10 
    [740.000, 745.000) = 12 
    [745.000, 750.000) = 7 
    [750.000, 755.000) = 1 
    [755.000, 760.000) = 0 
    [760.000, 765.000) = 0 
    [765.000, 770.000) = 4 
    [770.000, 775.000) = 18 
    [775.000, 780.000) = 6 
    [780.000, 785.000) = 7 

  Percentiles, ms/op:
      p(0.0000) =    731.906 ms/op
     p(50.0000) =    768.606 ms/op
     p(90.0000) =    780.141 ms/op
     p(95.0000) =    781.766 ms/op
     p(99.0000) =    783.286 ms/op
     p(99.9000) =    783.286 ms/op
     p(99.9900) =    783.286 ms/op
     p(99.9990) =    783.286 ms/op
     p(99.9999) =    783.286 ms/op
    p(100.0000) =    783.286 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 42.16% complete, ETA 04:22:29
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1050.673 ±(99.9%) 1412.202 ms/op
# Warmup Iteration   2: 740.594 ±(99.9%) 21.228 ms/op
# Warmup Iteration   3: 759.544 ±(99.9%) 4.113 ms/op
# Warmup Iteration   4: 756.847 ±(99.9%) 3.415 ms/op
# Warmup Iteration   5: 721.870 ±(99.9%) 13.808 ms/op
Iteration   1: 720.147 ±(99.9%) 5.473 ms/op
                 executeFilterQuery·p0.00:   713.032 ms/op
                 executeFilterQuery·p0.50:   718.799 ms/op
                 executeFilterQuery·p0.90:   728.760 ms/op
                 executeFilterQuery·p0.95:   734.003 ms/op
                 executeFilterQuery·p0.99:   734.003 ms/op
                 executeFilterQuery·p0.999:  734.003 ms/op
                 executeFilterQuery·p0.9999: 734.003 ms/op
                 executeFilterQuery·p1.00:   734.003 ms/op

Iteration   2: 719.623 ±(99.9%) 1.822 ms/op
                 executeFilterQuery·p0.00:   716.177 ms/op
                 executeFilterQuery·p0.50:   719.323 ms/op
                 executeFilterQuery·p0.90:   721.945 ms/op
                 executeFilterQuery·p0.95:   722.469 ms/op
                 executeFilterQuery·p0.99:   722.469 ms/op
                 executeFilterQuery·p0.999:  722.469 ms/op
                 executeFilterQuery·p0.9999: 722.469 ms/op
                 executeFilterQuery·p1.00:   722.469 ms/op

Iteration   3: 743.965 ±(99.9%) 20.115 ms/op
                 executeFilterQuery·p0.00:   719.323 ms/op
                 executeFilterQuery·p0.50:   754.975 ms/op
                 executeFilterQuery·p0.90:   758.645 ms/op
                 executeFilterQuery·p0.95:   759.169 ms/op
                 executeFilterQuery·p0.99:   759.169 ms/op
                 executeFilterQuery·p0.999:  759.169 ms/op
                 executeFilterQuery·p0.9999: 759.169 ms/op
                 executeFilterQuery·p1.00:   759.169 ms/op

Iteration   4: 758.869 ±(99.9%) 8.485 ms/op
                 executeFilterQuery·p0.00:   752.878 ms/op
                 executeFilterQuery·p0.50:   757.072 ms/op
                 executeFilterQuery·p0.90:   771.752 ms/op
                 executeFilterQuery·p0.95:   784.335 ms/op
                 executeFilterQuery·p0.99:   784.335 ms/op
                 executeFilterQuery·p0.999:  784.335 ms/op
                 executeFilterQuery·p0.9999: 784.335 ms/op
                 executeFilterQuery·p1.00:   784.335 ms/op

Iteration   5: 756.098 ±(99.9%) 4.854 ms/op
                 executeFilterQuery·p0.00:   750.780 ms/op
                 executeFilterQuery·p0.50:   754.975 ms/op
                 executeFilterQuery·p0.90:   763.888 ms/op
                 executeFilterQuery·p0.95:   768.606 ms/op
                 executeFilterQuery·p0.99:   768.606 ms/op
                 executeFilterQuery·p0.999:  768.606 ms/op
                 executeFilterQuery·p0.9999: 768.606 ms/op
                 executeFilterQuery·p1.00:   768.606 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 70
  mean =    739.740 ±(99.9%) 7.915 ms/op

  Histogram, ms/op:
    [710.000, 715.000) = 1 
    [715.000, 720.000) = 17 
    [720.000, 725.000) = 14 
    [725.000, 730.000) = 0 
    [730.000, 735.000) = 1 
    [735.000, 740.000) = 0 
    [740.000, 745.000) = 0 
    [745.000, 750.000) = 0 
    [750.000, 755.000) = 14 
    [755.000, 760.000) = 21 
    [760.000, 765.000) = 0 
    [765.000, 770.000) = 1 
    [770.000, 775.000) = 0 
    [775.000, 780.000) = 0 
    [780.000, 785.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    713.032 ms/op
     p(50.0000) =    752.353 ms/op
     p(90.0000) =    758.120 ms/op
     p(95.0000) =    759.169 ms/op
     p(99.0000) =    784.335 ms/op
     p(99.9000) =    784.335 ms/op
     p(99.9900) =    784.335 ms/op
     p(99.9990) =    784.335 ms/op
     p(99.9999) =    784.335 ms/op
    p(100.0000) =    784.335 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 43.14% complete, ETA 04:14:31
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1365.115 ±(99.9%) 1773.328 ms/op
# Warmup Iteration   2: 1102.473 ±(99.9%) 2.140 ms/op
# Warmup Iteration   3: 1111.724 ±(99.9%) 2.755 ms/op
# Warmup Iteration   4: 1109.393 ±(99.9%) 2.492 ms/op
# Warmup Iteration   5: 1112.423 ±(99.9%) 8.286 ms/op
Iteration   1: 1112.423 ±(99.9%) 5.319 ms/op
                 executeFilterQuery·p0.00:   1109.393 ms/op
                 executeFilterQuery·p0.50:   1111.491 ms/op
                 executeFilterQuery·p0.90:   1119.879 ms/op
                 executeFilterQuery·p0.95:   1119.879 ms/op
                 executeFilterQuery·p0.99:   1119.879 ms/op
                 executeFilterQuery·p0.999:  1119.879 ms/op
                 executeFilterQuery·p0.9999: 1119.879 ms/op
                 executeFilterQuery·p1.00:   1119.879 ms/op

Iteration   2: 1109.160 ±(99.9%) 3.715 ms/op
                 executeFilterQuery·p0.00:   1107.296 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1113.588 ms/op
                 executeFilterQuery·p0.95:   1113.588 ms/op
                 executeFilterQuery·p0.99:   1113.588 ms/op
                 executeFilterQuery·p0.999:  1113.588 ms/op
                 executeFilterQuery·p0.9999: 1113.588 ms/op
                 executeFilterQuery·p1.00:   1113.588 ms/op

Iteration   3: 1113.588 ±(99.9%) 18.814 ms/op
                 executeFilterQuery·p0.00:   1107.296 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1142.948 ms/op
                 executeFilterQuery·p0.95:   1142.948 ms/op
                 executeFilterQuery·p0.99:   1142.948 ms/op
                 executeFilterQuery·p0.999:  1142.948 ms/op
                 executeFilterQuery·p0.9999: 1142.948 ms/op
                 executeFilterQuery·p1.00:   1142.948 ms/op

Iteration   4: 1108.927 ±(99.9%) 2.349 ms/op
                 executeFilterQuery·p0.00:   1107.296 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1111.491 ms/op
                 executeFilterQuery·p0.95:   1111.491 ms/op
                 executeFilterQuery·p0.99:   1111.491 ms/op
                 executeFilterQuery·p0.999:  1111.491 ms/op
                 executeFilterQuery·p0.9999: 1111.491 ms/op
                 executeFilterQuery·p1.00:   1111.491 ms/op

Iteration   5: 1109.626 ±(99.9%) 2.118 ms/op
                 executeFilterQuery·p0.00:   1107.296 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1111.491 ms/op
                 executeFilterQuery·p0.95:   1111.491 ms/op
                 executeFilterQuery·p0.99:   1111.491 ms/op
                 executeFilterQuery·p0.999:  1111.491 ms/op
                 executeFilterQuery·p0.9999: 1111.491 ms/op
                 executeFilterQuery·p1.00:   1111.491 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 45
  mean =   1110.745 ±(99.9%) 2.870 ms/op

  Histogram, ms/op:
    [1100.000, 1105.000) = 0 
    [1105.000, 1110.000) = 29 
    [1110.000, 1115.000) = 14 
    [1115.000, 1120.000) = 1 
    [1120.000, 1125.000) = 0 
    [1125.000, 1130.000) = 0 
    [1130.000, 1135.000) = 0 
    [1135.000, 1140.000) = 0 
    [1140.000, 1145.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1107.296 ms/op
     p(50.0000) =   1109.393 ms/op
     p(90.0000) =   1113.588 ms/op
     p(95.0000) =   1117.992 ms/op
     p(99.0000) =   1142.948 ms/op
     p(99.9000) =   1142.948 ms/op
     p(99.9900) =   1142.948 ms/op
     p(99.9990) =   1142.948 ms/op
     p(99.9999) =   1142.948 ms/op
    p(100.0000) =   1142.948 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 44.12% complete, ETA 04:06:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

3529.507 ±(99.9%) 62727.118 ms/op
# Warmup Iteration   2: 1476.695 ±(99.9%) 74.553 ms/op
# Warmup Iteration   3: 1494.670 ±(99.9%) 83.595 ms/op
# Warmup Iteration   4: 1534.216 ±(99.9%) 22.955 ms/op
# Warmup Iteration   5: 1543.803 ±(99.9%) 27.192 ms/op
Iteration   1: 1516.540 ±(99.9%) 73.143 ms/op
                 executeFilterQuery·p0.00:   1470.104 ms/op
                 executeFilterQuery·p0.50:   1526.727 ms/op
                 executeFilterQuery·p0.90:   1545.601 ms/op
                 executeFilterQuery·p0.95:   1545.601 ms/op
                 executeFilterQuery·p0.99:   1545.601 ms/op
                 executeFilterQuery·p0.999:  1545.601 ms/op
                 executeFilterQuery·p0.9999: 1545.601 ms/op
                 executeFilterQuery·p1.00:   1545.601 ms/op

Iteration   2: 1472.500 ±(99.9%) 32.998 ms/op
                 executeFilterQuery·p0.00:   1463.812 ms/op
                 executeFilterQuery·p0.50:   1465.909 ms/op
                 executeFilterQuery·p0.90:   1503.658 ms/op
                 executeFilterQuery·p0.95:   1503.658 ms/op
                 executeFilterQuery·p0.99:   1503.658 ms/op
                 executeFilterQuery·p0.999:  1503.658 ms/op
                 executeFilterQuery·p0.9999: 1503.658 ms/op
                 executeFilterQuery·p1.00:   1503.658 ms/op

Iteration   3: 1463.213 ±(99.9%) 22.769 ms/op
                 executeFilterQuery·p0.00:   1447.035 ms/op
                 executeFilterQuery·p0.50:   1463.812 ms/op
                 executeFilterQuery·p0.90:   1480.589 ms/op
                 executeFilterQuery·p0.95:   1480.589 ms/op
                 executeFilterQuery·p0.99:   1480.589 ms/op
                 executeFilterQuery·p0.999:  1480.589 ms/op
                 executeFilterQuery·p0.9999: 1480.589 ms/op
                 executeFilterQuery·p1.00:   1480.589 ms/op

Iteration   4: 1432.654 ±(99.9%) 46.871 ms/op
                 executeFilterQuery·p0.00:   1409.286 ms/op
                 executeFilterQuery·p0.50:   1432.355 ms/op
                 executeFilterQuery·p0.90:   1468.006 ms/op
                 executeFilterQuery·p0.95:   1468.006 ms/op
                 executeFilterQuery·p0.99:   1468.006 ms/op
                 executeFilterQuery·p0.999:  1468.006 ms/op
                 executeFilterQuery·p0.9999: 1468.006 ms/op
                 executeFilterQuery·p1.00:   1468.006 ms/op

Iteration   5: 1484.784 ±(99.9%) 81.536 ms/op
                 executeFilterQuery·p0.00:   1447.035 ms/op
                 executeFilterQuery·p0.50:   1468.006 ms/op
                 executeFilterQuery·p0.90:   1533.018 ms/op
                 executeFilterQuery·p0.95:   1533.018 ms/op
                 executeFilterQuery·p0.99:   1533.018 ms/op
                 executeFilterQuery·p0.999:  1533.018 ms/op
                 executeFilterQuery·p0.9999: 1533.018 ms/op
                 executeFilterQuery·p1.00:   1533.018 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 35
  mean =   1473.938 ±(99.9%) 22.135 ms/op

  Histogram, ms/op:
    [1400.000, 1412.500) = 1 
    [1412.500, 1425.000) = 2 
    [1425.000, 1437.500) = 2 
    [1437.500, 1450.000) = 3 
    [1450.000, 1462.500) = 3 
    [1462.500, 1475.000) = 13 
    [1475.000, 1487.500) = 2 
    [1487.500, 1500.000) = 0 
    [1500.000, 1512.500) = 2 
    [1512.500, 1525.000) = 1 
    [1525.000, 1537.500) = 4 
    [1537.500, 1550.000) = 2 
    [1550.000, 1562.500) = 0 
    [1562.500, 1575.000) = 0 
    [1575.000, 1587.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1409.286 ms/op
     p(50.0000) =   1465.909 ms/op
     p(90.0000) =   1533.857 ms/op
     p(95.0000) =   1542.246 ms/op
     p(99.0000) =   1545.601 ms/op
     p(99.9000) =   1545.601 ms/op
     p(99.9900) =   1545.601 ms/op
     p(99.9990) =   1545.601 ms/op
     p(99.9999) =   1545.601 ms/op
    p(100.0000) =   1545.601 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 45.10% complete, ETA 03:59:20
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

3435.834 ±(99.9%) 59697.131 ms/op
# Warmup Iteration   2: 1476.695 ±(99.9%) 72.531 ms/op
# Warmup Iteration   3: 1468.606 ±(99.9%) 94.768 ms/op
# Warmup Iteration   4: 1521.034 ±(99.9%) 24.194 ms/op
# Warmup Iteration   5: 1521.334 ±(99.9%) 17.431 ms/op
Iteration   1: 1520.136 ±(99.9%) 21.373 ms/op
                 executeFilterQuery·p0.00:   1514.144 ms/op
                 executeFilterQuery·p0.50:   1516.241 ms/op
                 executeFilterQuery·p0.90:   1541.407 ms/op
                 executeFilterQuery·p0.95:   1541.407 ms/op
                 executeFilterQuery·p0.99:   1541.407 ms/op
                 executeFilterQuery·p0.999:  1541.407 ms/op
                 executeFilterQuery·p0.9999: 1541.407 ms/op
                 executeFilterQuery·p1.00:   1541.407 ms/op

Iteration   2: 1515.642 ±(99.9%) 8.050 ms/op
                 executeFilterQuery·p0.00:   1507.852 ms/op
                 executeFilterQuery·p0.50:   1516.241 ms/op
                 executeFilterQuery·p0.90:   1518.338 ms/op
                 executeFilterQuery·p0.95:   1518.338 ms/op
                 executeFilterQuery·p0.99:   1518.338 ms/op
                 executeFilterQuery·p0.999:  1518.338 ms/op
                 executeFilterQuery·p0.9999: 1518.338 ms/op
                 executeFilterQuery·p1.00:   1518.338 ms/op

Iteration   3: 1517.439 ±(99.9%) 6.600 ms/op
                 executeFilterQuery·p0.00:   1512.047 ms/op
                 executeFilterQuery·p0.50:   1518.338 ms/op
                 executeFilterQuery·p0.90:   1520.435 ms/op
                 executeFilterQuery·p0.95:   1520.435 ms/op
                 executeFilterQuery·p0.99:   1520.435 ms/op
                 executeFilterQuery·p0.999:  1520.435 ms/op
                 executeFilterQuery·p0.9999: 1520.435 ms/op
                 executeFilterQuery·p1.00:   1520.435 ms/op

Iteration   4: 1519.836 ±(99.9%) 13.557 ms/op
                 executeFilterQuery·p0.00:   1507.852 ms/op
                 executeFilterQuery·p0.50:   1520.435 ms/op
                 executeFilterQuery·p0.90:   1526.727 ms/op
                 executeFilterQuery·p0.95:   1526.727 ms/op
                 executeFilterQuery·p0.99:   1526.727 ms/op
                 executeFilterQuery·p0.999:  1526.727 ms/op
                 executeFilterQuery·p0.9999: 1526.727 ms/op
                 executeFilterQuery·p1.00:   1526.727 ms/op

Iteration   5: 1477.893 ±(99.9%) 104.472 ms/op
                 executeFilterQuery·p0.00:   1413.480 ms/op
                 executeFilterQuery·p0.50:   1493.172 ms/op
                 executeFilterQuery·p0.90:   1522.532 ms/op
                 executeFilterQuery·p0.95:   1522.532 ms/op
                 executeFilterQuery·p0.99:   1522.532 ms/op
                 executeFilterQuery·p0.999:  1522.532 ms/op
                 executeFilterQuery·p0.9999: 1522.532 ms/op
                 executeFilterQuery·p1.00:   1522.532 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 35
  mean =   1510.189 ±(99.9%) 15.836 ms/op

  Histogram, ms/op:
    [1400.000, 1412.500) = 0 
    [1412.500, 1425.000) = 1 
    [1425.000, 1437.500) = 1 
    [1437.500, 1450.000) = 1 
    [1450.000, 1462.500) = 0 
    [1462.500, 1475.000) = 0 
    [1475.000, 1487.500) = 0 
    [1487.500, 1500.000) = 1 
    [1500.000, 1512.500) = 3 
    [1512.500, 1525.000) = 26 
    [1525.000, 1537.500) = 1 
    [1537.500, 1550.000) = 1 
    [1550.000, 1562.500) = 0 
    [1562.500, 1575.000) = 0 
    [1575.000, 1587.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1413.480 ms/op
     p(50.0000) =   1518.338 ms/op
     p(90.0000) =   1523.371 ms/op
     p(95.0000) =   1529.663 ms/op
     p(99.0000) =   1541.407 ms/op
     p(99.9000) =   1541.407 ms/op
     p(99.9900) =   1541.407 ms/op
     p(99.9990) =   1541.407 ms/op
     p(99.9999) =   1541.407 ms/op
    p(100.0000) =   1541.407 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 46.08% complete, ETA 03:52:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

2167.197 ±(99.9%) 703.477 ms/op
# Warmup Iteration   2: 2353.005 ±(99.9%) 30.215 ms/op
# Warmup Iteration   3: 2353.005 ±(99.9%) 73.126 ms/op
# Warmup Iteration   4: 2349.649 ±(99.9%) 52.831 ms/op
# Warmup Iteration   5: 2342.938 ±(99.9%) 21.669 ms/op
Iteration   1: 2346.294 ±(99.9%) 21.669 ms/op
                 executeFilterQuery·p0.00:   2336.227 ms/op
                 executeFilterQuery·p0.50:   2348.810 ms/op
                 executeFilterQuery·p0.90:   2348.810 ms/op
                 executeFilterQuery·p0.95:   2348.810 ms/op
                 executeFilterQuery·p0.99:   2348.810 ms/op
                 executeFilterQuery·p0.999:  2348.810 ms/op
                 executeFilterQuery·p0.9999: 2348.810 ms/op
                 executeFilterQuery·p1.00:   2348.810 ms/op

Iteration   2: 2342.099 ±(99.9%) 14.446 ms/op
                 executeFilterQuery·p0.00:   2340.422 ms/op
                 executeFilterQuery·p0.50:   2340.422 ms/op
                 executeFilterQuery·p0.90:   2348.810 ms/op
                 executeFilterQuery·p0.95:   2348.810 ms/op
                 executeFilterQuery·p0.99:   2348.810 ms/op
                 executeFilterQuery·p0.999:  2348.810 ms/op
                 executeFilterQuery·p0.9999: 2348.810 ms/op
                 executeFilterQuery·p1.00:   2348.810 ms/op

Iteration   3: 2350.488 ±(99.9%) 69.091 ms/op
                 executeFilterQuery·p0.00:   2340.422 ms/op
                 executeFilterQuery·p0.50:   2344.616 ms/op
                 executeFilterQuery·p0.90:   2382.365 ms/op
                 executeFilterQuery·p0.95:   2382.365 ms/op
                 executeFilterQuery·p0.99:   2382.365 ms/op
                 executeFilterQuery·p0.999:  2382.365 ms/op
                 executeFilterQuery·p0.9999: 2382.365 ms/op
                 executeFilterQuery·p1.00:   2382.365 ms/op

Iteration   4: 2344.616 ±(99.9%) 11.420 ms/op
                 executeFilterQuery·p0.00:   2340.422 ms/op
                 executeFilterQuery·p0.50:   2344.616 ms/op
                 executeFilterQuery·p0.90:   2348.810 ms/op
                 executeFilterQuery·p0.95:   2348.810 ms/op
                 executeFilterQuery·p0.99:   2348.810 ms/op
                 executeFilterQuery·p0.999:  2348.810 ms/op
                 executeFilterQuery·p0.9999: 2348.810 ms/op
                 executeFilterQuery·p1.00:   2348.810 ms/op

Iteration   5: 2347.133 ±(99.9%) 27.025 ms/op
                 executeFilterQuery·p0.00:   2340.422 ms/op
                 executeFilterQuery·p0.50:   2348.810 ms/op
                 executeFilterQuery·p0.90:   2357.199 ms/op
                 executeFilterQuery·p0.95:   2357.199 ms/op
                 executeFilterQuery·p0.99:   2357.199 ms/op
                 executeFilterQuery·p0.999:  2357.199 ms/op
                 executeFilterQuery·p0.9999: 2357.199 ms/op
                 executeFilterQuery·p1.00:   2357.199 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 25
  mean =   2346.126 ±(99.9%) 6.657 ms/op

  Histogram, ms/op:
    [2330.000, 2335.000) = 0 
    [2335.000, 2340.000) = 1 
    [2340.000, 2345.000) = 14 
    [2345.000, 2350.000) = 8 
    [2350.000, 2355.000) = 0 
    [2355.000, 2360.000) = 1 
    [2360.000, 2365.000) = 0 
    [2365.000, 2370.000) = 0 
    [2370.000, 2375.000) = 0 
    [2375.000, 2380.000) = 0 
    [2380.000, 2385.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2336.227 ms/op
     p(50.0000) =   2344.616 ms/op
     p(90.0000) =   2352.166 ms/op
     p(95.0000) =   2374.815 ms/op
     p(99.0000) =   2382.365 ms/op
     p(99.9000) =   2382.365 ms/op
     p(99.9900) =   2382.365 ms/op
     p(99.9990) =   2382.365 ms/op
     p(99.9999) =   2382.365 ms/op
    p(100.0000) =   2382.365 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 47.06% complete, ETA 03:45:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_670644554 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_670644554() {
        this(4);
    }
    public KeyMultiRecordMap_670644554(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_670644554 join_map = new KeyMultiRecordMap_670644554();
private final class KeyMultiRecordMap_1370904708 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1370904708() {
        this(4);
    }
    public KeyMultiRecordMap_1370904708(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1370904708 join_map_0 = new KeyMultiRecordMap_1370904708();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4627.715 ±(99.9%) 4286.015 ms/op
# Warmup Iteration   2: 4538.237 ±(99.9%) 551.792 ms/op
# Warmup Iteration   3: 4378.853 ±(99.9%) 1307.570 ms/op
# Warmup Iteration   4: 4352.289 ±(99.9%) 1262.769 ms/op
# Warmup Iteration   5: 4418.000 ±(99.9%) 1486.401 ms/op
Iteration   1: 4451.555 ±(99.9%) 2256.143 ms/op
                 executeQuery·p0.00:   4311.745 ms/op
                 executeQuery·p0.50:   4496.294 ms/op
                 executeQuery·p0.90:   4546.626 ms/op
                 executeQuery·p0.95:   4546.626 ms/op
                 executeQuery·p0.99:   4546.626 ms/op
                 executeQuery·p0.999:  4546.626 ms/op
                 executeQuery·p0.9999: 4546.626 ms/op
                 executeQuery·p1.00:   4546.626 ms/op

Iteration   2: 4345.299 ±(99.9%) 1103.583 ms/op
                 executeQuery·p0.00:   4294.967 ms/op
                 executeQuery·p0.50:   4328.522 ms/op
                 executeQuery·p0.90:   4412.408 ms/op
                 executeQuery·p0.95:   4412.408 ms/op
                 executeQuery·p0.99:   4412.408 ms/op
                 executeQuery·p0.999:  4412.408 ms/op
                 executeQuery·p0.9999: 4412.408 ms/op
                 executeQuery·p1.00:   4412.408 ms/op

Iteration   3: 4426.389 ±(99.9%) 2187.625 ms/op
                 executeQuery·p0.00:   4294.967 ms/op
                 executeQuery·p0.50:   4454.351 ms/op
                 executeQuery·p0.90:   4529.848 ms/op
                 executeQuery·p0.95:   4529.848 ms/op
                 executeQuery·p0.99:   4529.848 ms/op
                 executeQuery·p0.999:  4529.848 ms/op
                 executeQuery·p0.9999: 4529.848 ms/op
                 executeQuery·p1.00:   4529.848 ms/op

Iteration   4: 4373.261 ±(99.9%) 1446.472 ms/op
                 executeQuery·p0.00:   4311.745 ms/op
                 executeQuery·p0.50:   4345.299 ms/op
                 executeQuery·p0.90:   4462.739 ms/op
                 executeQuery·p0.95:   4462.739 ms/op
                 executeQuery·p0.99:   4462.739 ms/op
                 executeQuery·p0.999:  4462.739 ms/op
                 executeQuery·p0.9999: 4462.739 ms/op
                 executeQuery·p1.00:   4462.739 ms/op

Iteration   5: 4345.299 ±(99.9%) 667.083 ms/op
                 executeQuery·p0.00:   4320.133 ms/op
                 executeQuery·p0.50:   4328.522 ms/op
                 executeQuery·p0.90:   4387.242 ms/op
                 executeQuery·p0.95:   4387.242 ms/op
                 executeQuery·p0.99:   4387.242 ms/op
                 executeQuery·p0.999:  4387.242 ms/op
                 executeQuery·p0.9999: 4387.242 ms/op
                 executeQuery·p1.00:   4387.242 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   4388.360 ±(99.9%) 94.778 ms/op

  Histogram, ms/op:
    [4200.000, 4225.000) = 0 
    [4225.000, 4250.000) = 0 
    [4250.000, 4275.000) = 0 
    [4275.000, 4300.000) = 2 
    [4300.000, 4325.000) = 3 
    [4325.000, 4350.000) = 3 
    [4350.000, 4375.000) = 0 
    [4375.000, 4400.000) = 1 
    [4400.000, 4425.000) = 1 
    [4425.000, 4450.000) = 0 
    [4450.000, 4475.000) = 2 
    [4475.000, 4500.000) = 1 
    [4500.000, 4525.000) = 0 
    [4525.000, 4550.000) = 2 
    [4550.000, 4575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4294.967 ms/op
     p(50.0000) =   4345.299 ms/op
     p(90.0000) =   4536.559 ms/op
     p(95.0000) =   4546.626 ms/op
     p(99.0000) =   4546.626 ms/op
     p(99.9000) =   4546.626 ms/op
     p(99.9900) =   4546.626 ms/op
     p(99.9990) =   4546.626 ms/op
     p(99.9999) =   4546.626 ms/op
    p(100.0000) =   4546.626 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 48.04% complete, ETA 03:39:11
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_670644554 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_670644554() {
        this(4);
    }
    public KeyMultiRecordMap_670644554(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_670644554 join_map = new KeyMultiRecordMap_670644554();
private final class KeyMultiRecordMap_1370904708 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1370904708() {
        this(4);
    }
    public KeyMultiRecordMap_1370904708(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1370904708 join_map_0 = new KeyMultiRecordMap_1370904708();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

52009.370 ms/op
# Warmup Iteration   2: 49996.104 ms/op
# Warmup Iteration   3: 48922.362 ms/op
# Warmup Iteration   4: 48788.144 ms/op
# Warmup Iteration   5: 48385.491 ms/op
Iteration   1: 48184.164 ms/op
                 executeQuery·p0.00:   48184.164 ms/op
                 executeQuery·p0.50:   48184.164 ms/op
                 executeQuery·p0.90:   48184.164 ms/op
                 executeQuery·p0.95:   48184.164 ms/op
                 executeQuery·p0.99:   48184.164 ms/op
                 executeQuery·p0.999:  48184.164 ms/op
                 executeQuery·p0.9999: 48184.164 ms/op
                 executeQuery·p1.00:   48184.164 ms/op

Iteration   2: 48519.709 ms/op
                 executeQuery·p0.00:   48519.709 ms/op
                 executeQuery·p0.50:   48519.709 ms/op
                 executeQuery·p0.90:   48519.709 ms/op
                 executeQuery·p0.95:   48519.709 ms/op
                 executeQuery·p0.99:   48519.709 ms/op
                 executeQuery·p0.999:  48519.709 ms/op
                 executeQuery·p0.9999: 48519.709 ms/op
                 executeQuery·p1.00:   48519.709 ms/op

Iteration   3: 48721.035 ms/op
                 executeQuery·p0.00:   48721.035 ms/op
                 executeQuery·p0.50:   48721.035 ms/op
                 executeQuery·p0.90:   48721.035 ms/op
                 executeQuery·p0.95:   48721.035 ms/op
                 executeQuery·p0.99:   48721.035 ms/op
                 executeQuery·p0.999:  48721.035 ms/op
                 executeQuery·p0.9999: 48721.035 ms/op
                 executeQuery·p1.00:   48721.035 ms/op

Iteration   4: 48989.471 ms/op
                 executeQuery·p0.00:   48989.471 ms/op
                 executeQuery·p0.50:   48989.471 ms/op
                 executeQuery·p0.90:   48989.471 ms/op
                 executeQuery·p0.95:   48989.471 ms/op
                 executeQuery·p0.99:   48989.471 ms/op
                 executeQuery·p0.999:  48989.471 ms/op
                 executeQuery·p0.9999: 48989.471 ms/op
                 executeQuery·p1.00:   48989.471 ms/op

Iteration   5: 48385.491 ms/op
                 executeQuery·p0.00:   48385.491 ms/op
                 executeQuery·p0.50:   48385.491 ms/op
                 executeQuery·p0.90:   48385.491 ms/op
                 executeQuery·p0.95:   48385.491 ms/op
                 executeQuery·p0.99:   48385.491 ms/op
                 executeQuery·p0.999:  48385.491 ms/op
                 executeQuery·p0.9999: 48385.491 ms/op
                 executeQuery·p1.00:   48385.491 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  48559.974 ±(99.9%) 1192.623 ms/op

  Histogram, ms/op:
    [48100.000, 48150.000) = 0 
    [48150.000, 48200.000) = 1 
    [48200.000, 48250.000) = 0 
    [48250.000, 48300.000) = 0 
    [48300.000, 48350.000) = 0 
    [48350.000, 48400.000) = 1 
    [48400.000, 48450.000) = 0 
    [48450.000, 48500.000) = 0 
    [48500.000, 48550.000) = 1 
    [48550.000, 48600.000) = 0 
    [48600.000, 48650.000) = 0 
    [48650.000, 48700.000) = 0 
    [48700.000, 48750.000) = 1 
    [48750.000, 48800.000) = 0 
    [48800.000, 48850.000) = 0 
    [48850.000, 48900.000) = 0 
    [48900.000, 48950.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  48184.164 ms/op
     p(50.0000) =  48519.709 ms/op
     p(90.0000) =  48989.471 ms/op
     p(95.0000) =  48989.471 ms/op
     p(99.0000) =  48989.471 ms/op
     p(99.9000) =  48989.471 ms/op
     p(99.9900) =  48989.471 ms/op
     p(99.9990) =  48989.471 ms/op
     p(99.9999) =  48989.471 ms/op
    p(100.0000) =  48989.471 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 49.02% complete, ETA 03:39:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1415448058 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1415448058() {
        this(4);
    }
    public KeyMultiRecordMap_1415448058(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1415448058 join_map = new KeyMultiRecordMap_1415448058();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1861953575 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1861953575() {
        this(4);
    }
    public KeyMultiRecordMap_1861953575(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1861953575 join_map_0 = new KeyMultiRecordMap_1861953575();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4543.829 ±(99.9%) 4291.476 ms/op
# Warmup Iteration   2: 4669.658 ±(99.9%) 176.715 ms/op
# Warmup Iteration   3: 4510.275 ±(99.9%) 1301.585 ms/op
# Warmup Iteration   4: 4499.090 ±(99.9%) 1158.796 ms/op
# Warmup Iteration   5: 4585.772 ±(99.9%) 3557.413 ms/op
Iteration   1: 4465.536 ±(99.9%) 1237.003 ms/op
                 executeQuery·p0.00:   4387.242 ms/op
                 executeQuery·p0.50:   4504.682 ms/op
                 executeQuery·p0.90:   4504.682 ms/op
                 executeQuery·p0.95:   4504.682 ms/op
                 executeQuery·p0.99:   4504.682 ms/op
                 executeQuery·p0.999:  4504.682 ms/op
                 executeQuery·p0.9999: 4504.682 ms/op
                 executeQuery·p1.00:   4504.682 ms/op

Iteration   2: 4513.071 ±(99.9%) 1764.937 ms/op
                 executeQuery·p0.00:   4412.408 ms/op
                 executeQuery·p0.50:   4521.460 ms/op
                 executeQuery·p0.90:   4605.346 ms/op
                 executeQuery·p0.95:   4605.346 ms/op
                 executeQuery·p0.99:   4605.346 ms/op
                 executeQuery·p0.999:  4605.346 ms/op
                 executeQuery·p0.9999: 4605.346 ms/op
                 executeQuery·p1.00:   4605.346 ms/op

Iteration   3: 4490.701 ±(99.9%) 2880.775 ms/op
                 executeQuery·p0.00:   4387.242 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4672.455 ms/op
                 executeQuery·p0.95:   4672.455 ms/op
                 executeQuery·p0.99:   4672.455 ms/op
                 executeQuery·p0.999:  4672.455 ms/op
                 executeQuery·p0.9999: 4672.455 ms/op
                 executeQuery·p1.00:   4672.455 ms/op

Iteration   4: 4462.739 ±(99.9%) 1195.276 ms/op
                 executeQuery·p0.00:   4420.796 ms/op
                 executeQuery·p0.50:   4429.185 ms/op
                 executeQuery·p0.90:   4538.237 ms/op
                 executeQuery·p0.95:   4538.237 ms/op
                 executeQuery·p0.99:   4538.237 ms/op
                 executeQuery·p0.999:  4538.237 ms/op
                 executeQuery·p0.9999: 4538.237 ms/op
                 executeQuery·p1.00:   4538.237 ms/op

Iteration   5: 4468.332 ±(99.9%) 723.236 ms/op
                 executeQuery·p0.00:   4437.574 ms/op
                 executeQuery·p0.50:   4454.351 ms/op
                 executeQuery·p0.90:   4513.071 ms/op
                 executeQuery·p0.95:   4513.071 ms/op
                 executeQuery·p0.99:   4513.071 ms/op
                 executeQuery·p0.999:  4513.071 ms/op
                 executeQuery·p0.9999: 4513.071 ms/op
                 executeQuery·p1.00:   4513.071 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   4480.076 ±(99.9%) 88.094 ms/op

  Histogram, ms/op:
    [4300.000, 4325.000) = 0 
    [4325.000, 4350.000) = 0 
    [4350.000, 4375.000) = 0 
    [4375.000, 4400.000) = 2 
    [4400.000, 4425.000) = 3 
    [4425.000, 4450.000) = 2 
    [4450.000, 4475.000) = 1 
    [4475.000, 4500.000) = 0 
    [4500.000, 4525.000) = 4 
    [4525.000, 4550.000) = 1 
    [4550.000, 4575.000) = 0 
    [4575.000, 4600.000) = 0 
    [4600.000, 4625.000) = 1 
    [4625.000, 4650.000) = 0 
    [4650.000, 4675.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4387.242 ms/op
     p(50.0000) =   4454.351 ms/op
     p(90.0000) =   4632.189 ms/op
     p(95.0000) =   4672.455 ms/op
     p(99.0000) =   4672.455 ms/op
     p(99.9000) =   4672.455 ms/op
     p(99.9900) =   4672.455 ms/op
     p(99.9990) =   4672.455 ms/op
     p(99.9999) =   4672.455 ms/op
    p(100.0000) =   4672.455 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 50.00% complete, ETA 03:33:12
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1477113431 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1477113431() {
        this(4);
    }
    public KeyMultiRecordMap_1477113431(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1477113431 join_map = new KeyMultiRecordMap_1477113431();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1268983831 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1268983831() {
        this(4);
    }
    public KeyMultiRecordMap_1268983831(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1268983831 join_map_0 = new KeyMultiRecordMap_1268983831();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

51271.172 ms/op
# Warmup Iteration   2: 51136.954 ms/op
# Warmup Iteration   3: 48788.144 ms/op
# Warmup Iteration   4: 50600.083 ms/op
# Warmup Iteration   5: 50063.213 ms/op
Iteration   1: 50130.321 ms/op
                 executeQuery·p0.00:   50130.321 ms/op
                 executeQuery·p0.50:   50130.321 ms/op
                 executeQuery·p0.90:   50130.321 ms/op
                 executeQuery·p0.95:   50130.321 ms/op
                 executeQuery·p0.99:   50130.321 ms/op
                 executeQuery·p0.999:  50130.321 ms/op
                 executeQuery·p0.9999: 50130.321 ms/op
                 executeQuery·p1.00:   50130.321 ms/op

Iteration   2: 50398.757 ms/op
                 executeQuery·p0.00:   50398.757 ms/op
                 executeQuery·p0.50:   50398.757 ms/op
                 executeQuery·p0.90:   50398.757 ms/op
                 executeQuery·p0.95:   50398.757 ms/op
                 executeQuery·p0.99:   50398.757 ms/op
                 executeQuery·p0.999:  50398.757 ms/op
                 executeQuery·p0.9999: 50398.757 ms/op
                 executeQuery·p1.00:   50398.757 ms/op

Iteration   3: 50532.975 ms/op
                 executeQuery·p0.00:   50532.975 ms/op
                 executeQuery·p0.50:   50532.975 ms/op
                 executeQuery·p0.90:   50532.975 ms/op
                 executeQuery·p0.95:   50532.975 ms/op
                 executeQuery·p0.99:   50532.975 ms/op
                 executeQuery·p0.999:  50532.975 ms/op
                 executeQuery·p0.9999: 50532.975 ms/op
                 executeQuery·p1.00:   50532.975 ms/op

Iteration   4: 50465.866 ms/op
                 executeQuery·p0.00:   50465.866 ms/op
                 executeQuery·p0.50:   50465.866 ms/op
                 executeQuery·p0.90:   50465.866 ms/op
                 executeQuery·p0.95:   50465.866 ms/op
                 executeQuery·p0.99:   50465.866 ms/op
                 executeQuery·p0.999:  50465.866 ms/op
                 executeQuery·p0.9999: 50465.866 ms/op
                 executeQuery·p1.00:   50465.866 ms/op

Iteration   5: 50532.975 ms/op
                 executeQuery·p0.00:   50532.975 ms/op
                 executeQuery·p0.50:   50532.975 ms/op
                 executeQuery·p0.90:   50532.975 ms/op
                 executeQuery·p0.95:   50532.975 ms/op
                 executeQuery·p0.99:   50532.975 ms/op
                 executeQuery·p0.999:  50532.975 ms/op
                 executeQuery·p0.9999: 50532.975 ms/op
                 executeQuery·p1.00:   50532.975 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  50412.179 ±(99.9%) 643.442 ms/op

  Histogram, ms/op:
    [50100.000, 50150.000) = 1 
    [50150.000, 50200.000) = 0 
    [50200.000, 50250.000) = 0 
    [50250.000, 50300.000) = 0 
    [50300.000, 50350.000) = 0 
    [50350.000, 50400.000) = 1 
    [50400.000, 50450.000) = 0 
    [50450.000, 50500.000) = 1 
    [50500.000, 50550.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  50130.321 ms/op
     p(50.0000) =  50465.866 ms/op
     p(90.0000) =  50532.975 ms/op
     p(95.0000) =  50532.975 ms/op
     p(99.0000) =  50532.975 ms/op
     p(99.9000) =  50532.975 ms/op
     p(99.9900) =  50532.975 ms/op
     p(99.9990) =  50532.975 ms/op
     p(99.9999) =  50532.975 ms/op
    p(100.0000) =  50532.975 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 50.98% complete, ETA 03:33:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1911.904 ±(99.9%) 467.377 ms/op
# Warmup Iteration   2: 1815.435 ±(99.9%) 12.147 ms/op
# Warmup Iteration   3: 1808.095 ±(99.9%) 6.875 ms/op
# Warmup Iteration   4: 1809.143 ±(99.9%) 4.802 ms/op
# Warmup Iteration   5: 1809.493 ±(99.9%) 10.129 ms/op
Iteration   1: 1809.143 ±(99.9%) 9.603 ms/op
                 executeQuery·p0.00:   1803.551 ms/op
                 executeQuery·p0.50:   1809.842 ms/op
                 executeQuery·p0.90:   1814.036 ms/op
                 executeQuery·p0.95:   1814.036 ms/op
                 executeQuery·p0.99:   1814.036 ms/op
                 executeQuery·p0.999:  1814.036 ms/op
                 executeQuery·p0.9999: 1814.036 ms/op
                 executeQuery·p1.00:   1814.036 ms/op

Iteration   2: 1811.590 ±(99.9%) 5.782 ms/op
                 executeQuery·p0.00:   1809.842 ms/op
                 executeQuery·p0.50:   1810.891 ms/op
                 executeQuery·p0.90:   1814.036 ms/op
                 executeQuery·p0.95:   1814.036 ms/op
                 executeQuery·p0.99:   1814.036 ms/op
                 executeQuery·p0.999:  1814.036 ms/op
                 executeQuery·p0.9999: 1814.036 ms/op
                 executeQuery·p1.00:   1814.036 ms/op

Iteration   3: 1811.939 ±(99.9%) 5.260 ms/op
                 executeQuery·p0.00:   1809.842 ms/op
                 executeQuery·p0.50:   1811.939 ms/op
                 executeQuery·p0.90:   1814.036 ms/op
                 executeQuery·p0.95:   1814.036 ms/op
                 executeQuery·p0.99:   1814.036 ms/op
                 executeQuery·p0.999:  1814.036 ms/op
                 executeQuery·p0.9999: 1814.036 ms/op
                 executeQuery·p1.00:   1814.036 ms/op

Iteration   4: 1811.590 ±(99.9%) 5.782 ms/op
                 executeQuery·p0.00:   1809.842 ms/op
                 executeQuery·p0.50:   1810.891 ms/op
                 executeQuery·p0.90:   1814.036 ms/op
                 executeQuery·p0.95:   1814.036 ms/op
                 executeQuery·p0.99:   1814.036 ms/op
                 executeQuery·p0.999:  1814.036 ms/op
                 executeQuery·p0.9999: 1814.036 ms/op
                 executeQuery·p1.00:   1814.036 ms/op

Iteration   5: 1818.231 ±(99.9%) 60.547 ms/op
                 executeQuery·p0.00:   1807.745 ms/op
                 executeQuery·p0.50:   1809.842 ms/op
                 executeQuery·p0.90:   1862.271 ms/op
                 executeQuery·p0.95:   1862.271 ms/op
                 executeQuery·p0.99:   1862.271 ms/op
                 executeQuery·p0.999:  1862.271 ms/op
                 executeQuery·p0.9999: 1862.271 ms/op
                 executeQuery·p1.00:   1862.271 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   1812.499 ±(99.9%) 6.478 ms/op

  Histogram, ms/op:
    [1800.000, 1805.000) = 1 
    [1805.000, 1810.000) = 17 
    [1810.000, 1815.000) = 11 
    [1815.000, 1820.000) = 0 
    [1820.000, 1825.000) = 0 
    [1825.000, 1830.000) = 0 
    [1830.000, 1835.000) = 0 
    [1835.000, 1840.000) = 0 
    [1840.000, 1845.000) = 0 
    [1845.000, 1850.000) = 0 
    [1850.000, 1855.000) = 0 
    [1855.000, 1860.000) = 0 
    [1860.000, 1865.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1803.551 ms/op
     p(50.0000) =   1809.842 ms/op
     p(90.0000) =   1814.036 ms/op
     p(95.0000) =   1835.742 ms/op
     p(99.0000) =   1862.271 ms/op
     p(99.9000) =   1862.271 ms/op
     p(99.9900) =   1862.271 ms/op
     p(99.9990) =   1862.271 ms/op
     p(99.9999) =   1862.271 ms/op
    p(100.0000) =   1862.271 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 51.96% complete, ETA 03:26:41
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
29125.247 ms/op
# Warmup Iteration   2: 29695.672 ms/op
# Warmup Iteration   3: 27883.733 ms/op
# Warmup Iteration   4: 23790.092 ms/op
# Warmup Iteration   5: 23320.330 ms/op
Iteration   1: 23320.330 ms/op
                 executeQuery·p0.00:   23320.330 ms/op
                 executeQuery·p0.50:   23320.330 ms/op
                 executeQuery·p0.90:   23320.330 ms/op
                 executeQuery·p0.95:   23320.330 ms/op
                 executeQuery·p0.99:   23320.330 ms/op
                 executeQuery·p0.999:  23320.330 ms/op
                 executeQuery·p0.9999: 23320.330 ms/op
                 executeQuery·p1.00:   23320.330 ms/op

Iteration   2: 23353.885 ms/op
                 executeQuery·p0.00:   23353.885 ms/op
                 executeQuery·p0.50:   23353.885 ms/op
                 executeQuery·p0.90:   23353.885 ms/op
                 executeQuery·p0.95:   23353.885 ms/op
                 executeQuery·p0.99:   23353.885 ms/op
                 executeQuery·p0.999:  23353.885 ms/op
                 executeQuery·p0.9999: 23353.885 ms/op
                 executeQuery·p1.00:   23353.885 ms/op

Iteration   3: 23420.994 ms/op
                 executeQuery·p0.00:   23420.994 ms/op
                 executeQuery·p0.50:   23420.994 ms/op
                 executeQuery·p0.90:   23420.994 ms/op
                 executeQuery·p0.95:   23420.994 ms/op
                 executeQuery·p0.99:   23420.994 ms/op
                 executeQuery·p0.999:  23420.994 ms/op
                 executeQuery·p0.9999: 23420.994 ms/op
                 executeQuery·p1.00:   23420.994 ms/op

Iteration   4: 23420.994 ms/op
                 executeQuery·p0.00:   23420.994 ms/op
                 executeQuery·p0.50:   23420.994 ms/op
                 executeQuery·p0.90:   23420.994 ms/op
                 executeQuery·p0.95:   23420.994 ms/op
                 executeQuery·p0.99:   23420.994 ms/op
                 executeQuery·p0.999:  23420.994 ms/op
                 executeQuery·p0.9999: 23420.994 ms/op
                 executeQuery·p1.00:   23420.994 ms/op

Iteration   5: 23387.439 ms/op
                 executeQuery·p0.00:   23387.439 ms/op
                 executeQuery·p0.50:   23387.439 ms/op
                 executeQuery·p0.90:   23387.439 ms/op
                 executeQuery·p0.95:   23387.439 ms/op
                 executeQuery·p0.99:   23387.439 ms/op
                 executeQuery·p0.999:  23387.439 ms/op
                 executeQuery·p0.9999: 23387.439 ms/op
                 executeQuery·p1.00:   23387.439 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  23380.728 ±(99.9%) 168.464 ms/op

  Histogram, ms/op:
    [23300.000, 23312.500) = 0 
    [23312.500, 23325.000) = 1 
    [23325.000, 23337.500) = 0 
    [23337.500, 23350.000) = 0 
    [23350.000, 23362.500) = 1 
    [23362.500, 23375.000) = 0 
    [23375.000, 23387.500) = 1 
    [23387.500, 23400.000) = 0 
    [23400.000, 23412.500) = 0 
    [23412.500, 23425.000) = 2 
    [23425.000, 23437.500) = 0 
    [23437.500, 23450.000) = 0 
    [23450.000, 23462.500) = 0 
    [23462.500, 23475.000) = 0 
    [23475.000, 23487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =  23320.330 ms/op
     p(50.0000) =  23387.439 ms/op
     p(90.0000) =  23420.994 ms/op
     p(95.0000) =  23420.994 ms/op
     p(99.0000) =  23420.994 ms/op
     p(99.9000) =  23420.994 ms/op
     p(99.9900) =  23420.994 ms/op
     p(99.9990) =  23420.994 ms/op
     p(99.9999) =  23420.994 ms/op
    p(100.0000) =  23420.994 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 52.94% complete, ETA 03:22:43
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1412.282 ±(99.9%) 242.729 ms/op
# Warmup Iteration   2: 1340.342 ±(99.9%) 39.137 ms/op
# Warmup Iteration   3: 1325.924 ±(99.9%) 4.150 ms/op
# Warmup Iteration   4: 1329.594 ±(99.9%) 4.793 ms/op
# Warmup Iteration   5: 1325.662 ±(99.9%) 1.418 ms/op
Iteration   1: 1329.594 ±(99.9%) 12.680 ms/op
                 executeQuery·p0.00:   1323.303 ms/op
                 executeQuery·p0.50:   1327.497 ms/op
                 executeQuery·p0.90:   1344.274 ms/op
                 executeQuery·p0.95:   1344.274 ms/op
                 executeQuery·p0.99:   1344.274 ms/op
                 executeQuery·p0.999:  1344.274 ms/op
                 executeQuery·p0.9999: 1344.274 ms/op
                 executeQuery·p1.00:   1344.274 ms/op

Iteration   2: 1328.022 ±(99.9%) 8.231 ms/op
                 executeQuery·p0.00:   1325.400 ms/op
                 executeQuery·p0.50:   1325.400 ms/op
                 executeQuery·p0.90:   1335.886 ms/op
                 executeQuery·p0.95:   1335.886 ms/op
                 executeQuery·p0.99:   1335.886 ms/op
                 executeQuery·p0.999:  1335.886 ms/op
                 executeQuery·p0.9999: 1335.886 ms/op
                 executeQuery·p1.00:   1335.886 ms/op

Iteration   3: 1329.070 ±(99.9%) 9.525 ms/op
                 executeQuery·p0.00:   1323.303 ms/op
                 executeQuery·p0.50:   1327.497 ms/op
                 executeQuery·p0.90:   1335.886 ms/op
                 executeQuery·p0.95:   1335.886 ms/op
                 executeQuery·p0.99:   1335.886 ms/op
                 executeQuery·p0.999:  1335.886 ms/op
                 executeQuery·p0.9999: 1335.886 ms/op
                 executeQuery·p1.00:   1335.886 ms/op

Iteration   4: 1340.604 ±(99.9%) 4.150 ms/op
                 executeQuery·p0.00:   1337.983 ms/op
                 executeQuery·p0.50:   1340.080 ms/op
                 executeQuery·p0.90:   1344.274 ms/op
                 executeQuery·p0.95:   1344.274 ms/op
                 executeQuery·p0.99:   1344.274 ms/op
                 executeQuery·p0.999:  1344.274 ms/op
                 executeQuery·p0.9999: 1344.274 ms/op
                 executeQuery·p1.00:   1344.274 ms/op

Iteration   5: 1338.769 ±(99.9%) 2.983 ms/op
                 executeQuery·p0.00:   1335.886 ms/op
                 executeQuery·p0.50:   1339.032 ms/op
                 executeQuery·p0.90:   1340.080 ms/op
                 executeQuery·p0.95:   1340.080 ms/op
                 executeQuery·p0.99:   1340.080 ms/op
                 executeQuery·p0.999:  1340.080 ms/op
                 executeQuery·p0.9999: 1340.080 ms/op
                 executeQuery·p1.00:   1340.080 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 40
  mean =   1333.212 ±(99.9%) 3.825 ms/op

  Histogram, ms/op:
    [1320.000, 1322.500) = 0 
    [1322.500, 1325.000) = 2 
    [1325.000, 1327.500) = 13 
    [1327.500, 1330.000) = 1 
    [1330.000, 1332.500) = 3 
    [1332.500, 1335.000) = 1 
    [1335.000, 1337.500) = 4 
    [1337.500, 1340.000) = 5 
    [1340.000, 1342.500) = 9 
    [1342.500, 1345.000) = 2 
    [1345.000, 1347.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1323.303 ms/op
     p(50.0000) =   1334.837 ms/op
     p(90.0000) =   1341.968 ms/op
     p(95.0000) =   1344.170 ms/op
     p(99.0000) =   1344.274 ms/op
     p(99.9000) =   1344.274 ms/op
     p(99.9900) =   1344.274 ms/op
     p(99.9990) =   1344.274 ms/op
     p(99.9999) =   1344.274 ms/op
    p(100.0000) =   1344.274 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 53.92% complete, ETA 03:16:27
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
19260.244 ms/op
# Warmup Iteration   2: 18824.036 ms/op
# Warmup Iteration   3: 17213.424 ms/op
# Warmup Iteration   4: 17012.097 ms/op
# Warmup Iteration   5: 17028.874 ms/op
Iteration   1: 17062.429 ms/op
                 executeQuery·p0.00:   17062.429 ms/op
                 executeQuery·p0.50:   17062.429 ms/op
                 executeQuery·p0.90:   17062.429 ms/op
                 executeQuery·p0.95:   17062.429 ms/op
                 executeQuery·p0.99:   17062.429 ms/op
                 executeQuery·p0.999:  17062.429 ms/op
                 executeQuery·p0.9999: 17062.429 ms/op
                 executeQuery·p1.00:   17062.429 ms/op

Iteration   2: 17028.874 ms/op
                 executeQuery·p0.00:   17028.874 ms/op
                 executeQuery·p0.50:   17028.874 ms/op
                 executeQuery·p0.90:   17028.874 ms/op
                 executeQuery·p0.95:   17028.874 ms/op
                 executeQuery·p0.99:   17028.874 ms/op
                 executeQuery·p0.999:  17028.874 ms/op
                 executeQuery·p0.9999: 17028.874 ms/op
                 executeQuery·p1.00:   17028.874 ms/op

Iteration   3: 17012.097 ms/op
                 executeQuery·p0.00:   17012.097 ms/op
                 executeQuery·p0.50:   17012.097 ms/op
                 executeQuery·p0.90:   17012.097 ms/op
                 executeQuery·p0.95:   17012.097 ms/op
                 executeQuery·p0.99:   17012.097 ms/op
                 executeQuery·p0.999:  17012.097 ms/op
                 executeQuery·p0.9999: 17012.097 ms/op
                 executeQuery·p1.00:   17012.097 ms/op

Iteration   4: 16995.320 ms/op
                 executeQuery·p0.00:   16995.320 ms/op
                 executeQuery·p0.50:   16995.320 ms/op
                 executeQuery·p0.90:   16995.320 ms/op
                 executeQuery·p0.95:   16995.320 ms/op
                 executeQuery·p0.99:   16995.320 ms/op
                 executeQuery·p0.999:  16995.320 ms/op
                 executeQuery·p0.9999: 16995.320 ms/op
                 executeQuery·p1.00:   16995.320 ms/op

Iteration   5: 16978.543 ms/op
                 executeQuery·p0.00:   16978.543 ms/op
                 executeQuery·p0.50:   16978.543 ms/op
                 executeQuery·p0.90:   16978.543 ms/op
                 executeQuery·p0.95:   16978.543 ms/op
                 executeQuery·p0.99:   16978.543 ms/op
                 executeQuery·p0.999:  16978.543 ms/op
                 executeQuery·p0.9999: 16978.543 ms/op
                 executeQuery·p1.00:   16978.543 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 5
  mean =  17015.452 ±(99.9%) 124.267 ms/op

  Histogram, ms/op:
    [16970.000, 16980.000) = 1 
    [16980.000, 16990.000) = 0 
    [16990.000, 17000.000) = 1 
    [17000.000, 17010.000) = 0 
    [17010.000, 17020.000) = 1 
    [17020.000, 17030.000) = 1 
    [17030.000, 17040.000) = 0 
    [17040.000, 17050.000) = 0 
    [17050.000, 17060.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  16978.543 ms/op
     p(50.0000) =  17012.097 ms/op
     p(90.0000) =  17062.429 ms/op
     p(95.0000) =  17062.429 ms/op
     p(99.0000) =  17062.429 ms/op
     p(99.9000) =  17062.429 ms/op
     p(99.9900) =  17062.429 ms/op
     p(99.9990) =  17062.429 ms/op
     p(99.9999) =  17062.429 ms/op
    p(100.0000) =  17062.429 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 54.90% complete, ETA 03:11:20
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1976.356 ±(99.9%) 118.077 ms/op
# Warmup Iteration   2: 1951.400 ±(99.9%) 9.663 ms/op
# Warmup Iteration   3: 1945.458 ±(99.9%) 3.037 ms/op
# Warmup Iteration   4: 1945.808 ±(99.9%) 4.427 ms/op
# Warmup Iteration   5: 1945.458 ±(99.9%) 3.037 ms/op
Iteration   1: 1958.041 ±(99.9%) 56.976 ms/op
                 executeQuery·p0.00:   1944.060 ms/op
                 executeQuery·p0.50:   1952.449 ms/op
                 executeQuery·p0.90:   1998.586 ms/op
                 executeQuery·p0.95:   1998.586 ms/op
                 executeQuery·p0.99:   1998.586 ms/op
                 executeQuery·p0.999:  1998.586 ms/op
                 executeQuery·p0.9999: 1998.586 ms/op
                 executeQuery·p1.00:   1998.586 ms/op

Iteration   2: 1947.905 ±(99.9%) 2.401 ms/op
                 executeQuery·p0.00:   1946.157 ms/op
                 executeQuery·p0.50:   1948.254 ms/op
                 executeQuery·p0.90:   1948.254 ms/op
                 executeQuery·p0.95:   1948.254 ms/op
                 executeQuery·p0.99:   1948.254 ms/op
                 executeQuery·p0.999:  1948.254 ms/op
                 executeQuery·p0.9999: 1948.254 ms/op
                 executeQuery·p1.00:   1948.254 ms/op

Iteration   3: 1947.905 ±(99.9%) 6.875 ms/op
                 executeQuery·p0.00:   1946.157 ms/op
                 executeQuery·p0.50:   1947.206 ms/op
                 executeQuery·p0.90:   1952.449 ms/op
                 executeQuery·p0.95:   1952.449 ms/op
                 executeQuery·p0.99:   1952.449 ms/op
                 executeQuery·p0.999:  1952.449 ms/op
                 executeQuery·p0.9999: 1952.449 ms/op
                 executeQuery·p1.00:   1952.449 ms/op

Iteration   4: 1946.507 ±(99.9%) 2.401 ms/op
                 executeQuery·p0.00:   1946.157 ms/op
                 executeQuery·p0.50:   1946.157 ms/op
                 executeQuery·p0.90:   1948.254 ms/op
                 executeQuery·p0.95:   1948.254 ms/op
                 executeQuery·p0.99:   1948.254 ms/op
                 executeQuery·p0.999:  1948.254 ms/op
                 executeQuery·p0.9999: 1948.254 ms/op
                 executeQuery·p1.00:   1948.254 ms/op

Iteration   5: 1946.157 ±(99.9%) 3.719 ms/op
                 executeQuery·p0.00:   1944.060 ms/op
                 executeQuery·p0.50:   1946.157 ms/op
                 executeQuery·p0.90:   1948.254 ms/op
                 executeQuery·p0.95:   1948.254 ms/op
                 executeQuery·p0.99:   1948.254 ms/op
                 executeQuery·p0.999:  1948.254 ms/op
                 executeQuery·p0.9999: 1948.254 ms/op
                 executeQuery·p1.00:   1948.254 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   1949.303 ±(99.9%) 6.444 ms/op

  Histogram, ms/op:
    [1940.000, 1945.000) = 2 
    [1945.000, 1950.000) = 23 
    [1950.000, 1955.000) = 4 
    [1955.000, 1960.000) = 0 
    [1960.000, 1965.000) = 0 
    [1965.000, 1970.000) = 0 
    [1970.000, 1975.000) = 0 
    [1975.000, 1980.000) = 0 
    [1980.000, 1985.000) = 0 
    [1985.000, 1990.000) = 0 
    [1990.000, 1995.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1944.060 ms/op
     p(50.0000) =   1946.157 ms/op
     p(90.0000) =   1954.336 ms/op
     p(95.0000) =   1974.364 ms/op
     p(99.0000) =   1998.586 ms/op
     p(99.9000) =   1998.586 ms/op
     p(99.9900) =   1998.586 ms/op
     p(99.9990) =   1998.586 ms/op
     p(99.9999) =   1998.586 ms/op
    p(100.0000) =   1998.586 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 55.88% complete, ETA 03:05:28
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
24427.626 ms/op
# Warmup Iteration   2: 26373.784 ms/op
# Warmup Iteration   3: 26340.229 ms/op
# Warmup Iteration   4: 26172.457 ms/op
# Warmup Iteration   5: 26172.457 ms/op
Iteration   1: 26172.457 ms/op
                 executeQuery·p0.00:   26172.457 ms/op
                 executeQuery·p0.50:   26172.457 ms/op
                 executeQuery·p0.90:   26172.457 ms/op
                 executeQuery·p0.95:   26172.457 ms/op
                 executeQuery·p0.99:   26172.457 ms/op
                 executeQuery·p0.999:  26172.457 ms/op
                 executeQuery·p0.9999: 26172.457 ms/op
                 executeQuery·p1.00:   26172.457 ms/op

Iteration   2: 26138.903 ms/op
                 executeQuery·p0.00:   26138.903 ms/op
                 executeQuery·p0.50:   26138.903 ms/op
                 executeQuery·p0.90:   26138.903 ms/op
                 executeQuery·p0.95:   26138.903 ms/op
                 executeQuery·p0.99:   26138.903 ms/op
                 executeQuery·p0.999:  26138.903 ms/op
                 executeQuery·p0.9999: 26138.903 ms/op
                 executeQuery·p1.00:   26138.903 ms/op

Iteration   3: 26138.903 ms/op
                 executeQuery·p0.00:   26138.903 ms/op
                 executeQuery·p0.50:   26138.903 ms/op
                 executeQuery·p0.90:   26138.903 ms/op
                 executeQuery·p0.95:   26138.903 ms/op
                 executeQuery·p0.99:   26138.903 ms/op
                 executeQuery·p0.999:  26138.903 ms/op
                 executeQuery·p0.9999: 26138.903 ms/op
                 executeQuery·p1.00:   26138.903 ms/op

Iteration   4: 26172.457 ms/op
                 executeQuery·p0.00:   26172.457 ms/op
                 executeQuery·p0.50:   26172.457 ms/op
                 executeQuery·p0.90:   26172.457 ms/op
                 executeQuery·p0.95:   26172.457 ms/op
                 executeQuery·p0.99:   26172.457 ms/op
                 executeQuery·p0.999:  26172.457 ms/op
                 executeQuery·p0.9999: 26172.457 ms/op
                 executeQuery·p1.00:   26172.457 ms/op

Iteration   5: 26172.457 ms/op
                 executeQuery·p0.00:   26172.457 ms/op
                 executeQuery·p0.50:   26172.457 ms/op
                 executeQuery·p0.90:   26172.457 ms/op
                 executeQuery·p0.95:   26172.457 ms/op
                 executeQuery·p0.99:   26172.457 ms/op
                 executeQuery·p0.999:  26172.457 ms/op
                 executeQuery·p0.9999: 26172.457 ms/op
                 executeQuery·p1.00:   26172.457 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  26159.035 ±(99.9%) 70.769 ms/op

  Histogram, ms/op:
    [26130.000, 26135.000) = 0 
    [26135.000, 26140.000) = 2 
    [26140.000, 26145.000) = 0 
    [26145.000, 26150.000) = 0 
    [26150.000, 26155.000) = 0 
    [26155.000, 26160.000) = 0 
    [26160.000, 26165.000) = 0 
    [26165.000, 26170.000) = 0 
    [26170.000, 26175.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =  26138.903 ms/op
     p(50.0000) =  26172.457 ms/op
     p(90.0000) =  26172.457 ms/op
     p(95.0000) =  26172.457 ms/op
     p(99.0000) =  26172.457 ms/op
     p(99.9000) =  26172.457 ms/op
     p(99.9900) =  26172.457 ms/op
     p(99.9990) =  26172.457 ms/op
     p(99.9999) =  26172.457 ms/op
    p(100.0000) =  26172.457 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 56.86% complete, ETA 03:01:45
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1125.938 ±(99.9%) 168.574 ms/op
# Warmup Iteration   2: 990.695 ±(99.9%) 92.150 ms/op
# Warmup Iteration   3: 967.168 ±(99.9%) 5.118 ms/op
# Warmup Iteration   4: 962.021 ±(99.9%) 3.574 ms/op
# Warmup Iteration   5: 966.596 ±(99.9%) 5.058 ms/op
Iteration   1: 964.499 ±(99.9%) 5.973 ms/op
                 executeQuery·p0.00:   959.447 ms/op
                 executeQuery·p0.50:   964.690 ms/op
                 executeQuery·p0.90:   971.611 ms/op
                 executeQuery·p0.95:   972.030 ms/op
                 executeQuery·p0.99:   972.030 ms/op
                 executeQuery·p0.999:  972.030 ms/op
                 executeQuery·p0.9999: 972.030 ms/op
                 executeQuery·p1.00:   972.030 ms/op

Iteration   2: 965.262 ±(99.9%) 2.998 ms/op
                 executeQuery·p0.00:   961.544 ms/op
                 executeQuery·p0.50:   964.690 ms/op
                 executeQuery·p0.90:   969.513 ms/op
                 executeQuery·p0.95:   969.933 ms/op
                 executeQuery·p0.99:   969.933 ms/op
                 executeQuery·p0.999:  969.933 ms/op
                 executeQuery·p0.9999: 969.933 ms/op
                 executeQuery·p1.00:   969.933 ms/op

Iteration   3: 969.647 ±(99.9%) 4.403 ms/op
                 executeQuery·p0.00:   963.641 ms/op
                 executeQuery·p0.50:   970.981 ms/op
                 executeQuery·p0.90:   972.869 ms/op
                 executeQuery·p0.95:   973.079 ms/op
                 executeQuery·p0.99:   973.079 ms/op
                 executeQuery·p0.999:  973.079 ms/op
                 executeQuery·p0.9999: 973.079 ms/op
                 executeQuery·p1.00:   973.079 ms/op

Iteration   4: 972.602 ±(99.9%) 3.574 ms/op
                 executeQuery·p0.00:   967.836 ms/op
                 executeQuery·p0.50:   974.127 ms/op
                 executeQuery·p0.90:   975.176 ms/op
                 executeQuery·p0.95:   975.176 ms/op
                 executeQuery·p0.99:   975.176 ms/op
                 executeQuery·p0.999:  975.176 ms/op
                 executeQuery·p0.9999: 975.176 ms/op
                 executeQuery·p1.00:   975.176 ms/op

Iteration   5: 969.742 ±(99.9%) 3.098 ms/op
                 executeQuery·p0.00:   967.836 ms/op
                 executeQuery·p0.50:   969.933 ms/op
                 executeQuery·p0.90:   973.917 ms/op
                 executeQuery·p0.95:   974.127 ms/op
                 executeQuery·p0.99:   974.127 ms/op
                 executeQuery·p0.999:  974.127 ms/op
                 executeQuery·p0.9999: 974.127 ms/op
                 executeQuery·p1.00:   974.127 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 55
  mean =    968.350 ±(99.9%) 1.977 ms/op

  Histogram, ms/op:
    [950.000, 952.500) = 0 
    [952.500, 955.000) = 0 
    [955.000, 957.500) = 0 
    [957.500, 960.000) = 2 
    [960.000, 962.500) = 3 
    [962.500, 965.000) = 11 
    [965.000, 967.500) = 3 
    [967.500, 970.000) = 18 
    [970.000, 972.500) = 8 
    [972.500, 975.000) = 8 
    [975.000, 977.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    959.447 ms/op
     p(50.0000) =    967.836 ms/op
     p(90.0000) =    974.127 ms/op
     p(95.0000) =    974.337 ms/op
     p(99.0000) =    975.176 ms/op
     p(99.9000) =    975.176 ms/op
     p(99.9900) =    975.176 ms/op
     p(99.9990) =    975.176 ms/op
     p(99.9999) =    975.176 ms/op
    p(100.0000) =    975.176 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 57.84% complete, ETA 02:55:57
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
13287.555 ms/op
# Warmup Iteration   2: 13237.223 ms/op
# Warmup Iteration   3: 12633.244 ms/op
# Warmup Iteration   4: 12633.244 ms/op
# Warmup Iteration   5: 12633.244 ms/op
Iteration   1: 12616.466 ms/op
                 executeQuery·p0.00:   12616.466 ms/op
                 executeQuery·p0.50:   12616.466 ms/op
                 executeQuery·p0.90:   12616.466 ms/op
                 executeQuery·p0.95:   12616.466 ms/op
                 executeQuery·p0.99:   12616.466 ms/op
                 executeQuery·p0.999:  12616.466 ms/op
                 executeQuery·p0.9999: 12616.466 ms/op
                 executeQuery·p1.00:   12616.466 ms/op

Iteration   2: 12616.466 ms/op
                 executeQuery·p0.00:   12616.466 ms/op
                 executeQuery·p0.50:   12616.466 ms/op
                 executeQuery·p0.90:   12616.466 ms/op
                 executeQuery·p0.95:   12616.466 ms/op
                 executeQuery·p0.99:   12616.466 ms/op
                 executeQuery·p0.999:  12616.466 ms/op
                 executeQuery·p0.9999: 12616.466 ms/op
                 executeQuery·p1.00:   12616.466 ms/op

Iteration   3: 12616.466 ms/op
                 executeQuery·p0.00:   12616.466 ms/op
                 executeQuery·p0.50:   12616.466 ms/op
                 executeQuery·p0.90:   12616.466 ms/op
                 executeQuery·p0.95:   12616.466 ms/op
                 executeQuery·p0.99:   12616.466 ms/op
                 executeQuery·p0.999:  12616.466 ms/op
                 executeQuery·p0.9999: 12616.466 ms/op
                 executeQuery·p1.00:   12616.466 ms/op

Iteration   4: 12616.466 ms/op
                 executeQuery·p0.00:   12616.466 ms/op
                 executeQuery·p0.50:   12616.466 ms/op
                 executeQuery·p0.90:   12616.466 ms/op
                 executeQuery·p0.95:   12616.466 ms/op
                 executeQuery·p0.99:   12616.466 ms/op
                 executeQuery·p0.999:  12616.466 ms/op
                 executeQuery·p0.9999: 12616.466 ms/op
                 executeQuery·p1.00:   12616.466 ms/op

Iteration   5: 12616.466 ms/op
                 executeQuery·p0.00:   12616.466 ms/op
                 executeQuery·p0.50:   12616.466 ms/op
                 executeQuery·p0.90:   12616.466 ms/op
                 executeQuery·p0.95:   12616.466 ms/op
                 executeQuery·p0.99:   12616.466 ms/op
                 executeQuery·p0.999:  12616.466 ms/op
                 executeQuery·p0.9999: 12616.466 ms/op
                 executeQuery·p1.00:   12616.466 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 5
  mean =  12616.466 ±(99.9%) 0.001 ms/op

  Histogram, ms/op:
    [12616.466, 12616.466) = 5 

  Percentiles, ms/op:
      p(0.0000) =  12616.466 ms/op
     p(50.0000) =  12616.466 ms/op
     p(90.0000) =  12616.466 ms/op
     p(95.0000) =  12616.466 ms/op
     p(99.0000) =  12616.466 ms/op
     p(99.9000) =  12616.466 ms/op
     p(99.9900) =  12616.466 ms/op
     p(99.9990) =  12616.466 ms/op
     p(99.9999) =  12616.466 ms/op
    p(100.0000) =  12616.466 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 58.82% complete, ETA 02:50:34
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
418.338 ±(99.9%) 169.880 ms/op
# Warmup Iteration   2: 380.070 ±(99.9%) 23.480 ms/op
# Warmup Iteration   3: 399.591 ±(99.9%) 28.905 ms/op
# Warmup Iteration   4: 437.484 ±(99.9%) 5.185 ms/op
# Warmup Iteration   5: 362.882 ±(99.9%) 2.803 ms/op
Iteration   1: 362.302 ±(99.9%) 4.769 ms/op
                 executeQuery·p0.00:   353.370 ms/op
                 executeQuery·p0.50:   361.497 ms/op
                 executeQuery·p0.90:   368.574 ms/op
                 executeQuery·p0.95:   378.090 ms/op
                 executeQuery·p0.99:   385.876 ms/op
                 executeQuery·p0.999:  385.876 ms/op
                 executeQuery·p0.9999: 385.876 ms/op
                 executeQuery·p1.00:   385.876 ms/op

Iteration   2: 357.714 ±(99.9%) 1.052 ms/op
                 executeQuery·p0.00:   354.943 ms/op
                 executeQuery·p0.50:   357.827 ms/op
                 executeQuery·p0.90:   360.238 ms/op
                 executeQuery·p0.95:   360.710 ms/op
                 executeQuery·p0.99:   360.710 ms/op
                 executeQuery·p0.999:  360.710 ms/op
                 executeQuery·p0.9999: 360.710 ms/op
                 executeQuery·p1.00:   360.710 ms/op

Iteration   3: 358.126 ±(99.9%) 6.331 ms/op
                 executeQuery·p0.00:   353.370 ms/op
                 executeQuery·p0.50:   355.992 ms/op
                 executeQuery·p0.90:   360.396 ms/op
                 executeQuery·p0.95:   390.201 ms/op
                 executeQuery·p0.99:   393.740 ms/op
                 executeQuery·p0.999:  393.740 ms/op
                 executeQuery·p0.9999: 393.740 ms/op
                 executeQuery·p1.00:   393.740 ms/op

Iteration   4: 357.246 ±(99.9%) 6.577 ms/op
                 executeQuery·p0.00:   350.749 ms/op
                 executeQuery·p0.50:   355.992 ms/op
                 executeQuery·p0.90:   358.141 ms/op
                 executeQuery·p0.95:   383.700 ms/op
                 executeQuery·p0.99:   404.226 ms/op
                 executeQuery·p0.999:  404.226 ms/op
                 executeQuery·p0.9999: 404.226 ms/op
                 executeQuery·p1.00:   404.226 ms/op

Iteration   5: 356.179 ±(99.9%) 0.934 ms/op
                 executeQuery·p0.00:   354.419 ms/op
                 executeQuery·p0.50:   355.992 ms/op
                 executeQuery·p0.90:   357.722 ms/op
                 executeQuery·p0.95:   359.426 ms/op
                 executeQuery·p0.99:   359.662 ms/op
                 executeQuery·p0.999:  359.662 ms/op
                 executeQuery·p0.9999: 359.662 ms/op
                 executeQuery·p1.00:   359.662 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 140
  mean =    358.313 ±(99.9%) 1.960 ms/op

  Histogram, ms/op:
    [350.000, 355.000) = 28 
    [355.000, 360.000) = 92 
    [360.000, 365.000) = 6 
    [365.000, 370.000) = 10 
    [370.000, 375.000) = 0 
    [375.000, 380.000) = 0 
    [380.000, 385.000) = 0 
    [385.000, 390.000) = 2 
    [390.000, 395.000) = 1 
    [395.000, 400.000) = 0 
    [400.000, 405.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    350.749 ms/op
     p(50.0000) =    356.516 ms/op
     p(90.0000) =    365.324 ms/op
     p(95.0000) =    368.050 ms/op
     p(99.0000) =    399.927 ms/op
     p(99.9000) =    404.226 ms/op
     p(99.9900) =    404.226 ms/op
     p(99.9990) =    404.226 ms/op
     p(99.9999) =    404.226 ms/op
    p(100.0000) =    404.226 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 59.80% complete, ETA 02:44:56
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
13589.545 ms/op
# Warmup Iteration   2: 4088.048 ±(99.9%) 2083.436 ms/op
# Warmup Iteration   3: 4507.479 ±(99.9%) 3304.849 ms/op
# Warmup Iteration   4: 4308.948 ±(99.9%) 785.337 ms/op
# Warmup Iteration   5: 4397.029 ±(99.9%) 3955.657 ms/op
Iteration   1: 4346.697 ±(99.9%) 3615.371 ms/op
                 executeQuery·p0.00:   4131.389 ms/op
                 executeQuery·p0.50:   4387.242 ms/op
                 executeQuery·p0.90:   4521.460 ms/op
                 executeQuery·p0.95:   4521.460 ms/op
                 executeQuery·p0.99:   4521.460 ms/op
                 executeQuery·p0.999:  4521.460 ms/op
                 executeQuery·p0.9999: 4521.460 ms/op
                 executeQuery·p1.00:   4521.460 ms/op

Iteration   2: 4209.683 ±(99.9%) 1531.032 ms/op
                 executeQuery·p0.00:   4127.195 ms/op
                 executeQuery·p0.50:   4206.887 ms/op
                 executeQuery·p0.90:   4294.967 ms/op
                 executeQuery·p0.95:   4294.967 ms/op
                 executeQuery·p0.99:   4294.967 ms/op
                 executeQuery·p0.999:  4294.967 ms/op
                 executeQuery·p0.9999: 4294.967 ms/op
                 executeQuery·p1.00:   4294.967 ms/op

Iteration   3: 4262.811 ±(99.9%) 1424.035 ms/op
                 executeQuery·p0.00:   4190.110 ms/op
                 executeQuery·p0.50:   4253.024 ms/op
                 executeQuery·p0.90:   4345.299 ms/op
                 executeQuery·p0.95:   4345.299 ms/op
                 executeQuery·p0.99:   4345.299 ms/op
                 executeQuery·p0.999:  4345.299 ms/op
                 executeQuery·p0.9999: 4345.299 ms/op
                 executeQuery·p1.00:   4345.299 ms/op

Iteration   4: 4250.228 ±(99.9%) 956.752 ms/op
                 executeQuery·p0.00:   4190.110 ms/op
                 executeQuery·p0.50:   4273.996 ms/op
                 executeQuery·p0.90:   4286.579 ms/op
                 executeQuery·p0.95:   4286.579 ms/op
                 executeQuery·p0.99:   4286.579 ms/op
                 executeQuery·p0.999:  4286.579 ms/op
                 executeQuery·p0.9999: 4286.579 ms/op
                 executeQuery·p1.00:   4286.579 ms/op

Iteration   5: 4222.266 ±(99.9%) 1969.299 ms/op
                 executeQuery·p0.00:   4097.835 ms/op
                 executeQuery·p0.50:   4278.190 ms/op
                 executeQuery·p0.90:   4290.773 ms/op
                 executeQuery·p0.95:   4290.773 ms/op
                 executeQuery·p0.99:   4290.773 ms/op
                 executeQuery·p0.999:  4290.773 ms/op
                 executeQuery·p0.9999: 4290.773 ms/op
                 executeQuery·p1.00:   4290.773 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   4258.337 ±(99.9%) 117.215 ms/op

  Histogram, ms/op:
    [4000.000, 4050.000) = 0 
    [4050.000, 4100.000) = 1 
    [4100.000, 4150.000) = 2 
    [4150.000, 4200.000) = 2 
    [4200.000, 4250.000) = 1 
    [4250.000, 4300.000) = 6 
    [4300.000, 4350.000) = 1 
    [4350.000, 4400.000) = 1 
    [4400.000, 4450.000) = 0 
    [4450.000, 4500.000) = 0 
    [4500.000, 4550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4097.835 ms/op
     p(50.0000) =   4273.996 ms/op
     p(90.0000) =   4440.929 ms/op
     p(95.0000) =   4521.460 ms/op
     p(99.0000) =   4521.460 ms/op
     p(99.9000) =   4521.460 ms/op
     p(99.9900) =   4521.460 ms/op
     p(99.9990) =   4521.460 ms/op
     p(99.9999) =   4521.460 ms/op
    p(100.0000) =   4521.460 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 60.78% complete, ETA 02:39:45
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
271.525 ±(99.9%) 66.684 ms/op
# Warmup Iteration   2: 238.070 ±(99.9%) 6.111 ms/op
# Warmup Iteration   3: 253.903 ±(99.9%) 9.091 ms/op
# Warmup Iteration   4: 255.490 ±(99.9%) 7.609 ms/op
# Warmup Iteration   5: 245.917 ±(99.9%) 9.051 ms/op
Iteration   1: 234.765 ±(99.9%) 1.071 ms/op
                 executeQuery·p0.00:   230.949 ms/op
                 executeQuery·p0.50:   234.619 ms/op
                 executeQuery·p0.90:   237.765 ms/op
                 executeQuery·p0.95:   239.337 ms/op
                 executeQuery·p0.99:   239.600 ms/op
                 executeQuery·p0.999:  239.600 ms/op
                 executeQuery·p0.9999: 239.600 ms/op
                 executeQuery·p1.00:   239.600 ms/op

Iteration   2: 233.826 ±(99.9%) 3.303 ms/op
                 executeQuery·p0.00:   229.638 ms/op
                 executeQuery·p0.50:   231.997 ms/op
                 executeQuery·p0.90:   238.813 ms/op
                 executeQuery·p0.95:   239.757 ms/op
                 executeQuery·p0.99:   268.435 ms/op
                 executeQuery·p0.999:  268.435 ms/op
                 executeQuery·p0.9999: 268.435 ms/op
                 executeQuery·p1.00:   268.435 ms/op

Iteration   3: 234.950 ±(99.9%) 1.688 ms/op
                 executeQuery·p0.00:   228.852 ms/op
                 executeQuery·p0.50:   234.357 ms/op
                 executeQuery·p0.90:   239.888 ms/op
                 executeQuery·p0.95:   240.832 ms/op
                 executeQuery·p0.99:   240.910 ms/op
                 executeQuery·p0.999:  240.910 ms/op
                 executeQuery·p0.9999: 240.910 ms/op
                 executeQuery·p1.00:   240.910 ms/op

Iteration   4: 231.674 ±(99.9%) 0.650 ms/op
                 executeQuery·p0.00:   229.638 ms/op
                 executeQuery·p0.50:   231.473 ms/op
                 executeQuery·p0.90:   233.832 ms/op
                 executeQuery·p0.95:   234.042 ms/op
                 executeQuery·p0.99:   234.357 ms/op
                 executeQuery·p0.999:  234.357 ms/op
                 executeQuery·p0.9999: 234.357 ms/op
                 executeQuery·p1.00:   234.357 ms/op

Iteration   5: 232.211 ±(99.9%) 1.860 ms/op
                 executeQuery·p0.00:   229.900 ms/op
                 executeQuery·p0.50:   231.735 ms/op
                 executeQuery·p0.90:   233.046 ms/op
                 executeQuery·p0.95:   233.937 ms/op
                 executeQuery·p0.99:   253.231 ms/op
                 executeQuery·p0.999:  253.231 ms/op
                 executeQuery·p0.9999: 253.231 ms/op
                 executeQuery·p1.00:   253.231 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 214
  mean =    233.478 ±(99.9%) 0.866 ms/op

  Histogram, ms/op:
    [220.000, 225.000) = 0 
    [225.000, 230.000) = 13 
    [230.000, 235.000) = 159 
    [235.000, 240.000) = 36 
    [240.000, 245.000) = 4 
    [245.000, 250.000) = 0 
    [250.000, 255.000) = 1 
    [255.000, 260.000) = 0 
    [260.000, 265.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    228.852 ms/op
     p(50.0000) =    232.784 ms/op
     p(90.0000) =    237.765 ms/op
     p(95.0000) =    239.337 ms/op
     p(99.0000) =    251.383 ms/op
     p(99.9000) =    268.435 ms/op
     p(99.9900) =    268.435 ms/op
     p(99.9990) =    268.435 ms/op
     p(99.9999) =    268.435 ms/op
    p(100.0000) =    268.435 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 61.76% complete, ETA 02:34:21
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4395.631 ±(99.9%) 33386.808 ms/op
# Warmup Iteration   2: 3199.205 ±(99.9%) 767.681 ms/op
# Warmup Iteration   3: 3178.234 ±(99.9%) 692.556 ms/op
# Warmup Iteration   4: 3149.922 ±(99.9%) 292.752 ms/op
# Warmup Iteration   5: 3088.056 ±(99.9%) 403.455 ms/op
Iteration   1: 3112.174 ±(99.9%) 485.348 ms/op
                 executeQuery·p0.00:   3028.287 ms/op
                 executeQuery·p0.50:   3112.174 ms/op
                 executeQuery·p0.90:   3196.060 ms/op
                 executeQuery·p0.95:   3196.060 ms/op
                 executeQuery·p0.99:   3196.060 ms/op
                 executeQuery·p0.999:  3196.060 ms/op
                 executeQuery·p0.9999: 3196.060 ms/op
                 executeQuery·p1.00:   3196.060 ms/op

Iteration   2: 2972.713 ±(99.9%) 349.468 ms/op
                 executeQuery·p0.00:   2906.653 ms/op
                 executeQuery·p0.50:   2973.762 ms/op
                 executeQuery·p0.90:   3036.676 ms/op
                 executeQuery·p0.95:   3036.676 ms/op
                 executeQuery·p0.99:   3036.676 ms/op
                 executeQuery·p0.999:  3036.676 ms/op
                 executeQuery·p0.9999: 3036.676 ms/op
                 executeQuery·p1.00:   3036.676 ms/op

Iteration   3: 3039.822 ±(99.9%) 935.334 ms/op
                 executeQuery·p0.00:   2822.767 ms/op
                 executeQuery·p0.50:   3110.076 ms/op
                 executeQuery·p0.90:   3116.368 ms/op
                 executeQuery·p0.95:   3116.368 ms/op
                 executeQuery·p0.99:   3116.368 ms/op
                 executeQuery·p0.999:  3116.368 ms/op
                 executeQuery·p0.9999: 3116.368 ms/op
                 executeQuery·p1.00:   3116.368 ms/op

Iteration   4: 3055.550 ±(99.9%) 1792.595 ms/op
                 executeQuery·p0.00:   2751.463 ms/op
                 executeQuery·p0.50:   3024.093 ms/op
                 executeQuery·p0.90:   3422.552 ms/op
                 executeQuery·p0.95:   3422.552 ms/op
                 executeQuery·p0.99:   3422.552 ms/op
                 executeQuery·p0.999:  3422.552 ms/op
                 executeQuery·p0.9999: 3422.552 ms/op
                 executeQuery·p1.00:   3422.552 ms/op

Iteration   5: 3021.996 ±(99.9%) 1205.930 ms/op
                 executeQuery·p0.00:   2751.463 ms/op
                 executeQuery·p0.50:   3082.813 ms/op
                 executeQuery·p0.90:   3170.894 ms/op
                 executeQuery·p0.95:   3170.894 ms/op
                 executeQuery·p0.99:   3170.894 ms/op
                 executeQuery·p0.999:  3170.894 ms/op
                 executeQuery·p0.9999: 3170.894 ms/op
                 executeQuery·p1.00:   3170.894 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   3040.451 ±(99.9%) 135.861 ms/op

  Histogram, ms/op:
    [2700.000, 2750.000) = 0 
    [2750.000, 2800.000) = 2 
    [2800.000, 2850.000) = 1 
    [2850.000, 2900.000) = 0 
    [2900.000, 2950.000) = 1 
    [2950.000, 3000.000) = 3 
    [3000.000, 3050.000) = 2 
    [3050.000, 3100.000) = 3 
    [3100.000, 3150.000) = 5 
    [3150.000, 3200.000) = 2 
    [3200.000, 3250.000) = 0 
    [3250.000, 3300.000) = 0 
    [3300.000, 3350.000) = 0 
    [3350.000, 3400.000) = 0 
    [3400.000, 3450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2751.463 ms/op
     p(50.0000) =   3053.453 ms/op
     p(90.0000) =   3193.543 ms/op
     p(95.0000) =   3411.227 ms/op
     p(99.0000) =   3422.552 ms/op
     p(99.9000) =   3422.552 ms/op
     p(99.9900) =   3422.552 ms/op
     p(99.9990) =   3422.552 ms/op
     p(99.9999) =   3422.552 ms/op
    p(100.0000) =   3422.552 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 62.75% complete, ETA 02:29:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
286.516 ±(99.9%) 77.655 ms/op
# Warmup Iteration   2: 251.219 ±(99.9%) 6.457 ms/op
# Warmup Iteration   3: 267.394 ±(99.9%) 9.061 ms/op
# Warmup Iteration   4: 269.576 ±(99.9%) 7.608 ms/op
# Warmup Iteration   5: 265.871 ±(99.9%) 10.169 ms/op
Iteration   1: 249.915 ±(99.9%) 0.983 ms/op
                 executeQuery·p0.00:   246.415 ms/op
                 executeQuery·p0.50:   249.561 ms/op
                 executeQuery·p0.90:   252.917 ms/op
                 executeQuery·p0.95:   253.467 ms/op
                 executeQuery·p0.99:   253.755 ms/op
                 executeQuery·p0.999:  253.755 ms/op
                 executeQuery·p0.9999: 253.755 ms/op
                 executeQuery·p1.00:   253.755 ms/op

Iteration   2: 247.543 ±(99.9%) 1.280 ms/op
                 executeQuery·p0.00:   244.842 ms/op
                 executeQuery·p0.50:   246.546 ms/op
                 executeQuery·p0.90:   250.583 ms/op
                 executeQuery·p0.95:   251.396 ms/op
                 executeQuery·p0.99:   252.707 ms/op
                 executeQuery·p0.999:  252.707 ms/op
                 executeQuery·p0.9999: 252.707 ms/op
                 executeQuery·p1.00:   252.707 ms/op

Iteration   3: 246.901 ±(99.9%) 1.062 ms/op
                 executeQuery·p0.00:   244.318 ms/op
                 executeQuery·p0.50:   246.678 ms/op
                 executeQuery·p0.90:   249.823 ms/op
                 executeQuery·p0.95:   250.059 ms/op
                 executeQuery·p0.99:   252.707 ms/op
                 executeQuery·p0.999:  252.707 ms/op
                 executeQuery·p0.9999: 252.707 ms/op
                 executeQuery·p1.00:   252.707 ms/op

Iteration   4: 246.051 ±(99.9%) 2.065 ms/op
                 executeQuery·p0.00:   244.056 ms/op
                 executeQuery·p0.50:   245.629 ms/op
                 executeQuery·p0.90:   246.415 ms/op
                 executeQuery·p0.95:   246.651 ms/op
                 executeQuery·p0.99:   268.960 ms/op
                 executeQuery·p0.999:  268.960 ms/op
                 executeQuery·p0.9999: 268.960 ms/op
                 executeQuery·p1.00:   268.960 ms/op

Iteration   5: 247.285 ±(99.9%) 3.434 ms/op
                 executeQuery·p0.00:   244.580 ms/op
                 executeQuery·p0.50:   246.153 ms/op
                 executeQuery·p0.90:   248.198 ms/op
                 executeQuery·p0.95:   250.452 ms/op
                 executeQuery·p0.99:   285.213 ms/op
                 executeQuery·p0.999:  285.213 ms/op
                 executeQuery·p0.9999: 285.213 ms/op
                 executeQuery·p1.00:   285.213 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 203
  mean =    247.527 ±(99.9%) 0.887 ms/op

  Histogram, ms/op:
    [240.000, 245.000) = 17 
    [245.000, 250.000) = 157 
    [250.000, 255.000) = 27 
    [255.000, 260.000) = 0 
    [260.000, 265.000) = 0 
    [265.000, 270.000) = 1 
    [270.000, 275.000) = 0 
    [275.000, 280.000) = 0 
    [280.000, 285.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    244.056 ms/op
     p(50.0000) =    246.415 ms/op
     p(90.0000) =    250.610 ms/op
     p(95.0000) =    251.816 ms/op
     p(99.0000) =    268.352 ms/op
     p(99.9000) =    285.213 ms/op
     p(99.9900) =    285.213 ms/op
     p(99.9990) =    285.213 ms/op
     p(99.9999) =    285.213 ms/op
    p(100.0000) =    285.213 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 63.73% complete, ETA 02:24:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5096.079 ms/op
# Warmup Iteration   2: 3262.120 ±(99.9%) 1061.633 ms/op
# Warmup Iteration   3: 3265.266 ±(99.9%) 565.722 ms/op
# Warmup Iteration   4: 3212.837 ±(99.9%) 539.354 ms/op
# Warmup Iteration   5: 3317.694 ±(99.9%) 729.952 ms/op
Iteration   1: 3227.517 ±(99.9%) 1148.308 ms/op
                 executeQuery·p0.00:   2961.179 ms/op
                 executeQuery·p0.50:   3311.403 ms/op
                 executeQuery·p0.90:   3326.083 ms/op
                 executeQuery·p0.95:   3326.083 ms/op
                 executeQuery·p0.99:   3326.083 ms/op
                 executeQuery·p0.999:  3326.083 ms/op
                 executeQuery·p0.9999: 3326.083 ms/op
                 executeQuery·p1.00:   3326.083 ms/op

Iteration   2: 3061.842 ±(99.9%) 668.676 ms/op
                 executeQuery·p0.00:   2910.847 ms/op
                 executeQuery·p0.50:   3101.688 ms/op
                 executeQuery·p0.90:   3133.145 ms/op
                 executeQuery·p0.95:   3133.145 ms/op
                 executeQuery·p0.99:   3133.145 ms/op
                 executeQuery·p0.999:  3133.145 ms/op
                 executeQuery·p0.9999: 3133.145 ms/op
                 executeQuery·p1.00:   3133.145 ms/op

Iteration   3: 3145.728 ±(99.9%) 1514.407 ms/op
                 executeQuery·p0.00:   2889.875 ms/op
                 executeQuery·p0.50:   3118.465 ms/op
                 executeQuery·p0.90:   3456.106 ms/op
                 executeQuery·p0.95:   3456.106 ms/op
                 executeQuery·p0.99:   3456.106 ms/op
                 executeQuery·p0.999:  3456.106 ms/op
                 executeQuery·p0.9999: 3456.106 ms/op
                 executeQuery·p1.00:   3456.106 ms/op

Iteration   4: 3201.303 ±(99.9%) 403.455 ms/op
                 executeQuery·p0.00:   3107.979 ms/op
                 executeQuery·p0.50:   3229.614 ms/op
                 executeQuery·p0.90:   3238.003 ms/op
                 executeQuery·p0.95:   3238.003 ms/op
                 executeQuery·p0.99:   3238.003 ms/op
                 executeQuery·p0.999:  3238.003 ms/op
                 executeQuery·p0.9999: 3238.003 ms/op
                 executeQuery·p1.00:   3238.003 ms/op

Iteration   5: 3164.602 ±(99.9%) 569.605 ms/op
                 executeQuery·p0.00:   3040.870 ms/op
                 executeQuery·p0.50:   3191.865 ms/op
                 executeQuery·p0.90:   3233.808 ms/op
                 executeQuery·p0.95:   3233.808 ms/op
                 executeQuery·p0.99:   3233.808 ms/op
                 executeQuery·p0.999:  3233.808 ms/op
                 executeQuery·p0.9999: 3233.808 ms/op
                 executeQuery·p1.00:   3233.808 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 20
  mean =   3160.198 ±(99.9%) 124.589 ms/op

  Histogram, ms/op:
    [2800.000, 2850.000) = 0 
    [2850.000, 2900.000) = 1 
    [2900.000, 2950.000) = 1 
    [2950.000, 3000.000) = 1 
    [3000.000, 3050.000) = 1 
    [3050.000, 3100.000) = 2 
    [3100.000, 3150.000) = 4 
    [3150.000, 3200.000) = 1 
    [3200.000, 3250.000) = 5 
    [3250.000, 3300.000) = 0 
    [3300.000, 3350.000) = 3 
    [3350.000, 3400.000) = 0 
    [3400.000, 3450.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2889.875 ms/op
     p(50.0000) =   3154.117 ms/op
     p(90.0000) =   3324.825 ms/op
     p(95.0000) =   3449.605 ms/op
     p(99.0000) =   3456.106 ms/op
     p(99.9000) =   3456.106 ms/op
     p(99.9900) =   3456.106 ms/op
     p(99.9990) =   3456.106 ms/op
     p(99.9999) =   3456.106 ms/op
    p(100.0000) =   3456.106 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 64.71% complete, ETA 02:19:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
262.090 ±(99.9%) 16.133 ms/op
# Warmup Iteration   2: 255.967 ±(99.9%) 0.524 ms/op
# Warmup Iteration   3: 252.917 ±(99.9%) 1.209 ms/op
# Warmup Iteration   4: 251.219 ±(99.9%) 0.500 ms/op
# Warmup Iteration   5: 252.550 ±(99.9%) 5.847 ms/op
Iteration   1: 250.688 ±(99.9%) 0.584 ms/op
                 executeQuery·p0.00:   249.561 ms/op
                 executeQuery·p0.50:   250.348 ms/op
                 executeQuery·p0.90:   252.418 ms/op
                 executeQuery·p0.95:   253.192 ms/op
                 executeQuery·p0.99:   254.280 ms/op
                 executeQuery·p0.999:  254.280 ms/op
                 executeQuery·p0.9999: 254.280 ms/op
                 executeQuery·p1.00:   254.280 ms/op

Iteration   2: 252.995 ±(99.9%) 1.850 ms/op
                 executeQuery·p0.00:   249.037 ms/op
                 executeQuery·p0.50:   250.872 ms/op
                 executeQuery·p0.90:   256.639 ms/op
                 executeQuery·p0.95:   258.644 ms/op
                 executeQuery·p0.99:   262.930 ms/op
                 executeQuery·p0.999:  262.930 ms/op
                 executeQuery·p0.9999: 262.930 ms/op
                 executeQuery·p1.00:   262.930 ms/op

Iteration   3: 255.656 ±(99.9%) 0.896 ms/op
                 executeQuery·p0.00:   253.755 ms/op
                 executeQuery·p0.50:   255.328 ms/op
                 executeQuery·p0.90:   257.950 ms/op
                 executeQuery·p0.95:   258.972 ms/op
                 executeQuery·p0.99:   261.620 ms/op
                 executeQuery·p0.999:  261.620 ms/op
                 executeQuery·p0.9999: 261.620 ms/op
                 executeQuery·p1.00:   261.620 ms/op

Iteration   4: 254.437 ±(99.9%) 1.677 ms/op
                 executeQuery·p0.00:   249.299 ms/op
                 executeQuery·p0.50:   255.066 ms/op
                 executeQuery·p0.90:   257.871 ms/op
                 executeQuery·p0.95:   261.502 ms/op
                 executeQuery·p0.99:   262.668 ms/op
                 executeQuery·p0.999:  262.668 ms/op
                 executeQuery·p0.9999: 262.668 ms/op
                 executeQuery·p1.00:   262.668 ms/op

Iteration   5: 250.774 ±(99.9%) 0.440 ms/op
                 executeQuery·p0.00:   249.037 ms/op
                 executeQuery·p0.50:   250.872 ms/op
                 executeQuery·p0.90:   251.658 ms/op
                 executeQuery·p0.95:   251.920 ms/op
                 executeQuery·p0.99:   252.969 ms/op
                 executeQuery·p0.999:  252.969 ms/op
                 executeQuery·p0.9999: 252.969 ms/op
                 executeQuery·p1.00:   252.969 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 200
  mean =    252.910 ±(99.9%) 0.692 ms/op

  Histogram, ms/op:
    [240.000, 242.500) = 0 
    [242.500, 245.000) = 0 
    [245.000, 247.500) = 0 
    [247.500, 250.000) = 18 
    [250.000, 252.500) = 93 
    [252.500, 255.000) = 28 
    [255.000, 257.500) = 50 
    [257.500, 260.000) = 7 
    [260.000, 262.500) = 2 
    [262.500, 265.000) = 2 
    [265.000, 267.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    249.037 ms/op
     p(50.0000) =    251.658 ms/op
     p(90.0000) =    256.377 ms/op
     p(95.0000) =    257.950 ms/op
     p(99.0000) =    262.658 ms/op
     p(99.9000) =    262.930 ms/op
     p(99.9900) =    262.930 ms/op
     p(99.9990) =    262.930 ms/op
     p(99.9999) =    262.930 ms/op
    p(100.0000) =    262.930 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 65.69% complete, ETA 02:14:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2549.088 ±(99.9%) 2613.526 ms/op
# Warmup Iteration   2: 2248.147 ±(99.9%) 16.151 ms/op
# Warmup Iteration   3: 2516.582 ±(99.9%) 96.462 ms/op
# Warmup Iteration   4: 2497.708 ±(99.9%) 15.648 ms/op
# Warmup Iteration   5: 2549.088 ±(99.9%) 619.787 ms/op
Iteration   1: 2501.902 ±(99.9%) 34.991 ms/op
                 executeQuery·p0.00:   2495.611 ms/op
                 executeQuery·p0.50:   2501.902 ms/op
                 executeQuery·p0.90:   2508.194 ms/op
                 executeQuery·p0.95:   2508.194 ms/op
                 executeQuery·p0.99:   2508.194 ms/op
                 executeQuery·p0.999:  2508.194 ms/op
                 executeQuery·p0.9999: 2508.194 ms/op
                 executeQuery·p1.00:   2508.194 ms/op

Iteration   2: 2508.194 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   2508.194 ms/op
                 executeQuery·p0.50:   2508.194 ms/op
                 executeQuery·p0.90:   2508.194 ms/op
                 executeQuery·p0.95:   2508.194 ms/op
                 executeQuery·p0.99:   2508.194 ms/op
                 executeQuery·p0.999:  2508.194 ms/op
                 executeQuery·p0.9999: 2508.194 ms/op
                 executeQuery·p1.00:   2508.194 ms/op

Iteration   3: 2500.854 ±(99.9%) 40.655 ms/op
                 executeQuery·p0.00:   2495.611 ms/op
                 executeQuery·p0.50:   2499.805 ms/op
                 executeQuery·p0.90:   2508.194 ms/op
                 executeQuery·p0.95:   2508.194 ms/op
                 executeQuery·p0.99:   2508.194 ms/op
                 executeQuery·p0.999:  2508.194 ms/op
                 executeQuery·p0.9999: 2508.194 ms/op
                 executeQuery·p1.00:   2508.194 ms/op

Iteration   4: 2501.902 ±(99.9%) 27.104 ms/op
                 executeQuery·p0.00:   2499.805 ms/op
                 executeQuery·p0.50:   2499.805 ms/op
                 executeQuery·p0.90:   2508.194 ms/op
                 executeQuery·p0.95:   2508.194 ms/op
                 executeQuery·p0.99:   2508.194 ms/op
                 executeQuery·p0.999:  2508.194 ms/op
                 executeQuery·p0.9999: 2508.194 ms/op
                 executeQuery·p1.00:   2508.194 ms/op

Iteration   5: 2513.437 ±(99.9%) 125.917 ms/op
                 executeQuery·p0.00:   2495.611 ms/op
                 executeQuery·p0.50:   2510.291 ms/op
                 executeQuery·p0.90:   2537.554 ms/op
                 executeQuery·p0.95:   2537.554 ms/op
                 executeQuery·p0.99:   2537.554 ms/op
                 executeQuery·p0.999:  2537.554 ms/op
                 executeQuery·p0.9999: 2537.554 ms/op
                 executeQuery·p1.00:   2537.554 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   2505.258 ±(99.9%) 8.611 ms/op

  Histogram, ms/op:
    [2490.000, 2495.000) = 0 
    [2495.000, 2500.000) = 9 
    [2500.000, 2505.000) = 2 
    [2505.000, 2510.000) = 7 
    [2510.000, 2515.000) = 0 
    [2515.000, 2520.000) = 0 
    [2520.000, 2525.000) = 1 
    [2525.000, 2530.000) = 0 
    [2530.000, 2535.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2495.611 ms/op
     p(50.0000) =   2503.999 ms/op
     p(90.0000) =   2519.518 ms/op
     p(95.0000) =   2536.715 ms/op
     p(99.0000) =   2537.554 ms/op
     p(99.9000) =   2537.554 ms/op
     p(99.9900) =   2537.554 ms/op
     p(99.9990) =   2537.554 ms/op
     p(99.9999) =   2537.554 ms/op
    p(100.0000) =   2537.554 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 66.67% complete, ETA 02:09:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
70464.307 ms/op
# Warmup Iteration   2: 71135.396 ms/op
# Warmup Iteration   3: 24796.725 ms/op
# Warmup Iteration   4: 22078.816 ms/op
# Warmup Iteration   5: 22112.371 ms/op
Iteration   1: 22582.133 ms/op
                 executeQuery·p0.00:   22582.133 ms/op
                 executeQuery·p0.50:   22582.133 ms/op
                 executeQuery·p0.90:   22582.133 ms/op
                 executeQuery·p0.95:   22582.133 ms/op
                 executeQuery·p0.99:   22582.133 ms/op
                 executeQuery·p0.999:  22582.133 ms/op
                 executeQuery·p0.9999: 22582.133 ms/op
                 executeQuery·p1.00:   22582.133 ms/op

Iteration   2: 22078.816 ms/op
                 executeQuery·p0.00:   22078.816 ms/op
                 executeQuery·p0.50:   22078.816 ms/op
                 executeQuery·p0.90:   22078.816 ms/op
                 executeQuery·p0.95:   22078.816 ms/op
                 executeQuery·p0.99:   22078.816 ms/op
                 executeQuery·p0.999:  22078.816 ms/op
                 executeQuery·p0.9999: 22078.816 ms/op
                 executeQuery·p1.00:   22078.816 ms/op

Iteration   3: 22078.816 ms/op
                 executeQuery·p0.00:   22078.816 ms/op
                 executeQuery·p0.50:   22078.816 ms/op
                 executeQuery·p0.90:   22078.816 ms/op
                 executeQuery·p0.95:   22078.816 ms/op
                 executeQuery·p0.99:   22078.816 ms/op
                 executeQuery·p0.999:  22078.816 ms/op
                 executeQuery·p0.9999: 22078.816 ms/op
                 executeQuery·p1.00:   22078.816 ms/op

Iteration   4: 22078.816 ms/op
                 executeQuery·p0.00:   22078.816 ms/op
                 executeQuery·p0.50:   22078.816 ms/op
                 executeQuery·p0.90:   22078.816 ms/op
                 executeQuery·p0.95:   22078.816 ms/op
                 executeQuery·p0.99:   22078.816 ms/op
                 executeQuery·p0.999:  22078.816 ms/op
                 executeQuery·p0.9999: 22078.816 ms/op
                 executeQuery·p1.00:   22078.816 ms/op

Iteration   5: 25031.606 ms/op
                 executeQuery·p0.00:   25031.606 ms/op
                 executeQuery·p0.50:   25031.606 ms/op
                 executeQuery·p0.90:   25031.606 ms/op
                 executeQuery·p0.95:   25031.606 ms/op
                 executeQuery·p0.99:   25031.606 ms/op
                 executeQuery·p0.999:  25031.606 ms/op
                 executeQuery·p0.9999: 25031.606 ms/op
                 executeQuery·p1.00:   25031.606 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  22770.038 ±(99.9%) 4940.003 ms/op

  Histogram, ms/op:
    [22000.000, 22250.000) = 3 
    [22250.000, 22500.000) = 0 
    [22500.000, 22750.000) = 1 
    [22750.000, 23000.000) = 0 
    [23000.000, 23250.000) = 0 
    [23250.000, 23500.000) = 0 
    [23500.000, 23750.000) = 0 
    [23750.000, 24000.000) = 0 
    [24000.000, 24250.000) = 0 
    [24250.000, 24500.000) = 0 
    [24500.000, 24750.000) = 0 
    [24750.000, 25000.000) = 0 
    [25000.000, 25250.000) = 1 
    [25250.000, 25500.000) = 0 
    [25500.000, 25750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  22078.816 ms/op
     p(50.0000) =  22078.816 ms/op
     p(90.0000) =  25031.606 ms/op
     p(95.0000) =  25031.606 ms/op
     p(99.0000) =  25031.606 ms/op
     p(99.9000) =  25031.606 ms/op
     p(99.9900) =  25031.606 ms/op
     p(99.9990) =  25031.606 ms/op
     p(99.9999) =  25031.606 ms/op
    p(100.0000) =  25031.606 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 67.65% complete, ETA 02:06:21
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
354.835 ±(99.9%) 12.386 ms/op
# Warmup Iteration   2: 345.904 ±(99.9%) 5.240 ms/op
# Warmup Iteration   3: 343.861 ±(99.9%) 1.770 ms/op
# Warmup Iteration   4: 345.560 ±(99.9%) 5.282 ms/op
# Warmup Iteration   5: 344.403 ±(99.9%) 2.725 ms/op
Iteration   1: 349.592 ±(99.9%) 14.582 ms/op
                 executeQuery·p0.00:   341.311 ms/op
                 executeQuery·p0.50:   343.409 ms/op
                 executeQuery·p0.90:   350.749 ms/op
                 executeQuery·p0.95:   426.246 ms/op
                 executeQuery·p0.99:   429.392 ms/op
                 executeQuery·p0.999:  429.392 ms/op
                 executeQuery·p0.9999: 429.392 ms/op
                 executeQuery·p1.00:   429.392 ms/op

Iteration   2: 346.717 ±(99.9%) 10.812 ms/op
                 executeQuery·p0.00:   341.836 ms/op
                 executeQuery·p0.50:   342.884 ms/op
                 executeQuery·p0.90:   349.700 ms/op
                 executeQuery·p0.95:   391.119 ms/op
                 executeQuery·p0.99:   427.819 ms/op
                 executeQuery·p0.999:  427.819 ms/op
                 executeQuery·p0.9999: 427.819 ms/op
                 executeQuery·p1.00:   427.819 ms/op

Iteration   3: 344.258 ±(99.9%) 3.344 ms/op
                 executeQuery·p0.00:   341.311 ms/op
                 executeQuery·p0.50:   342.884 ms/op
                 executeQuery·p0.90:   346.554 ms/op
                 executeQuery·p0.95:   358.351 ms/op
                 executeQuery·p0.99:   368.050 ms/op
                 executeQuery·p0.999:  368.050 ms/op
                 executeQuery·p0.9999: 368.050 ms/op
                 executeQuery·p1.00:   368.050 ms/op

Iteration   4: 347.350 ±(99.9%) 12.082 ms/op
                 executeQuery·p0.00:   341.311 ms/op
                 executeQuery·p0.50:   342.884 ms/op
                 executeQuery·p0.90:   352.846 ms/op
                 executeQuery·p0.95:   395.575 ms/op
                 executeQuery·p0.99:   437.780 ms/op
                 executeQuery·p0.999:  437.780 ms/op
                 executeQuery·p0.9999: 437.780 ms/op
                 executeQuery·p1.00:   437.780 ms/op

Iteration   5: 344.020 ±(99.9%) 1.556 ms/op
                 executeQuery·p0.00:   341.311 ms/op
                 executeQuery·p0.50:   343.409 ms/op
                 executeQuery·p0.90:   348.652 ms/op
                 executeQuery·p0.95:   349.412 ms/op
                 executeQuery·p0.99:   349.700 ms/op
                 executeQuery·p0.999:  349.700 ms/op
                 executeQuery·p0.9999: 349.700 ms/op
                 executeQuery·p1.00:   349.700 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 146
  mean =    346.371 ±(99.9%) 4.003 ms/op

  Histogram, ms/op:
    [340.000, 350.000) = 136 
    [350.000, 360.000) = 5 
    [360.000, 370.000) = 1 
    [370.000, 380.000) = 0 
    [380.000, 390.000) = 0 
    [390.000, 400.000) = 0 
    [400.000, 410.000) = 0 
    [410.000, 420.000) = 0 
    [420.000, 430.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    341.311 ms/op
     p(50.0000) =    342.884 ms/op
     p(90.0000) =    348.809 ms/op
     p(95.0000) =    353.187 ms/op
     p(99.0000) =    433.838 ms/op
     p(99.9000) =    437.780 ms/op
     p(99.9900) =    437.780 ms/op
     p(99.9990) =    437.780 ms/op
     p(99.9999) =    437.780 ms/op
    p(100.0000) =    437.780 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 68.63% complete, ETA 02:01:34
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3499.448 ±(99.9%) 650.793 ms/op
# Warmup Iteration   2: 3470.088 ±(99.9%) 245.976 ms/op
# Warmup Iteration   3: 3482.670 ±(99.9%) 192.570 ms/op
# Warmup Iteration   4: 3471.486 ±(99.9%) 268.728 ms/op
# Warmup Iteration   5: 3482.670 ±(99.9%) 774.073 ms/op
Iteration   1: 3470.088 ±(99.9%) 309.251 ms/op
                 executeQuery·p0.00:   3451.912 ms/op
                 executeQuery·p0.50:   3472.884 ms/op
                 executeQuery·p0.90:   3485.467 ms/op
                 executeQuery·p0.95:   3485.467 ms/op
                 executeQuery·p0.99:   3485.467 ms/op
                 executeQuery·p0.999:  3485.467 ms/op
                 executeQuery·p0.9999: 3485.467 ms/op
                 executeQuery·p1.00:   3485.467 ms/op

Iteration   2: 3472.884 ±(99.9%) 153.039 ms/op
                 executeQuery·p0.00:   3464.495 ms/op
                 executeQuery·p0.50:   3472.884 ms/op
                 executeQuery·p0.90:   3481.272 ms/op
                 executeQuery·p0.95:   3481.272 ms/op
                 executeQuery·p0.99:   3481.272 ms/op
                 executeQuery·p0.999:  3481.272 ms/op
                 executeQuery·p0.9999: 3481.272 ms/op
                 executeQuery·p1.00:   3481.272 ms/op

Iteration   3: 3481.272 ±(99.9%) 809.809 ms/op
                 executeQuery·p0.00:   3447.718 ms/op
                 executeQuery·p0.50:   3464.495 ms/op
                 executeQuery·p0.90:   3531.604 ms/op
                 executeQuery·p0.95:   3531.604 ms/op
                 executeQuery·p0.99:   3531.604 ms/op
                 executeQuery·p0.999:  3531.604 ms/op
                 executeQuery·p0.9999: 3531.604 ms/op
                 executeQuery·p1.00:   3531.604 ms/op

Iteration   4: 3474.282 ±(99.9%) 309.251 ms/op
                 executeQuery·p0.00:   3456.106 ms/op
                 executeQuery·p0.50:   3477.078 ms/op
                 executeQuery·p0.90:   3489.661 ms/op
                 executeQuery·p0.95:   3489.661 ms/op
                 executeQuery·p0.99:   3489.661 ms/op
                 executeQuery·p0.999:  3489.661 ms/op
                 executeQuery·p0.9999: 3489.661 ms/op
                 executeQuery·p1.00:   3489.661 ms/op

Iteration   5: 3468.689 ±(99.9%) 530.144 ms/op
                 executeQuery·p0.00:   3435.135 ms/op
                 executeQuery·p0.50:   3485.467 ms/op
                 executeQuery·p0.90:   3485.467 ms/op
                 executeQuery·p0.95:   3485.467 ms/op
                 executeQuery·p0.99:   3485.467 ms/op
                 executeQuery·p0.999:  3485.467 ms/op
                 executeQuery·p0.9999: 3485.467 ms/op
                 executeQuery·p1.00:   3485.467 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 15
  mean =   3473.443 ±(99.9%) 24.258 ms/op

  Histogram, ms/op:
    [3430.000, 3440.000) = 1 
    [3440.000, 3450.000) = 1 
    [3450.000, 3460.000) = 2 
    [3460.000, 3470.000) = 2 
    [3470.000, 3480.000) = 3 
    [3480.000, 3490.000) = 5 
    [3490.000, 3500.000) = 0 
    [3500.000, 3510.000) = 0 
    [3510.000, 3520.000) = 0 
    [3520.000, 3530.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3435.135 ms/op
     p(50.0000) =   3472.884 ms/op
     p(90.0000) =   3506.438 ms/op
     p(95.0000) =   3531.604 ms/op
     p(99.0000) =   3531.604 ms/op
     p(99.9000) =   3531.604 ms/op
     p(99.9900) =   3531.604 ms/op
     p(99.9990) =   3531.604 ms/op
     p(99.9999) =   3531.604 ms/op
    p(100.0000) =   3531.604 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 69.61% complete, ETA 01:56:54
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
33655.095 ms/op
# Warmup Iteration   2: 35030.827 ms/op
# Warmup Iteration   3: 35567.698 ms/op
# Warmup Iteration   4: 35433.480 ms/op
# Warmup Iteration   5: 34426.847 ms/op
Iteration   1: 34896.609 ms/op
                 executeQuery·p0.00:   34896.609 ms/op
                 executeQuery·p0.50:   34896.609 ms/op
                 executeQuery·p0.90:   34896.609 ms/op
                 executeQuery·p0.95:   34896.609 ms/op
                 executeQuery·p0.99:   34896.609 ms/op
                 executeQuery·p0.999:  34896.609 ms/op
                 executeQuery·p0.9999: 34896.609 ms/op
                 executeQuery·p1.00:   34896.609 ms/op

Iteration   2: 34359.738 ms/op
                 executeQuery·p0.00:   34359.738 ms/op
                 executeQuery·p0.50:   34359.738 ms/op
                 executeQuery·p0.90:   34359.738 ms/op
                 executeQuery·p0.95:   34359.738 ms/op
                 executeQuery·p0.99:   34359.738 ms/op
                 executeQuery·p0.999:  34359.738 ms/op
                 executeQuery·p0.9999: 34359.738 ms/op
                 executeQuery·p1.00:   34359.738 ms/op

Iteration   3: 34628.174 ms/op
                 executeQuery·p0.00:   34628.174 ms/op
                 executeQuery·p0.50:   34628.174 ms/op
                 executeQuery·p0.90:   34628.174 ms/op
                 executeQuery·p0.95:   34628.174 ms/op
                 executeQuery·p0.99:   34628.174 ms/op
                 executeQuery·p0.999:  34628.174 ms/op
                 executeQuery·p0.9999: 34628.174 ms/op
                 executeQuery·p1.00:   34628.174 ms/op

Iteration   4: 34326.184 ms/op
                 executeQuery·p0.00:   34326.184 ms/op
                 executeQuery·p0.50:   34326.184 ms/op
                 executeQuery·p0.90:   34326.184 ms/op
                 executeQuery·p0.95:   34326.184 ms/op
                 executeQuery·p0.99:   34326.184 ms/op
                 executeQuery·p0.999:  34326.184 ms/op
                 executeQuery·p0.9999: 34326.184 ms/op
                 executeQuery·p1.00:   34326.184 ms/op

Iteration   5: 34426.847 ms/op
                 executeQuery·p0.00:   34426.847 ms/op
                 executeQuery·p0.50:   34426.847 ms/op
                 executeQuery·p0.90:   34426.847 ms/op
                 executeQuery·p0.95:   34426.847 ms/op
                 executeQuery·p0.99:   34426.847 ms/op
                 executeQuery·p0.999:  34426.847 ms/op
                 executeQuery·p0.9999: 34426.847 ms/op
                 executeQuery·p1.00:   34426.847 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 5
  mean =  34527.511 ±(99.9%) 913.626 ms/op

  Histogram, ms/op:
    [34300.000, 34350.000) = 1 
    [34350.000, 34400.000) = 1 
    [34400.000, 34450.000) = 1 
    [34450.000, 34500.000) = 0 
    [34500.000, 34550.000) = 0 
    [34550.000, 34600.000) = 0 
    [34600.000, 34650.000) = 1 
    [34650.000, 34700.000) = 0 
    [34700.000, 34750.000) = 0 
    [34750.000, 34800.000) = 0 
    [34800.000, 34850.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  34326.184 ms/op
     p(50.0000) =  34426.847 ms/op
     p(90.0000) =  34896.609 ms/op
     p(95.0000) =  34896.609 ms/op
     p(99.0000) =  34896.609 ms/op
     p(99.9000) =  34896.609 ms/op
     p(99.9900) =  34896.609 ms/op
     p(99.9990) =  34896.609 ms/op
     p(99.9999) =  34896.609 ms/op
    p(100.0000) =  34896.609 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 70.59% complete, ETA 01:53:59
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
453.122 ±(99.9%) 53.449 ms/op
# Warmup Iteration   2: 520.015 ±(99.9%) 1.273 ms/op
# Warmup Iteration   3: 419.758 ±(99.9%) 37.853 ms/op
# Warmup Iteration   4: 394.305 ±(99.9%) 1.932 ms/op
# Warmup Iteration   5: 394.043 ±(99.9%) 0.976 ms/op
Iteration   1: 393.680 ±(99.9%) 0.769 ms/op
                 executeQuery·p0.00:   391.119 ms/op
                 executeQuery·p0.50:   393.740 ms/op
                 executeQuery·p0.90:   394.946 ms/op
                 executeQuery·p0.95:   395.995 ms/op
                 executeQuery·p0.99:   396.362 ms/op
                 executeQuery·p0.999:  396.362 ms/op
                 executeQuery·p0.9999: 396.362 ms/op
                 executeQuery·p1.00:   396.362 ms/op

Iteration   2: 393.902 ±(99.9%) 1.220 ms/op
                 executeQuery·p0.00:   391.643 ms/op
                 executeQuery·p0.50:   393.740 ms/op
                 executeQuery·p0.90:   395.837 ms/op
                 executeQuery·p0.95:   398.905 ms/op
                 executeQuery·p0.99:   400.556 ms/op
                 executeQuery·p0.999:  400.556 ms/op
                 executeQuery·p0.9999: 400.556 ms/op
                 executeQuery·p1.00:   400.556 ms/op

Iteration   3: 393.861 ±(99.9%) 1.090 ms/op
                 executeQuery·p0.00:   392.167 ms/op
                 executeQuery·p0.50:   393.740 ms/op
                 executeQuery·p0.90:   394.789 ms/op
                 executeQuery·p0.95:   398.538 ms/op
                 executeQuery·p0.99:   400.556 ms/op
                 executeQuery·p0.999:  400.556 ms/op
                 executeQuery·p0.9999: 400.556 ms/op
                 executeQuery·p1.00:   400.556 ms/op

Iteration   4: 393.781 ±(99.9%) 1.225 ms/op
                 executeQuery·p0.00:   392.692 ms/op
                 executeQuery·p0.50:   393.216 ms/op
                 executeQuery·p0.90:   394.422 ms/op
                 executeQuery·p0.95:   399.219 ms/op
                 executeQuery·p0.99:   401.605 ms/op
                 executeQuery·p0.999:  401.605 ms/op
                 executeQuery·p0.9999: 401.605 ms/op
                 executeQuery·p1.00:   401.605 ms/op

Iteration   5: 393.095 ±(99.9%) 0.566 ms/op
                 executeQuery·p0.00:   391.643 ms/op
                 executeQuery·p0.50:   393.216 ms/op
                 executeQuery·p0.90:   394.055 ms/op
                 executeQuery·p0.95:   394.789 ms/op
                 executeQuery·p0.99:   394.789 ms/op
                 executeQuery·p0.999:  394.789 ms/op
                 executeQuery·p0.9999: 394.789 ms/op
                 executeQuery·p1.00:   394.789 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 130
  mean =    393.664 ±(99.9%) 0.411 ms/op

  Histogram, ms/op:
    [390.000, 391.250) = 1 
    [391.250, 392.500) = 10 
    [392.500, 393.750) = 90 
    [393.750, 395.000) = 22 
    [395.000, 396.250) = 3 
    [396.250, 397.500) = 1 
    [397.500, 398.750) = 0 
    [398.750, 400.000) = 0 
    [400.000, 401.250) = 2 
    [401.250, 402.500) = 1 
    [402.500, 403.750) = 0 
    [403.750, 405.000) = 0 
    [405.000, 406.250) = 0 
    [406.250, 407.500) = 0 
    [407.500, 408.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    391.119 ms/op
     p(50.0000) =    393.216 ms/op
     p(90.0000) =    394.789 ms/op
     p(95.0000) =    395.549 ms/op
     p(99.0000) =    401.280 ms/op
     p(99.9000) =    401.605 ms/op
     p(99.9900) =    401.605 ms/op
     p(99.9990) =    401.605 ms/op
     p(99.9999) =    401.605 ms/op
    p(100.0000) =    401.605 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 71.57% complete, ETA 01:49:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4262.811 ±(99.9%) 11577.596 ms/op
# Warmup Iteration   2: 5054.136 ms/op
# Warmup Iteration   3: 4069.873 ±(99.9%) 116.886 ms/op
# Warmup Iteration   4: 4093.641 ±(99.9%) 577.711 ms/op
# Warmup Iteration   5: 4078.262 ±(99.9%) 318.577 ms/op
Iteration   1: 4057.290 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   4051.698 ms/op
                 executeQuery·p0.50:   4055.892 ms/op
                 executeQuery·p0.90:   4064.281 ms/op
                 executeQuery·p0.95:   4064.281 ms/op
                 executeQuery·p0.99:   4064.281 ms/op
                 executeQuery·p0.999:  4064.281 ms/op
                 executeQuery·p0.9999: 4064.281 ms/op
                 executeQuery·p1.00:   4064.281 ms/op

Iteration   2: 4046.105 ±(99.9%) 441.787 ms/op
                 executeQuery·p0.00:   4018.143 ms/op
                 executeQuery·p0.50:   4060.086 ms/op
                 executeQuery·p0.90:   4060.086 ms/op
                 executeQuery·p0.95:   4060.086 ms/op
                 executeQuery·p0.99:   4060.086 ms/op
                 executeQuery·p0.999:  4060.086 ms/op
                 executeQuery·p0.9999: 4060.086 ms/op
                 executeQuery·p1.00:   4060.086 ms/op

Iteration   3: 4057.290 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   4051.698 ms/op
                 executeQuery·p0.50:   4055.892 ms/op
                 executeQuery·p0.90:   4064.281 ms/op
                 executeQuery·p0.95:   4064.281 ms/op
                 executeQuery·p0.99:   4064.281 ms/op
                 executeQuery·p0.999:  4064.281 ms/op
                 executeQuery·p0.9999: 4064.281 ms/op
                 executeQuery·p1.00:   4064.281 ms/op

Iteration   4: 4055.892 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   4055.892 ms/op
                 executeQuery·p0.50:   4055.892 ms/op
                 executeQuery·p0.90:   4055.892 ms/op
                 executeQuery·p0.95:   4055.892 ms/op
                 executeQuery·p0.99:   4055.892 ms/op
                 executeQuery·p0.999:  4055.892 ms/op
                 executeQuery·p0.9999: 4055.892 ms/op
                 executeQuery·p1.00:   4055.892 ms/op

Iteration   5: 4051.698 ±(99.9%) 465.451 ms/op
                 executeQuery·p0.00:   4022.338 ms/op
                 executeQuery·p0.50:   4064.281 ms/op
                 executeQuery·p0.90:   4068.475 ms/op
                 executeQuery·p0.95:   4068.475 ms/op
                 executeQuery·p0.99:   4068.475 ms/op
                 executeQuery·p0.999:  4068.475 ms/op
                 executeQuery·p0.9999: 4068.475 ms/op
                 executeQuery·p1.00:   4068.475 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   4053.655 ±(99.9%) 15.428 ms/op

  Histogram, ms/op:
    [4010.000, 4015.000) = 0 
    [4015.000, 4020.000) = 1 
    [4020.000, 4025.000) = 1 
    [4025.000, 4030.000) = 0 
    [4030.000, 4035.000) = 0 
    [4035.000, 4040.000) = 0 
    [4040.000, 4045.000) = 0 
    [4045.000, 4050.000) = 0 
    [4050.000, 4055.000) = 2 
    [4055.000, 4060.000) = 5 
    [4060.000, 4065.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =   4018.143 ms/op
     p(50.0000) =   4055.892 ms/op
     p(90.0000) =   4065.958 ms/op
     p(95.0000) =   4068.475 ms/op
     p(99.0000) =   4068.475 ms/op
     p(99.9000) =   4068.475 ms/op
     p(99.9900) =   4068.475 ms/op
     p(99.9990) =   4068.475 ms/op
     p(99.9999) =   4068.475 ms/op
    p(100.0000) =   4068.475 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 72.55% complete, ETA 01:44:56
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
38117.835 ms/op
# Warmup Iteration   2: 37111.202 ms/op
# Warmup Iteration   3: 37513.855 ms/op
# Warmup Iteration   4: 35903.242 ms/op
# Warmup Iteration   5: 37044.093 ms/op
Iteration   1: 35701.916 ms/op
                 executeQuery·p0.00:   35701.916 ms/op
                 executeQuery·p0.50:   35701.916 ms/op
                 executeQuery·p0.90:   35701.916 ms/op
                 executeQuery·p0.95:   35701.916 ms/op
                 executeQuery·p0.99:   35701.916 ms/op
                 executeQuery·p0.999:  35701.916 ms/op
                 executeQuery·p0.9999: 35701.916 ms/op
                 executeQuery·p1.00:   35701.916 ms/op

Iteration   2: 35701.916 ms/op
                 executeQuery·p0.00:   35701.916 ms/op
                 executeQuery·p0.50:   35701.916 ms/op
                 executeQuery·p0.90:   35701.916 ms/op
                 executeQuery·p0.95:   35701.916 ms/op
                 executeQuery·p0.99:   35701.916 ms/op
                 executeQuery·p0.999:  35701.916 ms/op
                 executeQuery·p0.9999: 35701.916 ms/op
                 executeQuery·p1.00:   35701.916 ms/op

Iteration   3: 35836.133 ms/op
                 executeQuery·p0.00:   35836.133 ms/op
                 executeQuery·p0.50:   35836.133 ms/op
                 executeQuery·p0.90:   35836.133 ms/op
                 executeQuery·p0.95:   35836.133 ms/op
                 executeQuery·p0.99:   35836.133 ms/op
                 executeQuery·p0.999:  35836.133 ms/op
                 executeQuery·p0.9999: 35836.133 ms/op
                 executeQuery·p1.00:   35836.133 ms/op

Iteration   4: 35769.025 ms/op
                 executeQuery·p0.00:   35769.025 ms/op
                 executeQuery·p0.50:   35769.025 ms/op
                 executeQuery·p0.90:   35769.025 ms/op
                 executeQuery·p0.95:   35769.025 ms/op
                 executeQuery·p0.99:   35769.025 ms/op
                 executeQuery·p0.999:  35769.025 ms/op
                 executeQuery·p0.9999: 35769.025 ms/op
                 executeQuery·p1.00:   35769.025 ms/op

Iteration   5: 35769.025 ms/op
                 executeQuery·p0.00:   35769.025 ms/op
                 executeQuery·p0.50:   35769.025 ms/op
                 executeQuery·p0.90:   35769.025 ms/op
                 executeQuery·p0.95:   35769.025 ms/op
                 executeQuery·p0.99:   35769.025 ms/op
                 executeQuery·p0.999:  35769.025 ms/op
                 executeQuery·p0.9999: 35769.025 ms/op
                 executeQuery·p1.00:   35769.025 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  35755.603 ±(99.9%) 216.203 ms/op

  Histogram, ms/op:
    [35700.000, 35712.500) = 2 
    [35712.500, 35725.000) = 0 
    [35725.000, 35737.500) = 0 
    [35737.500, 35750.000) = 0 
    [35750.000, 35762.500) = 0 
    [35762.500, 35775.000) = 2 
    [35775.000, 35787.500) = 0 
    [35787.500, 35800.000) = 0 
    [35800.000, 35812.500) = 0 
    [35812.500, 35825.000) = 0 
    [35825.000, 35837.500) = 1 
    [35837.500, 35850.000) = 0 
    [35850.000, 35862.500) = 0 
    [35862.500, 35875.000) = 0 
    [35875.000, 35887.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =  35701.916 ms/op
     p(50.0000) =  35769.025 ms/op
     p(90.0000) =  35836.133 ms/op
     p(95.0000) =  35836.133 ms/op
     p(99.0000) =  35836.133 ms/op
     p(99.9000) =  35836.133 ms/op
     p(99.9900) =  35836.133 ms/op
     p(99.9990) =  35836.133 ms/op
     p(99.9999) =  35836.133 ms/op
    p(100.0000) =  35836.133 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 73.53% complete, ETA 01:42:02
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
430.309 ±(99.9%) 53.613 ms/op
# Warmup Iteration   2: 488.736 ±(99.9%) 6.696 ms/op
# Warmup Iteration   3: 378.614 ±(99.9%) 24.800 ms/op
# Warmup Iteration   4: 365.672 ±(99.9%) 2.932 ms/op
# Warmup Iteration   5: 367.788 ±(99.9%) 4.384 ms/op
Iteration   1: 369.701 ±(99.9%) 4.606 ms/op
                 executeQuery·p0.00:   363.332 ms/op
                 executeQuery·p0.50:   367.002 ms/op
                 executeQuery·p0.90:   382.101 ms/op
                 executeQuery·p0.95:   384.093 ms/op
                 executeQuery·p0.99:   384.303 ms/op
                 executeQuery·p0.999:  384.303 ms/op
                 executeQuery·p0.9999: 384.303 ms/op
                 executeQuery·p1.00:   384.303 ms/op

Iteration   2: 370.652 ±(99.9%) 4.710 ms/op
                 executeQuery·p0.00:   361.759 ms/op
                 executeQuery·p0.50:   371.196 ms/op
                 executeQuery·p0.90:   378.746 ms/op
                 executeQuery·p0.95:   386.400 ms/op
                 executeQuery·p0.99:   389.546 ms/op
                 executeQuery·p0.999:  389.546 ms/op
                 executeQuery·p0.9999: 389.546 ms/op
                 executeQuery·p1.00:   389.546 ms/op

Iteration   3: 368.294 ±(99.9%) 5.085 ms/op
                 executeQuery·p0.00:   359.662 ms/op
                 executeQuery·p0.50:   367.264 ms/op
                 executeQuery·p0.90:   375.495 ms/op
                 executeQuery·p0.95:   387.396 ms/op
                 executeQuery·p0.99:   396.362 ms/op
                 executeQuery·p0.999:  396.362 ms/op
                 executeQuery·p0.9999: 396.362 ms/op
                 executeQuery·p1.00:   396.362 ms/op

Iteration   4: 365.054 ±(99.9%) 2.814 ms/op
                 executeQuery·p0.00:   359.137 ms/op
                 executeQuery·p0.50:   363.856 ms/op
                 executeQuery·p0.90:   373.293 ms/op
                 executeQuery·p0.95:   373.293 ms/op
                 executeQuery·p0.99:   373.293 ms/op
                 executeQuery·p0.999:  373.293 ms/op
                 executeQuery·p0.9999: 373.293 ms/op
                 executeQuery·p1.00:   373.293 ms/op

Iteration   5: 365.691 ±(99.9%) 3.436 ms/op
                 executeQuery·p0.00:   360.710 ms/op
                 executeQuery·p0.50:   364.118 ms/op
                 executeQuery·p0.90:   372.244 ms/op
                 executeQuery·p0.95:   380.135 ms/op
                 executeQuery·p0.99:   382.730 ms/op
                 executeQuery·p0.999:  382.730 ms/op
                 executeQuery·p0.9999: 382.730 ms/op
                 executeQuery·p1.00:   382.730 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 138
  mean =    367.845 ±(99.9%) 1.799 ms/op

  Histogram, ms/op:
    [350.000, 355.000) = 0 
    [355.000, 360.000) = 2 
    [360.000, 365.000) = 55 
    [365.000, 370.000) = 39 
    [370.000, 375.000) = 25 
    [375.000, 380.000) = 10 
    [380.000, 385.000) = 5 
    [385.000, 390.000) = 1 
    [390.000, 395.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    359.137 ms/op
     p(50.0000) =    366.477 ms/op
     p(90.0000) =    375.914 ms/op
     p(95.0000) =    381.682 ms/op
     p(99.0000) =    393.704 ms/op
     p(99.9000) =    396.362 ms/op
     p(99.9900) =    396.362 ms/op
     p(99.9990) =    396.362 ms/op
     p(99.9999) =    396.362 ms/op
    p(100.0000) =    396.362 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 74.51% complete, ETA 01:37:34
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4104.826 ±(99.9%) 8063.789 ms/op
# Warmup Iteration   2: 4280.986 ±(99.9%) 12464.340 ms/op
# Warmup Iteration   3: 3541.391 ±(99.9%) 1921.138 ms/op
# Warmup Iteration   4: 3500.846 ±(99.9%) 870.219 ms/op
# Warmup Iteration   5: 3295.674 ±(99.9%) 125.917 ms/op
Iteration   1: 3297.772 ±(99.9%) 140.617 ms/op
                 executeQuery·p0.00:   3284.140 ms/op
                 executeQuery·p0.50:   3288.334 ms/op
                 executeQuery·p0.90:   3330.277 ms/op
                 executeQuery·p0.95:   3330.277 ms/op
                 executeQuery·p0.99:   3330.277 ms/op
                 executeQuery·p0.999:  3330.277 ms/op
                 executeQuery·p0.9999: 3330.277 ms/op
                 executeQuery·p1.00:   3330.277 ms/op

Iteration   2: 3370.822 ±(99.9%) 896.729 ms/op
                 executeQuery·p0.00:   3334.472 ms/op
                 executeQuery·p0.50:   3351.249 ms/op
                 executeQuery·p0.90:   3426.746 ms/op
                 executeQuery·p0.95:   3426.746 ms/op
                 executeQuery·p0.99:   3426.746 ms/op
                 executeQuery·p0.999:  3426.746 ms/op
                 executeQuery·p0.9999: 3426.746 ms/op
                 executeQuery·p1.00:   3426.746 ms/op

Iteration   3: 3342.860 ±(99.9%) 1300.835 ms/op
                 executeQuery·p0.00:   3271.557 ms/op
                 executeQuery·p0.50:   3342.860 ms/op
                 executeQuery·p0.90:   3414.163 ms/op
                 executeQuery·p0.95:   3414.163 ms/op
                 executeQuery·p0.99:   3414.163 ms/op
                 executeQuery·p0.999:  3414.163 ms/op
                 executeQuery·p0.9999: 3414.163 ms/op
                 executeQuery·p1.00:   3414.163 ms/op

Iteration   4: 3315.597 ±(99.9%) 78.241 ms/op
                 executeQuery·p0.00:   3300.917 ms/op
                 executeQuery·p0.50:   3315.597 ms/op
                 executeQuery·p0.90:   3330.277 ms/op
                 executeQuery·p0.95:   3330.277 ms/op
                 executeQuery·p0.99:   3330.277 ms/op
                 executeQuery·p0.999:  3330.277 ms/op
                 executeQuery·p0.9999: 3330.277 ms/op
                 executeQuery·p1.00:   3330.277 ms/op

Iteration   5: 3335.870 ±(99.9%) 623.217 ms/op
                 executeQuery·p0.00:   3296.723 ms/op
                 executeQuery·p0.50:   3351.249 ms/op
                 executeQuery·p0.90:   3359.638 ms/op
                 executeQuery·p0.95:   3359.638 ms/op
                 executeQuery·p0.99:   3359.638 ms/op
                 executeQuery·p0.999:  3359.638 ms/op
                 executeQuery·p0.9999: 3359.638 ms/op
                 executeQuery·p1.00:   3359.638 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 17
  mean =   3329.537 ±(99.9%) 42.007 ms/op

  Histogram, ms/op:
    [3200.000, 3225.000) = 0 
    [3225.000, 3250.000) = 0 
    [3250.000, 3275.000) = 1 
    [3275.000, 3300.000) = 4 
    [3300.000, 3325.000) = 3 
    [3325.000, 3350.000) = 4 
    [3350.000, 3375.000) = 3 
    [3375.000, 3400.000) = 0 
    [3400.000, 3425.000) = 1 
    [3425.000, 3450.000) = 1 
    [3450.000, 3475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3271.557 ms/op
     p(50.0000) =   3330.277 ms/op
     p(90.0000) =   3416.680 ms/op
     p(95.0000) =   3426.746 ms/op
     p(99.0000) =   3426.746 ms/op
     p(99.9000) =   3426.746 ms/op
     p(99.9900) =   3426.746 ms/op
     p(99.9990) =   3426.746 ms/op
     p(99.9999) =   3426.746 ms/op
    p(100.0000) =   3426.746 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 75.49% complete, ETA 01:33:14
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
35366.371 ms/op
# Warmup Iteration   2: 34695.283 ms/op
# Warmup Iteration   3: 32816.234 ms/op
# Warmup Iteration   4: 34359.738 ms/op
# Warmup Iteration   5: 33990.640 ms/op
Iteration   1: 34091.303 ms/op
                 executeQuery·p0.00:   34091.303 ms/op
                 executeQuery·p0.50:   34091.303 ms/op
                 executeQuery·p0.90:   34091.303 ms/op
                 executeQuery·p0.95:   34091.303 ms/op
                 executeQuery·p0.99:   34091.303 ms/op
                 executeQuery·p0.999:  34091.303 ms/op
                 executeQuery·p0.9999: 34091.303 ms/op
                 executeQuery·p1.00:   34091.303 ms/op

Iteration   2: 34426.847 ms/op
                 executeQuery·p0.00:   34426.847 ms/op
                 executeQuery·p0.50:   34426.847 ms/op
                 executeQuery·p0.90:   34426.847 ms/op
                 executeQuery·p0.95:   34426.847 ms/op
                 executeQuery·p0.99:   34426.847 ms/op
                 executeQuery·p0.999:  34426.847 ms/op
                 executeQuery·p0.9999: 34426.847 ms/op
                 executeQuery·p1.00:   34426.847 ms/op

Iteration   3: 34091.303 ms/op
                 executeQuery·p0.00:   34091.303 ms/op
                 executeQuery·p0.50:   34091.303 ms/op
                 executeQuery·p0.90:   34091.303 ms/op
                 executeQuery·p0.95:   34091.303 ms/op
                 executeQuery·p0.99:   34091.303 ms/op
                 executeQuery·p0.999:  34091.303 ms/op
                 executeQuery·p0.9999: 34091.303 ms/op
                 executeQuery·p1.00:   34091.303 ms/op

Iteration   4: 34191.966 ms/op
                 executeQuery·p0.00:   34191.966 ms/op
                 executeQuery·p0.50:   34191.966 ms/op
                 executeQuery·p0.90:   34191.966 ms/op
                 executeQuery·p0.95:   34191.966 ms/op
                 executeQuery·p0.99:   34191.966 ms/op
                 executeQuery·p0.999:  34191.966 ms/op
                 executeQuery·p0.9999: 34191.966 ms/op
                 executeQuery·p1.00:   34191.966 ms/op

Iteration   5: 34359.738 ms/op
                 executeQuery·p0.00:   34359.738 ms/op
                 executeQuery·p0.50:   34359.738 ms/op
                 executeQuery·p0.90:   34359.738 ms/op
                 executeQuery·p0.95:   34359.738 ms/op
                 executeQuery·p0.99:   34359.738 ms/op
                 executeQuery·p0.999:  34359.738 ms/op
                 executeQuery·p0.9999: 34359.738 ms/op
                 executeQuery·p1.00:   34359.738 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 5
  mean =  34232.232 ±(99.9%) 594.910 ms/op

  Histogram, ms/op:
    [34000.000, 34050.000) = 0 
    [34050.000, 34100.000) = 2 
    [34100.000, 34150.000) = 0 
    [34150.000, 34200.000) = 1 
    [34200.000, 34250.000) = 0 
    [34250.000, 34300.000) = 0 
    [34300.000, 34350.000) = 0 
    [34350.000, 34400.000) = 1 
    [34400.000, 34450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  34091.303 ms/op
     p(50.0000) =  34191.966 ms/op
     p(90.0000) =  34426.847 ms/op
     p(95.0000) =  34426.847 ms/op
     p(99.0000) =  34426.847 ms/op
     p(99.9000) =  34426.847 ms/op
     p(99.9900) =  34426.847 ms/op
     p(99.9990) =  34426.847 ms/op
     p(99.9999) =  34426.847 ms/op
    p(100.0000) =  34426.847 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 76.47% complete, ETA 01:30:07
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
146.477 ±(99.9%) 21.465 ms/op
# Warmup Iteration   2: 124.892 ±(99.9%) 1.007 ms/op
# Warmup Iteration   3: 124.127 ±(99.9%) 0.867 ms/op
# Warmup Iteration   4: 124.266 ±(99.9%) 1.080 ms/op
# Warmup Iteration   5: 126.480 ±(99.9%) 0.561 ms/op
Iteration   1: 126.285 ±(99.9%) 0.650 ms/op
                 executeQuery·p0.00:   122.028 ms/op
                 executeQuery·p0.50:   127.009 ms/op
                 executeQuery·p0.90:   127.795 ms/op
                 executeQuery·p0.95:   128.057 ms/op
                 executeQuery·p0.99:   129.368 ms/op
                 executeQuery·p0.999:  129.368 ms/op
                 executeQuery·p0.9999: 129.368 ms/op
                 executeQuery·p1.00:   129.368 ms/op

Iteration   2: 126.378 ±(99.9%) 0.580 ms/op
                 executeQuery·p0.00:   122.814 ms/op
                 executeQuery·p0.50:   126.878 ms/op
                 executeQuery·p0.90:   127.533 ms/op
                 executeQuery·p0.95:   128.319 ms/op
                 executeQuery·p0.99:   129.237 ms/op
                 executeQuery·p0.999:  129.237 ms/op
                 executeQuery·p0.9999: 129.237 ms/op
                 executeQuery·p1.00:   129.237 ms/op

Iteration   3: 124.815 ±(99.9%) 1.220 ms/op
                 executeQuery·p0.00:   120.193 ms/op
                 executeQuery·p0.50:   124.256 ms/op
                 executeQuery·p0.90:   126.996 ms/op
                 executeQuery·p0.95:   129.283 ms/op
                 executeQuery·p0.99:   143.917 ms/op
                 executeQuery·p0.999:  143.917 ms/op
                 executeQuery·p0.9999: 143.917 ms/op
                 executeQuery·p1.00:   143.917 ms/op

Iteration   4: 124.319 ±(99.9%) 0.674 ms/op
                 executeQuery·p0.00:   120.455 ms/op
                 executeQuery·p0.50:   124.846 ms/op
                 executeQuery·p0.90:   126.353 ms/op
                 executeQuery·p0.95:   126.616 ms/op
                 executeQuery·p0.99:   126.747 ms/op
                 executeQuery·p0.999:  126.747 ms/op
                 executeQuery·p0.9999: 126.747 ms/op
                 executeQuery·p1.00:   126.747 ms/op

Iteration   5: 124.756 ±(99.9%) 0.622 ms/op
                 executeQuery·p0.00:   119.931 ms/op
                 executeQuery·p0.50:   125.043 ms/op
                 executeQuery·p0.90:   126.340 ms/op
                 executeQuery·p0.95:   127.264 ms/op
                 executeQuery·p0.99:   128.975 ms/op
                 executeQuery·p0.999:  128.975 ms/op
                 executeQuery·p0.9999: 128.975 ms/op
                 executeQuery·p1.00:   128.975 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 398
  mean =    125.305 ±(99.9%) 0.368 ms/op

  Histogram, ms/op:
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 0 
    [115.000, 117.500) = 0 
    [117.500, 120.000) = 1 
    [120.000, 122.500) = 39 
    [122.500, 125.000) = 120 
    [125.000, 127.500) = 205 
    [127.500, 130.000) = 31 
    [130.000, 132.500) = 0 
    [132.500, 135.000) = 0 
    [135.000, 137.500) = 1 
    [137.500, 140.000) = 0 
    [140.000, 142.500) = 0 
    [142.500, 145.000) = 1 
    [145.000, 147.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    119.931 ms/op
     p(50.0000) =    125.436 ms/op
     p(90.0000) =    127.402 ms/op
     p(95.0000) =    127.795 ms/op
     p(99.0000) =    129.373 ms/op
     p(99.9000) =    143.917 ms/op
     p(99.9900) =    143.917 ms/op
     p(99.9990) =    143.917 ms/op
     p(99.9999) =    143.917 ms/op
    p(100.0000) =    143.917 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 77.45% complete, ETA 01:25:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2845.835 ±(99.9%) 4626.722 ms/op
# Warmup Iteration   2: 2079.536 ±(99.9%) 1473.748 ms/op
# Warmup Iteration   3: 1897.923 ±(99.9%) 51.938 ms/op
# Warmup Iteration   4: 1899.670 ±(99.9%) 19.475 ms/op
# Warmup Iteration   5: 1901.068 ±(99.9%) 11.614 ms/op
Iteration   1: 1902.816 ±(99.9%) 6.074 ms/op
                 executeQuery·p0.00:   1900.020 ms/op
                 executeQuery·p0.50:   1904.214 ms/op
                 executeQuery·p0.90:   1904.214 ms/op
                 executeQuery·p0.95:   1904.214 ms/op
                 executeQuery·p0.99:   1904.214 ms/op
                 executeQuery·p0.999:  1904.214 ms/op
                 executeQuery·p0.9999: 1904.214 ms/op
                 executeQuery·p1.00:   1904.214 ms/op

Iteration   2: 1900.719 ±(99.9%) 53.210 ms/op
                 executeQuery·p0.00:   1862.271 ms/op
                 executeQuery·p0.50:   1908.408 ms/op
                 executeQuery·p0.90:   1910.505 ms/op
                 executeQuery·p0.95:   1910.505 ms/op
                 executeQuery·p0.99:   1910.505 ms/op
                 executeQuery·p0.999:  1910.505 ms/op
                 executeQuery·p0.9999: 1910.505 ms/op
                 executeQuery·p1.00:   1910.505 ms/op

Iteration   3: 1890.932 ±(99.9%) 58.296 ms/op
                 executeQuery·p0.00:   1862.271 ms/op
                 executeQuery·p0.50:   1902.117 ms/op
                 executeQuery·p0.90:   1908.408 ms/op
                 executeQuery·p0.95:   1908.408 ms/op
                 executeQuery·p0.99:   1908.408 ms/op
                 executeQuery·p0.999:  1908.408 ms/op
                 executeQuery·p0.9999: 1908.408 ms/op
                 executeQuery·p1.00:   1908.408 ms/op

Iteration   4: 1889.883 ±(99.9%) 55.718 ms/op
                 executeQuery·p0.00:   1862.271 ms/op
                 executeQuery·p0.50:   1901.068 ms/op
                 executeQuery·p0.90:   1904.214 ms/op
                 executeQuery·p0.95:   1904.214 ms/op
                 executeQuery·p0.99:   1904.214 ms/op
                 executeQuery·p0.999:  1904.214 ms/op
                 executeQuery·p0.9999: 1904.214 ms/op
                 executeQuery·p1.00:   1904.214 ms/op

Iteration   5: 1912.253 ±(99.9%) 72.829 ms/op
                 executeQuery·p0.00:   1864.368 ms/op
                 executeQuery·p0.50:   1923.088 ms/op
                 executeQuery·p0.90:   1931.477 ms/op
                 executeQuery·p0.95:   1931.477 ms/op
                 executeQuery·p0.99:   1931.477 ms/op
                 executeQuery·p0.999:  1931.477 ms/op
                 executeQuery·p0.9999: 1931.477 ms/op
                 executeQuery·p1.00:   1931.477 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   1899.321 ±(99.9%) 13.233 ms/op

  Histogram, ms/op:
    [1860.000, 1865.000) = 4 
    [1865.000, 1870.000) = 2 
    [1870.000, 1875.000) = 0 
    [1875.000, 1880.000) = 0 
    [1880.000, 1885.000) = 0 
    [1885.000, 1890.000) = 0 
    [1890.000, 1895.000) = 0 
    [1895.000, 1900.000) = 0 
    [1900.000, 1905.000) = 15 
    [1905.000, 1910.000) = 3 
    [1910.000, 1915.000) = 2 
    [1915.000, 1920.000) = 1 
    [1920.000, 1925.000) = 0 
    [1925.000, 1930.000) = 2 
    [1930.000, 1935.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1862.271 ms/op
     p(50.0000) =   1904.214 ms/op
     p(90.0000) =   1928.122 ms/op
     p(95.0000) =   1930.324 ms/op
     p(99.0000) =   1931.477 ms/op
     p(99.9000) =   1931.477 ms/op
     p(99.9900) =   1931.477 ms/op
     p(99.9990) =   1931.477 ms/op
     p(99.9999) =   1931.477 ms/op
    p(100.0000) =   1931.477 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 78.43% complete, ETA 01:21:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
49660.559 ms/op
# Warmup Iteration   2: 32883.343 ms/op
# Warmup Iteration   3: 31138.513 ms/op
# Warmup Iteration   4: 26306.675 ms/op
# Warmup Iteration   5: 23320.330 ms/op
Iteration   1: 32782.680 ms/op
                 executeQuery·p0.00:   32782.680 ms/op
                 executeQuery·p0.50:   32782.680 ms/op
                 executeQuery·p0.90:   32782.680 ms/op
                 executeQuery·p0.95:   32782.680 ms/op
                 executeQuery·p0.99:   32782.680 ms/op
                 executeQuery·p0.999:  32782.680 ms/op
                 executeQuery·p0.9999: 32782.680 ms/op
                 executeQuery·p1.00:   32782.680 ms/op

Iteration   2: 22817.014 ms/op
                 executeQuery·p0.00:   22817.014 ms/op
                 executeQuery·p0.50:   22817.014 ms/op
                 executeQuery·p0.90:   22817.014 ms/op
                 executeQuery·p0.95:   22817.014 ms/op
                 executeQuery·p0.99:   22817.014 ms/op
                 executeQuery·p0.999:  22817.014 ms/op
                 executeQuery·p0.9999: 22817.014 ms/op
                 executeQuery·p1.00:   22817.014 ms/op

Iteration   3: 23085.449 ms/op
                 executeQuery·p0.00:   23085.449 ms/op
                 executeQuery·p0.50:   23085.449 ms/op
                 executeQuery·p0.90:   23085.449 ms/op
                 executeQuery·p0.95:   23085.449 ms/op
                 executeQuery·p0.99:   23085.449 ms/op
                 executeQuery·p0.999:  23085.449 ms/op
                 executeQuery·p0.9999: 23085.449 ms/op
                 executeQuery·p1.00:   23085.449 ms/op

Iteration   4: 23018.340 ms/op
                 executeQuery·p0.00:   23018.340 ms/op
                 executeQuery·p0.50:   23018.340 ms/op
                 executeQuery·p0.90:   23018.340 ms/op
                 executeQuery·p0.95:   23018.340 ms/op
                 executeQuery·p0.99:   23018.340 ms/op
                 executeQuery·p0.999:  23018.340 ms/op
                 executeQuery·p0.9999: 23018.340 ms/op
                 executeQuery·p1.00:   23018.340 ms/op

Iteration   5: 23051.895 ms/op
                 executeQuery·p0.00:   23051.895 ms/op
                 executeQuery·p0.50:   23051.895 ms/op
                 executeQuery·p0.90:   23051.895 ms/op
                 executeQuery·p0.95:   23051.895 ms/op
                 executeQuery·p0.99:   23051.895 ms/op
                 executeQuery·p0.999:  23051.895 ms/op
                 executeQuery·p0.9999: 23051.895 ms/op
                 executeQuery·p1.00:   23051.895 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  24951.076 ±(99.9%) 16862.915 ms/op

  Histogram, ms/op:
    [22000.000, 23000.000) = 1 
    [23000.000, 24000.000) = 3 
    [24000.000, 25000.000) = 0 
    [25000.000, 26000.000) = 0 
    [26000.000, 27000.000) = 0 
    [27000.000, 28000.000) = 0 
    [28000.000, 29000.000) = 0 
    [29000.000, 30000.000) = 0 
    [30000.000, 31000.000) = 0 
    [31000.000, 32000.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  22817.014 ms/op
     p(50.0000) =  23051.895 ms/op
     p(90.0000) =  32782.680 ms/op
     p(95.0000) =  32782.680 ms/op
     p(99.0000) =  32782.680 ms/op
     p(99.9000) =  32782.680 ms/op
     p(99.9900) =  32782.680 ms/op
     p(99.9990) =  32782.680 ms/op
     p(99.9999) =  32782.680 ms/op
    p(100.0000) =  32782.680 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 79.41% complete, ETA 01:18:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
153.260 ±(99.9%) 18.902 ms/op
# Warmup Iteration   2: 138.955 ±(99.9%) 0.727 ms/op
# Warmup Iteration   3: 138.582 ±(99.9%) 0.797 ms/op
# Warmup Iteration   4: 138.491 ±(99.9%) 0.601 ms/op
# Warmup Iteration   5: 137.880 ±(99.9%) 0.403 ms/op
Iteration   1: 138.049 ±(99.9%) 0.458 ms/op
                 executeQuery·p0.00:   136.315 ms/op
                 executeQuery·p0.50:   137.888 ms/op
                 executeQuery·p0.90:   139.697 ms/op
                 executeQuery·p0.95:   139.985 ms/op
                 executeQuery·p0.99:   140.509 ms/op
                 executeQuery·p0.999:  140.509 ms/op
                 executeQuery·p0.9999: 140.509 ms/op
                 executeQuery·p1.00:   140.509 ms/op

Iteration   2: 138.486 ±(99.9%) 0.311 ms/op
                 executeQuery·p0.00:   136.053 ms/op
                 executeQuery·p0.50:   138.412 ms/op
                 executeQuery·p0.90:   139.198 ms/op
                 executeQuery·p0.95:   139.932 ms/op
                 executeQuery·p0.99:   141.558 ms/op
                 executeQuery·p0.999:  141.558 ms/op
                 executeQuery·p0.9999: 141.558 ms/op
                 executeQuery·p1.00:   141.558 ms/op

Iteration   3: 138.476 ±(99.9%) 0.304 ms/op
                 executeQuery·p0.00:   136.315 ms/op
                 executeQuery·p0.50:   138.412 ms/op
                 executeQuery·p0.90:   139.198 ms/op
                 executeQuery·p0.95:   139.579 ms/op
                 executeQuery·p0.99:   140.771 ms/op
                 executeQuery·p0.999:  140.771 ms/op
                 executeQuery·p0.9999: 140.771 ms/op
                 executeQuery·p1.00:   140.771 ms/op

Iteration   4: 138.682 ±(99.9%) 0.458 ms/op
                 executeQuery·p0.00:   136.577 ms/op
                 executeQuery·p0.50:   138.543 ms/op
                 executeQuery·p0.90:   139.461 ms/op
                 executeQuery·p0.95:   140.457 ms/op
                 executeQuery·p0.99:   145.228 ms/op
                 executeQuery·p0.999:  145.228 ms/op
                 executeQuery·p0.9999: 145.228 ms/op
                 executeQuery·p1.00:   145.228 ms/op

Iteration   5: 138.611 ±(99.9%) 0.424 ms/op
                 executeQuery·p0.00:   135.266 ms/op
                 executeQuery·p0.50:   138.412 ms/op
                 executeQuery·p0.90:   139.723 ms/op
                 executeQuery·p0.95:   140.824 ms/op
                 executeQuery·p0.99:   142.082 ms/op
                 executeQuery·p0.999:  142.082 ms/op
                 executeQuery·p0.9999: 142.082 ms/op
                 executeQuery·p1.00:   142.082 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 352
  mean =    138.461 ±(99.9%) 0.175 ms/op

  Histogram, ms/op:
    [135.000, 136.000) = 1 
    [136.000, 137.000) = 22 
    [137.000, 138.000) = 75 
    [138.000, 139.000) = 187 
    [139.000, 140.000) = 51 
    [140.000, 141.000) = 9 
    [141.000, 142.000) = 4 
    [142.000, 143.000) = 2 
    [143.000, 144.000) = 0 
    [144.000, 145.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    135.266 ms/op
     p(50.0000) =    138.412 ms/op
     p(90.0000) =    139.461 ms/op
     p(95.0000) =    139.985 ms/op
     p(99.0000) =    141.943 ms/op
     p(99.9000) =    145.228 ms/op
     p(99.9900) =    145.228 ms/op
     p(99.9990) =    145.228 ms/op
     p(99.9999) =    145.228 ms/op
    p(100.0000) =    145.228 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 80.39% complete, ETA 01:13:55
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2199.074 ±(99.9%) 1668.008 ms/op
# Warmup Iteration   2: 1878.699 ±(99.9%) 68.523 ms/op
# Warmup Iteration   3: 1864.368 ±(99.9%) 26.300 ms/op
# Warmup Iteration   4: 1873.106 ±(99.9%) 113.998 ms/op
# Warmup Iteration   5: 1854.232 ±(99.9%) 21.176 ms/op
Iteration   1: 1835.707 ±(99.9%) 23.128 ms/op
                 executeQuery·p0.00:   1828.717 ms/op
                 executeQuery·p0.50:   1833.959 ms/op
                 executeQuery·p0.90:   1851.785 ms/op
                 executeQuery·p0.95:   1851.785 ms/op
                 executeQuery·p0.99:   1851.785 ms/op
                 executeQuery·p0.999:  1851.785 ms/op
                 executeQuery·p0.9999: 1851.785 ms/op
                 executeQuery·p1.00:   1851.785 ms/op

Iteration   2: 1840.600 ±(99.9%) 27.500 ms/op
                 executeQuery·p0.00:   1826.619 ms/op
                 executeQuery·p0.50:   1843.397 ms/op
                 executeQuery·p0.90:   1849.688 ms/op
                 executeQuery·p0.95:   1849.688 ms/op
                 executeQuery·p0.99:   1849.688 ms/op
                 executeQuery·p0.999:  1849.688 ms/op
                 executeQuery·p0.9999: 1849.688 ms/op
                 executeQuery·p1.00:   1849.688 ms/op

Iteration   3: 1843.746 ±(99.9%) 19.827 ms/op
                 executeQuery·p0.00:   1830.814 ms/op
                 executeQuery·p0.50:   1844.445 ms/op
                 executeQuery·p0.90:   1851.785 ms/op
                 executeQuery·p0.95:   1851.785 ms/op
                 executeQuery·p0.99:   1851.785 ms/op
                 executeQuery·p0.999:  1851.785 ms/op
                 executeQuery·p0.9999: 1851.785 ms/op
                 executeQuery·p1.00:   1851.785 ms/op

Iteration   4: 1839.552 ±(99.9%) 18.751 ms/op
                 executeQuery·p0.00:   1828.717 ms/op
                 executeQuery·p0.50:   1841.299 ms/op
                 executeQuery·p0.90:   1847.591 ms/op
                 executeQuery·p0.95:   1847.591 ms/op
                 executeQuery·p0.99:   1847.591 ms/op
                 executeQuery·p0.999:  1847.591 ms/op
                 executeQuery·p0.9999: 1847.591 ms/op
                 executeQuery·p1.00:   1847.591 ms/op

Iteration   5: 1833.260 ±(99.9%) 32.513 ms/op
                 executeQuery·p0.00:   1818.231 ms/op
                 executeQuery·p0.50:   1832.911 ms/op
                 executeQuery·p0.90:   1849.688 ms/op
                 executeQuery·p0.95:   1849.688 ms/op
                 executeQuery·p0.99:   1849.688 ms/op
                 executeQuery·p0.999:  1849.688 ms/op
                 executeQuery·p0.9999: 1849.688 ms/op
                 executeQuery·p1.00:   1849.688 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   1838.573 ±(99.9%) 6.048 ms/op

  Histogram, ms/op:
    [1810.000, 1815.000) = 0 
    [1815.000, 1820.000) = 1 
    [1820.000, 1825.000) = 1 
    [1825.000, 1830.000) = 4 
    [1830.000, 1835.000) = 4 
    [1835.000, 1840.000) = 4 
    [1840.000, 1845.000) = 7 
    [1845.000, 1850.000) = 7 
    [1850.000, 1855.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1818.231 ms/op
     p(50.0000) =   1841.299 ms/op
     p(90.0000) =   1849.688 ms/op
     p(95.0000) =   1851.785 ms/op
     p(99.0000) =   1851.785 ms/op
     p(99.9000) =   1851.785 ms/op
     p(99.9900) =   1851.785 ms/op
     p(99.9990) =   1851.785 ms/op
     p(99.9999) =   1851.785 ms/op
    p(100.0000) =   1851.785 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 81.37% complete, ETA 01:09:48
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
29896.999 ms/op
# Warmup Iteration   2: 22749.905 ms/op
# Warmup Iteration   3: 21273.510 ms/op
# Warmup Iteration   4: 24561.844 ms/op
# Warmup Iteration   5: 25031.606 ms/op
Iteration   1: 24595.399 ms/op
                 executeQuery·p0.00:   24595.399 ms/op
                 executeQuery·p0.50:   24595.399 ms/op
                 executeQuery·p0.90:   24595.399 ms/op
                 executeQuery·p0.95:   24595.399 ms/op
                 executeQuery·p0.99:   24595.399 ms/op
                 executeQuery·p0.999:  24595.399 ms/op
                 executeQuery·p0.9999: 24595.399 ms/op
                 executeQuery·p1.00:   24595.399 ms/op

Iteration   2: 24561.844 ms/op
                 executeQuery·p0.00:   24561.844 ms/op
                 executeQuery·p0.50:   24561.844 ms/op
                 executeQuery·p0.90:   24561.844 ms/op
                 executeQuery·p0.95:   24561.844 ms/op
                 executeQuery·p0.99:   24561.844 ms/op
                 executeQuery·p0.999:  24561.844 ms/op
                 executeQuery·p0.9999: 24561.844 ms/op
                 executeQuery·p1.00:   24561.844 ms/op

Iteration   3: 24561.844 ms/op
                 executeQuery·p0.00:   24561.844 ms/op
                 executeQuery·p0.50:   24561.844 ms/op
                 executeQuery·p0.90:   24561.844 ms/op
                 executeQuery·p0.95:   24561.844 ms/op
                 executeQuery·p0.99:   24561.844 ms/op
                 executeQuery·p0.999:  24561.844 ms/op
                 executeQuery·p0.9999: 24561.844 ms/op
                 executeQuery·p1.00:   24561.844 ms/op

Iteration   4: 24561.844 ms/op
                 executeQuery·p0.00:   24561.844 ms/op
                 executeQuery·p0.50:   24561.844 ms/op
                 executeQuery·p0.90:   24561.844 ms/op
                 executeQuery·p0.95:   24561.844 ms/op
                 executeQuery·p0.99:   24561.844 ms/op
                 executeQuery·p0.999:  24561.844 ms/op
                 executeQuery·p0.9999: 24561.844 ms/op
                 executeQuery·p1.00:   24561.844 ms/op

Iteration   5: 24561.844 ms/op
                 executeQuery·p0.00:   24561.844 ms/op
                 executeQuery·p0.50:   24561.844 ms/op
                 executeQuery·p0.90:   24561.844 ms/op
                 executeQuery·p0.95:   24561.844 ms/op
                 executeQuery·p0.99:   24561.844 ms/op
                 executeQuery·p0.999:  24561.844 ms/op
                 executeQuery·p0.9999: 24561.844 ms/op
                 executeQuery·p1.00:   24561.844 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  24568.555 ±(99.9%) 57.783 ms/op

  Histogram, ms/op:
    [24560.000, 24562.500) = 4 
    [24562.500, 24565.000) = 0 
    [24565.000, 24567.500) = 0 
    [24567.500, 24570.000) = 0 
    [24570.000, 24572.500) = 0 
    [24572.500, 24575.000) = 0 
    [24575.000, 24577.500) = 0 
    [24577.500, 24580.000) = 0 
    [24580.000, 24582.500) = 0 
    [24582.500, 24585.000) = 0 
    [24585.000, 24587.500) = 0 
    [24587.500, 24590.000) = 0 
    [24590.000, 24592.500) = 0 
    [24592.500, 24595.000) = 0 
    [24595.000, 24597.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =  24561.844 ms/op
     p(50.0000) =  24561.844 ms/op
     p(90.0000) =  24595.399 ms/op
     p(95.0000) =  24595.399 ms/op
     p(99.0000) =  24595.399 ms/op
     p(99.9000) =  24595.399 ms/op
     p(99.9900) =  24595.399 ms/op
     p(99.9990) =  24595.399 ms/op
     p(99.9999) =  24595.399 ms/op
    p(100.0000) =  24595.399 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 82.35% complete, ETA 01:06:14
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
164.791 ±(99.9%) 28.593 ms/op
# Warmup Iteration   2: 145.644 ±(99.9%) 0.814 ms/op
# Warmup Iteration   3: 145.155 ±(99.9%) 0.895 ms/op
# Warmup Iteration   4: 145.681 ±(99.9%) 0.853 ms/op
# Warmup Iteration   5: 144.821 ±(99.9%) 0.428 ms/op
Iteration   1: 144.778 ±(99.9%) 0.327 ms/op
                 executeQuery·p0.00:   142.868 ms/op
                 executeQuery·p0.50:   144.703 ms/op
                 executeQuery·p0.90:   145.752 ms/op
                 executeQuery·p0.95:   146.171 ms/op
                 executeQuery·p0.99:   146.801 ms/op
                 executeQuery·p0.999:  146.801 ms/op
                 executeQuery·p0.9999: 146.801 ms/op
                 executeQuery·p1.00:   146.801 ms/op

Iteration   2: 144.276 ±(99.9%) 0.540 ms/op
                 executeQuery·p0.00:   141.820 ms/op
                 executeQuery·p0.50:   144.179 ms/op
                 executeQuery·p0.90:   145.228 ms/op
                 executeQuery·p0.95:   147.377 ms/op
                 executeQuery·p0.99:   149.422 ms/op
                 executeQuery·p0.999:  149.422 ms/op
                 executeQuery·p0.9999: 149.422 ms/op
                 executeQuery·p1.00:   149.422 ms/op

Iteration   3: 143.983 ±(99.9%) 0.371 ms/op
                 executeQuery·p0.00:   142.344 ms/op
                 executeQuery·p0.50:   143.917 ms/op
                 executeQuery·p0.90:   145.228 ms/op
                 executeQuery·p0.95:   146.158 ms/op
                 executeQuery·p0.99:   146.538 ms/op
                 executeQuery·p0.999:  146.538 ms/op
                 executeQuery·p0.9999: 146.538 ms/op
                 executeQuery·p1.00:   146.538 ms/op

Iteration   4: 143.825 ±(99.9%) 0.573 ms/op
                 executeQuery·p0.00:   141.558 ms/op
                 executeQuery·p0.50:   143.786 ms/op
                 executeQuery·p0.90:   144.992 ms/op
                 executeQuery·p0.95:   146.329 ms/op
                 executeQuery·p0.99:   151.257 ms/op
                 executeQuery·p0.999:  151.257 ms/op
                 executeQuery·p0.9999: 151.257 ms/op
                 executeQuery·p1.00:   151.257 ms/op

Iteration   5: 143.393 ±(99.9%) 0.456 ms/op
                 executeQuery·p0.00:   141.558 ms/op
                 executeQuery·p0.50:   143.131 ms/op
                 executeQuery·p0.90:   144.468 ms/op
                 executeQuery·p0.95:   145.372 ms/op
                 executeQuery·p0.99:   147.849 ms/op
                 executeQuery·p0.999:  147.849 ms/op
                 executeQuery·p0.9999: 147.849 ms/op
                 executeQuery·p1.00:   147.849 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 339
  mean =    144.049 ±(99.9%) 0.216 ms/op

  Histogram, ms/op:
    [141.000, 142.000) = 8 
    [142.000, 143.000) = 54 
    [143.000, 144.000) = 120 
    [144.000, 145.000) = 110 
    [145.000, 146.000) = 29 
    [146.000, 147.000) = 11 
    [147.000, 148.000) = 4 
    [148.000, 149.000) = 1 
    [149.000, 150.000) = 1 
    [150.000, 151.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    141.558 ms/op
     p(50.0000) =    143.917 ms/op
     p(90.0000) =    145.228 ms/op
     p(95.0000) =    146.014 ms/op
     p(99.0000) =    148.478 ms/op
     p(99.9000) =    151.257 ms/op
     p(99.9900) =    151.257 ms/op
     p(99.9990) =    151.257 ms/op
     p(99.9999) =    151.257 ms/op
    p(100.0000) =    151.257 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 83.33% complete, ETA 01:02:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2150.000 ±(99.9%) 1821.383 ms/op
# Warmup Iteration   2: 1921.690 ±(99.9%) 46.850 ms/op
# Warmup Iteration   3: 1900.369 ±(99.9%) 15.522 ms/op
# Warmup Iteration   4: 1906.661 ±(99.9%) 25.880 ms/op
# Warmup Iteration   5: 1905.612 ±(99.9%) 33.612 ms/op
Iteration   1: 1895.825 ±(99.9%) 31.340 ms/op
                 executeQuery·p0.00:   1887.437 ms/op
                 executeQuery·p0.50:   1890.583 ms/op
                 executeQuery·p0.90:   1914.700 ms/op
                 executeQuery·p0.95:   1914.700 ms/op
                 executeQuery·p0.99:   1914.700 ms/op
                 executeQuery·p0.999:  1914.700 ms/op
                 executeQuery·p0.9999: 1914.700 ms/op
                 executeQuery·p1.00:   1914.700 ms/op

Iteration   2: 1917.146 ±(99.9%) 102.631 ms/op
                 executeQuery·p0.00:   1893.728 ms/op
                 executeQuery·p0.50:   1905.263 ms/op
                 executeQuery·p0.90:   1990.197 ms/op
                 executeQuery·p0.95:   1990.197 ms/op
                 executeQuery·p0.99:   1990.197 ms/op
                 executeQuery·p0.999:  1990.197 ms/op
                 executeQuery·p0.9999: 1990.197 ms/op
                 executeQuery·p1.00:   1990.197 ms/op

Iteration   3: 1898.971 ±(99.9%) 19.943 ms/op
                 executeQuery·p0.00:   1889.534 ms/op
                 executeQuery·p0.50:   1900.020 ms/op
                 executeQuery·p0.90:   1910.505 ms/op
                 executeQuery·p0.95:   1910.505 ms/op
                 executeQuery·p0.99:   1910.505 ms/op
                 executeQuery·p0.999:  1910.505 ms/op
                 executeQuery·p0.9999: 1910.505 ms/op
                 executeQuery·p1.00:   1910.505 ms/op

Iteration   4: 1902.466 ±(99.9%) 26.146 ms/op
                 executeQuery·p0.00:   1885.340 ms/op
                 executeQuery·p0.50:   1907.360 ms/op
                 executeQuery·p0.90:   1908.408 ms/op
                 executeQuery·p0.95:   1908.408 ms/op
                 executeQuery·p0.99:   1908.408 ms/op
                 executeQuery·p0.999:  1908.408 ms/op
                 executeQuery·p0.9999: 1908.408 ms/op
                 executeQuery·p1.00:   1908.408 ms/op

Iteration   5: 1900.020 ±(99.9%) 29.286 ms/op
                 executeQuery·p0.00:   1883.242 ms/op
                 executeQuery·p0.50:   1904.214 ms/op
                 executeQuery·p0.90:   1910.505 ms/op
                 executeQuery·p0.95:   1910.505 ms/op
                 executeQuery·p0.99:   1910.505 ms/op
                 executeQuery·p0.999:  1910.505 ms/op
                 executeQuery·p0.9999: 1910.505 ms/op
                 executeQuery·p1.00:   1910.505 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 30
  mean =   1902.886 ±(99.9%) 12.540 ms/op

  Histogram, ms/op:
    [1800.000, 1812.500) = 0 
    [1812.500, 1825.000) = 0 
    [1825.000, 1837.500) = 0 
    [1837.500, 1850.000) = 0 
    [1850.000, 1862.500) = 0 
    [1862.500, 1875.000) = 0 
    [1875.000, 1887.500) = 4 
    [1887.500, 1900.000) = 8 
    [1900.000, 1912.500) = 15 
    [1912.500, 1925.000) = 2 
    [1925.000, 1937.500) = 0 
    [1937.500, 1950.000) = 0 
    [1950.000, 1962.500) = 0 
    [1962.500, 1975.000) = 0 
    [1975.000, 1987.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1883.242 ms/op
     p(50.0000) =   1900.020 ms/op
     p(90.0000) =   1912.393 ms/op
     p(95.0000) =   1948.674 ms/op
     p(99.0000) =   1990.197 ms/op
     p(99.9000) =   1990.197 ms/op
     p(99.9900) =   1990.197 ms/op
     p(99.9990) =   1990.197 ms/op
     p(99.9999) =   1990.197 ms/op
    p(100.0000) =   1990.197 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 84.31% complete, ETA 00:58:11
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
31339.839 ms/op
# Warmup Iteration   2: 23689.429 ms/op
# Warmup Iteration   3: 24696.062 ms/op
# Warmup Iteration   4: 23622.320 ms/op
# Warmup Iteration   5: 18689.819 ms/op
Iteration   1: 22078.816 ms/op
                 executeQuery·p0.00:   22078.816 ms/op
                 executeQuery·p0.50:   22078.816 ms/op
                 executeQuery·p0.90:   22078.816 ms/op
                 executeQuery·p0.95:   22078.816 ms/op
                 executeQuery·p0.99:   22078.816 ms/op
                 executeQuery·p0.999:  22078.816 ms/op
                 executeQuery·p0.9999: 22078.816 ms/op
                 executeQuery·p1.00:   22078.816 ms/op

Iteration   2: 21911.044 ms/op
                 executeQuery·p0.00:   21911.044 ms/op
                 executeQuery·p0.50:   21911.044 ms/op
                 executeQuery·p0.90:   21911.044 ms/op
                 executeQuery·p0.95:   21911.044 ms/op
                 executeQuery·p0.99:   21911.044 ms/op
                 executeQuery·p0.999:  21911.044 ms/op
                 executeQuery·p0.9999: 21911.044 ms/op
                 executeQuery·p1.00:   21911.044 ms/op

Iteration   3: 21944.599 ms/op
                 executeQuery·p0.00:   21944.599 ms/op
                 executeQuery·p0.50:   21944.599 ms/op
                 executeQuery·p0.90:   21944.599 ms/op
                 executeQuery·p0.95:   21944.599 ms/op
                 executeQuery·p0.99:   21944.599 ms/op
                 executeQuery·p0.999:  21944.599 ms/op
                 executeQuery·p0.9999: 21944.599 ms/op
                 executeQuery·p1.00:   21944.599 ms/op

Iteration   4: 22045.262 ms/op
                 executeQuery·p0.00:   22045.262 ms/op
                 executeQuery·p0.50:   22045.262 ms/op
                 executeQuery·p0.90:   22045.262 ms/op
                 executeQuery·p0.95:   22045.262 ms/op
                 executeQuery·p0.99:   22045.262 ms/op
                 executeQuery·p0.999:  22045.262 ms/op
                 executeQuery·p0.9999: 22045.262 ms/op
                 executeQuery·p1.00:   22045.262 ms/op

Iteration   5: 22045.262 ms/op
                 executeQuery·p0.00:   22045.262 ms/op
                 executeQuery·p0.50:   22045.262 ms/op
                 executeQuery·p0.90:   22045.262 ms/op
                 executeQuery·p0.95:   22045.262 ms/op
                 executeQuery·p0.99:   22045.262 ms/op
                 executeQuery·p0.999:  22045.262 ms/op
                 executeQuery·p0.9999: 22045.262 ms/op
                 executeQuery·p1.00:   22045.262 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 5
  mean =  22004.997 ±(99.9%) 280.112 ms/op

  Histogram, ms/op:
    [21900.000, 21912.500) = 1 
    [21912.500, 21925.000) = 0 
    [21925.000, 21937.500) = 0 
    [21937.500, 21950.000) = 1 
    [21950.000, 21962.500) = 0 
    [21962.500, 21975.000) = 0 
    [21975.000, 21987.500) = 0 
    [21987.500, 22000.000) = 0 
    [22000.000, 22012.500) = 0 
    [22012.500, 22025.000) = 0 
    [22025.000, 22037.500) = 0 
    [22037.500, 22050.000) = 2 
    [22050.000, 22062.500) = 0 
    [22062.500, 22075.000) = 0 
    [22075.000, 22087.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =  21911.044 ms/op
     p(50.0000) =  22045.262 ms/op
     p(90.0000) =  22078.816 ms/op
     p(95.0000) =  22078.816 ms/op
     p(99.0000) =  22078.816 ms/op
     p(99.9000) =  22078.816 ms/op
     p(99.9900) =  22078.816 ms/op
     p(99.9990) =  22078.816 ms/op
     p(99.9999) =  22078.816 ms/op
    p(100.0000) =  22078.816 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 85.29% complete, ETA 00:54:36
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
43.952 ±(99.9%) 1.726 ms/op
# Warmup Iteration   2: 41.315 ±(99.9%) 0.374 ms/op
# Warmup Iteration   3: 41.577 ±(99.9%) 0.402 ms/op
# Warmup Iteration   4: 42.697 ±(99.9%) 0.308 ms/op
# Warmup Iteration   5: 42.340 ±(99.9%) 0.322 ms/op
Iteration   1: 42.995 ±(99.9%) 0.293 ms/op
                 executeQuery·p0.00:   40.436 ms/op
                 executeQuery·p0.50:   43.450 ms/op
                 executeQuery·p0.90:   44.433 ms/op
                 executeQuery·p0.95:   44.718 ms/op
                 executeQuery·p0.99:   45.198 ms/op
                 executeQuery·p0.999:  45.220 ms/op
                 executeQuery·p0.9999: 45.220 ms/op
                 executeQuery·p1.00:   45.220 ms/op

Iteration   2: 42.453 ±(99.9%) 0.303 ms/op
                 executeQuery·p0.00:   40.370 ms/op
                 executeQuery·p0.50:   42.795 ms/op
                 executeQuery·p0.90:   44.106 ms/op
                 executeQuery·p0.95:   44.302 ms/op
                 executeQuery·p0.99:   45.018 ms/op
                 executeQuery·p0.999:  45.154 ms/op
                 executeQuery·p0.9999: 45.154 ms/op
                 executeQuery·p1.00:   45.154 ms/op

Iteration   3: 41.014 ±(99.9%) 0.326 ms/op
                 executeQuery·p0.00:   38.732 ms/op
                 executeQuery·p0.50:   40.960 ms/op
                 executeQuery·p0.90:   42.664 ms/op
                 executeQuery·p0.95:   43.634 ms/op
                 executeQuery·p0.99:   44.892 ms/op
                 executeQuery·p0.999:  50.790 ms/op
                 executeQuery·p0.9999: 50.790 ms/op
                 executeQuery·p1.00:   50.790 ms/op

Iteration   4: 40.400 ±(99.9%) 0.285 ms/op
                 executeQuery·p0.00:   38.666 ms/op
                 executeQuery·p0.50:   40.370 ms/op
                 executeQuery·p0.90:   42.271 ms/op
                 executeQuery·p0.95:   42.703 ms/op
                 executeQuery·p0.99:   43.778 ms/op
                 executeQuery·p0.999:  43.975 ms/op
                 executeQuery·p0.9999: 43.975 ms/op
                 executeQuery·p1.00:   43.975 ms/op

Iteration   5: 40.398 ±(99.9%) 0.282 ms/op
                 executeQuery·p0.00:   38.863 ms/op
                 executeQuery·p0.50:   40.436 ms/op
                 executeQuery·p0.90:   42.205 ms/op
                 executeQuery·p0.95:   42.507 ms/op
                 executeQuery·p0.99:   43.456 ms/op
                 executeQuery·p0.999:  43.778 ms/op
                 executeQuery·p0.9999: 43.778 ms/op
                 executeQuery·p1.00:   43.778 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 1204
  mean =     41.424 ±(99.9%) 0.167 ms/op

  Histogram, ms/op:
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 
    [37.500, 40.000) = 277 
    [40.000, 42.500) = 585 
    [42.500, 45.000) = 334 
    [45.000, 47.500) = 7 
    [47.500, 50.000) = 0 
    [50.000, 52.500) = 1 
    [52.500, 55.000) = 0 
    [55.000, 57.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     38.666 ms/op
     p(50.0000) =     41.157 ms/op
     p(90.0000) =     43.909 ms/op
     p(95.0000) =     44.286 ms/op
     p(99.0000) =     44.892 ms/op
     p(99.9000) =     49.648 ms/op
     p(99.9900) =     50.790 ms/op
     p(99.9990) =     50.790 ms/op
     p(99.9999) =     50.790 ms/op
    p(100.0000) =     50.790 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 86.27% complete, ETA 00:50:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
409.742 ±(99.9%) 45.090 ms/op
# Warmup Iteration   2: 379.041 ±(99.9%) 3.132 ms/op
# Warmup Iteration   3: 379.934 ±(99.9%) 3.749 ms/op
# Warmup Iteration   4: 391.280 ±(99.9%) 7.278 ms/op
# Warmup Iteration   5: 400.724 ±(99.9%) 1.537 ms/op
Iteration   1: 400.053 ±(99.9%) 1.432 ms/op
                 executeQuery·p0.00:   397.410 ms/op
                 executeQuery·p0.50:   399.507 ms/op
                 executeQuery·p0.90:   402.863 ms/op
                 executeQuery·p0.95:   403.911 ms/op
                 executeQuery·p0.99:   404.226 ms/op
                 executeQuery·p0.999:  404.226 ms/op
                 executeQuery·p0.9999: 404.226 ms/op
                 executeQuery·p1.00:   404.226 ms/op

Iteration   2: 399.298 ±(99.9%) 1.708 ms/op
                 executeQuery·p0.00:   393.740 ms/op
                 executeQuery·p0.50:   398.983 ms/op
                 executeQuery·p0.90:   403.387 ms/op
                 executeQuery·p0.95:   403.702 ms/op
                 executeQuery·p0.99:   403.702 ms/op
                 executeQuery·p0.999:  403.702 ms/op
                 executeQuery·p0.9999: 403.702 ms/op
                 executeQuery·p1.00:   403.702 ms/op

Iteration   3: 399.124 ±(99.9%) 1.808 ms/op
                 executeQuery·p0.00:   394.265 ms/op
                 executeQuery·p0.50:   398.459 ms/op
                 executeQuery·p0.90:   402.810 ms/op
                 executeQuery·p0.95:   404.881 ms/op
                 executeQuery·p0.99:   405.799 ms/op
                 executeQuery·p0.999:  405.799 ms/op
                 executeQuery·p0.9999: 405.799 ms/op
                 executeQuery·p1.00:   405.799 ms/op

Iteration   4: 398.640 ±(99.9%) 1.408 ms/op
                 executeQuery·p0.00:   394.789 ms/op
                 executeQuery·p0.50:   398.459 ms/op
                 executeQuery·p0.90:   401.395 ms/op
                 executeQuery·p0.95:   402.470 ms/op
                 executeQuery·p0.99:   402.653 ms/op
                 executeQuery·p0.999:  402.653 ms/op
                 executeQuery·p0.9999: 402.653 ms/op
                 executeQuery·p1.00:   402.653 ms/op

Iteration   5: 398.943 ±(99.9%) 2.029 ms/op
                 executeQuery·p0.00:   394.265 ms/op
                 executeQuery·p0.50:   398.459 ms/op
                 executeQuery·p0.90:   403.177 ms/op
                 executeQuery·p0.95:   403.859 ms/op
                 executeQuery·p0.99:   404.226 ms/op
                 executeQuery·p0.999:  404.226 ms/op
                 executeQuery·p0.9999: 404.226 ms/op
                 executeQuery·p1.00:   404.226 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 128
  mean =    399.204 ±(99.9%) 0.689 ms/op

  Histogram, ms/op:
    [390.000, 391.250) = 0 
    [391.250, 392.500) = 0 
    [392.500, 393.750) = 1 
    [393.750, 395.000) = 5 
    [395.000, 396.250) = 3 
    [396.250, 397.500) = 17 
    [397.500, 398.750) = 35 
    [398.750, 400.000) = 28 
    [400.000, 401.250) = 16 
    [401.250, 402.500) = 2 
    [402.500, 403.750) = 18 
    [403.750, 405.000) = 2 
    [405.000, 406.250) = 1 
    [406.250, 407.500) = 0 
    [407.500, 408.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    393.740 ms/op
     p(50.0000) =    398.983 ms/op
     p(90.0000) =    402.706 ms/op
     p(95.0000) =    403.177 ms/op
     p(99.0000) =    405.343 ms/op
     p(99.9000) =    405.799 ms/op
     p(99.9900) =    405.799 ms/op
     p(99.9990) =    405.799 ms/op
     p(99.9999) =    405.799 ms/op
    p(100.0000) =    405.799 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 87.25% complete, ETA 00:46:45
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3899.305 ±(99.9%) 4542.677 ms/op
# Warmup Iteration   2: 3798.641 ±(99.9%) 896.729 ms/op
# Warmup Iteration   3: 3770.679 ±(99.9%) 153.039 ms/op
# Warmup Iteration   4: 3851.769 ±(99.9%) 1083.054 ms/op
# Warmup Iteration   5: 3871.343 ±(99.9%) 275.896 ms/op
Iteration   1: 3853.167 ±(99.9%) 421.438 ms/op
                 executeQuery·p0.00:   3837.788 ms/op
                 executeQuery·p0.50:   3841.982 ms/op
                 executeQuery·p0.90:   3879.731 ms/op
                 executeQuery·p0.95:   3879.731 ms/op
                 executeQuery·p0.99:   3879.731 ms/op
                 executeQuery·p0.999:  3879.731 ms/op
                 executeQuery·p0.9999: 3879.731 ms/op
                 executeQuery·p1.00:   3879.731 ms/op

Iteration   2: 3854.565 ±(99.9%) 275.896 ms/op
                 executeQuery·p0.00:   3837.788 ms/op
                 executeQuery·p0.50:   3858.760 ms/op
                 executeQuery·p0.90:   3867.148 ms/op
                 executeQuery·p0.95:   3867.148 ms/op
                 executeQuery·p0.99:   3867.148 ms/op
                 executeQuery·p0.999:  3867.148 ms/op
                 executeQuery·p0.9999: 3867.148 ms/op
                 executeQuery·p1.00:   3867.148 ms/op

Iteration   3: 3862.954 ±(99.9%) 350.657 ms/op
                 executeQuery·p0.00:   3841.982 ms/op
                 executeQuery·p0.50:   3867.148 ms/op
                 executeQuery·p0.90:   3879.731 ms/op
                 executeQuery·p0.95:   3879.731 ms/op
                 executeQuery·p0.99:   3879.731 ms/op
                 executeQuery·p0.999:  3879.731 ms/op
                 executeQuery·p0.9999: 3879.731 ms/op
                 executeQuery·p1.00:   3879.731 ms/op

Iteration   4: 3836.390 ±(99.9%) 509.493 ms/op
                 executeQuery·p0.00:   3812.622 ms/op
                 executeQuery·p0.50:   3829.400 ms/op
                 executeQuery·p0.90:   3867.148 ms/op
                 executeQuery·p0.95:   3867.148 ms/op
                 executeQuery·p0.99:   3867.148 ms/op
                 executeQuery·p0.999:  3867.148 ms/op
                 executeQuery·p0.9999: 3867.148 ms/op
                 executeQuery·p1.00:   3867.148 ms/op

Iteration   5: 3893.712 ±(99.9%) 421.438 ms/op
                 executeQuery·p0.00:   3871.343 ms/op
                 executeQuery·p0.50:   3892.314 ms/op
                 executeQuery·p0.90:   3917.480 ms/op
                 executeQuery·p0.95:   3917.480 ms/op
                 executeQuery·p0.99:   3917.480 ms/op
                 executeQuery·p0.999:  3917.480 ms/op
                 executeQuery·p0.9999: 3917.480 ms/op
                 executeQuery·p1.00:   3917.480 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   3860.158 ±(99.9%) 28.894 ms/op

  Histogram, ms/op:
    [3800.000, 3812.500) = 0 
    [3812.500, 3825.000) = 1 
    [3825.000, 3837.500) = 1 
    [3837.500, 3850.000) = 4 
    [3850.000, 3862.500) = 1 
    [3862.500, 3875.000) = 4 
    [3875.000, 3887.500) = 2 
    [3887.500, 3900.000) = 1 
    [3900.000, 3912.500) = 0 
    [3912.500, 3925.000) = 1 
    [3925.000, 3937.500) = 0 
    [3937.500, 3950.000) = 0 
    [3950.000, 3962.500) = 0 
    [3962.500, 3975.000) = 0 
    [3975.000, 3987.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3812.622 ms/op
     p(50.0000) =   3867.148 ms/op
     p(90.0000) =   3902.380 ms/op
     p(95.0000) =   3917.480 ms/op
     p(99.0000) =   3917.480 ms/op
     p(99.9000) =   3917.480 ms/op
     p(99.9900) =   3917.480 ms/op
     p(99.9990) =   3917.480 ms/op
     p(99.9999) =   3917.480 ms/op
    p(100.0000) =   3917.480 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 88.24% complete, ETA 00:42:56
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
43.616 ±(99.9%) 2.254 ms/op
# Warmup Iteration   2: 40.671 ±(99.9%) 0.347 ms/op
# Warmup Iteration   3: 40.993 ±(99.9%) 0.274 ms/op
# Warmup Iteration   4: 41.411 ±(99.9%) 0.209 ms/op
# Warmup Iteration   5: 41.255 ±(99.9%) 0.192 ms/op
Iteration   1: 41.306 ±(99.9%) 0.195 ms/op
                 executeQuery·p0.00:   40.174 ms/op
                 executeQuery·p0.50:   40.698 ms/op
                 executeQuery·p0.90:   42.271 ms/op
                 executeQuery·p0.95:   43.057 ms/op
                 executeQuery·p0.99:   43.854 ms/op
                 executeQuery·p0.999:  44.106 ms/op
                 executeQuery·p0.9999: 44.106 ms/op
                 executeQuery·p1.00:   44.106 ms/op

Iteration   2: 41.249 ±(99.9%) 0.245 ms/op
                 executeQuery·p0.00:   40.108 ms/op
                 executeQuery·p0.50:   40.632 ms/op
                 executeQuery·p0.90:   42.271 ms/op
                 executeQuery·p0.95:   43.441 ms/op
                 executeQuery·p0.99:   43.927 ms/op
                 executeQuery·p0.999:  51.446 ms/op
                 executeQuery·p0.9999: 51.446 ms/op
                 executeQuery·p1.00:   51.446 ms/op

Iteration   3: 39.320 ±(99.9%) 0.185 ms/op
                 executeQuery·p0.00:   38.404 ms/op
                 executeQuery·p0.50:   38.797 ms/op
                 executeQuery·p0.90:   40.370 ms/op
                 executeQuery·p0.95:   40.731 ms/op
                 executeQuery·p0.99:   41.776 ms/op
                 executeQuery·p0.999:  42.795 ms/op
                 executeQuery·p0.9999: 42.795 ms/op
                 executeQuery·p1.00:   42.795 ms/op

Iteration   4: 39.400 ±(99.9%) 0.195 ms/op
                 executeQuery·p0.00:   38.404 ms/op
                 executeQuery·p0.50:   38.797 ms/op
                 executeQuery·p0.90:   40.567 ms/op
                 executeQuery·p0.95:   40.960 ms/op
                 executeQuery·p0.99:   41.908 ms/op
                 executeQuery·p0.999:  42.271 ms/op
                 executeQuery·p0.9999: 42.271 ms/op
                 executeQuery·p1.00:   42.271 ms/op

Iteration   5: 39.208 ±(99.9%) 0.171 ms/op
                 executeQuery·p0.00:   38.404 ms/op
                 executeQuery·p0.50:   38.666 ms/op
                 executeQuery·p0.90:   40.337 ms/op
                 executeQuery·p0.95:   40.567 ms/op
                 executeQuery·p0.99:   41.746 ms/op
                 executeQuery·p0.999:  42.205 ms/op
                 executeQuery·p0.9999: 42.205 ms/op
                 executeQuery·p1.00:   42.205 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery":
  N = 1244
  mean =     40.073 ±(99.9%) 0.126 ms/op

  Histogram, ms/op:
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 
    [37.500, 40.000) = 541 
    [40.000, 42.500) = 662 
    [42.500, 45.000) = 40 
    [45.000, 47.500) = 0 
    [47.500, 50.000) = 0 
    [50.000, 52.500) = 1 
    [52.500, 55.000) = 0 
    [55.000, 57.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     38.404 ms/op
     p(50.0000) =     40.239 ms/op
     p(90.0000) =     41.943 ms/op
     p(95.0000) =     42.205 ms/op
     p(99.0000) =     43.581 ms/op
     p(99.9000) =     49.647 ms/op
     p(99.9900) =     51.446 ms/op
     p(99.9990) =     51.446 ms/op
     p(99.9999) =     51.446 ms/op
    p(100.0000) =     51.446 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 89.22% complete, ETA 00:39:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
456.655 ±(99.9%) 77.986 ms/op
# Warmup Iteration   2: 385.372 ±(99.9%) 2.615 ms/op
# Warmup Iteration   3: 385.795 ±(99.9%) 4.212 ms/op
# Warmup Iteration   4: 392.329 ±(99.9%) 6.943 ms/op
# Warmup Iteration   5: 398.217 ±(99.9%) 1.804 ms/op
Iteration   1: 399.298 ±(99.9%) 1.070 ms/op
                 executeQuery·p0.00:   394.789 ms/op
                 executeQuery·p0.50:   399.507 ms/op
                 executeQuery·p0.90:   400.766 ms/op
                 executeQuery·p0.95:   401.080 ms/op
                 executeQuery·p0.99:   401.080 ms/op
                 executeQuery·p0.999:  401.080 ms/op
                 executeQuery·p0.9999: 401.080 ms/op
                 executeQuery·p1.00:   401.080 ms/op

Iteration   2: 398.580 ±(99.9%) 0.965 ms/op
                 executeQuery·p0.00:   395.313 ms/op
                 executeQuery·p0.50:   398.983 ms/op
                 executeQuery·p0.90:   400.032 ms/op
                 executeQuery·p0.95:   400.373 ms/op
                 executeQuery·p0.99:   400.556 ms/op
                 executeQuery·p0.999:  400.556 ms/op
                 executeQuery·p0.9999: 400.556 ms/op
                 executeQuery·p1.00:   400.556 ms/op

Iteration   3: 398.761 ±(99.9%) 1.011 ms/op
                 executeQuery·p0.00:   395.313 ms/op
                 executeQuery·p0.50:   398.983 ms/op
                 executeQuery·p0.90:   400.189 ms/op
                 executeQuery·p0.95:   400.556 ms/op
                 executeQuery·p0.99:   400.556 ms/op
                 executeQuery·p0.999:  400.556 ms/op
                 executeQuery·p0.9999: 400.556 ms/op
                 executeQuery·p1.00:   400.556 ms/op

Iteration   4: 397.693 ±(99.9%) 1.323 ms/op
                 executeQuery·p0.00:   393.740 ms/op
                 executeQuery·p0.50:   398.459 ms/op
                 executeQuery·p0.90:   400.032 ms/op
                 executeQuery·p0.95:   400.032 ms/op
                 executeQuery·p0.99:   400.032 ms/op
                 executeQuery·p0.999:  400.032 ms/op
                 executeQuery·p0.9999: 400.032 ms/op
                 executeQuery·p1.00:   400.032 ms/op

Iteration   5: 396.684 ±(99.9%) 1.142 ms/op
                 executeQuery·p0.00:   393.740 ms/op
                 executeQuery·p0.50:   396.624 ms/op
                 executeQuery·p0.90:   398.983 ms/op
                 executeQuery·p0.95:   398.983 ms/op
                 executeQuery·p0.99:   398.983 ms/op
                 executeQuery·p0.999:  398.983 ms/op
                 executeQuery·p0.9999: 398.983 ms/op
                 executeQuery·p1.00:   398.983 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery":
  N = 129
  mean =    398.195 ±(99.9%) 0.519 ms/op

  Histogram, ms/op:
    [393.000, 393.500) = 0 
    [393.500, 394.000) = 3 
    [394.000, 394.500) = 1 
    [394.500, 395.000) = 2 
    [395.000, 395.500) = 6 
    [395.500, 396.000) = 11 
    [396.000, 396.500) = 8 
    [396.500, 397.000) = 4 
    [397.000, 397.500) = 4 
    [397.500, 398.000) = 10 
    [398.000, 398.500) = 16 
    [398.500, 399.000) = 23 
    [399.000, 399.500) = 0 
    [399.500, 400.000) = 20 
    [400.000, 400.500) = 12 
    [400.500, 401.000) = 7 
    [401.000, 401.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    393.740 ms/op
     p(50.0000) =    398.459 ms/op
     p(90.0000) =    400.032 ms/op
     p(95.0000) =    400.556 ms/op
     p(99.0000) =    401.080 ms/op
     p(99.9000) =    401.080 ms/op
     p(99.9900) =    401.080 ms/op
     p(99.9990) =    401.080 ms/op
     p(99.9999) =    401.080 ms/op
    p(100.0000) =    401.080 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 90.20% complete, ETA 00:35:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5305.795 ms/op
# Warmup Iteration   2: 4713.000 ±(99.9%) 14755.878 ms/op
# Warmup Iteration   3: 5179.965 ms/op
# Warmup Iteration   4: 5167.383 ms/op
# Warmup Iteration   5: 3941.248 ±(99.9%) 268.728 ms/op
Iteration   1: 3948.238 ±(99.9%) 220.893 ms/op
                 executeQuery·p0.00:   3934.257 ms/op
                 executeQuery·p0.50:   3955.229 ms/op
                 executeQuery·p0.90:   3955.229 ms/op
                 executeQuery·p0.95:   3955.229 ms/op
                 executeQuery·p0.99:   3955.229 ms/op
                 executeQuery·p0.999:  3955.229 ms/op
                 executeQuery·p0.9999: 3955.229 ms/op
                 executeQuery·p1.00:   3955.229 ms/op

Iteration   2: 3939.850 ±(99.9%) 361.618 ms/op
                 executeQuery·p0.00:   3917.480 ms/op
                 executeQuery·p0.50:   3946.840 ms/op
                 executeQuery·p0.90:   3955.229 ms/op
                 executeQuery·p0.95:   3955.229 ms/op
                 executeQuery·p0.99:   3955.229 ms/op
                 executeQuery·p0.999:  3955.229 ms/op
                 executeQuery·p0.9999: 3955.229 ms/op
                 executeQuery·p1.00:   3955.229 ms/op

Iteration   3: 3945.442 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3942.646 ms/op
                 executeQuery·p0.50:   3946.840 ms/op
                 executeQuery·p0.90:   3946.840 ms/op
                 executeQuery·p0.95:   3946.840 ms/op
                 executeQuery·p0.99:   3946.840 ms/op
                 executeQuery·p0.999:  3946.840 ms/op
                 executeQuery·p0.9999: 3946.840 ms/op
                 executeQuery·p1.00:   3946.840 ms/op

Iteration   4: 3903.499 ±(99.9%) 564.036 ms/op
                 executeQuery·p0.00:   3879.731 ms/op
                 executeQuery·p0.50:   3892.314 ms/op
                 executeQuery·p0.90:   3938.451 ms/op
                 executeQuery·p0.95:   3938.451 ms/op
                 executeQuery·p0.99:   3938.451 ms/op
                 executeQuery·p0.999:  3938.451 ms/op
                 executeQuery·p0.9999: 3938.451 ms/op
                 executeQuery·p1.00:   3938.451 ms/op

Iteration   5: 3899.305 ±(99.9%) 289.699 ms/op
                 executeQuery·p0.00:   3888.120 ms/op
                 executeQuery·p0.50:   3892.314 ms/op
                 executeQuery·p0.90:   3917.480 ms/op
                 executeQuery·p0.95:   3917.480 ms/op
                 executeQuery·p0.99:   3917.480 ms/op
                 executeQuery·p0.999:  3917.480 ms/op
                 executeQuery·p0.9999: 3917.480 ms/op
                 executeQuery·p1.00:   3917.480 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery":
  N = 15
  mean =   3927.267 ±(99.9%) 29.043 ms/op

  Histogram, ms/op:
    [3870.000, 3875.000) = 0 
    [3875.000, 3880.000) = 1 
    [3880.000, 3885.000) = 0 
    [3885.000, 3890.000) = 1 
    [3890.000, 3895.000) = 2 
    [3895.000, 3900.000) = 0 
    [3900.000, 3905.000) = 0 
    [3905.000, 3910.000) = 0 
    [3910.000, 3915.000) = 0 
    [3915.000, 3920.000) = 2 
    [3920.000, 3925.000) = 0 
    [3925.000, 3930.000) = 0 
    [3930.000, 3935.000) = 1 
    [3935.000, 3940.000) = 1 
    [3940.000, 3945.000) = 1 
    [3945.000, 3950.000) = 3 
    [3950.000, 3955.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3879.731 ms/op
     p(50.0000) =   3938.451 ms/op
     p(90.0000) =   3955.229 ms/op
     p(95.0000) =   3955.229 ms/op
     p(99.0000) =   3955.229 ms/op
     p(99.9000) =   3955.229 ms/op
     p(99.9900) =   3955.229 ms/op
     p(99.9990) =   3955.229 ms/op
     p(99.9999) =   3955.229 ms/op
    p(100.0000) =   3955.229 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 91.18% complete, ETA 00:31:41
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
41.181 ±(99.9%) 2.004 ms/op
# Warmup Iteration   2: 40.789 ±(99.9%) 0.252 ms/op
# Warmup Iteration   3: 40.555 ±(99.9%) 0.211 ms/op
# Warmup Iteration   4: 40.604 ±(99.9%) 0.206 ms/op
# Warmup Iteration   5: 40.216 ±(99.9%) 0.300 ms/op
Iteration   1: 40.260 ±(99.9%) 0.181 ms/op
                 executeQuery·p0.00:   39.059 ms/op
                 executeQuery·p0.50:   40.108 ms/op
                 executeQuery·p0.90:   41.589 ms/op
                 executeQuery·p0.95:   41.943 ms/op
                 executeQuery·p0.99:   42.336 ms/op
                 executeQuery·p0.999:  42.402 ms/op
                 executeQuery·p0.9999: 42.402 ms/op
                 executeQuery·p1.00:   42.402 ms/op

Iteration   2: 40.107 ±(99.9%) 0.189 ms/op
                 executeQuery·p0.00:   38.994 ms/op
                 executeQuery·p0.50:   39.649 ms/op
                 executeQuery·p0.90:   41.484 ms/op
                 executeQuery·p0.95:   41.878 ms/op
                 executeQuery·p0.99:   42.766 ms/op
                 executeQuery·p0.999:  43.385 ms/op
                 executeQuery·p0.9999: 43.385 ms/op
                 executeQuery·p1.00:   43.385 ms/op

Iteration   3: 40.127 ±(99.9%) 0.195 ms/op
                 executeQuery·p0.00:   38.797 ms/op
                 executeQuery·p0.50:   39.682 ms/op
                 executeQuery·p0.90:   41.583 ms/op
                 executeQuery·p0.95:   41.812 ms/op
                 executeQuery·p0.99:   42.385 ms/op
                 executeQuery·p0.999:  42.729 ms/op
                 executeQuery·p0.9999: 42.729 ms/op
                 executeQuery·p1.00:   42.729 ms/op

Iteration   4: 40.369 ±(99.9%) 0.207 ms/op
                 executeQuery·p0.00:   38.863 ms/op
                 executeQuery·p0.50:   40.239 ms/op
                 executeQuery·p0.90:   41.812 ms/op
                 executeQuery·p0.95:   42.074 ms/op
                 executeQuery·p0.99:   42.645 ms/op
                 executeQuery·p0.999:  43.057 ms/op
                 executeQuery·p0.9999: 43.057 ms/op
                 executeQuery·p1.00:   43.057 ms/op

Iteration   5: 40.137 ±(99.9%) 0.201 ms/op
                 executeQuery·p0.00:   38.994 ms/op
                 executeQuery·p0.50:   40.042 ms/op
                 executeQuery·p0.90:   41.615 ms/op
                 executeQuery·p0.95:   41.927 ms/op
                 executeQuery·p0.99:   43.250 ms/op
                 executeQuery·p0.999:  43.713 ms/op
                 executeQuery·p0.9999: 43.713 ms/op
                 executeQuery·p1.00:   43.713 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 1216
  mean =     40.200 ±(99.9%) 0.087 ms/op

  Histogram, ms/op:
    [38.000, 38.500) = 0 
    [38.500, 39.000) = 8 
    [39.000, 39.500) = 359 
    [39.500, 40.000) = 238 
    [40.000, 40.500) = 215 
    [40.500, 41.000) = 134 
    [41.000, 41.500) = 118 
    [41.500, 42.000) = 91 
    [42.000, 42.500) = 41 
    [42.500, 43.000) = 8 
    [43.000, 43.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =     38.797 ms/op
     p(50.0000) =     40.042 ms/op
     p(90.0000) =     41.615 ms/op
     p(95.0000) =     41.943 ms/op
     p(99.0000) =     42.511 ms/op
     p(99.9000) =     43.670 ms/op
     p(99.9900) =     43.713 ms/op
     p(99.9990) =     43.713 ms/op
     p(99.9999) =     43.713 ms/op
    p(100.0000) =     43.713 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 92.16% complete, ETA 00:28:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
396.823 ±(99.9%) 41.106 ms/op
# Warmup Iteration   2: 409.154 ±(99.9%) 15.876 ms/op
# Warmup Iteration   3: 419.518 ±(99.9%) 1.193 ms/op
# Warmup Iteration   4: 419.256 ±(99.9%) 1.474 ms/op
# Warmup Iteration   5: 419.299 ±(99.9%) 1.649 ms/op
Iteration   1: 419.561 ±(99.9%) 2.033 ms/op
                 executeQuery·p0.00:   415.236 ms/op
                 executeQuery·p0.50:   418.906 ms/op
                 executeQuery·p0.90:   422.576 ms/op
                 executeQuery·p0.95:   422.969 ms/op
                 executeQuery·p0.99:   423.100 ms/op
                 executeQuery·p0.999:  423.100 ms/op
                 executeQuery·p0.9999: 423.100 ms/op
                 executeQuery·p1.00:   423.100 ms/op

Iteration   2: 418.032 ±(99.9%) 1.027 ms/op
                 executeQuery·p0.00:   416.285 ms/op
                 executeQuery·p0.50:   418.120 ms/op
                 executeQuery·p0.90:   419.955 ms/op
                 executeQuery·p0.95:   420.872 ms/op
                 executeQuery·p0.99:   421.003 ms/op
                 executeQuery·p0.999:  421.003 ms/op
                 executeQuery·p0.9999: 421.003 ms/op
                 executeQuery·p1.00:   421.003 ms/op

Iteration   3: 417.726 ±(99.9%) 1.528 ms/op
                 executeQuery·p0.00:   414.712 ms/op
                 executeQuery·p0.50:   417.333 ms/op
                 executeQuery·p0.90:   420.741 ms/op
                 executeQuery·p0.95:   421.396 ms/op
                 executeQuery·p0.99:   421.528 ms/op
                 executeQuery·p0.999:  421.528 ms/op
                 executeQuery·p0.9999: 421.528 ms/op
                 executeQuery·p1.00:   421.528 ms/op

Iteration   4: 418.273 ±(99.9%) 4.285 ms/op
                 executeQuery·p0.00:   414.188 ms/op
                 executeQuery·p0.50:   417.071 ms/op
                 executeQuery·p0.90:   421.003 ms/op
                 executeQuery·p0.95:   437.649 ms/op
                 executeQuery·p0.99:   443.023 ms/op
                 executeQuery·p0.999:  443.023 ms/op
                 executeQuery·p0.9999: 443.023 ms/op
                 executeQuery·p1.00:   443.023 ms/op

Iteration   5: 417.158 ±(99.9%) 1.633 ms/op
                 executeQuery·p0.00:   414.712 ms/op
                 executeQuery·p0.50:   416.285 ms/op
                 executeQuery·p0.90:   420.479 ms/op
                 executeQuery·p0.95:   420.872 ms/op
                 executeQuery·p0.99:   421.003 ms/op
                 executeQuery·p0.999:  421.003 ms/op
                 executeQuery·p0.9999: 421.003 ms/op
                 executeQuery·p1.00:   421.003 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 120
  mean =    418.150 ±(99.9%) 0.973 ms/op

  Histogram, ms/op:
    [410.000, 412.500) = 0 
    [412.500, 415.000) = 5 
    [415.000, 417.500) = 56 
    [417.500, 420.000) = 37 
    [420.000, 422.500) = 15 
    [422.500, 425.000) = 6 
    [425.000, 427.500) = 0 
    [427.500, 430.000) = 0 
    [430.000, 432.500) = 0 
    [432.500, 435.000) = 0 
    [435.000, 437.500) = 0 
    [437.500, 440.000) = 0 
    [440.000, 442.500) = 0 
    [442.500, 445.000) = 1 
    [445.000, 447.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    414.188 ms/op
     p(50.0000) =    417.333 ms/op
     p(90.0000) =    421.528 ms/op
     p(95.0000) =    422.576 ms/op
     p(99.0000) =    438.840 ms/op
     p(99.9000) =    443.023 ms/op
     p(99.9900) =    443.023 ms/op
     p(99.9990) =    443.023 ms/op
     p(99.9999) =    443.023 ms/op
    p(100.0000) =    443.023 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 93.14% complete, ETA 00:24:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3890.916 ±(99.9%) 4366.544 ms/op
# Warmup Iteration   2: 4111.816 ±(99.9%) 3195.863 ms/op
# Warmup Iteration   3: 4227.858 ±(99.9%) 465.451 ms/op
# Warmup Iteration   4: 4180.323 ±(99.9%) 268.728 ms/op
# Warmup Iteration   5: 4205.489 ±(99.9%) 448.365 ms/op
Iteration   1: 4178.925 ±(99.9%) 192.570 ms/op
                 executeQuery·p0.00:   4169.138 ms/op
                 executeQuery·p0.50:   4177.527 ms/op
                 executeQuery·p0.90:   4190.110 ms/op
                 executeQuery·p0.95:   4190.110 ms/op
                 executeQuery·p0.99:   4190.110 ms/op
                 executeQuery·p0.999:  4190.110 ms/op
                 executeQuery·p0.9999: 4190.110 ms/op
                 executeQuery·p1.00:   4190.110 ms/op

Iteration   2: 4183.119 ±(99.9%) 245.976 ms/op
                 executeQuery·p0.00:   4173.332 ms/op
                 executeQuery·p0.50:   4177.527 ms/op
                 executeQuery·p0.90:   4198.498 ms/op
                 executeQuery·p0.95:   4198.498 ms/op
                 executeQuery·p0.99:   4198.498 ms/op
                 executeQuery·p0.999:  4198.498 ms/op
                 executeQuery·p0.9999: 4198.498 ms/op
                 executeQuery·p1.00:   4198.498 ms/op

Iteration   3: 4166.342 ±(99.9%) 448.365 ms/op
                 executeQuery·p0.00:   4148.167 ms/op
                 executeQuery·p0.50:   4156.555 ms/op
                 executeQuery·p0.90:   4194.304 ms/op
                 executeQuery·p0.95:   4194.304 ms/op
                 executeQuery·p0.99:   4194.304 ms/op
                 executeQuery·p0.999:  4194.304 ms/op
                 executeQuery·p0.9999: 4194.304 ms/op
                 executeQuery·p1.00:   4194.304 ms/op

Iteration   4: 4201.295 ±(99.9%) 159.288 ms/op
                 executeQuery·p0.00:   4194.304 ms/op
                 executeQuery·p0.50:   4198.498 ms/op
                 executeQuery·p0.90:   4211.081 ms/op
                 executeQuery·p0.95:   4211.081 ms/op
                 executeQuery·p0.99:   4211.081 ms/op
                 executeQuery·p0.999:  4211.081 ms/op
                 executeQuery·p0.9999: 4211.081 ms/op
                 executeQuery·p1.00:   4211.081 ms/op

Iteration   5: 4109.020 ±(99.9%) 623.217 ms/op
                 executeQuery·p0.00:   4085.252 ms/op
                 executeQuery·p0.50:   4093.641 ms/op
                 executeQuery·p0.90:   4148.167 ms/op
                 executeQuery·p0.95:   4148.167 ms/op
                 executeQuery·p0.99:   4148.167 ms/op
                 executeQuery·p0.999:  4148.167 ms/op
                 executeQuery·p0.9999: 4148.167 ms/op
                 executeQuery·p1.00:   4148.167 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   4167.740 ±(99.9%) 39.480 ms/op

  Histogram, ms/op:
    [4000.000, 4025.000) = 0 
    [4025.000, 4050.000) = 0 
    [4050.000, 4075.000) = 0 
    [4075.000, 4100.000) = 2 
    [4100.000, 4125.000) = 0 
    [4125.000, 4150.000) = 2 
    [4150.000, 4175.000) = 3 
    [4175.000, 4200.000) = 7 
    [4200.000, 4225.000) = 1 
    [4225.000, 4250.000) = 0 
    [4250.000, 4275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4085.252 ms/op
     p(50.0000) =   4177.527 ms/op
     p(90.0000) =   4203.531 ms/op
     p(95.0000) =   4211.081 ms/op
     p(99.0000) =   4211.081 ms/op
     p(99.9000) =   4211.081 ms/op
     p(99.9900) =   4211.081 ms/op
     p(99.9990) =   4211.081 ms/op
     p(99.9999) =   4211.081 ms/op
    p(100.0000) =   4211.081 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 94.12% complete, ETA 00:20:48
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
51.476 ±(99.9%) 2.173 ms/op
# Warmup Iteration   2: 54.484 ±(99.9%) 0.775 ms/op
# Warmup Iteration   3: 56.049 ±(99.9%) 0.171 ms/op
# Warmup Iteration   4: 55.827 ±(99.9%) 0.096 ms/op
# Warmup Iteration   5: 56.094 ±(99.9%) 0.187 ms/op
Iteration   1: 56.388 ±(99.9%) 0.168 ms/op
                 executeQuery·p0.00:   55.312 ms/op
                 executeQuery·p0.50:   56.230 ms/op
                 executeQuery·p0.90:   57.213 ms/op
                 executeQuery·p0.95:   57.704 ms/op
                 executeQuery·p0.99:   58.786 ms/op
                 executeQuery·p0.999:  58.786 ms/op
                 executeQuery·p0.9999: 58.786 ms/op
                 executeQuery·p1.00:   58.786 ms/op

Iteration   2: 56.389 ±(99.9%) 0.131 ms/op
                 executeQuery·p0.00:   55.575 ms/op
                 executeQuery·p0.50:   56.295 ms/op
                 executeQuery·p0.90:   57.082 ms/op
                 executeQuery·p0.95:   57.475 ms/op
                 executeQuery·p0.99:   58.311 ms/op
                 executeQuery·p0.999:  58.458 ms/op
                 executeQuery·p0.9999: 58.458 ms/op
                 executeQuery·p1.00:   58.458 ms/op

Iteration   3: 56.406 ±(99.9%) 0.152 ms/op
                 executeQuery·p0.00:   55.378 ms/op
                 executeQuery·p0.50:   56.295 ms/op
                 executeQuery·p0.90:   57.213 ms/op
                 executeQuery·p0.95:   57.557 ms/op
                 executeQuery·p0.99:   58.819 ms/op
                 executeQuery·p0.999:  59.507 ms/op
                 executeQuery·p0.9999: 59.507 ms/op
                 executeQuery·p1.00:   59.507 ms/op

Iteration   4: 56.405 ±(99.9%) 0.127 ms/op
                 executeQuery·p0.00:   55.706 ms/op
                 executeQuery·p0.50:   56.295 ms/op
                 executeQuery·p0.90:   57.115 ms/op
                 executeQuery·p0.95:   57.475 ms/op
                 executeQuery·p0.99:   58.393 ms/op
                 executeQuery·p0.999:  58.393 ms/op
                 executeQuery·p0.9999: 58.393 ms/op
                 executeQuery·p1.00:   58.393 ms/op

Iteration   5: 56.110 ±(99.9%) 0.149 ms/op
                 executeQuery·p0.00:   55.181 ms/op
                 executeQuery·p0.50:   56.033 ms/op
                 executeQuery·p0.90:   56.793 ms/op
                 executeQuery·p0.95:   57.344 ms/op
                 executeQuery·p0.99:   58.362 ms/op
                 executeQuery·p0.999:  58.917 ms/op
                 executeQuery·p0.9999: 58.917 ms/op
                 executeQuery·p1.00:   58.917 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery":
  N = 871
  mean =     56.339 ±(99.9%) 0.066 ms/op

  Histogram, ms/op:
    [55.000, 55.500) = 19 
    [55.500, 56.000) = 239 
    [56.000, 56.500) = 387 
    [56.500, 57.000) = 113 
    [57.000, 57.500) = 73 
    [57.500, 58.000) = 22 
    [58.000, 58.500) = 11 
    [58.500, 59.000) = 6 
    [59.000, 59.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     55.181 ms/op
     p(50.0000) =     56.230 ms/op
     p(90.0000) =     57.082 ms/op
     p(95.0000) =     57.475 ms/op
     p(99.0000) =     58.411 ms/op
     p(99.9000) =     59.507 ms/op
     p(99.9900) =     59.507 ms/op
     p(99.9990) =     59.507 ms/op
     p(99.9999) =     59.507 ms/op
    p(100.0000) =     59.507 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 95.10% complete, ETA 00:17:15
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
497.759 ±(99.9%) 31.981 ms/op
# Warmup Iteration   2: 504.470 ±(99.9%) 18.890 ms/op
# Warmup Iteration   3: 527.379 ±(99.9%) 2.435 ms/op
# Warmup Iteration   4: 527.158 ±(99.9%) 2.989 ms/op
# Warmup Iteration   5: 526.799 ±(99.9%) 2.624 ms/op
Iteration   1: 524.260 ±(99.9%) 1.844 ms/op
                 executeQuery·p0.00:   521.142 ms/op
                 executeQuery·p0.50:   523.764 ms/op
                 executeQuery·p0.90:   527.434 ms/op
                 executeQuery·p0.95:   528.482 ms/op
                 executeQuery·p0.99:   528.482 ms/op
                 executeQuery·p0.999:  528.482 ms/op
                 executeQuery·p0.9999: 528.482 ms/op
                 executeQuery·p1.00:   528.482 ms/op

Iteration   2: 524.122 ±(99.9%) 1.730 ms/op
                 executeQuery·p0.00:   521.667 ms/op
                 executeQuery·p0.50:   523.764 ms/op
                 executeQuery·p0.90:   527.958 ms/op
                 executeQuery·p0.95:   527.958 ms/op
                 executeQuery·p0.99:   527.958 ms/op
                 executeQuery·p0.999:  527.958 ms/op
                 executeQuery·p0.9999: 527.958 ms/op
                 executeQuery·p1.00:   527.958 ms/op

Iteration   3: 525.033 ±(99.9%) 1.681 ms/op
                 executeQuery·p0.00:   522.191 ms/op
                 executeQuery·p0.50:   524.288 ms/op
                 executeQuery·p0.90:   527.958 ms/op
                 executeQuery·p0.95:   527.958 ms/op
                 executeQuery·p0.99:   527.958 ms/op
                 executeQuery·p0.999:  527.958 ms/op
                 executeQuery·p0.9999: 527.958 ms/op
                 executeQuery·p1.00:   527.958 ms/op

Iteration   4: 524.398 ±(99.9%) 1.769 ms/op
                 executeQuery·p0.00:   521.667 ms/op
                 executeQuery·p0.50:   524.288 ms/op
                 executeQuery·p0.90:   527.958 ms/op
                 executeQuery·p0.95:   527.958 ms/op
                 executeQuery·p0.99:   527.958 ms/op
                 executeQuery·p0.999:  527.958 ms/op
                 executeQuery·p0.9999: 527.958 ms/op
                 executeQuery·p1.00:   527.958 ms/op

Iteration   5: 523.460 ±(99.9%) 1.559 ms/op
                 executeQuery·p0.00:   521.667 ms/op
                 executeQuery·p0.50:   522.715 ms/op
                 executeQuery·p0.90:   526.909 ms/op
                 executeQuery·p0.95:   528.482 ms/op
                 executeQuery·p0.99:   528.482 ms/op
                 executeQuery·p0.999:  528.482 ms/op
                 executeQuery·p0.9999: 528.482 ms/op
                 executeQuery·p1.00:   528.482 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery":
  N = 95
  mean =    524.255 ±(99.9%) 0.675 ms/op

  Histogram, ms/op:
    [521.000, 521.500) = 1 
    [521.500, 522.000) = 4 
    [522.000, 522.500) = 14 
    [522.500, 523.000) = 8 
    [523.000, 523.500) = 12 
    [523.500, 524.000) = 14 
    [524.000, 524.500) = 13 
    [524.500, 525.000) = 2 
    [525.000, 525.500) = 5 
    [525.500, 526.000) = 2 
    [526.000, 526.500) = 3 
    [526.500, 527.000) = 4 
    [527.000, 527.500) = 5 
    [527.500, 528.000) = 6 
    [528.000, 528.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    521.142 ms/op
     p(50.0000) =    523.764 ms/op
     p(90.0000) =    527.434 ms/op
     p(95.0000) =    527.958 ms/op
     p(99.0000) =    528.482 ms/op
     p(99.9000) =    528.482 ms/op
     p(99.9900) =    528.482 ms/op
     p(99.9990) =    528.482 ms/op
     p(99.9999) =    528.482 ms/op
    p(100.0000) =    528.482 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 96.08% complete, ETA 00:13:43
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4845.819 ±(99.9%) 2580.580 ms/op
# Warmup Iteration   2: 5213.520 ms/op
# Warmup Iteration   3: 5435.818 ms/op
# Warmup Iteration   4: 5435.818 ms/op
# Warmup Iteration   5: 5423.235 ms/op
Iteration   1: 5410.652 ms/op
                 executeQuery·p0.00:   5402.264 ms/op
                 executeQuery·p0.50:   5410.652 ms/op
                 executeQuery·p0.90:   5419.041 ms/op
                 executeQuery·p0.95:   5419.041 ms/op
                 executeQuery·p0.99:   5419.041 ms/op
                 executeQuery·p0.999:  5419.041 ms/op
                 executeQuery·p0.9999: 5419.041 ms/op
                 executeQuery·p1.00:   5419.041 ms/op

Iteration   2: 5427.429 ms/op
                 executeQuery·p0.00:   5419.041 ms/op
                 executeQuery·p0.50:   5427.429 ms/op
                 executeQuery·p0.90:   5435.818 ms/op
                 executeQuery·p0.95:   5435.818 ms/op
                 executeQuery·p0.99:   5435.818 ms/op
                 executeQuery·p0.999:  5435.818 ms/op
                 executeQuery·p0.9999: 5435.818 ms/op
                 executeQuery·p1.00:   5435.818 ms/op

Iteration   3: 5402.264 ms/op
                 executeQuery·p0.00:   5393.875 ms/op
                 executeQuery·p0.50:   5402.264 ms/op
                 executeQuery·p0.90:   5410.652 ms/op
                 executeQuery·p0.95:   5410.652 ms/op
                 executeQuery·p0.99:   5410.652 ms/op
                 executeQuery·p0.999:  5410.652 ms/op
                 executeQuery·p0.9999: 5410.652 ms/op
                 executeQuery·p1.00:   5410.652 ms/op

Iteration   4: 5393.875 ms/op
                 executeQuery·p0.00:   5385.486 ms/op
                 executeQuery·p0.50:   5393.875 ms/op
                 executeQuery·p0.90:   5402.264 ms/op
                 executeQuery·p0.95:   5402.264 ms/op
                 executeQuery·p0.99:   5402.264 ms/op
                 executeQuery·p0.999:  5402.264 ms/op
                 executeQuery·p0.9999: 5402.264 ms/op
                 executeQuery·p1.00:   5402.264 ms/op

Iteration   5: 5393.875 ms/op
                 executeQuery·p0.00:   5385.486 ms/op
                 executeQuery·p0.50:   5393.875 ms/op
                 executeQuery·p0.90:   5402.264 ms/op
                 executeQuery·p0.95:   5402.264 ms/op
                 executeQuery·p0.99:   5402.264 ms/op
                 executeQuery·p0.999:  5402.264 ms/op
                 executeQuery·p0.9999: 5402.264 ms/op
                 executeQuery·p1.00:   5402.264 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery":
  N = 10
  mean =   5405.619 ±(99.9%) 24.063 ms/op

  Histogram, ms/op:
    [5380.000, 5385.000) = 0 
    [5385.000, 5390.000) = 2 
    [5390.000, 5395.000) = 1 
    [5395.000, 5400.000) = 0 
    [5400.000, 5405.000) = 3 
    [5405.000, 5410.000) = 0 
    [5410.000, 5415.000) = 1 
    [5415.000, 5420.000) = 2 
    [5420.000, 5425.000) = 0 
    [5425.000, 5430.000) = 0 
    [5430.000, 5435.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   5385.486 ms/op
     p(50.0000) =   5402.264 ms/op
     p(90.0000) =   5434.140 ms/op
     p(95.0000) =   5435.818 ms/op
     p(99.0000) =   5435.818 ms/op
     p(99.9000) =   5435.818 ms/op
     p(99.9900) =   5435.818 ms/op
     p(99.9990) =   5435.818 ms/op
     p(99.9999) =   5435.818 ms/op
    p(100.0000) =   5435.818 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 97.06% complete, ETA 00:10:14
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
42.452 ±(99.9%) 2.132 ms/op
# Warmup Iteration   2: 46.149 ±(99.9%) 0.392 ms/op
# Warmup Iteration   3: 45.987 ±(99.9%) 0.171 ms/op
# Warmup Iteration   4: 45.899 ±(99.9%) 0.138 ms/op
# Warmup Iteration   5: 46.242 ±(99.9%) 0.219 ms/op
Iteration   1: 46.426 ±(99.9%) 0.201 ms/op
                 executeQuery·p0.00:   45.285 ms/op
                 executeQuery·p0.50:   46.137 ms/op
                 executeQuery·p0.90:   47.494 ms/op
                 executeQuery·p0.95:   48.241 ms/op
                 executeQuery·p0.99:   49.847 ms/op
                 executeQuery·p0.999:  50.725 ms/op
                 executeQuery·p0.9999: 50.725 ms/op
                 executeQuery·p1.00:   50.725 ms/op

Iteration   2: 46.231 ±(99.9%) 0.159 ms/op
                 executeQuery·p0.00:   45.285 ms/op
                 executeQuery·p0.50:   46.006 ms/op
                 executeQuery·p0.90:   47.120 ms/op
                 executeQuery·p0.95:   47.412 ms/op
                 executeQuery·p0.99:   49.218 ms/op
                 executeQuery·p0.999:  50.463 ms/op
                 executeQuery·p0.9999: 50.463 ms/op
                 executeQuery·p1.00:   50.463 ms/op

Iteration   3: 46.133 ±(99.9%) 0.175 ms/op
                 executeQuery·p0.00:   44.958 ms/op
                 executeQuery·p0.50:   45.875 ms/op
                 executeQuery·p0.90:   46.989 ms/op
                 executeQuery·p0.95:   47.274 ms/op
                 executeQuery·p0.99:   49.528 ms/op
                 executeQuery·p0.999:  50.659 ms/op
                 executeQuery·p0.9999: 50.659 ms/op
                 executeQuery·p1.00:   50.659 ms/op

Iteration   4: 46.121 ±(99.9%) 0.173 ms/op
                 executeQuery·p0.00:   45.089 ms/op
                 executeQuery·p0.50:   45.875 ms/op
                 executeQuery·p0.90:   46.924 ms/op
                 executeQuery·p0.95:   47.232 ms/op
                 executeQuery·p0.99:   49.463 ms/op
                 executeQuery·p0.999:  50.528 ms/op
                 executeQuery·p0.9999: 50.528 ms/op
                 executeQuery·p1.00:   50.528 ms/op

Iteration   5: 46.024 ±(99.9%) 0.167 ms/op
                 executeQuery·p0.00:   45.023 ms/op
                 executeQuery·p0.50:   45.842 ms/op
                 executeQuery·p0.90:   46.825 ms/op
                 executeQuery·p0.95:   47.219 ms/op
                 executeQuery·p0.99:   49.234 ms/op
                 executeQuery·p0.999:  49.611 ms/op
                 executeQuery·p0.9999: 49.611 ms/op
                 executeQuery·p1.00:   49.611 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 1060
  mean =     46.187 ±(99.9%) 0.079 ms/op

  Histogram, ms/op:
    [44.000, 44.500) = 0 
    [44.500, 45.000) = 1 
    [45.000, 45.500) = 129 
    [45.500, 46.000) = 406 
    [46.000, 46.500) = 249 
    [46.500, 47.000) = 162 
    [47.000, 47.500) = 58 
    [47.500, 48.000) = 22 
    [48.000, 48.500) = 10 
    [48.500, 49.000) = 6 
    [49.000, 49.500) = 8 
    [49.500, 50.000) = 5 
    [50.000, 50.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     44.958 ms/op
     p(50.0000) =     45.941 ms/op
     p(90.0000) =     47.055 ms/op
     p(95.0000) =     47.514 ms/op
     p(99.0000) =     49.440 ms/op
     p(99.9000) =     50.721 ms/op
     p(99.9900) =     50.725 ms/op
     p(99.9990) =     50.725 ms/op
     p(99.9999) =     50.725 ms/op
    p(100.0000) =     50.725 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 98.04% complete, ETA 00:06:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
415.323 ±(99.9%) 42.490 ms/op
# Warmup Iteration   2: 428.496 ±(99.9%) 16.146 ms/op
# Warmup Iteration   3: 442.476 ±(99.9%) 3.014 ms/op
# Warmup Iteration   4: 441.792 ±(99.9%) 2.228 ms/op
# Warmup Iteration   5: 443.115 ±(99.9%) 2.075 ms/op
Iteration   1: 442.978 ±(99.9%) 3.204 ms/op
                 executeQuery·p0.00:   438.305 ms/op
                 executeQuery·p0.50:   442.499 ms/op
                 executeQuery·p0.90:   449.944 ms/op
                 executeQuery·p0.95:   451.412 ms/op
                 executeQuery·p0.99:   451.412 ms/op
                 executeQuery·p0.999:  451.412 ms/op
                 executeQuery·p0.9999: 451.412 ms/op
                 executeQuery·p1.00:   451.412 ms/op

Iteration   2: 442.408 ±(99.9%) 2.235 ms/op
                 executeQuery·p0.00:   438.829 ms/op
                 executeQuery·p0.50:   441.450 ms/op
                 executeQuery·p0.90:   446.693 ms/op
                 executeQuery·p0.95:   447.532 ms/op
                 executeQuery·p0.99:   447.742 ms/op
                 executeQuery·p0.999:  447.742 ms/op
                 executeQuery·p0.9999: 447.742 ms/op
                 executeQuery·p1.00:   447.742 ms/op

Iteration   3: 442.499 ±(99.9%) 2.050 ms/op
                 executeQuery·p0.00:   439.878 ms/op
                 executeQuery·p0.50:   441.450 ms/op
                 executeQuery·p0.90:   446.798 ms/op
                 executeQuery·p0.95:   449.734 ms/op
                 executeQuery·p0.99:   450.363 ms/op
                 executeQuery·p0.999:  450.363 ms/op
                 executeQuery·p0.9999: 450.363 ms/op
                 executeQuery·p1.00:   450.363 ms/op

Iteration   4: 444.801 ±(99.9%) 3.164 ms/op
                 executeQuery·p0.00:   439.353 ms/op
                 executeQuery·p0.50:   443.548 ms/op
                 executeQuery·p0.90:   451.936 ms/op
                 executeQuery·p0.95:   452.775 ms/op
                 executeQuery·p0.99:   452.985 ms/op
                 executeQuery·p0.999:  452.985 ms/op
                 executeQuery·p0.9999: 452.985 ms/op
                 executeQuery·p1.00:   452.985 ms/op

Iteration   5: 442.408 ±(99.9%) 3.631 ms/op
                 executeQuery·p0.00:   435.683 ms/op
                 executeQuery·p0.50:   441.450 ms/op
                 executeQuery·p0.90:   448.057 ms/op
                 executeQuery·p0.95:   454.138 ms/op
                 executeQuery·p0.99:   455.606 ms/op
                 executeQuery·p0.999:  455.606 ms/op
                 executeQuery·p0.9999: 455.606 ms/op
                 executeQuery·p1.00:   455.606 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 115
  mean =    443.019 ±(99.9%) 1.179 ms/op

  Histogram, ms/op:
    [430.000, 432.500) = 0 
    [432.500, 435.000) = 0 
    [435.000, 437.500) = 2 
    [437.500, 440.000) = 28 
    [440.000, 442.500) = 38 
    [442.500, 445.000) = 13 
    [445.000, 447.500) = 20 
    [447.500, 450.000) = 7 
    [450.000, 452.500) = 5 
    [452.500, 455.000) = 1 
    [455.000, 457.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    435.683 ms/op
     p(50.0000) =    442.499 ms/op
     p(90.0000) =    447.742 ms/op
     p(95.0000) =    451.412 ms/op
     p(99.0000) =    455.187 ms/op
     p(99.9000) =    455.606 ms/op
     p(99.9900) =    455.606 ms/op
     p(99.9990) =    455.606 ms/op
     p(99.9999) =    455.606 ms/op
    p(100.0000) =    455.606 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 99.02% complete, ETA 00:03:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4061.484 ±(99.9%) 3328.681 ms/op
# Warmup Iteration   2: 4343.901 ±(99.9%) 1641.760 ms/op
# Warmup Iteration   3: 4404.019 ±(99.9%) 153.039 ms/op
# Warmup Iteration   4: 4395.631 ±(99.9%) 265.072 ms/op
# Warmup Iteration   5: 4426.389 ±(99.9%) 579.398 ms/op
Iteration   1: 4443.166 ±(99.9%) 971.931 ms/op
                 executeQuery·p0.00:   4412.408 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4504.682 ms/op
                 executeQuery·p0.95:   4504.682 ms/op
                 executeQuery·p0.99:   4504.682 ms/op
                 executeQuery·p0.999:  4504.682 ms/op
                 executeQuery·p0.9999: 4504.682 ms/op
                 executeQuery·p1.00:   4504.682 ms/op

Iteration   2: 4418.000 ±(99.9%) 618.502 ms/op
                 executeQuery·p0.00:   4387.242 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4454.351 ms/op
                 executeQuery·p0.95:   4454.351 ms/op
                 executeQuery·p0.99:   4454.351 ms/op
                 executeQuery·p0.999:  4454.351 ms/op
                 executeQuery·p0.9999: 4454.351 ms/op
                 executeQuery·p1.00:   4454.351 ms/op

Iteration   3: 4401.223 ±(99.9%) 176.715 ms/op
                 executeQuery·p0.00:   4395.631 ms/op
                 executeQuery·p0.50:   4395.631 ms/op
                 executeQuery·p0.90:   4412.408 ms/op
                 executeQuery·p0.95:   4412.408 ms/op
                 executeQuery·p0.99:   4412.408 ms/op
                 executeQuery·p0.999:  4412.408 ms/op
                 executeQuery·p0.9999: 4412.408 ms/op
                 executeQuery·p1.00:   4412.408 ms/op

Iteration   4: 4429.185 ±(99.9%) 809.809 ms/op
                 executeQuery·p0.00:   4395.631 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4479.517 ms/op
                 executeQuery·p0.95:   4479.517 ms/op
                 executeQuery·p0.99:   4479.517 ms/op
                 executeQuery·p0.999:  4479.517 ms/op
                 executeQuery·p0.9999: 4479.517 ms/op
                 executeQuery·p1.00:   4479.517 ms/op

Iteration   5: 4459.943 ±(99.9%) 1793.459 ms/op
                 executeQuery·p0.00:   4387.242 ms/op
                 executeQuery·p0.50:   4420.796 ms/op
                 executeQuery·p0.90:   4571.791 ms/op
                 executeQuery·p0.95:   4571.791 ms/op
                 executeQuery·p0.99:   4571.791 ms/op
                 executeQuery·p0.999:  4571.791 ms/op
                 executeQuery·p0.9999: 4571.791 ms/op
                 executeQuery·p1.00:   4571.791 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 15
  mean =   4430.304 ±(99.9%) 55.372 ms/op

  Histogram, ms/op:
    [4300.000, 4325.000) = 0 
    [4325.000, 4350.000) = 0 
    [4350.000, 4375.000) = 0 
    [4375.000, 4400.000) = 5 
    [4400.000, 4425.000) = 6 
    [4425.000, 4450.000) = 0 
    [4450.000, 4475.000) = 1 
    [4475.000, 4500.000) = 1 
    [4500.000, 4525.000) = 1 
    [4525.000, 4550.000) = 0 
    [4550.000, 4575.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4387.242 ms/op
     p(50.0000) =   4412.408 ms/op
     p(90.0000) =   4531.526 ms/op
     p(95.0000) =   4571.791 ms/op
     p(99.0000) =   4571.791 ms/op
     p(99.9000) =   4571.791 ms/op
     p(99.9900) =   4571.791 ms/op
     p(99.9990) =   4571.791 ms/op
     p(99.9999) =   4571.791 ms/op
    p(100.0000) =   4571.791 ms/op


# Run complete. Total time: 05:43:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                                                            (tableFilePath)                     (tpchInstance)    Mode   Cnt       Score       Error  Units
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   129     398.174 ±     1.092  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           392.167              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           397.935              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           398.983              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           398.983              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           426.666              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           438.305              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           438.305              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           438.305              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample    95     539.244 ±     1.009  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           534.774              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           538.968              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           541.065              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           544.630              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           551.551              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           551.551              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           551.551              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           551.551              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample    70     725.944 ±     5.755  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           708.837              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           724.566              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           732.850              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           739.613              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           829.424              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           829.424              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           829.424              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           829.424              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample     5    2429.341 ±   130.911  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2369.782              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2445.279              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2449.474              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2449.474              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2449.474              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2449.474              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2449.474              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2449.474              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample     5    5078.463 ±   426.454  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          4890.558              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5133.828              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.994              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.994              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.994              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.994              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.994              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.994              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    15    3909.651 ±    19.014  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3900.703              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3904.897              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3936.774              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3972.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3972.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3972.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3972.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3972.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    10    5130.473 ±    47.151  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5108.662              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5117.051              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5191.709              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5192.548              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5192.548              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5192.548              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5192.548              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5192.548              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    10    7264.535 ±   194.739  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7163.871              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7218.397              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7550.586              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7566.524              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7566.524              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7566.524              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7566.524              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7566.524              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample     5   24004.841 ±  1165.007  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         23588.766              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24125.637              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24293.409              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24293.409              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24293.409              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24293.409              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24293.409              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24293.409              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample     5   49418.967 ±  6386.498  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         47445.967              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         49190.797              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51875.152              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51875.152              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51875.152              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51875.152              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51875.152              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51875.152              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    10    7824.894 ±    18.716  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7801.405              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7826.571              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7842.510              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7843.348              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7843.348              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7843.348              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7843.348              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7843.348              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample     5   12794.305 ±    57.783  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12784.239              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12784.239              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12817.793              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12817.793              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12817.793              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12817.793              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12817.793              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12817.793              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample     5   14411.629 ±   319.769  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14294.188              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14411.629              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14512.292              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14512.292              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14512.292              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14512.292              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14512.292              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14512.292              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample     5   48170.743 ±  1231.193  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         47781.511              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         48117.055              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         48586.818              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         48586.818              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         48586.818              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         48586.818              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         48586.818              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         48586.818              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample     5   97146.792 ±  4236.702  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         96099.893              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         96770.982              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         98784.248              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         98784.248              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         98784.248              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         98784.248              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         98784.248              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         98784.248              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   130     391.405 ±     1.629  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           387.449              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           390.070              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           394.160              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           401.788              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           430.199              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           440.926              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           440.926              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           440.926              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample    95     529.547 ±     6.175  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           523.764              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           525.861              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           530.999              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           535.822              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           687.866              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           687.866              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           687.866              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           687.866              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample    65     787.690 ±     8.878  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           747.635              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           784.335              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           816.841              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           819.672              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           828.375              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           828.375              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           828.375              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           828.375              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample     5    2264.924 ±   472.117  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2185.232              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2206.204              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2478.834              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2478.834              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2478.834              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2478.834              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2478.834              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2478.834              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample     5    5096.918 ±   293.037  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          4974.445              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5133.828              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5167.383              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5167.383              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5167.383              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5167.383              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5167.383              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5167.383              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    15    3914.124 ±   180.796  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3829.400              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3841.982              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4235.408              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4429.185              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4429.185              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4429.185              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4429.185              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4429.185              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    10    5335.155 ±   293.436  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5251.269              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5268.046              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5828.405              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5880.414              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5880.414              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5880.414              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5880.414              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5880.414              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    10    7089.213 ±   219.458  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          6903.824              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7105.151              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7288.023              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7289.700              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7289.700              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7289.700              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7289.700              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7289.700              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample     5   25212.800 ±  1290.769  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24863.834              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         25232.933              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         25635.586              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         25635.586              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         25635.586              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         25635.586              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         25635.586              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         25635.586              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample     5   51043.002 ±  5607.012  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         49727.668              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51069.846              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53351.547              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53351.547              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53351.547              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53351.547              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53351.547              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53351.547              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    10    8200.703 ±    26.197  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8170.504              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8204.059              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8220.836              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8220.836              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8220.836              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8220.836              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8220.836              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8220.836              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample     5   12462.116 ±   989.714  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12247.368              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12415.140              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12868.125              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12868.125              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12868.125              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12868.125              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12868.125              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12868.125              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample     5   15159.892 ±  1030.212  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14864.613              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15267.267              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15418.262              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15418.262              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15418.262              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15418.262              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15418.262              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15418.262              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample     5   52546.241 ±  3471.777  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51472.499              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         52210.696              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         53485.765              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         53485.765              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         53485.765              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         53485.765              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         53485.765              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         53485.765              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample     5  101522.289 ±  4379.308  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99723.772              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102139.691              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102408.126              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102408.126              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102408.126              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102408.126              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102408.126              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102408.126              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample   656      75.766 ±     0.242  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            72.090              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            75.497              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            78.250              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            79.430              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            80.141              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            90.046              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            90.046              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            90.046              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample   646      76.912 ±     0.208  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            73.794              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            76.677              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            79.430              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            79.692              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            80.617              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            90.309              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            90.309              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            90.309              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample   637      78.066 ±     0.244  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            74.842              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            77.726              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            80.740              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            81.396              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            82.838              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            90.702              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            90.702              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            90.702              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample    70     750.706 ±     4.809  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           718.275              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           752.878              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           762.105              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           763.835              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           770.703              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           770.703              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           770.703              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           770.703              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample    70     749.552 ±     4.424  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           720.372              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           753.402              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           758.120              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           759.641              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           762.315              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           762.315              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           762.315              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           762.315              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample    67     766.462 ±     4.362  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           730.857              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           766.509              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           778.043              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           779.092              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           781.189              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           781.189              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           781.189              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           781.189              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    35    1460.217 ±    19.673  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1423.966              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1440.743              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1508.691              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1514.563              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1516.241              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1516.241              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1516.241              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1516.241              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    35    1479.211 ±    20.250  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1447.035              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1459.618              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1530.082              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1540.568              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1545.601              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1545.601              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1545.601              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1545.601              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    35    1558.903 ±     7.193  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1528.824              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1564.475              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1568.670              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1568.670              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1568.670              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1568.670              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1568.670              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1568.670              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample   640      77.247 ±     0.263  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            71.565              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            76.939              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            79.941              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            80.609              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            81.789              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            89.784              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            89.784              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            89.784              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample   644      77.084 ±     0.238  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            73.925              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            76.808              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            79.692              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            80.609              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            81.396              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            86.901              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            86.901              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            86.901              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample   425     117.395 ±     0.118  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           116.523              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           117.309              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           117.834              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           117.965              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           119.960              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           129.368              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           129.368              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           129.368              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample    68     758.491 ±     7.407  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           731.906              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           768.606              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           780.141              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           781.766              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           783.286              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           783.286              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           783.286              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           783.286              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample    70     739.740 ±     7.915  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           713.032              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           752.353              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           758.120              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           759.169              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           784.335              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           784.335              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           784.335              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           784.335              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample    45    1110.745 ±     2.870  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1107.296              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1109.393              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1113.588              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1117.992              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1142.948              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1142.948              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1142.948              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1142.948              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    35    1473.938 ±    22.135  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1409.286              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1465.909              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1533.857              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1542.246              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1545.601              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1545.601              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1545.601              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1545.601              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    35    1510.189 ±    15.836  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1413.480              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1518.338              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1523.371              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1529.663              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1541.407              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1541.407              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1541.407              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1541.407              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    25    2346.126 ±     6.657  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2336.227              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2344.616              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2352.166              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2374.815              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2382.365              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2382.365              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2382.365              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2382.365              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    15    4388.360 ±    94.778  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4294.967              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4345.299              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4536.559              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4546.626              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4546.626              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4546.626              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4546.626              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4546.626              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   48559.974 ±  1192.623  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48184.164              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48519.709              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48989.471              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48989.471              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48989.471              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                           /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48989.471              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48989.471              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48989.471              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    15    4480.076 ±    88.094  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4387.242              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4454.351              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4632.189              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4672.455              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4672.455              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4672.455              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4672.455              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4672.455              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   50412.179 ±   643.442  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50130.321              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50465.866              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50532.975              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50532.975              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50532.975              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                              /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50532.975              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                             /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50532.975              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50532.975              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    30    1812.499 ±     6.478  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1803.551              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1809.842              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1814.036              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1835.742              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1862.271              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1862.271              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1862.271              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1862.271              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   23380.728 ±   168.464  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23320.330              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23387.439              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23420.994              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23420.994              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23420.994              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23420.994              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23420.994              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23420.994              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    40    1333.212 ±     3.825  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1323.303              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1334.837              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1341.968              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1344.170              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1344.274              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1344.274              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1344.274              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1344.274              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   17015.452 ±   124.267  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         16978.543              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17012.097              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17062.429              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17062.429              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17062.429              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17062.429              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17062.429              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17062.429              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    30    1949.303 ±     6.444  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1944.060              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1946.157              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1954.336              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1974.364              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1998.586              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1998.586              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1998.586              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1998.586              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   26159.035 ±    70.769  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26138.903              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26172.457              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26172.457              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26172.457              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26172.457              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26172.457              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26172.457              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         26172.457              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    55     968.350 ±     1.977  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           959.447              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           967.836              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           974.127              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           974.337              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           975.176              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                           /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           975.176              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           975.176              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           975.176              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   12616.466 ±     0.001  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12616.466              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12616.466              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12616.466              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12616.466              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12616.466              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                      /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12616.466              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                     /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12616.466              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12616.466              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   140     358.313 ±     1.960  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           350.749              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           356.516              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           365.324              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           368.050              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           399.927              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           404.226              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           404.226              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           404.226              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    4258.337 ±   117.215  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4097.835              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4273.996              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4440.929              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4521.460              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4521.460              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4521.460              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4521.460              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4521.460              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   214     233.478 ±     0.866  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           228.852              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           232.784              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           237.765              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           239.337              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           251.383              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           268.435              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           268.435              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           268.435              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20    3040.451 ±   135.861  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2751.463              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3053.453              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3193.543              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3411.227              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3422.552              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3422.552              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3422.552              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3422.552              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   203     247.527 ±     0.887  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           244.056              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           246.415              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           250.610              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           251.816              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           268.352              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           285.213              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           285.213              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           285.213              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20    3160.198 ±   124.589  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2889.875              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3154.117              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3324.825              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3449.605              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3456.106              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3456.106              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3456.106              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3456.106              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   200     252.910 ±     0.692  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           249.037              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           251.658              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           256.377              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           257.950              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           262.658              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           262.930              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           262.930              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           262.930              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20    2505.258 ±     8.611  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2495.611              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2503.999              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2519.518              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2536.715              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2537.554              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2537.554              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2537.554              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2537.554              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   22770.038 ±  4940.003  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22078.816              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22078.816              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25031.606              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25031.606              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25031.606              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25031.606              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25031.606              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25031.606              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   146     346.371 ±     4.003  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           341.311              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           342.884              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           348.809              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           353.187              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           433.838              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           437.780              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           437.780              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           437.780              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    3473.443 ±    24.258  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3435.135              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3472.884              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3506.438              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3531.604              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3531.604              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3531.604              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3531.604              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3531.604              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   34527.511 ±   913.626  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34326.184              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34426.847              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34896.609              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34896.609              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34896.609              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34896.609              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34896.609              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34896.609              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   130     393.664 ±     0.411  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           391.119              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           393.216              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           394.789              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           395.549              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           401.280              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           401.605              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           401.605              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           401.605              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    4053.655 ±    15.428  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4018.143              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4055.892              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4065.958              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4068.475              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4068.475              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4068.475              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4068.475              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4068.475              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   35755.603 ±   216.203  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35701.916              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35769.025              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35836.133              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35836.133              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35836.133              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35836.133              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35836.133              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35836.133              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   138     367.845 ±     1.799  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           359.137              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           366.477              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           375.914              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           381.682              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           393.704              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           396.362              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           396.362              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           396.362              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    17    3329.537 ±    42.007  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3271.557              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3330.277              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3416.680              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3426.746              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3426.746              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3426.746              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3426.746              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3426.746              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   34232.232 ±   594.910  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34091.303              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34191.966              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34426.847              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34426.847              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34426.847              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34426.847              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34426.847              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34426.847              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   398     125.305 ±     0.368  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           119.931              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           125.436              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           127.402              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           127.795              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           129.373              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           143.917              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           143.917              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           143.917              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    1899.321 ±    13.233  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1862.271              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1904.214              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1928.122              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1930.324              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1931.477              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1931.477              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1931.477              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1931.477              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   24951.076 ± 16862.915  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22817.014              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         23051.895              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         32782.680              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         32782.680              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         32782.680              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         32782.680              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         32782.680              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         32782.680              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   352     138.461 ±     0.175  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           135.266              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           138.412              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           139.461              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           139.985              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           141.943              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           145.228              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           145.228              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           145.228              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    1838.573 ±     6.048  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1818.231              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1841.299              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1849.688              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1851.785              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1851.785              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1851.785              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1851.785              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1851.785              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   24568.555 ±    57.783  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         24561.844              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         24561.844              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         24595.399              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         24595.399              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         24595.399              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         24595.399              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         24595.399              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         24595.399              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   339     144.049 ±     0.216  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           141.558              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           143.917              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           145.228              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           146.014              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           148.478              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           151.257              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           151.257              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           151.257              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    1902.886 ±    12.540  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1883.242              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1900.020              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1912.393              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1948.674              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1990.197              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1990.197              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1990.197              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1990.197              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   22004.997 ±   280.112  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         21911.044              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22045.262              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22078.816              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22078.816              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22078.816              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22078.816              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22078.816              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22078.816              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1204      41.424 ±     0.167  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            38.666              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            41.157              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            43.909              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            44.286              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            44.892              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            49.648              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            50.790              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            50.790              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   128     399.204 ±     0.689  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           393.740              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           398.983              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           402.706              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           403.177              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           405.343              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           405.799              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           405.799              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           405.799              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15    3860.158 ±    28.894  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3812.622              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3867.148              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3902.380              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3917.480              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3917.480              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3917.480              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3917.480              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3917.480              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery                                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1244      40.073 ±     0.126  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            38.404              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            40.239              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            41.943              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            42.205              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            43.581              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            49.647              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            51.446              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                            N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            51.446              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery                                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   129     398.195 ±     0.519  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           393.740              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           398.459              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           400.032              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           400.556              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           401.080              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           401.080              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           401.080              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                            N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           401.080              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery                                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15    3927.267 ±    29.043  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3879.731              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3938.451              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3955.229              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3955.229              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3955.229              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3955.229              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3955.229              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                            N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3955.229              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1216      40.200 ±     0.087  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            38.797              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            40.042              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            41.615              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            41.943              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            42.511              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            43.670              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            43.713              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            43.713              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   120     418.150 ±     0.973  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           414.188              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           417.333              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           421.528              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           422.576              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           438.840              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           443.023              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           443.023              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           443.023              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15    4167.740 ±    39.480  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4085.252              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4177.527              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4203.531              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4211.081              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4211.081              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4211.081              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4211.081              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4211.081              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery                                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   871      56.339 ±     0.066  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            55.181              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            56.230              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            57.082              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            57.475              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            58.411              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            59.507              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                             N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            59.507              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            59.507              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery                                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    95     524.255 ±     0.675  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           521.142              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           523.764              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           527.434              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           527.958              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           528.482              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           528.482              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                             N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           528.482              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           528.482              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery                                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    10    5405.619 ±    24.063  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.00                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          5385.486              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.50                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          5402.264              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.90                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          5434.140              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.95                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          5435.818              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.99                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          5435.818              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          5435.818              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p0.9999                                                                                             N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          5435.818              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdOptimalOrder.executeQuery:executeQuery·p1.00                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          5435.818              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1060      46.187 ±     0.079  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            44.958              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            45.941              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            47.055              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            47.514              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            49.440              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            50.721              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            50.725              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            50.725              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   115     443.019 ±     1.179  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           435.683              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           442.499              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           447.742              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           451.412              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           455.187              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           455.606              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           455.606              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           455.606              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15    4430.304 ±    55.372  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4387.242              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4412.408              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4531.526              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4571.791              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4571.791              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4571.791              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4571.791              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4571.791              ms/op

Benchmark result is saved to jmh-result.csv

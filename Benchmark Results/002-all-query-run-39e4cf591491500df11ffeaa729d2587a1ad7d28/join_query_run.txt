# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2)

# Run progress: 0.00% complete, ETA 08:53:20
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1390.412 ±(99.9%) 228.448 ms/op
# Warmup Iteration   2: 1303.642 ±(99.9%) 181.496 ms/op
# Warmup Iteration   3: 1301.545 ±(99.9%) 158.992 ms/op
# Warmup Iteration   4: 1279.787 ±(99.9%) 157.261 ms/op
# Warmup Iteration   5: 1314.914 ±(99.9%) 176.153 ms/op
Iteration   1: 1313.604 ±(99.9%) 134.258 ms/op
                 executeQuery·p0.00:   1254.097 ms/op
                 executeQuery·p0.50:   1292.894 ms/op
                 executeQuery·p0.90:   1461.715 ms/op
                 executeQuery·p0.95:   1461.715 ms/op
                 executeQuery·p0.99:   1461.715 ms/op
                 executeQuery·p0.999:  1461.715 ms/op
                 executeQuery·p0.9999: 1461.715 ms/op
                 executeQuery·p1.00:   1461.715 ms/op

Iteration   2: 1285.554 ±(99.9%) 105.174 ms/op
                 executeQuery·p0.00:   1235.223 ms/op
                 executeQuery·p0.50:   1271.923 ms/op
                 executeQuery·p0.90:   1382.023 ms/op
                 executeQuery·p0.95:   1382.023 ms/op
                 executeQuery·p0.99:   1382.023 ms/op
                 executeQuery·p0.999:  1382.023 ms/op
                 executeQuery·p0.9999: 1382.023 ms/op
                 executeQuery·p1.00:   1382.023 ms/op

Iteration   3: 1310.720 ±(99.9%) 264.310 ms/op
                 executeQuery·p0.00:   1151.336 ms/op
                 executeQuery·p0.50:   1324.351 ms/op
                 executeQuery·p0.90:   1514.144 ms/op
                 executeQuery·p0.95:   1514.144 ms/op
                 executeQuery·p0.99:   1514.144 ms/op
                 executeQuery·p0.999:  1514.144 ms/op
                 executeQuery·p0.9999: 1514.144 ms/op
                 executeQuery·p1.00:   1514.144 ms/op

Iteration   4: 1258.291 ±(99.9%) 170.912 ms/op
                 executeQuery·p0.00:   1136.656 ms/op
                 executeQuery·p0.50:   1277.166 ms/op
                 executeQuery·p0.90:   1421.869 ms/op
                 executeQuery·p0.95:   1421.869 ms/op
                 executeQuery·p0.99:   1421.869 ms/op
                 executeQuery·p0.999:  1421.869 ms/op
                 executeQuery·p0.9999: 1421.869 ms/op
                 executeQuery·p1.00:   1421.869 ms/op

Iteration   5: 1302.331 ±(99.9%) 232.928 ms/op
                 executeQuery·p0.00:   1147.142 ms/op
                 executeQuery·p0.50:   1323.303 ms/op
                 executeQuery·p0.90:   1472.201 ms/op
                 executeQuery·p0.95:   1472.201 ms/op
                 executeQuery·p0.99:   1472.201 ms/op
                 executeQuery·p0.999:  1472.201 ms/op
                 executeQuery·p0.9999: 1472.201 ms/op
                 executeQuery·p1.00:   1472.201 ms/op


# Run progress: 0.31% complete, ETA 09:32:14
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1397.902 ±(99.9%) 288.658 ms/op
# Warmup Iteration   2: 1289.748 ±(99.9%) 69.977 ms/op
# Warmup Iteration   3: 1272.185 ±(99.9%) 129.414 ms/op
# Warmup Iteration   4: 1286.078 ±(99.9%) 166.125 ms/op
# Warmup Iteration   5: 1287.389 ±(99.9%) 269.818 ms/op
Iteration   1: 1258.553 ±(99.9%) 180.855 ms/op
                 executeQuery·p0.00:   1132.462 ms/op
                 executeQuery·p0.50:   1258.291 ms/op
                 executeQuery·p0.90:   1402.995 ms/op
                 executeQuery·p0.95:   1402.995 ms/op
                 executeQuery·p0.99:   1402.995 ms/op
                 executeQuery·p0.999:  1402.995 ms/op
                 executeQuery·p0.9999: 1402.995 ms/op
                 executeQuery·p1.00:   1402.995 ms/op

Iteration   2: 1277.952 ±(99.9%) 145.458 ms/op
                 executeQuery·p0.00:   1172.308 ms/op
                 executeQuery·p0.50:   1284.506 ms/op
                 executeQuery·p0.90:   1400.898 ms/op
                 executeQuery·p0.95:   1400.898 ms/op
                 executeQuery·p0.99:   1400.898 ms/op
                 executeQuery·p0.999:  1400.898 ms/op
                 executeQuery·p0.9999: 1400.898 ms/op
                 executeQuery·p1.00:   1400.898 ms/op

Iteration   3: 1261.175 ±(99.9%) 101.074 ms/op
                 executeQuery·p0.00:   1178.599 ms/op
                 executeQuery·p0.50:   1270.874 ms/op
                 executeQuery·p0.90:   1306.526 ms/op
                 executeQuery·p0.95:   1306.526 ms/op
                 executeQuery·p0.99:   1306.526 ms/op
                 executeQuery·p0.999:  1306.526 ms/op
                 executeQuery·p0.9999: 1306.526 ms/op
                 executeQuery·p1.00:   1306.526 ms/op

Iteration   4: 1282.671 ±(99.9%) 161.173 ms/op
                 executeQuery·p0.00:   1166.017 ms/op
                 executeQuery·p0.50:   1277.166 ms/op
                 executeQuery·p0.90:   1402.995 ms/op
                 executeQuery·p0.95:   1402.995 ms/op
                 executeQuery·p0.99:   1402.995 ms/op
                 executeQuery·p0.999:  1402.995 ms/op
                 executeQuery·p0.9999: 1402.995 ms/op
                 executeQuery·p1.00:   1402.995 ms/op

Iteration   5: 1304.166 ±(99.9%) 196.580 ms/op
                 executeQuery·p0.00:   1176.502 ms/op
                 executeQuery·p0.50:   1327.497 ms/op
                 executeQuery·p0.90:   1426.063 ms/op
                 executeQuery·p0.95:   1426.063 ms/op
                 executeQuery·p0.99:   1426.063 ms/op
                 executeQuery·p0.999:  1426.063 ms/op
                 executeQuery·p0.9999: 1426.063 ms/op
                 executeQuery·p1.00:   1426.063 ms/op


# Run progress: 0.63% complete, ETA 09:27:47
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1383.521 ±(99.9%) 274.988 ms/op
# Warmup Iteration   2: 1308.623 ±(99.9%) 178.781 ms/op
# Warmup Iteration   3: 1283.457 ±(99.9%) 112.292 ms/op
# Warmup Iteration   4: 1270.612 ±(99.9%) 166.203 ms/op
# Warmup Iteration   5: 1308.623 ±(99.9%) 175.317 ms/op
Iteration   1: 1275.068 ±(99.9%) 81.726 ms/op
                 executeQuery·p0.00:   1180.697 ms/op
                 executeQuery·p0.50:   1279.263 ms/op
                 executeQuery·p0.90:   1317.011 ms/op
                 executeQuery·p0.95:   1317.011 ms/op
                 executeQuery·p0.99:   1317.011 ms/op
                 executeQuery·p0.999:  1317.011 ms/op
                 executeQuery·p0.9999: 1317.011 ms/op
                 executeQuery·p1.00:   1317.011 ms/op

Iteration   2: 1294.991 ±(99.9%) 66.924 ms/op
                 executeQuery·p0.00:   1224.737 ms/op
                 executeQuery·p0.50:   1297.089 ms/op
                 executeQuery·p0.90:   1337.983 ms/op
                 executeQuery·p0.95:   1337.983 ms/op
                 executeQuery·p0.99:   1337.983 ms/op
                 executeQuery·p0.999:  1337.983 ms/op
                 executeQuery·p0.9999: 1337.983 ms/op
                 executeQuery·p1.00:   1337.983 ms/op

Iteration   3: 1304.166 ±(99.9%) 62.503 ms/op
                 executeQuery·p0.00:   1262.486 ms/op
                 executeQuery·p0.50:   1307.574 ms/op
                 executeQuery·p0.90:   1348.469 ms/op
                 executeQuery·p0.95:   1348.469 ms/op
                 executeQuery·p0.99:   1348.469 ms/op
                 executeQuery·p0.999:  1348.469 ms/op
                 executeQuery·p0.9999: 1348.469 ms/op
                 executeQuery·p1.00:   1348.469 ms/op

Iteration   4: 1284.506 ±(99.9%) 171.650 ms/op
                 executeQuery·p0.00:   1130.365 ms/op
                 executeQuery·p0.50:   1308.623 ms/op
                 executeQuery·p0.90:   1407.189 ms/op
                 executeQuery·p0.95:   1407.189 ms/op
                 executeQuery·p0.99:   1407.189 ms/op
                 executeQuery·p0.999:  1407.189 ms/op
                 executeQuery·p0.9999: 1407.189 ms/op
                 executeQuery·p1.00:   1407.189 ms/op

Iteration   5: 1281.098 ±(99.9%) 98.554 ms/op
                 executeQuery·p0.00:   1212.154 ms/op
                 executeQuery·p0.50:   1275.068 ms/op
                 executeQuery·p0.90:   1348.469 ms/op
                 executeQuery·p0.95:   1348.469 ms/op
                 executeQuery·p0.99:   1348.469 ms/op
                 executeQuery·p0.999:  1348.469 ms/op
                 executeQuery·p0.9999: 1348.469 ms/op
                 executeQuery·p1.00:   1348.469 ms/op


# Run progress: 0.94% complete, ETA 09:25:49
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1393.707 ±(99.9%) 295.821 ms/op
# Warmup Iteration   2: 1313.341 ±(99.9%) 77.566 ms/op
# Warmup Iteration   3: 1318.322 ±(99.9%) 183.008 ms/op
# Warmup Iteration   4: 1271.398 ±(99.9%) 183.745 ms/op
# Warmup Iteration   5: 1291.846 ±(99.9%) 227.995 ms/op
Iteration   1: 1307.050 ±(99.9%) 143.467 ms/op
                 executeQuery·p0.00:   1218.445 ms/op
                 executeQuery·p0.50:   1298.137 ms/op
                 executeQuery·p0.90:   1451.229 ms/op
                 executeQuery·p0.95:   1451.229 ms/op
                 executeQuery·p0.99:   1451.229 ms/op
                 executeQuery·p0.999:  1451.229 ms/op
                 executeQuery·p0.9999: 1451.229 ms/op
                 executeQuery·p1.00:   1451.229 ms/op

Iteration   2: 1288.438 ±(99.9%) 32.500 ms/op
                 executeQuery·p0.00:   1260.388 ms/op
                 executeQuery·p0.50:   1288.700 ms/op
                 executeQuery·p0.90:   1310.720 ms/op
                 executeQuery·p0.95:   1310.720 ms/op
                 executeQuery·p0.99:   1310.720 ms/op
                 executeQuery·p0.999:  1310.720 ms/op
                 executeQuery·p0.9999: 1310.720 ms/op
                 executeQuery·p1.00:   1310.720 ms/op

Iteration   3: 1296.826 ±(99.9%) 175.931 ms/op
                 executeQuery·p0.00:   1142.948 ms/op
                 executeQuery·p0.50:   1324.351 ms/op
                 executeQuery·p0.90:   1423.966 ms/op
                 executeQuery·p0.95:   1423.966 ms/op
                 executeQuery·p0.99:   1423.966 ms/op
                 executeQuery·p0.999:  1423.966 ms/op
                 executeQuery·p0.9999: 1423.966 ms/op
                 executeQuery·p1.00:   1423.966 ms/op

Iteration   4: 1296.564 ±(99.9%) 89.960 ms/op
                 executeQuery·p0.00:   1184.891 ms/op
                 executeQuery·p0.50:   1305.477 ms/op
                 executeQuery·p0.90:   1331.692 ms/op
                 executeQuery·p0.95:   1331.692 ms/op
                 executeQuery·p0.99:   1331.692 ms/op
                 executeQuery·p0.999:  1331.692 ms/op
                 executeQuery·p0.9999: 1331.692 ms/op
                 executeQuery·p1.00:   1331.692 ms/op

Iteration   5: 1306.001 ±(99.9%) 76.613 ms/op
                 executeQuery·p0.00:   1226.834 ms/op
                 executeQuery·p0.50:   1307.574 ms/op
                 executeQuery·p0.90:   1352.663 ms/op
                 executeQuery·p0.95:   1352.663 ms/op
                 executeQuery·p0.99:   1352.663 ms/op
                 executeQuery·p0.999:  1352.663 ms/op
                 executeQuery·p0.9999: 1352.663 ms/op
                 executeQuery·p1.00:   1352.663 ms/op


# Run progress: 1.25% complete, ETA 09:24:52
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1396.703 ±(99.9%) 203.338 ms/op
# Warmup Iteration   2: 1301.807 ±(99.9%) 102.581 ms/op
# Warmup Iteration   3: 1293.418 ±(99.9%) 153.312 ms/op
# Warmup Iteration   4: 1287.127 ±(99.9%) 198.479 ms/op
# Warmup Iteration   5: 1244.922 ±(99.9%) 168.679 ms/op
Iteration   1: 1313.604 ±(99.9%) 70.433 ms/op
                 executeQuery·p0.00:   1264.583 ms/op
                 executeQuery·p0.50:   1318.060 ms/op
                 executeQuery·p0.90:   1356.857 ms/op
                 executeQuery·p0.95:   1356.857 ms/op
                 executeQuery·p0.99:   1356.857 ms/op
                 executeQuery·p0.999:  1356.857 ms/op
                 executeQuery·p0.9999: 1356.857 ms/op
                 executeQuery·p1.00:   1356.857 ms/op

Iteration   2: 1291.583 ±(99.9%) 115.964 ms/op
                 executeQuery·p0.00:   1222.640 ms/op
                 executeQuery·p0.50:   1271.923 ms/op
                 executeQuery·p0.90:   1382.023 ms/op
                 executeQuery·p0.95:   1382.023 ms/op
                 executeQuery·p0.99:   1382.023 ms/op
                 executeQuery·p0.999:  1382.023 ms/op
                 executeQuery·p0.9999: 1382.023 ms/op
                 executeQuery·p1.00:   1382.023 ms/op

Iteration   3: 1292.108 ±(99.9%) 112.465 ms/op
                 executeQuery·p0.00:   1170.211 ms/op
                 executeQuery·p0.50:   1290.797 ms/op
                 executeQuery·p0.90:   1356.857 ms/op
                 executeQuery·p0.95:   1356.857 ms/op
                 executeQuery·p0.99:   1356.857 ms/op
                 executeQuery·p0.999:  1356.857 ms/op
                 executeQuery·p0.9999: 1356.857 ms/op
                 executeQuery·p1.00:   1356.857 ms/op

Iteration   4: 1283.457 ±(99.9%) 227.147 ms/op
                 executeQuery·p0.00:   1124.073 ms/op
                 executeQuery·p0.50:   1284.506 ms/op
                 executeQuery·p0.90:   1470.104 ms/op
                 executeQuery·p0.95:   1470.104 ms/op
                 executeQuery·p0.99:   1470.104 ms/op
                 executeQuery·p0.999:  1470.104 ms/op
                 executeQuery·p0.9999: 1470.104 ms/op
                 executeQuery·p1.00:   1470.104 ms/op

Iteration   5: 1280.836 ±(99.9%) 154.550 ms/op
                 executeQuery·p0.00:   1157.628 ms/op
                 executeQuery·p0.50:   1271.923 ms/op
                 executeQuery·p0.90:   1438.646 ms/op
                 executeQuery·p0.95:   1438.646 ms/op
                 executeQuery·p0.99:   1438.646 ms/op
                 executeQuery·p0.999:  1438.646 ms/op
                 executeQuery·p0.9999: 1438.646 ms/op
                 executeQuery·p1.00:   1438.646 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 200
  mean =   1290.053 ±(99.9%) 17.409 ms/op

  Histogram, ms/op:
    [1100.000, 1150.000) = 6 
    [1150.000, 1200.000) = 24 
    [1200.000, 1250.000) = 14 
    [1250.000, 1300.000) = 66 
    [1300.000, 1350.000) = 56 
    [1350.000, 1400.000) = 17 
    [1400.000, 1450.000) = 12 
    [1450.000, 1500.000) = 4 
    [1500.000, 1550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1124.073 ms/op
     p(50.0000) =   1291.846 ms/op
     p(90.0000) =   1382.023 ms/op
     p(95.0000) =   1421.869 ms/op
     p(99.0000) =   1472.180 ms/op
     p(99.9000) =   1514.144 ms/op
     p(99.9900) =   1514.144 ms/op
     p(99.9990) =   1514.144 ms/op
     p(99.9999) =   1514.144 ms/op
    p(100.0000) =   1514.144 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4)

# Run progress: 1.56% complete, ETA 09:22:58
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1410.185 ±(99.9%) 319.752 ms/op
# Warmup Iteration   2: 1321.730 ±(99.9%) 136.494 ms/op
# Warmup Iteration   3: 1300.234 ±(99.9%) 121.639 ms/op
# Warmup Iteration   4: 1287.651 ±(99.9%) 185.366 ms/op
# Warmup Iteration   5: 1301.283 ±(99.9%) 167.121 ms/op
Iteration   1: 1324.351 ±(99.9%) 134.361 ms/op
                 executeQuery·p0.00:   1281.360 ms/op
                 executeQuery·p0.50:   1289.748 ms/op
                 executeQuery·p0.90:   1484.784 ms/op
                 executeQuery·p0.95:   1484.784 ms/op
                 executeQuery·p0.99:   1484.784 ms/op
                 executeQuery·p0.999:  1484.784 ms/op
                 executeQuery·p0.9999: 1484.784 ms/op
                 executeQuery·p1.00:   1484.784 ms/op

Iteration   2: 1302.594 ±(99.9%) 239.006 ms/op
                 executeQuery·p0.00:   1155.531 ms/op
                 executeQuery·p0.50:   1303.380 ms/op
                 executeQuery·p0.90:   1482.686 ms/op
                 executeQuery·p0.95:   1482.686 ms/op
                 executeQuery·p0.99:   1482.686 ms/op
                 executeQuery·p0.999:  1482.686 ms/op
                 executeQuery·p0.9999: 1482.686 ms/op
                 executeQuery·p1.00:   1482.686 ms/op

Iteration   3: 1292.370 ±(99.9%) 98.841 ms/op
                 executeQuery·p0.00:   1201.668 ms/op
                 executeQuery·p0.50:   1304.429 ms/op
                 executeQuery·p0.90:   1342.177 ms/op
                 executeQuery·p0.95:   1342.177 ms/op
                 executeQuery·p0.99:   1342.177 ms/op
                 executeQuery·p0.999:  1342.177 ms/op
                 executeQuery·p0.9999: 1342.177 ms/op
                 executeQuery·p1.00:   1342.177 ms/op

Iteration   4: 1333.527 ±(99.9%) 128.587 ms/op
                 executeQuery·p0.00:   1203.765 ms/op
                 executeQuery·p0.50:   1348.469 ms/op
                 executeQuery·p0.90:   1432.355 ms/op
                 executeQuery·p0.95:   1432.355 ms/op
                 executeQuery·p0.99:   1432.355 ms/op
                 executeQuery·p0.999:  1432.355 ms/op
                 executeQuery·p0.9999: 1432.355 ms/op
                 executeQuery·p1.00:   1432.355 ms/op

Iteration   5: 1310.720 ±(99.9%) 107.378 ms/op
                 executeQuery·p0.00:   1195.377 ms/op
                 executeQuery·p0.50:   1311.769 ms/op
                 executeQuery·p0.90:   1384.120 ms/op
                 executeQuery·p0.95:   1384.120 ms/op
                 executeQuery·p0.99:   1384.120 ms/op
                 executeQuery·p0.999:  1384.120 ms/op
                 executeQuery·p0.9999: 1384.120 ms/op
                 executeQuery·p1.00:   1384.120 ms/op


# Run progress: 1.88% complete, ETA 09:22:24
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1426.663 ±(99.9%) 192.280 ms/op
# Warmup Iteration   2: 1320.419 ±(99.9%) 122.015 ms/op
# Warmup Iteration   3: 1324.614 ±(99.9%) 159.108 ms/op
# Warmup Iteration   4: 1295.516 ±(99.9%) 195.823 ms/op
# Warmup Iteration   5: 1316.225 ±(99.9%) 167.669 ms/op
Iteration   1: 1317.274 ±(99.9%) 129.423 ms/op
                 executeQuery·p0.00:   1207.960 ms/op
                 executeQuery·p0.50:   1325.400 ms/op
                 executeQuery·p0.90:   1421.869 ms/op
                 executeQuery·p0.95:   1421.869 ms/op
                 executeQuery·p0.99:   1421.869 ms/op
                 executeQuery·p0.999:  1421.869 ms/op
                 executeQuery·p0.9999: 1421.869 ms/op
                 executeQuery·p1.00:   1421.869 ms/op

Iteration   2: 1277.952 ±(99.9%) 199.819 ms/op
                 executeQuery·p0.00:   1163.919 ms/op
                 executeQuery·p0.50:   1272.971 ms/op
                 executeQuery·p0.90:   1493.172 ms/op
                 executeQuery·p0.95:   1493.172 ms/op
                 executeQuery·p0.99:   1493.172 ms/op
                 executeQuery·p0.999:  1493.172 ms/op
                 executeQuery·p0.9999: 1493.172 ms/op
                 executeQuery·p1.00:   1493.172 ms/op

Iteration   3: 1321.206 ±(99.9%) 156.738 ms/op
                 executeQuery·p0.00:   1212.154 ms/op
                 executeQuery·p0.50:   1320.157 ms/op
                 executeQuery·p0.90:   1474.298 ms/op
                 executeQuery·p0.95:   1474.298 ms/op
                 executeQuery·p0.99:   1474.298 ms/op
                 executeQuery·p0.999:  1474.298 ms/op
                 executeQuery·p0.9999: 1474.298 ms/op
                 executeQuery·p1.00:   1474.298 ms/op

Iteration   4: 1307.836 ±(99.9%) 88.238 ms/op
                 executeQuery·p0.00:   1258.291 ms/op
                 executeQuery·p0.50:   1299.186 ms/op
                 executeQuery·p0.90:   1386.217 ms/op
                 executeQuery·p0.95:   1386.217 ms/op
                 executeQuery·p0.99:   1386.217 ms/op
                 executeQuery·p0.999:  1386.217 ms/op
                 executeQuery·p0.9999: 1386.217 ms/op
                 executeQuery·p1.00:   1386.217 ms/op

Iteration   5: 1311.769 ±(99.9%) 62.780 ms/op
                 executeQuery·p0.00:   1254.097 ms/op
                 executeQuery·p0.50:   1312.817 ms/op
                 executeQuery·p0.90:   1352.663 ms/op
                 executeQuery·p0.95:   1352.663 ms/op
                 executeQuery·p0.99:   1352.663 ms/op
                 executeQuery·p0.999:  1352.663 ms/op
                 executeQuery·p0.9999: 1352.663 ms/op
                 executeQuery·p1.00:   1352.663 ms/op


# Run progress: 2.19% complete, ETA 09:21:36
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1426.063 ±(99.9%) 199.311 ms/op
# Warmup Iteration   2: 1329.332 ±(99.9%) 178.284 ms/op
# Warmup Iteration   3: 1304.429 ±(99.9%) 211.197 ms/op
# Warmup Iteration   4: 1306.526 ±(99.9%) 195.861 ms/op
# Warmup Iteration   5: 1334.313 ±(99.9%) 239.239 ms/op
Iteration   1: 1282.146 ±(99.9%) 140.723 ms/op
                 executeQuery·p0.00:   1153.434 ms/op
                 executeQuery·p0.50:   1302.331 ms/op
                 executeQuery·p0.90:   1356.857 ms/op
                 executeQuery·p0.95:   1356.857 ms/op
                 executeQuery·p0.99:   1356.857 ms/op
                 executeQuery·p0.999:  1356.857 ms/op
                 executeQuery·p0.9999: 1356.857 ms/op
                 executeQuery·p1.00:   1356.857 ms/op

Iteration   2: 1367.605 ±(99.9%) 178.568 ms/op
                 executeQuery·p0.00:   1231.028 ms/op
                 executeQuery·p0.50:   1363.149 ms/op
                 executeQuery·p0.90:   1499.464 ms/op
                 executeQuery·p0.95:   1499.464 ms/op
                 executeQuery·p0.99:   1499.464 ms/op
                 executeQuery·p0.999:  1499.464 ms/op
                 executeQuery·p0.9999: 1499.464 ms/op
                 executeQuery·p1.00:   1499.464 ms/op

Iteration   3: 1343.226 ±(99.9%) 118.889 ms/op
                 executeQuery·p0.00:   1222.640 ms/op
                 executeQuery·p0.50:   1367.343 ms/op
                 executeQuery·p0.90:   1413.480 ms/op
                 executeQuery·p0.95:   1413.480 ms/op
                 executeQuery·p0.99:   1413.480 ms/op
                 executeQuery·p0.999:  1413.480 ms/op
                 executeQuery·p0.9999: 1413.480 ms/op
                 executeQuery·p1.00:   1413.480 ms/op

Iteration   4: 1340.604 ±(99.9%) 119.635 ms/op
                 executeQuery·p0.00:   1222.640 ms/op
                 executeQuery·p0.50:   1333.789 ms/op
                 executeQuery·p0.90:   1432.355 ms/op
                 executeQuery·p0.95:   1432.355 ms/op
                 executeQuery·p0.99:   1432.355 ms/op
                 executeQuery·p0.999:  1432.355 ms/op
                 executeQuery·p0.9999: 1432.355 ms/op
                 executeQuery·p1.00:   1432.355 ms/op

Iteration   5: 1330.381 ±(99.9%) 63.830 ms/op
                 executeQuery·p0.00:   1264.583 ms/op
                 executeQuery·p0.50:   1331.692 ms/op
                 executeQuery·p0.90:   1386.217 ms/op
                 executeQuery·p0.95:   1386.217 ms/op
                 executeQuery·p0.99:   1386.217 ms/op
                 executeQuery·p0.999:  1386.217 ms/op
                 executeQuery·p0.9999: 1386.217 ms/op
                 executeQuery·p1.00:   1386.217 ms/op


# Run progress: 2.50% complete, ETA 09:21:24
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1398.501 ±(99.9%) 255.484 ms/op
# Warmup Iteration   2: 1305.739 ±(99.9%) 137.753 ms/op
# Warmup Iteration   3: 1330.381 ±(99.9%) 177.115 ms/op
# Warmup Iteration   4: 1300.759 ±(99.9%) 90.444 ms/op
# Warmup Iteration   5: 1335.362 ±(99.9%) 182.011 ms/op
Iteration   1: 1317.798 ±(99.9%) 156.238 ms/op
                 executeQuery·p0.00:   1174.405 ms/op
                 executeQuery·p0.50:   1331.692 ms/op
                 executeQuery·p0.90:   1457.521 ms/op
                 executeQuery·p0.95:   1457.521 ms/op
                 executeQuery·p0.99:   1457.521 ms/op
                 executeQuery·p0.999:  1457.521 ms/op
                 executeQuery·p0.9999: 1457.521 ms/op
                 executeQuery·p1.00:   1457.521 ms/op

Iteration   2: 1288.700 ±(99.9%) 133.039 ms/op
                 executeQuery·p0.00:   1163.919 ms/op
                 executeQuery·p0.50:   1298.137 ms/op
                 executeQuery·p0.90:   1400.898 ms/op
                 executeQuery·p0.95:   1400.898 ms/op
                 executeQuery·p0.99:   1400.898 ms/op
                 executeQuery·p0.999:  1400.898 ms/op
                 executeQuery·p0.9999: 1400.898 ms/op
                 executeQuery·p1.00:   1400.898 ms/op

Iteration   3: 1319.109 ±(99.9%) 99.795 ms/op
                 executeQuery·p0.00:   1214.251 ms/op
                 executeQuery·p0.50:   1325.400 ms/op
                 executeQuery·p0.90:   1375.732 ms/op
                 executeQuery·p0.95:   1375.732 ms/op
                 executeQuery·p0.99:   1375.732 ms/op
                 executeQuery·p0.999:  1375.732 ms/op
                 executeQuery·p0.9999: 1375.732 ms/op
                 executeQuery·p1.00:   1375.732 ms/op

Iteration   4: 1327.235 ±(99.9%) 108.494 ms/op
                 executeQuery·p0.00:   1205.862 ms/op
                 executeQuery·p0.50:   1330.643 ms/op
                 executeQuery·p0.90:   1396.703 ms/op
                 executeQuery·p0.95:   1396.703 ms/op
                 executeQuery·p0.99:   1396.703 ms/op
                 executeQuery·p0.999:  1396.703 ms/op
                 executeQuery·p0.9999: 1396.703 ms/op
                 executeQuery·p1.00:   1396.703 ms/op

Iteration   5: 1316.749 ±(99.9%) 81.259 ms/op
                 executeQuery·p0.00:   1237.320 ms/op
                 executeQuery·p0.50:   1334.837 ms/op
                 executeQuery·p0.90:   1356.857 ms/op
                 executeQuery·p0.95:   1356.857 ms/op
                 executeQuery·p0.99:   1356.857 ms/op
                 executeQuery·p0.999:  1356.857 ms/op
                 executeQuery·p0.9999: 1356.857 ms/op
                 executeQuery·p1.00:   1356.857 ms/op


# Run progress: 2.81% complete, ETA 09:20:09
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1383.222 ±(99.9%) 197.491 ms/op
# Warmup Iteration   2: 1329.332 ±(99.9%) 170.218 ms/op
# Warmup Iteration   3: 1313.341 ±(99.9%) 134.015 ms/op
# Warmup Iteration   4: 1307.574 ±(99.9%) 129.025 ms/op
# Warmup Iteration   5: 1282.933 ±(99.9%) 185.548 ms/op
Iteration   1: 1359.479 ±(99.9%) 101.092 ms/op
                 executeQuery·p0.00:   1298.137 ms/op
                 executeQuery·p0.50:   1350.566 ms/op
                 executeQuery·p0.90:   1470.104 ms/op
                 executeQuery·p0.95:   1470.104 ms/op
                 executeQuery·p0.99:   1470.104 ms/op
                 executeQuery·p0.999:  1470.104 ms/op
                 executeQuery·p0.9999: 1470.104 ms/op
                 executeQuery·p1.00:   1470.104 ms/op

Iteration   2: 1303.118 ±(99.9%) 88.550 ms/op
                 executeQuery·p0.00:   1210.057 ms/op
                 executeQuery·p0.50:   1302.331 ms/op
                 executeQuery·p0.90:   1371.537 ms/op
                 executeQuery·p0.95:   1371.537 ms/op
                 executeQuery·p0.99:   1371.537 ms/op
                 executeQuery·p0.999:  1371.537 ms/op
                 executeQuery·p0.9999: 1371.537 ms/op
                 executeQuery·p1.00:   1371.537 ms/op

Iteration   3: 1314.914 ±(99.9%) 134.737 ms/op
                 executeQuery·p0.00:   1214.251 ms/op
                 executeQuery·p0.50:   1329.594 ms/op
                 executeQuery·p0.90:   1432.355 ms/op
                 executeQuery·p0.95:   1432.355 ms/op
                 executeQuery·p0.99:   1432.355 ms/op
                 executeQuery·p0.999:  1432.355 ms/op
                 executeQuery·p0.9999: 1432.355 ms/op
                 executeQuery·p1.00:   1432.355 ms/op

Iteration   4: 1309.147 ±(99.9%) 103.960 ms/op
                 executeQuery·p0.00:   1216.348 ms/op
                 executeQuery·p0.50:   1294.991 ms/op
                 executeQuery·p0.90:   1392.509 ms/op
                 executeQuery·p0.95:   1392.509 ms/op
                 executeQuery·p0.99:   1392.509 ms/op
                 executeQuery·p0.999:  1392.509 ms/op
                 executeQuery·p0.9999: 1392.509 ms/op
                 executeQuery·p1.00:   1392.509 ms/op

Iteration   5: 1323.041 ±(99.9%) 247.967 ms/op
                 executeQuery·p0.00:   1151.336 ms/op
                 executeQuery·p0.50:   1328.546 ms/op
                 executeQuery·p0.90:   1528.824 ms/op
                 executeQuery·p0.95:   1528.824 ms/op
                 executeQuery·p0.99:   1528.824 ms/op
                 executeQuery·p0.999:  1528.824 ms/op
                 executeQuery·p0.9999: 1528.824 ms/op
                 executeQuery·p1.00:   1528.824 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 200
  mean =   1317.714 ±(99.9%) 16.630 ms/op

  Histogram, ms/op:
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 11 
    [1200.000, 1250.000) = 21 
    [1250.000, 1300.000) = 37 
    [1300.000, 1350.000) = 76 
    [1350.000, 1400.000) = 36 
    [1400.000, 1450.000) = 9 
    [1450.000, 1500.000) = 9 
    [1500.000, 1550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1151.336 ms/op
     p(50.0000) =   1321.206 ms/op
     p(90.0000) =   1396.284 ms/op
     p(95.0000) =   1450.915 ms/op
     p(99.0000) =   1499.401 ms/op
     p(99.9000) =   1528.824 ms/op
     p(99.9900) =   1528.824 ms/op
     p(99.9990) =   1528.824 ms/op
     p(99.9999) =   1528.824 ms/op
    p(100.0000) =   1528.824 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6)

# Run progress: 3.13% complete, ETA 09:18:44
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1463.812 ±(99.9%) 340.587 ms/op
# Warmup Iteration   2: 1362.100 ±(99.9%) 142.153 ms/op
# Warmup Iteration   3: 1339.032 ±(99.9%) 167.176 ms/op
# Warmup Iteration   4: 1330.119 ±(99.9%) 133.809 ms/op
# Warmup Iteration   5: 1358.692 ±(99.9%) 120.051 ms/op
Iteration   1: 1349.255 ±(99.9%) 65.464 ms/op
                 executeQuery·p0.00:   1319.109 ms/op
                 executeQuery·p0.50:   1339.032 ms/op
                 executeQuery·p0.90:   1423.966 ms/op
                 executeQuery·p0.95:   1423.966 ms/op
                 executeQuery·p0.99:   1423.966 ms/op
                 executeQuery·p0.999:  1423.966 ms/op
                 executeQuery·p0.9999: 1423.966 ms/op
                 executeQuery·p1.00:   1423.966 ms/op

Iteration   2: 1355.022 ±(99.9%) 111.459 ms/op
                 executeQuery·p0.00:   1302.331 ms/op
                 executeQuery·p0.50:   1336.934 ms/op
                 executeQuery·p0.90:   1480.589 ms/op
                 executeQuery·p0.95:   1480.589 ms/op
                 executeQuery·p0.99:   1480.589 ms/op
                 executeQuery·p0.999:  1480.589 ms/op
                 executeQuery·p0.9999: 1480.589 ms/op
                 executeQuery·p1.00:   1480.589 ms/op

Iteration   3: 1339.032 ±(99.9%) 115.399 ms/op
                 executeQuery·p0.00:   1266.680 ms/op
                 executeQuery·p0.50:   1347.420 ms/op
                 executeQuery·p0.90:   1449.132 ms/op
                 executeQuery·p0.95:   1449.132 ms/op
                 executeQuery·p0.99:   1449.132 ms/op
                 executeQuery·p0.999:  1449.132 ms/op
                 executeQuery·p0.9999: 1449.132 ms/op
                 executeQuery·p1.00:   1449.132 ms/op

Iteration   4: 1360.265 ±(99.9%) 172.450 ms/op
                 executeQuery·p0.00:   1210.057 ms/op
                 executeQuery·p0.50:   1379.926 ms/op
                 executeQuery·p0.90:   1509.949 ms/op
                 executeQuery·p0.95:   1509.949 ms/op
                 executeQuery·p0.99:   1509.949 ms/op
                 executeQuery·p0.999:  1509.949 ms/op
                 executeQuery·p0.9999: 1509.949 ms/op
                 executeQuery·p1.00:   1509.949 ms/op

Iteration   5: 1320.681 ±(99.9%) 86.445 ms/op
                 executeQuery·p0.00:   1249.903 ms/op
                 executeQuery·p0.50:   1333.789 ms/op
                 executeQuery·p0.90:   1367.343 ms/op
                 executeQuery·p0.95:   1367.343 ms/op
                 executeQuery·p0.99:   1367.343 ms/op
                 executeQuery·p0.999:  1367.343 ms/op
                 executeQuery·p0.9999: 1367.343 ms/op
                 executeQuery·p1.00:   1367.343 ms/op


# Run progress: 3.44% complete, ETA 09:18:33
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1481.488 ±(99.9%) 199.327 ms/op
# Warmup Iteration   2: 1344.799 ±(99.9%) 191.697 ms/op
# Warmup Iteration   3: 1353.449 ±(99.9%) 205.284 ms/op
# Warmup Iteration   4: 1300.234 ±(99.9%) 195.403 ms/op
# Warmup Iteration   5: 1353.187 ±(99.9%) 77.685 ms/op
Iteration   1: 1347.158 ±(99.9%) 65.779 ms/op
                 executeQuery·p0.00:   1296.040 ms/op
                 executeQuery·p0.50:   1339.032 ms/op
                 executeQuery·p0.90:   1402.995 ms/op
                 executeQuery·p0.95:   1402.995 ms/op
                 executeQuery·p0.99:   1402.995 ms/op
                 executeQuery·p0.999:  1402.995 ms/op
                 executeQuery·p0.9999: 1402.995 ms/op
                 executeQuery·p1.00:   1402.995 ms/op

Iteration   2: 1329.594 ±(99.9%) 79.214 ms/op
                 executeQuery·p0.00:   1287.651 ms/op
                 executeQuery·p0.50:   1323.303 ms/op
                 executeQuery·p0.90:   1423.966 ms/op
                 executeQuery·p0.95:   1423.966 ms/op
                 executeQuery·p0.99:   1423.966 ms/op
                 executeQuery·p0.999:  1423.966 ms/op
                 executeQuery·p0.9999: 1423.966 ms/op
                 executeQuery·p1.00:   1423.966 ms/op

Iteration   3: 1323.565 ±(99.9%) 92.421 ms/op
                 executeQuery·p0.00:   1233.125 ms/op
                 executeQuery·p0.50:   1336.934 ms/op
                 executeQuery·p0.90:   1386.217 ms/op
                 executeQuery·p0.95:   1386.217 ms/op
                 executeQuery·p0.99:   1386.217 ms/op
                 executeQuery·p0.999:  1386.217 ms/op
                 executeQuery·p0.9999: 1386.217 ms/op
                 executeQuery·p1.00:   1386.217 ms/op

Iteration   4: 1340.604 ±(99.9%) 110.659 ms/op
                 executeQuery·p0.00:   1287.651 ms/op
                 executeQuery·p0.50:   1314.914 ms/op
                 executeQuery·p0.90:   1426.063 ms/op
                 executeQuery·p0.95:   1426.063 ms/op
                 executeQuery·p0.99:   1426.063 ms/op
                 executeQuery·p0.999:  1426.063 ms/op
                 executeQuery·p0.9999: 1426.063 ms/op
                 executeQuery·p1.00:   1426.063 ms/op

Iteration   5: 1351.090 ±(99.9%) 55.591 ms/op
                 executeQuery·p0.00:   1306.526 ms/op
                 executeQuery·p0.50:   1352.663 ms/op
                 executeQuery·p0.90:   1394.606 ms/op
                 executeQuery·p0.95:   1394.606 ms/op
                 executeQuery·p0.99:   1394.606 ms/op
                 executeQuery·p0.999:  1394.606 ms/op
                 executeQuery·p0.9999: 1394.606 ms/op
                 executeQuery·p1.00:   1394.606 ms/op


# Run progress: 3.75% complete, ETA 09:17:53
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1473.699 ±(99.9%) 365.757 ms/op
# Warmup Iteration   2: 1375.470 ±(99.9%) 90.284 ms/op
# Warmup Iteration   3: 1335.886 ±(99.9%) 142.669 ms/op
# Warmup Iteration   4: 1316.487 ±(99.9%) 99.420 ms/op
# Warmup Iteration   5: 1320.681 ±(99.9%) 95.892 ms/op
Iteration   1: 1349.517 ±(99.9%) 109.496 ms/op
                 executeQuery·p0.00:   1260.388 ms/op
                 executeQuery·p0.50:   1353.712 ms/op
                 executeQuery·p0.90:   1449.132 ms/op
                 executeQuery·p0.95:   1449.132 ms/op
                 executeQuery·p0.99:   1449.132 ms/op
                 executeQuery·p0.999:  1449.132 ms/op
                 executeQuery·p0.9999: 1449.132 ms/op
                 executeQuery·p1.00:   1449.132 ms/op

Iteration   2: 1342.177 ±(99.9%) 233.056 ms/op
                 executeQuery·p0.00:   1210.057 ms/op
                 executeQuery·p0.50:   1307.574 ms/op
                 executeQuery·p0.90:   1499.464 ms/op
                 executeQuery·p0.95:   1499.464 ms/op
                 executeQuery·p0.99:   1499.464 ms/op
                 executeQuery·p0.999:  1499.464 ms/op
                 executeQuery·p0.9999: 1499.464 ms/op
                 executeQuery·p1.00:   1499.464 ms/op

Iteration   3: 1350.042 ±(99.9%) 139.210 ms/op
                 executeQuery·p0.00:   1224.737 ms/op
                 executeQuery·p0.50:   1354.760 ms/op
                 executeQuery·p0.90:   1455.423 ms/op
                 executeQuery·p0.95:   1455.423 ms/op
                 executeQuery·p0.99:   1455.423 ms/op
                 executeQuery·p0.999:  1455.423 ms/op
                 executeQuery·p0.9999: 1455.423 ms/op
                 executeQuery·p1.00:   1455.423 ms/op

Iteration   4: 1334.051 ±(99.9%) 127.690 ms/op
                 executeQuery·p0.00:   1260.388 ms/op
                 executeQuery·p0.50:   1329.594 ms/op
                 executeQuery·p0.90:   1455.423 ms/op
                 executeQuery·p0.95:   1455.423 ms/op
                 executeQuery·p0.99:   1455.423 ms/op
                 executeQuery·p0.999:  1455.423 ms/op
                 executeQuery·p0.9999: 1455.423 ms/op
                 executeQuery·p1.00:   1455.423 ms/op

Iteration   5: 1336.148 ±(99.9%) 56.966 ms/op
                 executeQuery·p0.00:   1270.874 ms/op
                 executeQuery·p0.50:   1344.274 ms/op
                 executeQuery·p0.90:   1363.149 ms/op
                 executeQuery·p0.95:   1363.149 ms/op
                 executeQuery·p0.99:   1363.149 ms/op
                 executeQuery·p0.999:  1363.149 ms/op
                 executeQuery·p0.9999: 1363.149 ms/op
                 executeQuery·p1.00:   1363.149 ms/op


# Run progress: 4.06% complete, ETA 09:17:06
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1435.650 ±(99.9%) 232.015 ms/op
# Warmup Iteration   2: 1350.304 ±(99.9%) 160.294 ms/op
# Warmup Iteration   3: 1359.741 ±(99.9%) 170.898 ms/op
# Warmup Iteration   4: 1348.731 ±(99.9%) 219.520 ms/op
# Warmup Iteration   5: 1311.769 ±(99.9%) 108.442 ms/op
Iteration   1: 1344.012 ±(99.9%) 132.631 ms/op
                 executeQuery·p0.00:   1207.960 ms/op
                 executeQuery·p0.50:   1340.080 ms/op
                 executeQuery·p0.90:   1447.035 ms/op
                 executeQuery·p0.95:   1447.035 ms/op
                 executeQuery·p0.99:   1447.035 ms/op
                 executeQuery·p0.999:  1447.035 ms/op
                 executeQuery·p0.9999: 1447.035 ms/op
                 executeQuery·p1.00:   1447.035 ms/op

Iteration   2: 1347.158 ±(99.9%) 113.774 ms/op
                 executeQuery·p0.00:   1224.737 ms/op
                 executeQuery·p0.50:   1353.712 ms/op
                 executeQuery·p0.90:   1430.258 ms/op
                 executeQuery·p0.95:   1430.258 ms/op
                 executeQuery·p0.99:   1430.258 ms/op
                 executeQuery·p0.999:  1430.258 ms/op
                 executeQuery·p0.9999: 1430.258 ms/op
                 executeQuery·p1.00:   1430.258 ms/op

Iteration   3: 1344.537 ±(99.9%) 107.216 ms/op
                 executeQuery·p0.00:   1258.291 ms/op
                 executeQuery·p0.50:   1349.517 ms/op
                 executeQuery·p0.90:   1413.480 ms/op
                 executeQuery·p0.95:   1413.480 ms/op
                 executeQuery·p0.99:   1413.480 ms/op
                 executeQuery·p0.999:  1413.480 ms/op
                 executeQuery·p0.9999: 1413.480 ms/op
                 executeQuery·p1.00:   1413.480 ms/op

Iteration   4: 1361.052 ±(99.9%) 89.455 ms/op
                 executeQuery·p0.00:   1291.846 ms/op
                 executeQuery·p0.50:   1382.023 ms/op
                 executeQuery·p0.90:   1417.675 ms/op
                 executeQuery·p0.95:   1417.675 ms/op
                 executeQuery·p0.99:   1417.675 ms/op
                 executeQuery·p0.999:  1417.675 ms/op
                 executeQuery·p0.9999: 1417.675 ms/op
                 executeQuery·p1.00:   1417.675 ms/op

Iteration   5: 1324.089 ±(99.9%) 109.955 ms/op
                 executeQuery·p0.00:   1270.874 ms/op
                 executeQuery·p0.50:   1301.283 ms/op
                 executeQuery·p0.90:   1451.229 ms/op
                 executeQuery·p0.95:   1451.229 ms/op
                 executeQuery·p0.99:   1451.229 ms/op
                 executeQuery·p0.999:  1451.229 ms/op
                 executeQuery·p0.9999: 1451.229 ms/op
                 executeQuery·p1.00:   1451.229 ms/op


# Run progress: 4.38% complete, ETA 09:16:10
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1439.845 ±(99.9%) 219.328 ms/op
# Warmup Iteration   2: 1349.517 ±(99.9%) 149.738 ms/op
# Warmup Iteration   3: 1371.800 ±(99.9%) 224.609 ms/op
# Warmup Iteration   4: 1350.042 ±(99.9%) 150.743 ms/op
# Warmup Iteration   5: 1347.158 ±(99.9%) 99.563 ms/op
Iteration   1: 1343.488 ±(99.9%) 67.571 ms/op
                 executeQuery·p0.00:   1285.554 ms/op
                 executeQuery·p0.50:   1345.323 ms/op
                 executeQuery·p0.90:   1402.995 ms/op
                 executeQuery·p0.95:   1402.995 ms/op
                 executeQuery·p0.99:   1402.995 ms/op
                 executeQuery·p0.999:  1402.995 ms/op
                 executeQuery·p0.9999: 1402.995 ms/op
                 executeQuery·p1.00:   1402.995 ms/op

Iteration   2: 1341.915 ±(99.9%) 184.614 ms/op
                 executeQuery·p0.00:   1203.765 ms/op
                 executeQuery·p0.50:   1350.566 ms/op
                 executeQuery·p0.90:   1514.144 ms/op
                 executeQuery·p0.95:   1514.144 ms/op
                 executeQuery·p0.99:   1514.144 ms/op
                 executeQuery·p0.999:  1514.144 ms/op
                 executeQuery·p0.9999: 1514.144 ms/op
                 executeQuery·p1.00:   1514.144 ms/op

Iteration   3: 1346.896 ±(99.9%) 144.568 ms/op
                 executeQuery·p0.00:   1189.085 ms/op
                 executeQuery·p0.50:   1368.392 ms/op
                 executeQuery·p0.90:   1440.743 ms/op
                 executeQuery·p0.95:   1440.743 ms/op
                 executeQuery·p0.99:   1440.743 ms/op
                 executeQuery·p0.999:  1440.743 ms/op
                 executeQuery·p0.9999: 1440.743 ms/op
                 executeQuery·p1.00:   1440.743 ms/op

Iteration   4: 1337.459 ±(99.9%) 106.146 ms/op
                 executeQuery·p0.00:   1258.291 ms/op
                 executeQuery·p0.50:   1358.954 ms/op
                 executeQuery·p0.90:   1409.286 ms/op
                 executeQuery·p0.95:   1409.286 ms/op
                 executeQuery·p0.99:   1409.286 ms/op
                 executeQuery·p0.999:  1409.286 ms/op
                 executeQuery·p0.9999: 1409.286 ms/op
                 executeQuery·p1.00:   1409.286 ms/op

Iteration   5: 1356.857 ±(99.9%) 187.705 ms/op
                 executeQuery·p0.00:   1191.182 ms/op
                 executeQuery·p0.50:   1355.809 ms/op
                 executeQuery·p0.90:   1549.795 ms/op
                 executeQuery·p0.95:   1549.795 ms/op
                 executeQuery·p0.99:   1549.795 ms/op
                 executeQuery·p0.999:  1549.795 ms/op
                 executeQuery·p0.9999: 1549.795 ms/op
                 executeQuery·p1.00:   1549.795 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 200
  mean =   1343.027 ±(99.9%) 14.409 ms/op

  Histogram, ms/op:
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 2 
    [1200.000, 1250.000) = 10 
    [1250.000, 1300.000) = 30 
    [1300.000, 1350.000) = 70 
    [1350.000, 1400.000) = 61 
    [1400.000, 1450.000) = 17 
    [1450.000, 1500.000) = 7 
    [1500.000, 1550.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   1189.085 ms/op
     p(50.0000) =   1340.080 ms/op
     p(90.0000) =   1417.255 ms/op
     p(95.0000) =   1451.124 ms/op
     p(99.0000) =   1514.102 ms/op
     p(99.9000) =   1549.795 ms/op
     p(99.9900) =   1549.795 ms/op
     p(99.9990) =   1549.795 ms/op
     p(99.9999) =   1549.795 ms/op
    p(100.0000) =   1549.795 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8)

# Run progress: 4.69% complete, ETA 09:15:16
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1470.104 ±(99.9%) 256.958 ms/op
# Warmup Iteration   2: 1378.091 ±(99.9%) 123.577 ms/op
# Warmup Iteration   3: 1344.012 ±(99.9%) 66.145 ms/op
# Warmup Iteration   4: 1345.585 ±(99.9%) 74.057 ms/op
# Warmup Iteration   5: 1348.993 ±(99.9%) 126.938 ms/op
Iteration   1: 1349.779 ±(99.9%) 56.703 ms/op
                 executeQuery·p0.00:   1283.457 ms/op
                 executeQuery·p0.50:   1361.052 ms/op
                 executeQuery·p0.90:   1375.732 ms/op
                 executeQuery·p0.95:   1375.732 ms/op
                 executeQuery·p0.99:   1375.732 ms/op
                 executeQuery·p0.999:  1375.732 ms/op
                 executeQuery·p0.9999: 1375.732 ms/op
                 executeQuery·p1.00:   1375.732 ms/op

Iteration   2: 1380.975 ±(99.9%) 81.726 ms/op
                 executeQuery·p0.00:   1296.040 ms/op
                 executeQuery·p0.50:   1389.363 ms/op
                 executeQuery·p0.90:   1434.452 ms/op
                 executeQuery·p0.95:   1434.452 ms/op
                 executeQuery·p0.99:   1434.452 ms/op
                 executeQuery·p0.999:  1434.452 ms/op
                 executeQuery·p0.9999: 1434.452 ms/op
                 executeQuery·p1.00:   1434.452 ms/op

Iteration   3: 1373.110 ±(99.9%) 114.455 ms/op
                 executeQuery·p0.00:   1283.457 ms/op
                 executeQuery·p0.50:   1370.489 ms/op
                 executeQuery·p0.90:   1444.938 ms/op
                 executeQuery·p0.95:   1444.938 ms/op
                 executeQuery·p0.99:   1444.938 ms/op
                 executeQuery·p0.999:  1444.938 ms/op
                 executeQuery·p0.9999: 1444.938 ms/op
                 executeQuery·p1.00:   1444.938 ms/op

Iteration   4: 1347.158 ±(99.9%) 75.774 ms/op
                 executeQuery·p0.00:   1281.360 ms/op
                 executeQuery·p0.50:   1360.003 ms/op
                 executeQuery·p0.90:   1384.120 ms/op
                 executeQuery·p0.95:   1384.120 ms/op
                 executeQuery·p0.99:   1384.120 ms/op
                 executeQuery·p0.999:  1384.120 ms/op
                 executeQuery·p0.9999: 1384.120 ms/op
                 executeQuery·p1.00:   1384.120 ms/op

Iteration   5: 1352.663 ±(99.9%) 193.608 ms/op
                 executeQuery·p0.00:   1245.708 ms/op
                 executeQuery·p0.50:   1315.963 ms/op
                 executeQuery·p0.90:   1551.892 ms/op
                 executeQuery·p0.95:   1551.892 ms/op
                 executeQuery·p0.99:   1551.892 ms/op
                 executeQuery·p0.999:  1551.892 ms/op
                 executeQuery·p0.9999: 1551.892 ms/op
                 executeQuery·p1.00:   1551.892 ms/op


# Run progress: 5.00% complete, ETA 09:14:28
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_463303495 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_463303495(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_463303495> join_map = new Int_Multi_Object_Map<JRT_463303495>();
private final class JRT_346598266 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_346598266(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_346598266> join_map_0 = new Int_Multi_Object_Map<JRT_346598266>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_346598266 left_join_record = new JRT_346598266(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_346598266> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_346598266 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_463303495 left_join_record_0 = new JRT_463303495(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_463303495> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_463303495 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1440.743 ±(99.9%) 270.891 ms/op
# Warmup Iteration   2: 1355.284 ±(99.9%) 150.621 ms/op
# Warmup Iteration   3: 1382.810 ±(99.9%) 154.983 ms/op
# Warmup Iteration   4: 1315.439 ±(99.9%) 131.069 ms/op
# Warmup Iteration   5: 1359.217 ±(99.9%) 198.394 ms/op
Iteration   1: 1358.168 ±(99.9%) 73.591 ms/op
                 executeQuery·p0.00:   1296.040 ms/op
                 executeQuery·p0.50:   1362.100 ms/op
                 executeQuery·p0.90:   1413.480 ms/op
                 executeQuery·p0.95:   1413.480 ms/op
                 executeQuery·p0.99:   1413.480 ms/op
                 executeQuery·p0.999:  1413.480 ms/op
                 executeQuery·p0.9999: 1413.480 ms/op
                 executeQuery·p1.00:   1413.480 ms/op

Iteration   2: 1354.236 ±(99.9%) 115.692 ms/op
                 executeQuery·p0.00:   1275.068 ms/op
                 executeQuery·p0.50:   1352.663 ms/op
                 executeQuery·p0.90:   1474.298 ms/op
                 executeQuery·p0.95:   1474.298 ms/op
                 executeQuery·p0.99:   1474.298 ms/op
                 executeQuery·p0.999:  1474.298 ms/op
                 executeQuery·p0.9999: 1474.298 ms/op
                 executeQuery·p1.00:   1474.298 ms/op

Iteration   3: 1377.042 ±(99.9%) 157.774 ms/op
                 executeQuery·p0.00:   1205.862 ms/op
                 executeQuery·p0.50:   1371.537 ms/op
                 executeQuery·p0.90:   1476.395 ms/op
                 executeQuery·p0.95:   1476.395 ms/op
                 executeQuery·p0.99:   1476.395 ms/op
                 executeQuery·p0.999:  1476.395 ms/op
                 executeQuery·p0.9999: 1476.395 ms/op
                 executeQuery·p1.00:   1476.395 ms/op

Iteration   4: 1382.810 ±(99.9%) 102.965 ms/op
                 executeQuery·p0.00:   1333.789 ms/op
                 executeQuery·p0.50:   1369.440 ms/op
                 executeQuery·p0.90:   1468.006 ms/op
                 executeQuery·p0.95:   1468.006 ms/op
                 executeQuery·p0.99:   1468.006 ms/op
                 executeQuery·p0.999:  1468.006 ms/op
                 executeQuery·p0.9999: 1468.006 ms/op
                 executeQuery·p1.00:   1468.006 ms/op

Iteration   5: 1380.712 ±(99.9%) 161.770 ms/op
                 executeQuery·p0.00:   1249.903 ms/op
                 executeQuery·p0.50:   1363.149 ms/op
                 executeQuery·p0.90:   1543.504 ms/op
                 executeQuery·p0.95:   1543.504 ms/op
                 executeQuery·p0.99:   1543.504 ms/op
                 executeQuery·p0.999:  1543.504 ms/op
                 executeQuery·p0.9999: 1543.504 ms/op
                 executeQuery·p1.00:   1543.504 ms/op


# Run progress: 5.31% complete, ETA 09:13:35
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1471.901 ±(99.9%) 238.410 ms/op
# Warmup Iteration   2: 1394.606 ±(99.9%) 130.838 ms/op
# Warmup Iteration   3: 1371.013 ±(99.9%) 171.137 ms/op
# Warmup Iteration   4: 1406.290 ±(99.9%) 311.816 ms/op
# Warmup Iteration   5: 1357.644 ±(99.9%) 237.391 ms/op
Iteration   1: 1324.351 ±(99.9%) 177.297 ms/op
                 executeQuery·p0.00:   1214.251 ms/op
                 executeQuery·p0.50:   1321.206 ms/op
                 executeQuery·p0.90:   1480.589 ms/op
                 executeQuery·p0.95:   1480.589 ms/op
                 executeQuery·p0.99:   1480.589 ms/op
                 executeQuery·p0.999:  1480.589 ms/op
                 executeQuery·p0.9999: 1480.589 ms/op
                 executeQuery·p1.00:   1480.589 ms/op

Iteration   2: 1372.586 ±(99.9%) 61.074 ms/op
                 executeQuery·p0.00:   1342.177 ms/op
                 executeQuery·p0.50:   1363.149 ms/op
                 executeQuery·p0.90:   1423.966 ms/op
                 executeQuery·p0.95:   1423.966 ms/op
                 executeQuery·p0.99:   1423.966 ms/op
                 executeQuery·p0.999:  1423.966 ms/op
                 executeQuery·p0.9999: 1423.966 ms/op
                 executeQuery·p1.00:   1423.966 ms/op

Iteration   3: 1364.722 ±(99.9%) 137.583 ms/op
                 executeQuery·p0.00:   1241.514 ms/op
                 executeQuery·p0.50:   1370.489 ms/op
                 executeQuery·p0.90:   1449.132 ms/op
                 executeQuery·p0.95:   1449.132 ms/op
                 executeQuery·p0.99:   1449.132 ms/op
                 executeQuery·p0.999:  1449.132 ms/op
                 executeQuery·p0.9999: 1449.132 ms/op
                 executeQuery·p1.00:   1449.132 ms/op

Iteration   4: 1342.177 ±(99.9%) 123.606 ms/op
                 executeQuery·p0.00:   1249.903 ms/op
                 executeQuery·p0.50:   1349.517 ms/op
                 executeQuery·p0.90:   1447.035 ms/op
                 executeQuery·p0.95:   1447.035 ms/op
                 executeQuery·p0.99:   1447.035 ms/op
                 executeQuery·p0.999:  1447.035 ms/op
                 executeQuery·p0.9999: 1447.035 ms/op
                 executeQuery·p1.00:   1447.035 ms/op

Iteration   5: 1357.119 ±(99.9%) 103.065 ms/op
                 executeQuery·p0.00:   1300.234 ms/op
                 executeQuery·p0.50:   1348.469 ms/op
                 executeQuery·p0.90:   1459.618 ms/op
                 executeQuery·p0.95:   1459.618 ms/op
                 executeQuery·p0.99:   1459.618 ms/op
                 executeQuery·p0.999:  1459.618 ms/op
                 executeQuery·p0.9999: 1459.618 ms/op
                 executeQuery·p1.00:   1459.618 ms/op


# Run progress: 5.63% complete, ETA 09:11:57
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1451.828 ±(99.9%) 246.240 ms/op
# Warmup Iteration   2: 1375.732 ±(99.9%) 62.817 ms/op
# Warmup Iteration   3: 1372.848 ±(99.9%) 113.268 ms/op
# Warmup Iteration   4: 1337.983 ±(99.9%) 176.726 ms/op
# Warmup Iteration   5: 1409.286 ±(99.9%) 303.197 ms/op
Iteration   1: 1341.129 ±(99.9%) 211.903 ms/op
                 executeQuery·p0.00:   1205.862 ms/op
                 executeQuery·p0.50:   1358.954 ms/op
                 executeQuery·p0.90:   1461.715 ms/op
                 executeQuery·p0.95:   1461.715 ms/op
                 executeQuery·p0.99:   1461.715 ms/op
                 executeQuery·p0.999:  1461.715 ms/op
                 executeQuery·p0.9999: 1461.715 ms/op
                 executeQuery·p1.00:   1461.715 ms/op

Iteration   2: 1381.761 ±(99.9%) 216.093 ms/op
                 executeQuery·p0.00:   1195.377 ms/op
                 executeQuery·p0.50:   1379.926 ms/op
                 executeQuery·p0.90:   1577.058 ms/op
                 executeQuery·p0.95:   1577.058 ms/op
                 executeQuery·p0.99:   1577.058 ms/op
                 executeQuery·p0.999:  1577.058 ms/op
                 executeQuery·p0.9999: 1577.058 ms/op
                 executeQuery·p1.00:   1577.058 ms/op

Iteration   3: 1362.887 ±(99.9%) 122.775 ms/op
                 executeQuery·p0.00:   1287.651 ms/op
                 executeQuery·p0.50:   1351.614 ms/op
                 executeQuery·p0.90:   1497.367 ms/op
                 executeQuery·p0.95:   1497.367 ms/op
                 executeQuery·p0.99:   1497.367 ms/op
                 executeQuery·p0.999:  1497.367 ms/op
                 executeQuery·p0.9999: 1497.367 ms/op
                 executeQuery·p1.00:   1497.367 ms/op

Iteration   4: 1380.712 ±(99.9%) 58.889 ms/op
                 executeQuery·p0.00:   1333.789 ms/op
                 executeQuery·p0.50:   1372.586 ms/op
                 executeQuery·p0.90:   1432.355 ms/op
                 executeQuery·p0.95:   1432.355 ms/op
                 executeQuery·p0.99:   1432.355 ms/op
                 executeQuery·p0.999:  1432.355 ms/op
                 executeQuery·p0.9999: 1432.355 ms/op
                 executeQuery·p1.00:   1432.355 ms/op

Iteration   5: 1378.877 ±(99.9%) 159.137 ms/op
                 executeQuery·p0.00:   1283.457 ms/op
                 executeQuery·p0.50:   1367.343 ms/op
                 executeQuery·p0.90:   1545.601 ms/op
                 executeQuery·p0.95:   1545.601 ms/op
                 executeQuery·p0.99:   1545.601 ms/op
                 executeQuery·p0.999:  1545.601 ms/op
                 executeQuery·p0.9999: 1545.601 ms/op
                 executeQuery·p1.00:   1545.601 ms/op


# Run progress: 5.94% complete, ETA 09:10:46
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1468.306 ±(99.9%) 399.661 ms/op
# Warmup Iteration   2: 1402.995 ±(99.9%) 187.844 ms/op
# Warmup Iteration   3: 1380.450 ±(99.9%) 237.273 ms/op
# Warmup Iteration   4: 1356.857 ±(99.9%) 111.389 ms/op
# Warmup Iteration   5: 1384.382 ±(99.9%) 135.949 ms/op
Iteration   1: 1382.285 ±(99.9%) 65.936 ms/op
                 executeQuery·p0.00:   1337.983 ms/op
                 executeQuery·p0.50:   1385.169 ms/op
                 executeQuery·p0.90:   1423.966 ms/op
                 executeQuery·p0.95:   1423.966 ms/op
                 executeQuery·p0.99:   1423.966 ms/op
                 executeQuery·p0.999:  1423.966 ms/op
                 executeQuery·p0.9999: 1423.966 ms/op
                 executeQuery·p1.00:   1423.966 ms/op

Iteration   2: 1335.886 ±(99.9%) 185.922 ms/op
                 executeQuery·p0.00:   1218.445 ms/op
                 executeQuery·p0.50:   1339.032 ms/op
                 executeQuery·p0.90:   1514.144 ms/op
                 executeQuery·p0.95:   1514.144 ms/op
                 executeQuery·p0.99:   1514.144 ms/op
                 executeQuery·p0.999:  1514.144 ms/op
                 executeQuery·p0.9999: 1514.144 ms/op
                 executeQuery·p1.00:   1514.144 ms/op

Iteration   3: 1380.450 ±(99.9%) 115.910 ms/op
                 executeQuery·p0.00:   1266.680 ms/op
                 executeQuery·p0.50:   1389.363 ms/op
                 executeQuery·p0.90:   1472.201 ms/op
                 executeQuery·p0.95:   1472.201 ms/op
                 executeQuery·p0.99:   1472.201 ms/op
                 executeQuery·p0.999:  1472.201 ms/op
                 executeQuery·p0.9999: 1472.201 ms/op
                 executeQuery·p1.00:   1472.201 ms/op

Iteration   4: 1397.302 ±(99.9%) 266.975 ms/op
                 executeQuery·p0.00:   1296.040 ms/op
                 executeQuery·p0.50:   1312.817 ms/op
                 executeQuery·p0.90:   1581.253 ms/op
                 executeQuery·p0.95:   1581.253 ms/op
                 executeQuery·p0.99:   1581.253 ms/op
                 executeQuery·p0.999:  1581.253 ms/op
                 executeQuery·p0.9999: 1581.253 ms/op
                 executeQuery·p1.00:   1581.253 ms/op

Iteration   5: 1358.692 ±(99.9%) 56.723 ms/op
                 executeQuery·p0.00:   1314.914 ms/op
                 executeQuery·p0.50:   1360.003 ms/op
                 executeQuery·p0.90:   1392.509 ms/op
                 executeQuery·p0.95:   1392.509 ms/op
                 executeQuery·p0.99:   1392.509 ms/op
                 executeQuery·p0.999:  1392.509 ms/op
                 executeQuery·p0.9999: 1392.509 ms/op
                 executeQuery·p1.00:   1392.509 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 199
  mean =   1364.540 ±(99.9%) 16.373 ms/op

  Histogram, ms/op:
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 1 
    [1200.000, 1250.000) = 12 
    [1250.000, 1300.000) = 18 
    [1300.000, 1350.000) = 49 
    [1350.000, 1400.000) = 68 
    [1400.000, 1450.000) = 31 
    [1450.000, 1500.000) = 13 
    [1500.000, 1550.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =   1195.377 ms/op
     p(50.0000) =   1363.149 ms/op
     p(90.0000) =   1453.326 ms/op
     p(95.0000) =   1476.395 ms/op
     p(99.0000) =   1577.058 ms/op
     p(99.9000) =   1581.253 ms/op
     p(99.9900) =   1581.253 ms/op
     p(99.9990) =   1581.253 ms/op
     p(99.9999) =   1581.253 ms/op
    p(100.0000) =   1581.253 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2)

# Run progress: 6.25% complete, ETA 09:09:12
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_1518599154 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1518599154(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1518599154> join_map = new Int_Multi_Object_Map<JRT_1518599154>();
private final class JRT_1277455202 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1277455202(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1277455202> join_map_0 = new Int_Multi_Object_Map<JRT_1277455202>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1277455202 left_join_record = new JRT_1277455202(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1277455202> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1277455202 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_1518599154 left_join_record_0 = new JRT_1518599154(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_1518599154> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1518599154 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1837.105 ±(99.9%) 368.647 ms/op
# Warmup Iteration   2: 1774.191 ±(99.9%) 150.806 ms/op
# Warmup Iteration   3: 1767.550 ±(99.9%) 250.978 ms/op
# Warmup Iteration   4: 1700.091 ±(99.9%) 247.292 ms/op
# Warmup Iteration   5: 1785.375 ±(99.9%) 281.755 ms/op
Iteration   1: 1715.820 ±(99.9%) 133.401 ms/op
                 executeQuery·p0.00:   1686.110 ms/op
                 executeQuery·p0.50:   1697.645 ms/op
                 executeQuery·p0.90:   1811.939 ms/op
                 executeQuery·p0.95:   1811.939 ms/op
                 executeQuery·p0.99:   1811.939 ms/op
                 executeQuery·p0.999:  1811.939 ms/op
                 executeQuery·p0.9999: 1811.939 ms/op
                 executeQuery·p1.00:   1811.939 ms/op

Iteration   2: 1765.103 ±(99.9%) 174.559 ms/op
                 executeQuery·p0.00:   1652.556 ms/op
                 executeQuery·p0.50:   1766.851 ms/op
                 executeQuery·p0.90:   1828.717 ms/op
                 executeQuery·p0.95:   1828.717 ms/op
                 executeQuery·p0.99:   1828.717 ms/op
                 executeQuery·p0.999:  1828.717 ms/op
                 executeQuery·p0.9999: 1828.717 ms/op
                 executeQuery·p1.00:   1828.717 ms/op

Iteration   3: 1708.480 ±(99.9%) 265.866 ms/op
                 executeQuery·p0.00:   1606.418 ms/op
                 executeQuery·p0.50:   1710.227 ms/op
                 executeQuery·p0.90:   1858.077 ms/op
                 executeQuery·p0.95:   1858.077 ms/op
                 executeQuery·p0.99:   1858.077 ms/op
                 executeQuery·p0.999:  1858.077 ms/op
                 executeQuery·p0.9999: 1858.077 ms/op
                 executeQuery·p1.00:   1858.077 ms/op

Iteration   4: 1710.577 ±(99.9%) 257.729 ms/op
                 executeQuery·p0.00:   1602.224 ms/op
                 executeQuery·p0.50:   1682.964 ms/op
                 executeQuery·p0.90:   1847.591 ms/op
                 executeQuery·p0.95:   1847.591 ms/op
                 executeQuery·p0.99:   1847.591 ms/op
                 executeQuery·p0.999:  1847.591 ms/op
                 executeQuery·p0.9999: 1847.591 ms/op
                 executeQuery·p1.00:   1847.591 ms/op

Iteration   5: 1732.947 ±(99.9%) 154.192 ms/op
                 executeQuery·p0.00:   1675.624 ms/op
                 executeQuery·p0.50:   1717.567 ms/op
                 executeQuery·p0.90:   1805.648 ms/op
                 executeQuery·p0.95:   1805.648 ms/op
                 executeQuery·p0.99:   1805.648 ms/op
                 executeQuery·p0.999:  1805.648 ms/op
                 executeQuery·p0.9999: 1805.648 ms/op
                 executeQuery·p1.00:   1805.648 ms/op


# Run progress: 6.56% complete, ETA 09:07:07
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1904.913 ±(99.9%) 569.190 ms/op
# Warmup Iteration   2: 1746.928 ±(99.9%) 130.283 ms/op
# Warmup Iteration   3: 1747.277 ±(99.9%) 152.920 ms/op
# Warmup Iteration   4: 1745.879 ±(99.9%) 318.059 ms/op
# Warmup Iteration   5: 1728.752 ±(99.9%) 257.084 ms/op
Iteration   1: 1721.762 ±(99.9%) 261.679 ms/op
                 executeQuery·p0.00:   1610.613 ms/op
                 executeQuery·p0.50:   1736.442 ms/op
                 executeQuery·p0.90:   1851.785 ms/op
                 executeQuery·p0.95:   1851.785 ms/op
                 executeQuery·p0.99:   1851.785 ms/op
                 executeQuery·p0.999:  1851.785 ms/op
                 executeQuery·p0.9999: 1851.785 ms/op
                 executeQuery·p1.00:   1851.785 ms/op

Iteration   2: 1771.045 ±(99.9%) 203.437 ms/op
                 executeQuery·p0.00:   1646.264 ms/op
                 executeQuery·p0.50:   1776.288 ms/op
                 executeQuery·p0.90:   1843.397 ms/op
                 executeQuery·p0.95:   1843.397 ms/op
                 executeQuery·p0.99:   1843.397 ms/op
                 executeQuery·p0.999:  1843.397 ms/op
                 executeQuery·p0.9999: 1843.397 ms/op
                 executeQuery·p1.00:   1843.397 ms/op

Iteration   3: 1745.180 ±(99.9%) 149.766 ms/op
                 executeQuery·p0.00:   1648.361 ms/op
                 executeQuery·p0.50:   1766.851 ms/op
                 executeQuery·p0.90:   1784.676 ms/op
                 executeQuery·p0.95:   1784.676 ms/op
                 executeQuery·p0.99:   1784.676 ms/op
                 executeQuery·p0.999:  1784.676 ms/op
                 executeQuery·p0.9999: 1784.676 ms/op
                 executeQuery·p1.00:   1784.676 ms/op

Iteration   4: 1754.617 ±(99.9%) 278.670 ms/op
                 executeQuery·p0.00:   1637.876 ms/op
                 executeQuery·p0.50:   1758.462 ms/op
                 executeQuery·p0.90:   1883.242 ms/op
                 executeQuery·p0.95:   1883.242 ms/op
                 executeQuery·p0.99:   1883.242 ms/op
                 executeQuery·p0.999:  1883.242 ms/op
                 executeQuery·p0.9999: 1883.242 ms/op
                 executeQuery·p1.00:   1883.242 ms/op

Iteration   5: 1723.160 ±(99.9%) 173.565 ms/op
                 executeQuery·p0.00:   1606.418 ms/op
                 executeQuery·p0.50:   1741.685 ms/op
                 executeQuery·p0.90:   1784.676 ms/op
                 executeQuery·p0.95:   1784.676 ms/op
                 executeQuery·p0.99:   1784.676 ms/op
                 executeQuery·p0.999:  1784.676 ms/op
                 executeQuery·p0.9999: 1784.676 ms/op
                 executeQuery·p1.00:   1784.676 ms/op


# Run progress: 6.88% complete, ETA 09:05:12
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1827.668 ±(99.9%) 450.989 ms/op
# Warmup Iteration   2: 1767.550 ±(99.9%) 162.779 ms/op
# Warmup Iteration   3: 1757.413 ±(99.9%) 369.116 ms/op
# Warmup Iteration   4: 1715.121 ±(99.9%) 232.910 ms/op
# Warmup Iteration   5: 1714.422 ±(99.9%) 163.979 ms/op
Iteration   1: 1741.335 ±(99.9%) 125.175 ms/op
                 executeQuery·p0.00:   1698.693 ms/op
                 executeQuery·p0.50:   1731.199 ms/op
                 executeQuery·p0.90:   1803.551 ms/op
                 executeQuery·p0.95:   1803.551 ms/op
                 executeQuery·p0.99:   1803.551 ms/op
                 executeQuery·p0.999:  1803.551 ms/op
                 executeQuery·p0.9999: 1803.551 ms/op
                 executeQuery·p1.00:   1803.551 ms/op

Iteration   2: 1709.179 ±(99.9%) 64.314 ms/op
                 executeQuery·p0.00:   1677.722 ms/op
                 executeQuery·p0.50:   1707.082 ms/op
                 executeQuery·p0.90:   1742.733 ms/op
                 executeQuery·p0.95:   1742.733 ms/op
                 executeQuery·p0.99:   1742.733 ms/op
                 executeQuery·p0.999:  1742.733 ms/op
                 executeQuery·p0.9999: 1742.733 ms/op
                 executeQuery·p1.00:   1742.733 ms/op

Iteration   3: 1759.161 ±(99.9%) 182.454 ms/op
                 executeQuery·p0.00:   1644.167 ms/op
                 executeQuery·p0.50:   1779.433 ms/op
                 executeQuery·p0.90:   1824.522 ms/op
                 executeQuery·p0.95:   1824.522 ms/op
                 executeQuery·p0.99:   1824.522 ms/op
                 executeQuery·p0.999:  1824.522 ms/op
                 executeQuery·p0.9999: 1824.522 ms/op
                 executeQuery·p1.00:   1824.522 ms/op

Iteration   4: 1738.189 ±(99.9%) 242.398 ms/op
                 executeQuery·p0.00:   1602.224 ms/op
                 executeQuery·p0.50:   1744.830 ms/op
                 executeQuery·p0.90:   1864.368 ms/op
                 executeQuery·p0.95:   1864.368 ms/op
                 executeQuery·p0.99:   1864.368 ms/op
                 executeQuery·p0.999:  1864.368 ms/op
                 executeQuery·p0.9999: 1864.368 ms/op
                 executeQuery·p1.00:   1864.368 ms/op

Iteration   5: 1770.695 ±(99.9%) 203.570 ms/op
                 executeQuery·p0.00:   1646.264 ms/op
                 executeQuery·p0.50:   1777.336 ms/op
                 executeQuery·p0.90:   1845.494 ms/op
                 executeQuery·p0.95:   1845.494 ms/op
                 executeQuery·p0.99:   1845.494 ms/op
                 executeQuery·p0.999:  1845.494 ms/op
                 executeQuery·p0.9999: 1845.494 ms/op
                 executeQuery·p1.00:   1845.494 ms/op


# Run progress: 7.19% complete, ETA 09:03:10
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1843.746 ±(99.9%) 347.941 ms/op
# Warmup Iteration   2: 1725.607 ±(99.9%) 173.555 ms/op
# Warmup Iteration   3: 1742.384 ±(99.9%) 280.050 ms/op
# Warmup Iteration   4: 1737.490 ±(99.9%) 189.422 ms/op
# Warmup Iteration   5: 1761.957 ±(99.9%) 376.692 ms/op
Iteration   1: 1757.413 ±(99.9%) 141.580 ms/op
                 executeQuery·p0.00:   1681.916 ms/op
                 executeQuery·p0.50:   1773.142 ms/op
                 executeQuery·p0.90:   1820.328 ms/op
                 executeQuery·p0.95:   1820.328 ms/op
                 executeQuery·p0.99:   1820.328 ms/op
                 executeQuery·p0.999:  1820.328 ms/op
                 executeQuery·p0.9999: 1820.328 ms/op
                 executeQuery·p1.00:   1820.328 ms/op

Iteration   2: 1740.986 ±(99.9%) 180.471 ms/op
                 executeQuery·p0.00:   1650.459 ms/op
                 executeQuery·p0.50:   1739.588 ms/op
                 executeQuery·p0.90:   1835.008 ms/op
                 executeQuery·p0.95:   1835.008 ms/op
                 executeQuery·p0.99:   1835.008 ms/op
                 executeQuery·p0.999:  1835.008 ms/op
                 executeQuery·p0.9999: 1835.008 ms/op
                 executeQuery·p1.00:   1835.008 ms/op

Iteration   3: 1761.608 ±(99.9%) 331.607 ms/op
                 executeQuery·p0.00:   1675.624 ms/op
                 executeQuery·p0.50:   1721.762 ms/op
                 executeQuery·p0.90:   1998.586 ms/op
                 executeQuery·p0.95:   1998.586 ms/op
                 executeQuery·p0.99:   1998.586 ms/op
                 executeQuery·p0.999:  1998.586 ms/op
                 executeQuery·p0.9999: 1998.586 ms/op
                 executeQuery·p1.00:   1998.586 ms/op

Iteration   4: 1757.763 ±(99.9%) 183.021 ms/op
                 executeQuery·p0.00:   1639.973 ms/op
                 executeQuery·p0.50:   1764.753 ms/op
                 executeQuery·p0.90:   1828.717 ms/op
                 executeQuery·p0.95:   1828.717 ms/op
                 executeQuery·p0.99:   1828.717 ms/op
                 executeQuery·p0.999:  1828.717 ms/op
                 executeQuery·p0.9999: 1828.717 ms/op
                 executeQuery·p1.00:   1828.717 ms/op

Iteration   5: 1746.578 ±(99.9%) 256.107 ms/op
                 executeQuery·p0.00:   1621.098 ms/op
                 executeQuery·p0.50:   1746.928 ms/op
                 executeQuery·p0.90:   1889.534 ms/op
                 executeQuery·p0.95:   1889.534 ms/op
                 executeQuery·p0.99:   1889.534 ms/op
                 executeQuery·p0.999:  1889.534 ms/op
                 executeQuery·p0.9999: 1889.534 ms/op
                 executeQuery·p1.00:   1889.534 ms/op


# Run progress: 7.50% complete, ETA 09:01:14
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1860.873 ±(99.9%) 356.877 ms/op
# Warmup Iteration   2: 1790.269 ±(99.9%) 291.030 ms/op
# Warmup Iteration   3: 1730.849 ±(99.9%) 151.978 ms/op
# Warmup Iteration   4: 1744.830 ±(99.9%) 193.370 ms/op
# Warmup Iteration   5: 1777.336 ±(99.9%) 260.534 ms/op
Iteration   1: 1782.579 ±(99.9%) 190.886 ms/op
                 executeQuery·p0.00:   1650.459 ms/op
                 executeQuery·p0.50:   1814.036 ms/op
                 executeQuery·p0.90:   1824.522 ms/op
                 executeQuery·p0.95:   1824.522 ms/op
                 executeQuery·p0.99:   1824.522 ms/op
                 executeQuery·p0.999:  1824.522 ms/op
                 executeQuery·p0.9999: 1824.522 ms/op
                 executeQuery·p1.00:   1824.522 ms/op

Iteration   2: 1739.588 ±(99.9%) 77.283 ms/op
                 executeQuery·p0.00:   1709.179 ms/op
                 executeQuery·p0.50:   1737.490 ms/op
                 executeQuery·p0.90:   1776.288 ms/op
                 executeQuery·p0.95:   1776.288 ms/op
                 executeQuery·p0.99:   1776.288 ms/op
                 executeQuery·p0.999:  1776.288 ms/op
                 executeQuery·p0.9999: 1776.288 ms/op
                 executeQuery·p1.00:   1776.288 ms/op

Iteration   3: 1752.170 ±(99.9%) 173.887 ms/op
                 executeQuery·p0.00:   1675.624 ms/op
                 executeQuery·p0.50:   1732.248 ms/op
                 executeQuery·p0.90:   1849.688 ms/op
                 executeQuery·p0.95:   1849.688 ms/op
                 executeQuery·p0.99:   1849.688 ms/op
                 executeQuery·p0.999:  1849.688 ms/op
                 executeQuery·p0.9999: 1849.688 ms/op
                 executeQuery·p1.00:   1849.688 ms/op

Iteration   4: 1786.074 ±(99.9%) 187.215 ms/op
                 executeQuery·p0.00:   1667.236 ms/op
                 executeQuery·p0.50:   1801.454 ms/op
                 executeQuery·p0.90:   1866.465 ms/op
                 executeQuery·p0.95:   1866.465 ms/op
                 executeQuery·p0.99:   1866.465 ms/op
                 executeQuery·p0.999:  1866.465 ms/op
                 executeQuery·p0.9999: 1866.465 ms/op
                 executeQuery·p1.00:   1866.465 ms/op

Iteration   5: 1768.598 ±(99.9%) 153.608 ms/op
                 executeQuery·p0.00:   1673.527 ms/op
                 executeQuery·p0.50:   1781.531 ms/op
                 executeQuery·p0.90:   1824.522 ms/op
                 executeQuery·p0.95:   1824.522 ms/op
                 executeQuery·p0.99:   1824.522 ms/op
                 executeQuery·p0.999:  1824.522 ms/op
                 executeQuery·p0.9999: 1824.522 ms/op
                 executeQuery·p1.00:   1824.522 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 150
  mean =   1746.424 ±(99.9%) 18.871 ms/op

  Histogram, ms/op:
    [1600.000, 1625.000) = 8 
    [1625.000, 1650.000) = 7 
    [1650.000, 1675.000) = 7 
    [1675.000, 1700.000) = 16 
    [1700.000, 1725.000) = 20 
    [1725.000, 1750.000) = 17 
    [1750.000, 1775.000) = 21 
    [1775.000, 1800.000) = 22 
    [1800.000, 1825.000) = 15 
    [1825.000, 1850.000) = 10 
    [1850.000, 1875.000) = 4 
    [1875.000, 1900.000) = 2 
    [1900.000, 1925.000) = 0 
    [1925.000, 1950.000) = 0 
    [1950.000, 1975.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1602.224 ms/op
     p(50.0000) =   1750.073 ms/op
     p(90.0000) =   1834.379 ms/op
     p(95.0000) =   1850.632 ms/op
     p(99.0000) =   1942.969 ms/op
     p(99.9000) =   1998.586 ms/op
     p(99.9900) =   1998.586 ms/op
     p(99.9990) =   1998.586 ms/op
     p(99.9999) =   1998.586 ms/op
    p(100.0000) =   1998.586 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4)

# Run progress: 7.81% complete, ETA 08:59:31
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1896.175 ±(99.9%) 295.809 ms/op
# Warmup Iteration   2: 1779.783 ±(99.9%) 158.920 ms/op
# Warmup Iteration   3: 1784.676 ±(99.9%) 267.172 ms/op
# Warmup Iteration   4: 1802.502 ±(99.9%) 158.967 ms/op
# Warmup Iteration   5: 1843.746 ±(99.9%) 191.227 ms/op
Iteration   1: 1767.200 ±(99.9%) 232.739 ms/op
                 executeQuery·p0.00:   1656.750 ms/op
                 executeQuery·p0.50:   1776.288 ms/op
                 executeQuery·p0.90:   1895.825 ms/op
                 executeQuery·p0.95:   1895.825 ms/op
                 executeQuery·p0.99:   1895.825 ms/op
                 executeQuery·p0.999:  1895.825 ms/op
                 executeQuery·p0.9999: 1895.825 ms/op
                 executeQuery·p1.00:   1895.825 ms/op

Iteration   2: 1792.366 ±(99.9%) 208.737 ms/op
                 executeQuery·p0.00:   1696.596 ms/op
                 executeQuery·p0.50:   1786.774 ms/op
                 executeQuery·p0.90:   1879.048 ms/op
                 executeQuery·p0.95:   1879.048 ms/op
                 executeQuery·p0.99:   1879.048 ms/op
                 executeQuery·p0.999:  1879.048 ms/op
                 executeQuery·p0.9999: 1879.048 ms/op
                 executeQuery·p1.00:   1879.048 ms/op

Iteration   3: 1813.687 ±(99.9%) 197.210 ms/op
                 executeQuery·p0.00:   1711.276 ms/op
                 executeQuery·p0.50:   1804.599 ms/op
                 executeQuery·p0.90:   1895.825 ms/op
                 executeQuery·p0.95:   1895.825 ms/op
                 executeQuery·p0.99:   1895.825 ms/op
                 executeQuery·p0.999:  1895.825 ms/op
                 executeQuery·p0.9999: 1895.825 ms/op
                 executeQuery·p1.00:   1895.825 ms/op

Iteration   4: 1769.996 ±(99.9%) 263.785 ms/op
                 executeQuery·p0.00:   1658.847 ms/op
                 executeQuery·p0.50:   1782.579 ms/op
                 executeQuery·p0.90:   1920.991 ms/op
                 executeQuery·p0.95:   1920.991 ms/op
                 executeQuery·p0.99:   1920.991 ms/op
                 executeQuery·p0.999:  1920.991 ms/op
                 executeQuery·p0.9999: 1920.991 ms/op
                 executeQuery·p1.00:   1920.991 ms/op

Iteration   5: 1788.172 ±(99.9%) 185.992 ms/op
                 executeQuery·p0.00:   1688.207 ms/op
                 executeQuery·p0.50:   1781.531 ms/op
                 executeQuery·p0.90:   1881.145 ms/op
                 executeQuery·p0.95:   1881.145 ms/op
                 executeQuery·p0.99:   1881.145 ms/op
                 executeQuery·p0.999:  1881.145 ms/op
                 executeQuery·p0.9999: 1881.145 ms/op
                 executeQuery·p1.00:   1881.145 ms/op


# Run progress: 8.13% complete, ETA 08:58:08
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1884.641 ±(99.9%) 410.944 ms/op
# Warmup Iteration   2: 1796.910 ±(99.9%) 165.351 ms/op
# Warmup Iteration   3: 1779.433 ±(99.9%) 90.400 ms/op
# Warmup Iteration   4: 1795.861 ±(99.9%) 261.433 ms/op
# Warmup Iteration   5: 1781.880 ±(99.9%) 160.479 ms/op
Iteration   1: 1795.861 ±(99.9%) 224.202 ms/op
                 executeQuery·p0.00:   1679.819 ms/op
                 executeQuery·p0.50:   1823.474 ms/op
                 executeQuery·p0.90:   1889.534 ms/op
                 executeQuery·p0.95:   1889.534 ms/op
                 executeQuery·p0.99:   1889.534 ms/op
                 executeQuery·p0.999:  1889.534 ms/op
                 executeQuery·p0.9999: 1889.534 ms/op
                 executeQuery·p1.00:   1889.534 ms/op

Iteration   2: 1800.755 ±(99.9%) 176.176 ms/op
                 executeQuery·p0.00:   1734.345 ms/op
                 executeQuery·p0.50:   1794.114 ms/op
                 executeQuery·p0.90:   1904.214 ms/op
                 executeQuery·p0.95:   1904.214 ms/op
                 executeQuery·p0.99:   1904.214 ms/op
                 executeQuery·p0.999:  1904.214 ms/op
                 executeQuery·p0.9999: 1904.214 ms/op
                 executeQuery·p1.00:   1904.214 ms/op

Iteration   3: 1794.813 ±(99.9%) 259.807 ms/op
                 executeQuery·p0.00:   1646.264 ms/op
                 executeQuery·p0.50:   1788.871 ms/op
                 executeQuery·p0.90:   1910.505 ms/op
                 executeQuery·p0.95:   1910.505 ms/op
                 executeQuery·p0.99:   1910.505 ms/op
                 executeQuery·p0.999:  1910.505 ms/op
                 executeQuery·p0.9999: 1910.505 ms/op
                 executeQuery·p1.00:   1910.505 ms/op

Iteration   4: 1818.231 ±(99.9%) 234.967 ms/op
                 executeQuery·p0.00:   1707.082 ms/op
                 executeQuery·p0.50:   1815.085 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op

Iteration   5: 1759.511 ±(99.9%) 200.051 ms/op
                 executeQuery·p0.00:   1625.293 ms/op
                 executeQuery·p0.50:   1785.725 ms/op
                 executeQuery·p0.90:   1814.036 ms/op
                 executeQuery·p0.95:   1814.036 ms/op
                 executeQuery·p0.99:   1814.036 ms/op
                 executeQuery·p0.999:  1814.036 ms/op
                 executeQuery·p0.9999: 1814.036 ms/op
                 executeQuery·p1.00:   1814.036 ms/op


# Run progress: 8.44% complete, ETA 08:56:40
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1888.835 ±(99.9%) 441.831 ms/op
# Warmup Iteration   2: 1800.055 ±(99.9%) 148.199 ms/op
# Warmup Iteration   3: 1822.076 ±(99.9%) 441.702 ms/op
# Warmup Iteration   4: 1756.365 ±(99.9%) 232.653 ms/op
# Warmup Iteration   5: 1816.134 ±(99.9%) 253.326 ms/op
Iteration   1: 1804.949 ±(99.9%) 245.496 ms/op
                 executeQuery·p0.00:   1660.944 ms/op
                 executeQuery·p0.50:   1808.794 ms/op
                 executeQuery·p0.90:   1935.671 ms/op
                 executeQuery·p0.95:   1935.671 ms/op
                 executeQuery·p0.99:   1935.671 ms/op
                 executeQuery·p0.999:  1935.671 ms/op
                 executeQuery·p0.9999: 1935.671 ms/op
                 executeQuery·p1.00:   1935.671 ms/op

Iteration   2: 1776.637 ±(99.9%) 233.740 ms/op
                 executeQuery·p0.00:   1671.430 ms/op
                 executeQuery·p0.50:   1782.579 ms/op
                 executeQuery·p0.90:   1908.408 ms/op
                 executeQuery·p0.95:   1908.408 ms/op
                 executeQuery·p0.99:   1908.408 ms/op
                 executeQuery·p0.999:  1908.408 ms/op
                 executeQuery·p0.9999: 1908.408 ms/op
                 executeQuery·p1.00:   1908.408 ms/op

Iteration   3: 1837.804 ±(99.9%) 197.954 ms/op
                 executeQuery·p0.00:   1728.053 ms/op
                 executeQuery·p0.50:   1835.008 ms/op
                 executeQuery·p0.90:   1935.671 ms/op
                 executeQuery·p0.95:   1935.671 ms/op
                 executeQuery·p0.99:   1935.671 ms/op
                 executeQuery·p0.999:  1935.671 ms/op
                 executeQuery·p0.9999: 1935.671 ms/op
                 executeQuery·p1.00:   1935.671 ms/op

Iteration   4: 1810.891 ±(99.9%) 211.308 ms/op
                 executeQuery·p0.00:   1709.179 ms/op
                 executeQuery·p0.50:   1818.231 ms/op
                 executeQuery·p0.90:   1902.117 ms/op
                 executeQuery·p0.95:   1902.117 ms/op
                 executeQuery·p0.99:   1902.117 ms/op
                 executeQuery·p0.999:  1902.117 ms/op
                 executeQuery·p0.9999: 1902.117 ms/op
                 executeQuery·p1.00:   1902.117 ms/op

Iteration   5: 1812.988 ±(99.9%) 234.577 ms/op
                 executeQuery·p0.00:   1721.762 ms/op
                 executeQuery·p0.50:   1801.454 ms/op
                 executeQuery·p0.90:   1925.186 ms/op
                 executeQuery·p0.95:   1925.186 ms/op
                 executeQuery·p0.99:   1925.186 ms/op
                 executeQuery·p0.999:  1925.186 ms/op
                 executeQuery·p0.9999: 1925.186 ms/op
                 executeQuery·p1.00:   1925.186 ms/op


# Run progress: 8.75% complete, ETA 08:55:19
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1928.681 ±(99.9%) 284.637 ms/op
# Warmup Iteration   2: 1785.026 ±(99.9%) 114.361 ms/op
# Warmup Iteration   3: 1779.433 ±(99.9%) 127.696 ms/op
# Warmup Iteration   4: 1780.482 ±(99.9%) 336.267 ms/op
# Warmup Iteration   5: 1800.055 ±(99.9%) 250.902 ms/op
Iteration   1: 1781.531 ±(99.9%) 72.193 ms/op
                 executeQuery·p0.00:   1746.928 ms/op
                 executeQuery·p0.50:   1778.385 ms/op
                 executeQuery·p0.90:   1826.619 ms/op
                 executeQuery·p0.95:   1826.619 ms/op
                 executeQuery·p0.99:   1826.619 ms/op
                 executeQuery·p0.999:  1826.619 ms/op
                 executeQuery·p0.9999: 1826.619 ms/op
                 executeQuery·p1.00:   1826.619 ms/op

Iteration   2: 1810.541 ±(99.9%) 354.953 ms/op
                 executeQuery·p0.00:   1681.916 ms/op
                 executeQuery·p0.50:   1778.385 ms/op
                 executeQuery·p0.90:   2040.529 ms/op
                 executeQuery·p0.95:   2040.529 ms/op
                 executeQuery·p0.99:   2040.529 ms/op
                 executeQuery·p0.999:  2040.529 ms/op
                 executeQuery·p0.9999: 2040.529 ms/op
                 executeQuery·p1.00:   2040.529 ms/op

Iteration   3: 1808.444 ±(99.9%) 175.231 ms/op
                 executeQuery·p0.00:   1742.733 ms/op
                 executeQuery·p0.50:   1799.356 ms/op
                 executeQuery·p0.90:   1889.534 ms/op
                 executeQuery·p0.95:   1889.534 ms/op
                 executeQuery·p0.99:   1889.534 ms/op
                 executeQuery·p0.999:  1889.534 ms/op
                 executeQuery·p0.9999: 1889.534 ms/op
                 executeQuery·p1.00:   1889.534 ms/op

Iteration   4: 1817.532 ±(99.9%) 228.753 ms/op
                 executeQuery·p0.00:   1663.042 ms/op
                 executeQuery·p0.50:   1836.057 ms/op
                 executeQuery·p0.90:   1902.117 ms/op
                 executeQuery·p0.95:   1902.117 ms/op
                 executeQuery·p0.99:   1902.117 ms/op
                 executeQuery·p0.999:  1902.117 ms/op
                 executeQuery·p0.9999: 1902.117 ms/op
                 executeQuery·p1.00:   1902.117 ms/op

Iteration   5: 1775.589 ±(99.9%) 234.634 ms/op
                 executeQuery·p0.00:   1610.613 ms/op
                 executeQuery·p0.50:   1804.599 ms/op
                 executeQuery·p0.90:   1835.008 ms/op
                 executeQuery·p0.95:   1835.008 ms/op
                 executeQuery·p0.99:   1835.008 ms/op
                 executeQuery·p0.999:  1835.008 ms/op
                 executeQuery·p0.9999: 1835.008 ms/op
                 executeQuery·p1.00:   1835.008 ms/op


# Run progress: 9.06% complete, ETA 08:53:51
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1910.505 ±(99.9%) 334.969 ms/op
# Warmup Iteration   2: 1825.221 ±(99.9%) 267.423 ms/op
# Warmup Iteration   3: 1802.852 ±(99.9%) 204.316 ms/op
# Warmup Iteration   4: 1772.443 ±(99.9%) 219.864 ms/op
# Warmup Iteration   5: 1862.271 ±(99.9%) 238.445 ms/op
Iteration   1: 1796.211 ±(99.9%) 344.612 ms/op
                 executeQuery·p0.00:   1623.196 ms/op
                 executeQuery·p0.50:   1788.871 ms/op
                 executeQuery·p0.90:   1935.671 ms/op
                 executeQuery·p0.95:   1935.671 ms/op
                 executeQuery·p0.99:   1935.671 ms/op
                 executeQuery·p0.999:  1935.671 ms/op
                 executeQuery·p0.9999: 1935.671 ms/op
                 executeQuery·p1.00:   1935.671 ms/op

Iteration   2: 1781.531 ±(99.9%) 241.005 ms/op
                 executeQuery·p0.00:   1688.207 ms/op
                 executeQuery·p0.50:   1775.239 ms/op
                 executeQuery·p0.90:   1933.574 ms/op
                 executeQuery·p0.95:   1933.574 ms/op
                 executeQuery·p0.99:   1933.574 ms/op
                 executeQuery·p0.999:  1933.574 ms/op
                 executeQuery·p0.9999: 1933.574 ms/op
                 executeQuery·p1.00:   1933.574 ms/op

Iteration   3: 1801.803 ±(99.9%) 271.166 ms/op
                 executeQuery·p0.00:   1660.944 ms/op
                 executeQuery·p0.50:   1781.531 ms/op
                 executeQuery·p0.90:   1927.283 ms/op
                 executeQuery·p0.95:   1927.283 ms/op
                 executeQuery·p0.99:   1927.283 ms/op
                 executeQuery·p0.999:  1927.283 ms/op
                 executeQuery·p0.9999: 1927.283 ms/op
                 executeQuery·p1.00:   1927.283 ms/op

Iteration   4: 1806.696 ±(99.9%) 121.136 ms/op
                 executeQuery·p0.00:   1734.345 ms/op
                 executeQuery·p0.50:   1810.891 ms/op
                 executeQuery·p0.90:   1864.368 ms/op
                 executeQuery·p0.95:   1864.368 ms/op
                 executeQuery·p0.99:   1864.368 ms/op
                 executeQuery·p0.999:  1864.368 ms/op
                 executeQuery·p0.9999: 1864.368 ms/op
                 executeQuery·p1.00:   1864.368 ms/op

Iteration   5: 1809.493 ±(99.9%) 358.785 ms/op
                 executeQuery·p0.00:   1746.928 ms/op
                 executeQuery·p0.50:   1759.511 ms/op
                 executeQuery·p0.90:   2069.889 ms/op
                 executeQuery·p0.95:   2069.889 ms/op
                 executeQuery·p0.99:   2069.889 ms/op
                 executeQuery·p0.999:  2069.889 ms/op
                 executeQuery·p0.9999: 2069.889 ms/op
                 executeQuery·p1.00:   2069.889 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 150
  mean =   1797.329 ±(99.9%) 21.791 ms/op

  Histogram, ms/op:
    [1600.000, 1650.000) = 4 
    [1650.000, 1700.000) = 12 
    [1700.000, 1750.000) = 23 
    [1750.000, 1800.000) = 42 
    [1800.000, 1850.000) = 37 
    [1850.000, 1900.000) = 16 
    [1900.000, 1950.000) = 13 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1610.613 ms/op
     p(50.0000) =   1795.162 ms/op
     p(90.0000) =   1902.117 ms/op
     p(95.0000) =   1930.114 ms/op
     p(99.0000) =   2054.915 ms/op
     p(99.9000) =   2069.889 ms/op
     p(99.9900) =   2069.889 ms/op
     p(99.9990) =   2069.889 ms/op
     p(99.9999) =   2069.889 ms/op
    p(100.0000) =   2069.889 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6)

# Run progress: 9.38% complete, ETA 08:52:29
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1951.610 ±(99.9%) 466.545 ms/op
# Warmup Iteration   2: 1822.775 ±(99.9%) 227.927 ms/op
# Warmup Iteration   3: 1813.687 ±(99.9%) 238.167 ms/op
# Warmup Iteration   4: 1819.629 ±(99.9%) 166.487 ms/op
# Warmup Iteration   5: 1807.046 ±(99.9%) 330.639 ms/op
Iteration   1: 1862.621 ±(99.9%) 272.921 ms/op
                 executeQuery·p0.00:   1704.985 ms/op
                 executeQuery·p0.50:   1851.785 ms/op
                 executeQuery·p0.90:   1975.517 ms/op
                 executeQuery·p0.95:   1975.517 ms/op
                 executeQuery·p0.99:   1975.517 ms/op
                 executeQuery·p0.999:  1975.517 ms/op
                 executeQuery·p0.9999: 1975.517 ms/op
                 executeQuery·p1.00:   1975.517 ms/op

Iteration   2: 1837.455 ±(99.9%) 152.693 ms/op
                 executeQuery·p0.00:   1776.288 ms/op
                 executeQuery·p0.50:   1844.445 ms/op
                 executeQuery·p0.90:   1891.631 ms/op
                 executeQuery·p0.95:   1891.631 ms/op
                 executeQuery·p0.99:   1891.631 ms/op
                 executeQuery·p0.999:  1891.631 ms/op
                 executeQuery·p0.9999: 1891.631 ms/op
                 executeQuery·p1.00:   1891.631 ms/op

Iteration   3: 1849.688 ±(99.9%) 184.061 ms/op
                 executeQuery·p0.00:   1749.025 ms/op
                 executeQuery·p0.50:   1846.542 ms/op
                 executeQuery·p0.90:   1946.157 ms/op
                 executeQuery·p0.95:   1946.157 ms/op
                 executeQuery·p0.99:   1946.157 ms/op
                 executeQuery·p0.999:  1946.157 ms/op
                 executeQuery·p0.9999: 1946.157 ms/op
                 executeQuery·p1.00:   1946.157 ms/op

Iteration   4: 1857.727 ±(99.9%) 350.121 ms/op
                 executeQuery·p0.00:   1690.305 ms/op
                 executeQuery·p0.50:   1871.708 ms/op
                 executeQuery·p0.90:   2006.974 ms/op
                 executeQuery·p0.95:   2006.974 ms/op
                 executeQuery·p0.99:   2006.974 ms/op
                 executeQuery·p0.999:  2006.974 ms/op
                 executeQuery·p0.9999: 2006.974 ms/op
                 executeQuery·p1.00:   2006.974 ms/op

Iteration   5: 1811.590 ±(99.9%) 197.701 ms/op
                 executeQuery·p0.00:   1736.442 ms/op
                 executeQuery·p0.50:   1794.114 ms/op
                 executeQuery·p0.90:   1900.020 ms/op
                 executeQuery·p0.95:   1900.020 ms/op
                 executeQuery·p0.99:   1900.020 ms/op
                 executeQuery·p0.999:  1900.020 ms/op
                 executeQuery·p0.9999: 1900.020 ms/op
                 executeQuery·p1.00:   1900.020 ms/op


# Run progress: 9.69% complete, ETA 08:51:01
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2007.813 ±(99.9%) 446.548 ms/op
# Warmup Iteration   2: 1831.862 ±(99.9%) 193.862 ms/op
# Warmup Iteration   3: 1844.096 ±(99.9%) 177.233 ms/op
# Warmup Iteration   4: 1842.698 ±(99.9%) 212.611 ms/op
# Warmup Iteration   5: 1855.280 ±(99.9%) 152.433 ms/op
Iteration   1: 1851.436 ±(99.9%) 207.432 ms/op
                 executeQuery·p0.00:   1740.636 ms/op
                 executeQuery·p0.50:   1865.417 ms/op
                 executeQuery·p0.90:   1941.963 ms/op
                 executeQuery·p0.95:   1941.963 ms/op
                 executeQuery·p0.99:   1941.963 ms/op
                 executeQuery·p0.999:  1941.963 ms/op
                 executeQuery·p0.9999: 1941.963 ms/op
                 executeQuery·p1.00:   1941.963 ms/op

Iteration   2: 1816.483 ±(99.9%) 207.732 ms/op
                 executeQuery·p0.00:   1713.373 ms/op
                 executeQuery·p0.50:   1809.842 ms/op
                 executeQuery·p0.90:   1941.963 ms/op
                 executeQuery·p0.95:   1941.963 ms/op
                 executeQuery·p0.99:   1941.963 ms/op
                 executeQuery·p0.999:  1941.963 ms/op
                 executeQuery·p0.9999: 1941.963 ms/op
                 executeQuery·p1.00:   1941.963 ms/op

Iteration   3: 1841.649 ±(99.9%) 262.166 ms/op
                 executeQuery·p0.00:   1667.236 ms/op
                 executeQuery·p0.50:   1854.931 ms/op
                 executeQuery·p0.90:   1948.254 ms/op
                 executeQuery·p0.95:   1948.254 ms/op
                 executeQuery·p0.99:   1948.254 ms/op
                 executeQuery·p0.999:  1948.254 ms/op
                 executeQuery·p0.9999: 1948.254 ms/op
                 executeQuery·p1.00:   1948.254 ms/op

Iteration   4: 1802.852 ±(99.9%) 225.494 ms/op
                 executeQuery·p0.00:   1698.693 ms/op
                 executeQuery·p0.50:   1793.065 ms/op
                 executeQuery·p0.90:   1939.866 ms/op
                 executeQuery·p0.95:   1939.866 ms/op
                 executeQuery·p0.99:   1939.866 ms/op
                 executeQuery·p0.999:  1939.866 ms/op
                 executeQuery·p0.9999: 1939.866 ms/op
                 executeQuery·p1.00:   1939.866 ms/op

Iteration   5: 1880.446 ±(99.9%) 167.191 ms/op
                 executeQuery·p0.00:   1793.065 ms/op
                 executeQuery·p0.50:   1885.340 ms/op
                 executeQuery·p0.90:   1950.351 ms/op
                 executeQuery·p0.95:   1950.351 ms/op
                 executeQuery·p0.99:   1950.351 ms/op
                 executeQuery·p0.999:  1950.351 ms/op
                 executeQuery·p0.9999: 1950.351 ms/op
                 executeQuery·p1.00:   1950.351 ms/op


# Run progress: 10.00% complete, ETA 08:49:37
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1987.681 ±(99.9%) 517.216 ms/op
# Warmup Iteration   2: 1864.019 ±(99.9%) 195.343 ms/op
# Warmup Iteration   3: 1821.027 ±(99.9%) 297.028 ms/op
# Warmup Iteration   4: 1832.212 ±(99.9%) 124.788 ms/op
# Warmup Iteration   5: 1774.191 ±(99.9%) 110.271 ms/op
Iteration   1: 1839.901 ±(99.9%) 209.399 ms/op
                 executeQuery·p0.00:   1711.276 ms/op
                 executeQuery·p0.50:   1853.882 ms/op
                 executeQuery·p0.90:   1906.311 ms/op
                 executeQuery·p0.95:   1906.311 ms/op
                 executeQuery·p0.99:   1906.311 ms/op
                 executeQuery·p0.999:  1906.311 ms/op
                 executeQuery·p0.9999: 1906.311 ms/op
                 executeQuery·p1.00:   1906.311 ms/op

Iteration   2: 1881.844 ±(99.9%) 305.613 ms/op
                 executeQuery·p0.00:   1702.887 ms/op
                 executeQuery·p0.50:   1888.485 ms/op
                 executeQuery·p0.90:   2025.849 ms/op
                 executeQuery·p0.95:   2025.849 ms/op
                 executeQuery·p0.99:   2025.849 ms/op
                 executeQuery·p0.999:  2025.849 ms/op
                 executeQuery·p0.9999: 2025.849 ms/op
                 executeQuery·p1.00:   2025.849 ms/op

Iteration   3: 1778.035 ±(99.9%) 187.354 ms/op
                 executeQuery·p0.00:   1669.333 ms/op
                 executeQuery·p0.50:   1807.745 ms/op
                 executeQuery·p0.90:   1832.911 ms/op
                 executeQuery·p0.95:   1832.911 ms/op
                 executeQuery·p0.99:   1832.911 ms/op
                 executeQuery·p0.999:  1832.911 ms/op
                 executeQuery·p0.9999: 1832.911 ms/op
                 executeQuery·p1.00:   1832.911 ms/op

Iteration   4: 1835.008 ±(99.9%) 209.013 ms/op
                 executeQuery·p0.00:   1715.470 ms/op
                 executeQuery·p0.50:   1839.202 ms/op
                 executeQuery·p0.90:   1937.768 ms/op
                 executeQuery·p0.95:   1937.768 ms/op
                 executeQuery·p0.99:   1937.768 ms/op
                 executeQuery·p0.999:  1937.768 ms/op
                 executeQuery·p0.9999: 1937.768 ms/op
                 executeQuery·p1.00:   1937.768 ms/op

Iteration   5: 1824.522 ±(99.9%) 256.500 ms/op
                 executeQuery·p0.00:   1696.596 ms/op
                 executeQuery·p0.50:   1823.474 ms/op
                 executeQuery·p0.90:   1954.546 ms/op
                 executeQuery·p0.95:   1954.546 ms/op
                 executeQuery·p0.99:   1954.546 ms/op
                 executeQuery·p0.999:  1954.546 ms/op
                 executeQuery·p0.9999: 1954.546 ms/op
                 executeQuery·p1.00:   1954.546 ms/op


# Run progress: 10.31% complete, ETA 08:48:07
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2004.458 ±(99.9%) 735.844 ms/op
# Warmup Iteration   2: 1858.077 ±(99.9%) 111.828 ms/op
# Warmup Iteration   3: 1840.950 ±(99.9%) 298.161 ms/op
# Warmup Iteration   4: 1852.484 ±(99.9%) 205.295 ms/op
# Warmup Iteration   5: 1836.406 ±(99.9%) 415.447 ms/op
Iteration   1: 1804.599 ±(99.9%) 142.250 ms/op
                 executeQuery·p0.00:   1707.082 ms/op
                 executeQuery·p0.50:   1817.182 ms/op
                 executeQuery·p0.90:   1855.980 ms/op
                 executeQuery·p0.95:   1855.980 ms/op
                 executeQuery·p0.99:   1855.980 ms/op
                 executeQuery·p0.999:  1855.980 ms/op
                 executeQuery·p0.9999: 1855.980 ms/op
                 executeQuery·p1.00:   1855.980 ms/op

Iteration   2: 1839.552 ±(99.9%) 97.161 ms/op
                 executeQuery·p0.00:   1801.454 ms/op
                 executeQuery·p0.50:   1837.105 ms/op
                 executeQuery·p0.90:   1895.825 ms/op
                 executeQuery·p0.95:   1895.825 ms/op
                 executeQuery·p0.99:   1895.825 ms/op
                 executeQuery·p0.999:  1895.825 ms/op
                 executeQuery·p0.9999: 1895.825 ms/op
                 executeQuery·p1.00:   1895.825 ms/op

Iteration   3: 1841.999 ±(99.9%) 274.569 ms/op
                 executeQuery·p0.00:   1702.887 ms/op
                 executeQuery·p0.50:   1843.397 ms/op
                 executeQuery·p0.90:   1969.226 ms/op
                 executeQuery·p0.95:   1969.226 ms/op
                 executeQuery·p0.99:   1969.226 ms/op
                 executeQuery·p0.999:  1969.226 ms/op
                 executeQuery·p0.9999: 1969.226 ms/op
                 executeQuery·p1.00:   1969.226 ms/op

Iteration   4: 1853.183 ±(99.9%) 286.720 ms/op
                 executeQuery·p0.00:   1715.470 ms/op
                 executeQuery·p0.50:   1839.202 ms/op
                 executeQuery·p0.90:   1990.197 ms/op
                 executeQuery·p0.95:   1990.197 ms/op
                 executeQuery·p0.99:   1990.197 ms/op
                 executeQuery·p0.999:  1990.197 ms/op
                 executeQuery·p0.9999: 1990.197 ms/op
                 executeQuery·p1.00:   1990.197 ms/op

Iteration   5: 1873.805 ±(99.9%) 134.193 ms/op
                 executeQuery·p0.00:   1799.356 ms/op
                 executeQuery·p0.50:   1876.951 ms/op
                 executeQuery·p0.90:   1946.157 ms/op
                 executeQuery·p0.95:   1946.157 ms/op
                 executeQuery·p0.99:   1946.157 ms/op
                 executeQuery·p0.999:  1946.157 ms/op
                 executeQuery·p0.9999: 1946.157 ms/op
                 executeQuery·p1.00:   1946.157 ms/op


# Run progress: 10.63% complete, ETA 08:46:43
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2008.233 ±(99.9%) 549.144 ms/op
# Warmup Iteration   2: 1884.990 ±(99.9%) 129.667 ms/op
# Warmup Iteration   3: 1821.726 ±(99.9%) 296.749 ms/op
# Warmup Iteration   4: 1846.542 ±(99.9%) 351.134 ms/op
# Warmup Iteration   5: 1848.639 ±(99.9%) 442.427 ms/op
Iteration   1: 1873.106 ±(99.9%) 231.002 ms/op
                 executeQuery·p0.00:   1799.356 ms/op
                 executeQuery·p0.50:   1857.028 ms/op
                 executeQuery·p0.90:   2032.140 ms/op
                 executeQuery·p0.95:   2032.140 ms/op
                 executeQuery·p0.99:   2032.140 ms/op
                 executeQuery·p0.999:  2032.140 ms/op
                 executeQuery·p0.9999: 2032.140 ms/op
                 executeQuery·p1.00:   2032.140 ms/op

Iteration   2: 1821.377 ±(99.9%) 227.816 ms/op
                 executeQuery·p0.00:   1696.596 ms/op
                 executeQuery·p0.50:   1822.425 ms/op
                 executeQuery·p0.90:   1941.963 ms/op
                 executeQuery·p0.95:   1941.963 ms/op
                 executeQuery·p0.99:   1941.963 ms/op
                 executeQuery·p0.999:  1941.963 ms/op
                 executeQuery·p0.9999: 1941.963 ms/op
                 executeQuery·p1.00:   1941.963 ms/op

Iteration   3: 1854.581 ±(99.9%) 86.882 ms/op
                 executeQuery·p0.00:   1807.745 ms/op
                 executeQuery·p0.50:   1852.834 ms/op
                 executeQuery·p0.90:   1902.117 ms/op
                 executeQuery·p0.95:   1902.117 ms/op
                 executeQuery·p0.99:   1902.117 ms/op
                 executeQuery·p0.999:  1902.117 ms/op
                 executeQuery·p0.9999: 1902.117 ms/op
                 executeQuery·p1.00:   1902.117 ms/op

Iteration   4: 1825.221 ±(99.9%) 188.944 ms/op
                 executeQuery·p0.00:   1702.887 ms/op
                 executeQuery·p0.50:   1835.008 ms/op
                 executeQuery·p0.90:   1885.340 ms/op
                 executeQuery·p0.95:   1885.340 ms/op
                 executeQuery·p0.99:   1885.340 ms/op
                 executeQuery·p0.999:  1885.340 ms/op
                 executeQuery·p0.9999: 1885.340 ms/op
                 executeQuery·p1.00:   1885.340 ms/op

Iteration   5: 1847.940 ±(99.9%) 162.949 ms/op
                 executeQuery·p0.00:   1763.705 ms/op
                 executeQuery·p0.50:   1843.397 ms/op
                 executeQuery·p0.90:   1944.060 ms/op
                 executeQuery·p0.95:   1944.060 ms/op
                 executeQuery·p0.99:   1944.060 ms/op
                 executeQuery·p0.999:  1944.060 ms/op
                 executeQuery·p0.9999: 1944.060 ms/op
                 executeQuery·p1.00:   1944.060 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 150
  mean =   1840.265 ±(99.9%) 20.714 ms/op

  Histogram, ms/op:
    [1600.000, 1650.000) = 0 
    [1650.000, 1700.000) = 6 
    [1700.000, 1750.000) = 13 
    [1750.000, 1800.000) = 20 
    [1800.000, 1850.000) = 47 
    [1850.000, 1900.000) = 34 
    [1900.000, 1950.000) = 19 
    [1950.000, 2000.000) = 8 
    [2000.000, 2050.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   1667.236 ms/op
     p(50.0000) =   1839.202 ms/op
     p(90.0000) =   1943.850 ms/op
     p(95.0000) =   1954.546 ms/op
     p(99.0000) =   2028.932 ms/op
     p(99.9000) =   2032.140 ms/op
     p(99.9900) =   2032.140 ms/op
     p(99.9990) =   2032.140 ms/op
     p(99.9999) =   2032.140 ms/op
    p(100.0000) =   2032.140 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8)

# Run progress: 10.94% complete, ETA 08:45:17
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2030.043 ±(99.9%) 659.221 ms/op
# Warmup Iteration   2: 1930.079 ±(99.9%) 352.057 ms/op
# Warmup Iteration   3: 1878.349 ±(99.9%) 201.727 ms/op
# Warmup Iteration   4: 1892.680 ±(99.9%) 151.526 ms/op
# Warmup Iteration   5: 1893.029 ±(99.9%) 290.744 ms/op
Iteration   1: 1862.621 ±(99.9%) 188.311 ms/op
                 executeQuery·p0.00:   1761.608 ms/op
                 executeQuery·p0.50:   1854.931 ms/op
                 executeQuery·p0.90:   1952.449 ms/op
                 executeQuery·p0.95:   1952.449 ms/op
                 executeQuery·p0.99:   1952.449 ms/op
                 executeQuery·p0.999:  1952.449 ms/op
                 executeQuery·p0.9999: 1952.449 ms/op
                 executeQuery·p1.00:   1952.449 ms/op

Iteration   2: 1886.738 ±(99.9%) 244.564 ms/op
                 executeQuery·p0.00:   1778.385 ms/op
                 executeQuery·p0.50:   1893.728 ms/op
                 executeQuery·p0.90:   2000.683 ms/op
                 executeQuery·p0.95:   2000.683 ms/op
                 executeQuery·p0.99:   2000.683 ms/op
                 executeQuery·p0.999:  2000.683 ms/op
                 executeQuery·p0.9999: 2000.683 ms/op
                 executeQuery·p1.00:   2000.683 ms/op

Iteration   3: 1908.059 ±(99.9%) 217.237 ms/op
                 executeQuery·p0.00:   1788.871 ms/op
                 executeQuery·p0.50:   1952.449 ms/op
                 executeQuery·p0.90:   1965.031 ms/op
                 executeQuery·p0.95:   1965.031 ms/op
                 executeQuery·p0.99:   1965.031 ms/op
                 executeQuery·p0.999:  1965.031 ms/op
                 executeQuery·p0.9999: 1965.031 ms/op
                 executeQuery·p1.00:   1965.031 ms/op

Iteration   4: 1864.368 ±(99.9%) 188.039 ms/op
                 executeQuery·p0.00:   1759.511 ms/op
                 executeQuery·p0.50:   1883.242 ms/op
                 executeQuery·p0.90:   1948.254 ms/op
                 executeQuery·p0.95:   1948.254 ms/op
                 executeQuery·p0.99:   1948.254 ms/op
                 executeQuery·p0.999:  1948.254 ms/op
                 executeQuery·p0.9999: 1948.254 ms/op
                 executeQuery·p1.00:   1948.254 ms/op

Iteration   5: 1925.535 ±(99.9%) 155.965 ms/op
                 executeQuery·p0.00:   1841.299 ms/op
                 executeQuery·p0.50:   1924.137 ms/op
                 executeQuery·p0.90:   1992.294 ms/op
                 executeQuery·p0.95:   1992.294 ms/op
                 executeQuery·p0.99:   1992.294 ms/op
                 executeQuery·p0.999:  1992.294 ms/op
                 executeQuery·p0.9999: 1992.294 ms/op
                 executeQuery·p1.00:   1992.294 ms/op


# Run progress: 11.25% complete, ETA 08:44:11
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1974.259 ±(99.9%) 450.148 ms/op
# Warmup Iteration   2: 1886.388 ±(99.9%) 125.731 ms/op
# Warmup Iteration   3: 1849.688 ±(99.9%) 57.859 ms/op
# Warmup Iteration   4: 1853.882 ±(99.9%) 295.214 ms/op
# Warmup Iteration   5: 1862.271 ±(99.9%) 181.678 ms/op
Iteration   1: 1903.165 ±(99.9%) 407.617 ms/op
                 executeQuery·p0.00:   1820.328 ms/op
                 executeQuery·p0.50:   1857.028 ms/op
                 executeQuery·p0.90:   2197.815 ms/op
                 executeQuery·p0.95:   2197.815 ms/op
                 executeQuery·p0.99:   2197.815 ms/op
                 executeQuery·p0.999:  2197.815 ms/op
                 executeQuery·p0.9999: 2197.815 ms/op
                 executeQuery·p1.00:   2197.815 ms/op

Iteration   2: 1839.901 ±(99.9%) 298.144 ms/op
                 executeQuery·p0.00:   1719.665 ms/op
                 executeQuery·p0.50:   1830.814 ms/op
                 executeQuery·p0.90:   1962.934 ms/op
                 executeQuery·p0.95:   1962.934 ms/op
                 executeQuery·p0.99:   1962.934 ms/op
                 executeQuery·p0.999:  1962.934 ms/op
                 executeQuery·p0.9999: 1962.934 ms/op
                 executeQuery·p1.00:   1962.934 ms/op

Iteration   3: 1898.622 ±(99.9%) 157.081 ms/op
                 executeQuery·p0.00:   1799.356 ms/op
                 executeQuery·p0.50:   1912.603 ms/op
                 executeQuery·p0.90:   1962.934 ms/op
                 executeQuery·p0.95:   1962.934 ms/op
                 executeQuery·p0.99:   1962.934 ms/op
                 executeQuery·p0.999:  1962.934 ms/op
                 executeQuery·p0.9999: 1962.934 ms/op
                 executeQuery·p1.00:   1962.934 ms/op

Iteration   4: 1849.688 ±(99.9%) 341.350 ms/op
                 executeQuery·p0.00:   1690.305 ms/op
                 executeQuery·p0.50:   1865.417 ms/op
                 executeQuery·p0.90:   1981.809 ms/op
                 executeQuery·p0.95:   1981.809 ms/op
                 executeQuery·p0.99:   1981.809 ms/op
                 executeQuery·p0.999:  1981.809 ms/op
                 executeQuery·p0.9999: 1981.809 ms/op
                 executeQuery·p1.00:   1981.809 ms/op

Iteration   5: 1860.873 ±(99.9%) 252.386 ms/op
                 executeQuery·p0.00:   1728.053 ms/op
                 executeQuery·p0.50:   1852.834 ms/op
                 executeQuery·p0.90:   2011.169 ms/op
                 executeQuery·p0.95:   2011.169 ms/op
                 executeQuery·p0.99:   2011.169 ms/op
                 executeQuery·p0.999:  2011.169 ms/op
                 executeQuery·p0.9999: 2011.169 ms/op
                 executeQuery·p1.00:   2011.169 ms/op


# Run progress: 11.56% complete, ETA 08:42:49
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2000.683 ±(99.9%) 509.934 ms/op
# Warmup Iteration   2: 1890.233 ±(99.9%) 162.407 ms/op
# Warmup Iteration   3: 1927.632 ±(99.9%) 379.345 ms/op
# Warmup Iteration   4: 1873.106 ±(99.9%) 313.980 ms/op
# Warmup Iteration   5: 1907.709 ±(99.9%) 300.340 ms/op
Iteration   1: 1872.058 ±(99.9%) 122.494 ms/op
                 executeQuery·p0.00:   1822.425 ms/op
                 executeQuery·p0.50:   1862.271 ms/op
                 executeQuery·p0.90:   1944.060 ms/op
                 executeQuery·p0.95:   1944.060 ms/op
                 executeQuery·p0.99:   1944.060 ms/op
                 executeQuery·p0.999:  1944.060 ms/op
                 executeQuery·p0.9999: 1944.060 ms/op
                 executeQuery·p1.00:   1944.060 ms/op

Iteration   2: 1859.475 ±(99.9%) 163.933 ms/op
                 executeQuery·p0.00:   1769.996 ms/op
                 executeQuery·p0.50:   1860.174 ms/op
                 executeQuery·p0.90:   1948.254 ms/op
                 executeQuery·p0.95:   1948.254 ms/op
                 executeQuery·p0.99:   1948.254 ms/op
                 executeQuery·p0.999:  1948.254 ms/op
                 executeQuery·p0.9999: 1948.254 ms/op
                 executeQuery·p1.00:   1948.254 ms/op

Iteration   3: 1903.515 ±(99.9%) 218.198 ms/op
                 executeQuery·p0.00:   1801.454 ms/op
                 executeQuery·p0.50:   1908.408 ms/op
                 executeQuery·p0.90:   1994.392 ms/op
                 executeQuery·p0.95:   1994.392 ms/op
                 executeQuery·p0.99:   1994.392 ms/op
                 executeQuery·p0.999:  1994.392 ms/op
                 executeQuery·p0.9999: 1994.392 ms/op
                 executeQuery·p1.00:   1994.392 ms/op

Iteration   4: 1886.738 ±(99.9%) 237.039 ms/op
                 executeQuery·p0.00:   1744.830 ms/op
                 executeQuery·p0.50:   1893.728 ms/op
                 executeQuery·p0.90:   1983.906 ms/op
                 executeQuery·p0.95:   1983.906 ms/op
                 executeQuery·p0.99:   1983.906 ms/op
                 executeQuery·p0.999:  1983.906 ms/op
                 executeQuery·p0.9999: 1983.906 ms/op
                 executeQuery·p1.00:   1983.906 ms/op

Iteration   5: 1879.048 ±(99.9%) 166.874 ms/op
                 executeQuery·p0.00:   1769.996 ms/op
                 executeQuery·p0.50:   1888.485 ms/op
                 executeQuery·p0.90:   1946.157 ms/op
                 executeQuery·p0.95:   1946.157 ms/op
                 executeQuery·p0.99:   1946.157 ms/op
                 executeQuery·p0.999:  1946.157 ms/op
                 executeQuery·p0.9999: 1946.157 ms/op
                 executeQuery·p1.00:   1946.157 ms/op


# Run progress: 11.88% complete, ETA 08:41:35
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2009.491 ±(99.9%) 479.871 ms/op
# Warmup Iteration   2: 1855.980 ±(99.9%) 134.206 ms/op
# Warmup Iteration   3: 1854.931 ±(99.9%) 210.423 ms/op
# Warmup Iteration   4: 1876.951 ±(99.9%) 208.217 ms/op
# Warmup Iteration   5: 1886.039 ±(99.9%) 183.823 ms/op
Iteration   1: 1890.233 ±(99.9%) 281.092 ms/op
                 executeQuery·p0.00:   1795.162 ms/op
                 executeQuery·p0.50:   1869.611 ms/op
                 executeQuery·p0.90:   2082.472 ms/op
                 executeQuery·p0.95:   2082.472 ms/op
                 executeQuery·p0.99:   2082.472 ms/op
                 executeQuery·p0.999:  2082.472 ms/op
                 executeQuery·p0.9999: 2082.472 ms/op
                 executeQuery·p1.00:   2082.472 ms/op

Iteration   2: 1851.086 ±(99.9%) 216.863 ms/op
                 executeQuery·p0.00:   1765.802 ms/op
                 executeQuery·p0.50:   1849.688 ms/op
                 executeQuery·p0.90:   1986.003 ms/op
                 executeQuery·p0.95:   1986.003 ms/op
                 executeQuery·p0.99:   1986.003 ms/op
                 executeQuery·p0.999:  1986.003 ms/op
                 executeQuery·p0.9999: 1986.003 ms/op
                 executeQuery·p1.00:   1986.003 ms/op

Iteration   3: 1887.087 ±(99.9%) 152.965 ms/op
                 executeQuery·p0.00:   1788.871 ms/op
                 executeQuery·p0.50:   1898.971 ms/op
                 executeQuery·p0.90:   1933.574 ms/op
                 executeQuery·p0.95:   1933.574 ms/op
                 executeQuery·p0.99:   1933.574 ms/op
                 executeQuery·p0.999:  1933.574 ms/op
                 executeQuery·p0.9999: 1933.574 ms/op
                 executeQuery·p1.00:   1933.574 ms/op

Iteration   4: 1874.854 ±(99.9%) 278.802 ms/op
                 executeQuery·p0.00:   1790.968 ms/op
                 executeQuery·p0.50:   1846.542 ms/op
                 executeQuery·p0.90:   2063.598 ms/op
                 executeQuery·p0.95:   2063.598 ms/op
                 executeQuery·p0.99:   2063.598 ms/op
                 executeQuery·p0.999:  2063.598 ms/op
                 executeQuery·p0.9999: 2063.598 ms/op
                 executeQuery·p1.00:   2063.598 ms/op

Iteration   5: 1878.349 ±(99.9%) 272.648 ms/op
                 executeQuery·p0.00:   1759.511 ms/op
                 executeQuery·p0.50:   1867.514 ms/op
                 executeQuery·p0.90:   1990.197 ms/op
                 executeQuery·p0.95:   1990.197 ms/op
                 executeQuery·p0.99:   1990.197 ms/op
                 executeQuery·p0.999:  1990.197 ms/op
                 executeQuery·p0.9999: 1990.197 ms/op
                 executeQuery·p1.00:   1990.197 ms/op


# Run progress: 12.19% complete, ETA 08:40:13
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1996.908 ±(99.9%) 385.019 ms/op
# Warmup Iteration   2: 1894.078 ±(99.9%) 64.466 ms/op
# Warmup Iteration   3: 1865.417 ±(99.9%) 245.583 ms/op
# Warmup Iteration   4: 1956.293 ±(99.9%) 183.587 ms/op
# Warmup Iteration   5: 1874.854 ±(99.9%) 401.913 ms/op
Iteration   1: 1879.398 ±(99.9%) 183.021 ms/op
                 executeQuery·p0.00:   1772.093 ms/op
                 executeQuery·p0.50:   1881.145 ms/op
                 executeQuery·p0.90:   1977.614 ms/op
                 executeQuery·p0.95:   1977.614 ms/op
                 executeQuery·p0.99:   1977.614 ms/op
                 executeQuery·p0.999:  1977.614 ms/op
                 executeQuery·p0.9999: 1977.614 ms/op
                 executeQuery·p1.00:   1977.614 ms/op

Iteration   2: 1908.758 ±(99.9%) 213.479 ms/op
                 executeQuery·p0.00:   1790.968 ms/op
                 executeQuery·p0.50:   1904.214 ms/op
                 executeQuery·p0.90:   2015.363 ms/op
                 executeQuery·p0.95:   2015.363 ms/op
                 executeQuery·p0.99:   2015.363 ms/op
                 executeQuery·p0.999:  2015.363 ms/op
                 executeQuery·p0.9999: 2015.363 ms/op
                 executeQuery·p1.00:   2015.363 ms/op

Iteration   3: 1918.894 ±(99.9%) 106.441 ms/op
                 executeQuery·p0.00:   1868.562 ms/op
                 executeQuery·p0.50:   1907.360 ms/op
                 executeQuery·p0.90:   1965.031 ms/op
                 executeQuery·p0.95:   1965.031 ms/op
                 executeQuery·p0.99:   1965.031 ms/op
                 executeQuery·p0.999:  1965.031 ms/op
                 executeQuery·p0.9999: 1965.031 ms/op
                 executeQuery·p1.00:   1965.031 ms/op

Iteration   4: 1891.631 ±(99.9%) 242.215 ms/op
                 executeQuery·p0.00:   1790.968 ms/op
                 executeQuery·p0.50:   1894.777 ms/op
                 executeQuery·p0.90:   2042.626 ms/op
                 executeQuery·p0.95:   2042.626 ms/op
                 executeQuery·p0.99:   2042.626 ms/op
                 executeQuery·p0.999:  2042.626 ms/op
                 executeQuery·p0.9999: 2042.626 ms/op
                 executeQuery·p1.00:   2042.626 ms/op

Iteration   5: 1873.456 ±(99.9%) 273.989 ms/op
                 executeQuery·p0.00:   1774.191 ms/op
                 executeQuery·p0.50:   1881.145 ms/op
                 executeQuery·p0.90:   2042.626 ms/op
                 executeQuery·p0.95:   2042.626 ms/op
                 executeQuery·p0.99:   2042.626 ms/op
                 executeQuery·p0.999:  2042.626 ms/op
                 executeQuery·p0.9999: 2042.626 ms/op
                 executeQuery·p1.00:   2042.626 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 150
  mean =   1882.166 ±(99.9%) 21.724 ms/op

  Histogram, ms/op:
    [1600.000, 1650.000) = 0 
    [1650.000, 1700.000) = 1 
    [1700.000, 1750.000) = 5 
    [1750.000, 1800.000) = 19 
    [1800.000, 1850.000) = 23 
    [1850.000, 1900.000) = 44 
    [1900.000, 1950.000) = 26 
    [1950.000, 2000.000) = 24 
    [2000.000, 2050.000) = 5 
    [2050.000, 2100.000) = 2 
    [2100.000, 2150.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1690.305 ms/op
     p(50.0000) =   1879.048 ms/op
     p(90.0000) =   1981.389 ms/op
     p(95.0000) =   2005.402 ms/op
     p(99.0000) =   2138.990 ms/op
     p(99.9000) =   2197.815 ms/op
     p(99.9900) =   2197.815 ms/op
     p(99.9990) =   2197.815 ms/op
     p(99.9999) =   2197.815 ms/op
    p(100.0000) =   2197.815 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2)

# Run progress: 12.50% complete, ETA 08:38:58
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2333.711 ±(99.9%) 499.970 ms/op
# Warmup Iteration   2: 2215.431 ±(99.9%) 277.728 ms/op
# Warmup Iteration   3: 2213.754 ±(99.9%) 188.141 ms/op
# Warmup Iteration   4: 2250.664 ±(99.9%) 232.537 ms/op
# Warmup Iteration   5: 2236.822 ±(99.9%) 375.032 ms/op
Iteration   1: 2200.751 ±(99.9%) 461.486 ms/op
                 executeQuery·p0.00:   2078.278 ms/op
                 executeQuery·p0.50:   2197.815 ms/op
                 executeQuery·p0.90:   2348.810 ms/op
                 executeQuery·p0.95:   2348.810 ms/op
                 executeQuery·p0.99:   2348.810 ms/op
                 executeQuery·p0.999:  2348.810 ms/op
                 executeQuery·p0.9999: 2348.810 ms/op
                 executeQuery·p1.00:   2348.810 ms/op

Iteration   2: 2265.763 ±(99.9%) 454.867 ms/op
                 executeQuery·p0.00:   2185.232 ms/op
                 executeQuery·p0.50:   2218.787 ms/op
                 executeQuery·p0.90:   2470.445 ms/op
                 executeQuery·p0.95:   2470.445 ms/op
                 executeQuery·p0.99:   2470.445 ms/op
                 executeQuery·p0.999:  2470.445 ms/op
                 executeQuery·p0.9999: 2470.445 ms/op
                 executeQuery·p1.00:   2470.445 ms/op

Iteration   3: 2232.209 ±(99.9%) 254.189 ms/op
                 executeQuery·p0.00:   2168.455 ms/op
                 executeQuery·p0.50:   2214.593 ms/op
                 executeQuery·p0.90:   2336.227 ms/op
                 executeQuery·p0.95:   2336.227 ms/op
                 executeQuery·p0.99:   2336.227 ms/op
                 executeQuery·p0.999:  2336.227 ms/op
                 executeQuery·p0.9999: 2336.227 ms/op
                 executeQuery·p1.00:   2336.227 ms/op

Iteration   4: 2218.787 ±(99.9%) 159.476 ms/op
                 executeQuery·p0.00:   2168.455 ms/op
                 executeQuery·p0.50:   2235.564 ms/op
                 executeQuery·p0.90:   2260.730 ms/op
                 executeQuery·p0.95:   2260.730 ms/op
                 executeQuery·p0.99:   2260.730 ms/op
                 executeQuery·p0.999:  2260.730 ms/op
                 executeQuery·p0.9999: 2260.730 ms/op
                 executeQuery·p1.00:   2260.730 ms/op

Iteration   5: 2191.524 ±(99.9%) 433.295 ms/op
                 executeQuery·p0.00:   2065.695 ms/op
                 executeQuery·p0.50:   2197.815 ms/op
                 executeQuery·p0.90:   2361.393 ms/op
                 executeQuery·p0.95:   2361.393 ms/op
                 executeQuery·p0.99:   2361.393 ms/op
                 executeQuery·p0.999:  2361.393 ms/op
                 executeQuery·p0.9999: 2361.393 ms/op
                 executeQuery·p1.00:   2361.393 ms/op


# Run progress: 12.81% complete, ETA 08:37:36
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2385.720 ±(99.9%) 477.528 ms/op
# Warmup Iteration   2: 2268.280 ±(99.9%) 335.959 ms/op
# Warmup Iteration   3: 2243.953 ±(99.9%) 234.604 ms/op
# Warmup Iteration   4: 2228.853 ±(99.9%) 111.662 ms/op
# Warmup Iteration   5: 2242.275 ±(99.9%) 245.895 ms/op
Iteration   1: 2227.595 ±(99.9%) 239.582 ms/op
                 executeQuery·p0.00:   2128.609 ms/op
                 executeQuery·p0.50:   2235.564 ms/op
                 executeQuery·p0.90:   2294.284 ms/op
                 executeQuery·p0.95:   2294.284 ms/op
                 executeQuery·p0.99:   2294.284 ms/op
                 executeQuery·p0.999:  2294.284 ms/op
                 executeQuery·p0.9999: 2294.284 ms/op
                 executeQuery·p1.00:   2294.284 ms/op

Iteration   2: 2199.493 ±(99.9%) 132.495 ms/op
                 executeQuery·p0.00:   2155.872 ms/op
                 executeQuery·p0.50:   2197.815 ms/op
                 executeQuery·p0.90:   2235.564 ms/op
                 executeQuery·p0.95:   2235.564 ms/op
                 executeQuery·p0.99:   2235.564 ms/op
                 executeQuery·p0.999:  2235.564 ms/op
                 executeQuery·p0.9999: 2235.564 ms/op
                 executeQuery·p1.00:   2235.564 ms/op

Iteration   3: 2199.912 ±(99.9%) 372.782 ms/op
                 executeQuery·p0.00:   2090.861 ms/op
                 executeQuery·p0.50:   2155.872 ms/op
                 executeQuery·p0.90:   2323.644 ms/op
                 executeQuery·p0.95:   2323.644 ms/op
                 executeQuery·p0.99:   2323.644 ms/op
                 executeQuery·p0.999:  2323.644 ms/op
                 executeQuery·p0.9999: 2323.644 ms/op
                 executeQuery·p1.00:   2323.644 ms/op

Iteration   4: 2248.147 ±(99.9%) 324.023 ms/op
                 executeQuery·p0.00:   2151.678 ms/op
                 executeQuery·p0.50:   2239.758 ms/op
                 executeQuery·p0.90:   2378.170 ms/op
                 executeQuery·p0.95:   2378.170 ms/op
                 executeQuery·p0.99:   2378.170 ms/op
                 executeQuery·p0.999:  2378.170 ms/op
                 executeQuery·p0.9999: 2378.170 ms/op
                 executeQuery·p1.00:   2378.170 ms/op

Iteration   5: 2200.751 ±(99.9%) 439.259 ms/op
                 executeQuery·p0.00:   2080.375 ms/op
                 executeQuery·p0.50:   2197.815 ms/op
                 executeQuery·p0.90:   2344.616 ms/op
                 executeQuery·p0.95:   2344.616 ms/op
                 executeQuery·p0.99:   2344.616 ms/op
                 executeQuery·p0.999:  2344.616 ms/op
                 executeQuery·p0.9999: 2344.616 ms/op
                 executeQuery·p1.00:   2344.616 ms/op


# Run progress: 13.13% complete, ETA 08:36:14
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2374.815 ±(99.9%) 497.197 ms/op
# Warmup Iteration   2: 2234.725 ±(99.9%) 187.098 ms/op
# Warmup Iteration   3: 2283.379 ±(99.9%) 231.413 ms/op
# Warmup Iteration   4: 2204.107 ±(99.9%) 418.364 ms/op
# Warmup Iteration   5: 2214.173 ±(99.9%) 418.068 ms/op
Iteration   1: 2212.076 ±(99.9%) 409.160 ms/op
                 executeQuery·p0.00:   2071.986 ms/op
                 executeQuery·p0.50:   2206.204 ms/op
                 executeQuery·p0.90:   2369.782 ms/op
                 executeQuery·p0.95:   2369.782 ms/op
                 executeQuery·p0.99:   2369.782 ms/op
                 executeQuery·p0.999:  2369.782 ms/op
                 executeQuery·p0.9999: 2369.782 ms/op
                 executeQuery·p1.00:   2369.782 ms/op

Iteration   2: 2254.019 ±(99.9%) 136.376 ms/op
                 executeQuery·p0.00:   2197.815 ms/op
                 executeQuery·p0.50:   2256.536 ms/op
                 executeQuery·p0.90:   2294.284 ms/op
                 executeQuery·p0.95:   2294.284 ms/op
                 executeQuery·p0.99:   2294.284 ms/op
                 executeQuery·p0.999:  2294.284 ms/op
                 executeQuery·p0.9999: 2294.284 ms/op
                 executeQuery·p1.00:   2294.284 ms/op

Iteration   3: 2190.685 ±(99.9%) 263.881 ms/op
                 executeQuery·p0.00:   2086.666 ms/op
                 executeQuery·p0.50:   2189.427 ms/op
                 executeQuery·p0.90:   2273.313 ms/op
                 executeQuery·p0.95:   2273.313 ms/op
                 executeQuery·p0.99:   2273.313 ms/op
                 executeQuery·p0.999:  2273.313 ms/op
                 executeQuery·p0.9999: 2273.313 ms/op
                 executeQuery·p1.00:   2273.313 ms/op

Iteration   4: 2271.635 ±(99.9%) 209.213 ms/op
                 executeQuery·p0.00:   2185.232 ms/op
                 executeQuery·p0.50:   2298.479 ms/op
                 executeQuery·p0.90:   2319.450 ms/op
                 executeQuery·p0.95:   2319.450 ms/op
                 executeQuery·p0.99:   2319.450 ms/op
                 executeQuery·p0.999:  2319.450 ms/op
                 executeQuery·p0.9999: 2319.450 ms/op
                 executeQuery·p1.00:   2319.450 ms/op

Iteration   5: 2262.827 ±(99.9%) 431.712 ms/op
                 executeQuery·p0.00:   2090.861 ms/op
                 executeQuery·p0.50:   2281.701 ms/op
                 executeQuery·p0.90:   2382.365 ms/op
                 executeQuery·p0.95:   2382.365 ms/op
                 executeQuery·p0.99:   2382.365 ms/op
                 executeQuery·p0.999:  2382.365 ms/op
                 executeQuery·p0.9999: 2382.365 ms/op
                 executeQuery·p1.00:   2382.365 ms/op


# Run progress: 13.44% complete, ETA 08:34:53
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2347.971 ±(99.9%) 543.084 ms/op
# Warmup Iteration   2: 2288.412 ±(99.9%) 244.566 ms/op
# Warmup Iteration   3: 2230.950 ±(99.9%) 327.148 ms/op
# Warmup Iteration   4: 2253.180 ±(99.9%) 393.529 ms/op
# Warmup Iteration   5: 2218.787 ±(99.9%) 122.469 ms/op
Iteration   1: 2233.886 ±(99.9%) 343.294 ms/op
                 executeQuery·p0.00:   2105.541 ms/op
                 executeQuery·p0.50:   2227.175 ms/op
                 executeQuery·p0.90:   2340.422 ms/op
                 executeQuery·p0.95:   2340.422 ms/op
                 executeQuery·p0.99:   2340.422 ms/op
                 executeQuery·p0.999:  2340.422 ms/op
                 executeQuery·p0.9999: 2340.422 ms/op
                 executeQuery·p1.00:   2340.422 ms/op

Iteration   2: 2235.145 ±(99.9%) 394.886 ms/op
                 executeQuery·p0.00:   2086.666 ms/op
                 executeQuery·p0.50:   2281.701 ms/op
                 executeQuery·p0.90:   2332.033 ms/op
                 executeQuery·p0.95:   2332.033 ms/op
                 executeQuery·p0.99:   2332.033 ms/op
                 executeQuery·p0.999:  2332.033 ms/op
                 executeQuery·p0.9999: 2332.033 ms/op
                 executeQuery·p1.00:   2332.033 ms/op

Iteration   3: 2228.014 ±(99.9%) 367.301 ms/op
                 executeQuery·p0.00:   2088.763 ms/op
                 executeQuery·p0.50:   2264.924 ms/op
                 executeQuery·p0.90:   2315.256 ms/op
                 executeQuery·p0.95:   2315.256 ms/op
                 executeQuery·p0.99:   2315.256 ms/op
                 executeQuery·p0.999:  2315.256 ms/op
                 executeQuery·p0.9999: 2315.256 ms/op
                 executeQuery·p1.00:   2315.256 ms/op

Iteration   4: 2242.275 ±(99.9%) 160.941 ms/op
                 executeQuery·p0.00:   2185.232 ms/op
                 executeQuery·p0.50:   2239.758 ms/op
                 executeQuery·p0.90:   2302.673 ms/op
                 executeQuery·p0.95:   2302.673 ms/op
                 executeQuery·p0.99:   2302.673 ms/op
                 executeQuery·p0.999:  2302.673 ms/op
                 executeQuery·p0.9999: 2302.673 ms/op
                 executeQuery·p1.00:   2302.673 ms/op

Iteration   5: 2191.524 ±(99.9%) 390.468 ms/op
                 executeQuery·p0.00:   2095.055 ms/op
                 executeQuery·p0.50:   2181.038 ms/op
                 executeQuery·p0.90:   2327.839 ms/op
                 executeQuery·p0.95:   2327.839 ms/op
                 executeQuery·p0.99:   2327.839 ms/op
                 executeQuery·p0.999:  2327.839 ms/op
                 executeQuery·p0.9999: 2327.839 ms/op
                 executeQuery·p1.00:   2327.839 ms/op


# Run progress: 13.75% complete, ETA 08:33:29
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2351.327 ±(99.9%) 480.957 ms/op
# Warmup Iteration   2: 2263.246 ±(99.9%) 344.053 ms/op
# Warmup Iteration   3: 2239.758 ±(99.9%) 265.138 ms/op
# Warmup Iteration   4: 2244.792 ±(99.9%) 492.453 ms/op
# Warmup Iteration   5: 2181.877 ±(99.9%) 522.802 ms/op
Iteration   1: 2192.782 ±(99.9%) 125.831 ms/op
                 executeQuery·p0.00:   2155.872 ms/op
                 executeQuery·p0.50:   2181.038 ms/op
                 executeQuery·p0.90:   2239.758 ms/op
                 executeQuery·p0.95:   2239.758 ms/op
                 executeQuery·p0.99:   2239.758 ms/op
                 executeQuery·p0.999:  2239.758 ms/op
                 executeQuery·p0.9999: 2239.758 ms/op
                 executeQuery·p1.00:   2239.758 ms/op

Iteration   2: 2203.687 ±(99.9%) 312.675 ms/op
                 executeQuery·p0.00:   2071.986 ms/op
                 executeQuery·p0.50:   2231.370 ms/op
                 executeQuery·p0.90:   2285.896 ms/op
                 executeQuery·p0.95:   2285.896 ms/op
                 executeQuery·p0.99:   2285.896 ms/op
                 executeQuery·p0.999:  2285.896 ms/op
                 executeQuery·p0.9999: 2285.896 ms/op
                 executeQuery·p1.00:   2285.896 ms/op

Iteration   3: 2203.268 ±(99.9%) 333.426 ms/op
                 executeQuery·p0.00:   2069.889 ms/op
                 executeQuery·p0.50:   2227.175 ms/op
                 executeQuery·p0.90:   2294.284 ms/op
                 executeQuery·p0.95:   2294.284 ms/op
                 executeQuery·p0.99:   2294.284 ms/op
                 executeQuery·p0.999:  2294.284 ms/op
                 executeQuery·p0.9999: 2294.284 ms/op
                 executeQuery·p1.00:   2294.284 ms/op

Iteration   4: 2240.178 ±(99.9%) 358.896 ms/op
                 executeQuery·p0.00:   2103.443 ms/op
                 executeQuery·p0.50:   2281.701 ms/op
                 executeQuery·p0.90:   2319.450 ms/op
                 executeQuery·p0.95:   2319.450 ms/op
                 executeQuery·p0.99:   2319.450 ms/op
                 executeQuery·p0.999:  2319.450 ms/op
                 executeQuery·p0.9999: 2319.450 ms/op
                 executeQuery·p1.00:   2319.450 ms/op

Iteration   5: 2217.948 ±(99.9%) 297.016 ms/op
                 executeQuery·p0.00:   2118.124 ms/op
                 executeQuery·p0.50:   2202.010 ms/op
                 executeQuery·p0.90:   2319.450 ms/op
                 executeQuery·p0.95:   2319.450 ms/op
                 executeQuery·p0.99:   2319.450 ms/op
                 executeQuery·p0.999:  2319.450 ms/op
                 executeQuery·p0.9999: 2319.450 ms/op
                 executeQuery·p1.00:   2319.450 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 125
  mean =   2222.595 ±(99.9%) 24.393 ms/op

  Histogram, ms/op:
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 15 
    [2100.000, 2150.000) = 5 
    [2150.000, 2200.000) = 31 
    [2200.000, 2250.000) = 26 
    [2250.000, 2300.000) = 27 
    [2300.000, 2350.000) = 16 
    [2350.000, 2400.000) = 4 
    [2400.000, 2450.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2065.695 ms/op
     p(50.0000) =   2227.175 ms/op
     p(90.0000) =   2325.322 ms/op
     p(95.0000) =   2347.552 ms/op
     p(99.0000) =   2447.544 ms/op
     p(99.9000) =   2470.445 ms/op
     p(99.9900) =   2470.445 ms/op
     p(99.9990) =   2470.445 ms/op
     p(99.9999) =   2470.445 ms/op
    p(100.0000) =   2470.445 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4)

# Run progress: 14.06% complete, ETA 08:32:01
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2404.175 ±(99.9%) 389.197 ms/op
# Warmup Iteration   2: 2282.540 ±(99.9%) 266.218 ms/op
# Warmup Iteration   3: 2342.099 ±(99.9%) 336.774 ms/op
# Warmup Iteration   4: 2314.417 ±(99.9%) 496.147 ms/op
# Warmup Iteration   5: 2293.445 ±(99.9%) 251.610 ms/op
Iteration   1: 2293.445 ±(99.9%) 406.890 ms/op
                 executeQuery·p0.00:   2122.318 ms/op
                 executeQuery·p0.50:   2315.256 ms/op
                 executeQuery·p0.90:   2386.559 ms/op
                 executeQuery·p0.95:   2386.559 ms/op
                 executeQuery·p0.99:   2386.559 ms/op
                 executeQuery·p0.999:  2386.559 ms/op
                 executeQuery·p0.9999: 2386.559 ms/op
                 executeQuery·p1.00:   2386.559 ms/op

Iteration   2: 2273.313 ±(99.9%) 295.828 ms/op
                 executeQuery·p0.00:   2168.455 ms/op
                 executeQuery·p0.50:   2256.536 ms/op
                 executeQuery·p0.90:   2373.976 ms/op
                 executeQuery·p0.95:   2373.976 ms/op
                 executeQuery·p0.99:   2373.976 ms/op
                 executeQuery·p0.999:  2373.976 ms/op
                 executeQuery·p0.9999: 2373.976 ms/op
                 executeQuery·p1.00:   2373.976 ms/op

Iteration   3: 2340.422 ±(99.9%) 325.429 ms/op
                 executeQuery·p0.00:   2235.564 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2470.445 ms/op
                 executeQuery·p0.95:   2470.445 ms/op
                 executeQuery·p0.99:   2470.445 ms/op
                 executeQuery·p0.999:  2470.445 ms/op
                 executeQuery·p0.9999: 2470.445 ms/op
                 executeQuery·p1.00:   2470.445 ms/op

Iteration   4: 2274.990 ±(99.9%) 413.441 ms/op
                 executeQuery·p0.00:   2130.706 ms/op
                 executeQuery·p0.50:   2290.090 ms/op
                 executeQuery·p0.90:   2420.113 ms/op
                 executeQuery·p0.95:   2420.113 ms/op
                 executeQuery·p0.99:   2420.113 ms/op
                 executeQuery·p0.999:  2420.113 ms/op
                 executeQuery·p0.9999: 2420.113 ms/op
                 executeQuery·p1.00:   2420.113 ms/op

Iteration   5: 2257.374 ±(99.9%) 146.874 ms/op
                 executeQuery·p0.00:   2218.787 ms/op
                 executeQuery·p0.50:   2256.536 ms/op
                 executeQuery·p0.90:   2319.450 ms/op
                 executeQuery·p0.95:   2319.450 ms/op
                 executeQuery·p0.99:   2319.450 ms/op
                 executeQuery·p0.999:  2319.450 ms/op
                 executeQuery·p0.9999: 2319.450 ms/op
                 executeQuery·p1.00:   2319.450 ms/op


# Run progress: 14.37% complete, ETA 08:30:52
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2471.494 ±(99.9%) 879.196 ms/op
# Warmup Iteration   2: 2331.194 ±(99.9%) 247.165 ms/op
# Warmup Iteration   3: 2311.062 ±(99.9%) 287.329 ms/op
# Warmup Iteration   4: 2280.443 ±(99.9%) 660.940 ms/op
# Warmup Iteration   5: 2280.024 ±(99.9%) 428.315 ms/op
Iteration   1: 2325.322 ±(99.9%) 584.292 ms/op
                 executeQuery·p0.00:   2160.067 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2558.525 ms/op
                 executeQuery·p0.95:   2558.525 ms/op
                 executeQuery·p0.99:   2558.525 ms/op
                 executeQuery·p0.999:  2558.525 ms/op
                 executeQuery·p0.9999: 2558.525 ms/op
                 executeQuery·p1.00:   2558.525 ms/op

Iteration   2: 2288.412 ±(99.9%) 207.649 ms/op
                 executeQuery·p0.00:   2202.010 ms/op
                 executeQuery·p0.50:   2290.090 ms/op
                 executeQuery·p0.90:   2348.810 ms/op
                 executeQuery·p0.95:   2348.810 ms/op
                 executeQuery·p0.99:   2348.810 ms/op
                 executeQuery·p0.999:  2348.810 ms/op
                 executeQuery·p0.9999: 2348.810 ms/op
                 executeQuery·p1.00:   2348.810 ms/op

Iteration   3: 2264.085 ±(99.9%) 287.420 ms/op
                 executeQuery·p0.00:   2151.678 ms/op
                 executeQuery·p0.50:   2264.924 ms/op
                 executeQuery·p0.90:   2353.005 ms/op
                 executeQuery·p0.95:   2353.005 ms/op
                 executeQuery·p0.99:   2353.005 ms/op
                 executeQuery·p0.999:  2353.005 ms/op
                 executeQuery·p0.9999: 2353.005 ms/op
                 executeQuery·p1.00:   2353.005 ms/op

Iteration   4: 2288.412 ±(99.9%) 240.804 ms/op
                 executeQuery·p0.00:   2214.593 ms/op
                 executeQuery·p0.50:   2323.644 ms/op
                 executeQuery·p0.90:   2348.810 ms/op
                 executeQuery·p0.95:   2348.810 ms/op
                 executeQuery·p0.99:   2348.810 ms/op
                 executeQuery·p0.999:  2348.810 ms/op
                 executeQuery·p0.9999: 2348.810 ms/op
                 executeQuery·p1.00:   2348.810 ms/op

Iteration   5: 2293.445 ±(99.9%) 319.647 ms/op
                 executeQuery·p0.00:   2172.649 ms/op
                 executeQuery·p0.50:   2285.896 ms/op
                 executeQuery·p0.90:   2399.142 ms/op
                 executeQuery·p0.95:   2399.142 ms/op
                 executeQuery·p0.99:   2399.142 ms/op
                 executeQuery·p0.999:  2399.142 ms/op
                 executeQuery·p0.9999: 2399.142 ms/op
                 executeQuery·p1.00:   2399.142 ms/op


# Run progress: 14.69% complete, ETA 08:29:28
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2485.125 ±(99.9%) 1071.076 ms/op
# Warmup Iteration   2: 2274.152 ±(99.9%) 176.702 ms/op
# Warmup Iteration   3: 2328.678 ±(99.9%) 337.122 ms/op
# Warmup Iteration   4: 2251.083 ±(99.9%) 515.296 ms/op
# Warmup Iteration   5: 2229.692 ±(99.9%) 250.883 ms/op
Iteration   1: 2337.905 ±(99.9%) 198.003 ms/op
                 executeQuery·p0.00:   2290.090 ms/op
                 executeQuery·p0.50:   2319.450 ms/op
                 executeQuery·p0.90:   2394.948 ms/op
                 executeQuery·p0.95:   2394.948 ms/op
                 executeQuery·p0.99:   2394.948 ms/op
                 executeQuery·p0.999:  2394.948 ms/op
                 executeQuery·p0.9999: 2394.948 ms/op
                 executeQuery·p1.00:   2394.948 ms/op

Iteration   2: 2245.630 ±(99.9%) 351.367 ms/op
                 executeQuery·p0.00:   2147.484 ms/op
                 executeQuery·p0.50:   2227.175 ms/op
                 executeQuery·p0.90:   2386.559 ms/op
                 executeQuery·p0.95:   2386.559 ms/op
                 executeQuery·p0.99:   2386.559 ms/op
                 executeQuery·p0.999:  2386.559 ms/op
                 executeQuery·p0.9999: 2386.559 ms/op
                 executeQuery·p1.00:   2386.559 ms/op

Iteration   3: 2297.640 ±(99.9%) 251.091 ms/op
                 executeQuery·p0.00:   2193.621 ms/op
                 executeQuery·p0.50:   2336.227 ms/op
                 executeQuery·p0.90:   2348.810 ms/op
                 executeQuery·p0.95:   2348.810 ms/op
                 executeQuery·p0.99:   2348.810 ms/op
                 executeQuery·p0.999:  2348.810 ms/op
                 executeQuery·p0.9999: 2348.810 ms/op
                 executeQuery·p1.00:   2348.810 ms/op

Iteration   4: 2233.047 ±(99.9%) 414.386 ms/op
                 executeQuery·p0.00:   2122.318 ms/op
                 executeQuery·p0.50:   2193.621 ms/op
                 executeQuery·p0.90:   2365.587 ms/op
                 executeQuery·p0.95:   2365.587 ms/op
                 executeQuery·p0.99:   2365.587 ms/op
                 executeQuery·p0.999:  2365.587 ms/op
                 executeQuery·p0.9999: 2365.587 ms/op
                 executeQuery·p1.00:   2365.587 ms/op

Iteration   5: 2297.640 ±(99.9%) 167.221 ms/op
                 executeQuery·p0.00:   2231.370 ms/op
                 executeQuery·p0.50:   2298.479 ms/op
                 executeQuery·p0.90:   2348.810 ms/op
                 executeQuery·p0.95:   2348.810 ms/op
                 executeQuery·p0.99:   2348.810 ms/op
                 executeQuery·p0.999:  2348.810 ms/op
                 executeQuery·p0.9999: 2348.810 ms/op
                 executeQuery·p1.00:   2348.810 ms/op


# Run progress: 15.00% complete, ETA 08:27:59
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2463.105 ±(99.9%) 841.047 ms/op
# Warmup Iteration   2: 2333.711 ±(99.9%) 249.319 ms/op
# Warmup Iteration   3: 2295.962 ±(99.9%) 267.489 ms/op
# Warmup Iteration   4: 2285.057 ±(99.9%) 95.822 ms/op
# Warmup Iteration   5: 2314.417 ±(99.9%) 431.924 ms/op
Iteration   1: 2242.275 ±(99.9%) 187.168 ms/op
                 executeQuery·p0.00:   2189.427 ms/op
                 executeQuery·p0.50:   2235.564 ms/op
                 executeQuery·p0.90:   2294.284 ms/op
                 executeQuery·p0.95:   2294.284 ms/op
                 executeQuery·p0.99:   2294.284 ms/op
                 executeQuery·p0.999:  2294.284 ms/op
                 executeQuery·p0.9999: 2294.284 ms/op
                 executeQuery·p1.00:   2294.284 ms/op

Iteration   2: 2285.057 ±(99.9%) 161.669 ms/op
                 executeQuery·p0.00:   2227.175 ms/op
                 executeQuery·p0.50:   2298.479 ms/op
                 executeQuery·p0.90:   2336.227 ms/op
                 executeQuery·p0.95:   2336.227 ms/op
                 executeQuery·p0.99:   2336.227 ms/op
                 executeQuery·p0.999:  2336.227 ms/op
                 executeQuery·p0.9999: 2336.227 ms/op
                 executeQuery·p1.00:   2336.227 ms/op

Iteration   3: 2258.213 ±(99.9%) 280.810 ms/op
                 executeQuery·p0.00:   2155.872 ms/op
                 executeQuery·p0.50:   2248.147 ms/op
                 executeQuery·p0.90:   2348.810 ms/op
                 executeQuery·p0.95:   2348.810 ms/op
                 executeQuery·p0.99:   2348.810 ms/op
                 executeQuery·p0.999:  2348.810 ms/op
                 executeQuery·p0.9999: 2348.810 ms/op
                 executeQuery·p1.00:   2348.810 ms/op

Iteration   4: 2267.860 ±(99.9%) 484.375 ms/op
                 executeQuery·p0.00:   2086.666 ms/op
                 executeQuery·p0.50:   2256.536 ms/op
                 executeQuery·p0.90:   2411.725 ms/op
                 executeQuery·p0.95:   2411.725 ms/op
                 executeQuery·p0.99:   2411.725 ms/op
                 executeQuery·p0.999:  2411.725 ms/op
                 executeQuery·p0.9999: 2411.725 ms/op
                 executeQuery·p1.00:   2411.725 ms/op

Iteration   5: 2245.630 ±(99.9%) 280.810 ms/op
                 executeQuery·p0.00:   2160.067 ms/op
                 executeQuery·p0.50:   2248.147 ms/op
                 executeQuery·p0.90:   2319.450 ms/op
                 executeQuery·p0.95:   2319.450 ms/op
                 executeQuery·p0.99:   2319.450 ms/op
                 executeQuery·p0.999:  2319.450 ms/op
                 executeQuery·p0.9999: 2319.450 ms/op
                 executeQuery·p1.00:   2319.450 ms/op


# Run progress: 15.31% complete, ETA 08:26:29
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2386.559 ±(99.9%) 580.417 ms/op
# Warmup Iteration   2: 2364.749 ±(99.9%) 279.600 ms/op
# Warmup Iteration   3: 2287.573 ±(99.9%) 266.757 ms/op
# Warmup Iteration   4: 2287.573 ±(99.9%) 263.807 ms/op
# Warmup Iteration   5: 2325.742 ±(99.9%) 605.923 ms/op
Iteration   1: 2222.142 ±(99.9%) 220.386 ms/op
                 executeQuery·p0.00:   2151.678 ms/op
                 executeQuery·p0.50:   2222.981 ms/op
                 executeQuery·p0.90:   2290.090 ms/op
                 executeQuery·p0.95:   2290.090 ms/op
                 executeQuery·p0.99:   2290.090 ms/op
                 executeQuery·p0.999:  2290.090 ms/op
                 executeQuery·p0.9999: 2290.090 ms/op
                 executeQuery·p1.00:   2290.090 ms/op

Iteration   2: 2292.607 ±(99.9%) 394.555 ms/op
                 executeQuery·p0.00:   2160.067 ms/op
                 executeQuery·p0.50:   2273.313 ms/op
                 executeQuery·p0.90:   2407.530 ms/op
                 executeQuery·p0.95:   2407.530 ms/op
                 executeQuery·p0.99:   2407.530 ms/op
                 executeQuery·p0.999:  2407.530 ms/op
                 executeQuery·p0.9999: 2407.530 ms/op
                 executeQuery·p1.00:   2407.530 ms/op

Iteration   3: 2327.000 ±(99.9%) 341.160 ms/op
                 executeQuery·p0.00:   2185.232 ms/op
                 executeQuery·p0.50:   2357.199 ms/op
                 executeQuery·p0.90:   2411.725 ms/op
                 executeQuery·p0.95:   2411.725 ms/op
                 executeQuery·p0.99:   2411.725 ms/op
                 executeQuery·p0.999:  2411.725 ms/op
                 executeQuery·p0.9999: 2411.725 ms/op
                 executeQuery·p1.00:   2411.725 ms/op

Iteration   4: 2318.611 ±(99.9%) 296.797 ms/op
                 executeQuery·p0.00:   2193.621 ms/op
                 executeQuery·p0.50:   2332.033 ms/op
                 executeQuery·p0.90:   2390.753 ms/op
                 executeQuery·p0.95:   2390.753 ms/op
                 executeQuery·p0.99:   2390.753 ms/op
                 executeQuery·p0.999:  2390.753 ms/op
                 executeQuery·p0.9999: 2390.753 ms/op
                 executeQuery·p1.00:   2390.753 ms/op

Iteration   5: 2292.607 ±(99.9%) 242.692 ms/op
                 executeQuery·p0.00:   2218.787 ms/op
                 executeQuery·p0.50:   2281.701 ms/op
                 executeQuery·p0.90:   2357.199 ms/op
                 executeQuery·p0.95:   2357.199 ms/op
                 executeQuery·p0.99:   2357.199 ms/op
                 executeQuery·p0.999:  2357.199 ms/op
                 executeQuery·p0.9999: 2357.199 ms/op
                 executeQuery·p1.00:   2357.199 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 125
  mean =   2282.523 ±(99.9%) 24.300 ms/op

  Histogram, ms/op:
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 1 
    [2100.000, 2150.000) = 4 
    [2150.000, 2200.000) = 17 
    [2200.000, 2250.000) = 22 
    [2250.000, 2300.000) = 26 
    [2300.000, 2350.000) = 31 
    [2350.000, 2400.000) = 18 
    [2400.000, 2450.000) = 4 
    [2450.000, 2500.000) = 1 
    [2500.000, 2550.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2086.666 ms/op
     p(50.0000) =   2290.090 ms/op
     p(90.0000) =   2384.042 ms/op
     p(95.0000) =   2405.014 ms/op
     p(99.0000) =   2535.625 ms/op
     p(99.9000) =   2558.525 ms/op
     p(99.9900) =   2558.525 ms/op
     p(99.9990) =   2558.525 ms/op
     p(99.9999) =   2558.525 ms/op
    p(100.0000) =   2558.525 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6)

# Run progress: 15.63% complete, ETA 08:25:15
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2489.319 ±(99.9%) 794.370 ms/op
# Warmup Iteration   2: 2431.019 ±(99.9%) 241.074 ms/op
# Warmup Iteration   3: 2379.009 ±(99.9%) 312.216 ms/op
# Warmup Iteration   4: 2344.616 ±(99.9%) 245.736 ms/op
# Warmup Iteration   5: 2384.042 ±(99.9%) 361.251 ms/op
Iteration   1: 2357.199 ±(99.9%) 433.070 ms/op
                 executeQuery·p0.00:   2202.010 ms/op
                 executeQuery·p0.50:   2340.422 ms/op
                 executeQuery·p0.90:   2478.834 ms/op
                 executeQuery·p0.95:   2478.834 ms/op
                 executeQuery·p0.99:   2478.834 ms/op
                 executeQuery·p0.999:  2478.834 ms/op
                 executeQuery·p0.9999: 2478.834 ms/op
                 executeQuery·p1.00:   2478.834 ms/op

Iteration   2: 2336.227 ±(99.9%) 464.598 ms/op
                 executeQuery·p0.00:   2231.370 ms/op
                 executeQuery·p0.50:   2277.507 ms/op
                 executeQuery·p0.90:   2499.805 ms/op
                 executeQuery·p0.95:   2499.805 ms/op
                 executeQuery·p0.99:   2499.805 ms/op
                 executeQuery·p0.999:  2499.805 ms/op
                 executeQuery·p0.9999: 2499.805 ms/op
                 executeQuery·p1.00:   2499.805 ms/op

Iteration   3: 2336.227 ±(99.9%) 104.669 ms/op
                 executeQuery·p0.00:   2290.090 ms/op
                 executeQuery·p0.50:   2340.422 ms/op
                 executeQuery·p0.90:   2361.393 ms/op
                 executeQuery·p0.95:   2361.393 ms/op
                 executeQuery·p0.99:   2361.393 ms/op
                 executeQuery·p0.999:  2361.393 ms/op
                 executeQuery·p0.9999: 2361.393 ms/op
                 executeQuery·p1.00:   2361.393 ms/op

Iteration   4: 2369.782 ±(99.9%) 379.801 ms/op
                 executeQuery·p0.00:   2235.564 ms/op
                 executeQuery·p0.50:   2407.530 ms/op
                 executeQuery·p0.90:   2466.251 ms/op
                 executeQuery·p0.95:   2466.251 ms/op
                 executeQuery·p0.99:   2466.251 ms/op
                 executeQuery·p0.999:  2466.251 ms/op
                 executeQuery·p0.9999: 2466.251 ms/op
                 executeQuery·p1.00:   2466.251 ms/op

Iteration   5: 2317.772 ±(99.9%) 279.413 ms/op
                 executeQuery·p0.00:   2227.175 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2407.530 ms/op
                 executeQuery·p0.95:   2407.530 ms/op
                 executeQuery·p0.99:   2407.530 ms/op
                 executeQuery·p0.999:  2407.530 ms/op
                 executeQuery·p0.9999: 2407.530 ms/op
                 executeQuery·p1.00:   2407.530 ms/op


# Run progress: 15.94% complete, ETA 08:24:03
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2483.028 ±(99.9%) 573.247 ms/op
# Warmup Iteration   2: 2365.587 ±(99.9%) 157.832 ms/op
# Warmup Iteration   3: 2339.583 ±(99.9%) 272.991 ms/op
# Warmup Iteration   4: 2330.355 ±(99.9%) 128.498 ms/op
# Warmup Iteration   5: 2306.028 ±(99.9%) 303.746 ms/op
Iteration   1: 2364.749 ±(99.9%) 125.831 ms/op
                 executeQuery·p0.00:   2311.062 ms/op
                 executeQuery·p0.50:   2369.782 ms/op
                 executeQuery·p0.90:   2390.753 ms/op
                 executeQuery·p0.95:   2390.753 ms/op
                 executeQuery·p0.99:   2390.753 ms/op
                 executeQuery·p0.999:  2390.753 ms/op
                 executeQuery·p0.9999: 2390.753 ms/op
                 executeQuery·p1.00:   2390.753 ms/op

Iteration   2: 2369.782 ±(99.9%) 572.726 ms/op
                 executeQuery·p0.00:   2214.593 ms/op
                 executeQuery·p0.50:   2386.559 ms/op
                 executeQuery·p0.90:   2587.886 ms/op
                 executeQuery·p0.95:   2587.886 ms/op
                 executeQuery·p0.99:   2587.886 ms/op
                 executeQuery·p0.999:  2587.886 ms/op
                 executeQuery·p0.9999: 2587.886 ms/op
                 executeQuery·p1.00:   2587.886 ms/op

Iteration   3: 2326.161 ±(99.9%) 345.943 ms/op
                 executeQuery·p0.00:   2202.010 ms/op
                 executeQuery·p0.50:   2319.450 ms/op
                 executeQuery·p0.90:   2453.668 ms/op
                 executeQuery·p0.95:   2453.668 ms/op
                 executeQuery·p0.99:   2453.668 ms/op
                 executeQuery·p0.999:  2453.668 ms/op
                 executeQuery·p0.9999: 2453.668 ms/op
                 executeQuery·p1.00:   2453.668 ms/op

Iteration   4: 2389.076 ±(99.9%) 177.144 ms/op
                 executeQuery·p0.00:   2315.256 ms/op
                 executeQuery·p0.50:   2411.725 ms/op
                 executeQuery·p0.90:   2428.502 ms/op
                 executeQuery·p0.95:   2428.502 ms/op
                 executeQuery·p0.99:   2428.502 ms/op
                 executeQuery·p0.999:  2428.502 ms/op
                 executeQuery·p0.9999: 2428.502 ms/op
                 executeQuery·p1.00:   2428.502 ms/op

Iteration   5: 2319.450 ±(99.9%) 135.609 ms/op
                 executeQuery·p0.00:   2277.507 ms/op
                 executeQuery·p0.50:   2315.256 ms/op
                 executeQuery·p0.90:   2357.199 ms/op
                 executeQuery·p0.95:   2357.199 ms/op
                 executeQuery·p0.99:   2357.199 ms/op
                 executeQuery·p0.999:  2357.199 ms/op
                 executeQuery·p0.9999: 2357.199 ms/op
                 executeQuery·p1.00:   2357.199 ms/op


# Run progress: 16.25% complete, ETA 08:22:45
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2507.145 ±(99.9%) 812.617 ms/op
# Warmup Iteration   2: 2355.521 ±(99.9%) 226.284 ms/op
# Warmup Iteration   3: 2397.464 ±(99.9%) 346.320 ms/op
# Warmup Iteration   4: 2350.488 ±(99.9%) 360.347 ms/op
# Warmup Iteration   5: 2389.914 ±(99.9%) 372.415 ms/op
Iteration   1: 2321.967 ±(99.9%) 264.054 ms/op
                 executeQuery·p0.00:   2256.536 ms/op
                 executeQuery·p0.50:   2332.033 ms/op
                 executeQuery·p0.90:   2424.308 ms/op
                 executeQuery·p0.95:   2424.308 ms/op
                 executeQuery·p0.99:   2424.308 ms/op
                 executeQuery·p0.999:  2424.308 ms/op
                 executeQuery·p0.9999: 2424.308 ms/op
                 executeQuery·p1.00:   2424.308 ms/op

Iteration   2: 2358.877 ±(99.9%) 283.813 ms/op
                 executeQuery·p0.00:   2277.507 ms/op
                 executeQuery·p0.50:   2340.422 ms/op
                 executeQuery·p0.90:   2470.445 ms/op
                 executeQuery·p0.95:   2470.445 ms/op
                 executeQuery·p0.99:   2470.445 ms/op
                 executeQuery·p0.999:  2470.445 ms/op
                 executeQuery·p0.9999: 2470.445 ms/op
                 executeQuery·p1.00:   2470.445 ms/op

Iteration   3: 2396.625 ±(99.9%) 465.383 ms/op
                 executeQuery·p0.00:   2231.370 ms/op
                 executeQuery·p0.50:   2399.142 ms/op
                 executeQuery·p0.90:   2562.720 ms/op
                 executeQuery·p0.95:   2562.720 ms/op
                 executeQuery·p0.99:   2562.720 ms/op
                 executeQuery·p0.999:  2562.720 ms/op
                 executeQuery·p0.9999: 2562.720 ms/op
                 executeQuery·p1.00:   2562.720 ms/op

Iteration   4: 2414.241 ±(99.9%) 108.102 ms/op
                 executeQuery·p0.00:   2382.365 ms/op
                 executeQuery·p0.50:   2415.919 ms/op
                 executeQuery·p0.90:   2457.862 ms/op
                 executeQuery·p0.95:   2457.862 ms/op
                 executeQuery·p0.99:   2457.862 ms/op
                 executeQuery·p0.999:  2457.862 ms/op
                 executeQuery·p0.9999: 2457.862 ms/op
                 executeQuery·p1.00:   2457.862 ms/op

Iteration   5: 2360.554 ±(99.9%) 155.081 ms/op
                 executeQuery·p0.00:   2306.867 ms/op
                 executeQuery·p0.50:   2353.005 ms/op
                 executeQuery·p0.90:   2411.725 ms/op
                 executeQuery·p0.95:   2411.725 ms/op
                 executeQuery·p0.99:   2411.725 ms/op
                 executeQuery·p0.999:  2411.725 ms/op
                 executeQuery·p0.9999: 2411.725 ms/op
                 executeQuery·p1.00:   2411.725 ms/op


# Run progress: 16.56% complete, ETA 08:21:31
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2494.562 ±(99.9%) 798.022 ms/op
# Warmup Iteration   2: 2343.777 ±(99.9%) 354.104 ms/op
# Warmup Iteration   3: 2429.341 ±(99.9%) 475.749 ms/op
# Warmup Iteration   4: 2328.678 ±(99.9%) 258.513 ms/op
# Warmup Iteration   5: 2473.591 ±(99.9%) 1369.802 ms/op
Iteration   1: 2324.483 ±(99.9%) 422.922 ms/op
                 executeQuery·p0.00:   2193.621 ms/op
                 executeQuery·p0.50:   2294.284 ms/op
                 executeQuery·p0.90:   2457.862 ms/op
                 executeQuery·p0.95:   2457.862 ms/op
                 executeQuery·p0.99:   2457.862 ms/op
                 executeQuery·p0.999:  2457.862 ms/op
                 executeQuery·p0.9999: 2457.862 ms/op
                 executeQuery·p1.00:   2457.862 ms/op

Iteration   2: 2345.455 ±(99.9%) 151.249 ms/op
                 executeQuery·p0.00:   2281.701 ms/op
                 executeQuery·p0.50:   2357.199 ms/op
                 executeQuery·p0.90:   2378.170 ms/op
                 executeQuery·p0.95:   2378.170 ms/op
                 executeQuery·p0.99:   2378.170 ms/op
                 executeQuery·p0.999:  2378.170 ms/op
                 executeQuery·p0.9999: 2378.170 ms/op
                 executeQuery·p1.00:   2378.170 ms/op

Iteration   3: 2291.768 ±(99.9%) 299.900 ms/op
                 executeQuery·p0.00:   2218.787 ms/op
                 executeQuery·p0.50:   2273.313 ms/op
                 executeQuery·p0.90:   2403.336 ms/op
                 executeQuery·p0.95:   2403.336 ms/op
                 executeQuery·p0.99:   2403.336 ms/op
                 executeQuery·p0.999:  2403.336 ms/op
                 executeQuery·p0.9999: 2403.336 ms/op
                 executeQuery·p1.00:   2403.336 ms/op

Iteration   4: 2401.658 ±(99.9%) 143.824 ms/op
                 executeQuery·p0.00:   2344.616 ms/op
                 executeQuery·p0.50:   2399.142 ms/op
                 executeQuery·p0.90:   2441.085 ms/op
                 executeQuery·p0.95:   2441.085 ms/op
                 executeQuery·p0.99:   2441.085 ms/op
                 executeQuery·p0.999:  2441.085 ms/op
                 executeQuery·p0.9999: 2441.085 ms/op
                 executeQuery·p1.00:   2441.085 ms/op

Iteration   5: 2302.673 ±(99.9%) 217.286 ms/op
                 executeQuery·p0.00:   2248.147 ms/op
                 executeQuery·p0.50:   2298.479 ms/op
                 executeQuery·p0.90:   2382.365 ms/op
                 executeQuery·p0.95:   2382.365 ms/op
                 executeQuery·p0.99:   2382.365 ms/op
                 executeQuery·p0.999:  2382.365 ms/op
                 executeQuery·p0.9999: 2382.365 ms/op
                 executeQuery·p1.00:   2382.365 ms/op


# Run progress: 16.88% complete, ETA 08:20:01
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2552.234 ±(99.9%) 1373.573 ms/op
# Warmup Iteration   2: 2394.109 ±(99.9%) 308.433 ms/op
# Warmup Iteration   3: 2381.526 ±(99.9%) 140.521 ms/op
# Warmup Iteration   4: 2313.578 ±(99.9%) 212.000 ms/op
# Warmup Iteration   5: 2368.104 ±(99.9%) 273.992 ms/op
Iteration   1: 2398.303 ±(99.9%) 258.261 ms/op
                 executeQuery·p0.00:   2298.479 ms/op
                 executeQuery·p0.50:   2407.530 ms/op
                 executeQuery·p0.90:   2462.056 ms/op
                 executeQuery·p0.95:   2462.056 ms/op
                 executeQuery·p0.99:   2462.056 ms/op
                 executeQuery·p0.999:  2462.056 ms/op
                 executeQuery·p0.9999: 2462.056 ms/op
                 executeQuery·p1.00:   2462.056 ms/op

Iteration   2: 2363.910 ±(99.9%) 211.384 ms/op
                 executeQuery·p0.00:   2294.284 ms/op
                 executeQuery·p0.50:   2382.365 ms/op
                 executeQuery·p0.90:   2424.308 ms/op
                 executeQuery·p0.95:   2424.308 ms/op
                 executeQuery·p0.99:   2424.308 ms/op
                 executeQuery·p0.999:  2424.308 ms/op
                 executeQuery·p0.9999: 2424.308 ms/op
                 executeQuery·p1.00:   2424.308 ms/op

Iteration   3: 2329.516 ±(99.9%) 191.303 ms/op
                 executeQuery·p0.00:   2277.507 ms/op
                 executeQuery·p0.50:   2332.033 ms/op
                 executeQuery·p0.90:   2386.559 ms/op
                 executeQuery·p0.95:   2386.559 ms/op
                 executeQuery·p0.99:   2386.559 ms/op
                 executeQuery·p0.999:  2386.559 ms/op
                 executeQuery·p0.9999: 2386.559 ms/op
                 executeQuery·p1.00:   2386.559 ms/op

Iteration   4: 2336.227 ±(99.9%) 374.962 ms/op
                 executeQuery·p0.00:   2239.758 ms/op
                 executeQuery·p0.50:   2319.450 ms/op
                 executeQuery·p0.90:   2449.474 ms/op
                 executeQuery·p0.95:   2449.474 ms/op
                 executeQuery·p0.99:   2449.474 ms/op
                 executeQuery·p0.999:  2449.474 ms/op
                 executeQuery·p0.9999: 2449.474 ms/op
                 executeQuery·p1.00:   2449.474 ms/op

Iteration   5: 2347.133 ±(99.9%) 408.682 ms/op
                 executeQuery·p0.00:   2197.815 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2457.862 ms/op
                 executeQuery·p0.95:   2457.862 ms/op
                 executeQuery·p0.99:   2457.862 ms/op
                 executeQuery·p0.999:  2457.862 ms/op
                 executeQuery·p0.9999: 2457.862 ms/op
                 executeQuery·p1.00:   2457.862 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 125
  mean =   2351.193 ±(99.9%) 23.650 ms/op

  Histogram, ms/op:
    [2100.000, 2150.000) = 0 
    [2150.000, 2200.000) = 2 
    [2200.000, 2250.000) = 14 
    [2250.000, 2300.000) = 19 
    [2300.000, 2350.000) = 27 
    [2350.000, 2400.000) = 28 
    [2400.000, 2450.000) = 22 
    [2450.000, 2500.000) = 11 
    [2500.000, 2550.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2193.621 ms/op
     p(50.0000) =   2353.005 ms/op
     p(90.0000) =   2453.668 ms/op
     p(95.0000) =   2464.992 ms/op
     p(99.0000) =   2581.342 ms/op
     p(99.9000) =   2587.886 ms/op
     p(99.9900) =   2587.886 ms/op
     p(99.9990) =   2587.886 ms/op
     p(99.9999) =   2587.886 ms/op
    p(100.0000) =   2587.886 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 17.19% complete, ETA 08:18:43
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_378661819 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_378661819(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_378661819> join_map = new Int_Multi_Object_Map<JRT_378661819>();
private final class JRT_1908098560 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1908098560(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1908098560> join_map_0 = new Int_Multi_Object_Map<JRT_1908098560>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_1908098560 left_join_record = new JRT_1908098560(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_1908098560> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_1908098560 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_378661819 left_join_record_0 = new JRT_378661819(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_378661819> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378661819 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2569.011 ±(99.9%) 914.184 ms/op
# Warmup Iteration   2: 2382.365 ±(99.9%) 428.072 ms/op
# Warmup Iteration   3: 2434.374 ±(99.9%) 411.544 ms/op
# Warmup Iteration   4: 2369.782 ±(99.9%) 244.939 ms/op
# Warmup Iteration   5: 2405.853 ±(99.9%) 272.800 ms/op
Iteration   1: 2384.881 ±(99.9%) 294.414 ms/op
                 executeQuery·p0.00:   2319.450 ms/op
                 executeQuery·p0.50:   2357.199 ms/op
                 executeQuery·p0.90:   2512.388 ms/op
                 executeQuery·p0.95:   2512.388 ms/op
                 executeQuery·p0.99:   2512.388 ms/op
                 executeQuery·p0.999:  2512.388 ms/op
                 executeQuery·p0.9999: 2512.388 ms/op
                 executeQuery·p1.00:   2512.388 ms/op

Iteration   2: 2384.042 ±(99.9%) 146.519 ms/op
                 executeQuery·p0.00:   2340.422 ms/op
                 executeQuery·p0.50:   2394.948 ms/op
                 executeQuery·p0.90:   2428.502 ms/op
                 executeQuery·p0.95:   2428.502 ms/op
                 executeQuery·p0.99:   2428.502 ms/op
                 executeQuery·p0.999:  2428.502 ms/op
                 executeQuery·p0.9999: 2428.502 ms/op
                 executeQuery·p1.00:   2428.502 ms/op

Iteration   3: 2415.919 ±(99.9%) 315.044 ms/op
                 executeQuery·p0.00:   2298.479 ms/op
                 executeQuery·p0.50:   2449.474 ms/op
                 executeQuery·p0.90:   2495.611 ms/op
                 executeQuery·p0.95:   2495.611 ms/op
                 executeQuery·p0.99:   2495.611 ms/op
                 executeQuery·p0.999:  2495.611 ms/op
                 executeQuery·p0.9999: 2495.611 ms/op
                 executeQuery·p1.00:   2495.611 ms/op

Iteration   4: 2401.658 ±(99.9%) 134.450 ms/op
                 executeQuery·p0.00:   2348.810 ms/op
                 executeQuery·p0.50:   2411.725 ms/op
                 executeQuery·p0.90:   2436.891 ms/op
                 executeQuery·p0.95:   2436.891 ms/op
                 executeQuery·p0.99:   2436.891 ms/op
                 executeQuery·p0.999:  2436.891 ms/op
                 executeQuery·p0.9999: 2436.891 ms/op
                 executeQuery·p1.00:   2436.891 ms/op

Iteration   5: 2364.749 ±(99.9%) 107.981 ms/op
                 executeQuery·p0.00:   2336.227 ms/op
                 executeQuery·p0.50:   2348.810 ms/op
                 executeQuery·p0.90:   2394.948 ms/op
                 executeQuery·p0.95:   2394.948 ms/op
                 executeQuery·p0.99:   2394.948 ms/op
                 executeQuery·p0.999:  2394.948 ms/op
                 executeQuery·p0.9999: 2394.948 ms/op
                 executeQuery·p1.00:   2394.948 ms/op


# Run progress: 17.50% complete, ETA 08:17:30
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2603.614 ±(99.9%) 898.480 ms/op
# Warmup Iteration   2: 2444.440 ±(99.9%) 393.860 ms/op
# Warmup Iteration   3: 2403.336 ±(99.9%) 331.386 ms/op
# Warmup Iteration   4: 2377.332 ±(99.9%) 233.880 ms/op
# Warmup Iteration   5: 2347.971 ±(99.9%) 318.829 ms/op
Iteration   1: 2469.396 ±(99.9%) 456.422 ms/op
                 executeQuery·p0.00:   2369.782 ms/op
                 executeQuery·p0.50:   2487.222 ms/op
                 executeQuery·p0.90:   2533.360 ms/op
                 executeQuery·p0.95:   2533.360 ms/op
                 executeQuery·p0.99:   2533.360 ms/op
                 executeQuery·p0.999:  2533.360 ms/op
                 executeQuery·p0.9999: 2533.360 ms/op
                 executeQuery·p1.00:   2533.360 ms/op

Iteration   2: 2365.587 ±(99.9%) 247.059 ms/op
                 executeQuery·p0.00:   2260.730 ms/op
                 executeQuery·p0.50:   2378.170 ms/op
                 executeQuery·p0.90:   2436.891 ms/op
                 executeQuery·p0.95:   2436.891 ms/op
                 executeQuery·p0.99:   2436.891 ms/op
                 executeQuery·p0.999:  2436.891 ms/op
                 executeQuery·p0.9999: 2436.891 ms/op
                 executeQuery·p1.00:   2436.891 ms/op

Iteration   3: 2408.369 ±(99.9%) 477.255 ms/op
                 executeQuery·p0.00:   2222.981 ms/op
                 executeQuery·p0.50:   2399.142 ms/op
                 executeQuery·p0.90:   2550.137 ms/op
                 executeQuery·p0.95:   2550.137 ms/op
                 executeQuery·p0.99:   2550.137 ms/op
                 executeQuery·p0.999:  2550.137 ms/op
                 executeQuery·p0.9999: 2550.137 ms/op
                 executeQuery·p1.00:   2550.137 ms/op

Iteration   4: 2423.469 ±(99.9%) 427.065 ms/op
                 executeQuery·p0.00:   2239.758 ms/op
                 executeQuery·p0.50:   2478.834 ms/op
                 executeQuery·p0.90:   2508.194 ms/op
                 executeQuery·p0.95:   2508.194 ms/op
                 executeQuery·p0.99:   2508.194 ms/op
                 executeQuery·p0.999:  2508.194 ms/op
                 executeQuery·p0.9999: 2508.194 ms/op
                 executeQuery·p1.00:   2508.194 ms/op

Iteration   5: 2382.365 ±(99.9%) 224.083 ms/op
                 executeQuery·p0.00:   2294.284 ms/op
                 executeQuery·p0.50:   2399.142 ms/op
                 executeQuery·p0.90:   2441.085 ms/op
                 executeQuery·p0.95:   2441.085 ms/op
                 executeQuery·p0.99:   2441.085 ms/op
                 executeQuery·p0.999:  2441.085 ms/op
                 executeQuery·p0.9999: 2441.085 ms/op
                 executeQuery·p1.00:   2441.085 ms/op


# Run progress: 17.81% complete, ETA 08:16:08
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2541.748 ±(99.9%) 714.698 ms/op
# Warmup Iteration   2: 2455.346 ±(99.9%) 531.824 ms/op
# Warmup Iteration   3: 2427.663 ±(99.9%) 143.733 ms/op
# Warmup Iteration   4: 2467.090 ±(99.9%) 363.554 ms/op
# Warmup Iteration   5: 2406.692 ±(99.9%) 405.124 ms/op
Iteration   1: 2388.237 ±(99.9%) 420.324 ms/op
                 executeQuery·p0.00:   2273.313 ms/op
                 executeQuery·p0.50:   2353.005 ms/op
                 executeQuery·p0.90:   2566.914 ms/op
                 executeQuery·p0.95:   2566.914 ms/op
                 executeQuery·p0.99:   2566.914 ms/op
                 executeQuery·p0.999:  2566.914 ms/op
                 executeQuery·p0.9999: 2566.914 ms/op
                 executeQuery·p1.00:   2566.914 ms/op

Iteration   2: 2451.151 ±(99.9%) 154.322 ms/op
                 executeQuery·p0.00:   2407.530 ms/op
                 executeQuery·p0.50:   2436.891 ms/op
                 executeQuery·p0.90:   2508.194 ms/op
                 executeQuery·p0.95:   2508.194 ms/op
                 executeQuery·p0.99:   2508.194 ms/op
                 executeQuery·p0.999:  2508.194 ms/op
                 executeQuery·p0.9999: 2508.194 ms/op
                 executeQuery·p1.00:   2508.194 ms/op

Iteration   3: 2405.853 ±(99.9%) 177.879 ms/op
                 executeQuery·p0.00:   2369.782 ms/op
                 executeQuery·p0.50:   2378.170 ms/op
                 executeQuery·p0.90:   2474.639 ms/op
                 executeQuery·p0.95:   2474.639 ms/op
                 executeQuery·p0.99:   2474.639 ms/op
                 executeQuery·p0.999:  2474.639 ms/op
                 executeQuery·p0.9999: 2474.639 ms/op
                 executeQuery·p1.00:   2474.639 ms/op

Iteration   4: 2433.535 ±(99.9%) 376.767 ms/op
                 executeQuery·p0.00:   2290.090 ms/op
                 executeQuery·p0.50:   2487.222 ms/op
                 executeQuery·p0.90:   2516.582 ms/op
                 executeQuery·p0.95:   2516.582 ms/op
                 executeQuery·p0.99:   2516.582 ms/op
                 executeQuery·p0.999:  2516.582 ms/op
                 executeQuery·p0.9999: 2516.582 ms/op
                 executeQuery·p1.00:   2516.582 ms/op

Iteration   5: 2402.497 ±(99.9%) 369.955 ms/op
                 executeQuery·p0.00:   2294.284 ms/op
                 executeQuery·p0.50:   2390.753 ms/op
                 executeQuery·p0.90:   2516.582 ms/op
                 executeQuery·p0.95:   2516.582 ms/op
                 executeQuery·p0.99:   2516.582 ms/op
                 executeQuery·p0.999:  2516.582 ms/op
                 executeQuery·p0.9999: 2516.582 ms/op
                 executeQuery·p1.00:   2516.582 ms/op


# Run progress: 18.13% complete, ETA 08:14:59
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2637.169 ±(99.9%) 1228.636 ms/op
# Warmup Iteration   2: 2450.312 ±(99.9%) 279.366 ms/op
# Warmup Iteration   3: 2452.829 ±(99.9%) 174.847 ms/op
# Warmup Iteration   4: 2395.786 ±(99.9%) 172.216 ms/op
# Warmup Iteration   5: 2457.023 ±(99.9%) 353.182 ms/op
Iteration   1: 2456.184 ±(99.9%) 566.959 ms/op
                 executeQuery·p0.00:   2285.896 ms/op
                 executeQuery·p0.50:   2424.308 ms/op
                 executeQuery·p0.90:   2688.549 ms/op
                 executeQuery·p0.95:   2688.549 ms/op
                 executeQuery·p0.99:   2688.549 ms/op
                 executeQuery·p0.999:  2688.549 ms/op
                 executeQuery·p0.9999: 2688.549 ms/op
                 executeQuery·p1.00:   2688.549 ms/op

Iteration   2: 2363.071 ±(99.9%) 208.901 ms/op
                 executeQuery·p0.00:   2285.896 ms/op
                 executeQuery·p0.50:   2390.753 ms/op
                 executeQuery·p0.90:   2415.919 ms/op
                 executeQuery·p0.95:   2415.919 ms/op
                 executeQuery·p0.99:   2415.919 ms/op
                 executeQuery·p0.999:  2415.919 ms/op
                 executeQuery·p0.9999: 2415.919 ms/op
                 executeQuery·p1.00:   2415.919 ms/op

Iteration   3: 2415.919 ±(99.9%) 363.303 ms/op
                 executeQuery·p0.00:   2306.867 ms/op
                 executeQuery·p0.50:   2399.142 ms/op
                 executeQuery·p0.90:   2524.971 ms/op
                 executeQuery·p0.95:   2524.971 ms/op
                 executeQuery·p0.99:   2524.971 ms/op
                 executeQuery·p0.999:  2524.971 ms/op
                 executeQuery·p0.9999: 2524.971 ms/op
                 executeQuery·p1.00:   2524.971 ms/op

Iteration   4: 2471.284 ±(99.9%) 309.699 ms/op
                 executeQuery·p0.00:   2357.199 ms/op
                 executeQuery·p0.50:   2478.834 ms/op
                 executeQuery·p0.90:   2575.303 ms/op
                 executeQuery·p0.95:   2575.303 ms/op
                 executeQuery·p0.99:   2575.303 ms/op
                 executeQuery·p0.999:  2575.303 ms/op
                 executeQuery·p0.9999: 2575.303 ms/op
                 executeQuery·p1.00:   2575.303 ms/op

Iteration   5: 2406.692 ±(99.9%) 246.372 ms/op
                 executeQuery·p0.00:   2323.644 ms/op
                 executeQuery·p0.50:   2436.891 ms/op
                 executeQuery·p0.90:   2462.056 ms/op
                 executeQuery·p0.95:   2462.056 ms/op
                 executeQuery·p0.99:   2462.056 ms/op
                 executeQuery·p0.999:  2462.056 ms/op
                 executeQuery·p0.9999: 2462.056 ms/op
                 executeQuery·p1.00:   2462.056 ms/op


# Run progress: 18.44% complete, ETA 08:13:50
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2626.683 ±(99.9%) 1239.154 ms/op
# Warmup Iteration   2: 2440.246 ±(99.9%) 353.551 ms/op
# Warmup Iteration   3: 2449.474 ±(99.9%) 230.962 ms/op
# Warmup Iteration   4: 2407.530 ±(99.9%) 351.442 ms/op
# Warmup Iteration   5: 2401.658 ±(99.9%) 197.674 ms/op
Iteration   1: 2440.246 ±(99.9%) 488.731 ms/op
                 executeQuery·p0.00:   2252.341 ms/op
                 executeQuery·p0.50:   2478.834 ms/op
                 executeQuery·p0.90:   2550.137 ms/op
                 executeQuery·p0.95:   2550.137 ms/op
                 executeQuery·p0.99:   2550.137 ms/op
                 executeQuery·p0.999:  2550.137 ms/op
                 executeQuery·p0.9999: 2550.137 ms/op
                 executeQuery·p1.00:   2550.137 ms/op

Iteration   2: 2426.824 ±(99.9%) 400.298 ms/op
                 executeQuery·p0.00:   2256.536 ms/op
                 executeQuery·p0.50:   2436.891 ms/op
                 executeQuery·p0.90:   2529.165 ms/op
                 executeQuery·p0.95:   2529.165 ms/op
                 executeQuery·p0.99:   2529.165 ms/op
                 executeQuery·p0.999:  2529.165 ms/op
                 executeQuery·p0.9999: 2529.165 ms/op
                 executeQuery·p1.00:   2529.165 ms/op

Iteration   3: 2493.514 ±(99.9%) 217.392 ms/op
                 executeQuery·p0.00:   2470.445 ms/op
                 executeQuery·p0.50:   2480.931 ms/op
                 executeQuery·p0.90:   2541.748 ms/op
                 executeQuery·p0.95:   2541.748 ms/op
                 executeQuery·p0.99:   2541.748 ms/op
                 executeQuery·p0.999:  2541.748 ms/op
                 executeQuery·p0.9999: 2541.748 ms/op
                 executeQuery·p1.00:   2541.748 ms/op

Iteration   4: 2431.019 ±(99.9%) 391.569 ms/op
                 executeQuery·p0.00:   2306.867 ms/op
                 executeQuery·p0.50:   2453.668 ms/op
                 executeQuery·p0.90:   2571.108 ms/op
                 executeQuery·p0.95:   2571.108 ms/op
                 executeQuery·p0.99:   2571.108 ms/op
                 executeQuery·p0.999:  2571.108 ms/op
                 executeQuery·p0.9999: 2571.108 ms/op
                 executeQuery·p1.00:   2571.108 ms/op

Iteration   5: 2433.535 ±(99.9%) 233.601 ms/op
                 executeQuery·p0.00:   2386.559 ms/op
                 executeQuery·p0.50:   2420.113 ms/op
                 executeQuery·p0.90:   2537.554 ms/op
                 executeQuery·p0.95:   2537.554 ms/op
                 executeQuery·p0.99:   2537.554 ms/op
                 executeQuery·p0.999:  2537.554 ms/op
                 executeQuery·p0.9999: 2537.554 ms/op
                 executeQuery·p1.00:   2537.554 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 123
  mean =   2415.749 ±(99.9%) 25.175 ms/op

  Histogram, ms/op:
    [2200.000, 2250.000) = 2 
    [2250.000, 2300.000) = 10 
    [2300.000, 2350.000) = 14 
    [2350.000, 2400.000) = 33 
    [2400.000, 2450.000) = 22 
    [2450.000, 2500.000) = 24 
    [2500.000, 2550.000) = 12 
    [2550.000, 2600.000) = 5 
    [2600.000, 2650.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2222.981 ms/op
     p(50.0000) =   2407.530 ms/op
     p(90.0000) =   2521.616 ms/op
     p(95.0000) =   2549.298 ms/op
     p(99.0000) =   2661.370 ms/op
     p(99.9000) =   2688.549 ms/op
     p(99.9900) =   2688.549 ms/op
     p(99.9990) =   2688.549 ms/op
     p(99.9999) =   2688.549 ms/op
    p(100.0000) =   2688.549 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2)

# Run progress: 18.75% complete, ETA 08:12:29
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2913.993 ±(99.9%) 909.047 ms/op
# Warmup Iteration   2: 2826.961 ±(99.9%) 255.215 ms/op
# Warmup Iteration   3: 2766.143 ±(99.9%) 512.584 ms/op
# Warmup Iteration   4: 2778.726 ±(99.9%) 805.694 ms/op
# Warmup Iteration   5: 2769.289 ±(99.9%) 685.091 ms/op
Iteration   1: 2781.872 ±(99.9%) 531.752 ms/op
                 executeQuery·p0.00:   2667.577 ms/op
                 executeQuery·p0.50:   2799.698 ms/op
                 executeQuery·p0.90:   2860.515 ms/op
                 executeQuery·p0.95:   2860.515 ms/op
                 executeQuery·p0.99:   2860.515 ms/op
                 executeQuery·p0.999:  2860.515 ms/op
                 executeQuery·p0.9999: 2860.515 ms/op
                 executeQuery·p1.00:   2860.515 ms/op

Iteration   2: 2753.561 ±(99.9%) 623.774 ms/op
                 executeQuery·p0.00:   2650.800 ms/op
                 executeQuery·p0.50:   2751.463 ms/op
                 executeQuery·p0.90:   2860.515 ms/op
                 executeQuery·p0.95:   2860.515 ms/op
                 executeQuery·p0.99:   2860.515 ms/op
                 executeQuery·p0.999:  2860.515 ms/op
                 executeQuery·p0.9999: 2860.515 ms/op
                 executeQuery·p1.00:   2860.515 ms/op

Iteration   3: 2788.164 ±(99.9%) 541.336 ms/op
                 executeQuery·p0.00:   2696.937 ms/op
                 executeQuery·p0.50:   2791.309 ms/op
                 executeQuery·p0.90:   2873.098 ms/op
                 executeQuery·p0.95:   2873.098 ms/op
                 executeQuery·p0.99:   2873.098 ms/op
                 executeQuery·p0.999:  2873.098 ms/op
                 executeQuery·p0.9999: 2873.098 ms/op
                 executeQuery·p1.00:   2873.098 ms/op

Iteration   4: 2742.026 ±(99.9%) 362.536 ms/op
                 executeQuery·p0.00:   2675.966 ms/op
                 executeQuery·p0.50:   2745.172 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   5: 2736.783 ±(99.9%) 329.357 ms/op
                 executeQuery·p0.00:   2663.383 ms/op
                 executeQuery·p0.50:   2751.463 ms/op
                 executeQuery·p0.90:   2780.824 ms/op
                 executeQuery·p0.95:   2780.824 ms/op
                 executeQuery·p0.99:   2780.824 ms/op
                 executeQuery·p0.999:  2780.824 ms/op
                 executeQuery·p0.9999: 2780.824 ms/op
                 executeQuery·p1.00:   2780.824 ms/op


# Run progress: 19.06% complete, ETA 08:10:39
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2939.159 ±(99.9%) 1103.700 ms/op
# Warmup Iteration   2: 2743.075 ±(99.9%) 568.098 ms/op
# Warmup Iteration   3: 2801.795 ±(99.9%) 658.343 ms/op
# Warmup Iteration   4: 2744.123 ±(99.9%) 166.159 ms/op
# Warmup Iteration   5: 2770.338 ±(99.9%) 483.072 ms/op
Iteration   1: 2759.852 ±(99.9%) 318.395 ms/op
                 executeQuery·p0.00:   2709.520 ms/op
                 executeQuery·p0.50:   2753.561 ms/op
                 executeQuery·p0.90:   2822.767 ms/op
                 executeQuery·p0.95:   2822.767 ms/op
                 executeQuery·p0.99:   2822.767 ms/op
                 executeQuery·p0.999:  2822.767 ms/op
                 executeQuery·p0.9999: 2822.767 ms/op
                 executeQuery·p1.00:   2822.767 ms/op

Iteration   2: 2724.200 ±(99.9%) 693.660 ms/op
                 executeQuery·p0.00:   2621.440 ms/op
                 executeQuery·p0.50:   2715.812 ms/op
                 executeQuery·p0.90:   2843.738 ms/op
                 executeQuery·p0.95:   2843.738 ms/op
                 executeQuery·p0.99:   2843.738 ms/op
                 executeQuery·p0.999:  2843.738 ms/op
                 executeQuery·p0.9999: 2843.738 ms/op
                 executeQuery·p1.00:   2843.738 ms/op

Iteration   3: 2812.281 ±(99.9%) 256.650 ms/op
                 executeQuery·p0.00:   2759.852 ms/op
                 executeQuery·p0.50:   2818.572 ms/op
                 executeQuery·p0.90:   2852.127 ms/op
                 executeQuery·p0.95:   2852.127 ms/op
                 executeQuery·p0.99:   2852.127 ms/op
                 executeQuery·p0.999:  2852.127 ms/op
                 executeQuery·p0.9999: 2852.127 ms/op
                 executeQuery·p1.00:   2852.127 ms/op

Iteration   4: 2819.621 ±(99.9%) 293.065 ms/op
                 executeQuery·p0.00:   2772.435 ms/op
                 executeQuery·p0.50:   2814.378 ms/op
                 executeQuery·p0.90:   2877.293 ms/op
                 executeQuery·p0.95:   2877.293 ms/op
                 executeQuery·p0.99:   2877.293 ms/op
                 executeQuery·p0.999:  2877.293 ms/op
                 executeQuery·p0.9999: 2877.293 ms/op
                 executeQuery·p1.00:   2877.293 ms/op

Iteration   5: 2770.338 ±(99.9%) 113.921 ms/op
                 executeQuery·p0.00:   2747.269 ms/op
                 executeQuery·p0.50:   2772.435 ms/op
                 executeQuery·p0.90:   2789.212 ms/op
                 executeQuery·p0.95:   2789.212 ms/op
                 executeQuery·p0.99:   2789.212 ms/op
                 executeQuery·p0.999:  2789.212 ms/op
                 executeQuery·p0.9999: 2789.212 ms/op
                 executeQuery·p1.00:   2789.212 ms/op


# Run progress: 19.38% complete, ETA 08:08:50
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2954.887 ±(99.9%) 967.284 ms/op
# Warmup Iteration   2: 2766.143 ±(99.9%) 660.385 ms/op
# Warmup Iteration   3: 2768.241 ±(99.9%) 159.581 ms/op
# Warmup Iteration   4: 2766.143 ±(99.9%) 291.494 ms/op
# Warmup Iteration   5: 2702.180 ±(99.9%) 636.164 ms/op
Iteration   1: 2757.755 ±(99.9%) 499.520 ms/op
                 executeQuery·p0.00:   2650.800 ms/op
                 executeQuery·p0.50:   2780.824 ms/op
                 executeQuery·p0.90:   2818.572 ms/op
                 executeQuery·p0.95:   2818.572 ms/op
                 executeQuery·p0.99:   2818.572 ms/op
                 executeQuery·p0.999:  2818.572 ms/op
                 executeQuery·p0.9999: 2818.572 ms/op
                 executeQuery·p1.00:   2818.572 ms/op

Iteration   2: 2787.115 ±(99.9%) 969.812 ms/op
                 executeQuery·p0.00:   2634.023 ms/op
                 executeQuery·p0.50:   2761.949 ms/op
                 executeQuery·p0.90:   2990.539 ms/op
                 executeQuery·p0.95:   2990.539 ms/op
                 executeQuery·p0.99:   2990.539 ms/op
                 executeQuery·p0.999:  2990.539 ms/op
                 executeQuery·p0.9999: 2990.539 ms/op
                 executeQuery·p1.00:   2990.539 ms/op

Iteration   3: 2700.083 ±(99.9%) 264.983 ms/op
                 executeQuery·p0.00:   2654.994 ms/op
                 executeQuery·p0.50:   2703.229 ms/op
                 executeQuery·p0.90:   2738.881 ms/op
                 executeQuery·p0.95:   2738.881 ms/op
                 executeQuery·p0.99:   2738.881 ms/op
                 executeQuery·p0.999:  2738.881 ms/op
                 executeQuery·p0.9999: 2738.881 ms/op
                 executeQuery·p1.00:   2738.881 ms/op

Iteration   4: 2713.715 ±(99.9%) 306.642 ms/op
                 executeQuery·p0.00:   2646.606 ms/op
                 executeQuery·p0.50:   2730.492 ms/op
                 executeQuery·p0.90:   2747.269 ms/op
                 executeQuery·p0.95:   2747.269 ms/op
                 executeQuery·p0.99:   2747.269 ms/op
                 executeQuery·p0.999:  2747.269 ms/op
                 executeQuery·p0.9999: 2747.269 ms/op
                 executeQuery·p1.00:   2747.269 ms/op

Iteration   5: 2752.512 ±(99.9%) 384.179 ms/op
                 executeQuery·p0.00:   2671.772 ms/op
                 executeQuery·p0.50:   2761.949 ms/op
                 executeQuery·p0.90:   2814.378 ms/op
                 executeQuery·p0.95:   2814.378 ms/op
                 executeQuery·p0.99:   2814.378 ms/op
                 executeQuery·p0.999:  2814.378 ms/op
                 executeQuery·p0.9999: 2814.378 ms/op
                 executeQuery·p1.00:   2814.378 ms/op


# Run progress: 19.69% complete, ETA 08:06:57
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2899.313 ±(99.9%) 713.455 ms/op
# Warmup Iteration   2: 2750.415 ±(99.9%) 709.325 ms/op
# Warmup Iteration   3: 2808.087 ±(99.9%) 212.839 ms/op
# Warmup Iteration   4: 2767.192 ±(99.9%) 744.690 ms/op
# Warmup Iteration   5: 2768.241 ±(99.9%) 448.644 ms/op
Iteration   1: 2758.803 ±(99.9%) 674.283 ms/op
                 executeQuery·p0.00:   2604.663 ms/op
                 executeQuery·p0.50:   2801.795 ms/op
                 executeQuery·p0.90:   2826.961 ms/op
                 executeQuery·p0.95:   2826.961 ms/op
                 executeQuery·p0.99:   2826.961 ms/op
                 executeQuery·p0.999:  2826.961 ms/op
                 executeQuery·p0.9999: 2826.961 ms/op
                 executeQuery·p1.00:   2826.961 ms/op

Iteration   2: 2781.872 ±(99.9%) 485.537 ms/op
                 executeQuery·p0.00:   2709.520 ms/op
                 executeQuery·p0.50:   2778.726 ms/op
                 executeQuery·p0.90:   2860.515 ms/op
                 executeQuery·p0.95:   2860.515 ms/op
                 executeQuery·p0.99:   2860.515 ms/op
                 executeQuery·p0.999:  2860.515 ms/op
                 executeQuery·p0.9999: 2860.515 ms/op
                 executeQuery·p1.00:   2860.515 ms/op

Iteration   3: 2711.618 ±(99.9%) 766.125 ms/op
                 executeQuery·p0.00:   2558.525 ms/op
                 executeQuery·p0.50:   2728.395 ms/op
                 executeQuery·p0.90:   2831.155 ms/op
                 executeQuery·p0.95:   2831.155 ms/op
                 executeQuery·p0.99:   2831.155 ms/op
                 executeQuery·p0.999:  2831.155 ms/op
                 executeQuery·p0.9999: 2831.155 ms/op
                 executeQuery·p1.00:   2831.155 ms/op

Iteration   4: 2734.686 ±(99.9%) 402.619 ms/op
                 executeQuery·p0.00:   2646.606 ms/op
                 executeQuery·p0.50:   2749.366 ms/op
                 executeQuery·p0.90:   2793.406 ms/op
                 executeQuery·p0.95:   2793.406 ms/op
                 executeQuery·p0.99:   2793.406 ms/op
                 executeQuery·p0.999:  2793.406 ms/op
                 executeQuery·p0.9999: 2793.406 ms/op
                 executeQuery·p1.00:   2793.406 ms/op

Iteration   5: 2705.326 ±(99.9%) 191.651 ms/op
                 executeQuery·p0.00:   2684.355 ms/op
                 executeQuery·p0.50:   2694.840 ms/op
                 executeQuery·p0.90:   2747.269 ms/op
                 executeQuery·p0.95:   2747.269 ms/op
                 executeQuery·p0.99:   2747.269 ms/op
                 executeQuery·p0.999:  2747.269 ms/op
                 executeQuery·p0.9999: 2747.269 ms/op
                 executeQuery·p1.00:   2747.269 ms/op


# Run progress: 20.00% complete, ETA 08:05:05
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2883.584 ±(99.9%) 838.752 ms/op
# Warmup Iteration   2: 2793.406 ±(99.9%) 893.184 ms/op
# Warmup Iteration   3: 2709.520 ±(99.9%) 345.681 ms/op
# Warmup Iteration   4: 2690.646 ±(99.9%) 619.836 ms/op
# Warmup Iteration   5: 2772.435 ±(99.9%) 554.575 ms/op
Iteration   1: 2715.812 ±(99.9%) 405.950 ms/op
                 executeQuery·p0.00:   2629.829 ms/op
                 executeQuery·p0.50:   2726.298 ms/op
                 executeQuery·p0.90:   2780.824 ms/op
                 executeQuery·p0.95:   2780.824 ms/op
                 executeQuery·p0.99:   2780.824 ms/op
                 executeQuery·p0.999:  2780.824 ms/op
                 executeQuery·p0.9999: 2780.824 ms/op
                 executeQuery·p1.00:   2780.824 ms/op

Iteration   2: 2731.540 ±(99.9%) 897.935 ms/op
                 executeQuery·p0.00:   2604.663 ms/op
                 executeQuery·p0.50:   2715.812 ms/op
                 executeQuery·p0.90:   2889.875 ms/op
                 executeQuery·p0.95:   2889.875 ms/op
                 executeQuery·p0.99:   2889.875 ms/op
                 executeQuery·p0.999:  2889.875 ms/op
                 executeQuery·p0.9999: 2889.875 ms/op
                 executeQuery·p1.00:   2889.875 ms/op

Iteration   3: 2725.249 ±(99.9%) 902.559 ms/op
                 executeQuery·p0.00:   2533.360 ms/op
                 executeQuery·p0.50:   2751.463 ms/op
                 executeQuery·p0.90:   2864.710 ms/op
                 executeQuery·p0.95:   2864.710 ms/op
                 executeQuery·p0.99:   2864.710 ms/op
                 executeQuery·p0.999:  2864.710 ms/op
                 executeQuery·p0.9999: 2864.710 ms/op
                 executeQuery·p1.00:   2864.710 ms/op

Iteration   4: 2718.958 ±(99.9%) 819.219 ms/op
                 executeQuery·p0.00:   2566.914 ms/op
                 executeQuery·p0.50:   2715.812 ms/op
                 executeQuery·p0.90:   2877.293 ms/op
                 executeQuery·p0.95:   2877.293 ms/op
                 executeQuery·p0.99:   2877.293 ms/op
                 executeQuery·p0.999:  2877.293 ms/op
                 executeQuery·p0.9999: 2877.293 ms/op
                 executeQuery·p1.00:   2877.293 ms/op

Iteration   5: 2696.937 ±(99.9%) 476.180 ms/op
                 executeQuery·p0.00:   2634.023 ms/op
                 executeQuery·p0.50:   2684.355 ms/op
                 executeQuery·p0.90:   2785.018 ms/op
                 executeQuery·p0.95:   2785.018 ms/op
                 executeQuery·p0.99:   2785.018 ms/op
                 executeQuery·p0.999:  2785.018 ms/op
                 executeQuery·p0.9999: 2785.018 ms/op
                 executeQuery·p1.00:   2785.018 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 100
  mean =   2747.227 ±(99.9%) 27.703 ms/op

  Histogram, ms/op:
    [2500.000, 2550.000) = 1 
    [2550.000, 2600.000) = 2 
    [2600.000, 2650.000) = 11 
    [2650.000, 2700.000) = 13 
    [2700.000, 2750.000) = 23 
    [2750.000, 2800.000) = 23 
    [2800.000, 2850.000) = 17 
    [2850.000, 2900.000) = 9 
    [2900.000, 2950.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2533.360 ms/op
     p(50.0000) =   2749.366 ms/op
     p(90.0000) =   2851.288 ms/op
     p(95.0000) =   2872.679 ms/op
     p(99.0000) =   2989.532 ms/op
     p(99.9000) =   2990.539 ms/op
     p(99.9900) =   2990.539 ms/op
     p(99.9990) =   2990.539 ms/op
     p(99.9999) =   2990.539 ms/op
    p(100.0000) =   2990.539 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4)

# Run progress: 20.31% complete, ETA 08:03:08
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3001.025 ±(99.9%) 1057.270 ms/op
# Warmup Iteration   2: 2875.195 ±(99.9%) 656.667 ms/op
# Warmup Iteration   3: 2841.641 ±(99.9%) 685.850 ms/op
# Warmup Iteration   4: 2808.087 ±(99.9%) 551.254 ms/op
# Warmup Iteration   5: 2811.232 ±(99.9%) 354.339 ms/op
Iteration   1: 2762.998 ±(99.9%) 543.143 ms/op
                 executeQuery·p0.00:   2667.577 ms/op
                 executeQuery·p0.50:   2759.852 ms/op
                 executeQuery·p0.90:   2864.710 ms/op
                 executeQuery·p0.95:   2864.710 ms/op
                 executeQuery·p0.99:   2864.710 ms/op
                 executeQuery·p0.999:  2864.710 ms/op
                 executeQuery·p0.9999: 2864.710 ms/op
                 executeQuery·p1.00:   2864.710 ms/op

Iteration   2: 2850.030 ±(99.9%) 353.040 ms/op
                 executeQuery·p0.00:   2789.212 ms/op
                 executeQuery·p0.50:   2845.835 ms/op
                 executeQuery·p0.90:   2919.236 ms/op
                 executeQuery·p0.95:   2919.236 ms/op
                 executeQuery·p0.99:   2919.236 ms/op
                 executeQuery·p0.999:  2919.236 ms/op
                 executeQuery·p0.9999: 2919.236 ms/op
                 executeQuery·p1.00:   2919.236 ms/op

Iteration   3: 2831.155 ±(99.9%) 206.414 ms/op
                 executeQuery·p0.00:   2801.795 ms/op
                 executeQuery·p0.50:   2829.058 ms/op
                 executeQuery·p0.90:   2864.710 ms/op
                 executeQuery·p0.95:   2864.710 ms/op
                 executeQuery·p0.99:   2864.710 ms/op
                 executeQuery·p0.999:  2864.710 ms/op
                 executeQuery·p0.9999: 2864.710 ms/op
                 executeQuery·p1.00:   2864.710 ms/op

Iteration   4: 2787.115 ±(99.9%) 659.643 ms/op
                 executeQuery·p0.00:   2650.800 ms/op
                 executeQuery·p0.50:   2799.698 ms/op
                 executeQuery·p0.90:   2898.264 ms/op
                 executeQuery·p0.95:   2898.264 ms/op
                 executeQuery·p0.99:   2898.264 ms/op
                 executeQuery·p0.999:  2898.264 ms/op
                 executeQuery·p0.9999: 2898.264 ms/op
                 executeQuery·p1.00:   2898.264 ms/op

Iteration   5: 2844.787 ±(99.9%) 171.953 ms/op
                 executeQuery·p0.00:   2818.572 ms/op
                 executeQuery·p0.50:   2839.544 ms/op
                 executeQuery·p0.90:   2881.487 ms/op
                 executeQuery·p0.95:   2881.487 ms/op
                 executeQuery·p0.99:   2881.487 ms/op
                 executeQuery·p0.999:  2881.487 ms/op
                 executeQuery·p0.9999: 2881.487 ms/op
                 executeQuery·p1.00:   2881.487 ms/op


# Run progress: 20.63% complete, ETA 08:01:27
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3011.510 ±(99.9%) 633.319 ms/op
# Warmup Iteration   2: 2847.932 ±(99.9%) 657.599 ms/op
# Warmup Iteration   3: 2816.475 ±(99.9%) 830.537 ms/op
# Warmup Iteration   4: 2814.378 ±(99.9%) 680.653 ms/op
# Warmup Iteration   5: 2770.338 ±(99.9%) 589.878 ms/op
Iteration   1: 2838.495 ±(99.9%) 1102.590 ms/op
                 executeQuery·p0.00:   2671.772 ms/op
                 executeQuery·p0.50:   2803.892 ms/op
                 executeQuery·p0.90:   3074.425 ms/op
                 executeQuery·p0.95:   3074.425 ms/op
                 executeQuery·p0.99:   3074.425 ms/op
                 executeQuery·p0.999:  3074.425 ms/op
                 executeQuery·p0.9999: 3074.425 ms/op
                 executeQuery·p1.00:   3074.425 ms/op

Iteration   2: 2801.795 ±(99.9%) 511.389 ms/op
                 executeQuery·p0.00:   2688.549 ms/op
                 executeQuery·p0.50:   2831.155 ms/op
                 executeQuery·p0.90:   2856.321 ms/op
                 executeQuery·p0.95:   2856.321 ms/op
                 executeQuery·p0.99:   2856.321 ms/op
                 executeQuery·p0.999:  2856.321 ms/op
                 executeQuery·p0.9999: 2856.321 ms/op
                 executeQuery·p1.00:   2856.321 ms/op

Iteration   3: 2717.909 ±(99.9%) 433.092 ms/op
                 executeQuery·p0.00:   2638.217 ms/op
                 executeQuery·p0.50:   2724.200 ms/op
                 executeQuery·p0.90:   2785.018 ms/op
                 executeQuery·p0.95:   2785.018 ms/op
                 executeQuery·p0.99:   2785.018 ms/op
                 executeQuery·p0.999:  2785.018 ms/op
                 executeQuery·p0.9999: 2785.018 ms/op
                 executeQuery·p1.00:   2785.018 ms/op

Iteration   4: 2858.418 ±(99.9%) 483.072 ms/op
                 executeQuery·p0.00:   2751.463 ms/op
                 executeQuery·p0.50:   2879.390 ms/op
                 executeQuery·p0.90:   2923.430 ms/op
                 executeQuery·p0.95:   2923.430 ms/op
                 executeQuery·p0.99:   2923.430 ms/op
                 executeQuery·p0.999:  2923.430 ms/op
                 executeQuery·p0.9999: 2923.430 ms/op
                 executeQuery·p1.00:   2923.430 ms/op

Iteration   5: 2850.030 ±(99.9%) 563.554 ms/op
                 executeQuery·p0.00:   2772.435 ms/op
                 executeQuery·p0.50:   2850.030 ms/op
                 executeQuery·p0.90:   2927.624 ms/op
                 executeQuery·p0.95:   2927.624 ms/op
                 executeQuery·p0.99:   2927.624 ms/op
                 executeQuery·p0.999:  2927.624 ms/op
                 executeQuery·p0.9999: 2927.624 ms/op
                 executeQuery·p1.00:   2927.624 ms/op


# Run progress: 20.94% complete, ETA 07:59:46
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2990.539 ±(99.9%) 824.174 ms/op
# Warmup Iteration   2: 2868.904 ±(99.9%) 1044.571 ms/op
# Warmup Iteration   3: 2773.484 ±(99.9%) 641.148 ms/op
# Warmup Iteration   4: 2783.969 ±(99.9%) 651.754 ms/op
# Warmup Iteration   5: 2835.350 ±(99.9%) 803.412 ms/op
Iteration   1: 2854.224 ±(99.9%) 1022.418 ms/op
                 executeQuery·p0.00:   2764.046 ms/op
                 executeQuery·p0.50:   2780.824 ms/op
                 executeQuery·p0.90:   3091.202 ms/op
                 executeQuery·p0.95:   3091.202 ms/op
                 executeQuery·p0.99:   3091.202 ms/op
                 executeQuery·p0.999:  3091.202 ms/op
                 executeQuery·p0.9999: 3091.202 ms/op
                 executeQuery·p1.00:   3091.202 ms/op

Iteration   2: 2800.746 ±(99.9%) 652.881 ms/op
                 executeQuery·p0.00:   2701.132 ms/op
                 executeQuery·p0.50:   2805.989 ms/op
                 executeQuery·p0.90:   2889.875 ms/op
                 executeQuery·p0.95:   2889.875 ms/op
                 executeQuery·p0.99:   2889.875 ms/op
                 executeQuery·p0.999:  2889.875 ms/op
                 executeQuery·p0.9999: 2889.875 ms/op
                 executeQuery·p1.00:   2889.875 ms/op

Iteration   3: 2785.018 ±(99.9%) 182.488 ms/op
                 executeQuery·p0.00:   2768.241 ms/op
                 executeQuery·p0.50:   2772.435 ms/op
                 executeQuery·p0.90:   2826.961 ms/op
                 executeQuery·p0.95:   2826.961 ms/op
                 executeQuery·p0.99:   2826.961 ms/op
                 executeQuery·p0.999:  2826.961 ms/op
                 executeQuery·p0.9999: 2826.961 ms/op
                 executeQuery·p1.00:   2826.961 ms/op

Iteration   4: 2826.961 ±(99.9%) 161.108 ms/op
                 executeQuery·p0.00:   2793.406 ms/op
                 executeQuery·p0.50:   2833.252 ms/op
                 executeQuery·p0.90:   2847.932 ms/op
                 executeQuery·p0.95:   2847.932 ms/op
                 executeQuery·p0.99:   2847.932 ms/op
                 executeQuery·p0.999:  2847.932 ms/op
                 executeQuery·p0.9999: 2847.932 ms/op
                 executeQuery·p1.00:   2847.932 ms/op

Iteration   5: 2830.107 ±(99.9%) 759.343 ms/op
                 executeQuery·p0.00:   2680.160 ms/op
                 executeQuery·p0.50:   2843.738 ms/op
                 executeQuery·p0.90:   2952.790 ms/op
                 executeQuery·p0.95:   2952.790 ms/op
                 executeQuery·p0.99:   2952.790 ms/op
                 executeQuery·p0.999:  2952.790 ms/op
                 executeQuery·p0.9999: 2952.790 ms/op
                 executeQuery·p1.00:   2952.790 ms/op


# Run progress: 21.25% complete, ETA 07:58:02
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3016.753 ±(99.9%) 1228.636 ms/op
# Warmup Iteration   2: 2812.281 ±(99.9%) 227.304 ms/op
# Warmup Iteration   3: 2903.507 ±(99.9%) 335.161 ms/op
# Warmup Iteration   4: 2847.932 ±(99.9%) 833.039 ms/op
# Warmup Iteration   5: 2881.487 ±(99.9%) 91.244 ms/op
Iteration   1: 2773.484 ±(99.9%) 875.847 ms/op
                 executeQuery·p0.00:   2629.829 ms/op
                 executeQuery·p0.50:   2753.561 ms/op
                 executeQuery·p0.90:   2956.984 ms/op
                 executeQuery·p0.95:   2956.984 ms/op
                 executeQuery·p0.99:   2956.984 ms/op
                 executeQuery·p0.999:  2956.984 ms/op
                 executeQuery·p0.9999: 2956.984 ms/op
                 executeQuery·p1.00:   2956.984 ms/op

Iteration   2: 2808.087 ±(99.9%) 407.155 ms/op
                 executeQuery·p0.00:   2751.463 ms/op
                 executeQuery·p0.50:   2799.698 ms/op
                 executeQuery·p0.90:   2881.487 ms/op
                 executeQuery·p0.95:   2881.487 ms/op
                 executeQuery·p0.99:   2881.487 ms/op
                 executeQuery·p0.999:  2881.487 ms/op
                 executeQuery·p0.9999: 2881.487 ms/op
                 executeQuery·p1.00:   2881.487 ms/op

Iteration   3: 2793.406 ±(99.9%) 418.718 ms/op
                 executeQuery·p0.00:   2705.326 ms/op
                 executeQuery·p0.50:   2805.989 ms/op
                 executeQuery·p0.90:   2856.321 ms/op
                 executeQuery·p0.95:   2856.321 ms/op
                 executeQuery·p0.99:   2856.321 ms/op
                 executeQuery·p0.999:  2856.321 ms/op
                 executeQuery·p0.9999: 2856.321 ms/op
                 executeQuery·p1.00:   2856.321 ms/op

Iteration   4: 2834.301 ±(99.9%) 787.831 ms/op
                 executeQuery·p0.00:   2680.160 ms/op
                 executeQuery·p0.50:   2858.418 ms/op
                 executeQuery·p0.90:   2940.207 ms/op
                 executeQuery·p0.95:   2940.207 ms/op
                 executeQuery·p0.99:   2940.207 ms/op
                 executeQuery·p0.999:  2940.207 ms/op
                 executeQuery·p0.9999: 2940.207 ms/op
                 executeQuery·p1.00:   2940.207 ms/op

Iteration   5: 2919.236 ±(99.9%) 258.077 ms/op
                 executeQuery·p0.00:   2877.293 ms/op
                 executeQuery·p0.50:   2919.236 ms/op
                 executeQuery·p0.90:   2961.179 ms/op
                 executeQuery·p0.95:   2961.179 ms/op
                 executeQuery·p0.99:   2961.179 ms/op
                 executeQuery·p0.999:  2961.179 ms/op
                 executeQuery·p0.9999: 2961.179 ms/op
                 executeQuery·p1.00:   2961.179 ms/op


# Run progress: 21.56% complete, ETA 07:56:22
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2943.353 ±(99.9%) 866.572 ms/op
# Warmup Iteration   2: 2850.030 ±(99.9%) 394.323 ms/op
# Warmup Iteration   3: 2854.224 ±(99.9%) 696.127 ms/op
# Warmup Iteration   4: 2856.321 ±(99.9%) 287.689 ms/op
# Warmup Iteration   5: 2842.690 ±(99.9%) 858.909 ms/op
Iteration   1: 2754.609 ±(99.9%) 551.642 ms/op
                 executeQuery·p0.00:   2634.023 ms/op
                 executeQuery·p0.50:   2774.532 ms/op
                 executeQuery·p0.90:   2835.350 ms/op
                 executeQuery·p0.95:   2835.350 ms/op
                 executeQuery·p0.99:   2835.350 ms/op
                 executeQuery·p0.999:  2835.350 ms/op
                 executeQuery·p0.9999: 2835.350 ms/op
                 executeQuery·p1.00:   2835.350 ms/op

Iteration   2: 2797.601 ±(99.9%) 531.580 ms/op
                 executeQuery·p0.00:   2692.743 ms/op
                 executeQuery·p0.50:   2812.281 ms/op
                 executeQuery·p0.90:   2873.098 ms/op
                 executeQuery·p0.95:   2873.098 ms/op
                 executeQuery·p0.99:   2873.098 ms/op
                 executeQuery·p0.999:  2873.098 ms/op
                 executeQuery·p0.9999: 2873.098 ms/op
                 executeQuery·p1.00:   2873.098 ms/op

Iteration   3: 2835.350 ±(99.9%) 595.867 ms/op
                 executeQuery·p0.00:   2755.658 ms/op
                 executeQuery·p0.50:   2816.475 ms/op
                 executeQuery·p0.90:   2952.790 ms/op
                 executeQuery·p0.95:   2952.790 ms/op
                 executeQuery·p0.99:   2952.790 ms/op
                 executeQuery·p0.999:  2952.790 ms/op
                 executeQuery·p0.9999: 2952.790 ms/op
                 executeQuery·p1.00:   2952.790 ms/op

Iteration   4: 2809.135 ±(99.9%) 320.216 ms/op
                 executeQuery·p0.00:   2764.046 ms/op
                 executeQuery·p0.50:   2799.698 ms/op
                 executeQuery·p0.90:   2873.098 ms/op
                 executeQuery·p0.95:   2873.098 ms/op
                 executeQuery·p0.99:   2873.098 ms/op
                 executeQuery·p0.999:  2873.098 ms/op
                 executeQuery·p0.9999: 2873.098 ms/op
                 executeQuery·p1.00:   2873.098 ms/op

Iteration   5: 2839.544 ±(99.9%) 167.077 ms/op
                 executeQuery·p0.00:   2801.795 ms/op
                 executeQuery·p0.50:   2847.932 ms/op
                 executeQuery·p0.90:   2860.515 ms/op
                 executeQuery·p0.95:   2860.515 ms/op
                 executeQuery·p0.99:   2860.515 ms/op
                 executeQuery·p0.999:  2860.515 ms/op
                 executeQuery·p0.9999: 2860.515 ms/op
                 executeQuery·p1.00:   2860.515 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 100
  mean =   2816.182 ±(99.9%) 29.431 ms/op

  Histogram, ms/op:
    [2600.000, 2650.000) = 3 
    [2650.000, 2700.000) = 8 
    [2700.000, 2750.000) = 4 
    [2750.000, 2800.000) = 29 
    [2800.000, 2850.000) = 21 
    [2850.000, 2900.000) = 22 
    [2900.000, 2950.000) = 7 
    [2950.000, 3000.000) = 4 
    [3000.000, 3050.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2629.829 ms/op
     p(50.0000) =   2812.281 ms/op
     p(90.0000) =   2923.430 ms/op
     p(95.0000) =   2952.790 ms/op
     p(99.0000) =   3091.034 ms/op
     p(99.9000) =   3091.202 ms/op
     p(99.9900) =   3091.202 ms/op
     p(99.9990) =   3091.202 ms/op
     p(99.9999) =   3091.202 ms/op
    p(100.0000) =   3091.202 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6)

# Run progress: 21.88% complete, ETA 07:54:39
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3097.494 ±(99.9%) 966.271 ms/op
# Warmup Iteration   2: 2987.393 ±(99.9%) 457.494 ms/op
# Warmup Iteration   3: 2915.041 ±(99.9%) 154.910 ms/op
# Warmup Iteration   4: 2835.350 ±(99.9%) 325.995 ms/op
# Warmup Iteration   5: 2908.750 ±(99.9%) 697.181 ms/op
Iteration   1: 2884.633 ±(99.9%) 529.907 ms/op
                 executeQuery·p0.00:   2814.378 ms/op
                 executeQuery·p0.50:   2877.293 ms/op
                 executeQuery·p0.90:   2969.567 ms/op
                 executeQuery·p0.95:   2969.567 ms/op
                 executeQuery·p0.99:   2969.567 ms/op
                 executeQuery·p0.999:  2969.567 ms/op
                 executeQuery·p0.9999: 2969.567 ms/op
                 executeQuery·p1.00:   2969.567 ms/op

Iteration   2: 2846.884 ±(99.9%) 633.464 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2810.184 ms/op
                 executeQuery·p0.90:   2990.539 ms/op
                 executeQuery·p0.95:   2990.539 ms/op
                 executeQuery·p0.99:   2990.539 ms/op
                 executeQuery·p0.999:  2990.539 ms/op
                 executeQuery·p0.9999: 2990.539 ms/op
                 executeQuery·p1.00:   2990.539 ms/op

Iteration   3: 2877.293 ±(99.9%) 662.791 ms/op
                 executeQuery·p0.00:   2743.075 ms/op
                 executeQuery·p0.50:   2894.070 ms/op
                 executeQuery·p0.90:   2977.956 ms/op
                 executeQuery·p0.95:   2977.956 ms/op
                 executeQuery·p0.99:   2977.956 ms/op
                 executeQuery·p0.999:  2977.956 ms/op
                 executeQuery·p0.9999: 2977.956 ms/op
                 executeQuery·p1.00:   2977.956 ms/op

Iteration   4: 3003.122 ±(99.9%) 114.991 ms/op
                 executeQuery·p0.00:   2986.344 ms/op
                 executeQuery·p0.50:   3001.025 ms/op
                 executeQuery·p0.90:   3024.093 ms/op
                 executeQuery·p0.95:   3024.093 ms/op
                 executeQuery·p0.99:   3024.093 ms/op
                 executeQuery·p0.999:  3024.093 ms/op
                 executeQuery·p0.9999: 3024.093 ms/op
                 executeQuery·p1.00:   3024.093 ms/op

Iteration   5: 2846.884 ±(99.9%) 596.432 ms/op
                 executeQuery·p0.00:   2747.269 ms/op
                 executeQuery·p0.50:   2835.350 ms/op
                 executeQuery·p0.90:   2969.567 ms/op
                 executeQuery·p0.95:   2969.567 ms/op
                 executeQuery·p0.99:   2969.567 ms/op
                 executeQuery·p0.999:  2969.567 ms/op
                 executeQuery·p0.9999: 2969.567 ms/op
                 executeQuery·p1.00:   2969.567 ms/op


# Run progress: 22.19% complete, ETA 07:53:07
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3030.385 ±(99.9%) 1247.254 ms/op
# Warmup Iteration   2: 2901.410 ±(99.9%) 811.411 ms/op
# Warmup Iteration   3: 2910.847 ±(99.9%) 823.579 ms/op
# Warmup Iteration   4: 2883.584 ±(99.9%) 355.804 ms/op
# Warmup Iteration   5: 2878.341 ±(99.9%) 502.879 ms/op
Iteration   1: 2874.147 ±(99.9%) 672.101 ms/op
                 executeQuery·p0.00:   2738.881 ms/op
                 executeQuery·p0.50:   2894.070 ms/op
                 executeQuery·p0.90:   2969.567 ms/op
                 executeQuery·p0.95:   2969.567 ms/op
                 executeQuery·p0.99:   2969.567 ms/op
                 executeQuery·p0.999:  2969.567 ms/op
                 executeQuery·p0.9999: 2969.567 ms/op
                 executeQuery·p1.00:   2969.567 ms/op

Iteration   2: 2869.953 ±(99.9%) 964.464 ms/op
                 executeQuery·p0.00:   2713.715 ms/op
                 executeQuery·p0.50:   2875.195 ms/op
                 executeQuery·p0.90:   3015.705 ms/op
                 executeQuery·p0.95:   3015.705 ms/op
                 executeQuery·p0.99:   3015.705 ms/op
                 executeQuery·p0.999:  3015.705 ms/op
                 executeQuery·p0.9999: 3015.705 ms/op
                 executeQuery·p1.00:   3015.705 ms/op

Iteration   3: 2913.993 ±(99.9%) 628.808 ms/op
                 executeQuery·p0.00:   2801.795 ms/op
                 executeQuery·p0.50:   2908.750 ms/op
                 executeQuery·p0.90:   3036.676 ms/op
                 executeQuery·p0.95:   3036.676 ms/op
                 executeQuery·p0.99:   3036.676 ms/op
                 executeQuery·p0.999:  3036.676 ms/op
                 executeQuery·p0.9999: 3036.676 ms/op
                 executeQuery·p1.00:   3036.676 ms/op

Iteration   4: 2920.284 ±(99.9%) 615.028 ms/op
                 executeQuery·p0.00:   2785.018 ms/op
                 executeQuery·p0.50:   2944.401 ms/op
                 executeQuery·p0.90:   3007.316 ms/op
                 executeQuery·p0.95:   3007.316 ms/op
                 executeQuery·p0.99:   3007.316 ms/op
                 executeQuery·p0.999:  3007.316 ms/op
                 executeQuery·p0.9999: 3007.316 ms/op
                 executeQuery·p1.00:   3007.316 ms/op

Iteration   5: 2899.313 ±(99.9%) 603.371 ms/op
                 executeQuery·p0.00:   2772.435 ms/op
                 executeQuery·p0.50:   2927.624 ms/op
                 executeQuery·p0.90:   2969.567 ms/op
                 executeQuery·p0.95:   2969.567 ms/op
                 executeQuery·p0.99:   2969.567 ms/op
                 executeQuery·p0.999:  2969.567 ms/op
                 executeQuery·p0.9999: 2969.567 ms/op
                 executeQuery·p1.00:   2969.567 ms/op


# Run progress: 22.50% complete, ETA 07:51:31
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3042.968 ±(99.9%) 1371.789 ms/op
# Warmup Iteration   2: 2954.887 ±(99.9%) 1053.558 ms/op
# Warmup Iteration   3: 2868.904 ±(99.9%) 706.428 ms/op
# Warmup Iteration   4: 2893.021 ±(99.9%) 817.424 ms/op
# Warmup Iteration   5: 2860.515 ±(99.9%) 387.748 ms/op
Iteration   1: 2851.078 ±(99.9%) 377.103 ms/op
                 executeQuery·p0.00:   2789.212 ms/op
                 executeQuery·p0.50:   2847.932 ms/op
                 executeQuery·p0.90:   2919.236 ms/op
                 executeQuery·p0.95:   2919.236 ms/op
                 executeQuery·p0.99:   2919.236 ms/op
                 executeQuery·p0.999:  2919.236 ms/op
                 executeQuery·p0.9999: 2919.236 ms/op
                 executeQuery·p1.00:   2919.236 ms/op

Iteration   2: 2838.495 ±(99.9%) 545.392 ms/op
                 executeQuery·p0.00:   2717.909 ms/op
                 executeQuery·p0.50:   2862.612 ms/op
                 executeQuery·p0.90:   2910.847 ms/op
                 executeQuery·p0.95:   2910.847 ms/op
                 executeQuery·p0.99:   2910.847 ms/op
                 executeQuery·p0.999:  2910.847 ms/op
                 executeQuery·p0.9999: 2910.847 ms/op
                 executeQuery·p1.00:   2910.847 ms/op

Iteration   3: 2891.973 ±(99.9%) 555.678 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2904.556 ms/op
                 executeQuery·p0.90:   2982.150 ms/op
                 executeQuery·p0.95:   2982.150 ms/op
                 executeQuery·p0.99:   2982.150 ms/op
                 executeQuery·p0.999:  2982.150 ms/op
                 executeQuery·p0.9999: 2982.150 ms/op
                 executeQuery·p1.00:   2982.150 ms/op

Iteration   4: 2889.875 ±(99.9%) 632.545 ms/op
                 executeQuery·p0.00:   2810.184 ms/op
                 executeQuery·p0.50:   2866.807 ms/op
                 executeQuery·p0.90:   3015.705 ms/op
                 executeQuery·p0.95:   3015.705 ms/op
                 executeQuery·p0.99:   3015.705 ms/op
                 executeQuery·p0.999:  3015.705 ms/op
                 executeQuery·p0.9999: 3015.705 ms/op
                 executeQuery·p1.00:   3015.705 ms/op

Iteration   5: 2916.090 ±(99.9%) 615.028 ms/op
                 executeQuery·p0.00:   2785.018 ms/op
                 executeQuery·p0.50:   2936.013 ms/op
                 executeQuery·p0.90:   3007.316 ms/op
                 executeQuery·p0.95:   3007.316 ms/op
                 executeQuery·p0.99:   3007.316 ms/op
                 executeQuery·p0.999:  3007.316 ms/op
                 executeQuery·p0.9999: 3007.316 ms/op
                 executeQuery·p1.00:   3007.316 ms/op


# Run progress: 22.81% complete, ETA 07:49:55
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3040.870 ±(99.9%) 1002.709 ms/op
# Warmup Iteration   2: 2878.341 ±(99.9%) 850.313 ms/op
# Warmup Iteration   3: 2878.341 ±(99.9%) 1059.092 ms/op
# Warmup Iteration   4: 2927.624 ±(99.9%) 899.195 ms/op
# Warmup Iteration   5: 2881.487 ±(99.9%) 194.190 ms/op
Iteration   1: 2915.041 ±(99.9%) 255.215 ms/op
                 executeQuery·p0.00:   2860.515 ms/op
                 executeQuery·p0.50:   2923.430 ms/op
                 executeQuery·p0.90:   2952.790 ms/op
                 executeQuery·p0.95:   2952.790 ms/op
                 executeQuery·p0.99:   2952.790 ms/op
                 executeQuery·p0.999:  2952.790 ms/op
                 executeQuery·p0.9999: 2952.790 ms/op
                 executeQuery·p1.00:   2952.790 ms/op

Iteration   2: 2800.746 ±(99.9%) 472.761 ms/op
                 executeQuery·p0.00:   2696.937 ms/op
                 executeQuery·p0.50:   2826.961 ms/op
                 executeQuery·p0.90:   2852.127 ms/op
                 executeQuery·p0.95:   2852.127 ms/op
                 executeQuery·p0.99:   2852.127 ms/op
                 executeQuery·p0.999:  2852.127 ms/op
                 executeQuery·p0.9999: 2852.127 ms/op
                 executeQuery·p1.00:   2852.127 ms/op

Iteration   3: 2860.515 ±(99.9%) 653.864 ms/op
                 executeQuery·p0.00:   2734.686 ms/op
                 executeQuery·p0.50:   2866.807 ms/op
                 executeQuery·p0.90:   2973.762 ms/op
                 executeQuery·p0.95:   2973.762 ms/op
                 executeQuery·p0.99:   2973.762 ms/op
                 executeQuery·p0.999:  2973.762 ms/op
                 executeQuery·p0.9999: 2973.762 ms/op
                 executeQuery·p1.00:   2973.762 ms/op

Iteration   4: 2901.410 ±(99.9%) 302.926 ms/op
                 executeQuery·p0.00:   2847.932 ms/op
                 executeQuery·p0.50:   2904.556 ms/op
                 executeQuery·p0.90:   2948.596 ms/op
                 executeQuery·p0.95:   2948.596 ms/op
                 executeQuery·p0.99:   2948.596 ms/op
                 executeQuery·p0.999:  2948.596 ms/op
                 executeQuery·p0.9999: 2948.596 ms/op
                 executeQuery·p1.00:   2948.596 ms/op

Iteration   5: 2861.564 ±(99.9%) 479.957 ms/op
                 executeQuery·p0.00:   2772.435 ms/op
                 executeQuery·p0.50:   2864.710 ms/op
                 executeQuery·p0.90:   2944.401 ms/op
                 executeQuery·p0.95:   2944.401 ms/op
                 executeQuery·p0.99:   2944.401 ms/op
                 executeQuery·p0.999:  2944.401 ms/op
                 executeQuery·p0.9999: 2944.401 ms/op
                 executeQuery·p1.00:   2944.401 ms/op


# Run progress: 23.13% complete, ETA 07:48:17
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3060.793 ±(99.9%) 1103.478 ms/op
# Warmup Iteration   2: 2961.179 ±(99.9%) 608.473 ms/op
# Warmup Iteration   3: 2828.009 ±(99.9%) 530.369 ms/op
# Warmup Iteration   4: 2903.507 ±(99.9%) 633.464 ms/op
# Warmup Iteration   5: 2853.175 ±(99.9%) 661.821 ms/op
Iteration   1: 2895.118 ±(99.9%) 880.587 ms/op
                 executeQuery·p0.00:   2755.658 ms/op
                 executeQuery·p0.50:   2883.584 ms/op
                 executeQuery·p0.90:   3057.648 ms/op
                 executeQuery·p0.95:   3057.648 ms/op
                 executeQuery·p0.99:   3057.648 ms/op
                 executeQuery·p0.999:  3057.648 ms/op
                 executeQuery·p0.9999: 3057.648 ms/op
                 executeQuery·p1.00:   3057.648 ms/op

Iteration   2: 2861.564 ±(99.9%) 513.956 ms/op
                 executeQuery·p0.00:   2780.824 ms/op
                 executeQuery·p0.50:   2864.710 ms/op
                 executeQuery·p0.90:   2936.013 ms/op
                 executeQuery·p0.95:   2936.013 ms/op
                 executeQuery·p0.99:   2936.013 ms/op
                 executeQuery·p0.999:  2936.013 ms/op
                 executeQuery·p0.9999: 2936.013 ms/op
                 executeQuery·p1.00:   2936.013 ms/op

Iteration   3: 2947.547 ±(99.9%) 365.898 ms/op
                 executeQuery·p0.00:   2868.904 ms/op
                 executeQuery·p0.50:   2963.276 ms/op
                 executeQuery·p0.90:   2994.733 ms/op
                 executeQuery·p0.95:   2994.733 ms/op
                 executeQuery·p0.99:   2994.733 ms/op
                 executeQuery·p0.999:  2994.733 ms/op
                 executeQuery·p0.9999: 2994.733 ms/op
                 executeQuery·p1.00:   2994.733 ms/op

Iteration   4: 2929.721 ±(99.9%) 263.244 ms/op
                 executeQuery·p0.00:   2877.293 ms/op
                 executeQuery·p0.50:   2936.013 ms/op
                 executeQuery·p0.90:   2969.567 ms/op
                 executeQuery·p0.95:   2969.567 ms/op
                 executeQuery·p0.99:   2969.567 ms/op
                 executeQuery·p0.999:  2969.567 ms/op
                 executeQuery·p0.9999: 2969.567 ms/op
                 executeQuery·p1.00:   2969.567 ms/op

Iteration   5: 2867.855 ±(99.9%) 677.544 ms/op
                 executeQuery·p0.00:   2738.881 ms/op
                 executeQuery·p0.50:   2875.195 ms/op
                 executeQuery·p0.90:   2982.150 ms/op
                 executeQuery·p0.95:   2982.150 ms/op
                 executeQuery·p0.99:   2982.150 ms/op
                 executeQuery·p0.999:  2982.150 ms/op
                 executeQuery·p0.9999: 2982.150 ms/op
                 executeQuery·p1.00:   2982.150 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 100
  mean =   2886.604 ±(99.9%) 29.620 ms/op

  Histogram, ms/op:
    [2600.000, 2650.000) = 0 
    [2650.000, 2700.000) = 1 
    [2700.000, 2750.000) = 7 
    [2750.000, 2800.000) = 11 
    [2800.000, 2850.000) = 18 
    [2850.000, 2900.000) = 14 
    [2900.000, 2950.000) = 20 
    [2950.000, 3000.000) = 21 
    [3000.000, 3050.000) = 7 

  Percentiles, ms/op:
      p(0.0000) =   2696.937 ms/op
     p(50.0000) =   2896.167 ms/op
     p(90.0000) =   2990.539 ms/op
     p(95.0000) =   3015.495 ms/op
     p(99.0000) =   3057.438 ms/op
     p(99.9000) =   3057.648 ms/op
     p(99.9900) =   3057.648 ms/op
     p(99.9990) =   3057.648 ms/op
     p(99.9999) =   3057.648 ms/op
    p(100.0000) =   3057.648 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8)

# Run progress: 23.44% complete, ETA 07:46:41
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3088.056 ±(99.9%) 964.718 ms/op
# Warmup Iteration   2: 2959.081 ±(99.9%) 294.004 ms/op
# Warmup Iteration   3: 2989.490 ±(99.9%) 613.034 ms/op
# Warmup Iteration   4: 2879.390 ±(99.9%) 456.489 ms/op
# Warmup Iteration   5: 2912.944 ±(99.9%) 399.873 ms/op
Iteration   1: 2929.721 ±(99.9%) 493.106 ms/op
                 executeQuery·p0.00:   2822.767 ms/op
                 executeQuery·p0.50:   2946.499 ms/op
                 executeQuery·p0.90:   3003.122 ms/op
                 executeQuery·p0.95:   3003.122 ms/op
                 executeQuery·p0.99:   3003.122 ms/op
                 executeQuery·p0.999:  3003.122 ms/op
                 executeQuery·p0.9999: 3003.122 ms/op
                 executeQuery·p1.00:   3003.122 ms/op

Iteration   2: 2918.187 ±(99.9%) 178.931 ms/op
                 executeQuery·p0.00:   2885.681 ms/op
                 executeQuery·p0.50:   2919.236 ms/op
                 executeQuery·p0.90:   2948.596 ms/op
                 executeQuery·p0.95:   2948.596 ms/op
                 executeQuery·p0.99:   2948.596 ms/op
                 executeQuery·p0.999:  2948.596 ms/op
                 executeQuery·p0.9999: 2948.596 ms/op
                 executeQuery·p1.00:   2948.596 ms/op

Iteration   3: 2930.770 ±(99.9%) 290.548 ms/op
                 executeQuery·p0.00:   2864.710 ms/op
                 executeQuery·p0.50:   2946.499 ms/op
                 executeQuery·p0.90:   2965.373 ms/op
                 executeQuery·p0.95:   2965.373 ms/op
                 executeQuery·p0.99:   2965.373 ms/op
                 executeQuery·p0.999:  2965.373 ms/op
                 executeQuery·p0.9999: 2965.373 ms/op
                 executeQuery·p1.00:   2965.373 ms/op

Iteration   4: 2902.458 ±(99.9%) 473.084 ms/op
                 executeQuery·p0.00:   2839.544 ms/op
                 executeQuery·p0.50:   2885.681 ms/op
                 executeQuery·p0.90:   2998.927 ms/op
                 executeQuery·p0.95:   2998.927 ms/op
                 executeQuery·p0.99:   2998.927 ms/op
                 executeQuery·p0.999:  2998.927 ms/op
                 executeQuery·p0.9999: 2998.927 ms/op
                 executeQuery·p1.00:   2998.927 ms/op

Iteration   5: 2944.401 ±(99.9%) 636.020 ms/op
                 executeQuery·p0.00:   2797.601 ms/op
                 executeQuery·p0.50:   2986.344 ms/op
                 executeQuery·p0.90:   3007.316 ms/op
                 executeQuery·p0.95:   3007.316 ms/op
                 executeQuery·p0.99:   3007.316 ms/op
                 executeQuery·p0.999:  3007.316 ms/op
                 executeQuery·p0.9999: 3007.316 ms/op
                 executeQuery·p1.00:   3007.316 ms/op


# Run progress: 23.75% complete, ETA 07:45:08
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3121.611 ±(99.9%) 710.015 ms/op
# Warmup Iteration   2: 3059.745 ±(99.9%) 318.010 ms/op
# Warmup Iteration   3: 2934.964 ±(99.9%) 522.461 ms/op
# Warmup Iteration   4: 2963.276 ±(99.9%) 821.048 ms/op
# Warmup Iteration   5: 2919.236 ±(99.9%) 1092.915 ms/op
Iteration   1: 2959.081 ±(99.9%) 458.095 ms/op
                 executeQuery·p0.00:   2877.293 ms/op
                 executeQuery·p0.50:   2965.373 ms/op
                 executeQuery·p0.90:   3028.287 ms/op
                 executeQuery·p0.95:   3028.287 ms/op
                 executeQuery·p0.99:   3028.287 ms/op
                 executeQuery·p0.999:  3028.287 ms/op
                 executeQuery·p0.9999: 3028.287 ms/op
                 executeQuery·p1.00:   3028.287 ms/op

Iteration   2: 2970.616 ±(99.9%) 441.144 ms/op
                 executeQuery·p0.00:   2873.098 ms/op
                 executeQuery·p0.50:   2994.733 ms/op
                 executeQuery·p0.90:   3019.899 ms/op
                 executeQuery·p0.95:   3019.899 ms/op
                 executeQuery·p0.99:   3019.899 ms/op
                 executeQuery·p0.999:  3019.899 ms/op
                 executeQuery·p0.9999: 3019.899 ms/op
                 executeQuery·p1.00:   3019.899 ms/op

Iteration   3: 2963.276 ±(99.9%) 515.443 ms/op
                 executeQuery·p0.00:   2864.710 ms/op
                 executeQuery·p0.50:   2971.664 ms/op
                 executeQuery·p0.90:   3045.065 ms/op
                 executeQuery·p0.95:   3045.065 ms/op
                 executeQuery·p0.99:   3045.065 ms/op
                 executeQuery·p0.999:  3045.065 ms/op
                 executeQuery·p0.9999: 3045.065 ms/op
                 executeQuery·p1.00:   3045.065 ms/op

Iteration   4: 2932.867 ±(99.9%) 742.715 ms/op
                 executeQuery·p0.00:   2797.601 ms/op
                 executeQuery·p0.50:   2927.624 ms/op
                 executeQuery·p0.90:   3078.619 ms/op
                 executeQuery·p0.95:   3078.619 ms/op
                 executeQuery·p0.99:   3078.619 ms/op
                 executeQuery·p0.999:  3078.619 ms/op
                 executeQuery·p0.9999: 3078.619 ms/op
                 executeQuery·p1.00:   3078.619 ms/op

Iteration   5: 2971.664 ±(99.9%) 458.095 ms/op
                 executeQuery·p0.00:   2902.458 ms/op
                 executeQuery·p0.50:   2959.081 ms/op
                 executeQuery·p0.90:   3066.036 ms/op
                 executeQuery·p0.95:   3066.036 ms/op
                 executeQuery·p0.99:   3066.036 ms/op
                 executeQuery·p0.999:  3066.036 ms/op
                 executeQuery·p0.9999: 3066.036 ms/op
                 executeQuery·p1.00:   3066.036 ms/op


# Run progress: 24.06% complete, ETA 07:43:39
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3091.202 ±(99.9%) 747.521 ms/op
# Warmup Iteration   2: 2963.276 ±(99.9%) 665.924 ms/op
# Warmup Iteration   3: 2926.576 ±(99.9%) 393.624 ms/op
# Warmup Iteration   4: 2972.713 ±(99.9%) 876.127 ms/op
# Warmup Iteration   5: 2908.750 ±(99.9%) 603.016 ms/op
Iteration   1: 2972.713 ±(99.9%) 615.426 ms/op
                 executeQuery·p0.00:   2902.458 ms/op
                 executeQuery·p0.50:   2938.110 ms/op
                 executeQuery·p0.90:   3112.174 ms/op
                 executeQuery·p0.95:   3112.174 ms/op
                 executeQuery·p0.99:   3112.174 ms/op
                 executeQuery·p0.999:  3112.174 ms/op
                 executeQuery·p0.9999: 3112.174 ms/op
                 executeQuery·p1.00:   3112.174 ms/op

Iteration   2: 2918.187 ±(99.9%) 870.238 ms/op
                 executeQuery·p0.00:   2785.018 ms/op
                 executeQuery·p0.50:   2898.264 ms/op
                 executeQuery·p0.90:   3091.202 ms/op
                 executeQuery·p0.95:   3091.202 ms/op
                 executeQuery·p0.99:   3091.202 ms/op
                 executeQuery·p0.999:  3091.202 ms/op
                 executeQuery·p0.9999: 3091.202 ms/op
                 executeQuery·p1.00:   3091.202 ms/op

Iteration   3: 2907.701 ±(99.9%) 620.577 ms/op
                 executeQuery·p0.00:   2797.601 ms/op
                 executeQuery·p0.50:   2908.750 ms/op
                 executeQuery·p0.90:   3015.705 ms/op
                 executeQuery·p0.95:   3015.705 ms/op
                 executeQuery·p0.99:   3015.705 ms/op
                 executeQuery·p0.999:  3015.705 ms/op
                 executeQuery·p0.9999: 3015.705 ms/op
                 executeQuery·p1.00:   3015.705 ms/op

Iteration   4: 2949.644 ±(99.9%) 186.962 ms/op
                 executeQuery·p0.00:   2910.847 ms/op
                 executeQuery·p0.50:   2956.984 ms/op
                 executeQuery·p0.90:   2973.762 ms/op
                 executeQuery·p0.95:   2973.762 ms/op
                 executeQuery·p0.99:   2973.762 ms/op
                 executeQuery·p0.999:  2973.762 ms/op
                 executeQuery·p0.9999: 2973.762 ms/op
                 executeQuery·p1.00:   2973.762 ms/op

Iteration   5: 3004.170 ±(99.9%) 556.943 ms/op
                 executeQuery·p0.00:   2906.653 ms/op
                 executeQuery·p0.50:   2996.830 ms/op
                 executeQuery·p0.90:   3116.368 ms/op
                 executeQuery·p0.95:   3116.368 ms/op
                 executeQuery·p0.99:   3116.368 ms/op
                 executeQuery·p0.999:  3116.368 ms/op
                 executeQuery·p0.9999: 3116.368 ms/op
                 executeQuery·p1.00:   3116.368 ms/op


# Run progress: 24.38% complete, ETA 07:42:07
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3115.319 ±(99.9%) 975.320 ms/op
# Warmup Iteration   2: 2977.956 ±(99.9%) 383.940 ms/op
# Warmup Iteration   3: 2971.664 ±(99.9%) 530.427 ms/op
# Warmup Iteration   4: 3001.025 ±(99.9%) 711.780 ms/op
# Warmup Iteration   5: 2886.730 ±(99.9%) 497.493 ms/op
Iteration   1: 2956.984 ±(99.9%) 369.643 ms/op
                 executeQuery·p0.00:   2915.041 ms/op
                 executeQuery·p0.50:   2936.013 ms/op
                 executeQuery·p0.90:   3040.870 ms/op
                 executeQuery·p0.95:   3040.870 ms/op
                 executeQuery·p0.99:   3040.870 ms/op
                 executeQuery·p0.999:  3040.870 ms/op
                 executeQuery·p0.9999: 3040.870 ms/op
                 executeQuery·p1.00:   3040.870 ms/op

Iteration   2: 2961.179 ±(99.9%) 513.777 ms/op
                 executeQuery·p0.00:   2864.710 ms/op
                 executeQuery·p0.50:   2967.470 ms/op
                 executeQuery·p0.90:   3045.065 ms/op
                 executeQuery·p0.95:   3045.065 ms/op
                 executeQuery·p0.99:   3045.065 ms/op
                 executeQuery·p0.999:  3045.065 ms/op
                 executeQuery·p0.9999: 3045.065 ms/op
                 executeQuery·p1.00:   3045.065 ms/op

Iteration   3: 2984.247 ±(99.9%) 1127.217 ms/op
                 executeQuery·p0.00:   2801.795 ms/op
                 executeQuery·p0.50:   2959.081 ms/op
                 executeQuery·p0.90:   3217.031 ms/op
                 executeQuery·p0.95:   3217.031 ms/op
                 executeQuery·p0.99:   3217.031 ms/op
                 executeQuery·p0.999:  3217.031 ms/op
                 executeQuery·p0.9999: 3217.031 ms/op
                 executeQuery·p1.00:   3217.031 ms/op

Iteration   4: 2980.053 ±(99.9%) 500.988 ms/op
                 executeQuery·p0.00:   2902.458 ms/op
                 executeQuery·p0.50:   2965.373 ms/op
                 executeQuery·p0.90:   3087.008 ms/op
                 executeQuery·p0.95:   3087.008 ms/op
                 executeQuery·p0.99:   3087.008 ms/op
                 executeQuery·p0.999:  3087.008 ms/op
                 executeQuery·p0.9999: 3087.008 ms/op
                 executeQuery·p1.00:   3087.008 ms/op

Iteration   5: 2854.224 ±(99.9%) 404.742 ms/op
                 executeQuery·p0.00:   2768.241 ms/op
                 executeQuery·p0.50:   2871.001 ms/op
                 executeQuery·p0.90:   2906.653 ms/op
                 executeQuery·p0.95:   2906.653 ms/op
                 executeQuery·p0.99:   2906.653 ms/op
                 executeQuery·p0.999:  2906.653 ms/op
                 executeQuery·p0.9999: 2906.653 ms/op
                 executeQuery·p1.00:   2906.653 ms/op


# Run progress: 24.69% complete, ETA 07:40:35
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_858264589 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_858264589(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_858264589> join_map = new Int_Multi_Object_Map<JRT_858264589>();
private final class JRT_378751107 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_378751107(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_378751107> join_map_0 = new Int_Multi_Object_Map<JRT_378751107>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        JRT_378751107 left_join_record = new JRT_378751107(ordinal_value, ordinal_value_0, ordinal_value_1);
        join_map_0.add(ordinal_value, left_join_key_prehash, left_join_record);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map_0.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        List<JRT_378751107> records_to_join_list = join_map_0.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_378751107 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            JRT_858264589 left_join_record_0 = new JRT_858264589(left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
            join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        if (!join_map.contains(ordinal_value, right_join_key_prehash)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        List<JRT_858264589> records_to_join_list = join_map.get(ordinal_value, right_join_key_prehash);
        foreach (JRT_858264589 left_join_record : records_to_join_list) {
            int left_join_ord_0 = left_join_record.ord_0;
            int left_join_ord_1 = left_join_record.ord_1;
            int left_join_ord_2 = left_join_record.ord_2;
            int left_join_ord_3 = left_join_record.ord_3;
            int left_join_ord_4 = left_join_record.ord_4;
            int left_join_ord_5 = left_join_record.ord_5;
            agg_0_count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3110.076 ±(99.9%) 1040.226 ms/op
# Warmup Iteration   2: 2942.304 ±(99.9%) 519.229 ms/op
# Warmup Iteration   3: 2941.256 ±(99.9%) 293.065 ms/op
# Warmup Iteration   4: 2966.422 ±(99.9%) 780.650 ms/op
# Warmup Iteration   5: 2913.993 ±(99.9%) 475.343 ms/op
Iteration   1: 2916.090 ±(99.9%) 780.022 ms/op
                 executeQuery·p0.00:   2780.824 ms/op
                 executeQuery·p0.50:   2929.721 ms/op
                 executeQuery·p0.90:   3024.093 ms/op
                 executeQuery·p0.95:   3024.093 ms/op
                 executeQuery·p0.99:   3024.093 ms/op
                 executeQuery·p0.999:  3024.093 ms/op
                 executeQuery·p0.9999: 3024.093 ms/op
                 executeQuery·p1.00:   3024.093 ms/op

Iteration   2: 2955.936 ±(99.9%) 332.226 ms/op
                 executeQuery·p0.00:   2902.458 ms/op
                 executeQuery·p0.50:   2948.596 ms/op
                 executeQuery·p0.90:   3024.093 ms/op
                 executeQuery·p0.95:   3024.093 ms/op
                 executeQuery·p0.99:   3024.093 ms/op
                 executeQuery·p0.999:  3024.093 ms/op
                 executeQuery·p0.9999: 3024.093 ms/op
                 executeQuery·p1.00:   3024.093 ms/op

Iteration   3: 2928.673 ±(99.9%) 667.714 ms/op
                 executeQuery·p0.00:   2835.350 ms/op
                 executeQuery·p0.50:   2925.527 ms/op
                 executeQuery·p0.90:   3028.287 ms/op
                 executeQuery·p0.95:   3028.287 ms/op
                 executeQuery·p0.99:   3028.287 ms/op
                 executeQuery·p0.999:  3028.287 ms/op
                 executeQuery·p0.9999: 3028.287 ms/op
                 executeQuery·p1.00:   3028.287 ms/op

Iteration   4: 2942.304 ±(99.9%) 679.033 ms/op
                 executeQuery·p0.00:   2814.378 ms/op
                 executeQuery·p0.50:   2961.179 ms/op
                 executeQuery·p0.90:   3032.482 ms/op
                 executeQuery·p0.95:   3032.482 ms/op
                 executeQuery·p0.99:   3032.482 ms/op
                 executeQuery·p0.999:  3032.482 ms/op
                 executeQuery·p0.9999: 3032.482 ms/op
                 executeQuery·p1.00:   3032.482 ms/op

Iteration   5: 2934.964 ±(99.9%) 633.464 ms/op
                 executeQuery·p0.00:   2822.767 ms/op
                 executeQuery·p0.50:   2933.916 ms/op
                 executeQuery·p0.90:   3049.259 ms/op
                 executeQuery·p0.95:   3049.259 ms/op
                 executeQuery·p0.99:   3049.259 ms/op
                 executeQuery·p0.999:  3049.259 ms/op
                 executeQuery·p0.9999: 3049.259 ms/op
                 executeQuery·p1.00:   3049.259 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 100
  mean =   2943.604 ±(99.9%) 28.515 ms/op

  Histogram, ms/op:
    [2700.000, 2750.000) = 0 
    [2750.000, 2800.000) = 6 
    [2800.000, 2850.000) = 10 
    [2850.000, 2900.000) = 11 
    [2900.000, 2950.000) = 27 
    [2950.000, 3000.000) = 18 
    [3000.000, 3050.000) = 21 
    [3050.000, 3100.000) = 4 
    [3100.000, 3150.000) = 2 
    [3150.000, 3200.000) = 0 
    [3200.000, 3250.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2768.241 ms/op
     p(50.0000) =   2944.401 ms/op
     p(90.0000) =   3044.645 ms/op
     p(95.0000) =   3086.588 ms/op
     p(99.0000) =   3216.025 ms/op
     p(99.9000) =   3217.031 ms/op
     p(99.9900) =   3217.031 ms/op
     p(99.9990) =   3217.031 ms/op
     p(99.9999) =   3217.031 ms/op
    p(100.0000) =   3217.031 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2)

# Run progress: 25.00% complete, ETA 07:39:00
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1715.470 ±(99.9%) 472.635 ms/op
# Warmup Iteration   2: 1565.374 ±(99.9%) 165.221 ms/op
# Warmup Iteration   3: 1536.913 ±(99.9%) 309.765 ms/op
# Warmup Iteration   4: 1527.026 ±(99.9%) 133.967 ms/op
# Warmup Iteration   5: 1493.771 ±(99.9%) 183.331 ms/op
Iteration   1: 1485.682 ±(99.9%) 55.005 ms/op
                 executeQuery·p0.00:   1463.812 ms/op
                 executeQuery·p0.50:   1474.298 ms/op
                 executeQuery·p0.90:   1530.921 ms/op
                 executeQuery·p0.95:   1530.921 ms/op
                 executeQuery·p0.99:   1530.921 ms/op
                 executeQuery·p0.999:  1530.921 ms/op
                 executeQuery·p0.9999: 1530.921 ms/op
                 executeQuery·p1.00:   1530.921 ms/op

Iteration   2: 1594.135 ±(99.9%) 324.147 ms/op
                 executeQuery·p0.00:   1369.440 ms/op
                 executeQuery·p0.50:   1623.196 ms/op
                 executeQuery·p0.90:   1814.036 ms/op
                 executeQuery·p0.95:   1814.036 ms/op
                 executeQuery·p0.99:   1814.036 ms/op
                 executeQuery·p0.999:  1814.036 ms/op
                 executeQuery·p0.9999: 1814.036 ms/op
                 executeQuery·p1.00:   1814.036 ms/op

Iteration   3: 1557.285 ±(99.9%) 200.425 ms/op
                 executeQuery·p0.00:   1423.966 ms/op
                 executeQuery·p0.50:   1543.504 ms/op
                 executeQuery·p0.90:   1665.139 ms/op
                 executeQuery·p0.95:   1665.139 ms/op
                 executeQuery·p0.99:   1665.139 ms/op
                 executeQuery·p0.999:  1665.139 ms/op
                 executeQuery·p0.9999: 1665.139 ms/op
                 executeQuery·p1.00:   1665.139 ms/op

Iteration   4: 1533.018 ±(99.9%) 361.166 ms/op
                 executeQuery·p0.00:   1344.274 ms/op
                 executeQuery·p0.50:   1499.464 ms/op
                 executeQuery·p0.90:   1845.494 ms/op
                 executeQuery·p0.95:   1845.494 ms/op
                 executeQuery·p0.99:   1845.494 ms/op
                 executeQuery·p0.999:  1845.494 ms/op
                 executeQuery·p0.9999: 1845.494 ms/op
                 executeQuery·p1.00:   1845.494 ms/op

Iteration   5: 1606.119 ±(99.9%) 296.669 ms/op
                 executeQuery·p0.00:   1451.229 ms/op
                 executeQuery·p0.50:   1667.236 ms/op
                 executeQuery·p0.90:   1732.248 ms/op
                 executeQuery·p0.95:   1732.248 ms/op
                 executeQuery·p0.99:   1732.248 ms/op
                 executeQuery·p0.999:  1732.248 ms/op
                 executeQuery·p0.9999: 1732.248 ms/op
                 executeQuery·p1.00:   1732.248 ms/op


# Run progress: 25.31% complete, ETA 07:36:57
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1793.414 ±(99.9%) 510.790 ms/op
# Warmup Iteration   2: 1601.925 ±(99.9%) 134.383 ms/op
# Warmup Iteration   3: 1688.207 ±(99.9%) 268.953 ms/op
# Warmup Iteration   4: 1605.819 ±(99.9%) 236.865 ms/op
# Warmup Iteration   5: 1601.325 ±(99.9%) 172.185 ms/op
Iteration   1: 1677.023 ±(99.9%) 292.381 ms/op
                 executeQuery·p0.00:   1528.824 ms/op
                 executeQuery·p0.50:   1672.479 ms/op
                 executeQuery·p0.90:   1822.425 ms/op
                 executeQuery·p0.95:   1822.425 ms/op
                 executeQuery·p0.99:   1822.425 ms/op
                 executeQuery·p0.999:  1822.425 ms/op
                 executeQuery·p0.9999: 1822.425 ms/op
                 executeQuery·p1.00:   1822.425 ms/op

Iteration   2: 1681.217 ±(99.9%) 389.870 ms/op
                 executeQuery·p0.00:   1505.755 ms/op
                 executeQuery·p0.50:   1675.624 ms/op
                 executeQuery·p0.90:   1870.660 ms/op
                 executeQuery·p0.95:   1870.660 ms/op
                 executeQuery·p0.99:   1870.660 ms/op
                 executeQuery·p0.999:  1870.660 ms/op
                 executeQuery·p0.9999: 1870.660 ms/op
                 executeQuery·p1.00:   1870.660 ms/op

Iteration   3: 1671.081 ±(99.9%) 212.342 ms/op
                 executeQuery·p0.00:   1572.864 ms/op
                 executeQuery·p0.50:   1655.702 ms/op
                 executeQuery·p0.90:   1763.705 ms/op
                 executeQuery·p0.95:   1763.705 ms/op
                 executeQuery·p0.99:   1763.705 ms/op
                 executeQuery·p0.999:  1763.705 ms/op
                 executeQuery·p0.9999: 1763.705 ms/op
                 executeQuery·p1.00:   1763.705 ms/op

Iteration   4: 1684.712 ±(99.9%) 175.704 ms/op
                 executeQuery·p0.00:   1589.641 ms/op
                 executeQuery·p0.50:   1698.693 ms/op
                 executeQuery·p0.90:   1746.928 ms/op
                 executeQuery·p0.95:   1746.928 ms/op
                 executeQuery·p0.99:   1746.928 ms/op
                 executeQuery·p0.999:  1746.928 ms/op
                 executeQuery·p0.9999: 1746.928 ms/op
                 executeQuery·p1.00:   1746.928 ms/op

Iteration   5: 1651.857 ±(99.9%) 160.866 ms/op
                 executeQuery·p0.00:   1602.224 ms/op
                 executeQuery·p0.50:   1625.293 ms/op
                 executeQuery·p0.90:   1730.150 ms/op
                 executeQuery·p0.95:   1730.150 ms/op
                 executeQuery·p0.99:   1730.150 ms/op
                 executeQuery·p0.999:  1730.150 ms/op
                 executeQuery·p0.9999: 1730.150 ms/op
                 executeQuery·p1.00:   1730.150 ms/op


# Run progress: 25.62% complete, ETA 07:34:45
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1771.045 ±(99.9%) 468.929 ms/op
# Warmup Iteration   2: 1664.440 ±(99.9%) 298.422 ms/op
# Warmup Iteration   3: 1620.799 ±(99.9%) 191.421 ms/op
# Warmup Iteration   4: 1642.420 ±(99.9%) 278.540 ms/op
# Warmup Iteration   5: 1616.305 ±(99.9%) 233.163 ms/op
Iteration   1: 1634.730 ±(99.9%) 263.517 ms/op
                 executeQuery·p0.00:   1491.075 ms/op
                 executeQuery·p0.50:   1630.536 ms/op
                 executeQuery·p0.90:   1763.705 ms/op
                 executeQuery·p0.95:   1763.705 ms/op
                 executeQuery·p0.99:   1763.705 ms/op
                 executeQuery·p0.999:  1763.705 ms/op
                 executeQuery·p0.9999: 1763.705 ms/op
                 executeQuery·p1.00:   1763.705 ms/op

Iteration   2: 1638.575 ±(99.9%) 372.802 ms/op
                 executeQuery·p0.00:   1478.492 ms/op
                 executeQuery·p0.50:   1625.293 ms/op
                 executeQuery·p0.90:   1822.425 ms/op
                 executeQuery·p0.95:   1822.425 ms/op
                 executeQuery·p0.99:   1822.425 ms/op
                 executeQuery·p0.999:  1822.425 ms/op
                 executeQuery·p0.9999: 1822.425 ms/op
                 executeQuery·p1.00:   1822.425 ms/op

Iteration   3: 1686.460 ±(99.9%) 459.011 ms/op
                 executeQuery·p0.00:   1514.144 ms/op
                 executeQuery·p0.50:   1678.770 ms/op
                 executeQuery·p0.90:   1958.740 ms/op
                 executeQuery·p0.95:   1958.740 ms/op
                 executeQuery·p0.99:   1958.740 ms/op
                 executeQuery·p0.999:  1958.740 ms/op
                 executeQuery·p0.9999: 1958.740 ms/op
                 executeQuery·p1.00:   1958.740 ms/op

Iteration   4: 1617.204 ±(99.9%) 72.479 ms/op
                 executeQuery·p0.00:   1572.864 ms/op
                 executeQuery·p0.50:   1608.516 ms/op
                 executeQuery·p0.90:   1675.624 ms/op
                 executeQuery·p0.95:   1675.624 ms/op
                 executeQuery·p0.99:   1675.624 ms/op
                 executeQuery·p0.999:  1675.624 ms/op
                 executeQuery·p0.9999: 1675.624 ms/op
                 executeQuery·p1.00:   1675.624 ms/op

Iteration   5: 1580.054 ±(99.9%) 29.098 ms/op
                 executeQuery·p0.00:   1558.184 ms/op
                 executeQuery·p0.50:   1581.253 ms/op
                 executeQuery·p0.90:   1593.836 ms/op
                 executeQuery·p0.95:   1593.836 ms/op
                 executeQuery·p0.99:   1593.836 ms/op
                 executeQuery·p0.999:  1593.836 ms/op
                 executeQuery·p0.9999: 1593.836 ms/op
                 executeQuery·p1.00:   1593.836 ms/op


# Run progress: 25.94% complete, ETA 07:32:35
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1743.432 ±(99.9%) 502.892 ms/op
# Warmup Iteration   2: 1654.303 ±(99.9%) 325.680 ms/op
# Warmup Iteration   3: 1600.427 ±(99.9%) 153.085 ms/op
# Warmup Iteration   4: 1624.094 ±(99.9%) 155.027 ms/op
# Warmup Iteration   5: 1593.236 ±(99.9%) 147.703 ms/op
Iteration   1: 1620.799 ±(99.9%) 184.719 ms/op
                 executeQuery·p0.00:   1514.144 ms/op
                 executeQuery·p0.50:   1612.710 ms/op
                 executeQuery·p0.90:   1732.248 ms/op
                 executeQuery·p0.95:   1732.248 ms/op
                 executeQuery·p0.99:   1732.248 ms/op
                 executeQuery·p0.999:  1732.248 ms/op
                 executeQuery·p0.9999: 1732.248 ms/op
                 executeQuery·p1.00:   1732.248 ms/op

Iteration   2: 1636.827 ±(99.9%) 148.762 ms/op
                 executeQuery·p0.00:   1574.961 ms/op
                 executeQuery·p0.50:   1629.487 ms/op
                 executeQuery·p0.90:   1702.887 ms/op
                 executeQuery·p0.95:   1702.887 ms/op
                 executeQuery·p0.99:   1702.887 ms/op
                 executeQuery·p0.999:  1702.887 ms/op
                 executeQuery·p0.9999: 1702.887 ms/op
                 executeQuery·p1.00:   1702.887 ms/op

Iteration   3: 1618.702 ±(99.9%) 137.284 ms/op
                 executeQuery·p0.00:   1564.475 ms/op
                 executeQuery·p0.50:   1610.613 ms/op
                 executeQuery·p0.90:   1749.025 ms/op
                 executeQuery·p0.95:   1749.025 ms/op
                 executeQuery·p0.99:   1749.025 ms/op
                 executeQuery·p0.999:  1749.025 ms/op
                 executeQuery·p0.9999: 1749.025 ms/op
                 executeQuery·p1.00:   1749.025 ms/op

Iteration   4: 1650.808 ±(99.9%) 219.801 ms/op
                 executeQuery·p0.00:   1558.184 ms/op
                 executeQuery·p0.50:   1647.313 ms/op
                 executeQuery·p0.90:   1742.733 ms/op
                 executeQuery·p0.95:   1742.733 ms/op
                 executeQuery·p0.99:   1742.733 ms/op
                 executeQuery·p0.999:  1742.733 ms/op
                 executeQuery·p0.9999: 1742.733 ms/op
                 executeQuery·p1.00:   1742.733 ms/op

Iteration   5: 1647.662 ±(99.9%) 236.630 ms/op
                 executeQuery·p0.00:   1541.407 ms/op
                 executeQuery·p0.50:   1636.827 ms/op
                 executeQuery·p0.90:   1765.802 ms/op
                 executeQuery·p0.95:   1765.802 ms/op
                 executeQuery·p0.99:   1765.802 ms/op
                 executeQuery·p0.999:  1765.802 ms/op
                 executeQuery·p0.9999: 1765.802 ms/op
                 executeQuery·p1.00:   1765.802 ms/op


# Run progress: 26.25% complete, ETA 07:30:29
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1713.024 ±(99.9%) 630.728 ms/op
# Warmup Iteration   2: 1574.062 ±(99.9%) 230.180 ms/op
# Warmup Iteration   3: 1578.257 ±(99.9%) 143.648 ms/op
# Warmup Iteration   4: 1530.322 ±(99.9%) 209.617 ms/op
# Warmup Iteration   5: 1599.528 ±(99.9%) 257.185 ms/op
Iteration   1: 1526.427 ±(99.9%) 268.346 ms/op
                 executeQuery·p0.00:   1363.149 ms/op
                 executeQuery·p0.50:   1509.949 ms/op
                 executeQuery·p0.90:   1757.413 ms/op
                 executeQuery·p0.95:   1757.413 ms/op
                 executeQuery·p0.99:   1757.413 ms/op
                 executeQuery·p0.999:  1757.413 ms/op
                 executeQuery·p0.9999: 1757.413 ms/op
                 executeQuery·p1.00:   1757.413 ms/op

Iteration   2: 1588.742 ±(99.9%) 146.239 ms/op
                 executeQuery·p0.00:   1509.949 ms/op
                 executeQuery·p0.50:   1583.350 ms/op
                 executeQuery·p0.90:   1671.430 ms/op
                 executeQuery·p0.95:   1671.430 ms/op
                 executeQuery·p0.99:   1671.430 ms/op
                 executeQuery·p0.999:  1671.430 ms/op
                 executeQuery·p0.9999: 1671.430 ms/op
                 executeQuery·p1.00:   1671.430 ms/op

Iteration   3: 1585.447 ±(99.9%) 276.367 ms/op
                 executeQuery·p0.00:   1428.161 ms/op
                 executeQuery·p0.50:   1562.378 ms/op
                 executeQuery·p0.90:   1774.191 ms/op
                 executeQuery·p0.95:   1774.191 ms/op
                 executeQuery·p0.99:   1774.191 ms/op
                 executeQuery·p0.999:  1774.191 ms/op
                 executeQuery·p0.9999: 1774.191 ms/op
                 executeQuery·p1.00:   1774.191 ms/op

Iteration   4: 1589.342 ±(99.9%) 189.842 ms/op
                 executeQuery·p0.00:   1463.812 ms/op
                 executeQuery·p0.50:   1604.321 ms/op
                 executeQuery·p0.90:   1692.402 ms/op
                 executeQuery·p0.95:   1692.402 ms/op
                 executeQuery·p0.99:   1692.402 ms/op
                 executeQuery·p0.999:  1692.402 ms/op
                 executeQuery·p0.9999: 1692.402 ms/op
                 executeQuery·p1.00:   1692.402 ms/op

Iteration   5: 1596.831 ±(99.9%) 260.962 ms/op
                 executeQuery·p0.00:   1444.938 ms/op
                 executeQuery·p0.50:   1602.224 ms/op
                 executeQuery·p0.90:   1749.025 ms/op
                 executeQuery·p0.95:   1749.025 ms/op
                 executeQuery·p0.99:   1749.025 ms/op
                 executeQuery·p0.999:  1749.025 ms/op
                 executeQuery·p0.9999: 1749.025 ms/op
                 executeQuery·p1.00:   1749.025 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 164
  mean =   1611.367 ±(99.9%) 27.649 ms/op

  Histogram, ms/op:
    [1300.000, 1350.000) = 1 
    [1350.000, 1400.000) = 2 
    [1400.000, 1450.000) = 4 
    [1450.000, 1500.000) = 18 
    [1500.000, 1550.000) = 23 
    [1550.000, 1600.000) = 27 
    [1600.000, 1650.000) = 30 
    [1650.000, 1700.000) = 24 
    [1700.000, 1750.000) = 21 
    [1750.000, 1800.000) = 7 
    [1800.000, 1850.000) = 5 
    [1850.000, 1900.000) = 1 
    [1900.000, 1950.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1344.274 ms/op
     p(50.0000) =   1605.370 ms/op
     p(90.0000) =   1749.025 ms/op
     p(95.0000) =   1772.093 ms/op
     p(99.0000) =   1901.488 ms/op
     p(99.9000) =   1958.740 ms/op
     p(99.9900) =   1958.740 ms/op
     p(99.9990) =   1958.740 ms/op
     p(99.9999) =   1958.740 ms/op
    p(100.0000) =   1958.740 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4)

# Run progress: 26.56% complete, ETA 07:28:32
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1730.849 ±(99.9%) 580.500 ms/op
# Warmup Iteration   2: 1598.329 ±(99.9%) 266.176 ms/op
# Warmup Iteration   3: 1648.661 ±(99.9%) 274.049 ms/op
# Warmup Iteration   4: 1590.240 ±(99.9%) 229.466 ms/op
# Warmup Iteration   5: 1581.253 ±(99.9%) 326.155 ms/op
Iteration   1: 1582.451 ±(99.9%) 162.108 ms/op
                 executeQuery·p0.00:   1474.298 ms/op
                 executeQuery·p0.50:   1556.087 ms/op
                 executeQuery·p0.90:   1667.236 ms/op
                 executeQuery·p0.95:   1667.236 ms/op
                 executeQuery·p0.99:   1667.236 ms/op
                 executeQuery·p0.999:  1667.236 ms/op
                 executeQuery·p0.9999: 1667.236 ms/op
                 executeQuery·p1.00:   1667.236 ms/op

Iteration   2: 1554.888 ±(99.9%) 180.555 ms/op
                 executeQuery·p0.00:   1430.258 ms/op
                 executeQuery·p0.50:   1581.253 ms/op
                 executeQuery·p0.90:   1637.876 ms/op
                 executeQuery·p0.95:   1637.876 ms/op
                 executeQuery·p0.99:   1637.876 ms/op
                 executeQuery·p0.999:  1637.876 ms/op
                 executeQuery·p0.9999: 1637.876 ms/op
                 executeQuery·p1.00:   1637.876 ms/op

Iteration   3: 1601.925 ±(99.9%) 110.650 ms/op
                 executeQuery·p0.00:   1545.601 ms/op
                 executeQuery·p0.50:   1595.933 ms/op
                 executeQuery·p0.90:   1677.722 ms/op
                 executeQuery·p0.95:   1677.722 ms/op
                 executeQuery·p0.99:   1677.722 ms/op
                 executeQuery·p0.999:  1677.722 ms/op
                 executeQuery·p0.9999: 1677.722 ms/op
                 executeQuery·p1.00:   1677.722 ms/op

Iteration   4: 1615.107 ±(99.9%) 120.402 ms/op
                 executeQuery·p0.00:   1558.184 ms/op
                 executeQuery·p0.50:   1623.196 ms/op
                 executeQuery·p0.90:   1702.887 ms/op
                 executeQuery·p0.95:   1702.887 ms/op
                 executeQuery·p0.99:   1702.887 ms/op
                 executeQuery·p0.999:  1702.887 ms/op
                 executeQuery·p0.9999: 1702.887 ms/op
                 executeQuery·p1.00:   1702.887 ms/op

Iteration   5: 1638.924 ±(99.9%) 198.097 ms/op
                 executeQuery·p0.00:   1543.504 ms/op
                 executeQuery·p0.50:   1637.876 ms/op
                 executeQuery·p0.90:   1738.539 ms/op
                 executeQuery·p0.95:   1738.539 ms/op
                 executeQuery·p0.99:   1738.539 ms/op
                 executeQuery·p0.999:  1738.539 ms/op
                 executeQuery·p0.9999: 1738.539 ms/op
                 executeQuery·p1.00:   1738.539 ms/op


# Run progress: 26.88% complete, ETA 07:26:36
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1769.297 ±(99.9%) 513.872 ms/op
# Warmup Iteration   2: 1638.924 ±(99.9%) 323.107 ms/op
# Warmup Iteration   3: 1601.325 ±(99.9%) 170.209 ms/op
# Warmup Iteration   4: 1569.269 ±(99.9%) 136.831 ms/op
# Warmup Iteration   5: 1612.410 ±(99.9%) 218.913 ms/op
Iteration   1: 1673.527 ±(99.9%) 316.604 ms/op
                 executeQuery·p0.00:   1562.378 ms/op
                 executeQuery·p0.50:   1631.584 ms/op
                 executeQuery·p0.90:   1843.397 ms/op
                 executeQuery·p0.95:   1843.397 ms/op
                 executeQuery·p0.99:   1843.397 ms/op
                 executeQuery·p0.999:  1843.397 ms/op
                 executeQuery·p0.9999: 1843.397 ms/op
                 executeQuery·p1.00:   1843.397 ms/op

Iteration   2: 1604.671 ±(99.9%) 332.553 ms/op
                 executeQuery·p0.00:   1411.383 ms/op
                 executeQuery·p0.50:   1606.418 ms/op
                 executeQuery·p0.90:   1759.511 ms/op
                 executeQuery·p0.95:   1759.511 ms/op
                 executeQuery·p0.99:   1759.511 ms/op
                 executeQuery·p0.999:  1759.511 ms/op
                 executeQuery·p0.9999: 1759.511 ms/op
                 executeQuery·p1.00:   1759.511 ms/op

Iteration   3: 1643.818 ±(99.9%) 225.977 ms/op
                 executeQuery·p0.00:   1572.864 ms/op
                 executeQuery·p0.50:   1619.001 ms/op
                 executeQuery·p0.90:   1763.705 ms/op
                 executeQuery·p0.95:   1763.705 ms/op
                 executeQuery·p0.99:   1763.705 ms/op
                 executeQuery·p0.999:  1763.705 ms/op
                 executeQuery·p0.9999: 1763.705 ms/op
                 executeQuery·p1.00:   1763.705 ms/op

Iteration   4: 1619.301 ±(99.9%) 279.051 ms/op
                 executeQuery·p0.00:   1409.286 ms/op
                 executeQuery·p0.50:   1681.916 ms/op
                 executeQuery·p0.90:   1742.733 ms/op
                 executeQuery·p0.95:   1742.733 ms/op
                 executeQuery·p0.99:   1742.733 ms/op
                 executeQuery·p0.999:  1742.733 ms/op
                 executeQuery·p0.9999: 1742.733 ms/op
                 executeQuery·p1.00:   1742.733 ms/op

Iteration   5: 1582.451 ±(99.9%) 155.434 ms/op
                 executeQuery·p0.00:   1482.686 ms/op
                 executeQuery·p0.50:   1558.184 ms/op
                 executeQuery·p0.90:   1694.499 ms/op
                 executeQuery·p0.95:   1694.499 ms/op
                 executeQuery·p0.99:   1694.499 ms/op
                 executeQuery·p0.999:  1694.499 ms/op
                 executeQuery·p0.9999: 1694.499 ms/op
                 executeQuery·p1.00:   1694.499 ms/op


# Run progress: 27.19% complete, ETA 07:24:29
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1762.307 ±(99.9%) 580.441 ms/op
# Warmup Iteration   2: 1631.934 ±(99.9%) 273.680 ms/op
# Warmup Iteration   3: 1642.769 ±(99.9%) 234.899 ms/op
# Warmup Iteration   4: 1596.831 ±(99.9%) 235.703 ms/op
# Warmup Iteration   5: 1612.111 ±(99.9%) 204.245 ms/op
Iteration   1: 1600.427 ±(99.9%) 241.108 ms/op
                 executeQuery·p0.00:   1470.104 ms/op
                 executeQuery·p0.50:   1562.378 ms/op
                 executeQuery·p0.90:   1757.413 ms/op
                 executeQuery·p0.95:   1757.413 ms/op
                 executeQuery·p0.99:   1757.413 ms/op
                 executeQuery·p0.999:  1757.413 ms/op
                 executeQuery·p0.9999: 1757.413 ms/op
                 executeQuery·p1.00:   1757.413 ms/op

Iteration   2: 1601.625 ±(99.9%) 159.469 ms/op
                 executeQuery·p0.00:   1520.435 ms/op
                 executeQuery·p0.50:   1598.030 ms/op
                 executeQuery·p0.90:   1746.928 ms/op
                 executeQuery·p0.95:   1746.928 ms/op
                 executeQuery·p0.99:   1746.928 ms/op
                 executeQuery·p0.999:  1746.928 ms/op
                 executeQuery·p0.9999: 1746.928 ms/op
                 executeQuery·p1.00:   1746.928 ms/op

Iteration   3: 1621.997 ±(99.9%) 319.310 ms/op
                 executeQuery·p0.00:   1465.909 ms/op
                 executeQuery·p0.50:   1587.544 ms/op
                 executeQuery·p0.90:   1845.494 ms/op
                 executeQuery·p0.95:   1845.494 ms/op
                 executeQuery·p0.99:   1845.494 ms/op
                 executeQuery·p0.999:  1845.494 ms/op
                 executeQuery·p0.9999: 1845.494 ms/op
                 executeQuery·p1.00:   1845.494 ms/op

Iteration   4: 1625.293 ±(99.9%) 219.025 ms/op
                 executeQuery·p0.00:   1541.407 ms/op
                 executeQuery·p0.50:   1585.447 ms/op
                 executeQuery·p0.90:   1763.705 ms/op
                 executeQuery·p0.95:   1763.705 ms/op
                 executeQuery·p0.99:   1763.705 ms/op
                 executeQuery·p0.999:  1763.705 ms/op
                 executeQuery·p0.9999: 1763.705 ms/op
                 executeQuery·p1.00:   1763.705 ms/op

Iteration   5: 1649.859 ±(99.9%) 184.140 ms/op
                 executeQuery·p0.00:   1545.601 ms/op
                 executeQuery·p0.50:   1642.070 ms/op
                 executeQuery·p0.90:   1782.579 ms/op
                 executeQuery·p0.95:   1782.579 ms/op
                 executeQuery·p0.99:   1782.579 ms/op
                 executeQuery·p0.999:  1782.579 ms/op
                 executeQuery·p0.9999: 1782.579 ms/op
                 executeQuery·p1.00:   1782.579 ms/op


# Run progress: 27.50% complete, ETA 07:22:32
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1773.492 ±(99.9%) 619.053 ms/op
# Warmup Iteration   2: 1698.344 ±(99.9%) 314.355 ms/op
# Warmup Iteration   3: 1641.371 ±(99.9%) 247.320 ms/op
# Warmup Iteration   4: 1653.255 ±(99.9%) 214.135 ms/op
# Warmup Iteration   5: 1623.196 ±(99.9%) 169.028 ms/op
Iteration   1: 1646.614 ±(99.9%) 425.868 ms/op
                 executeQuery·p0.00:   1455.423 ms/op
                 executeQuery·p0.50:   1638.924 ms/op
                 executeQuery·p0.90:   1912.603 ms/op
                 executeQuery·p0.95:   1912.603 ms/op
                 executeQuery·p0.99:   1912.603 ms/op
                 executeQuery·p0.999:  1912.603 ms/op
                 executeQuery·p0.9999: 1912.603 ms/op
                 executeQuery·p1.00:   1912.603 ms/op

Iteration   2: 1668.634 ±(99.9%) 283.493 ms/op
                 executeQuery·p0.00:   1553.990 ms/op
                 executeQuery·p0.50:   1643.119 ms/op
                 executeQuery·p0.90:   1799.356 ms/op
                 executeQuery·p0.95:   1799.356 ms/op
                 executeQuery·p0.99:   1799.356 ms/op
                 executeQuery·p0.999:  1799.356 ms/op
                 executeQuery·p0.9999: 1799.356 ms/op
                 executeQuery·p1.00:   1799.356 ms/op

Iteration   3: 1670.382 ±(99.9%) 355.947 ms/op
                 executeQuery·p0.00:   1547.698 ms/op
                 executeQuery·p0.50:   1630.536 ms/op
                 executeQuery·p0.90:   1897.923 ms/op
                 executeQuery·p0.95:   1897.923 ms/op
                 executeQuery·p0.99:   1897.923 ms/op
                 executeQuery·p0.999:  1897.923 ms/op
                 executeQuery·p0.9999: 1897.923 ms/op
                 executeQuery·p1.00:   1897.923 ms/op

Iteration   4: 1681.566 ±(99.9%) 539.888 ms/op
                 executeQuery·p0.00:   1566.573 ms/op
                 executeQuery·p0.50:   1608.516 ms/op
                 executeQuery·p0.90:   2067.792 ms/op
                 executeQuery·p0.95:   2067.792 ms/op
                 executeQuery·p0.99:   2067.792 ms/op
                 executeQuery·p0.999:  2067.792 ms/op
                 executeQuery·p0.9999: 2067.792 ms/op
                 executeQuery·p1.00:   2067.792 ms/op

Iteration   5: 1658.498 ±(99.9%) 190.648 ms/op
                 executeQuery·p0.00:   1579.155 ms/op
                 executeQuery·p0.50:   1645.216 ms/op
                 executeQuery·p0.90:   1755.316 ms/op
                 executeQuery·p0.95:   1755.316 ms/op
                 executeQuery·p0.99:   1755.316 ms/op
                 executeQuery·p0.999:  1755.316 ms/op
                 executeQuery·p0.9999: 1755.316 ms/op
                 executeQuery·p1.00:   1755.316 ms/op


# Run progress: 27.81% complete, ETA 07:20:15
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1773.841 ±(99.9%) 546.053 ms/op
# Warmup Iteration   2: 1585.747 ±(99.9%) 196.407 ms/op
# Warmup Iteration   3: 1655.352 ±(99.9%) 222.623 ms/op
# Warmup Iteration   4: 1653.604 ±(99.9%) 358.116 ms/op
# Warmup Iteration   5: 1664.440 ±(99.9%) 307.891 ms/op
Iteration   1: 1646.564 ±(99.9%) 147.444 ms/op
                 executeQuery·p0.00:   1574.961 ms/op
                 executeQuery·p0.50:   1629.487 ms/op
                 executeQuery·p0.90:   1757.413 ms/op
                 executeQuery·p0.95:   1757.413 ms/op
                 executeQuery·p0.99:   1757.413 ms/op
                 executeQuery·p0.999:  1757.413 ms/op
                 executeQuery·p0.9999: 1757.413 ms/op
                 executeQuery·p1.00:   1757.413 ms/op

Iteration   2: 1710.227 ±(99.9%) 336.899 ms/op
                 executeQuery·p0.00:   1543.504 ms/op
                 executeQuery·p0.50:   1735.393 ms/op
                 executeQuery·p0.90:   1828.717 ms/op
                 executeQuery·p0.95:   1828.717 ms/op
                 executeQuery·p0.99:   1828.717 ms/op
                 executeQuery·p0.999:  1828.717 ms/op
                 executeQuery·p0.9999: 1828.717 ms/op
                 executeQuery·p1.00:   1828.717 ms/op

Iteration   3: 1700.091 ±(99.9%) 196.727 ms/op
                 executeQuery·p0.00:   1591.738 ms/op
                 executeQuery·p0.50:   1721.762 ms/op
                 executeQuery·p0.90:   1761.608 ms/op
                 executeQuery·p0.95:   1761.608 ms/op
                 executeQuery·p0.99:   1761.608 ms/op
                 executeQuery·p0.999:  1761.608 ms/op
                 executeQuery·p0.9999: 1761.608 ms/op
                 executeQuery·p1.00:   1761.608 ms/op

Iteration   4: 1612.111 ±(99.9%) 67.170 ms/op
                 executeQuery·p0.00:   1570.767 ms/op
                 executeQuery·p0.50:   1627.390 ms/op
                 executeQuery·p0.90:   1642.070 ms/op
                 executeQuery·p0.95:   1642.070 ms/op
                 executeQuery·p0.99:   1642.070 ms/op
                 executeQuery·p0.999:  1642.070 ms/op
                 executeQuery·p0.9999: 1642.070 ms/op
                 executeQuery·p1.00:   1642.070 ms/op

Iteration   5: 1697.295 ±(99.9%) 193.072 ms/op
                 executeQuery·p0.00:   1591.738 ms/op
                 executeQuery·p0.50:   1713.373 ms/op
                 executeQuery·p0.90:   1780.482 ms/op
                 executeQuery·p0.95:   1780.482 ms/op
                 executeQuery·p0.99:   1780.482 ms/op
                 executeQuery·p0.999:  1780.482 ms/op
                 executeQuery·p0.9999: 1780.482 ms/op
                 executeQuery·p1.00:   1780.482 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 163
  mean =   1634.132 ±(99.9%) 25.971 ms/op

  Histogram, ms/op:
    [1400.000, 1450.000) = 3 
    [1450.000, 1500.000) = 7 
    [1500.000, 1550.000) = 14 
    [1550.000, 1600.000) = 45 
    [1600.000, 1650.000) = 37 
    [1650.000, 1700.000) = 19 
    [1700.000, 1750.000) = 15 
    [1750.000, 1800.000) = 16 
    [1800.000, 1850.000) = 4 
    [1850.000, 1900.000) = 1 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1409.286 ms/op
     p(50.0000) =   1621.098 ms/op
     p(90.0000) =   1761.608 ms/op
     p(95.0000) =   1796.840 ms/op
     p(99.0000) =   1968.471 ms/op
     p(99.9000) =   2067.792 ms/op
     p(99.9900) =   2067.792 ms/op
     p(99.9990) =   2067.792 ms/op
     p(99.9999) =   2067.792 ms/op
    p(100.0000) =   2067.792 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6)

# Run progress: 28.13% complete, ETA 07:18:07
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1841.299 ±(99.9%) 556.437 ms/op
# Warmup Iteration   2: 1713.024 ±(99.9%) 488.757 ms/op
# Warmup Iteration   3: 1673.527 ±(99.9%) 225.627 ms/op
# Warmup Iteration   4: 1708.130 ±(99.9%) 415.948 ms/op
# Warmup Iteration   5: 1709.878 ±(99.9%) 318.166 ms/op
Iteration   1: 1641.371 ±(99.9%) 189.310 ms/op
                 executeQuery·p0.00:   1564.475 ms/op
                 executeQuery·p0.50:   1643.119 ms/op
                 executeQuery·p0.90:   1709.179 ms/op
                 executeQuery·p0.95:   1709.179 ms/op
                 executeQuery·p0.99:   1709.179 ms/op
                 executeQuery·p0.999:  1709.179 ms/op
                 executeQuery·p0.9999: 1709.179 ms/op
                 executeQuery·p1.00:   1709.179 ms/op

Iteration   2: 1686.460 ±(99.9%) 224.133 ms/op
                 executeQuery·p0.00:   1553.990 ms/op
                 executeQuery·p0.50:   1714.422 ms/op
                 executeQuery·p0.90:   1757.413 ms/op
                 executeQuery·p0.95:   1757.413 ms/op
                 executeQuery·p0.99:   1757.413 ms/op
                 executeQuery·p0.999:  1757.413 ms/op
                 executeQuery·p0.9999: 1757.413 ms/op
                 executeQuery·p1.00:   1757.413 ms/op

Iteration   3: 1642.420 ±(99.9%) 132.985 ms/op
                 executeQuery·p0.00:   1560.281 ms/op
                 executeQuery·p0.50:   1648.361 ms/op
                 executeQuery·p0.90:   1692.402 ms/op
                 executeQuery·p0.95:   1692.402 ms/op
                 executeQuery·p0.99:   1692.402 ms/op
                 executeQuery·p0.999:  1692.402 ms/op
                 executeQuery·p0.9999: 1692.402 ms/op
                 executeQuery·p1.00:   1692.402 ms/op

Iteration   4: 1727.005 ±(99.9%) 166.241 ms/op
                 executeQuery·p0.00:   1650.459 ms/op
                 executeQuery·p0.50:   1732.248 ms/op
                 executeQuery·p0.90:   1795.162 ms/op
                 executeQuery·p0.95:   1795.162 ms/op
                 executeQuery·p0.99:   1795.162 ms/op
                 executeQuery·p0.999:  1795.162 ms/op
                 executeQuery·p0.9999: 1795.162 ms/op
                 executeQuery·p1.00:   1795.162 ms/op

Iteration   5: 1690.654 ±(99.9%) 154.316 ms/op
                 executeQuery·p0.00:   1631.584 ms/op
                 executeQuery·p0.50:   1676.673 ms/op
                 executeQuery·p0.90:   1793.065 ms/op
                 executeQuery·p0.95:   1793.065 ms/op
                 executeQuery·p0.99:   1793.065 ms/op
                 executeQuery·p0.999:  1793.065 ms/op
                 executeQuery·p0.9999: 1793.065 ms/op
                 executeQuery·p1.00:   1793.065 ms/op


# Run progress: 28.44% complete, ETA 07:15:52
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1796.211 ±(99.9%) 566.584 ms/op
# Warmup Iteration   2: 1709.878 ±(99.9%) 220.908 ms/op
# Warmup Iteration   3: 1704.985 ±(99.9%) 213.466 ms/op
# Warmup Iteration   4: 1714.422 ±(99.9%) 304.118 ms/op
# Warmup Iteration   5: 1699.043 ±(99.9%) 288.949 ms/op
Iteration   1: 1709.179 ±(99.9%) 421.240 ms/op
                 executeQuery·p0.00:   1493.172 ms/op
                 executeQuery·p0.50:   1699.742 ms/op
                 executeQuery·p0.90:   1960.837 ms/op
                 executeQuery·p0.95:   1960.837 ms/op
                 executeQuery·p0.99:   1960.837 ms/op
                 executeQuery·p0.999:  1960.837 ms/op
                 executeQuery·p0.9999: 1960.837 ms/op
                 executeQuery·p1.00:   1960.837 ms/op

Iteration   2: 1736.442 ±(99.9%) 510.771 ms/op
                 executeQuery·p0.00:   1585.447 ms/op
                 executeQuery·p0.50:   1677.722 ms/op
                 executeQuery·p0.90:   2042.626 ms/op
                 executeQuery·p0.95:   2042.626 ms/op
                 executeQuery·p0.99:   2042.626 ms/op
                 executeQuery·p0.999:  2042.626 ms/op
                 executeQuery·p0.9999: 2042.626 ms/op
                 executeQuery·p1.00:   2042.626 ms/op

Iteration   3: 1688.906 ±(99.9%) 287.587 ms/op
                 executeQuery·p0.00:   1570.767 ms/op
                 executeQuery·p0.50:   1706.033 ms/op
                 executeQuery·p0.90:   1793.065 ms/op
                 executeQuery·p0.95:   1793.065 ms/op
                 executeQuery·p0.99:   1793.065 ms/op
                 executeQuery·p0.999:  1793.065 ms/op
                 executeQuery·p0.9999: 1793.065 ms/op
                 executeQuery·p1.00:   1793.065 ms/op

Iteration   4: 1687.858 ±(99.9%) 193.242 ms/op
                 executeQuery·p0.00:   1604.321 ms/op
                 executeQuery·p0.50:   1666.187 ms/op
                 executeQuery·p0.90:   1793.065 ms/op
                 executeQuery·p0.95:   1793.065 ms/op
                 executeQuery·p0.99:   1793.065 ms/op
                 executeQuery·p0.999:  1793.065 ms/op
                 executeQuery·p0.9999: 1793.065 ms/op
                 executeQuery·p1.00:   1793.065 ms/op

Iteration   5: 1688.557 ±(99.9%) 207.232 ms/op
                 executeQuery·p0.00:   1595.933 ms/op
                 executeQuery·p0.50:   1676.673 ms/op
                 executeQuery·p0.90:   1784.676 ms/op
                 executeQuery·p0.95:   1784.676 ms/op
                 executeQuery·p0.99:   1784.676 ms/op
                 executeQuery·p0.999:  1784.676 ms/op
                 executeQuery·p0.9999: 1784.676 ms/op
                 executeQuery·p1.00:   1784.676 ms/op


# Run progress: 28.75% complete, ETA 07:13:39
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1829.416 ±(99.9%) 545.740 ms/op
# Warmup Iteration   2: 1710.577 ±(99.9%) 281.903 ms/op
# Warmup Iteration   3: 1692.402 ±(99.9%) 376.665 ms/op
# Warmup Iteration   4: 1645.216 ±(99.9%) 237.944 ms/op
# Warmup Iteration   5: 1651.857 ±(99.9%) 210.321 ms/op
Iteration   1: 1686.809 ±(99.9%) 216.224 ms/op
                 executeQuery·p0.00:   1587.544 ms/op
                 executeQuery·p0.50:   1681.916 ms/op
                 executeQuery·p0.90:   1809.842 ms/op
                 executeQuery·p0.95:   1809.842 ms/op
                 executeQuery·p0.99:   1809.842 ms/op
                 executeQuery·p0.999:  1809.842 ms/op
                 executeQuery·p0.9999: 1809.842 ms/op
                 executeQuery·p1.00:   1809.842 ms/op

Iteration   2: 1679.120 ±(99.9%) 182.955 ms/op
                 executeQuery·p0.00:   1598.030 ms/op
                 executeQuery·p0.50:   1667.236 ms/op
                 executeQuery·p0.90:   1797.259 ms/op
                 executeQuery·p0.95:   1797.259 ms/op
                 executeQuery·p0.99:   1797.259 ms/op
                 executeQuery·p0.999:  1797.259 ms/op
                 executeQuery·p0.9999: 1797.259 ms/op
                 executeQuery·p1.00:   1797.259 ms/op

Iteration   3: 1671.081 ±(99.9%) 349.528 ms/op
                 executeQuery·p0.00:   1581.253 ms/op
                 executeQuery·p0.50:   1621.098 ms/op
                 executeQuery·p0.90:   1904.214 ms/op
                 executeQuery·p0.95:   1904.214 ms/op
                 executeQuery·p0.99:   1904.214 ms/op
                 executeQuery·p0.999:  1904.214 ms/op
                 executeQuery·p0.9999: 1904.214 ms/op
                 executeQuery·p1.00:   1904.214 ms/op

Iteration   4: 1692.751 ±(99.9%) 229.439 ms/op
                 executeQuery·p0.00:   1598.030 ms/op
                 executeQuery·p0.50:   1686.110 ms/op
                 executeQuery·p0.90:   1807.745 ms/op
                 executeQuery·p0.95:   1807.745 ms/op
                 executeQuery·p0.99:   1807.745 ms/op
                 executeQuery·p0.999:  1807.745 ms/op
                 executeQuery·p0.9999: 1807.745 ms/op
                 executeQuery·p1.00:   1807.745 ms/op

Iteration   5: 1706.383 ±(99.9%) 186.067 ms/op
                 executeQuery·p0.00:   1614.807 ms/op
                 executeQuery·p0.50:   1699.742 ms/op
                 executeQuery·p0.90:   1780.482 ms/op
                 executeQuery·p0.95:   1780.482 ms/op
                 executeQuery·p0.99:   1780.482 ms/op
                 executeQuery·p0.999:  1780.482 ms/op
                 executeQuery·p0.9999: 1780.482 ms/op
                 executeQuery·p1.00:   1780.482 ms/op


# Run progress: 29.06% complete, ETA 07:11:25
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1832.212 ±(99.9%) 478.477 ms/op
# Warmup Iteration   2: 1713.024 ±(99.9%) 170.459 ms/op
# Warmup Iteration   3: 1665.139 ±(99.9%) 367.030 ms/op
# Warmup Iteration   4: 1698.344 ±(99.9%) 245.432 ms/op
# Warmup Iteration   5: 1658.498 ±(99.9%) 224.256 ms/op
Iteration   1: 1660.944 ±(99.9%) 192.833 ms/op
                 executeQuery·p0.00:   1583.350 ms/op
                 executeQuery·p0.50:   1656.750 ms/op
                 executeQuery·p0.90:   1784.676 ms/op
                 executeQuery·p0.95:   1784.676 ms/op
                 executeQuery·p0.99:   1784.676 ms/op
                 executeQuery·p0.999:  1784.676 ms/op
                 executeQuery·p0.9999: 1784.676 ms/op
                 executeQuery·p1.00:   1784.676 ms/op

Iteration   2: 1665.139 ±(99.9%) 282.107 ms/op
                 executeQuery·p0.00:   1566.573 ms/op
                 executeQuery·p0.50:   1650.459 ms/op
                 executeQuery·p0.90:   1841.299 ms/op
                 executeQuery·p0.95:   1841.299 ms/op
                 executeQuery·p0.99:   1841.299 ms/op
                 executeQuery·p0.999:  1841.299 ms/op
                 executeQuery·p0.9999: 1841.299 ms/op
                 executeQuery·p1.00:   1841.299 ms/op

Iteration   3: 1687.159 ±(99.9%) 208.109 ms/op
                 executeQuery·p0.00:   1614.807 ms/op
                 executeQuery·p0.50:   1657.799 ms/op
                 executeQuery·p0.90:   1814.036 ms/op
                 executeQuery·p0.95:   1814.036 ms/op
                 executeQuery·p0.99:   1814.036 ms/op
                 executeQuery·p0.999:  1814.036 ms/op
                 executeQuery·p0.9999: 1814.036 ms/op
                 executeQuery·p1.00:   1814.036 ms/op

Iteration   4: 1646.564 ±(99.9%) 138.417 ms/op
                 executeQuery·p0.00:   1562.378 ms/op
                 executeQuery·p0.50:   1663.042 ms/op
                 executeQuery·p0.90:   1721.762 ms/op
                 executeQuery·p0.95:   1721.762 ms/op
                 executeQuery·p0.99:   1721.762 ms/op
                 executeQuery·p0.999:  1721.762 ms/op
                 executeQuery·p0.9999: 1721.762 ms/op
                 executeQuery·p1.00:   1721.762 ms/op

Iteration   5: 1699.742 ±(99.9%) 234.960 ms/op
                 executeQuery·p0.00:   1600.127 ms/op
                 executeQuery·p0.50:   1680.867 ms/op
                 executeQuery·p0.90:   1801.454 ms/op
                 executeQuery·p0.95:   1801.454 ms/op
                 executeQuery·p0.99:   1801.454 ms/op
                 executeQuery·p0.999:  1801.454 ms/op
                 executeQuery·p0.9999: 1801.454 ms/op
                 executeQuery·p1.00:   1801.454 ms/op


# Run progress: 29.38% complete, ETA 07:09:14
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1814.386 ±(99.9%) 589.143 ms/op
# Warmup Iteration   2: 1677.023 ±(99.9%) 112.424 ms/op
# Warmup Iteration   3: 1691.703 ±(99.9%) 235.780 ms/op
# Warmup Iteration   4: 1664.540 ±(99.9%) 292.406 ms/op
# Warmup Iteration   5: 1688.207 ±(99.9%) 241.299 ms/op
Iteration   1: 1695.897 ±(99.9%) 279.042 ms/op
                 executeQuery·p0.00:   1598.030 ms/op
                 executeQuery·p0.50:   1670.382 ms/op
                 executeQuery·p0.90:   1830.814 ms/op
                 executeQuery·p0.95:   1830.814 ms/op
                 executeQuery·p0.99:   1830.814 ms/op
                 executeQuery·p0.999:  1830.814 ms/op
                 executeQuery·p0.9999: 1830.814 ms/op
                 executeQuery·p1.00:   1830.814 ms/op

Iteration   2: 1753.569 ±(99.9%) 468.112 ms/op
                 executeQuery·p0.00:   1539.310 ms/op
                 executeQuery·p0.50:   1736.442 ms/op
                 executeQuery·p0.90:   2038.432 ms/op
                 executeQuery·p0.95:   2038.432 ms/op
                 executeQuery·p0.99:   2038.432 ms/op
                 executeQuery·p0.999:  2038.432 ms/op
                 executeQuery·p0.9999: 2038.432 ms/op
                 executeQuery·p1.00:   2038.432 ms/op

Iteration   3: 1630.086 ±(99.9%) 115.558 ms/op
                 executeQuery·p0.00:   1533.018 ms/op
                 executeQuery·p0.50:   1627.390 ms/op
                 executeQuery·p0.90:   1700.790 ms/op
                 executeQuery·p0.95:   1700.790 ms/op
                 executeQuery·p0.99:   1700.790 ms/op
                 executeQuery·p0.999:  1700.790 ms/op
                 executeQuery·p0.9999: 1700.790 ms/op
                 executeQuery·p1.00:   1700.790 ms/op

Iteration   4: 1654.653 ±(99.9%) 82.667 ms/op
                 executeQuery·p0.00:   1625.293 ms/op
                 executeQuery·p0.50:   1646.264 ms/op
                 executeQuery·p0.90:   1707.082 ms/op
                 executeQuery·p0.95:   1707.082 ms/op
                 executeQuery·p0.99:   1707.082 ms/op
                 executeQuery·p0.999:  1707.082 ms/op
                 executeQuery·p0.9999: 1707.082 ms/op
                 executeQuery·p1.00:   1707.082 ms/op

Iteration   5: 1707.082 ±(99.9%) 171.816 ms/op
                 executeQuery·p0.00:   1633.681 ms/op
                 executeQuery·p0.50:   1697.645 ms/op
                 executeQuery·p0.90:   1788.871 ms/op
                 executeQuery·p0.95:   1788.871 ms/op
                 executeQuery·p0.99:   1788.871 ms/op
                 executeQuery·p0.999:  1788.871 ms/op
                 executeQuery·p0.9999: 1788.871 ms/op
                 executeQuery·p1.00:   1788.871 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 152
  mean =   1684.813 ±(99.9%) 24.122 ms/op

  Histogram, ms/op:
    [1400.000, 1450.000) = 0 
    [1450.000, 1500.000) = 1 
    [1500.000, 1550.000) = 2 
    [1550.000, 1600.000) = 21 
    [1600.000, 1650.000) = 31 
    [1650.000, 1700.000) = 42 
    [1700.000, 1750.000) = 22 
    [1750.000, 1800.000) = 22 
    [1800.000, 1850.000) = 7 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1493.172 ms/op
     p(50.0000) =   1670.382 ms/op
     p(90.0000) =   1794.533 ms/op
     p(95.0000) =   1819.909 ms/op
     p(99.0000) =   2040.403 ms/op
     p(99.9000) =   2042.626 ms/op
     p(99.9900) =   2042.626 ms/op
     p(99.9990) =   2042.626 ms/op
     p(99.9999) =   2042.626 ms/op
    p(100.0000) =   2042.626 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8)

# Run progress: 29.69% complete, ETA 07:07:09
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1872.757 ±(99.9%) 666.625 ms/op
# Warmup Iteration   2: 1795.512 ±(99.9%) 205.017 ms/op
# Warmup Iteration   3: 1687.159 ±(99.9%) 298.679 ms/op
# Warmup Iteration   4: 1747.976 ±(99.9%) 324.219 ms/op
# Warmup Iteration   5: 1660.245 ±(99.9%) 130.690 ms/op
Iteration   1: 1706.732 ±(99.9%) 432.907 ms/op
                 executeQuery·p0.00:   1522.532 ms/op
                 executeQuery·p0.50:   1668.284 ms/op
                 executeQuery·p0.90:   1988.100 ms/op
                 executeQuery·p0.95:   1988.100 ms/op
                 executeQuery·p0.99:   1988.100 ms/op
                 executeQuery·p0.999:  1988.100 ms/op
                 executeQuery·p0.9999: 1988.100 ms/op
                 executeQuery·p1.00:   1988.100 ms/op

Iteration   2: 1756.015 ±(99.9%) 313.832 ms/op
                 executeQuery·p0.00:   1660.944 ms/op
                 executeQuery·p0.50:   1720.713 ms/op
                 executeQuery·p0.90:   1954.546 ms/op
                 executeQuery·p0.95:   1954.546 ms/op
                 executeQuery·p0.99:   1954.546 ms/op
                 executeQuery·p0.999:  1954.546 ms/op
                 executeQuery·p0.9999: 1954.546 ms/op
                 executeQuery·p1.00:   1954.546 ms/op

Iteration   3: 1708.829 ±(99.9%) 280.495 ms/op
                 executeQuery·p0.00:   1566.573 ms/op
                 executeQuery·p0.50:   1720.713 ms/op
                 executeQuery·p0.90:   1811.939 ms/op
                 executeQuery·p0.95:   1811.939 ms/op
                 executeQuery·p0.99:   1811.939 ms/op
                 executeQuery·p0.999:  1811.939 ms/op
                 executeQuery·p0.9999: 1811.939 ms/op
                 executeQuery·p1.00:   1811.939 ms/op

Iteration   4: 1671.780 ±(99.9%) 213.997 ms/op
                 executeQuery·p0.00:   1581.253 ms/op
                 executeQuery·p0.50:   1659.896 ms/op
                 executeQuery·p0.90:   1799.356 ms/op
                 executeQuery·p0.95:   1799.356 ms/op
                 executeQuery·p0.99:   1799.356 ms/op
                 executeQuery·p0.999:  1799.356 ms/op
                 executeQuery·p0.9999: 1799.356 ms/op
                 executeQuery·p1.00:   1799.356 ms/op

Iteration   5: 1699.392 ±(99.9%) 256.680 ms/op
                 executeQuery·p0.00:   1568.670 ms/op
                 executeQuery·p0.50:   1699.742 ms/op
                 executeQuery·p0.90:   1816.134 ms/op
                 executeQuery·p0.95:   1816.134 ms/op
                 executeQuery·p0.99:   1816.134 ms/op
                 executeQuery·p0.999:  1816.134 ms/op
                 executeQuery·p0.9999: 1816.134 ms/op
                 executeQuery·p1.00:   1816.134 ms/op


# Run progress: 30.00% complete, ETA 07:05:00
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1809.493 ±(99.9%) 667.169 ms/op
# Warmup Iteration   2: 1703.586 ±(99.9%) 222.281 ms/op
# Warmup Iteration   3: 1670.032 ±(99.9%) 295.885 ms/op
# Warmup Iteration   4: 1656.401 ±(99.9%) 286.013 ms/op
# Warmup Iteration   5: 1651.507 ±(99.9%) 178.983 ms/op
Iteration   1: 1643.468 ±(99.9%) 273.256 ms/op
                 executeQuery·p0.00:   1564.475 ms/op
                 executeQuery·p0.50:   1593.836 ms/op
                 executeQuery·p0.90:   1790.968 ms/op
                 executeQuery·p0.95:   1790.968 ms/op
                 executeQuery·p0.99:   1790.968 ms/op
                 executeQuery·p0.999:  1790.968 ms/op
                 executeQuery·p0.9999: 1790.968 ms/op
                 executeQuery·p1.00:   1790.968 ms/op

Iteration   2: 1677.722 ±(99.9%) 384.355 ms/op
                 executeQuery·p0.00:   1509.949 ms/op
                 executeQuery·p0.50:   1680.867 ms/op
                 executeQuery·p0.90:   1830.814 ms/op
                 executeQuery·p0.95:   1830.814 ms/op
                 executeQuery·p0.99:   1830.814 ms/op
                 executeQuery·p0.999:  1830.814 ms/op
                 executeQuery·p0.9999: 1830.814 ms/op
                 executeQuery·p1.00:   1830.814 ms/op

Iteration   3: 1665.838 ±(99.9%) 366.684 ms/op
                 executeQuery·p0.00:   1518.338 ms/op
                 executeQuery·p0.50:   1673.527 ms/op
                 executeQuery·p0.90:   1809.842 ms/op
                 executeQuery·p0.95:   1809.842 ms/op
                 executeQuery·p0.99:   1809.842 ms/op
                 executeQuery·p0.999:  1809.842 ms/op
                 executeQuery·p0.9999: 1809.842 ms/op
                 executeQuery·p1.00:   1809.842 ms/op

Iteration   4: 1631.884 ±(99.9%) 108.991 ms/op
                 executeQuery·p0.00:   1545.601 ms/op
                 executeQuery·p0.50:   1619.001 ms/op
                 executeQuery·p0.90:   1686.110 ms/op
                 executeQuery·p0.95:   1686.110 ms/op
                 executeQuery·p0.99:   1686.110 ms/op
                 executeQuery·p0.999:  1686.110 ms/op
                 executeQuery·p0.9999: 1686.110 ms/op
                 executeQuery·p1.00:   1686.110 ms/op

Iteration   5: 1649.560 ±(99.9%) 189.183 ms/op
                 executeQuery·p0.00:   1562.378 ms/op
                 executeQuery·p0.50:   1623.196 ms/op
                 executeQuery·p0.90:   1818.231 ms/op
                 executeQuery·p0.95:   1818.231 ms/op
                 executeQuery·p0.99:   1818.231 ms/op
                 executeQuery·p0.999:  1818.231 ms/op
                 executeQuery·p0.9999: 1818.231 ms/op
                 executeQuery·p1.00:   1818.231 ms/op


# Run progress: 30.31% complete, ETA 07:02:53
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1804.250 ±(99.9%) 577.466 ms/op
# Warmup Iteration   2: 1634.730 ±(99.9%) 333.660 ms/op
# Warmup Iteration   3: 1725.607 ±(99.9%) 296.720 ms/op
# Warmup Iteration   4: 1694.149 ±(99.9%) 451.122 ms/op
# Warmup Iteration   5: 1731.898 ±(99.9%) 251.143 ms/op
Iteration   1: 1711.626 ±(99.9%) 323.507 ms/op
                 executeQuery·p0.00:   1608.516 ms/op
                 executeQuery·p0.50:   1660.944 ms/op
                 executeQuery·p0.90:   1920.991 ms/op
                 executeQuery·p0.95:   1920.991 ms/op
                 executeQuery·p0.99:   1920.991 ms/op
                 executeQuery·p0.999:  1920.991 ms/op
                 executeQuery·p0.9999: 1920.991 ms/op
                 executeQuery·p1.00:   1920.991 ms/op

Iteration   2: 1734.345 ±(99.9%) 279.397 ms/op
                 executeQuery·p0.00:   1608.516 ms/op
                 executeQuery·p0.50:   1771.045 ms/op
                 executeQuery·p0.90:   1822.425 ms/op
                 executeQuery·p0.95:   1822.425 ms/op
                 executeQuery·p0.99:   1822.425 ms/op
                 executeQuery·p0.999:  1822.425 ms/op
                 executeQuery·p0.9999: 1822.425 ms/op
                 executeQuery·p1.00:   1822.425 ms/op

Iteration   3: 1691.004 ±(99.9%) 314.690 ms/op
                 executeQuery·p0.00:   1566.573 ms/op
                 executeQuery·p0.50:   1663.042 ms/op
                 executeQuery·p0.90:   1851.785 ms/op
                 executeQuery·p0.95:   1851.785 ms/op
                 executeQuery·p0.99:   1851.785 ms/op
                 executeQuery·p0.999:  1851.785 ms/op
                 executeQuery·p0.9999: 1851.785 ms/op
                 executeQuery·p1.00:   1851.785 ms/op

Iteration   4: 1748.326 ±(99.9%) 377.576 ms/op
                 executeQuery·p0.00:   1623.196 ms/op
                 executeQuery·p0.50:   1690.305 ms/op
                 executeQuery·p0.90:   1925.186 ms/op
                 executeQuery·p0.95:   1925.186 ms/op
                 executeQuery·p0.99:   1925.186 ms/op
                 executeQuery·p0.999:  1925.186 ms/op
                 executeQuery·p0.9999: 1925.186 ms/op
                 executeQuery·p1.00:   1925.186 ms/op

Iteration   5: 1713.024 ±(99.9%) 347.583 ms/op
                 executeQuery·p0.00:   1581.253 ms/op
                 executeQuery·p0.50:   1689.256 ms/op
                 executeQuery·p0.90:   1918.894 ms/op
                 executeQuery·p0.95:   1918.894 ms/op
                 executeQuery·p0.99:   1918.894 ms/op
                 executeQuery·p0.999:  1918.894 ms/op
                 executeQuery·p0.9999: 1918.894 ms/op
                 executeQuery·p1.00:   1918.894 ms/op


# Run progress: 30.63% complete, ETA 07:00:44
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1819.978 ±(99.9%) 623.470 ms/op
# Warmup Iteration   2: 1704.286 ±(99.9%) 288.787 ms/op
# Warmup Iteration   3: 1686.110 ±(99.9%) 416.235 ms/op
# Warmup Iteration   4: 1665.139 ±(99.9%) 221.387 ms/op
# Warmup Iteration   5: 1661.993 ±(99.9%) 325.177 ms/op
Iteration   1: 1701.839 ±(99.9%) 361.806 ms/op
                 executeQuery·p0.00:   1570.767 ms/op
                 executeQuery·p0.50:   1687.159 ms/op
                 executeQuery·p0.90:   1853.882 ms/op
                 executeQuery·p0.95:   1853.882 ms/op
                 executeQuery·p0.99:   1853.882 ms/op
                 executeQuery·p0.999:  1853.882 ms/op
                 executeQuery·p0.9999: 1853.882 ms/op
                 executeQuery·p1.00:   1853.882 ms/op

Iteration   2: 1711.975 ±(99.9%) 567.620 ms/op
                 executeQuery·p0.00:   1455.423 ms/op
                 executeQuery·p0.50:   1694.499 ms/op
                 executeQuery·p0.90:   1988.100 ms/op
                 executeQuery·p0.95:   1988.100 ms/op
                 executeQuery·p0.99:   1988.100 ms/op
                 executeQuery·p0.999:  1988.100 ms/op
                 executeQuery·p0.9999: 1988.100 ms/op
                 executeQuery·p1.00:   1988.100 ms/op

Iteration   3: 1733.995 ±(99.9%) 462.613 ms/op
                 executeQuery·p0.00:   1459.618 ms/op
                 executeQuery·p0.50:   1761.608 ms/op
                 executeQuery·p0.90:   1952.449 ms/op
                 executeQuery·p0.95:   1952.449 ms/op
                 executeQuery·p0.99:   1952.449 ms/op
                 executeQuery·p0.999:  1952.449 ms/op
                 executeQuery·p0.9999: 1952.449 ms/op
                 executeQuery·p1.00:   1952.449 ms/op

Iteration   4: 1677.372 ±(99.9%) 126.207 ms/op
                 executeQuery·p0.00:   1621.098 ms/op
                 executeQuery·p0.50:   1671.430 ms/op
                 executeQuery·p0.90:   1742.733 ms/op
                 executeQuery·p0.95:   1742.733 ms/op
                 executeQuery·p0.99:   1742.733 ms/op
                 executeQuery·p0.999:  1742.733 ms/op
                 executeQuery·p0.9999: 1742.733 ms/op
                 executeQuery·p1.00:   1742.733 ms/op

Iteration   5: 1639.623 ±(99.9%) 95.654 ms/op
                 executeQuery·p0.00:   1604.321 ms/op
                 executeQuery·p0.50:   1636.827 ms/op
                 executeQuery·p0.90:   1698.693 ms/op
                 executeQuery·p0.95:   1698.693 ms/op
                 executeQuery·p0.99:   1698.693 ms/op
                 executeQuery·p0.999:  1698.693 ms/op
                 executeQuery·p0.9999: 1698.693 ms/op
                 executeQuery·p1.00:   1698.693 ms/op


# Run progress: 30.94% complete, ETA 06:58:33
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1820.328 ±(99.9%) 555.903 ms/op
# Warmup Iteration   2: 1632.982 ±(99.9%) 321.044 ms/op
# Warmup Iteration   3: 1714.422 ±(99.9%) 291.886 ms/op
# Warmup Iteration   4: 1640.572 ±(99.9%) 289.826 ms/op
# Warmup Iteration   5: 1629.787 ±(99.9%) 166.109 ms/op
Iteration   1: 1650.459 ±(99.9%) 204.395 ms/op
                 executeQuery·p0.00:   1568.670 ms/op
                 executeQuery·p0.50:   1624.244 ms/op
                 executeQuery·p0.90:   1755.316 ms/op
                 executeQuery·p0.95:   1755.316 ms/op
                 executeQuery·p0.99:   1755.316 ms/op
                 executeQuery·p0.999:  1755.316 ms/op
                 executeQuery·p0.9999: 1755.316 ms/op
                 executeQuery·p1.00:   1755.316 ms/op

Iteration   2: 1701.839 ±(99.9%) 289.554 ms/op
                 executeQuery·p0.00:   1593.836 ms/op
                 executeQuery·p0.50:   1682.964 ms/op
                 executeQuery·p0.90:   1853.882 ms/op
                 executeQuery·p0.95:   1853.882 ms/op
                 executeQuery·p0.99:   1853.882 ms/op
                 executeQuery·p0.999:  1853.882 ms/op
                 executeQuery·p0.9999: 1853.882 ms/op
                 executeQuery·p1.00:   1853.882 ms/op

Iteration   3: 1656.750 ±(99.9%) 210.003 ms/op
                 executeQuery·p0.00:   1581.253 ms/op
                 executeQuery·p0.50:   1645.216 ms/op
                 executeQuery·p0.90:   1767.899 ms/op
                 executeQuery·p0.95:   1767.899 ms/op
                 executeQuery·p0.99:   1767.899 ms/op
                 executeQuery·p0.999:  1767.899 ms/op
                 executeQuery·p0.9999: 1767.899 ms/op
                 executeQuery·p1.00:   1767.899 ms/op

Iteration   4: 1641.720 ±(99.9%) 342.148 ms/op
                 executeQuery·p0.00:   1553.990 ms/op
                 executeQuery·p0.50:   1572.864 ms/op
                 executeQuery·p0.90:   1828.717 ms/op
                 executeQuery·p0.95:   1828.717 ms/op
                 executeQuery·p0.99:   1828.717 ms/op
                 executeQuery·p0.999:  1828.717 ms/op
                 executeQuery·p0.9999: 1828.717 ms/op
                 executeQuery·p1.00:   1828.717 ms/op

Iteration   5: 1712.325 ±(99.9%) 364.529 ms/op
                 executeQuery·p0.00:   1585.447 ms/op
                 executeQuery·p0.50:   1690.305 ms/op
                 executeQuery·p0.90:   1872.757 ms/op
                 executeQuery·p0.95:   1872.757 ms/op
                 executeQuery·p0.99:   1872.757 ms/op
                 executeQuery·p0.999:  1872.757 ms/op
                 executeQuery·p0.9999: 1872.757 ms/op
                 executeQuery·p1.00:   1872.757 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 152
  mean =   1688.856 ±(99.9%) 29.952 ms/op

  Histogram, ms/op:
    [1400.000, 1450.000) = 0 
    [1450.000, 1500.000) = 2 
    [1500.000, 1550.000) = 6 
    [1550.000, 1600.000) = 24 
    [1600.000, 1650.000) = 33 
    [1650.000, 1700.000) = 27 
    [1700.000, 1750.000) = 16 
    [1750.000, 1800.000) = 18 
    [1800.000, 1850.000) = 13 
    [1850.000, 1900.000) = 5 
    [1900.000, 1950.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =   1455.423 ms/op
     p(50.0000) =   1664.090 ms/op
     p(90.0000) =   1830.185 ms/op
     p(95.0000) =   1914.805 ms/op
     p(99.0000) =   1988.100 ms/op
     p(99.9000) =   1988.100 ms/op
     p(99.9900) =   1988.100 ms/op
     p(99.9990) =   1988.100 ms/op
     p(99.9999) =   1988.100 ms/op
    p(100.0000) =   1988.100 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2)

# Run progress: 31.25% complete, ETA 06:56:27
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2217.529 ±(99.9%) 849.963 ms/op
# Warmup Iteration   2: 2102.605 ±(99.9%) 476.126 ms/op
# Warmup Iteration   3: 2079.536 ±(99.9%) 173.818 ms/op
# Warmup Iteration   4: 2053.951 ±(99.9%) 188.228 ms/op
# Warmup Iteration   5: 2063.178 ±(99.9%) 335.124 ms/op
Iteration   1: 2078.697 ±(99.9%) 245.563 ms/op
                 executeQuery·p0.00:   2021.655 ms/op
                 executeQuery·p0.50:   2061.500 ms/op
                 executeQuery·p0.90:   2172.649 ms/op
                 executeQuery·p0.95:   2172.649 ms/op
                 executeQuery·p0.99:   2172.649 ms/op
                 executeQuery·p0.999:  2172.649 ms/op
                 executeQuery·p0.9999: 2172.649 ms/op
                 executeQuery·p1.00:   2172.649 ms/op

Iteration   2: 2027.527 ±(99.9%) 436.459 ms/op
                 executeQuery·p0.00:   1885.340 ms/op
                 executeQuery·p0.50:   1990.197 ms/op
                 executeQuery·p0.90:   2164.261 ms/op
                 executeQuery·p0.95:   2164.261 ms/op
                 executeQuery·p0.99:   2164.261 ms/op
                 executeQuery·p0.999:  2164.261 ms/op
                 executeQuery·p0.9999: 2164.261 ms/op
                 executeQuery·p1.00:   2164.261 ms/op

Iteration   3: 2073.244 ±(99.9%) 340.395 ms/op
                 executeQuery·p0.00:   1965.031 ms/op
                 executeQuery·p0.50:   2084.569 ms/op
                 executeQuery·p0.90:   2197.815 ms/op
                 executeQuery·p0.95:   2197.815 ms/op
                 executeQuery·p0.99:   2197.815 ms/op
                 executeQuery·p0.999:  2197.815 ms/op
                 executeQuery·p0.9999: 2197.815 ms/op
                 executeQuery·p1.00:   2197.815 ms/op

Iteration   4: 2141.192 ±(99.9%) 286.306 ms/op
                 executeQuery·p0.00:   2048.918 ms/op
                 executeQuery·p0.50:   2160.067 ms/op
                 executeQuery·p0.90:   2243.953 ms/op
                 executeQuery·p0.95:   2243.953 ms/op
                 executeQuery·p0.99:   2243.953 ms/op
                 executeQuery·p0.999:  2243.953 ms/op
                 executeQuery·p0.9999: 2243.953 ms/op
                 executeQuery·p1.00:   2243.953 ms/op

Iteration   5: 2110.993 ±(99.9%) 649.720 ms/op
                 executeQuery·p0.00:   1923.088 ms/op
                 executeQuery·p0.50:   2095.055 ms/op
                 executeQuery·p0.90:   2353.005 ms/op
                 executeQuery·p0.95:   2353.005 ms/op
                 executeQuery·p0.99:   2353.005 ms/op
                 executeQuery·p0.999:  2353.005 ms/op
                 executeQuery·p0.9999: 2353.005 ms/op
                 executeQuery·p1.00:   2353.005 ms/op


# Run progress: 31.56% complete, ETA 06:54:22
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2248.986 ±(99.9%) 910.365 ms/op
# Warmup Iteration   2: 2058.564 ±(99.9%) 192.594 ms/op
# Warmup Iteration   3: 2008.233 ±(99.9%) 391.993 ms/op
# Warmup Iteration   4: 2061.920 ±(99.9%) 461.902 ms/op
# Warmup Iteration   5: 2042.626 ±(99.9%) 498.814 ms/op
Iteration   1: 2043.884 ±(99.9%) 402.985 ms/op
                 executeQuery·p0.00:   1927.283 ms/op
                 executeQuery·p0.50:   2065.695 ms/op
                 executeQuery·p0.90:   2143.289 ms/op
                 executeQuery·p0.95:   2143.289 ms/op
                 executeQuery·p0.99:   2143.289 ms/op
                 executeQuery·p0.999:  2143.289 ms/op
                 executeQuery·p0.9999: 2143.289 ms/op
                 executeQuery·p1.00:   2143.289 ms/op

Iteration   2: 2087.505 ±(99.9%) 426.607 ms/op
                 executeQuery·p0.00:   1912.603 ms/op
                 executeQuery·p0.50:   2128.609 ms/op
                 executeQuery·p0.90:   2202.010 ms/op
                 executeQuery·p0.95:   2202.010 ms/op
                 executeQuery·p0.99:   2202.010 ms/op
                 executeQuery·p0.999:  2202.010 ms/op
                 executeQuery·p0.9999: 2202.010 ms/op
                 executeQuery·p1.00:   2202.010 ms/op

Iteration   3: 2063.178 ±(99.9%) 343.104 ms/op
                 executeQuery·p0.00:   1967.129 ms/op
                 executeQuery·p0.50:   2057.306 ms/op
                 executeQuery·p0.90:   2185.232 ms/op
                 executeQuery·p0.95:   2185.232 ms/op
                 executeQuery·p0.99:   2185.232 ms/op
                 executeQuery·p0.999:  2185.232 ms/op
                 executeQuery·p0.9999: 2185.232 ms/op
                 executeQuery·p1.00:   2185.232 ms/op

Iteration   4: 2051.015 ±(99.9%) 213.578 ms/op
                 executeQuery·p0.00:   1988.100 ms/op
                 executeQuery·p0.50:   2053.112 ms/op
                 executeQuery·p0.90:   2120.221 ms/op
                 executeQuery·p0.95:   2120.221 ms/op
                 executeQuery·p0.99:   2120.221 ms/op
                 executeQuery·p0.999:  2120.221 ms/op
                 executeQuery·p0.9999: 2120.221 ms/op
                 executeQuery·p1.00:   2120.221 ms/op

Iteration   5: 2089.602 ±(99.9%) 303.907 ms/op
                 executeQuery·p0.00:   1965.031 ms/op
                 executeQuery·p0.50:   2097.152 ms/op
                 executeQuery·p0.90:   2168.455 ms/op
                 executeQuery·p0.95:   2168.455 ms/op
                 executeQuery·p0.99:   2168.455 ms/op
                 executeQuery·p0.999:  2168.455 ms/op
                 executeQuery·p0.9999: 2168.455 ms/op
                 executeQuery·p1.00:   2168.455 ms/op


# Run progress: 31.87% complete, ETA 06:52:15
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2266.182 ±(99.9%) 801.573 ms/op
# Warmup Iteration   2: 2084.989 ±(99.9%) 496.305 ms/op
# Warmup Iteration   3: 2062.339 ±(99.9%) 669.030 ms/op
# Warmup Iteration   4: 2069.050 ±(99.9%) 245.975 ms/op
# Warmup Iteration   5: 2063.598 ±(99.9%) 355.409 ms/op
Iteration   1: 2053.531 ±(99.9%) 494.066 ms/op
                 executeQuery·p0.00:   1925.186 ms/op
                 executeQuery·p0.50:   2017.460 ms/op
                 executeQuery·p0.90:   2235.564 ms/op
                 executeQuery·p0.95:   2235.564 ms/op
                 executeQuery·p0.99:   2235.564 ms/op
                 executeQuery·p0.999:  2235.564 ms/op
                 executeQuery·p0.9999: 2235.564 ms/op
                 executeQuery·p1.00:   2235.564 ms/op

Iteration   2: 2058.145 ±(99.9%) 331.317 ms/op
                 executeQuery·p0.00:   1965.031 ms/op
                 executeQuery·p0.50:   2025.849 ms/op
                 executeQuery·p0.90:   2164.261 ms/op
                 executeQuery·p0.95:   2164.261 ms/op
                 executeQuery·p0.99:   2164.261 ms/op
                 executeQuery·p0.999:  2164.261 ms/op
                 executeQuery·p0.9999: 2164.261 ms/op
                 executeQuery·p1.00:   2164.261 ms/op

Iteration   3: 2051.854 ±(99.9%) 267.988 ms/op
                 executeQuery·p0.00:   1965.031 ms/op
                 executeQuery·p0.50:   2025.849 ms/op
                 executeQuery·p0.90:   2126.512 ms/op
                 executeQuery·p0.95:   2126.512 ms/op
                 executeQuery·p0.99:   2126.512 ms/op
                 executeQuery·p0.999:  2126.512 ms/op
                 executeQuery·p0.9999: 2126.512 ms/op
                 executeQuery·p1.00:   2126.512 ms/op

Iteration   4: 2103.443 ±(99.9%) 326.829 ms/op
                 executeQuery·p0.00:   1971.323 ms/op
                 executeQuery·p0.50:   2147.484 ms/op
                 executeQuery·p0.90:   2172.649 ms/op
                 executeQuery·p0.95:   2172.649 ms/op
                 executeQuery·p0.99:   2172.649 ms/op
                 executeQuery·p0.999:  2172.649 ms/op
                 executeQuery·p0.9999: 2172.649 ms/op
                 executeQuery·p1.00:   2172.649 ms/op

Iteration   5: 2084.989 ±(99.9%) 320.960 ms/op
                 executeQuery·p0.00:   1977.614 ms/op
                 executeQuery·p0.50:   2061.500 ms/op
                 executeQuery·p0.90:   2189.427 ms/op
                 executeQuery·p0.95:   2189.427 ms/op
                 executeQuery·p0.99:   2189.427 ms/op
                 executeQuery·p0.999:  2189.427 ms/op
                 executeQuery·p0.9999: 2189.427 ms/op
                 executeQuery·p1.00:   2189.427 ms/op


# Run progress: 32.19% complete, ETA 06:50:11
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2218.367 ±(99.9%) 831.694 ms/op
# Warmup Iteration   2: 2097.571 ±(99.9%) 520.107 ms/op
# Warmup Iteration   3: 2025.429 ±(99.9%) 114.545 ms/op
# Warmup Iteration   4: 2077.858 ±(99.9%) 352.109 ms/op
# Warmup Iteration   5: 2060.242 ±(99.9%) 458.402 ms/op
Iteration   1: 2095.894 ±(99.9%) 412.383 ms/op
                 executeQuery·p0.00:   1933.574 ms/op
                 executeQuery·p0.50:   2088.763 ms/op
                 executeQuery·p0.90:   2210.398 ms/op
                 executeQuery·p0.95:   2210.398 ms/op
                 executeQuery·p0.99:   2210.398 ms/op
                 executeQuery·p0.999:  2210.398 ms/op
                 executeQuery·p0.9999: 2210.398 ms/op
                 executeQuery·p1.00:   2210.398 ms/op

Iteration   2: 2051.854 ±(99.9%) 401.039 ms/op
                 executeQuery·p0.00:   1927.283 ms/op
                 executeQuery·p0.50:   2011.169 ms/op
                 executeQuery·p0.90:   2185.232 ms/op
                 executeQuery·p0.95:   2185.232 ms/op
                 executeQuery·p0.99:   2185.232 ms/op
                 executeQuery·p0.999:  2185.232 ms/op
                 executeQuery·p0.9999: 2185.232 ms/op
                 executeQuery·p1.00:   2185.232 ms/op

Iteration   3: 2114.768 ±(99.9%) 353.873 ms/op
                 executeQuery·p0.00:   1986.003 ms/op
                 executeQuery·p0.50:   2111.832 ms/op
                 executeQuery·p0.90:   2235.564 ms/op
                 executeQuery·p0.95:   2235.564 ms/op
                 executeQuery·p0.99:   2235.564 ms/op
                 executeQuery·p0.999:  2235.564 ms/op
                 executeQuery·p0.9999: 2235.564 ms/op
                 executeQuery·p1.00:   2235.564 ms/op

Iteration   4: 2080.375 ±(99.9%) 741.794 ms/op
                 executeQuery·p0.00:   1841.299 ms/op
                 executeQuery·p0.50:   2113.929 ms/op
                 executeQuery·p0.90:   2344.616 ms/op
                 executeQuery·p0.95:   2344.616 ms/op
                 executeQuery·p0.99:   2344.616 ms/op
                 executeQuery·p0.999:  2344.616 ms/op
                 executeQuery·p0.9999: 2344.616 ms/op
                 executeQuery·p1.00:   2344.616 ms/op

Iteration   5: 2097.991 ±(99.9%) 287.023 ms/op
                 executeQuery·p0.00:   2032.140 ms/op
                 executeQuery·p0.50:   2088.763 ms/op
                 executeQuery·p0.90:   2214.593 ms/op
                 executeQuery·p0.95:   2214.593 ms/op
                 executeQuery·p0.99:   2214.593 ms/op
                 executeQuery·p0.999:  2214.593 ms/op
                 executeQuery·p0.9999: 2214.593 ms/op
                 executeQuery·p1.00:   2214.593 ms/op


# Run progress: 32.50% complete, ETA 06:48:06
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2246.469 ±(99.9%) 844.224 ms/op
# Warmup Iteration   2: 2065.275 ±(99.9%) 417.170 ms/op
# Warmup Iteration   3: 2092.119 ±(99.9%) 414.787 ms/op
# Warmup Iteration   4: 2102.185 ±(99.9%) 369.911 ms/op
# Warmup Iteration   5: 2112.671 ±(99.9%) 600.317 ms/op
Iteration   1: 2169.713 ±(99.9%) 589.824 ms/op
                 executeQuery·p0.00:   1969.226 ms/op
                 executeQuery·p0.50:   2231.370 ms/op
                 executeQuery·p0.90:   2344.616 ms/op
                 executeQuery·p0.95:   2344.616 ms/op
                 executeQuery·p0.99:   2344.616 ms/op
                 executeQuery·p0.999:  2344.616 ms/op
                 executeQuery·p0.9999: 2344.616 ms/op
                 executeQuery·p1.00:   2344.616 ms/op

Iteration   2: 2129.448 ±(99.9%) 432.150 ms/op
                 executeQuery·p0.00:   1990.197 ms/op
                 executeQuery·p0.50:   2143.289 ms/op
                 executeQuery·p0.90:   2294.284 ms/op
                 executeQuery·p0.95:   2294.284 ms/op
                 executeQuery·p0.99:   2294.284 ms/op
                 executeQuery·p0.999:  2294.284 ms/op
                 executeQuery·p0.9999: 2294.284 ms/op
                 executeQuery·p1.00:   2294.284 ms/op

Iteration   3: 2136.998 ±(99.9%) 209.182 ms/op
                 executeQuery·p0.00:   2078.278 ms/op
                 executeQuery·p0.50:   2155.872 ms/op
                 executeQuery·p0.90:   2193.621 ms/op
                 executeQuery·p0.95:   2193.621 ms/op
                 executeQuery·p0.99:   2193.621 ms/op
                 executeQuery·p0.999:  2193.621 ms/op
                 executeQuery·p0.9999: 2193.621 ms/op
                 executeQuery·p1.00:   2193.621 ms/op

Iteration   4: 2122.318 ±(99.9%) 309.457 ms/op
                 executeQuery·p0.00:   2019.557 ms/op
                 executeQuery·p0.50:   2122.318 ms/op
                 executeQuery·p0.90:   2239.758 ms/op
                 executeQuery·p0.95:   2239.758 ms/op
                 executeQuery·p0.99:   2239.758 ms/op
                 executeQuery·p0.999:  2239.758 ms/op
                 executeQuery·p0.9999: 2239.758 ms/op
                 executeQuery·p1.00:   2239.758 ms/op

Iteration   5: 2156.292 ±(99.9%) 220.149 ms/op
                 executeQuery·p0.00:   2069.889 ms/op
                 executeQuery·p0.50:   2168.455 ms/op
                 executeQuery·p0.90:   2227.175 ms/op
                 executeQuery·p0.95:   2227.175 ms/op
                 executeQuery·p0.99:   2227.175 ms/op
                 executeQuery·p0.999:  2227.175 ms/op
                 executeQuery·p0.9999: 2227.175 ms/op
                 executeQuery·p1.00:   2227.175 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 125
  mean =   2090.978 ±(99.9%) 29.961 ms/op

  Histogram, ms/op:
    [1800.000, 1850.000) = 1 
    [1850.000, 1900.000) = 1 
    [1900.000, 1950.000) = 7 
    [1950.000, 2000.000) = 17 
    [2000.000, 2050.000) = 15 
    [2050.000, 2100.000) = 24 
    [2100.000, 2150.000) = 26 
    [2150.000, 2200.000) = 20 
    [2200.000, 2250.000) = 10 
    [2250.000, 2300.000) = 1 
    [2300.000, 2350.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1841.299 ms/op
     p(50.0000) =   2092.958 ms/op
     p(90.0000) =   2212.076 ms/op
     p(95.0000) =   2242.694 ms/op
     p(99.0000) =   2350.824 ms/op
     p(99.9000) =   2353.005 ms/op
     p(99.9900) =   2353.005 ms/op
     p(99.9990) =   2353.005 ms/op
     p(99.9999) =   2353.005 ms/op
    p(100.0000) =   2353.005 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4)

# Run progress: 32.81% complete, ETA 06:46:07
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2348.810 ±(99.9%) 787.174 ms/op
# Warmup Iteration   2: 2070.728 ±(99.9%) 255.596 ms/op
# Warmup Iteration   3: 2152.517 ±(99.9%) 188.746 ms/op
# Warmup Iteration   4: 2168.455 ±(99.9%) 287.046 ms/op
# Warmup Iteration   5: 2207.462 ±(99.9%) 304.497 ms/op
Iteration   1: 2153.775 ±(99.9%) 286.420 ms/op
                 executeQuery·p0.00:   2055.209 ms/op
                 executeQuery·p0.50:   2155.872 ms/op
                 executeQuery·p0.90:   2252.341 ms/op
                 executeQuery·p0.95:   2252.341 ms/op
                 executeQuery·p0.99:   2252.341 ms/op
                 executeQuery·p0.999:  2252.341 ms/op
                 executeQuery·p0.9999: 2252.341 ms/op
                 executeQuery·p1.00:   2252.341 ms/op

Iteration   2: 2196.976 ±(99.9%) 217.106 ms/op
                 executeQuery·p0.00:   2151.678 ms/op
                 executeQuery·p0.50:   2160.067 ms/op
                 executeQuery·p0.90:   2260.730 ms/op
                 executeQuery·p0.95:   2260.730 ms/op
                 executeQuery·p0.99:   2260.730 ms/op
                 executeQuery·p0.999:  2260.730 ms/op
                 executeQuery·p0.9999: 2260.730 ms/op
                 executeQuery·p1.00:   2260.730 ms/op

Iteration   3: 2222.142 ±(99.9%) 221.271 ms/op
                 executeQuery·p0.00:   2155.872 ms/op
                 executeQuery·p0.50:   2252.341 ms/op
                 executeQuery·p0.90:   2277.507 ms/op
                 executeQuery·p0.95:   2277.507 ms/op
                 executeQuery·p0.99:   2277.507 ms/op
                 executeQuery·p0.999:  2277.507 ms/op
                 executeQuery·p0.9999: 2277.507 ms/op
                 executeQuery·p1.00:   2277.507 ms/op

Iteration   4: 2196.138 ±(99.9%) 276.657 ms/op
                 executeQuery·p0.00:   2120.221 ms/op
                 executeQuery·p0.50:   2222.981 ms/op
                 executeQuery·p0.90:   2285.896 ms/op
                 executeQuery·p0.95:   2285.896 ms/op
                 executeQuery·p0.99:   2285.896 ms/op
                 executeQuery·p0.999:  2285.896 ms/op
                 executeQuery·p0.9999: 2285.896 ms/op
                 executeQuery·p1.00:   2285.896 ms/op

Iteration   5: 2170.972 ±(99.9%) 425.528 ms/op
                 executeQuery·p0.00:   2053.112 ms/op
                 executeQuery·p0.50:   2118.124 ms/op
                 executeQuery·p0.90:   2319.450 ms/op
                 executeQuery·p0.95:   2319.450 ms/op
                 executeQuery·p0.99:   2319.450 ms/op
                 executeQuery·p0.999:  2319.450 ms/op
                 executeQuery·p0.9999: 2319.450 ms/op
                 executeQuery·p1.00:   2319.450 ms/op


# Run progress: 33.13% complete, ETA 06:44:13
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2263.666 ±(99.9%) 880.284 ms/op
# Warmup Iteration   2: 2106.379 ±(99.9%) 406.690 ms/op
# Warmup Iteration   3: 2135.320 ±(99.9%) 332.878 ms/op
# Warmup Iteration   4: 2101.346 ±(99.9%) 452.402 ms/op
# Warmup Iteration   5: 2146.645 ±(99.9%) 390.577 ms/op
Iteration   1: 2116.865 ±(99.9%) 362.206 ms/op
                 executeQuery·p0.00:   2004.877 ms/op
                 executeQuery·p0.50:   2118.124 ms/op
                 executeQuery·p0.90:   2260.730 ms/op
                 executeQuery·p0.95:   2260.730 ms/op
                 executeQuery·p0.99:   2260.730 ms/op
                 executeQuery·p0.999:  2260.730 ms/op
                 executeQuery·p0.9999: 2260.730 ms/op
                 executeQuery·p1.00:   2260.730 ms/op

Iteration   2: 2104.282 ±(99.9%) 572.373 ms/op
                 executeQuery·p0.00:   1958.740 ms/op
                 executeQuery·p0.50:   2023.752 ms/op
                 executeQuery·p0.90:   2269.118 ms/op
                 executeQuery·p0.95:   2269.118 ms/op
                 executeQuery·p0.99:   2269.118 ms/op
                 executeQuery·p0.999:  2269.118 ms/op
                 executeQuery·p0.9999: 2269.118 ms/op
                 executeQuery·p1.00:   2269.118 ms/op

Iteration   3: 2247.308 ±(99.9%) 385.831 ms/op
                 executeQuery·p0.00:   2105.541 ms/op
                 executeQuery·p0.50:   2285.896 ms/op
                 executeQuery·p0.90:   2361.393 ms/op
                 executeQuery·p0.95:   2361.393 ms/op
                 executeQuery·p0.99:   2361.393 ms/op
                 executeQuery·p0.999:  2361.393 ms/op
                 executeQuery·p0.9999: 2361.393 ms/op
                 executeQuery·p1.00:   2361.393 ms/op

Iteration   4: 2126.932 ±(99.9%) 321.518 ms/op
                 executeQuery·p0.00:   2042.626 ms/op
                 executeQuery·p0.50:   2082.472 ms/op
                 executeQuery·p0.90:   2239.758 ms/op
                 executeQuery·p0.95:   2239.758 ms/op
                 executeQuery·p0.99:   2239.758 ms/op
                 executeQuery·p0.999:  2239.758 ms/op
                 executeQuery·p0.9999: 2239.758 ms/op
                 executeQuery·p1.00:   2239.758 ms/op

Iteration   5: 2121.479 ±(99.9%) 347.364 ms/op
                 executeQuery·p0.00:   2027.946 ms/op
                 executeQuery·p0.50:   2084.569 ms/op
                 executeQuery·p0.90:   2260.730 ms/op
                 executeQuery·p0.95:   2260.730 ms/op
                 executeQuery·p0.99:   2260.730 ms/op
                 executeQuery·p0.999:  2260.730 ms/op
                 executeQuery·p0.9999: 2260.730 ms/op
                 executeQuery·p1.00:   2260.730 ms/op


# Run progress: 33.44% complete, ETA 06:42:15
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2310.223 ±(99.9%) 768.597 ms/op
# Warmup Iteration   2: 2033.399 ±(99.9%) 297.181 ms/op
# Warmup Iteration   3: 2102.605 ±(99.9%) 371.976 ms/op
# Warmup Iteration   4: 2079.116 ±(99.9%) 126.863 ms/op
# Warmup Iteration   5: 2099.669 ±(99.9%) 343.816 ms/op
Iteration   1: 2142.870 ±(99.9%) 509.659 ms/op
                 executeQuery·p0.00:   2034.237 ms/op
                 executeQuery·p0.50:   2069.889 ms/op
                 executeQuery·p0.90:   2323.644 ms/op
                 executeQuery·p0.95:   2323.644 ms/op
                 executeQuery·p0.99:   2323.644 ms/op
                 executeQuery·p0.999:  2323.644 ms/op
                 executeQuery·p0.9999: 2323.644 ms/op
                 executeQuery·p1.00:   2323.644 ms/op

Iteration   2: 2133.642 ±(99.9%) 239.255 ms/op
                 executeQuery·p0.00:   2059.403 ms/op
                 executeQuery·p0.50:   2151.678 ms/op
                 executeQuery·p0.90:   2202.010 ms/op
                 executeQuery·p0.95:   2202.010 ms/op
                 executeQuery·p0.99:   2202.010 ms/op
                 executeQuery·p0.999:  2202.010 ms/op
                 executeQuery·p0.9999: 2202.010 ms/op
                 executeQuery·p1.00:   2202.010 ms/op

Iteration   3: 2139.095 ±(99.9%) 374.658 ms/op
                 executeQuery·p0.00:   2042.626 ms/op
                 executeQuery·p0.50:   2086.666 ms/op
                 executeQuery·p0.90:   2269.118 ms/op
                 executeQuery·p0.95:   2269.118 ms/op
                 executeQuery·p0.99:   2269.118 ms/op
                 executeQuery·p0.999:  2269.118 ms/op
                 executeQuery·p0.9999: 2269.118 ms/op
                 executeQuery·p1.00:   2269.118 ms/op

Iteration   4: 2092.958 ±(99.9%) 76.397 ms/op
                 executeQuery·p0.00:   2059.403 ms/op
                 executeQuery·p0.50:   2097.152 ms/op
                 executeQuery·p0.90:   2111.832 ms/op
                 executeQuery·p0.95:   2111.832 ms/op
                 executeQuery·p0.99:   2111.832 ms/op
                 executeQuery·p0.999:  2111.832 ms/op
                 executeQuery·p0.9999: 2111.832 ms/op
                 executeQuery·p1.00:   2111.832 ms/op

Iteration   5: 2179.360 ±(99.9%) 624.510 ms/op
                 executeQuery·p0.00:   2019.557 ms/op
                 executeQuery·p0.50:   2139.095 ms/op
                 executeQuery·p0.90:   2453.668 ms/op
                 executeQuery·p0.95:   2453.668 ms/op
                 executeQuery·p0.99:   2453.668 ms/op
                 executeQuery·p0.999:  2453.668 ms/op
                 executeQuery·p0.9999: 2453.668 ms/op
                 executeQuery·p1.00:   2453.668 ms/op


# Run progress: 33.75% complete, ETA 06:40:15
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2300.995 ±(99.9%) 943.515 ms/op
# Warmup Iteration   2: 2173.908 ±(99.9%) 439.259 ms/op
# Warmup Iteration   3: 2114.349 ±(99.9%) 251.403 ms/op
# Warmup Iteration   4: 2158.808 ±(99.9%) 410.163 ms/op
# Warmup Iteration   5: 2119.801 ±(99.9%) 322.177 ms/op
Iteration   1: 2156.711 ±(99.9%) 526.841 ms/op
                 executeQuery·p0.00:   2076.180 ms/op
                 executeQuery·p0.50:   2101.346 ms/op
                 executeQuery·p0.90:   2399.142 ms/op
                 executeQuery·p0.95:   2399.142 ms/op
                 executeQuery·p0.99:   2399.142 ms/op
                 executeQuery·p0.999:  2399.142 ms/op
                 executeQuery·p0.9999: 2399.142 ms/op
                 executeQuery·p1.00:   2399.142 ms/op

Iteration   2: 2144.128 ±(99.9%) 481.201 ms/op
                 executeQuery·p0.00:   1996.489 ms/op
                 executeQuery·p0.50:   2160.067 ms/op
                 executeQuery·p0.90:   2285.896 ms/op
                 executeQuery·p0.95:   2285.896 ms/op
                 executeQuery·p0.99:   2285.896 ms/op
                 executeQuery·p0.999:  2285.896 ms/op
                 executeQuery·p0.9999: 2285.896 ms/op
                 executeQuery·p1.00:   2285.896 ms/op

Iteration   3: 2173.908 ±(99.9%) 319.749 ms/op
                 executeQuery·p0.00:   2105.541 ms/op
                 executeQuery·p0.50:   2160.067 ms/op
                 executeQuery·p0.90:   2311.062 ms/op
                 executeQuery·p0.95:   2311.062 ms/op
                 executeQuery·p0.99:   2311.062 ms/op
                 executeQuery·p0.999:  2311.062 ms/op
                 executeQuery·p0.9999: 2311.062 ms/op
                 executeQuery·p1.00:   2311.062 ms/op

Iteration   4: 2162.164 ±(99.9%) 219.526 ms/op
                 executeQuery·p0.00:   2095.055 ms/op
                 executeQuery·p0.50:   2185.232 ms/op
                 executeQuery·p0.90:   2227.175 ms/op
                 executeQuery·p0.95:   2227.175 ms/op
                 executeQuery·p0.99:   2227.175 ms/op
                 executeQuery·p0.999:  2227.175 ms/op
                 executeQuery·p0.9999: 2227.175 ms/op
                 executeQuery·p1.00:   2227.175 ms/op

Iteration   5: 2150.839 ±(99.9%) 331.268 ms/op
                 executeQuery·p0.00:   2063.598 ms/op
                 executeQuery·p0.50:   2151.678 ms/op
                 executeQuery·p0.90:   2281.701 ms/op
                 executeQuery·p0.95:   2281.701 ms/op
                 executeQuery·p0.99:   2281.701 ms/op
                 executeQuery·p0.999:  2281.701 ms/op
                 executeQuery·p0.9999: 2281.701 ms/op
                 executeQuery·p1.00:   2281.701 ms/op


# Run progress: 34.06% complete, ETA 06:38:19
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2268.699 ±(99.9%) 828.513 ms/op
# Warmup Iteration   2: 2087.086 ±(99.9%) 435.450 ms/op
# Warmup Iteration   3: 2150.000 ±(99.9%) 245.364 ms/op
# Warmup Iteration   4: 2183.555 ±(99.9%) 702.080 ms/op
# Warmup Iteration   5: 2121.898 ±(99.9%) 192.577 ms/op
Iteration   1: 2136.998 ±(99.9%) 224.156 ms/op
                 executeQuery·p0.00:   2065.695 ms/op
                 executeQuery·p0.50:   2120.221 ms/op
                 executeQuery·p0.90:   2210.398 ms/op
                 executeQuery·p0.95:   2210.398 ms/op
                 executeQuery·p0.99:   2210.398 ms/op
                 executeQuery·p0.999:  2210.398 ms/op
                 executeQuery·p0.9999: 2210.398 ms/op
                 executeQuery·p1.00:   2210.398 ms/op

Iteration   2: 2181.038 ±(99.9%) 293.393 ms/op
                 executeQuery·p0.00:   2055.209 ms/op
                 executeQuery·p0.50:   2193.621 ms/op
                 executeQuery·p0.90:   2252.341 ms/op
                 executeQuery·p0.95:   2252.341 ms/op
                 executeQuery·p0.99:   2252.341 ms/op
                 executeQuery·p0.999:  2252.341 ms/op
                 executeQuery·p0.9999: 2252.341 ms/op
                 executeQuery·p1.00:   2252.341 ms/op

Iteration   3: 2173.488 ±(99.9%) 333.817 ms/op
                 executeQuery·p0.00:   2059.403 ms/op
                 executeQuery·p0.50:   2160.067 ms/op
                 executeQuery·p0.90:   2294.284 ms/op
                 executeQuery·p0.95:   2294.284 ms/op
                 executeQuery·p0.99:   2294.284 ms/op
                 executeQuery·p0.999:  2294.284 ms/op
                 executeQuery·p0.9999: 2294.284 ms/op
                 executeQuery·p1.00:   2294.284 ms/op

Iteration   4: 2185.232 ±(99.9%) 265.384 ms/op
                 executeQuery·p0.00:   2126.512 ms/op
                 executeQuery·p0.50:   2151.678 ms/op
                 executeQuery·p0.90:   2285.896 ms/op
                 executeQuery·p0.95:   2285.896 ms/op
                 executeQuery·p0.99:   2285.896 ms/op
                 executeQuery·p0.999:  2285.896 ms/op
                 executeQuery·p0.9999: 2285.896 ms/op
                 executeQuery·p1.00:   2285.896 ms/op

Iteration   5: 2146.645 ±(99.9%) 387.728 ms/op
                 executeQuery·p0.00:   2032.140 ms/op
                 executeQuery·p0.50:   2111.832 ms/op
                 executeQuery·p0.90:   2256.536 ms/op
                 executeQuery·p0.95:   2256.536 ms/op
                 executeQuery·p0.99:   2256.536 ms/op
                 executeQuery·p0.999:  2256.536 ms/op
                 executeQuery·p0.9999: 2256.536 ms/op
                 executeQuery·p1.00:   2256.536 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 125
  mean =   2158.238 ±(99.9%) 27.861 ms/op

  Histogram, ms/op:
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 2 
    [2000.000, 2050.000) = 11 
    [2050.000, 2100.000) = 24 
    [2100.000, 2150.000) = 24 
    [2150.000, 2200.000) = 24 
    [2200.000, 2250.000) = 13 
    [2250.000, 2300.000) = 21 
    [2300.000, 2350.000) = 3 
    [2350.000, 2400.000) = 2 
    [2400.000, 2450.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1958.740 ms/op
     p(50.0000) =   2151.678 ms/op
     p(90.0000) =   2283.379 ms/op
     p(95.0000) =   2306.028 ms/op
     p(99.0000) =   2439.491 ms/op
     p(99.9000) =   2453.668 ms/op
     p(99.9900) =   2453.668 ms/op
     p(99.9990) =   2453.668 ms/op
     p(99.9999) =   2453.668 ms/op
    p(100.0000) =   2453.668 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6)

# Run progress: 34.38% complete, ETA 06:36:23
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2342.519 ±(99.9%) 995.666 ms/op
# Warmup Iteration   2: 2199.493 ±(99.9%) 203.205 ms/op
# Warmup Iteration   3: 2149.581 ±(99.9%) 501.520 ms/op
# Warmup Iteration   4: 2152.097 ±(99.9%) 526.835 ms/op
# Warmup Iteration   5: 2139.095 ±(99.9%) 467.536 ms/op
Iteration   1: 2128.609 ±(99.9%) 293.004 ms/op
                 executeQuery·p0.00:   2027.946 ms/op
                 executeQuery·p0.50:   2107.638 ms/op
                 executeQuery·p0.90:   2231.370 ms/op
                 executeQuery·p0.95:   2231.370 ms/op
                 executeQuery·p0.99:   2231.370 ms/op
                 executeQuery·p0.999:  2231.370 ms/op
                 executeQuery·p0.9999: 2231.370 ms/op
                 executeQuery·p1.00:   2231.370 ms/op

Iteration   2: 2163.422 ±(99.9%) 523.177 ms/op
                 executeQuery·p0.00:   2021.655 ms/op
                 executeQuery·p0.50:   2090.861 ms/op
                 executeQuery·p0.90:   2319.450 ms/op
                 executeQuery·p0.95:   2319.450 ms/op
                 executeQuery·p0.99:   2319.450 ms/op
                 executeQuery·p0.999:  2319.450 ms/op
                 executeQuery·p0.9999: 2319.450 ms/op
                 executeQuery·p1.00:   2319.450 ms/op

Iteration   3: 2185.652 ±(99.9%) 463.206 ms/op
                 executeQuery·p0.00:   2088.763 ms/op
                 executeQuery·p0.50:   2105.541 ms/op
                 executeQuery·p0.90:   2344.616 ms/op
                 executeQuery·p0.95:   2344.616 ms/op
                 executeQuery·p0.99:   2344.616 ms/op
                 executeQuery·p0.999:  2344.616 ms/op
                 executeQuery·p0.9999: 2344.616 ms/op
                 executeQuery·p1.00:   2344.616 ms/op

Iteration   4: 2150.839 ±(99.9%) 552.046 ms/op
                 executeQuery·p0.00:   2025.849 ms/op
                 executeQuery·p0.50:   2078.278 ms/op
                 executeQuery·p0.90:   2382.365 ms/op
                 executeQuery·p0.95:   2382.365 ms/op
                 executeQuery·p0.99:   2382.365 ms/op
                 executeQuery·p0.999:  2382.365 ms/op
                 executeQuery·p0.9999: 2382.365 ms/op
                 executeQuery·p1.00:   2382.365 ms/op

Iteration   5: 2347.971 ±(99.9%) 584.270 ms/op
                 executeQuery·p0.00:   2151.678 ms/op
                 executeQuery·p0.50:   2298.479 ms/op
                 executeQuery·p0.90:   2545.943 ms/op
                 executeQuery·p0.95:   2545.943 ms/op
                 executeQuery·p0.99:   2545.943 ms/op
                 executeQuery·p0.999:  2545.943 ms/op
                 executeQuery·p0.9999: 2545.943 ms/op
                 executeQuery·p1.00:   2545.943 ms/op


# Run progress: 34.69% complete, ETA 06:34:30
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2474.639 ±(99.9%) 1107.161 ms/op
# Warmup Iteration   2: 2157.550 ±(99.9%) 440.031 ms/op
# Warmup Iteration   3: 2223.820 ±(99.9%) 351.145 ms/op
# Warmup Iteration   4: 2159.228 ±(99.9%) 313.882 ms/op
# Warmup Iteration   5: 2194.040 ±(99.9%) 486.216 ms/op
Iteration   1: 2170.552 ±(99.9%) 363.303 ms/op
                 executeQuery·p0.00:   2080.375 ms/op
                 executeQuery·p0.50:   2147.484 ms/op
                 executeQuery·p0.90:   2298.479 ms/op
                 executeQuery·p0.95:   2298.479 ms/op
                 executeQuery·p0.99:   2298.479 ms/op
                 executeQuery·p0.999:  2298.479 ms/op
                 executeQuery·p0.9999: 2298.479 ms/op
                 executeQuery·p1.00:   2298.479 ms/op

Iteration   2: 2225.498 ±(99.9%) 601.559 ms/op
                 executeQuery·p0.00:   2055.209 ms/op
                 executeQuery·p0.50:   2227.175 ms/op
                 executeQuery·p0.90:   2453.668 ms/op
                 executeQuery·p0.95:   2453.668 ms/op
                 executeQuery·p0.99:   2453.668 ms/op
                 executeQuery·p0.999:  2453.668 ms/op
                 executeQuery·p0.9999: 2453.668 ms/op
                 executeQuery·p1.00:   2453.668 ms/op

Iteration   3: 2134.901 ±(99.9%) 74.670 ms/op
                 executeQuery·p0.00:   2109.735 ms/op
                 executeQuery·p0.50:   2128.609 ms/op
                 executeQuery·p0.90:   2160.067 ms/op
                 executeQuery·p0.95:   2160.067 ms/op
                 executeQuery·p0.99:   2160.067 ms/op
                 executeQuery·p0.999:  2160.067 ms/op
                 executeQuery·p0.9999: 2160.067 ms/op
                 executeQuery·p1.00:   2160.067 ms/op

Iteration   4: 2196.138 ±(99.9%) 414.111 ms/op
                 executeQuery·p0.00:   2092.958 ms/op
                 executeQuery·p0.50:   2141.192 ms/op
                 executeQuery·p0.90:   2357.199 ms/op
                 executeQuery·p0.95:   2357.199 ms/op
                 executeQuery·p0.99:   2357.199 ms/op
                 executeQuery·p0.999:  2357.199 ms/op
                 executeQuery·p0.9999: 2357.199 ms/op
                 executeQuery·p1.00:   2357.199 ms/op

Iteration   5: 2141.192 ±(99.9%) 384.578 ms/op
                 executeQuery·p0.00:   2027.946 ms/op
                 executeQuery·p0.50:   2109.735 ms/op
                 executeQuery·p0.90:   2269.118 ms/op
                 executeQuery·p0.95:   2269.118 ms/op
                 executeQuery·p0.99:   2269.118 ms/op
                 executeQuery·p0.999:  2269.118 ms/op
                 executeQuery·p0.9999: 2269.118 ms/op
                 executeQuery·p1.00:   2269.118 ms/op


# Run progress: 35.00% complete, ETA 06:32:34
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2344.616 ±(99.9%) 889.320 ms/op
# Warmup Iteration   2: 2216.690 ±(99.9%) 514.929 ms/op
# Warmup Iteration   3: 2187.330 ±(99.9%) 246.795 ms/op
# Warmup Iteration   4: 2271.216 ±(99.9%) 908.687 ms/op
# Warmup Iteration   5: 2183.555 ±(99.9%) 238.422 ms/op
Iteration   1: 2174.747 ±(99.9%) 320.685 ms/op
                 executeQuery·p0.00:   2082.472 ms/op
                 executeQuery·p0.50:   2193.621 ms/op
                 executeQuery·p0.90:   2260.730 ms/op
                 executeQuery·p0.95:   2260.730 ms/op
                 executeQuery·p0.99:   2260.730 ms/op
                 executeQuery·p0.999:  2260.730 ms/op
                 executeQuery·p0.9999: 2260.730 ms/op
                 executeQuery·p1.00:   2260.730 ms/op

Iteration   2: 2213.334 ±(99.9%) 197.773 ms/op
                 executeQuery·p0.00:   2124.415 ms/op
                 executeQuery·p0.50:   2222.981 ms/op
                 executeQuery·p0.90:   2252.341 ms/op
                 executeQuery·p0.95:   2252.341 ms/op
                 executeQuery·p0.99:   2252.341 ms/op
                 executeQuery·p0.999:  2252.341 ms/op
                 executeQuery·p0.9999: 2252.341 ms/op
                 executeQuery·p1.00:   2252.341 ms/op

Iteration   3: 2150.000 ±(99.9%) 270.640 ms/op
                 executeQuery·p0.00:   2063.598 ms/op
                 executeQuery·p0.50:   2164.261 ms/op
                 executeQuery·p0.90:   2239.758 ms/op
                 executeQuery·p0.95:   2239.758 ms/op
                 executeQuery·p0.99:   2239.758 ms/op
                 executeQuery·p0.999:  2239.758 ms/op
                 executeQuery·p0.9999: 2239.758 ms/op
                 executeQuery·p1.00:   2239.758 ms/op

Iteration   4: 2167.616 ±(99.9%) 306.578 ms/op
                 executeQuery·p0.00:   2071.986 ms/op
                 executeQuery·p0.50:   2145.386 ms/op
                 executeQuery·p0.90:   2269.118 ms/op
                 executeQuery·p0.95:   2269.118 ms/op
                 executeQuery·p0.99:   2269.118 ms/op
                 executeQuery·p0.999:  2269.118 ms/op
                 executeQuery·p0.9999: 2269.118 ms/op
                 executeQuery·p1.00:   2269.118 ms/op

Iteration   5: 2204.946 ±(99.9%) 297.345 ms/op
                 executeQuery·p0.00:   2109.735 ms/op
                 executeQuery·p0.50:   2248.147 ms/op
                 executeQuery·p0.90:   2269.118 ms/op
                 executeQuery·p0.95:   2269.118 ms/op
                 executeQuery·p0.99:   2269.118 ms/op
                 executeQuery·p0.999:  2269.118 ms/op
                 executeQuery·p0.9999: 2269.118 ms/op
                 executeQuery·p1.00:   2269.118 ms/op


# Run progress: 35.31% complete, ETA 06:30:42
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2450.522 ±(99.9%) 1593.875 ms/op
# Warmup Iteration   2: 2254.019 ±(99.9%) 355.427 ms/op
# Warmup Iteration   3: 2226.337 ±(99.9%) 210.394 ms/op
# Warmup Iteration   4: 2230.111 ±(99.9%) 809.184 ms/op
# Warmup Iteration   5: 2234.725 ±(99.9%) 696.045 ms/op
Iteration   1: 2189.007 ±(99.9%) 627.297 ms/op
                 executeQuery·p0.00:   2044.723 ms/op
                 executeQuery·p0.50:   2134.901 ms/op
                 executeQuery·p0.90:   2462.056 ms/op
                 executeQuery·p0.95:   2462.056 ms/op
                 executeQuery·p0.99:   2462.056 ms/op
                 executeQuery·p0.999:  2462.056 ms/op
                 executeQuery·p0.9999: 2462.056 ms/op
                 executeQuery·p1.00:   2462.056 ms/op

Iteration   2: 2222.562 ±(99.9%) 372.099 ms/op
                 executeQuery·p0.00:   2107.638 ms/op
                 executeQuery·p0.50:   2185.232 ms/op
                 executeQuery·p0.90:   2344.616 ms/op
                 executeQuery·p0.95:   2344.616 ms/op
                 executeQuery·p0.99:   2344.616 ms/op
                 executeQuery·p0.999:  2344.616 ms/op
                 executeQuery·p0.9999: 2344.616 ms/op
                 executeQuery·p1.00:   2344.616 ms/op

Iteration   3: 2171.391 ±(99.9%) 381.839 ms/op
                 executeQuery·p0.00:   2080.375 ms/op
                 executeQuery·p0.50:   2143.289 ms/op
                 executeQuery·p0.90:   2294.284 ms/op
                 executeQuery·p0.95:   2294.284 ms/op
                 executeQuery·p0.99:   2294.284 ms/op
                 executeQuery·p0.999:  2294.284 ms/op
                 executeQuery·p0.9999: 2294.284 ms/op
                 executeQuery·p1.00:   2294.284 ms/op

Iteration   4: 2181.877 ±(99.9%) 589.381 ms/op
                 executeQuery·p0.00:   1975.517 ms/op
                 executeQuery·p0.50:   2193.621 ms/op
                 executeQuery·p0.90:   2382.365 ms/op
                 executeQuery·p0.95:   2382.365 ms/op
                 executeQuery·p0.99:   2382.365 ms/op
                 executeQuery·p0.999:  2382.365 ms/op
                 executeQuery·p0.9999: 2382.365 ms/op
                 executeQuery·p1.00:   2382.365 ms/op

Iteration   5: 2292.187 ±(99.9%) 330.992 ms/op
                 executeQuery·p0.00:   2145.386 ms/op
                 executeQuery·p0.50:   2336.227 ms/op
                 executeQuery·p0.90:   2353.005 ms/op
                 executeQuery·p0.95:   2353.005 ms/op
                 executeQuery·p0.99:   2353.005 ms/op
                 executeQuery·p0.999:  2353.005 ms/op
                 executeQuery·p0.9999: 2353.005 ms/op
                 executeQuery·p1.00:   2353.005 ms/op


# Run progress: 35.63% complete, ETA 06:28:49
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_2099079848 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2099079848(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2099079848> join_map = new Int_Multi_Object_Map<JRT_2099079848>();
private final class JRT_131215478 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_131215478(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_131215478> join_map_0 = new Int_Multi_Object_Map<JRT_131215478>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_131215478 left_join_record = new JRT_131215478(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_131215478> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_131215478 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_2099079848 left_join_record_0 = new JRT_2099079848(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2099079848> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_2099079848 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2374.815 ±(99.9%) 736.358 ms/op
# Warmup Iteration   2: 2152.936 ±(99.9%) 532.474 ms/op
# Warmup Iteration   3: 2146.225 ±(99.9%) 140.753 ms/op
# Warmup Iteration   4: 2153.356 ±(99.9%) 334.393 ms/op
# Warmup Iteration   5: 2115.607 ±(99.9%) 329.877 ms/op
Iteration   1: 2158.389 ±(99.9%) 340.097 ms/op
                 executeQuery·p0.00:   2061.500 ms/op
                 executeQuery·p0.50:   2164.261 ms/op
                 executeQuery·p0.90:   2285.896 ms/op
                 executeQuery·p0.95:   2285.896 ms/op
                 executeQuery·p0.99:   2285.896 ms/op
                 executeQuery·p0.999:  2285.896 ms/op
                 executeQuery·p0.9999: 2285.896 ms/op
                 executeQuery·p1.00:   2285.896 ms/op

Iteration   2: 2087.086 ±(99.9%) 196.930 ms/op
                 executeQuery·p0.00:   2036.335 ms/op
                 executeQuery·p0.50:   2076.180 ms/op
                 executeQuery·p0.90:   2155.872 ms/op
                 executeQuery·p0.95:   2155.872 ms/op
                 executeQuery·p0.99:   2155.872 ms/op
                 executeQuery·p0.999:  2155.872 ms/op
                 executeQuery·p0.9999: 2155.872 ms/op
                 executeQuery·p1.00:   2155.872 ms/op

Iteration   3: 2157.131 ±(99.9%) 413.882 ms/op
                 executeQuery·p0.00:   2055.209 ms/op
                 executeQuery·p0.50:   2122.318 ms/op
                 executeQuery·p0.90:   2281.701 ms/op
                 executeQuery·p0.95:   2281.701 ms/op
                 executeQuery·p0.99:   2281.701 ms/op
                 executeQuery·p0.999:  2281.701 ms/op
                 executeQuery·p0.9999: 2281.701 ms/op
                 executeQuery·p1.00:   2281.701 ms/op

Iteration   4: 2142.031 ±(99.9%) 287.704 ms/op
                 executeQuery·p0.00:   2057.306 ms/op
                 executeQuery·p0.50:   2124.415 ms/op
                 executeQuery·p0.90:   2243.953 ms/op
                 executeQuery·p0.95:   2243.953 ms/op
                 executeQuery·p0.99:   2243.953 ms/op
                 executeQuery·p0.999:  2243.953 ms/op
                 executeQuery·p0.9999: 2243.953 ms/op
                 executeQuery·p1.00:   2243.953 ms/op

Iteration   5: 2115.607 ±(99.9%) 97.475 ms/op
                 executeQuery·p0.00:   2080.375 ms/op
                 executeQuery·p0.50:   2126.512 ms/op
                 executeQuery·p0.90:   2143.289 ms/op
                 executeQuery·p0.95:   2143.289 ms/op
                 executeQuery·p0.99:   2143.289 ms/op
                 executeQuery·p0.999:  2143.289 ms/op
                 executeQuery·p0.9999: 2143.289 ms/op
                 executeQuery·p1.00:   2143.289 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 125
  mean =   2178.907 ±(99.9%) 32.363 ms/op

  Histogram, ms/op:
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 7 
    [2050.000, 2100.000) = 26 
    [2100.000, 2150.000) = 30 
    [2150.000, 2200.000) = 14 
    [2200.000, 2250.000) = 13 
    [2250.000, 2300.000) = 21 
    [2300.000, 2350.000) = 5 
    [2350.000, 2400.000) = 4 
    [2400.000, 2450.000) = 1 
    [2450.000, 2500.000) = 2 
    [2500.000, 2550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1975.517 ms/op
     p(50.0000) =   2147.484 ms/op
     p(90.0000) =   2326.161 ms/op
     p(95.0000) =   2374.815 ms/op
     p(99.0000) =   2524.132 ms/op
     p(99.9000) =   2545.943 ms/op
     p(99.9900) =   2545.943 ms/op
     p(99.9990) =   2545.943 ms/op
     p(99.9999) =   2545.943 ms/op
    p(100.0000) =   2545.943 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8)

# Run progress: 35.94% complete, ETA 06:26:53
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2399.142 ±(99.9%) 936.954 ms/op
# Warmup Iteration   2: 2212.915 ±(99.9%) 378.657 ms/op
# Warmup Iteration   3: 2186.491 ±(99.9%) 264.005 ms/op
# Warmup Iteration   4: 2218.367 ±(99.9%) 437.579 ms/op
# Warmup Iteration   5: 2147.064 ±(99.9%) 368.533 ms/op
Iteration   1: 2152.936 ±(99.9%) 181.974 ms/op
                 executeQuery·p0.00:   2107.638 ms/op
                 executeQuery·p0.50:   2147.484 ms/op
                 executeQuery·p0.90:   2231.370 ms/op
                 executeQuery·p0.95:   2231.370 ms/op
                 executeQuery·p0.99:   2231.370 ms/op
                 executeQuery·p0.999:  2231.370 ms/op
                 executeQuery·p0.9999: 2231.370 ms/op
                 executeQuery·p1.00:   2231.370 ms/op

Iteration   2: 2234.306 ±(99.9%) 352.720 ms/op
                 executeQuery·p0.00:   2078.278 ms/op
                 executeQuery·p0.50:   2264.924 ms/op
                 executeQuery·p0.90:   2302.673 ms/op
                 executeQuery·p0.95:   2302.673 ms/op
                 executeQuery·p0.99:   2302.673 ms/op
                 executeQuery·p0.999:  2302.673 ms/op
                 executeQuery·p0.9999: 2302.673 ms/op
                 executeQuery·p1.00:   2302.673 ms/op

Iteration   3: 2269.118 ±(99.9%) 185.206 ms/op
                 executeQuery·p0.00:   2185.232 ms/op
                 executeQuery·p0.50:   2290.090 ms/op
                 executeQuery·p0.90:   2302.673 ms/op
                 executeQuery·p0.95:   2302.673 ms/op
                 executeQuery·p0.99:   2302.673 ms/op
                 executeQuery·p0.999:  2302.673 ms/op
                 executeQuery·p0.9999: 2302.673 ms/op
                 executeQuery·p1.00:   2302.673 ms/op

Iteration   4: 2232.628 ±(99.9%) 330.874 ms/op
                 executeQuery·p0.00:   2107.638 ms/op
                 executeQuery·p0.50:   2231.370 ms/op
                 executeQuery·p0.90:   2344.616 ms/op
                 executeQuery·p0.95:   2344.616 ms/op
                 executeQuery·p0.99:   2344.616 ms/op
                 executeQuery·p0.999:  2344.616 ms/op
                 executeQuery·p0.9999: 2344.616 ms/op
                 executeQuery·p1.00:   2344.616 ms/op

Iteration   5: 2238.081 ±(99.9%) 360.889 ms/op
                 executeQuery·p0.00:   2164.261 ms/op
                 executeQuery·p0.50:   2206.204 ms/op
                 executeQuery·p0.90:   2390.753 ms/op
                 executeQuery·p0.95:   2390.753 ms/op
                 executeQuery·p0.99:   2390.753 ms/op
                 executeQuery·p0.999:  2390.753 ms/op
                 executeQuery·p0.9999: 2390.753 ms/op
                 executeQuery·p1.00:   2390.753 ms/op


# Run progress: 36.25% complete, ETA 06:25:04
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2499.805 ±(99.9%) 1081.202 ms/op
# Warmup Iteration   2: 2154.195 ±(99.9%) 325.198 ms/op
# Warmup Iteration   3: 2191.524 ±(99.9%) 307.502 ms/op
# Warmup Iteration   4: 2209.559 ±(99.9%) 375.900 ms/op
# Warmup Iteration   5: 2195.299 ±(99.9%) 321.315 ms/op
Iteration   1: 2241.436 ±(99.9%) 523.388 ms/op
                 executeQuery·p0.00:   2061.500 ms/op
                 executeQuery·p0.50:   2285.896 ms/op
                 executeQuery·p0.90:   2399.142 ms/op
                 executeQuery·p0.95:   2399.142 ms/op
                 executeQuery·p0.99:   2399.142 ms/op
                 executeQuery·p0.999:  2399.142 ms/op
                 executeQuery·p0.9999: 2399.142 ms/op
                 executeQuery·p1.00:   2399.142 ms/op

Iteration   2: 2244.792 ±(99.9%) 470.373 ms/op
                 executeQuery·p0.00:   2143.289 ms/op
                 executeQuery·p0.50:   2181.038 ms/op
                 executeQuery·p0.90:   2428.502 ms/op
                 executeQuery·p0.95:   2428.502 ms/op
                 executeQuery·p0.99:   2428.502 ms/op
                 executeQuery·p0.999:  2428.502 ms/op
                 executeQuery·p0.9999: 2428.502 ms/op
                 executeQuery·p1.00:   2428.502 ms/op

Iteration   3: 2210.398 ±(99.9%) 273.373 ms/op
                 executeQuery·p0.00:   2160.067 ms/op
                 executeQuery·p0.50:   2172.649 ms/op
                 executeQuery·p0.90:   2327.839 ms/op
                 executeQuery·p0.95:   2327.839 ms/op
                 executeQuery·p0.99:   2327.839 ms/op
                 executeQuery·p0.999:  2327.839 ms/op
                 executeQuery·p0.9999: 2327.839 ms/op
                 executeQuery·p1.00:   2327.839 ms/op

Iteration   4: 2163.841 ±(99.9%) 317.744 ms/op
                 executeQuery·p0.00:   2038.432 ms/op
                 executeQuery·p0.50:   2181.038 ms/op
                 executeQuery·p0.90:   2264.924 ms/op
                 executeQuery·p0.95:   2264.924 ms/op
                 executeQuery·p0.99:   2264.924 ms/op
                 executeQuery·p0.999:  2264.924 ms/op
                 executeQuery·p0.9999: 2264.924 ms/op
                 executeQuery·p1.00:   2264.924 ms/op

Iteration   5: 2188.168 ±(99.9%) 324.104 ms/op
                 executeQuery·p0.00:   2053.112 ms/op
                 executeQuery·p0.50:   2202.010 ms/op
                 executeQuery·p0.90:   2285.896 ms/op
                 executeQuery·p0.95:   2285.896 ms/op
                 executeQuery·p0.99:   2285.896 ms/op
                 executeQuery·p0.999:  2285.896 ms/op
                 executeQuery·p0.9999: 2285.896 ms/op
                 executeQuery·p1.00:   2285.896 ms/op


# Run progress: 36.56% complete, ETA 06:23:10
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2448.425 ±(99.9%) 1563.944 ms/op
# Warmup Iteration   2: 2278.346 ±(99.9%) 270.592 ms/op
# Warmup Iteration   3: 2263.246 ±(99.9%) 405.156 ms/op
# Warmup Iteration   4: 2235.564 ±(99.9%) 395.447 ms/op
# Warmup Iteration   5: 2197.815 ±(99.9%) 362.809 ms/op
Iteration   1: 2261.569 ±(99.9%) 381.069 ms/op
                 executeQuery·p0.00:   2151.678 ms/op
                 executeQuery·p0.50:   2256.536 ms/op
                 executeQuery·p0.90:   2386.559 ms/op
                 executeQuery·p0.95:   2386.559 ms/op
                 executeQuery·p0.99:   2386.559 ms/op
                 executeQuery·p0.999:  2386.559 ms/op
                 executeQuery·p0.9999: 2386.559 ms/op
                 executeQuery·p1.00:   2386.559 ms/op

Iteration   2: 2166.777 ±(99.9%) 279.238 ms/op
                 executeQuery·p0.00:   2082.472 ms/op
                 executeQuery·p0.50:   2143.289 ms/op
                 executeQuery·p0.90:   2264.924 ms/op
                 executeQuery·p0.95:   2264.924 ms/op
                 executeQuery·p0.99:   2264.924 ms/op
                 executeQuery·p0.999:  2264.924 ms/op
                 executeQuery·p0.9999: 2264.924 ms/op
                 executeQuery·p1.00:   2264.924 ms/op

Iteration   3: 2290.090 ±(99.9%) 350.327 ms/op
                 executeQuery·p0.00:   2172.649 ms/op
                 executeQuery·p0.50:   2294.284 ms/op
                 executeQuery·p0.90:   2407.530 ms/op
                 executeQuery·p0.95:   2407.530 ms/op
                 executeQuery·p0.99:   2407.530 ms/op
                 executeQuery·p0.999:  2407.530 ms/op
                 executeQuery·p0.9999: 2407.530 ms/op
                 executeQuery·p1.00:   2407.530 ms/op

Iteration   4: 2287.993 ±(99.9%) 417.974 ms/op
                 executeQuery·p0.00:   2128.609 ms/op
                 executeQuery·p0.50:   2306.867 ms/op
                 executeQuery·p0.90:   2420.113 ms/op
                 executeQuery·p0.95:   2420.113 ms/op
                 executeQuery·p0.99:   2420.113 ms/op
                 executeQuery·p0.999:  2420.113 ms/op
                 executeQuery·p0.9999: 2420.113 ms/op
                 executeQuery·p1.00:   2420.113 ms/op

Iteration   5: 2211.656 ±(99.9%) 364.718 ms/op
                 executeQuery·p0.00:   2092.958 ms/op
                 executeQuery·p0.50:   2243.953 ms/op
                 executeQuery·p0.90:   2315.256 ms/op
                 executeQuery·p0.95:   2315.256 ms/op
                 executeQuery·p0.99:   2315.256 ms/op
                 executeQuery·p0.999:  2315.256 ms/op
                 executeQuery·p0.9999: 2315.256 ms/op
                 executeQuery·p1.00:   2315.256 ms/op


# Run progress: 36.88% complete, ETA 06:21:18
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2368.104 ±(99.9%) 888.336 ms/op
# Warmup Iteration   2: 2238.919 ±(99.9%) 265.483 ms/op
# Warmup Iteration   3: 2191.943 ±(99.9%) 491.552 ms/op
# Warmup Iteration   4: 2169.713 ±(99.9%) 498.899 ms/op
# Warmup Iteration   5: 2199.912 ±(99.9%) 553.208 ms/op
Iteration   1: 2202.848 ±(99.9%) 333.622 ms/op
                 executeQuery·p0.00:   2105.541 ms/op
                 executeQuery·p0.50:   2193.621 ms/op
                 executeQuery·p0.90:   2340.422 ms/op
                 executeQuery·p0.95:   2340.422 ms/op
                 executeQuery·p0.99:   2340.422 ms/op
                 executeQuery·p0.999:  2340.422 ms/op
                 executeQuery·p0.9999: 2340.422 ms/op
                 executeQuery·p1.00:   2340.422 ms/op

Iteration   2: 2211.237 ±(99.9%) 470.096 ms/op
                 executeQuery·p0.00:   2055.209 ms/op
                 executeQuery·p0.50:   2210.398 ms/op
                 executeQuery·p0.90:   2361.393 ms/op
                 executeQuery·p0.95:   2361.393 ms/op
                 executeQuery·p0.99:   2361.393 ms/op
                 executeQuery·p0.999:  2361.393 ms/op
                 executeQuery·p0.9999: 2361.393 ms/op
                 executeQuery·p1.00:   2361.393 ms/op

Iteration   3: 2242.275 ±(99.9%) 369.461 ms/op
                 executeQuery·p0.00:   2130.706 ms/op
                 executeQuery·p0.50:   2235.564 ms/op
                 executeQuery·p0.90:   2373.976 ms/op
                 executeQuery·p0.95:   2373.976 ms/op
                 executeQuery·p0.99:   2373.976 ms/op
                 executeQuery·p0.999:  2373.976 ms/op
                 executeQuery·p0.9999: 2373.976 ms/op
                 executeQuery·p1.00:   2373.976 ms/op

Iteration   4: 2267.441 ±(99.9%) 547.533 ms/op
                 executeQuery·p0.00:   2109.735 ms/op
                 executeQuery·p0.50:   2239.758 ms/op
                 executeQuery·p0.90:   2499.805 ms/op
                 executeQuery·p0.95:   2499.805 ms/op
                 executeQuery·p0.99:   2499.805 ms/op
                 executeQuery·p0.999:  2499.805 ms/op
                 executeQuery·p0.9999: 2499.805 ms/op
                 executeQuery·p1.00:   2499.805 ms/op

Iteration   5: 2290.929 ±(99.9%) 252.645 ms/op
                 executeQuery·p0.00:   2222.981 ms/op
                 executeQuery·p0.50:   2277.507 ms/op
                 executeQuery·p0.90:   2361.393 ms/op
                 executeQuery·p0.95:   2361.393 ms/op
                 executeQuery·p0.99:   2361.393 ms/op
                 executeQuery·p0.999:  2361.393 ms/op
                 executeQuery·p0.9999: 2361.393 ms/op
                 executeQuery·p1.00:   2361.393 ms/op


# Run progress: 37.19% complete, ETA 06:19:29
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2372.298 ±(99.9%) 984.177 ms/op
# Warmup Iteration   2: 2162.583 ±(99.9%) 328.342 ms/op
# Warmup Iteration   3: 2204.946 ±(99.9%) 599.855 ms/op
# Warmup Iteration   4: 2175.585 ±(99.9%) 344.583 ms/op
# Warmup Iteration   5: 2207.043 ±(99.9%) 470.338 ms/op
Iteration   1: 2205.784 ±(99.9%) 602.318 ms/op
                 executeQuery·p0.00:   2082.472 ms/op
                 executeQuery·p0.50:   2122.318 ms/op
                 executeQuery·p0.90:   2466.251 ms/op
                 executeQuery·p0.95:   2466.251 ms/op
                 executeQuery·p0.99:   2466.251 ms/op
                 executeQuery·p0.999:  2466.251 ms/op
                 executeQuery·p0.9999: 2466.251 ms/op
                 executeQuery·p1.00:   2466.251 ms/op

Iteration   2: 2228.434 ±(99.9%) 403.268 ms/op
                 executeQuery·p0.00:   2141.192 ms/op
                 executeQuery·p0.50:   2168.455 ms/op
                 executeQuery·p0.90:   2348.810 ms/op
                 executeQuery·p0.95:   2348.810 ms/op
                 executeQuery·p0.99:   2348.810 ms/op
                 executeQuery·p0.999:  2348.810 ms/op
                 executeQuery·p0.9999: 2348.810 ms/op
                 executeQuery·p1.00:   2348.810 ms/op

Iteration   3: 2228.853 ±(99.9%) 710.689 ms/op
                 executeQuery·p0.00:   2021.655 ms/op
                 executeQuery·p0.50:   2172.649 ms/op
                 executeQuery·p0.90:   2478.834 ms/op
                 executeQuery·p0.95:   2478.834 ms/op
                 executeQuery·p0.99:   2478.834 ms/op
                 executeQuery·p0.999:  2478.834 ms/op
                 executeQuery·p0.9999: 2478.834 ms/op
                 executeQuery·p1.00:   2478.834 ms/op

Iteration   4: 2200.332 ±(99.9%) 470.678 ms/op
                 executeQuery·p0.00:   2071.986 ms/op
                 executeQuery·p0.50:   2185.232 ms/op
                 executeQuery·p0.90:   2365.587 ms/op
                 executeQuery·p0.95:   2365.587 ms/op
                 executeQuery·p0.99:   2365.587 ms/op
                 executeQuery·p0.999:  2365.587 ms/op
                 executeQuery·p0.9999: 2365.587 ms/op
                 executeQuery·p1.00:   2365.587 ms/op

Iteration   5: 2276.249 ±(99.9%) 475.338 ms/op
                 executeQuery·p0.00:   2141.192 ms/op
                 executeQuery·p0.50:   2277.507 ms/op
                 executeQuery·p0.90:   2470.445 ms/op
                 executeQuery·p0.95:   2470.445 ms/op
                 executeQuery·p0.99:   2470.445 ms/op
                 executeQuery·p0.999:  2470.445 ms/op
                 executeQuery·p0.9999: 2470.445 ms/op
                 executeQuery·p1.00:   2470.445 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 125
  mean =   2229.927 ±(99.9%) 30.974 ms/op

  Histogram, ms/op:
    [2000.000, 2050.000) = 2 
    [2050.000, 2100.000) = 8 
    [2100.000, 2150.000) = 22 
    [2150.000, 2200.000) = 21 
    [2200.000, 2250.000) = 21 
    [2250.000, 2300.000) = 21 
    [2300.000, 2350.000) = 14 
    [2350.000, 2400.000) = 9 
    [2400.000, 2450.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   2021.655 ms/op
     p(50.0000) =   2227.175 ms/op
     p(90.0000) =   2363.071 ms/op
     p(95.0000) =   2416.339 ms/op
     p(99.0000) =   2494.353 ms/op
     p(99.9000) =   2499.805 ms/op
     p(99.9900) =   2499.805 ms/op
     p(99.9990) =   2499.805 ms/op
     p(99.9999) =   2499.805 ms/op
    p(100.0000) =   2499.805 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2)

# Run progress: 37.50% complete, ETA 06:17:38
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2785.018 ±(99.9%) 1229.757 ms/op
# Warmup Iteration   2: 2559.574 ±(99.9%) 663.299 ms/op
# Warmup Iteration   3: 2548.040 ±(99.9%) 875.603 ms/op
# Warmup Iteration   4: 2593.128 ±(99.9%) 1025.975 ms/op
# Warmup Iteration   5: 2546.991 ±(99.9%) 556.943 ms/op
Iteration   1: 2558.525 ±(99.9%) 993.386 ms/op
                 executeQuery·p0.00:   2403.336 ms/op
                 executeQuery·p0.50:   2569.011 ms/op
                 executeQuery·p0.90:   2692.743 ms/op
                 executeQuery·p0.95:   2692.743 ms/op
                 executeQuery·p0.99:   2692.743 ms/op
                 executeQuery·p0.999:  2692.743 ms/op
                 executeQuery·p0.9999: 2692.743 ms/op
                 executeQuery·p1.00:   2692.743 ms/op

Iteration   2: 2607.809 ±(99.9%) 636.164 ms/op
                 executeQuery·p0.00:   2478.834 ms/op
                 executeQuery·p0.50:   2617.246 ms/op
                 executeQuery·p0.90:   2717.909 ms/op
                 executeQuery·p0.95:   2717.909 ms/op
                 executeQuery·p0.99:   2717.909 ms/op
                 executeQuery·p0.999:  2717.909 ms/op
                 executeQuery·p0.9999: 2717.909 ms/op
                 executeQuery·p1.00:   2717.909 ms/op

Iteration   3: 2530.214 ±(99.9%) 370.553 ms/op
                 executeQuery·p0.00:   2449.474 ms/op
                 executeQuery·p0.50:   2550.137 ms/op
                 executeQuery·p0.90:   2571.108 ms/op
                 executeQuery·p0.95:   2571.108 ms/op
                 executeQuery·p0.99:   2571.108 ms/op
                 executeQuery·p0.999:  2571.108 ms/op
                 executeQuery·p0.9999: 2571.108 ms/op
                 executeQuery·p1.00:   2571.108 ms/op

Iteration   4: 2575.303 ±(99.9%) 905.437 ms/op
                 executeQuery·p0.00:   2436.891 ms/op
                 executeQuery·p0.50:   2566.914 ms/op
                 executeQuery·p0.90:   2730.492 ms/op
                 executeQuery·p0.95:   2730.492 ms/op
                 executeQuery·p0.99:   2730.492 ms/op
                 executeQuery·p0.999:  2730.492 ms/op
                 executeQuery·p0.9999: 2730.492 ms/op
                 executeQuery·p1.00:   2730.492 ms/op

Iteration   5: 2689.597 ±(99.9%) 1537.733 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2610.954 ms/op
                 executeQuery·p0.90:   3032.482 ms/op
                 executeQuery·p0.95:   3032.482 ms/op
                 executeQuery·p0.99:   3032.482 ms/op
                 executeQuery·p0.999:  3032.482 ms/op
                 executeQuery·p0.9999: 3032.482 ms/op
                 executeQuery·p1.00:   3032.482 ms/op


# Run progress: 37.81% complete, ETA 06:15:35
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2830.107 ±(99.9%) 1176.509 ms/op
# Warmup Iteration   2: 2605.711 ±(99.9%) 1378.001 ms/op
# Warmup Iteration   3: 2565.865 ±(99.9%) 614.231 ms/op
# Warmup Iteration   4: 2598.371 ±(99.9%) 649.166 ms/op
# Warmup Iteration   5: 2575.303 ±(99.9%) 759.222 ms/op
Iteration   1: 2567.963 ±(99.9%) 686.162 ms/op
                 executeQuery·p0.00:   2428.502 ms/op
                 executeQuery·p0.50:   2579.497 ms/op
                 executeQuery·p0.90:   2684.355 ms/op
                 executeQuery·p0.95:   2684.355 ms/op
                 executeQuery·p0.99:   2684.355 ms/op
                 executeQuery·p0.999:  2684.355 ms/op
                 executeQuery·p0.9999: 2684.355 ms/op
                 executeQuery·p1.00:   2684.355 ms/op

Iteration   2: 2669.674 ±(99.9%) 769.951 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2703.229 ms/op
                 executeQuery·p0.90:   2768.241 ms/op
                 executeQuery·p0.95:   2768.241 ms/op
                 executeQuery·p0.99:   2768.241 ms/op
                 executeQuery·p0.999:  2768.241 ms/op
                 executeQuery·p0.9999: 2768.241 ms/op
                 executeQuery·p1.00:   2768.241 ms/op

Iteration   3: 2637.169 ±(99.9%) 685.091 ms/op
                 executeQuery·p0.00:   2524.971 ms/op
                 executeQuery·p0.50:   2638.217 ms/op
                 executeQuery·p0.90:   2747.269 ms/op
                 executeQuery·p0.95:   2747.269 ms/op
                 executeQuery·p0.99:   2747.269 ms/op
                 executeQuery·p0.999:  2747.269 ms/op
                 executeQuery·p0.9999: 2747.269 ms/op
                 executeQuery·p1.00:   2747.269 ms/op

Iteration   4: 2610.954 ±(99.9%) 831.715 ms/op
                 executeQuery·p0.00:   2491.417 ms/op
                 executeQuery·p0.50:   2589.983 ms/op
                 executeQuery·p0.90:   2772.435 ms/op
                 executeQuery·p0.95:   2772.435 ms/op
                 executeQuery·p0.99:   2772.435 ms/op
                 executeQuery·p0.999:  2772.435 ms/op
                 executeQuery·p0.9999: 2772.435 ms/op
                 executeQuery·p1.00:   2772.435 ms/op

Iteration   5: 2599.420 ±(99.9%) 526.663 ms/op
                 executeQuery·p0.00:   2516.582 ms/op
                 executeQuery·p0.50:   2589.983 ms/op
                 executeQuery·p0.90:   2701.132 ms/op
                 executeQuery·p0.95:   2701.132 ms/op
                 executeQuery·p0.99:   2701.132 ms/op
                 executeQuery·p0.999:  2701.132 ms/op
                 executeQuery·p0.9999: 2701.132 ms/op
                 executeQuery·p1.00:   2701.132 ms/op


# Run progress: 38.13% complete, ETA 06:13:34
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2858.418 ±(99.9%) 1077.004 ms/op
# Warmup Iteration   2: 2478.834 ±(99.9%) 305.373 ms/op
# Warmup Iteration   3: 2520.777 ±(99.9%) 695.951 ms/op
# Warmup Iteration   4: 2537.554 ±(99.9%) 472.048 ms/op
# Warmup Iteration   5: 2573.206 ±(99.9%) 1050.765 ms/op
Iteration   1: 2456.814 ±(99.9%) 123.957 ms/op
                 executeQuery·p0.00:   2436.891 ms/op
                 executeQuery·p0.50:   2455.765 ms/op
                 executeQuery·p0.90:   2478.834 ms/op
                 executeQuery·p0.95:   2478.834 ms/op
                 executeQuery·p0.99:   2478.834 ms/op
                 executeQuery·p0.999:  2478.834 ms/op
                 executeQuery·p0.9999: 2478.834 ms/op
                 executeQuery·p1.00:   2478.834 ms/op

Iteration   2: 2608.857 ±(99.9%) 704.345 ms/op
                 executeQuery·p0.00:   2512.388 ms/op
                 executeQuery·p0.50:   2583.691 ms/op
                 executeQuery·p0.90:   2755.658 ms/op
                 executeQuery·p0.95:   2755.658 ms/op
                 executeQuery·p0.99:   2755.658 ms/op
                 executeQuery·p0.999:  2755.658 ms/op
                 executeQuery·p0.9999: 2755.658 ms/op
                 executeQuery·p1.00:   2755.658 ms/op

Iteration   3: 2671.772 ±(99.9%) 933.401 ms/op
                 executeQuery·p0.00:   2495.611 ms/op
                 executeQuery·p0.50:   2673.869 ms/op
                 executeQuery·p0.90:   2843.738 ms/op
                 executeQuery·p0.95:   2843.738 ms/op
                 executeQuery·p0.99:   2843.738 ms/op
                 executeQuery·p0.999:  2843.738 ms/op
                 executeQuery·p0.9999: 2843.738 ms/op
                 executeQuery·p1.00:   2843.738 ms/op

Iteration   4: 2636.120 ±(99.9%) 417.840 ms/op
                 executeQuery·p0.00:   2566.914 ms/op
                 executeQuery·p0.50:   2627.731 ms/op
                 executeQuery·p0.90:   2722.103 ms/op
                 executeQuery·p0.95:   2722.103 ms/op
                 executeQuery·p0.99:   2722.103 ms/op
                 executeQuery·p0.999:  2722.103 ms/op
                 executeQuery·p0.9999: 2722.103 ms/op
                 executeQuery·p1.00:   2722.103 ms/op

Iteration   5: 2585.788 ±(99.9%) 858.944 ms/op
                 executeQuery·p0.00:   2462.056 ms/op
                 executeQuery·p0.50:   2554.331 ms/op
                 executeQuery·p0.90:   2772.435 ms/op
                 executeQuery·p0.95:   2772.435 ms/op
                 executeQuery·p0.99:   2772.435 ms/op
                 executeQuery·p0.999:  2772.435 ms/op
                 executeQuery·p0.9999: 2772.435 ms/op
                 executeQuery·p1.00:   2772.435 ms/op


# Run progress: 38.44% complete, ETA 06:11:35
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2789.212 ±(99.9%) 1688.125 ms/op
# Warmup Iteration   2: 2493.514 ±(99.9%) 416.078 ms/op
# Warmup Iteration   3: 2649.752 ±(99.9%) 1208.947 ms/op
# Warmup Iteration   4: 2582.643 ±(99.9%) 697.840 ms/op
# Warmup Iteration   5: 2519.728 ±(99.9%) 519.170 ms/op
Iteration   1: 2563.768 ±(99.9%) 754.490 ms/op
                 executeQuery·p0.00:   2428.502 ms/op
                 executeQuery·p0.50:   2560.623 ms/op
                 executeQuery·p0.90:   2705.326 ms/op
                 executeQuery·p0.95:   2705.326 ms/op
                 executeQuery·p0.99:   2705.326 ms/op
                 executeQuery·p0.999:  2705.326 ms/op
                 executeQuery·p0.9999: 2705.326 ms/op
                 executeQuery·p1.00:   2705.326 ms/op

Iteration   2: 2530.214 ±(99.9%) 402.847 ms/op
                 executeQuery·p0.00:   2441.085 ms/op
                 executeQuery·p0.50:   2552.234 ms/op
                 executeQuery·p0.90:   2575.303 ms/op
                 executeQuery·p0.95:   2575.303 ms/op
                 executeQuery·p0.99:   2575.303 ms/op
                 executeQuery·p0.999:  2575.303 ms/op
                 executeQuery·p0.9999: 2575.303 ms/op
                 executeQuery·p1.00:   2575.303 ms/op

Iteration   3: 2570.060 ±(99.9%) 441.144 ms/op
                 executeQuery·p0.00:   2508.194 ms/op
                 executeQuery·p0.50:   2552.234 ms/op
                 executeQuery·p0.90:   2667.577 ms/op
                 executeQuery·p0.95:   2667.577 ms/op
                 executeQuery·p0.99:   2667.577 ms/op
                 executeQuery·p0.999:  2667.577 ms/op
                 executeQuery·p0.9999: 2667.577 ms/op
                 executeQuery·p1.00:   2667.577 ms/op

Iteration   4: 2638.217 ±(99.9%) 840.064 ms/op
                 executeQuery·p0.00:   2529.165 ms/op
                 executeQuery·p0.50:   2598.371 ms/op
                 executeQuery·p0.90:   2826.961 ms/op
                 executeQuery·p0.95:   2826.961 ms/op
                 executeQuery·p0.99:   2826.961 ms/op
                 executeQuery·p0.999:  2826.961 ms/op
                 executeQuery·p0.9999: 2826.961 ms/op
                 executeQuery·p1.00:   2826.961 ms/op

Iteration   5: 2623.537 ±(99.9%) 425.966 ms/op
                 executeQuery·p0.00:   2545.943 ms/op
                 executeQuery·p0.50:   2631.926 ms/op
                 executeQuery·p0.90:   2684.355 ms/op
                 executeQuery·p0.95:   2684.355 ms/op
                 executeQuery·p0.99:   2684.355 ms/op
                 executeQuery·p0.999:  2684.355 ms/op
                 executeQuery·p0.9999: 2684.355 ms/op
                 executeQuery·p1.00:   2684.355 ms/op


# Run progress: 38.75% complete, ETA 06:09:33
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2811.232 ±(99.9%) 1351.083 ms/op
# Warmup Iteration   2: 2587.886 ±(99.9%) 336.346 ms/op
# Warmup Iteration   3: 2696.937 ±(99.9%) 1056.923 ms/op
# Warmup Iteration   4: 2612.003 ±(99.9%) 790.933 ms/op
# Warmup Iteration   5: 2535.457 ±(99.9%) 471.789 ms/op
Iteration   1: 2600.468 ±(99.9%) 1006.609 ms/op
                 executeQuery·p0.00:   2453.668 ms/op
                 executeQuery·p0.50:   2589.983 ms/op
                 executeQuery·p0.90:   2768.241 ms/op
                 executeQuery·p0.95:   2768.241 ms/op
                 executeQuery·p0.99:   2768.241 ms/op
                 executeQuery·p0.999:  2768.241 ms/op
                 executeQuery·p0.9999: 2768.241 ms/op
                 executeQuery·p1.00:   2768.241 ms/op

Iteration   2: 2737.832 ±(99.9%) 461.756 ms/op
                 executeQuery·p0.00:   2692.743 ms/op
                 executeQuery·p0.50:   2707.423 ms/op
                 executeQuery·p0.90:   2843.738 ms/op
                 executeQuery·p0.95:   2843.738 ms/op
                 executeQuery·p0.99:   2843.738 ms/op
                 executeQuery·p0.999:  2843.738 ms/op
                 executeQuery·p0.9999: 2843.738 ms/op
                 executeQuery·p1.00:   2843.738 ms/op

Iteration   3: 2657.092 ±(99.9%) 930.643 ms/op
                 executeQuery·p0.00:   2462.056 ms/op
                 executeQuery·p0.50:   2682.257 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   4: 2615.149 ±(99.9%) 465.519 ms/op
                 executeQuery·p0.00:   2537.554 ms/op
                 executeQuery·p0.50:   2613.051 ms/op
                 executeQuery·p0.90:   2696.937 ms/op
                 executeQuery·p0.95:   2696.937 ms/op
                 executeQuery·p0.99:   2696.937 ms/op
                 executeQuery·p0.999:  2696.937 ms/op
                 executeQuery·p0.9999: 2696.937 ms/op
                 executeQuery·p1.00:   2696.937 ms/op

Iteration   5: 2692.743 ±(99.9%) 275.516 ms/op
                 executeQuery·p0.00:   2634.023 ms/op
                 executeQuery·p0.50:   2705.326 ms/op
                 executeQuery·p0.90:   2726.298 ms/op
                 executeQuery·p0.95:   2726.298 ms/op
                 executeQuery·p0.99:   2726.298 ms/op
                 executeQuery·p0.999:  2726.298 ms/op
                 executeQuery·p0.9999: 2726.298 ms/op
                 executeQuery·p1.00:   2726.298 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 100
  mean =   2609.402 ±(99.9%) 39.405 ms/op

  Histogram, ms/op:
    [2400.000, 2450.000) = 9 
    [2450.000, 2500.000) = 10 
    [2500.000, 2550.000) = 15 
    [2550.000, 2600.000) = 17 
    [2600.000, 2650.000) = 9 
    [2650.000, 2700.000) = 17 
    [2700.000, 2750.000) = 13 
    [2750.000, 2800.000) = 5 
    [2800.000, 2850.000) = 4 
    [2850.000, 2900.000) = 0 
    [2900.000, 2950.000) = 0 
    [2950.000, 3000.000) = 0 
    [3000.000, 3050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2403.336 ms/op
     p(50.0000) =   2596.274 ms/op
     p(90.0000) =   2754.819 ms/op
     p(95.0000) =   2800.327 ms/op
     p(99.0000) =   3030.594 ms/op
     p(99.9000) =   3032.482 ms/op
     p(99.9900) =   3032.482 ms/op
     p(99.9990) =   3032.482 ms/op
     p(99.9999) =   3032.482 ms/op
    p(100.0000) =   3032.482 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4)

# Run progress: 39.06% complete, ETA 06:07:34
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2841.641 ±(99.9%) 1517.557 ms/op
# Warmup Iteration   2: 2616.197 ±(99.9%) 843.083 ms/op
# Warmup Iteration   3: 2542.797 ±(99.9%) 472.761 ms/op
# Warmup Iteration   4: 2581.594 ±(99.9%) 477.976 ms/op
# Warmup Iteration   5: 2701.132 ±(99.9%) 812.202 ms/op
Iteration   1: 2671.772 ±(99.9%) 1009.766 ms/op
                 executeQuery·p0.00:   2491.417 ms/op
                 executeQuery·p0.50:   2688.549 ms/op
                 executeQuery·p0.90:   2818.572 ms/op
                 executeQuery·p0.95:   2818.572 ms/op
                 executeQuery·p0.99:   2818.572 ms/op
                 executeQuery·p0.999:  2818.572 ms/op
                 executeQuery·p0.9999: 2818.572 ms/op
                 executeQuery·p1.00:   2818.572 ms/op

Iteration   2: 2733.638 ±(99.9%) 1018.789 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2694.840 ms/op
                 executeQuery·p0.90:   2956.984 ms/op
                 executeQuery·p0.95:   2956.984 ms/op
                 executeQuery·p0.99:   2956.984 ms/op
                 executeQuery·p0.999:  2956.984 ms/op
                 executeQuery·p0.9999: 2956.984 ms/op
                 executeQuery·p1.00:   2956.984 ms/op

Iteration   3: 2733.638 ±(99.9%) 672.101 ms/op
                 executeQuery·p0.00:   2642.412 ms/op
                 executeQuery·p0.50:   2715.812 ms/op
                 executeQuery·p0.90:   2860.515 ms/op
                 executeQuery·p0.95:   2860.515 ms/op
                 executeQuery·p0.99:   2860.515 ms/op
                 executeQuery·p0.999:  2860.515 ms/op
                 executeQuery·p0.9999: 2860.515 ms/op
                 executeQuery·p1.00:   2860.515 ms/op

Iteration   4: 2661.286 ±(99.9%) 595.662 ms/op
                 executeQuery·p0.00:   2596.274 ms/op
                 executeQuery·p0.50:   2625.634 ms/op
                 executeQuery·p0.90:   2797.601 ms/op
                 executeQuery·p0.95:   2797.601 ms/op
                 executeQuery·p0.99:   2797.601 ms/op
                 executeQuery·p0.999:  2797.601 ms/op
                 executeQuery·p0.9999: 2797.601 ms/op
                 executeQuery·p1.00:   2797.601 ms/op

Iteration   5: 2672.820 ±(99.9%) 435.558 ms/op
                 executeQuery·p0.00:   2583.691 ms/op
                 executeQuery·p0.50:   2686.452 ms/op
                 executeQuery·p0.90:   2734.686 ms/op
                 executeQuery·p0.95:   2734.686 ms/op
                 executeQuery·p0.99:   2734.686 ms/op
                 executeQuery·p0.999:  2734.686 ms/op
                 executeQuery·p0.9999: 2734.686 ms/op
                 executeQuery·p1.00:   2734.686 ms/op


# Run progress: 39.38% complete, ETA 06:05:36
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2835.350 ±(99.9%) 1639.410 ms/op
# Warmup Iteration   2: 2588.934 ±(99.9%) 315.594 ms/op
# Warmup Iteration   3: 2646.606 ±(99.9%) 841.229 ms/op
# Warmup Iteration   4: 2612.003 ±(99.9%) 883.641 ms/op
# Warmup Iteration   5: 2663.383 ±(99.9%) 459.962 ms/op
Iteration   1: 2614.100 ±(99.9%) 492.547 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2638.217 ms/op
                 executeQuery·p0.90:   2675.966 ms/op
                 executeQuery·p0.95:   2675.966 ms/op
                 executeQuery·p0.99:   2675.966 ms/op
                 executeQuery·p0.999:  2675.966 ms/op
                 executeQuery·p0.9999: 2675.966 ms/op
                 executeQuery·p1.00:   2675.966 ms/op

Iteration   2: 2627.731 ±(99.9%) 848.620 ms/op
                 executeQuery·p0.00:   2512.388 ms/op
                 executeQuery·p0.50:   2598.371 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   3: 2617.246 ±(99.9%) 547.912 ms/op
                 executeQuery·p0.00:   2533.360 ms/op
                 executeQuery·p0.50:   2608.857 ms/op
                 executeQuery·p0.90:   2717.909 ms/op
                 executeQuery·p0.95:   2717.909 ms/op
                 executeQuery·p0.99:   2717.909 ms/op
                 executeQuery·p0.999:  2717.909 ms/op
                 executeQuery·p0.9999: 2717.909 ms/op
                 executeQuery·p1.00:   2717.909 ms/op

Iteration   4: 2677.015 ±(99.9%) 392.378 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2684.355 ms/op
                 executeQuery·p0.90:   2738.881 ms/op
                 executeQuery·p0.95:   2738.881 ms/op
                 executeQuery·p0.99:   2738.881 ms/op
                 executeQuery·p0.999:  2738.881 ms/op
                 executeQuery·p0.9999: 2738.881 ms/op
                 executeQuery·p1.00:   2738.881 ms/op

Iteration   5: 2662.334 ±(99.9%) 754.490 ms/op
                 executeQuery·p0.00:   2495.611 ms/op
                 executeQuery·p0.50:   2692.743 ms/op
                 executeQuery·p0.90:   2768.241 ms/op
                 executeQuery·p0.95:   2768.241 ms/op
                 executeQuery·p0.99:   2768.241 ms/op
                 executeQuery·p0.999:  2768.241 ms/op
                 executeQuery·p0.9999: 2768.241 ms/op
                 executeQuery·p1.00:   2768.241 ms/op


# Run progress: 39.69% complete, ETA 06:03:38
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2794.455 ±(99.9%) 1762.964 ms/op
# Warmup Iteration   2: 2662.334 ±(99.9%) 894.109 ms/op
# Warmup Iteration   3: 2630.877 ±(99.9%) 562.630 ms/op
# Warmup Iteration   4: 2681.209 ±(99.9%) 455.885 ms/op
# Warmup Iteration   5: 2683.306 ±(99.9%) 689.367 ms/op
Iteration   1: 2634.023 ±(99.9%) 782.725 ms/op
                 executeQuery·p0.00:   2508.194 ms/op
                 executeQuery·p0.50:   2636.120 ms/op
                 executeQuery·p0.90:   2755.658 ms/op
                 executeQuery·p0.95:   2755.658 ms/op
                 executeQuery·p0.99:   2755.658 ms/op
                 executeQuery·p0.999:  2755.658 ms/op
                 executeQuery·p0.9999: 2755.658 ms/op
                 executeQuery·p1.00:   2755.658 ms/op

Iteration   2: 2672.820 ±(99.9%) 702.038 ms/op
                 executeQuery·p0.00:   2537.554 ms/op
                 executeQuery·p0.50:   2678.063 ms/op
                 executeQuery·p0.90:   2797.601 ms/op
                 executeQuery·p0.95:   2797.601 ms/op
                 executeQuery·p0.99:   2797.601 ms/op
                 executeQuery·p0.999:  2797.601 ms/op
                 executeQuery·p0.9999: 2797.601 ms/op
                 executeQuery·p1.00:   2797.601 ms/op

Iteration   3: 2674.917 ±(99.9%) 401.630 ms/op
                 executeQuery·p0.00:   2592.080 ms/op
                 executeQuery·p0.50:   2688.549 ms/op
                 executeQuery·p0.90:   2730.492 ms/op
                 executeQuery·p0.95:   2730.492 ms/op
                 executeQuery·p0.99:   2730.492 ms/op
                 executeQuery·p0.999:  2730.492 ms/op
                 executeQuery·p0.9999: 2730.492 ms/op
                 executeQuery·p1.00:   2730.492 ms/op

Iteration   4: 2654.994 ±(99.9%) 541.619 ms/op
                 executeQuery·p0.00:   2562.720 ms/op
                 executeQuery·p0.50:   2648.703 ms/op
                 executeQuery·p0.90:   2759.852 ms/op
                 executeQuery·p0.95:   2759.852 ms/op
                 executeQuery·p0.99:   2759.852 ms/op
                 executeQuery·p0.999:  2759.852 ms/op
                 executeQuery·p0.9999: 2759.852 ms/op
                 executeQuery·p1.00:   2759.852 ms/op

Iteration   5: 2618.294 ±(99.9%) 640.766 ms/op
                 executeQuery·p0.00:   2474.639 ms/op
                 executeQuery·p0.50:   2657.092 ms/op
                 executeQuery·p0.90:   2684.355 ms/op
                 executeQuery·p0.95:   2684.355 ms/op
                 executeQuery·p0.99:   2684.355 ms/op
                 executeQuery·p0.999:  2684.355 ms/op
                 executeQuery·p0.9999: 2684.355 ms/op
                 executeQuery·p1.00:   2684.355 ms/op


# Run progress: 40.00% complete, ETA 06:01:40
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2862.612 ±(99.9%) 1694.134 ms/op
# Warmup Iteration   2: 2596.274 ±(99.9%) 945.392 ms/op
# Warmup Iteration   3: 2649.752 ±(99.9%) 390.501 ms/op
# Warmup Iteration   4: 2650.800 ±(99.9%) 847.898 ms/op
# Warmup Iteration   5: 2623.537 ±(99.9%) 707.640 ms/op
Iteration   1: 2637.169 ±(99.9%) 556.063 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2629.829 ms/op
                 executeQuery·p0.90:   2747.269 ms/op
                 executeQuery·p0.95:   2747.269 ms/op
                 executeQuery·p0.99:   2747.269 ms/op
                 executeQuery·p0.999:  2747.269 ms/op
                 executeQuery·p0.9999: 2747.269 ms/op
                 executeQuery·p1.00:   2747.269 ms/op

Iteration   2: 2678.063 ±(99.9%) 534.107 ms/op
                 executeQuery·p0.00:   2566.914 ms/op
                 executeQuery·p0.50:   2690.646 ms/op
                 executeQuery·p0.90:   2764.046 ms/op
                 executeQuery·p0.95:   2764.046 ms/op
                 executeQuery·p0.99:   2764.046 ms/op
                 executeQuery·p0.999:  2764.046 ms/op
                 executeQuery·p0.9999: 2764.046 ms/op
                 executeQuery·p1.00:   2764.046 ms/op

Iteration   3: 2697.986 ±(99.9%) 1037.603 ms/op
                 executeQuery·p0.00:   2491.417 ms/op
                 executeQuery·p0.50:   2713.715 ms/op
                 executeQuery·p0.90:   2873.098 ms/op
                 executeQuery·p0.95:   2873.098 ms/op
                 executeQuery·p0.99:   2873.098 ms/op
                 executeQuery·p0.999:  2873.098 ms/op
                 executeQuery·p0.9999: 2873.098 ms/op
                 executeQuery·p1.00:   2873.098 ms/op

Iteration   4: 2694.840 ±(99.9%) 462.881 ms/op
                 executeQuery·p0.00:   2629.829 ms/op
                 executeQuery·p0.50:   2688.549 ms/op
                 executeQuery·p0.90:   2772.435 ms/op
                 executeQuery·p0.95:   2772.435 ms/op
                 executeQuery·p0.99:   2772.435 ms/op
                 executeQuery·p0.999:  2772.435 ms/op
                 executeQuery·p0.9999: 2772.435 ms/op
                 executeQuery·p1.00:   2772.435 ms/op

Iteration   5: 2649.752 ±(99.9%) 302.926 ms/op
                 executeQuery·p0.00:   2596.274 ms/op
                 executeQuery·p0.50:   2652.897 ms/op
                 executeQuery·p0.90:   2696.937 ms/op
                 executeQuery·p0.95:   2696.937 ms/op
                 executeQuery·p0.99:   2696.937 ms/op
                 executeQuery·p0.999:  2696.937 ms/op
                 executeQuery·p0.9999: 2696.937 ms/op
                 executeQuery·p1.00:   2696.937 ms/op


# Run progress: 40.31% complete, ETA 05:59:43
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2909.798 ±(99.9%) 1393.375 ms/op
# Warmup Iteration   2: 2617.246 ±(99.9%) 808.274 ms/op
# Warmup Iteration   3: 2646.606 ±(99.9%) 633.319 ms/op
# Warmup Iteration   4: 2637.169 ±(99.9%) 421.850 ms/op
# Warmup Iteration   5: 2625.634 ±(99.9%) 620.429 ms/op
Iteration   1: 2634.023 ±(99.9%) 702.256 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2644.509 ms/op
                 executeQuery·p0.90:   2743.075 ms/op
                 executeQuery·p0.95:   2743.075 ms/op
                 executeQuery·p0.99:   2743.075 ms/op
                 executeQuery·p0.999:  2743.075 ms/op
                 executeQuery·p0.9999: 2743.075 ms/op
                 executeQuery·p1.00:   2743.075 ms/op

Iteration   2: 2662.334 ±(99.9%) 432.172 ms/op
                 executeQuery·p0.00:   2579.497 ms/op
                 executeQuery·p0.50:   2667.577 ms/op
                 executeQuery·p0.90:   2734.686 ms/op
                 executeQuery·p0.95:   2734.686 ms/op
                 executeQuery·p0.99:   2734.686 ms/op
                 executeQuery·p0.999:  2734.686 ms/op
                 executeQuery·p0.9999: 2734.686 ms/op
                 executeQuery·p1.00:   2734.686 ms/op

Iteration   3: 2673.869 ±(99.9%) 396.799 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2692.743 ms/op
                 executeQuery·p0.90:   2722.103 ms/op
                 executeQuery·p0.95:   2722.103 ms/op
                 executeQuery·p0.99:   2722.103 ms/op
                 executeQuery·p0.999:  2722.103 ms/op
                 executeQuery·p0.9999: 2722.103 ms/op
                 executeQuery·p1.00:   2722.103 ms/op

Iteration   4: 2690.646 ±(99.9%) 829.652 ms/op
                 executeQuery·p0.00:   2508.194 ms/op
                 executeQuery·p0.50:   2726.298 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   5: 2608.857 ±(99.9%) 337.799 ms/op
                 executeQuery·p0.00:   2550.137 ms/op
                 executeQuery·p0.50:   2615.149 ms/op
                 executeQuery·p0.90:   2654.994 ms/op
                 executeQuery·p0.95:   2654.994 ms/op
                 executeQuery·p0.99:   2654.994 ms/op
                 executeQuery·p0.999:  2654.994 ms/op
                 executeQuery·p0.9999: 2654.994 ms/op
                 executeQuery·p1.00:   2654.994 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 100
  mean =   2662.167 ±(99.9%) 31.834 ms/op

  Histogram, ms/op:
    [2400.000, 2450.000) = 0 
    [2450.000, 2500.000) = 4 
    [2500.000, 2550.000) = 9 
    [2550.000, 2600.000) = 15 
    [2600.000, 2650.000) = 12 
    [2650.000, 2700.000) = 24 
    [2700.000, 2750.000) = 19 
    [2750.000, 2800.000) = 11 
    [2800.000, 2850.000) = 3 
    [2850.000, 2900.000) = 2 
    [2900.000, 2950.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2474.639 ms/op
     p(50.0000) =   2661.286 ms/op
     p(90.0000) =   2776.210 ms/op
     p(95.0000) =   2801.795 ms/op
     p(99.0000) =   2956.145 ms/op
     p(99.9000) =   2956.984 ms/op
     p(99.9900) =   2956.984 ms/op
     p(99.9990) =   2956.984 ms/op
     p(99.9999) =   2956.984 ms/op
    p(100.0000) =   2956.984 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6)

# Run progress: 40.63% complete, ETA 05:57:46
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2940.207 ±(99.9%) 1667.694 ms/op
# Warmup Iteration   2: 2681.209 ±(99.9%) 629.975 ms/op
# Warmup Iteration   3: 2700.083 ±(99.9%) 500.438 ms/op
# Warmup Iteration   4: 2649.752 ±(99.9%) 651.003 ms/op
# Warmup Iteration   5: 2756.706 ±(99.9%) 458.563 ms/op
Iteration   1: 2706.375 ±(99.9%) 632.303 ms/op
                 executeQuery·p0.00:   2613.051 ms/op
                 executeQuery·p0.50:   2686.452 ms/op
                 executeQuery·p0.90:   2839.544 ms/op
                 executeQuery·p0.95:   2839.544 ms/op
                 executeQuery·p0.99:   2839.544 ms/op
                 executeQuery·p0.999:  2839.544 ms/op
                 executeQuery·p0.9999: 2839.544 ms/op
                 executeQuery·p1.00:   2839.544 ms/op

Iteration   2: 2755.658 ±(99.9%) 344.972 ms/op
                 executeQuery·p0.00:   2705.326 ms/op
                 executeQuery·p0.50:   2757.755 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   3: 2737.832 ±(99.9%) 737.753 ms/op
                 executeQuery·p0.00:   2608.857 ms/op
                 executeQuery·p0.50:   2740.978 ms/op
                 executeQuery·p0.90:   2860.515 ms/op
                 executeQuery·p0.95:   2860.515 ms/op
                 executeQuery·p0.99:   2860.515 ms/op
                 executeQuery·p0.999:  2860.515 ms/op
                 executeQuery·p0.9999: 2860.515 ms/op
                 executeQuery·p1.00:   2860.515 ms/op

Iteration   4: 2714.763 ±(99.9%) 476.886 ms/op
                 executeQuery·p0.00:   2663.383 ms/op
                 executeQuery·p0.50:   2686.452 ms/op
                 executeQuery·p0.90:   2822.767 ms/op
                 executeQuery·p0.95:   2822.767 ms/op
                 executeQuery·p0.99:   2822.767 ms/op
                 executeQuery·p0.999:  2822.767 ms/op
                 executeQuery·p0.9999: 2822.767 ms/op
                 executeQuery·p1.00:   2822.767 ms/op

Iteration   5: 2750.415 ±(99.9%) 295.561 ms/op
                 executeQuery·p0.00:   2684.355 ms/op
                 executeQuery·p0.50:   2764.046 ms/op
                 executeQuery·p0.90:   2789.212 ms/op
                 executeQuery·p0.95:   2789.212 ms/op
                 executeQuery·p0.99:   2789.212 ms/op
                 executeQuery·p0.999:  2789.212 ms/op
                 executeQuery·p0.9999: 2789.212 ms/op
                 executeQuery·p1.00:   2789.212 ms/op


# Run progress: 40.94% complete, ETA 05:55:53
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2862.612 ±(99.9%) 1537.275 ms/op
# Warmup Iteration   2: 2690.646 ±(99.9%) 647.656 ms/op
# Warmup Iteration   3: 2722.103 ±(99.9%) 498.293 ms/op
# Warmup Iteration   4: 2748.318 ±(99.9%) 611.434 ms/op
# Warmup Iteration   5: 2612.003 ±(99.9%) 135.292 ms/op
Iteration   1: 2733.638 ±(99.9%) 354.339 ms/op
                 executeQuery·p0.00:   2680.160 ms/op
                 executeQuery·p0.50:   2734.686 ms/op
                 executeQuery·p0.90:   2785.018 ms/op
                 executeQuery·p0.95:   2785.018 ms/op
                 executeQuery·p0.99:   2785.018 ms/op
                 executeQuery·p0.999:  2785.018 ms/op
                 executeQuery·p0.9999: 2785.018 ms/op
                 executeQuery·p1.00:   2785.018 ms/op

Iteration   2: 2738.881 ±(99.9%) 579.196 ms/op
                 executeQuery·p0.00:   2638.217 ms/op
                 executeQuery·p0.50:   2749.366 ms/op
                 executeQuery·p0.90:   2818.572 ms/op
                 executeQuery·p0.95:   2818.572 ms/op
                 executeQuery·p0.99:   2818.572 ms/op
                 executeQuery·p0.999:  2818.572 ms/op
                 executeQuery·p0.9999: 2818.572 ms/op
                 executeQuery·p1.00:   2818.572 ms/op

Iteration   3: 2683.306 ±(99.9%) 613.832 ms/op
                 executeQuery·p0.00:   2554.331 ms/op
                 executeQuery·p0.50:   2699.035 ms/op
                 executeQuery·p0.90:   2780.824 ms/op
                 executeQuery·p0.95:   2780.824 ms/op
                 executeQuery·p0.99:   2780.824 ms/op
                 executeQuery·p0.999:  2780.824 ms/op
                 executeQuery·p0.9999: 2780.824 ms/op
                 executeQuery·p1.00:   2780.824 ms/op

Iteration   4: 2690.646 ±(99.9%) 817.461 ms/op
                 executeQuery·p0.00:   2558.525 ms/op
                 executeQuery·p0.50:   2686.452 ms/op
                 executeQuery·p0.90:   2831.155 ms/op
                 executeQuery·p0.95:   2831.155 ms/op
                 executeQuery·p0.99:   2831.155 ms/op
                 executeQuery·p0.999:  2831.155 ms/op
                 executeQuery·p0.9999: 2831.155 ms/op
                 executeQuery·p1.00:   2831.155 ms/op

Iteration   5: 2684.355 ±(99.9%) 688.167 ms/op
                 executeQuery·p0.00:   2571.108 ms/op
                 executeQuery·p0.50:   2682.257 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op


# Run progress: 41.25% complete, ETA 05:53:59
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2945.450 ±(99.9%) 1203.262 ms/op
# Warmup Iteration   2: 2764.046 ±(99.9%) 947.462 ms/op
# Warmup Iteration   3: 2801.795 ±(99.9%) 876.022 ms/op
# Warmup Iteration   4: 2808.087 ±(99.9%) 507.302 ms/op
# Warmup Iteration   5: 2771.386 ±(99.9%) 632.690 ms/op
Iteration   1: 2744.123 ±(99.9%) 521.993 ms/op
                 executeQuery·p0.00:   2680.160 ms/op
                 executeQuery·p0.50:   2717.909 ms/op
                 executeQuery·p0.90:   2860.515 ms/op
                 executeQuery·p0.95:   2860.515 ms/op
                 executeQuery·p0.99:   2860.515 ms/op
                 executeQuery·p0.999:  2860.515 ms/op
                 executeQuery·p0.9999: 2860.515 ms/op
                 executeQuery·p1.00:   2860.515 ms/op

Iteration   2: 2825.912 ±(99.9%) 328.520 ms/op
                 executeQuery·p0.00:   2772.435 ms/op
                 executeQuery·p0.50:   2826.961 ms/op
                 executeQuery·p0.90:   2877.293 ms/op
                 executeQuery·p0.95:   2877.293 ms/op
                 executeQuery·p0.99:   2877.293 ms/op
                 executeQuery·p0.999:  2877.293 ms/op
                 executeQuery·p0.9999: 2877.293 ms/op
                 executeQuery·p1.00:   2877.293 ms/op

Iteration   3: 2694.840 ±(99.9%) 646.899 ms/op
                 executeQuery·p0.00:   2613.051 ms/op
                 executeQuery·p0.50:   2671.772 ms/op
                 executeQuery·p0.90:   2822.767 ms/op
                 executeQuery·p0.95:   2822.767 ms/op
                 executeQuery·p0.99:   2822.767 ms/op
                 executeQuery·p0.999:  2822.767 ms/op
                 executeQuery·p0.9999: 2822.767 ms/op
                 executeQuery·p1.00:   2822.767 ms/op

Iteration   4: 2759.852 ±(99.9%) 351.998 ms/op
                 executeQuery·p0.00:   2684.355 ms/op
                 executeQuery·p0.50:   2776.629 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   5: 2776.629 ±(99.9%) 331.949 ms/op
                 executeQuery·p0.00:   2713.715 ms/op
                 executeQuery·p0.50:   2776.629 ms/op
                 executeQuery·p0.90:   2839.544 ms/op
                 executeQuery·p0.95:   2839.544 ms/op
                 executeQuery·p0.99:   2839.544 ms/op
                 executeQuery·p0.999:  2839.544 ms/op
                 executeQuery·p0.9999: 2839.544 ms/op
                 executeQuery·p1.00:   2839.544 ms/op


# Run progress: 41.56% complete, ETA 05:52:08
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2814.378 ±(99.9%) 1843.440 ms/op
# Warmup Iteration   2: 2710.569 ±(99.9%) 1002.557 ms/op
# Warmup Iteration   3: 2654.994 ±(99.9%) 472.048 ms/op
# Warmup Iteration   4: 2693.792 ±(99.9%) 1418.800 ms/op
# Warmup Iteration   5: 2703.229 ±(99.9%) 883.121 ms/op
Iteration   1: 2716.860 ±(99.9%) 705.864 ms/op
                 executeQuery·p0.00:   2562.720 ms/op
                 executeQuery·p0.50:   2749.366 ms/op
                 executeQuery·p0.90:   2805.989 ms/op
                 executeQuery·p0.95:   2805.989 ms/op
                 executeQuery·p0.99:   2805.989 ms/op
                 executeQuery·p0.999:  2805.989 ms/op
                 executeQuery·p0.9999: 2805.989 ms/op
                 executeQuery·p1.00:   2805.989 ms/op

Iteration   2: 2711.618 ±(99.9%) 693.660 ms/op
                 executeQuery·p0.00:   2625.634 ms/op
                 executeQuery·p0.50:   2678.063 ms/op
                 executeQuery·p0.90:   2864.710 ms/op
                 executeQuery·p0.95:   2864.710 ms/op
                 executeQuery·p0.99:   2864.710 ms/op
                 executeQuery·p0.999:  2864.710 ms/op
                 executeQuery·p0.9999: 2864.710 ms/op
                 executeQuery·p1.00:   2864.710 ms/op

Iteration   3: 2653.946 ±(99.9%) 281.124 ms/op
                 executeQuery·p0.00:   2604.663 ms/op
                 executeQuery·p0.50:   2650.800 ms/op
                 executeQuery·p0.90:   2709.520 ms/op
                 executeQuery·p0.95:   2709.520 ms/op
                 executeQuery·p0.99:   2709.520 ms/op
                 executeQuery·p0.999:  2709.520 ms/op
                 executeQuery·p0.9999: 2709.520 ms/op
                 executeQuery·p1.00:   2709.520 ms/op

Iteration   4: 2752.512 ±(99.9%) 517.753 ms/op
                 executeQuery·p0.00:   2663.383 ms/op
                 executeQuery·p0.50:   2745.172 ms/op
                 executeQuery·p0.90:   2856.321 ms/op
                 executeQuery·p0.95:   2856.321 ms/op
                 executeQuery·p0.99:   2856.321 ms/op
                 executeQuery·p0.999:  2856.321 ms/op
                 executeQuery·p0.9999: 2856.321 ms/op
                 executeQuery·p1.00:   2856.321 ms/op

Iteration   5: 2749.366 ±(99.9%) 500.988 ms/op
                 executeQuery·p0.00:   2638.217 ms/op
                 executeQuery·p0.50:   2770.338 ms/op
                 executeQuery·p0.90:   2818.572 ms/op
                 executeQuery·p0.95:   2818.572 ms/op
                 executeQuery·p0.99:   2818.572 ms/op
                 executeQuery·p0.999:  2818.572 ms/op
                 executeQuery·p0.9999: 2818.572 ms/op
                 executeQuery·p1.00:   2818.572 ms/op


# Run progress: 41.88% complete, ETA 05:50:14
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2876.244 ±(99.9%) 1446.997 ms/op
# Warmup Iteration   2: 2657.092 ±(99.9%) 302.218 ms/op
# Warmup Iteration   3: 2661.286 ±(99.9%) 1128.519 ms/op
# Warmup Iteration   4: 2705.326 ±(99.9%) 834.801 ms/op
# Warmup Iteration   5: 2705.326 ±(99.9%) 377.509 ms/op
Iteration   1: 2678.063 ±(99.9%) 685.136 ms/op
                 executeQuery·p0.00:   2575.303 ms/op
                 executeQuery·p0.50:   2673.869 ms/op
                 executeQuery·p0.90:   2789.212 ms/op
                 executeQuery·p0.95:   2789.212 ms/op
                 executeQuery·p0.99:   2789.212 ms/op
                 executeQuery·p0.999:  2789.212 ms/op
                 executeQuery·p0.9999: 2789.212 ms/op
                 executeQuery·p1.00:   2789.212 ms/op

Iteration   2: 2852.127 ±(99.9%) 1856.939 ms/op
                 executeQuery·p0.00:   2566.914 ms/op
                 executeQuery·p0.50:   2824.864 ms/op
                 executeQuery·p0.90:   3191.865 ms/op
                 executeQuery·p0.95:   3191.865 ms/op
                 executeQuery·p0.99:   3191.865 ms/op
                 executeQuery·p0.999:  3191.865 ms/op
                 executeQuery·p0.9999: 3191.865 ms/op
                 executeQuery·p1.00:   3191.865 ms/op

Iteration   3: 2644.509 ±(99.9%) 363.295 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2634.023 ms/op
                 executeQuery·p0.90:   2722.103 ms/op
                 executeQuery·p0.95:   2722.103 ms/op
                 executeQuery·p0.99:   2722.103 ms/op
                 executeQuery·p0.999:  2722.103 ms/op
                 executeQuery·p0.9999: 2722.103 ms/op
                 executeQuery·p1.00:   2722.103 ms/op

Iteration   4: 2722.103 ±(99.9%) 428.545 ms/op
                 executeQuery·p0.00:   2650.800 ms/op
                 executeQuery·p0.50:   2717.909 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   5: 2692.743 ±(99.9%) 534.336 ms/op
                 executeQuery·p0.00:   2629.829 ms/op
                 executeQuery·p0.50:   2663.383 ms/op
                 executeQuery·p0.90:   2814.378 ms/op
                 executeQuery·p0.95:   2814.378 ms/op
                 executeQuery·p0.99:   2814.378 ms/op
                 executeQuery·p0.999:  2814.378 ms/op
                 executeQuery·p0.9999: 2814.378 ms/op
                 executeQuery·p1.00:   2814.378 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 100
  mean =   2726.843 ±(99.9%) 33.618 ms/op

  Histogram, ms/op:
    [2500.000, 2550.000) = 0 
    [2550.000, 2600.000) = 7 
    [2600.000, 2650.000) = 15 
    [2650.000, 2700.000) = 19 
    [2700.000, 2750.000) = 17 
    [2750.000, 2800.000) = 18 
    [2800.000, 2850.000) = 16 
    [2850.000, 2900.000) = 6 
    [2900.000, 2950.000) = 0 
    [2950.000, 3000.000) = 1 
    [3000.000, 3050.000) = 0 
    [3050.000, 3100.000) = 0 
    [3100.000, 3150.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2554.331 ms/op
     p(50.0000) =   2715.812 ms/op
     p(90.0000) =   2838.705 ms/op
     p(95.0000) =   2860.515 ms/op
     p(99.0000) =   3189.768 ms/op
     p(99.9000) =   3191.865 ms/op
     p(99.9900) =   3191.865 ms/op
     p(99.9990) =   3191.865 ms/op
     p(99.9999) =   3191.865 ms/op
    p(100.0000) =   3191.865 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 42.19% complete, ETA 05:48:20
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2994.733 ±(99.9%) 1407.472 ms/op
# Warmup Iteration   2: 2772.435 ±(99.9%) 633.319 ms/op
# Warmup Iteration   3: 2780.824 ±(99.9%) 589.255 ms/op
# Warmup Iteration   4: 2725.249 ±(99.9%) 910.662 ms/op
# Warmup Iteration   5: 2757.755 ±(99.9%) 391.206 ms/op
Iteration   1: 2740.978 ±(99.9%) 1309.319 ms/op
                 executeQuery·p0.00:   2554.331 ms/op
                 executeQuery·p0.50:   2690.646 ms/op
                 executeQuery·p0.90:   3028.287 ms/op
                 executeQuery·p0.95:   3028.287 ms/op
                 executeQuery·p0.99:   3028.287 ms/op
                 executeQuery·p0.999:  3028.287 ms/op
                 executeQuery·p0.9999: 3028.287 ms/op
                 executeQuery·p1.00:   3028.287 ms/op

Iteration   2: 2735.735 ±(99.9%) 446.661 ms/op
                 executeQuery·p0.00:   2671.772 ms/op
                 executeQuery·p0.50:   2736.783 ms/op
                 executeQuery·p0.90:   2797.601 ms/op
                 executeQuery·p0.95:   2797.601 ms/op
                 executeQuery·p0.99:   2797.601 ms/op
                 executeQuery·p0.999:  2797.601 ms/op
                 executeQuery·p0.9999: 2797.601 ms/op
                 executeQuery·p1.00:   2797.601 ms/op

Iteration   3: 2778.726 ±(99.9%) 231.573 ms/op
                 executeQuery·p0.00:   2730.492 ms/op
                 executeQuery·p0.50:   2789.212 ms/op
                 executeQuery·p0.90:   2805.989 ms/op
                 executeQuery·p0.95:   2805.989 ms/op
                 executeQuery·p0.99:   2805.989 ms/op
                 executeQuery·p0.999:  2805.989 ms/op
                 executeQuery·p0.9999: 2805.989 ms/op
                 executeQuery·p1.00:   2805.989 ms/op

Iteration   4: 2677.015 ±(99.9%) 633.464 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2646.606 ms/op
                 executeQuery·p0.90:   2814.378 ms/op
                 executeQuery·p0.95:   2814.378 ms/op
                 executeQuery·p0.99:   2814.378 ms/op
                 executeQuery·p0.999:  2814.378 ms/op
                 executeQuery·p0.9999: 2814.378 ms/op
                 executeQuery·p1.00:   2814.378 ms/op

Iteration   5: 2787.115 ±(99.9%) 500.010 ms/op
                 executeQuery·p0.00:   2671.772 ms/op
                 executeQuery·p0.50:   2820.669 ms/op
                 executeQuery·p0.90:   2835.350 ms/op
                 executeQuery·p0.95:   2835.350 ms/op
                 executeQuery·p0.99:   2835.350 ms/op
                 executeQuery·p0.999:  2835.350 ms/op
                 executeQuery·p0.9999: 2835.350 ms/op
                 executeQuery·p1.00:   2835.350 ms/op


# Run progress: 42.50% complete, ETA 05:46:28
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3009.413 ±(99.9%) 1733.285 ms/op
# Warmup Iteration   2: 2774.532 ±(99.9%) 720.669 ms/op
# Warmup Iteration   3: 2758.803 ±(99.9%) 351.563 ms/op
# Warmup Iteration   4: 2709.520 ±(99.9%) 892.636 ms/op
# Warmup Iteration   5: 2715.812 ±(99.9%) 668.859 ms/op
Iteration   1: 2775.581 ±(99.9%) 1154.873 ms/op
                 executeQuery·p0.00:   2537.554 ms/op
                 executeQuery·p0.50:   2803.892 ms/op
                 executeQuery·p0.90:   2956.984 ms/op
                 executeQuery·p0.95:   2956.984 ms/op
                 executeQuery·p0.99:   2956.984 ms/op
                 executeQuery·p0.999:  2956.984 ms/op
                 executeQuery·p0.9999: 2956.984 ms/op
                 executeQuery·p1.00:   2956.984 ms/op

Iteration   2: 2758.803 ±(99.9%) 754.490 ms/op
                 executeQuery·p0.00:   2592.080 ms/op
                 executeQuery·p0.50:   2799.698 ms/op
                 executeQuery·p0.90:   2843.738 ms/op
                 executeQuery·p0.95:   2843.738 ms/op
                 executeQuery·p0.99:   2843.738 ms/op
                 executeQuery·p0.999:  2843.738 ms/op
                 executeQuery·p0.9999: 2843.738 ms/op
                 executeQuery·p1.00:   2843.738 ms/op

Iteration   3: 2753.561 ±(99.9%) 551.698 ms/op
                 executeQuery·p0.00:   2692.743 ms/op
                 executeQuery·p0.50:   2722.103 ms/op
                 executeQuery·p0.90:   2877.293 ms/op
                 executeQuery·p0.95:   2877.293 ms/op
                 executeQuery·p0.99:   2877.293 ms/op
                 executeQuery·p0.999:  2877.293 ms/op
                 executeQuery·p0.9999: 2877.293 ms/op
                 executeQuery·p1.00:   2877.293 ms/op

Iteration   4: 2753.561 ±(99.9%) 413.718 ms/op
                 executeQuery·p0.00:   2680.160 ms/op
                 executeQuery·p0.50:   2751.463 ms/op
                 executeQuery·p0.90:   2831.155 ms/op
                 executeQuery·p0.95:   2831.155 ms/op
                 executeQuery·p0.99:   2831.155 ms/op
                 executeQuery·p0.999:  2831.155 ms/op
                 executeQuery·p0.9999: 2831.155 ms/op
                 executeQuery·p1.00:   2831.155 ms/op

Iteration   5: 2785.018 ±(99.9%) 444.256 ms/op
                 executeQuery·p0.00:   2688.549 ms/op
                 executeQuery·p0.50:   2803.892 ms/op
                 executeQuery·p0.90:   2843.738 ms/op
                 executeQuery·p0.95:   2843.738 ms/op
                 executeQuery·p0.99:   2843.738 ms/op
                 executeQuery·p0.999:  2843.738 ms/op
                 executeQuery·p0.9999: 2843.738 ms/op
                 executeQuery·p1.00:   2843.738 ms/op


# Run progress: 42.81% complete, ETA 05:44:37
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2943.353 ±(99.9%) 1959.891 ms/op
# Warmup Iteration   2: 2799.698 ±(99.9%) 863.494 ms/op
# Warmup Iteration   3: 2799.698 ±(99.9%) 461.291 ms/op
# Warmup Iteration   4: 2779.775 ±(99.9%) 485.537 ms/op
# Warmup Iteration   5: 2775.581 ±(99.9%) 1123.490 ms/op
Iteration   1: 2820.669 ±(99.9%) 1164.402 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2829.058 ms/op
                 executeQuery·p0.90:   3024.093 ms/op
                 executeQuery·p0.95:   3024.093 ms/op
                 executeQuery·p0.99:   3024.093 ms/op
                 executeQuery·p0.999:  3024.093 ms/op
                 executeQuery·p0.9999: 3024.093 ms/op
                 executeQuery·p1.00:   3024.093 ms/op

Iteration   2: 2803.892 ±(99.9%) 252.805 ms/op
                 executeQuery·p0.00:   2751.463 ms/op
                 executeQuery·p0.50:   2812.281 ms/op
                 executeQuery·p0.90:   2839.544 ms/op
                 executeQuery·p0.95:   2839.544 ms/op
                 executeQuery·p0.99:   2839.544 ms/op
                 executeQuery·p0.999:  2839.544 ms/op
                 executeQuery·p0.9999: 2839.544 ms/op
                 executeQuery·p1.00:   2839.544 ms/op

Iteration   3: 2836.398 ±(99.9%) 519.170 ms/op
                 executeQuery·p0.00:   2726.298 ms/op
                 executeQuery·p0.50:   2860.515 ms/op
                 executeQuery·p0.90:   2898.264 ms/op
                 executeQuery·p0.95:   2898.264 ms/op
                 executeQuery·p0.99:   2898.264 ms/op
                 executeQuery·p0.999:  2898.264 ms/op
                 executeQuery·p0.9999: 2898.264 ms/op
                 executeQuery·p1.00:   2898.264 ms/op

Iteration   4: 2762.998 ±(99.9%) 631.528 ms/op
                 executeQuery·p0.00:   2671.772 ms/op
                 executeQuery·p0.50:   2740.978 ms/op
                 executeQuery·p0.90:   2898.264 ms/op
                 executeQuery·p0.95:   2898.264 ms/op
                 executeQuery·p0.99:   2898.264 ms/op
                 executeQuery·p0.999:  2898.264 ms/op
                 executeQuery·p0.9999: 2898.264 ms/op
                 executeQuery·p1.00:   2898.264 ms/op

Iteration   5: 2789.212 ±(99.9%) 420.469 ms/op
                 executeQuery·p0.00:   2701.132 ms/op
                 executeQuery·p0.50:   2803.892 ms/op
                 executeQuery·p0.90:   2847.932 ms/op
                 executeQuery·p0.95:   2847.932 ms/op
                 executeQuery·p0.99:   2847.932 ms/op
                 executeQuery·p0.999:  2847.932 ms/op
                 executeQuery·p0.9999: 2847.932 ms/op
                 executeQuery·p1.00:   2847.932 ms/op


# Run progress: 43.13% complete, ETA 05:42:48
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3036.676 ±(99.9%) 1966.580 ms/op
# Warmup Iteration   2: 2714.763 ±(99.9%) 357.777 ms/op
# Warmup Iteration   3: 2734.686 ±(99.9%) 423.949 ms/op
# Warmup Iteration   4: 2720.006 ±(99.9%) 335.252 ms/op
# Warmup Iteration   5: 2783.969 ±(99.9%) 350.866 ms/op
Iteration   1: 2811.232 ±(99.9%) 454.810 ms/op
                 executeQuery·p0.00:   2709.520 ms/op
                 executeQuery·p0.50:   2837.447 ms/op
                 executeQuery·p0.90:   2860.515 ms/op
                 executeQuery·p0.95:   2860.515 ms/op
                 executeQuery·p0.99:   2860.515 ms/op
                 executeQuery·p0.999:  2860.515 ms/op
                 executeQuery·p0.9999: 2860.515 ms/op
                 executeQuery·p1.00:   2860.515 ms/op

Iteration   2: 2788.164 ±(99.9%) 501.904 ms/op
                 executeQuery·p0.00:   2722.103 ms/op
                 executeQuery·p0.50:   2774.532 ms/op
                 executeQuery·p0.90:   2881.487 ms/op
                 executeQuery·p0.95:   2881.487 ms/op
                 executeQuery·p0.99:   2881.487 ms/op
                 executeQuery·p0.999:  2881.487 ms/op
                 executeQuery·p0.9999: 2881.487 ms/op
                 executeQuery·p1.00:   2881.487 ms/op

Iteration   3: 2702.180 ±(99.9%) 200.853 ms/op
                 executeQuery·p0.00:   2667.577 ms/op
                 executeQuery·p0.50:   2699.035 ms/op
                 executeQuery·p0.90:   2743.075 ms/op
                 executeQuery·p0.95:   2743.075 ms/op
                 executeQuery·p0.99:   2743.075 ms/op
                 executeQuery·p0.999:  2743.075 ms/op
                 executeQuery·p0.9999: 2743.075 ms/op
                 executeQuery·p1.00:   2743.075 ms/op

Iteration   4: 2785.018 ±(99.9%) 387.748 ms/op
                 executeQuery·p0.00:   2717.909 ms/op
                 executeQuery·p0.50:   2780.824 ms/op
                 executeQuery·p0.90:   2860.515 ms/op
                 executeQuery·p0.95:   2860.515 ms/op
                 executeQuery·p0.99:   2860.515 ms/op
                 executeQuery·p0.999:  2860.515 ms/op
                 executeQuery·p0.9999: 2860.515 ms/op
                 executeQuery·p1.00:   2860.515 ms/op

Iteration   5: 2779.775 ±(99.9%) 306.142 ms/op
                 executeQuery·p0.00:   2734.686 ms/op
                 executeQuery·p0.50:   2770.338 ms/op
                 executeQuery·p0.90:   2843.738 ms/op
                 executeQuery·p0.95:   2843.738 ms/op
                 executeQuery·p0.99:   2843.738 ms/op
                 executeQuery·p0.999:  2843.738 ms/op
                 executeQuery·p0.9999: 2843.738 ms/op
                 executeQuery·p1.00:   2843.738 ms/op


# Run progress: 43.44% complete, ETA 05:40:57
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2966.422 ±(99.9%) 1878.359 ms/op
# Warmup Iteration   2: 2688.549 ±(99.9%) 316.853 ms/op
# Warmup Iteration   3: 2771.386 ±(99.9%) 1401.086 ms/op
# Warmup Iteration   4: 2691.695 ±(99.9%) 569.121 ms/op
# Warmup Iteration   5: 2726.298 ±(99.9%) 770.745 ms/op
Iteration   1: 2825.912 ±(99.9%) 740.734 ms/op
                 executeQuery·p0.00:   2684.355 ms/op
                 executeQuery·p0.50:   2833.252 ms/op
                 executeQuery·p0.90:   2952.790 ms/op
                 executeQuery·p0.95:   2952.790 ms/op
                 executeQuery·p0.99:   2952.790 ms/op
                 executeQuery·p0.999:  2952.790 ms/op
                 executeQuery·p0.9999: 2952.790 ms/op
                 executeQuery·p1.00:   2952.790 ms/op

Iteration   2: 2755.658 ±(99.9%) 1038.694 ms/op
                 executeQuery·p0.00:   2625.634 ms/op
                 executeQuery·p0.50:   2707.423 ms/op
                 executeQuery·p0.90:   2982.150 ms/op
                 executeQuery·p0.95:   2982.150 ms/op
                 executeQuery·p0.99:   2982.150 ms/op
                 executeQuery·p0.999:  2982.150 ms/op
                 executeQuery·p0.9999: 2982.150 ms/op
                 executeQuery·p1.00:   2982.150 ms/op

Iteration   3: 2707.423 ±(99.9%) 844.860 ms/op
                 executeQuery·p0.00:   2558.525 ms/op
                 executeQuery·p0.50:   2696.937 ms/op
                 executeQuery·p0.90:   2877.293 ms/op
                 executeQuery·p0.95:   2877.293 ms/op
                 executeQuery·p0.99:   2877.293 ms/op
                 executeQuery·p0.999:  2877.293 ms/op
                 executeQuery·p0.9999: 2877.293 ms/op
                 executeQuery·p1.00:   2877.293 ms/op

Iteration   4: 2740.978 ±(99.9%) 719.989 ms/op
                 executeQuery·p0.00:   2608.857 ms/op
                 executeQuery·p0.50:   2736.783 ms/op
                 executeQuery·p0.90:   2881.487 ms/op
                 executeQuery·p0.95:   2881.487 ms/op
                 executeQuery·p0.99:   2881.487 ms/op
                 executeQuery·p0.999:  2881.487 ms/op
                 executeQuery·p0.9999: 2881.487 ms/op
                 executeQuery·p1.00:   2881.487 ms/op

Iteration   5: 2745.172 ±(99.9%) 662.606 ms/op
                 executeQuery·p0.00:   2659.189 ms/op
                 executeQuery·p0.50:   2713.715 ms/op
                 executeQuery·p0.90:   2894.070 ms/op
                 executeQuery·p0.95:   2894.070 ms/op
                 executeQuery·p0.99:   2894.070 ms/op
                 executeQuery·p0.999:  2894.070 ms/op
                 executeQuery·p0.9999: 2894.070 ms/op
                 executeQuery·p1.00:   2894.070 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 100
  mean =   2768.031 ±(99.9%) 33.580 ms/op

  Histogram, ms/op:
    [2500.000, 2550.000) = 1 
    [2550.000, 2600.000) = 3 
    [2600.000, 2650.000) = 5 
    [2650.000, 2700.000) = 15 
    [2700.000, 2750.000) = 20 
    [2750.000, 2800.000) = 18 
    [2800.000, 2850.000) = 19 
    [2850.000, 2900.000) = 14 
    [2900.000, 2950.000) = 0 
    [2950.000, 3000.000) = 3 
    [3000.000, 3050.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   2537.554 ms/op
     p(50.0000) =   2764.046 ms/op
     p(90.0000) =   2889.037 ms/op
     p(95.0000) =   2950.064 ms/op
     p(99.0000) =   3028.246 ms/op
     p(99.9000) =   3028.287 ms/op
     p(99.9900) =   3028.287 ms/op
     p(99.9990) =   3028.287 ms/op
     p(99.9999) =   3028.287 ms/op
    p(100.0000) =   3028.287 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2)

# Run progress: 43.75% complete, ETA 05:39:05
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3379.211 ±(99.9%) 3464.859 ms/op
# Warmup Iteration   2: 3070.231 ±(99.9%) 488.366 ms/op
# Warmup Iteration   3: 3066.036 ±(99.9%) 943.837 ms/op
# Warmup Iteration   4: 2999.976 ±(99.9%) 686.519 ms/op
# Warmup Iteration   5: 3094.348 ±(99.9%) 1495.431 ms/op
Iteration   1: 3004.170 ±(99.9%) 369.891 ms/op
                 executeQuery·p0.00:   2940.207 ms/op
                 executeQuery·p0.50:   2998.927 ms/op
                 executeQuery·p0.90:   3078.619 ms/op
                 executeQuery·p0.95:   3078.619 ms/op
                 executeQuery·p0.99:   3078.619 ms/op
                 executeQuery·p0.999:  3078.619 ms/op
                 executeQuery·p0.9999: 3078.619 ms/op
                 executeQuery·p1.00:   3078.619 ms/op

Iteration   2: 3041.919 ±(99.9%) 932.450 ms/op
                 executeQuery·p0.00:   2936.013 ms/op
                 executeQuery·p0.50:   2988.442 ms/op
                 executeQuery·p0.90:   3254.780 ms/op
                 executeQuery·p0.95:   3254.780 ms/op
                 executeQuery·p0.99:   3254.780 ms/op
                 executeQuery·p0.999:  3254.780 ms/op
                 executeQuery·p0.9999: 3254.780 ms/op
                 executeQuery·p1.00:   3254.780 ms/op

Iteration   3: 3152.019 ±(99.9%) 1011.825 ms/op
                 executeQuery·p0.00:   2973.762 ms/op
                 executeQuery·p0.50:   3139.437 ms/op
                 executeQuery·p0.90:   3355.443 ms/op
                 executeQuery·p0.95:   3355.443 ms/op
                 executeQuery·p0.99:   3355.443 ms/op
                 executeQuery·p0.999:  3355.443 ms/op
                 executeQuery·p0.9999: 3355.443 ms/op
                 executeQuery·p1.00:   3355.443 ms/op

Iteration   4: 3055.550 ±(99.9%) 859.514 ms/op
                 executeQuery·p0.00:   2961.179 ms/op
                 executeQuery·p0.50:   3005.219 ms/op
                 executeQuery·p0.90:   3250.586 ms/op
                 executeQuery·p0.95:   3250.586 ms/op
                 executeQuery·p0.99:   3250.586 ms/op
                 executeQuery·p0.999:  3250.586 ms/op
                 executeQuery·p0.9999: 3250.586 ms/op
                 executeQuery·p1.00:   3250.586 ms/op

Iteration   5: 3016.753 ±(99.9%) 303.733 ms/op
                 executeQuery·p0.00:   2952.790 ms/op
                 executeQuery·p0.50:   3024.093 ms/op
                 executeQuery·p0.90:   3066.036 ms/op
                 executeQuery·p0.95:   3066.036 ms/op
                 executeQuery·p0.99:   3066.036 ms/op
                 executeQuery·p0.999:  3066.036 ms/op
                 executeQuery·p0.9999: 3066.036 ms/op
                 executeQuery·p1.00:   3066.036 ms/op


# Run progress: 44.06% complete, ETA 05:37:25
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3479.874 ±(99.9%) 4324.775 ms/op
# Warmup Iteration   2: 3128.951 ±(99.9%) 392.768 ms/op
# Warmup Iteration   3: 3017.802 ±(99.9%) 520.642 ms/op
# Warmup Iteration   4: 3143.631 ±(99.9%) 695.071 ms/op
# Warmup Iteration   5: 3146.777 ±(99.9%) 613.034 ms/op
Iteration   1: 3094.348 ±(99.9%) 1133.256 ms/op
                 executeQuery·p0.00:   2868.904 ms/op
                 executeQuery·p0.50:   3105.882 ms/op
                 executeQuery·p0.90:   3296.723 ms/op
                 executeQuery·p0.95:   3296.723 ms/op
                 executeQuery·p0.99:   3296.723 ms/op
                 executeQuery·p0.999:  3296.723 ms/op
                 executeQuery·p0.9999: 3296.723 ms/op
                 executeQuery·p1.00:   3296.723 ms/op

Iteration   2: 2991.587 ±(99.9%) 771.182 ms/op
                 executeQuery·p0.00:   2822.767 ms/op
                 executeQuery·p0.50:   3019.899 ms/op
                 executeQuery·p0.90:   3103.785 ms/op
                 executeQuery·p0.95:   3103.785 ms/op
                 executeQuery·p0.99:   3103.785 ms/op
                 executeQuery·p0.999:  3103.785 ms/op
                 executeQuery·p0.9999: 3103.785 ms/op
                 executeQuery·p1.00:   3103.785 ms/op

Iteration   3: 3077.571 ±(99.9%) 456.958 ms/op
                 executeQuery·p0.00:   2994.733 ms/op
                 executeQuery·p0.50:   3082.813 ms/op
                 executeQuery·p0.90:   3149.922 ms/op
                 executeQuery·p0.95:   3149.922 ms/op
                 executeQuery·p0.99:   3149.922 ms/op
                 executeQuery·p0.999:  3149.922 ms/op
                 executeQuery·p0.9999: 3149.922 ms/op
                 executeQuery·p1.00:   3149.922 ms/op

Iteration   4: 3095.396 ±(99.9%) 586.757 ms/op
                 executeQuery·p0.00:   3019.899 ms/op
                 executeQuery·p0.50:   3076.522 ms/op
                 executeQuery·p0.90:   3208.643 ms/op
                 executeQuery·p0.95:   3208.643 ms/op
                 executeQuery·p0.99:   3208.643 ms/op
                 executeQuery·p0.999:  3208.643 ms/op
                 executeQuery·p0.9999: 3208.643 ms/op
                 executeQuery·p1.00:   3208.643 ms/op

Iteration   5: 3059.745 ±(99.9%) 495.088 ms/op
                 executeQuery·p0.00:   2977.956 ms/op
                 executeQuery·p0.50:   3057.648 ms/op
                 executeQuery·p0.90:   3145.728 ms/op
                 executeQuery·p0.95:   3145.728 ms/op
                 executeQuery·p0.99:   3145.728 ms/op
                 executeQuery·p0.999:  3145.728 ms/op
                 executeQuery·p0.9999: 3145.728 ms/op
                 executeQuery·p1.00:   3145.728 ms/op


# Run progress: 44.38% complete, ETA 05:35:47
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3376.415 ±(99.9%) 3131.704 ms/op
# Warmup Iteration   2: 2986.344 ±(99.9%) 768.837 ms/op
# Warmup Iteration   3: 3132.097 ±(99.9%) 1275.955 ms/op
# Warmup Iteration   4: 3063.939 ±(99.9%) 801.123 ms/op
# Warmup Iteration   5: 3099.591 ±(99.9%) 569.819 ms/op
Iteration   1: 3084.911 ±(99.9%) 322.597 ms/op
                 executeQuery·p0.00:   3024.093 ms/op
                 executeQuery·p0.50:   3087.008 ms/op
                 executeQuery·p0.90:   3141.534 ms/op
                 executeQuery·p0.95:   3141.534 ms/op
                 executeQuery·p0.99:   3141.534 ms/op
                 executeQuery·p0.999:  3141.534 ms/op
                 executeQuery·p0.9999: 3141.534 ms/op
                 executeQuery·p1.00:   3141.534 ms/op

Iteration   2: 3087.008 ±(99.9%) 463.674 ms/op
                 executeQuery·p0.00:   3015.705 ms/op
                 executeQuery·p0.50:   3084.911 ms/op
                 executeQuery·p0.90:   3162.505 ms/op
                 executeQuery·p0.95:   3162.505 ms/op
                 executeQuery·p0.99:   3162.505 ms/op
                 executeQuery·p0.999:  3162.505 ms/op
                 executeQuery·p0.9999: 3162.505 ms/op
                 executeQuery·p1.00:   3162.505 ms/op

Iteration   3: 3131.048 ±(99.9%) 242.926 ms/op
                 executeQuery·p0.00:   3091.202 ms/op
                 executeQuery·p0.50:   3131.048 ms/op
                 executeQuery·p0.90:   3170.894 ms/op
                 executeQuery·p0.95:   3170.894 ms/op
                 executeQuery·p0.99:   3170.894 ms/op
                 executeQuery·p0.999:  3170.894 ms/op
                 executeQuery·p0.9999: 3170.894 ms/op
                 executeQuery·p1.00:   3170.894 ms/op

Iteration   4: 3061.842 ±(99.9%) 561.159 ms/op
                 executeQuery·p0.00:   2965.373 ms/op
                 executeQuery·p0.50:   3059.745 ms/op
                 executeQuery·p0.90:   3162.505 ms/op
                 executeQuery·p0.95:   3162.505 ms/op
                 executeQuery·p0.99:   3162.505 ms/op
                 executeQuery·p0.999:  3162.505 ms/op
                 executeQuery·p0.9999: 3162.505 ms/op
                 executeQuery·p1.00:   3162.505 ms/op

Iteration   5: 3093.299 ±(99.9%) 520.642 ms/op
                 executeQuery·p0.00:   3045.065 ms/op
                 executeQuery·p0.50:   3057.648 ms/op
                 executeQuery·p0.90:   3212.837 ms/op
                 executeQuery·p0.95:   3212.837 ms/op
                 executeQuery·p0.99:   3212.837 ms/op
                 executeQuery·p0.999:  3212.837 ms/op
                 executeQuery·p0.9999: 3212.837 ms/op
                 executeQuery·p1.00:   3212.837 ms/op


# Run progress: 44.69% complete, ETA 05:34:07
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3291.131 ±(99.9%) 4825.800 ms/op
# Warmup Iteration   2: 3047.162 ±(99.9%) 993.263 ms/op
# Warmup Iteration   3: 3105.882 ±(99.9%) 561.813 ms/op
# Warmup Iteration   4: 3064.988 ±(99.9%) 821.309 ms/op
# Warmup Iteration   5: 3038.773 ±(99.9%) 1066.953 ms/op
Iteration   1: 3046.113 ±(99.9%) 764.485 ms/op
                 executeQuery·p0.00:   2906.653 ms/op
                 executeQuery·p0.50:   3059.745 ms/op
                 executeQuery·p0.90:   3158.311 ms/op
                 executeQuery·p0.95:   3158.311 ms/op
                 executeQuery·p0.99:   3158.311 ms/op
                 executeQuery·p0.999:  3158.311 ms/op
                 executeQuery·p0.9999: 3158.311 ms/op
                 executeQuery·p1.00:   3158.311 ms/op

Iteration   2: 3026.190 ±(99.9%) 275.071 ms/op
                 executeQuery·p0.00:   2994.733 ms/op
                 executeQuery·p0.50:   3011.510 ms/op
                 executeQuery·p0.90:   3087.008 ms/op
                 executeQuery·p0.95:   3087.008 ms/op
                 executeQuery·p0.99:   3087.008 ms/op
                 executeQuery·p0.999:  3087.008 ms/op
                 executeQuery·p0.9999: 3087.008 ms/op
                 executeQuery·p1.00:   3087.008 ms/op

Iteration   3: 3137.339 ±(99.9%) 357.520 ms/op
                 executeQuery·p0.00:   3070.231 ms/op
                 executeQuery·p0.50:   3139.437 ms/op
                 executeQuery·p0.90:   3200.254 ms/op
                 executeQuery·p0.95:   3200.254 ms/op
                 executeQuery·p0.99:   3200.254 ms/op
                 executeQuery·p0.999:  3200.254 ms/op
                 executeQuery·p0.9999: 3200.254 ms/op
                 executeQuery·p1.00:   3200.254 ms/op

Iteration   4: 3152.019 ±(99.9%) 624.951 ms/op
                 executeQuery·p0.00:   3032.482 ms/op
                 executeQuery·p0.50:   3158.311 ms/op
                 executeQuery·p0.90:   3258.974 ms/op
                 executeQuery·p0.95:   3258.974 ms/op
                 executeQuery·p0.99:   3258.974 ms/op
                 executeQuery·p0.999:  3258.974 ms/op
                 executeQuery·p0.9999: 3258.974 ms/op
                 executeQuery·p1.00:   3258.974 ms/op

Iteration   5: 3107.979 ±(99.9%) 627.492 ms/op
                 executeQuery·p0.00:   3024.093 ms/op
                 executeQuery·p0.50:   3103.785 ms/op
                 executeQuery·p0.90:   3200.254 ms/op
                 executeQuery·p0.95:   3200.254 ms/op
                 executeQuery·p0.99:   3200.254 ms/op
                 executeQuery·p0.999:  3200.254 ms/op
                 executeQuery·p0.9999: 3200.254 ms/op
                 executeQuery·p1.00:   3200.254 ms/op


# Run progress: 45.00% complete, ETA 05:32:27
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3408.571 ±(99.9%) 4219.931 ms/op
# Warmup Iteration   2: 3157.262 ±(99.9%) 1167.316 ms/op
# Warmup Iteration   3: 3127.902 ±(99.9%) 1106.581 ms/op
# Warmup Iteration   4: 3126.854 ±(99.9%) 1776.127 ms/op
# Warmup Iteration   5: 3150.971 ±(99.9%) 389.874 ms/op
Iteration   1: 3091.202 ±(99.9%) 378.804 ms/op
                 executeQuery·p0.00:   3019.899 ms/op
                 executeQuery·p0.50:   3091.202 ms/op
                 executeQuery·p0.90:   3162.505 ms/op
                 executeQuery·p0.95:   3162.505 ms/op
                 executeQuery·p0.99:   3162.505 ms/op
                 executeQuery·p0.999:  3162.505 ms/op
                 executeQuery·p0.9999: 3162.505 ms/op
                 executeQuery·p1.00:   3162.505 ms/op

Iteration   2: 3113.222 ±(99.9%) 210.380 ms/op
                 executeQuery·p0.00:   3087.008 ms/op
                 executeQuery·p0.50:   3105.882 ms/op
                 executeQuery·p0.90:   3154.117 ms/op
                 executeQuery·p0.95:   3154.117 ms/op
                 executeQuery·p0.99:   3154.117 ms/op
                 executeQuery·p0.999:  3154.117 ms/op
                 executeQuery·p0.9999: 3154.117 ms/op
                 executeQuery·p1.00:   3154.117 ms/op

Iteration   3: 3133.145 ±(99.9%) 636.789 ms/op
                 executeQuery·p0.00:   3007.316 ms/op
                 executeQuery·p0.50:   3145.728 ms/op
                 executeQuery·p0.90:   3233.808 ms/op
                 executeQuery·p0.95:   3233.808 ms/op
                 executeQuery·p0.99:   3233.808 ms/op
                 executeQuery·p0.999:  3233.808 ms/op
                 executeQuery·p0.9999: 3233.808 ms/op
                 executeQuery·p1.00:   3233.808 ms/op

Iteration   4: 3162.505 ±(99.9%) 1428.540 ms/op
                 executeQuery·p0.00:   2894.070 ms/op
                 executeQuery·p0.50:   3160.408 ms/op
                 executeQuery·p0.90:   3435.135 ms/op
                 executeQuery·p0.95:   3435.135 ms/op
                 executeQuery·p0.99:   3435.135 ms/op
                 executeQuery·p0.999:  3435.135 ms/op
                 executeQuery·p0.9999: 3435.135 ms/op
                 executeQuery·p1.00:   3435.135 ms/op

Iteration   5: 3023.045 ±(99.9%) 181.648 ms/op
                 executeQuery·p0.00:   2994.733 ms/op
                 executeQuery·p0.50:   3017.802 ms/op
                 executeQuery·p0.90:   3061.842 ms/op
                 executeQuery·p0.95:   3061.842 ms/op
                 executeQuery·p0.99:   3061.842 ms/op
                 executeQuery·p0.999:  3061.842 ms/op
                 executeQuery·p0.9999: 3061.842 ms/op
                 executeQuery·p1.00:   3061.842 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 100
  mean =   3081.597 ±(99.9%) 34.026 ms/op

  Histogram, ms/op:
    [2800.000, 2850.000) = 1 
    [2850.000, 2900.000) = 2 
    [2900.000, 2950.000) = 3 
    [2950.000, 3000.000) = 14 
    [3000.000, 3050.000) = 24 
    [3050.000, 3100.000) = 15 
    [3100.000, 3150.000) = 18 
    [3150.000, 3200.000) = 12 
    [3200.000, 3250.000) = 5 
    [3250.000, 3300.000) = 4 
    [3300.000, 3350.000) = 0 
    [3350.000, 3400.000) = 1 
    [3400.000, 3450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2822.767 ms/op
     p(50.0000) =   3080.716 ms/op
     p(90.0000) =   3200.254 ms/op
     p(95.0000) =   3254.570 ms/op
     p(99.0000) =   3434.338 ms/op
     p(99.9000) =   3435.135 ms/op
     p(99.9900) =   3435.135 ms/op
     p(99.9990) =   3435.135 ms/op
     p(99.9999) =   3435.135 ms/op
    p(100.0000) =   3435.135 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4)

# Run progress: 45.31% complete, ETA 05:30:49
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3447.718 ±(99.9%) 3714.163 ms/op
# Warmup Iteration   2: 3085.959 ±(99.9%) 682.584 ms/op
# Warmup Iteration   3: 3187.671 ±(99.9%) 451.906 ms/op
# Warmup Iteration   4: 3120.562 ±(99.9%) 1149.693 ms/op
# Warmup Iteration   5: 3132.097 ±(99.9%) 1401.435 ms/op
Iteration   1: 3095.396 ±(99.9%) 761.155 ms/op
                 executeQuery·p0.00:   2927.624 ms/op
                 executeQuery·p0.50:   3135.242 ms/op
                 executeQuery·p0.90:   3183.477 ms/op
                 executeQuery·p0.95:   3183.477 ms/op
                 executeQuery·p0.99:   3183.477 ms/op
                 executeQuery·p0.999:  3183.477 ms/op
                 executeQuery·p0.9999: 3183.477 ms/op
                 executeQuery·p1.00:   3183.477 ms/op

Iteration   2: 3167.748 ±(99.9%) 1291.596 ms/op
                 executeQuery·p0.00:   2923.430 ms/op
                 executeQuery·p0.50:   3168.797 ms/op
                 executeQuery·p0.90:   3409.969 ms/op
                 executeQuery·p0.95:   3409.969 ms/op
                 executeQuery·p0.99:   3409.969 ms/op
                 executeQuery·p0.999:  3409.969 ms/op
                 executeQuery·p0.9999: 3409.969 ms/op
                 executeQuery·p1.00:   3409.969 ms/op

Iteration   3: 3175.088 ±(99.9%) 1211.097 ms/op
                 executeQuery·p0.00:   2940.207 ms/op
                 executeQuery·p0.50:   3181.380 ms/op
                 executeQuery·p0.90:   3397.386 ms/op
                 executeQuery·p0.95:   3397.386 ms/op
                 executeQuery·p0.99:   3397.386 ms/op
                 executeQuery·p0.999:  3397.386 ms/op
                 executeQuery·p0.9999: 3397.386 ms/op
                 executeQuery·p1.00:   3397.386 ms/op

Iteration   4: 3171.942 ±(99.9%) 514.908 ms/op
                 executeQuery·p0.00:   3087.008 ms/op
                 executeQuery·p0.50:   3170.894 ms/op
                 executeQuery·p0.90:   3258.974 ms/op
                 executeQuery·p0.95:   3258.974 ms/op
                 executeQuery·p0.99:   3258.974 ms/op
                 executeQuery·p0.999:  3258.974 ms/op
                 executeQuery·p0.9999: 3258.974 ms/op
                 executeQuery·p1.00:   3258.974 ms/op

Iteration   5: 3142.582 ±(99.9%) 782.842 ms/op
                 executeQuery·p0.00:   2961.179 ms/op
                 executeQuery·p0.50:   3198.157 ms/op
                 executeQuery·p0.90:   3212.837 ms/op
                 executeQuery·p0.95:   3212.837 ms/op
                 executeQuery·p0.99:   3212.837 ms/op
                 executeQuery·p0.999:  3212.837 ms/op
                 executeQuery·p0.9999: 3212.837 ms/op
                 executeQuery·p1.00:   3212.837 ms/op


# Run progress: 45.63% complete, ETA 05:29:11
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3454.708 ±(99.9%) 4960.422 ms/op
# Warmup Iteration   2: 3249.537 ±(99.9%) 123.957 ms/op
# Warmup Iteration   3: 3200.254 ±(99.9%) 588.007 ms/op
# Warmup Iteration   4: 3112.174 ±(99.9%) 360.250 ms/op
# Warmup Iteration   5: 3154.117 ±(99.9%) 1546.091 ms/op
Iteration   1: 3188.720 ±(99.9%) 391.128 ms/op
                 executeQuery·p0.00:   3107.979 ms/op
                 executeQuery·p0.50:   3200.254 ms/op
                 executeQuery·p0.90:   3246.391 ms/op
                 executeQuery·p0.95:   3246.391 ms/op
                 executeQuery·p0.99:   3246.391 ms/op
                 executeQuery·p0.999:  3246.391 ms/op
                 executeQuery·p0.9999: 3246.391 ms/op
                 executeQuery·p1.00:   3246.391 ms/op

Iteration   2: 3169.845 ±(99.9%) 197.162 ms/op
                 executeQuery·p0.00:   3141.534 ms/op
                 executeQuery·p0.50:   3164.602 ms/op
                 executeQuery·p0.90:   3208.643 ms/op
                 executeQuery·p0.95:   3208.643 ms/op
                 executeQuery·p0.99:   3208.643 ms/op
                 executeQuery·p0.999:  3208.643 ms/op
                 executeQuery·p0.9999: 3208.643 ms/op
                 executeQuery·p1.00:   3208.643 ms/op

Iteration   3: 3222.274 ±(99.9%) 703.780 ms/op
                 executeQuery·p0.00:   3066.036 ms/op
                 executeQuery·p0.50:   3252.683 ms/op
                 executeQuery·p0.90:   3317.694 ms/op
                 executeQuery·p0.95:   3317.694 ms/op
                 executeQuery·p0.99:   3317.694 ms/op
                 executeQuery·p0.999:  3317.694 ms/op
                 executeQuery·p0.9999: 3317.694 ms/op
                 executeQuery·p1.00:   3317.694 ms/op

Iteration   4: 3238.003 ±(99.9%) 630.995 ms/op
                 executeQuery·p0.00:   3128.951 ms/op
                 executeQuery·p0.50:   3235.906 ms/op
                 executeQuery·p0.90:   3351.249 ms/op
                 executeQuery·p0.95:   3351.249 ms/op
                 executeQuery·p0.99:   3351.249 ms/op
                 executeQuery·p0.999:  3351.249 ms/op
                 executeQuery·p0.9999: 3351.249 ms/op
                 executeQuery·p1.00:   3351.249 ms/op

Iteration   5: 3164.602 ±(99.9%) 655.174 ms/op
                 executeQuery·p0.00:   3036.676 ms/op
                 executeQuery·p0.50:   3172.991 ms/op
                 executeQuery·p0.90:   3275.751 ms/op
                 executeQuery·p0.95:   3275.751 ms/op
                 executeQuery·p0.99:   3275.751 ms/op
                 executeQuery·p0.999:  3275.751 ms/op
                 executeQuery·p0.9999: 3275.751 ms/op
                 executeQuery·p1.00:   3275.751 ms/op


# Run progress: 45.94% complete, ETA 05:27:35
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3477.078 ±(99.9%) 2631.878 ms/op
# Warmup Iteration   2: 3112.174 ±(99.9%) 919.659 ms/op
# Warmup Iteration   3: 3090.153 ±(99.9%) 431.037 ms/op
# Warmup Iteration   4: 3136.291 ±(99.9%) 485.537 ms/op
# Warmup Iteration   5: 3102.736 ±(99.9%) 629.197 ms/op
Iteration   1: 3183.477 ±(99.9%) 631.770 ms/op
                 executeQuery·p0.00:   3053.453 ms/op
                 executeQuery·p0.50:   3202.351 ms/op
                 executeQuery·p0.90:   3275.751 ms/op
                 executeQuery·p0.95:   3275.751 ms/op
                 executeQuery·p0.99:   3275.751 ms/op
                 executeQuery·p0.999:  3275.751 ms/op
                 executeQuery·p0.9999: 3275.751 ms/op
                 executeQuery·p1.00:   3275.751 ms/op

Iteration   2: 3147.825 ±(99.9%) 889.751 ms/op
                 executeQuery·p0.00:   2990.539 ms/op
                 executeQuery·p0.50:   3164.602 ms/op
                 executeQuery·p0.90:   3271.557 ms/op
                 executeQuery·p0.95:   3271.557 ms/op
                 executeQuery·p0.99:   3271.557 ms/op
                 executeQuery·p0.999:  3271.557 ms/op
                 executeQuery·p0.9999: 3271.557 ms/op
                 executeQuery·p1.00:   3271.557 ms/op

Iteration   3: 3208.643 ±(99.9%) 859.657 ms/op
                 executeQuery·p0.00:   3028.287 ms/op
                 executeQuery·p0.50:   3231.711 ms/op
                 executeQuery·p0.90:   3342.860 ms/op
                 executeQuery·p0.95:   3342.860 ms/op
                 executeQuery·p0.99:   3342.860 ms/op
                 executeQuery·p0.999:  3342.860 ms/op
                 executeQuery·p0.9999: 3342.860 ms/op
                 executeQuery·p1.00:   3342.860 ms/op

Iteration   4: 3170.894 ±(99.9%) 1496.515 ms/op
                 executeQuery·p0.00:   2994.733 ms/op
                 executeQuery·p0.50:   3097.494 ms/op
                 executeQuery·p0.90:   3493.855 ms/op
                 executeQuery·p0.95:   3493.855 ms/op
                 executeQuery·p0.99:   3493.855 ms/op
                 executeQuery·p0.999:  3493.855 ms/op
                 executeQuery·p0.9999: 3493.855 ms/op
                 executeQuery·p1.00:   3493.855 ms/op

Iteration   5: 3165.651 ±(99.9%) 395.486 ms/op
                 executeQuery·p0.00:   3078.619 ms/op
                 executeQuery·p0.50:   3181.380 ms/op
                 executeQuery·p0.90:   3221.225 ms/op
                 executeQuery·p0.95:   3221.225 ms/op
                 executeQuery·p0.99:   3221.225 ms/op
                 executeQuery·p0.999:  3221.225 ms/op
                 executeQuery·p0.9999: 3221.225 ms/op
                 executeQuery·p1.00:   3221.225 ms/op


# Run progress: 46.25% complete, ETA 05:25:57
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3393.192 ±(99.9%) 5974.911 ms/op
# Warmup Iteration   2: 3138.388 ±(99.9%) 1375.155 ms/op
# Warmup Iteration   3: 3092.251 ±(99.9%) 476.373 ms/op
# Warmup Iteration   4: 3138.388 ±(99.9%) 827.842 ms/op
# Warmup Iteration   5: 3135.242 ±(99.9%) 1575.662 ms/op
Iteration   1: 3187.671 ±(99.9%) 749.484 ms/op
                 executeQuery·p0.00:   3107.979 ms/op
                 executeQuery·p0.50:   3143.631 ms/op
                 executeQuery·p0.90:   3355.443 ms/op
                 executeQuery·p0.95:   3355.443 ms/op
                 executeQuery·p0.99:   3355.443 ms/op
                 executeQuery·p0.999:  3355.443 ms/op
                 executeQuery·p0.9999: 3355.443 ms/op
                 executeQuery·p1.00:   3355.443 ms/op

Iteration   2: 3169.845 ±(99.9%) 655.501 ms/op
                 executeQuery·p0.00:   3040.870 ms/op
                 executeQuery·p0.50:   3189.768 ms/op
                 executeQuery·p0.90:   3258.974 ms/op
                 executeQuery·p0.95:   3258.974 ms/op
                 executeQuery·p0.99:   3258.974 ms/op
                 executeQuery·p0.999:  3258.974 ms/op
                 executeQuery·p0.9999: 3258.974 ms/op
                 executeQuery·p1.00:   3258.974 ms/op

Iteration   3: 3159.359 ±(99.9%) 681.148 ms/op
                 executeQuery·p0.00:   3019.899 ms/op
                 executeQuery·p0.50:   3175.088 ms/op
                 executeQuery·p0.90:   3267.363 ms/op
                 executeQuery·p0.95:   3267.363 ms/op
                 executeQuery·p0.99:   3267.363 ms/op
                 executeQuery·p0.999:  3267.363 ms/op
                 executeQuery·p0.9999: 3267.363 ms/op
                 executeQuery·p1.00:   3267.363 ms/op

Iteration   4: 3181.380 ±(99.9%) 654.426 ms/op
                 executeQuery·p0.00:   3078.619 ms/op
                 executeQuery·p0.50:   3164.602 ms/op
                 executeQuery·p0.90:   3317.694 ms/op
                 executeQuery·p0.95:   3317.694 ms/op
                 executeQuery·p0.99:   3317.694 ms/op
                 executeQuery·p0.999:  3317.694 ms/op
                 executeQuery·p0.9999: 3317.694 ms/op
                 executeQuery·p1.00:   3317.694 ms/op

Iteration   5: 3177.185 ±(99.9%) 562.684 ms/op
                 executeQuery·p0.00:   3082.813 ms/op
                 executeQuery·p0.50:   3181.380 ms/op
                 executeQuery·p0.90:   3263.169 ms/op
                 executeQuery·p0.95:   3263.169 ms/op
                 executeQuery·p0.99:   3263.169 ms/op
                 executeQuery·p0.999:  3263.169 ms/op
                 executeQuery·p0.9999: 3263.169 ms/op
                 executeQuery·p1.00:   3263.169 ms/op


# Run progress: 46.56% complete, ETA 05:24:19
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3426.746 ±(99.9%) 4090.049 ms/op
# Warmup Iteration   2: 3140.485 ±(99.9%) 524.800 ms/op
# Warmup Iteration   3: 3098.542 ±(99.9%) 205.672 ms/op
# Warmup Iteration   4: 3217.031 ±(99.9%) 768.518 ms/op
# Warmup Iteration   5: 3192.914 ±(99.9%) 706.211 ms/op
Iteration   1: 3219.128 ±(99.9%) 809.636 ms/op
                 executeQuery·p0.00:   3066.036 ms/op
                 executeQuery·p0.50:   3233.808 ms/op
                 executeQuery·p0.90:   3342.860 ms/op
                 executeQuery·p0.95:   3342.860 ms/op
                 executeQuery·p0.99:   3342.860 ms/op
                 executeQuery·p0.999:  3342.860 ms/op
                 executeQuery·p0.9999: 3342.860 ms/op
                 executeQuery·p1.00:   3342.860 ms/op

Iteration   2: 3163.554 ±(99.9%) 486.545 ms/op
                 executeQuery·p0.00:   3107.979 ms/op
                 executeQuery·p0.50:   3139.437 ms/op
                 executeQuery·p0.90:   3267.363 ms/op
                 executeQuery·p0.95:   3267.363 ms/op
                 executeQuery·p0.99:   3267.363 ms/op
                 executeQuery·p0.999:  3267.363 ms/op
                 executeQuery·p0.9999: 3267.363 ms/op
                 executeQuery·p1.00:   3267.363 ms/op

Iteration   3: 3218.080 ±(99.9%) 765.765 ms/op
                 executeQuery·p0.00:   3103.785 ms/op
                 executeQuery·p0.50:   3193.962 ms/op
                 executeQuery·p0.90:   3380.609 ms/op
                 executeQuery·p0.95:   3380.609 ms/op
                 executeQuery·p0.99:   3380.609 ms/op
                 executeQuery·p0.999:  3380.609 ms/op
                 executeQuery·p0.9999: 3380.609 ms/op
                 executeQuery·p1.00:   3380.609 ms/op

Iteration   4: 3206.545 ±(99.9%) 691.539 ms/op
                 executeQuery·p0.00:   3099.591 ms/op
                 executeQuery·p0.50:   3202.351 ms/op
                 executeQuery·p0.90:   3321.889 ms/op
                 executeQuery·p0.95:   3321.889 ms/op
                 executeQuery·p0.99:   3321.889 ms/op
                 executeQuery·p0.999:  3321.889 ms/op
                 executeQuery·p0.9999: 3321.889 ms/op
                 executeQuery·p1.00:   3321.889 ms/op

Iteration   5: 3172.991 ±(99.9%) 742.426 ms/op
                 executeQuery·p0.00:   3045.065 ms/op
                 executeQuery·p0.50:   3175.088 ms/op
                 executeQuery·p0.90:   3296.723 ms/op
                 executeQuery·p0.95:   3296.723 ms/op
                 executeQuery·p0.99:   3296.723 ms/op
                 executeQuery·p0.999:  3296.723 ms/op
                 executeQuery·p0.9999: 3296.723 ms/op
                 executeQuery·p1.00:   3296.723 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 100
  mean =   3178.737 ±(99.9%) 36.903 ms/op

  Histogram, ms/op:
    [2900.000, 2950.000) = 3 
    [2950.000, 3000.000) = 3 
    [3000.000, 3050.000) = 6 
    [3050.000, 3100.000) = 10 
    [3100.000, 3150.000) = 18 
    [3150.000, 3200.000) = 17 
    [3200.000, 3250.000) = 17 
    [3250.000, 3300.000) = 15 
    [3300.000, 3350.000) = 5 
    [3350.000, 3400.000) = 4 
    [3400.000, 3450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2923.430 ms/op
     p(50.0000) =   3181.380 ms/op
     p(90.0000) =   3317.694 ms/op
     p(95.0000) =   3355.233 ms/op
     p(99.0000) =   3493.016 ms/op
     p(99.9000) =   3493.855 ms/op
     p(99.9900) =   3493.855 ms/op
     p(99.9990) =   3493.855 ms/op
     p(99.9999) =   3493.855 ms/op
    p(100.0000) =   3493.855 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6)

# Run progress: 46.88% complete, ETA 05:22:41
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3491.059 ±(99.9%) 4618.099 ms/op
# Warmup Iteration   2: 3215.983 ±(99.9%) 539.978 ms/op
# Warmup Iteration   3: 3208.643 ±(99.9%) 574.953 ms/op
# Warmup Iteration   4: 3161.457 ±(99.9%) 841.630 ms/op
# Warmup Iteration   5: 3213.885 ±(99.9%) 393.624 ms/op
Iteration   1: 3284.140 ±(99.9%) 653.864 ms/op
                 executeQuery·p0.00:   3162.505 ms/op
                 executeQuery·p0.50:   3282.043 ms/op
                 executeQuery·p0.90:   3409.969 ms/op
                 executeQuery·p0.95:   3409.969 ms/op
                 executeQuery·p0.99:   3409.969 ms/op
                 executeQuery·p0.999:  3409.969 ms/op
                 executeQuery·p0.9999: 3409.969 ms/op
                 executeQuery·p1.00:   3409.969 ms/op

Iteration   2: 3172.991 ±(99.9%) 1600.334 ms/op
                 executeQuery·p0.00:   2961.179 ms/op
                 executeQuery·p0.50:   3103.785 ms/op
                 executeQuery·p0.90:   3523.215 ms/op
                 executeQuery·p0.95:   3523.215 ms/op
                 executeQuery·p0.99:   3523.215 ms/op
                 executeQuery·p0.999:  3523.215 ms/op
                 executeQuery·p0.9999: 3523.215 ms/op
                 executeQuery·p1.00:   3523.215 ms/op

Iteration   3: 3251.634 ±(99.9%) 225.003 ms/op
                 executeQuery·p0.00:   3212.837 ms/op
                 executeQuery·p0.50:   3248.488 ms/op
                 executeQuery·p0.90:   3296.723 ms/op
                 executeQuery·p0.95:   3296.723 ms/op
                 executeQuery·p0.99:   3296.723 ms/op
                 executeQuery·p0.999:  3296.723 ms/op
                 executeQuery·p0.9999: 3296.723 ms/op
                 executeQuery·p1.00:   3296.723 ms/op

Iteration   4: 3222.274 ±(99.9%) 777.507 ms/op
                 executeQuery·p0.00:   3049.259 ms/op
                 executeQuery·p0.50:   3258.974 ms/op
                 executeQuery·p0.90:   3321.889 ms/op
                 executeQuery·p0.95:   3321.889 ms/op
                 executeQuery·p0.99:   3321.889 ms/op
                 executeQuery·p0.999:  3321.889 ms/op
                 executeQuery·p0.9999: 3321.889 ms/op
                 executeQuery·p1.00:   3321.889 ms/op

Iteration   5: 3238.003 ±(99.9%) 290.232 ms/op
                 executeQuery·p0.00:   3212.837 ms/op
                 executeQuery·p0.50:   3217.031 ms/op
                 executeQuery·p0.90:   3305.112 ms/op
                 executeQuery·p0.95:   3305.112 ms/op
                 executeQuery·p0.99:   3305.112 ms/op
                 executeQuery·p0.999:  3305.112 ms/op
                 executeQuery·p0.9999: 3305.112 ms/op
                 executeQuery·p1.00:   3305.112 ms/op


# Run progress: 47.19% complete, ETA 05:21:05
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3498.050 ±(99.9%) 5012.480 ms/op
# Warmup Iteration   2: 3242.197 ±(99.9%) 880.483 ms/op
# Warmup Iteration   3: 3245.343 ±(99.9%) 962.939 ms/op
# Warmup Iteration   4: 3202.351 ±(99.9%) 1205.930 ms/op
# Warmup Iteration   5: 3231.711 ±(99.9%) 555.678 ms/op
Iteration   1: 3305.112 ±(99.9%) 1157.953 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3326.083 ms/op
                 executeQuery·p0.90:   3355.443 ms/op
                 executeQuery·p0.95:   3355.443 ms/op
                 executeQuery·p0.99:   3355.443 ms/op
                 executeQuery·p0.999:  3355.443 ms/op
                 executeQuery·p0.9999: 3355.443 ms/op
                 executeQuery·p1.00:   3355.443 ms/op

Iteration   2: 3200.254 ±(99.9%) 426.253 ms/op
                 executeQuery·p0.00:   3141.534 ms/op
                 executeQuery·p0.50:   3196.060 ms/op
                 executeQuery·p0.90:   3267.363 ms/op
                 executeQuery·p0.95:   3267.363 ms/op
                 executeQuery·p0.99:   3267.363 ms/op
                 executeQuery·p0.999:  3267.363 ms/op
                 executeQuery·p0.9999: 3267.363 ms/op
                 executeQuery·p1.00:   3267.363 ms/op

Iteration   3: 3268.411 ±(99.9%) 307.738 ms/op
                 executeQuery·p0.00:   3212.837 ms/op
                 executeQuery·p0.50:   3271.557 ms/op
                 executeQuery·p0.90:   3317.694 ms/op
                 executeQuery·p0.95:   3317.694 ms/op
                 executeQuery·p0.99:   3317.694 ms/op
                 executeQuery·p0.999:  3317.694 ms/op
                 executeQuery·p0.9999: 3317.694 ms/op
                 executeQuery·p1.00:   3317.694 ms/op

Iteration   4: 3254.780 ±(99.9%) 991.412 ms/op
                 executeQuery·p0.00:   3040.870 ms/op
                 executeQuery·p0.50:   3303.014 ms/op
                 executeQuery·p0.90:   3372.220 ms/op
                 executeQuery·p0.95:   3372.220 ms/op
                 executeQuery·p0.99:   3372.220 ms/op
                 executeQuery·p0.999:  3372.220 ms/op
                 executeQuery·p0.9999: 3372.220 ms/op
                 executeQuery·p1.00:   3372.220 ms/op

Iteration   5: 3282.043 ±(99.9%) 230.513 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3288.334 ms/op
                 executeQuery·p0.90:   3317.694 ms/op
                 executeQuery·p0.95:   3317.694 ms/op
                 executeQuery·p0.99:   3317.694 ms/op
                 executeQuery·p0.999:  3317.694 ms/op
                 executeQuery·p0.9999: 3317.694 ms/op
                 executeQuery·p1.00:   3317.694 ms/op


# Run progress: 47.50% complete, ETA 05:19:26
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3593.120 ±(99.9%) 1997.345 ms/op
# Warmup Iteration   2: 3161.457 ±(99.9%) 837.254 ms/op
# Warmup Iteration   3: 3219.128 ±(99.9%) 543.199 ms/op
# Warmup Iteration   4: 3198.157 ±(99.9%) 1095.936 ms/op
# Warmup Iteration   5: 3265.266 ±(99.9%) 1088.312 ms/op
Iteration   1: 3253.731 ±(99.9%) 1420.008 ms/op
                 executeQuery·p0.00:   3074.425 ms/op
                 executeQuery·p0.50:   3183.477 ms/op
                 executeQuery·p0.90:   3573.547 ms/op
                 executeQuery·p0.95:   3573.547 ms/op
                 executeQuery·p0.99:   3573.547 ms/op
                 executeQuery·p0.999:  3573.547 ms/op
                 executeQuery·p0.9999: 3573.547 ms/op
                 executeQuery·p1.00:   3573.547 ms/op

Iteration   2: 3299.869 ±(99.9%) 484.022 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3282.043 ms/op
                 executeQuery·p0.90:   3401.581 ms/op
                 executeQuery·p0.95:   3401.581 ms/op
                 executeQuery·p0.99:   3401.581 ms/op
                 executeQuery·p0.999:  3401.581 ms/op
                 executeQuery·p0.9999: 3401.581 ms/op
                 executeQuery·p1.00:   3401.581 ms/op

Iteration   3: 3136.291 ±(99.9%) 507.725 ms/op
                 executeQuery·p0.00:   3045.065 ms/op
                 executeQuery·p0.50:   3135.242 ms/op
                 executeQuery·p0.90:   3229.614 ms/op
                 executeQuery·p0.95:   3229.614 ms/op
                 executeQuery·p0.99:   3229.614 ms/op
                 executeQuery·p0.999:  3229.614 ms/op
                 executeQuery·p0.9999: 3229.614 ms/op
                 executeQuery·p1.00:   3229.614 ms/op

Iteration   4: 3251.634 ±(99.9%) 627.639 ms/op
                 executeQuery·p0.00:   3133.145 ms/op
                 executeQuery·p0.50:   3252.683 ms/op
                 executeQuery·p0.90:   3368.026 ms/op
                 executeQuery·p0.95:   3368.026 ms/op
                 executeQuery·p0.99:   3368.026 ms/op
                 executeQuery·p0.999:  3368.026 ms/op
                 executeQuery·p0.9999: 3368.026 ms/op
                 executeQuery·p1.00:   3368.026 ms/op

Iteration   5: 3277.849 ±(99.9%) 389.952 ms/op
                 executeQuery·p0.00:   3196.060 ms/op
                 executeQuery·p0.50:   3290.431 ms/op
                 executeQuery·p0.90:   3334.472 ms/op
                 executeQuery·p0.95:   3334.472 ms/op
                 executeQuery·p0.99:   3334.472 ms/op
                 executeQuery·p0.999:  3334.472 ms/op
                 executeQuery·p0.9999: 3334.472 ms/op
                 executeQuery·p1.00:   3334.472 ms/op


# Run progress: 47.81% complete, ETA 05:17:49
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3464.495 ±(99.9%) 3644.139 ms/op
# Warmup Iteration   2: 3154.117 ±(99.9%) 418.133 ms/op
# Warmup Iteration   3: 3299.519 ±(99.9%) 3449.617 ms/op
# Warmup Iteration   4: 3172.991 ±(99.9%) 462.352 ms/op
# Warmup Iteration   5: 3298.121 ±(99.9%) 1038.904 ms/op
Iteration   1: 3255.828 ±(99.9%) 1050.037 ms/op
                 executeQuery·p0.00:   3057.648 ms/op
                 executeQuery·p0.50:   3261.071 ms/op
                 executeQuery·p0.90:   3443.524 ms/op
                 executeQuery·p0.95:   3443.524 ms/op
                 executeQuery·p0.99:   3443.524 ms/op
                 executeQuery·p0.999:  3443.524 ms/op
                 executeQuery·p0.9999: 3443.524 ms/op
                 executeQuery·p1.00:   3443.524 ms/op

Iteration   2: 3105.882 ±(99.9%) 353.040 ms/op
                 executeQuery·p0.00:   3049.259 ms/op
                 executeQuery·p0.50:   3099.591 ms/op
                 executeQuery·p0.90:   3175.088 ms/op
                 executeQuery·p0.95:   3175.088 ms/op
                 executeQuery·p0.99:   3175.088 ms/op
                 executeQuery·p0.999:  3175.088 ms/op
                 executeQuery·p0.9999: 3175.088 ms/op
                 executeQuery·p1.00:   3175.088 ms/op

Iteration   3: 3285.189 ±(99.9%) 582.306 ms/op
                 executeQuery·p0.00:   3217.031 ms/op
                 executeQuery·p0.50:   3256.877 ms/op
                 executeQuery·p0.90:   3409.969 ms/op
                 executeQuery·p0.95:   3409.969 ms/op
                 executeQuery·p0.99:   3409.969 ms/op
                 executeQuery·p0.999:  3409.969 ms/op
                 executeQuery·p0.9999: 3409.969 ms/op
                 executeQuery·p1.00:   3409.969 ms/op

Iteration   4: 3166.700 ±(99.9%) 894.280 ms/op
                 executeQuery·p0.00:   3040.870 ms/op
                 executeQuery·p0.50:   3131.048 ms/op
                 executeQuery·p0.90:   3363.832 ms/op
                 executeQuery·p0.95:   3363.832 ms/op
                 executeQuery·p0.99:   3363.832 ms/op
                 executeQuery·p0.999:  3363.832 ms/op
                 executeQuery·p0.9999: 3363.832 ms/op
                 executeQuery·p1.00:   3363.832 ms/op

Iteration   5: 3233.808 ±(99.9%) 463.146 ms/op
                 executeQuery·p0.00:   3154.117 ms/op
                 executeQuery·p0.50:   3229.614 ms/op
                 executeQuery·p0.90:   3321.889 ms/op
                 executeQuery·p0.95:   3321.889 ms/op
                 executeQuery·p0.99:   3321.889 ms/op
                 executeQuery·p0.999:  3321.889 ms/op
                 executeQuery·p0.9999: 3321.889 ms/op
                 executeQuery·p1.00:   3321.889 ms/op


# Run progress: 48.13% complete, ETA 05:16:05
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3505.040 ±(99.9%) 3301.303 ms/op
# Warmup Iteration   2: 3242.197 ±(99.9%) 662.791 ms/op
# Warmup Iteration   3: 3265.266 ±(99.9%) 730.456 ms/op
# Warmup Iteration   4: 3176.137 ±(99.9%) 702.038 ms/op
# Warmup Iteration   5: 3182.428 ±(99.9%) 473.796 ms/op
Iteration   1: 3269.460 ±(99.9%) 495.088 ms/op
                 executeQuery·p0.00:   3158.311 ms/op
                 executeQuery·p0.50:   3296.723 ms/op
                 executeQuery·p0.90:   3326.083 ms/op
                 executeQuery·p0.95:   3326.083 ms/op
                 executeQuery·p0.99:   3326.083 ms/op
                 executeQuery·p0.999:  3326.083 ms/op
                 executeQuery·p0.9999: 3326.083 ms/op
                 executeQuery·p1.00:   3326.083 ms/op

Iteration   2: 3249.537 ±(99.9%) 828.729 ms/op
                 executeQuery·p0.00:   3107.979 ms/op
                 executeQuery·p0.50:   3258.974 ms/op
                 executeQuery·p0.90:   3372.220 ms/op
                 executeQuery·p0.95:   3372.220 ms/op
                 executeQuery·p0.99:   3372.220 ms/op
                 executeQuery·p0.999:  3372.220 ms/op
                 executeQuery·p0.9999: 3372.220 ms/op
                 executeQuery·p1.00:   3372.220 ms/op

Iteration   3: 3225.420 ±(99.9%) 596.689 ms/op
                 executeQuery·p0.00:   3124.756 ms/op
                 executeQuery·p0.50:   3229.614 ms/op
                 executeQuery·p0.90:   3317.694 ms/op
                 executeQuery·p0.95:   3317.694 ms/op
                 executeQuery·p0.99:   3317.694 ms/op
                 executeQuery·p0.999:  3317.694 ms/op
                 executeQuery·p0.9999: 3317.694 ms/op
                 executeQuery·p1.00:   3317.694 ms/op

Iteration   4: 3197.108 ±(99.9%) 1204.076 ms/op
                 executeQuery·p0.00:   3045.065 ms/op
                 executeQuery·p0.50:   3137.339 ms/op
                 executeQuery·p0.90:   3468.689 ms/op
                 executeQuery·p0.95:   3468.689 ms/op
                 executeQuery·p0.99:   3468.689 ms/op
                 executeQuery·p0.999:  3468.689 ms/op
                 executeQuery·p0.9999: 3468.689 ms/op
                 executeQuery·p1.00:   3468.689 ms/op

Iteration   5: 3355.443 ±(99.9%) 4153.971 ms/op
                 executeQuery·p0.00:   3175.088 ms/op
                 executeQuery·p0.50:   3279.946 ms/op
                 executeQuery·p0.90:   3611.296 ms/op
                 executeQuery·p0.95:   3611.296 ms/op
                 executeQuery·p0.99:   3611.296 ms/op
                 executeQuery·p0.999:  3611.296 ms/op
                 executeQuery·p0.9999: 3611.296 ms/op
                 executeQuery·p1.00:   3611.296 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 98
  mean =   3239.929 ±(99.9%) 40.478 ms/op

  Histogram, ms/op:
    [2900.000, 2950.000) = 0 
    [2950.000, 3000.000) = 1 
    [3000.000, 3050.000) = 7 
    [3050.000, 3100.000) = 3 
    [3100.000, 3150.000) = 11 
    [3150.000, 3200.000) = 11 
    [3200.000, 3250.000) = 20 
    [3250.000, 3300.000) = 17 
    [3300.000, 3350.000) = 14 
    [3350.000, 3400.000) = 6 
    [3400.000, 3450.000) = 4 
    [3450.000, 3500.000) = 1 
    [3500.000, 3550.000) = 1 
    [3550.000, 3600.000) = 1 
    [3600.000, 3650.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2961.179 ms/op
     p(50.0000) =   3240.100 ms/op
     p(90.0000) =   3372.220 ms/op
     p(95.0000) =   3444.782 ms/op
     p(99.0000) =   3611.296 ms/op
     p(99.9000) =   3611.296 ms/op
     p(99.9900) =   3611.296 ms/op
     p(99.9990) =   3611.296 ms/op
     p(99.9999) =   3611.296 ms/op
    p(100.0000) =   3611.296 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8)

# Run progress: 48.44% complete, ETA 05:14:24
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3586.130 ±(99.9%) 4408.359 ms/op
# Warmup Iteration   2: 3240.100 ±(99.9%) 326.370 ms/op
# Warmup Iteration   3: 3197.108 ±(99.9%) 404.061 ms/op
# Warmup Iteration   4: 3239.051 ±(99.9%) 457.494 ms/op
# Warmup Iteration   5: 3236.954 ±(99.9%) 686.162 ms/op
Iteration   1: 3398.784 ±(99.9%) 650.793 ms/op
                 executeQuery·p0.00:   3372.220 ms/op
                 executeQuery·p0.50:   3384.803 ms/op
                 executeQuery·p0.90:   3439.329 ms/op
                 executeQuery·p0.95:   3439.329 ms/op
                 executeQuery·p0.99:   3439.329 ms/op
                 executeQuery·p0.999:  3439.329 ms/op
                 executeQuery·p0.9999: 3439.329 ms/op
                 executeQuery·p1.00:   3439.329 ms/op

Iteration   2: 3283.091 ±(99.9%) 1150.199 ms/op
                 executeQuery·p0.00:   3116.368 ms/op
                 executeQuery·p0.50:   3263.169 ms/op
                 executeQuery·p0.90:   3489.661 ms/op
                 executeQuery·p0.95:   3489.661 ms/op
                 executeQuery·p0.99:   3489.661 ms/op
                 executeQuery·p0.999:  3489.661 ms/op
                 executeQuery·p0.9999: 3489.661 ms/op
                 executeQuery·p1.00:   3489.661 ms/op

Iteration   3: 3220.177 ±(99.9%) 335.891 ms/op
                 executeQuery·p0.00:   3162.505 ms/op
                 executeQuery·p0.50:   3214.934 ms/op
                 executeQuery·p0.90:   3288.334 ms/op
                 executeQuery·p0.95:   3288.334 ms/op
                 executeQuery·p0.99:   3288.334 ms/op
                 executeQuery·p0.999:  3288.334 ms/op
                 executeQuery·p0.9999: 3288.334 ms/op
                 executeQuery·p1.00:   3288.334 ms/op

Iteration   4: 3275.751 ±(99.9%) 540.714 ms/op
                 executeQuery·p0.00:   3204.448 ms/op
                 executeQuery·p0.50:   3252.683 ms/op
                 executeQuery·p0.90:   3393.192 ms/op
                 executeQuery·p0.95:   3393.192 ms/op
                 executeQuery·p0.99:   3393.192 ms/op
                 executeQuery·p0.999:  3393.192 ms/op
                 executeQuery·p0.9999: 3393.192 ms/op
                 executeQuery·p1.00:   3393.192 ms/op

Iteration   5: 3330.277 ±(99.9%) 1547.516 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3363.832 ms/op
                 executeQuery·p0.90:   3393.192 ms/op
                 executeQuery·p0.95:   3393.192 ms/op
                 executeQuery·p0.99:   3393.192 ms/op
                 executeQuery·p0.999:  3393.192 ms/op
                 executeQuery·p0.9999: 3393.192 ms/op
                 executeQuery·p1.00:   3393.192 ms/op


# Run progress: 48.75% complete, ETA 05:12:41
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3614.092 ±(99.9%) 4122.370 ms/op
# Warmup Iteration   2: 3331.675 ±(99.9%) 245.976 ms/op
# Warmup Iteration   3: 3312.102 ±(99.9%) 983.906 ms/op
# Warmup Iteration   4: 3292.529 ±(99.9%) 641.005 ms/op
# Warmup Iteration   5: 3241.148 ±(99.9%) 723.340 ms/op
Iteration   1: 3305.112 ±(99.9%) 602.406 ms/op
                 executeQuery·p0.00:   3196.060 ms/op
                 executeQuery·p0.50:   3307.209 ms/op
                 executeQuery·p0.90:   3409.969 ms/op
                 executeQuery·p0.95:   3409.969 ms/op
                 executeQuery·p0.99:   3409.969 ms/op
                 executeQuery·p0.999:  3409.969 ms/op
                 executeQuery·p0.9999: 3409.969 ms/op
                 executeQuery·p1.00:   3409.969 ms/op

Iteration   2: 3362.434 ±(99.9%) 1532.943 ms/op
                 executeQuery·p0.00:   3275.751 ms/op
                 executeQuery·p0.50:   3368.026 ms/op
                 executeQuery·p0.90:   3443.524 ms/op
                 executeQuery·p0.95:   3443.524 ms/op
                 executeQuery·p0.99:   3443.524 ms/op
                 executeQuery·p0.999:  3443.524 ms/op
                 executeQuery·p0.9999: 3443.524 ms/op
                 executeQuery·p1.00:   3443.524 ms/op

Iteration   3: 3314.898 ±(99.9%) 1115.019 ms/op
                 executeQuery·p0.00:   3246.391 ms/op
                 executeQuery·p0.50:   3334.472 ms/op
                 executeQuery·p0.90:   3363.832 ms/op
                 executeQuery·p0.95:   3363.832 ms/op
                 executeQuery·p0.99:   3363.832 ms/op
                 executeQuery·p0.999:  3363.832 ms/op
                 executeQuery·p0.9999: 3363.832 ms/op
                 executeQuery·p1.00:   3363.832 ms/op

Iteration   4: 3277.849 ±(99.9%) 750.626 ms/op
                 executeQuery·p0.00:   3141.534 ms/op
                 executeQuery·p0.50:   3294.626 ms/op
                 executeQuery·p0.90:   3380.609 ms/op
                 executeQuery·p0.95:   3380.609 ms/op
                 executeQuery·p0.99:   3380.609 ms/op
                 executeQuery·p0.999:  3380.609 ms/op
                 executeQuery·p0.9999: 3380.609 ms/op
                 executeQuery·p1.00:   3380.609 ms/op

Iteration   5: 3296.723 ±(99.9%) 501.721 ms/op
                 executeQuery·p0.00:   3191.865 ms/op
                 executeQuery·p0.50:   3317.694 ms/op
                 executeQuery·p0.90:   3359.638 ms/op
                 executeQuery·p0.95:   3359.638 ms/op
                 executeQuery·p0.99:   3359.638 ms/op
                 executeQuery·p0.999:  3359.638 ms/op
                 executeQuery·p0.9999: 3359.638 ms/op
                 executeQuery·p1.00:   3359.638 ms/op


# Run progress: 49.06% complete, ETA 05:10:52
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3618.286 ±(99.9%) 3616.181 ms/op
# Warmup Iteration   2: 3262.120 ±(99.9%) 623.332 ms/op
# Warmup Iteration   3: 3254.780 ±(99.9%) 949.527 ms/op
# Warmup Iteration   4: 3232.760 ±(99.9%) 725.368 ms/op
# Warmup Iteration   5: 3279.946 ±(99.9%) 1100.061 ms/op
Iteration   1: 3244.294 ±(99.9%) 204.627 ms/op
                 executeQuery·p0.00:   3200.254 ms/op
                 executeQuery·p0.50:   3254.780 ms/op
                 executeQuery·p0.90:   3267.363 ms/op
                 executeQuery·p0.95:   3267.363 ms/op
                 executeQuery·p0.99:   3267.363 ms/op
                 executeQuery·p0.999:  3267.363 ms/op
                 executeQuery·p0.9999: 3267.363 ms/op
                 executeQuery·p1.00:   3267.363 ms/op

Iteration   2: 3320.491 ±(99.9%) 3065.886 ms/op
                 executeQuery·p0.00:   3158.311 ms/op
                 executeQuery·p0.50:   3309.306 ms/op
                 executeQuery·p0.90:   3493.855 ms/op
                 executeQuery·p0.95:   3493.855 ms/op
                 executeQuery·p0.99:   3493.855 ms/op
                 executeQuery·p0.999:  3493.855 ms/op
                 executeQuery·p0.9999: 3493.855 ms/op
                 executeQuery·p1.00:   3493.855 ms/op

Iteration   3: 3308.257 ±(99.9%) 440.589 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3307.209 ms/op
                 executeQuery·p0.90:   3384.803 ms/op
                 executeQuery·p0.95:   3384.803 ms/op
                 executeQuery·p0.99:   3384.803 ms/op
                 executeQuery·p0.999:  3384.803 ms/op
                 executeQuery·p0.9999: 3384.803 ms/op
                 executeQuery·p1.00:   3384.803 ms/op

Iteration   4: 3246.391 ±(99.9%) 273.732 ms/op
                 executeQuery·p0.00:   3204.448 ms/op
                 executeQuery·p0.50:   3238.003 ms/op
                 executeQuery·p0.90:   3305.112 ms/op
                 executeQuery·p0.95:   3305.112 ms/op
                 executeQuery·p0.99:   3305.112 ms/op
                 executeQuery·p0.999:  3305.112 ms/op
                 executeQuery·p0.9999: 3305.112 ms/op
                 executeQuery·p1.00:   3305.112 ms/op

Iteration   5: 3283.091 ±(99.9%) 366.567 ms/op
                 executeQuery·p0.00:   3250.586 ms/op
                 executeQuery·p0.50:   3256.877 ms/op
                 executeQuery·p0.90:   3368.026 ms/op
                 executeQuery·p0.95:   3368.026 ms/op
                 executeQuery·p0.99:   3368.026 ms/op
                 executeQuery·p0.999:  3368.026 ms/op
                 executeQuery·p0.9999: 3368.026 ms/op
                 executeQuery·p1.00:   3368.026 ms/op


# Run progress: 49.38% complete, ETA 05:09:12
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_643277177 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_643277177(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_643277177> join_map = new Int_Multi_Object_Map<JRT_643277177>();
private final class JRT_1072142779 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1072142779(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1072142779> join_map_0 = new Int_Multi_Object_Map<JRT_1072142779>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_1072142779 left_join_record = new JRT_1072142779(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_1072142779> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_1072142779 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_643277177 left_join_record_0 = new JRT_643277177(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_643277177> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_643277177 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3574.945 ±(99.9%) 4299.655 ms/op
# Warmup Iteration   2: 3280.994 ±(99.9%) 1044.894 ms/op
# Warmup Iteration   3: 3256.877 ±(99.9%) 524.858 ms/op
# Warmup Iteration   4: 3230.663 ±(99.9%) 1406.319 ms/op
# Warmup Iteration   5: 3230.663 ±(99.9%) 539.524 ms/op
Iteration   1: 3219.128 ±(99.9%) 784.444 ms/op
                 executeQuery·p0.00:   3095.396 ms/op
                 executeQuery·p0.50:   3206.545 ms/op
                 executeQuery·p0.90:   3368.026 ms/op
                 executeQuery·p0.95:   3368.026 ms/op
                 executeQuery·p0.99:   3368.026 ms/op
                 executeQuery·p0.999:  3368.026 ms/op
                 executeQuery·p0.9999: 3368.026 ms/op
                 executeQuery·p1.00:   3368.026 ms/op

Iteration   2: 3316.296 ±(99.9%) 4008.591 ms/op
                 executeQuery·p0.00:   3082.813 ms/op
                 executeQuery·p0.50:   3347.055 ms/op
                 executeQuery·p0.90:   3519.021 ms/op
                 executeQuery·p0.95:   3519.021 ms/op
                 executeQuery·p0.99:   3519.021 ms/op
                 executeQuery·p0.999:  3519.021 ms/op
                 executeQuery·p0.9999: 3519.021 ms/op
                 executeQuery·p1.00:   3519.021 ms/op

Iteration   3: 3297.772 ±(99.9%) 416.593 ms/op
                 executeQuery·p0.00:   3246.391 ms/op
                 executeQuery·p0.50:   3277.849 ms/op
                 executeQuery·p0.90:   3388.998 ms/op
                 executeQuery·p0.95:   3388.998 ms/op
                 executeQuery·p0.99:   3388.998 ms/op
                 executeQuery·p0.999:  3388.998 ms/op
                 executeQuery·p0.9999: 3388.998 ms/op
                 executeQuery·p1.00:   3388.998 ms/op

Iteration   4: 3386.201 ±(99.9%) 2756.127 ms/op
                 executeQuery·p0.00:   3212.837 ms/op
                 executeQuery·p0.50:   3456.106 ms/op
                 executeQuery·p0.90:   3489.661 ms/op
                 executeQuery·p0.95:   3489.661 ms/op
                 executeQuery·p0.99:   3489.661 ms/op
                 executeQuery·p0.999:  3489.661 ms/op
                 executeQuery·p0.9999: 3489.661 ms/op
                 executeQuery·p1.00:   3489.661 ms/op

Iteration   5: 3307.209 ±(99.9%) 402.315 ms/op
                 executeQuery·p0.00:   3217.031 ms/op
                 executeQuery·p0.50:   3326.083 ms/op
                 executeQuery·p0.90:   3359.638 ms/op
                 executeQuery·p0.95:   3359.638 ms/op
                 executeQuery·p0.99:   3359.638 ms/op
                 executeQuery·p0.999:  3359.638 ms/op
                 executeQuery·p0.9999: 3359.638 ms/op
                 executeQuery·p1.00:   3359.638 ms/op


# Run progress: 49.69% complete, ETA 05:07:28
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
private final class JRT_441068715 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_441068715(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_441068715> join_map = new Int_Multi_Object_Map<JRT_441068715>();
private final class JRT_2094688685 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_2094688685(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_2094688685> join_map_0 = new Int_Multi_Object_Map<JRT_2094688685>();
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    int arrowVectorLength = table_A_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_A_vc_0.getDataBufferAddress(), arrowVectorLength * table_A_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_A_vc_1.getDataBufferAddress(), arrowVectorLength * table_A_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_A_vc_2.getDataBufferAddress(), arrowVectorLength * table_A_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * table_A_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_A_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            JRT_2094688685 left_join_record = new JRT_2094688685(flattened_key, table_A_vc_1.get(currentVectorOffset + simd_vector_i), table_A_vc_2.get(currentVectorOffset + simd_vector_i));
            join_map_0.add(flattened_key, pre_hash_value, left_join_record);
        }
    }
}
int commonSIMDVectorLength_0 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_0 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    int arrowVectorLength = table_B_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_B_vc_0.getDataBufferAddress(), arrowVectorLength * table_B_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_B_vc_1.getDataBufferAddress(), arrowVectorLength * table_B_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_B_vc_2.getDataBufferAddress(), arrowVectorLength * table_B_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_0) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_0.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_0, col_0_ms, currentVectorOffset * table_B_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_0; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_B_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map_0.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_B_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_2094688685> records_to_join_list = join_map_0.get(flattened_key, pre_hash_value);
            foreach (JRT_2094688685 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
                JRT_441068715 left_join_record_0 = new JRT_441068715(left_join_ord_0, left_join_ord_1, left_join_ord_2, flattened_key, right_join_ord_1, right_join_ord_2);
                join_map.add(left_join_ord_1, left_join_key_prehash, left_join_record_0);
            }
        }
    }
}
int commonSIMDVectorLength_1 = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies_1 = oCtx.getVectorSpeciesInt();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    int arrowVectorLength = table_C_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(table_C_vc_0.getDataBufferAddress(), arrowVectorLength * table_C_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(table_C_vc_1.getDataBufferAddress(), arrowVectorLength * table_C_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(table_C_vc_2.getDataBufferAddress(), arrowVectorLength * table_C_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength_1) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies_1.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies_1, col_0_ms, currentVectorOffset * table_C_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength_1; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = table_C_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            if (!join_map.contains(flattened_key, pre_hash_value)) {
                continue;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentVectorOffset + simd_vector_i);
            int right_join_ord_2 = table_C_vc_2.get(currentVectorOffset + simd_vector_i);
            List<JRT_441068715> records_to_join_list = join_map.get(flattened_key, pre_hash_value);
            foreach (JRT_441068715 left_join_record : records_to_join_list) {
                int left_join_ord_0 = left_join_record.ord_0;
                int left_join_ord_1 = left_join_record.ord_1;
                int left_join_ord_2 = left_join_record.ord_2;
                int left_join_ord_3 = left_join_record.ord_3;
                int left_join_ord_4 = left_join_record.ord_4;
                int left_join_ord_5 = left_join_record.ord_5;
                agg_0_count++;
            }
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3614.092 ±(99.9%) 4769.047 ms/op
# Warmup Iteration   2: 3249.537 ±(99.9%) 384.179 ms/op
# Warmup Iteration   3: 3262.120 ±(99.9%) 1007.916 ms/op
# Warmup Iteration   4: 3296.723 ±(99.9%) 1141.142 ms/op
# Warmup Iteration   5: 3274.703 ±(99.9%) 1056.778 ms/op
Iteration   1: 3275.751 ±(99.9%) 569.819 ms/op
                 executeQuery·p0.00:   3175.088 ms/op
                 executeQuery·p0.50:   3277.849 ms/op
                 executeQuery·p0.90:   3372.220 ms/op
                 executeQuery·p0.95:   3372.220 ms/op
                 executeQuery·p0.99:   3372.220 ms/op
                 executeQuery·p0.999:  3372.220 ms/op
                 executeQuery·p0.9999: 3372.220 ms/op
                 executeQuery·p1.00:   3372.220 ms/op

Iteration   2: 3355.443 ±(99.9%) 795.216 ms/op
                 executeQuery·p0.00:   3330.277 ms/op
                 executeQuery·p0.50:   3330.277 ms/op
                 executeQuery·p0.90:   3405.775 ms/op
                 executeQuery·p0.95:   3405.775 ms/op
                 executeQuery·p0.99:   3405.775 ms/op
                 executeQuery·p0.999:  3405.775 ms/op
                 executeQuery·p0.9999: 3405.775 ms/op
                 executeQuery·p1.00:   3405.775 ms/op

Iteration   3: 3211.788 ±(99.9%) 239.755 ms/op
                 executeQuery·p0.00:   3175.088 ms/op
                 executeQuery·p0.50:   3204.448 ms/op
                 executeQuery·p0.90:   3263.169 ms/op
                 executeQuery·p0.95:   3263.169 ms/op
                 executeQuery·p0.99:   3263.169 ms/op
                 executeQuery·p0.999:  3263.169 ms/op
                 executeQuery·p0.9999: 3263.169 ms/op
                 executeQuery·p1.00:   3263.169 ms/op

Iteration   4: 3261.071 ±(99.9%) 823.728 ms/op
                 executeQuery·p0.00:   3112.174 ms/op
                 executeQuery·p0.50:   3267.363 ms/op
                 executeQuery·p0.90:   3397.386 ms/op
                 executeQuery·p0.95:   3397.386 ms/op
                 executeQuery·p0.99:   3397.386 ms/op
                 executeQuery·p0.999:  3397.386 ms/op
                 executeQuery·p0.9999: 3397.386 ms/op
                 executeQuery·p1.00:   3397.386 ms/op

Iteration   5: 3328.879 ±(99.9%) 1072.187 ms/op
                 executeQuery·p0.00:   3263.169 ms/op
                 executeQuery·p0.50:   3347.055 ms/op
                 executeQuery·p0.90:   3376.415 ms/op
                 executeQuery·p0.95:   3376.415 ms/op
                 executeQuery·p0.99:   3376.415 ms/op
                 executeQuery·p0.999:  3376.415 ms/op
                 executeQuery·p0.9999: 3376.415 ms/op
                 executeQuery·p1.00:   3376.415 ms/op



Result "benchmarks.join_query.NonVectorisedSimd.executeQuery":
  N = 91
  mean =   3292.252 ±(99.9%) 34.259 ms/op

  Histogram, ms/op:
    [3000.000, 3050.000) = 0 
    [3050.000, 3100.000) = 2 
    [3100.000, 3150.000) = 4 
    [3150.000, 3200.000) = 7 
    [3200.000, 3250.000) = 20 
    [3250.000, 3300.000) = 16 
    [3300.000, 3350.000) = 13 
    [3350.000, 3400.000) = 20 
    [3400.000, 3450.000) = 4 
    [3450.000, 3500.000) = 4 
    [3500.000, 3550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3082.813 ms/op
     p(50.0000) =   3275.751 ms/op
     p(90.0000) =   3404.097 ms/op
     p(95.0000) =   3469.528 ms/op
     p(99.0000) =   3519.021 ms/op
     p(99.9000) =   3519.021 ms/op
     p(99.9900) =   3519.021 ms/op
     p(99.9990) =   3519.021 ms/op
     p(99.9999) =   3519.021 ms/op
    p(100.0000) =   3519.021 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2)

# Run progress: 50.00% complete, ETA 05:05:44
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1346.372 ±(99.9%) 285.402 ms/op
# Warmup Iteration   2: 1228.145 ±(99.9%) 130.774 ms/op
# Warmup Iteration   3: 1253.835 ±(99.9%) 158.739 ms/op
# Warmup Iteration   4: 1228.931 ±(99.9%) 168.066 ms/op
# Warmup Iteration   5: 1248.592 ±(99.9%) 104.800 ms/op
Iteration   1: 1243.087 ±(99.9%) 118.187 ms/op
                 executeQuery·p0.00:   1168.114 ms/op
                 executeQuery·p0.50:   1253.048 ms/op
                 executeQuery·p0.90:   1335.886 ms/op
                 executeQuery·p0.95:   1335.886 ms/op
                 executeQuery·p0.99:   1335.886 ms/op
                 executeQuery·p0.999:  1335.886 ms/op
                 executeQuery·p0.9999: 1335.886 ms/op
                 executeQuery·p1.00:   1335.886 ms/op

Iteration   2: 1222.174 ±(99.9%) 175.206 ms/op
                 executeQuery·p0.00:   1096.810 ms/op
                 executeQuery·p0.50:   1243.611 ms/op
                 executeQuery·p0.90:   1396.703 ms/op
                 executeQuery·p0.95:   1396.703 ms/op
                 executeQuery·p0.99:   1396.703 ms/op
                 executeQuery·p0.999:  1396.703 ms/op
                 executeQuery·p0.9999: 1396.703 ms/op
                 executeQuery·p1.00:   1396.703 ms/op

Iteration   3: 1236.533 ±(99.9%) 181.976 ms/op
                 executeQuery·p0.00:   1121.976 ms/op
                 executeQuery·p0.50:   1238.368 ms/op
                 executeQuery·p0.90:   1369.440 ms/op
                 executeQuery·p0.95:   1369.440 ms/op
                 executeQuery·p0.99:   1369.440 ms/op
                 executeQuery·p0.999:  1369.440 ms/op
                 executeQuery·p0.9999: 1369.440 ms/op
                 executeQuery·p1.00:   1369.440 ms/op

Iteration   4: 1221.329 ±(99.9%) 69.282 ms/op
                 executeQuery·p0.00:   1140.851 ms/op
                 executeQuery·p0.50:   1227.882 ms/op
                 executeQuery·p0.90:   1260.388 ms/op
                 executeQuery·p0.95:   1260.388 ms/op
                 executeQuery·p0.99:   1260.388 ms/op
                 executeQuery·p0.999:  1260.388 ms/op
                 executeQuery·p0.9999: 1260.388 ms/op
                 executeQuery·p1.00:   1260.388 ms/op

Iteration   5: 1208.659 ±(99.9%) 174.622 ms/op
                 executeQuery·p0.00:   1084.228 ms/op
                 executeQuery·p0.50:   1203.765 ms/op
                 executeQuery·p0.90:   1371.537 ms/op
                 executeQuery·p0.95:   1371.537 ms/op
                 executeQuery·p0.99:   1371.537 ms/op
                 executeQuery·p0.999:  1371.537 ms/op
                 executeQuery·p0.9999: 1371.537 ms/op
                 executeQuery·p1.00:   1371.537 ms/op


# Run progress: 50.31% complete, ETA 05:03:42
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1357.906 ±(99.9%) 265.481 ms/op
# Warmup Iteration   2: 1245.446 ±(99.9%) 137.812 ms/op
# Warmup Iteration   3: 1264.583 ±(99.9%) 185.885 ms/op
# Warmup Iteration   4: 1234.698 ±(99.9%) 183.043 ms/op
# Warmup Iteration   5: 1286.865 ±(99.9%) 145.947 ms/op
Iteration   1: 1239.155 ±(99.9%) 165.316 ms/op
                 executeQuery·p0.00:   1113.588 ms/op
                 executeQuery·p0.50:   1250.951 ms/op
                 executeQuery·p0.90:   1402.995 ms/op
                 executeQuery·p0.95:   1402.995 ms/op
                 executeQuery·p0.99:   1402.995 ms/op
                 executeQuery·p0.999:  1402.995 ms/op
                 executeQuery·p0.9999: 1402.995 ms/op
                 executeQuery·p1.00:   1402.995 ms/op

Iteration   2: 1226.834 ±(99.9%) 124.881 ms/op
                 executeQuery·p0.00:   1115.685 ms/op
                 executeQuery·p0.50:   1253.048 ms/op
                 executeQuery·p0.90:   1300.234 ms/op
                 executeQuery·p0.95:   1300.234 ms/op
                 executeQuery·p0.99:   1300.234 ms/op
                 executeQuery·p0.999:  1300.234 ms/op
                 executeQuery·p0.9999: 1300.234 ms/op
                 executeQuery·p1.00:   1300.234 ms/op

Iteration   3: 1264.058 ±(99.9%) 179.738 ms/op
                 executeQuery·p0.00:   1136.656 ms/op
                 executeQuery·p0.50:   1261.437 ms/op
                 executeQuery·p0.90:   1394.606 ms/op
                 executeQuery·p0.95:   1394.606 ms/op
                 executeQuery·p0.99:   1394.606 ms/op
                 executeQuery·p0.999:  1394.606 ms/op
                 executeQuery·p0.9999: 1394.606 ms/op
                 executeQuery·p1.00:   1394.606 ms/op

Iteration   4: 1250.165 ±(99.9%) 158.956 ms/op
                 executeQuery·p0.00:   1130.365 ms/op
                 executeQuery·p0.50:   1252.000 ms/op
                 executeQuery·p0.90:   1367.343 ms/op
                 executeQuery·p0.95:   1367.343 ms/op
                 executeQuery·p0.99:   1367.343 ms/op
                 executeQuery·p0.999:  1367.343 ms/op
                 executeQuery·p0.9999: 1367.343 ms/op
                 executeQuery·p1.00:   1367.343 ms/op

Iteration   5: 1241.514 ±(99.9%) 223.024 ms/op
                 executeQuery·p0.00:   1096.810 ms/op
                 executeQuery·p0.50:   1242.563 ms/op
                 executeQuery·p0.90:   1455.423 ms/op
                 executeQuery·p0.95:   1455.423 ms/op
                 executeQuery·p0.99:   1455.423 ms/op
                 executeQuery·p0.999:  1455.423 ms/op
                 executeQuery·p0.9999: 1455.423 ms/op
                 executeQuery·p1.00:   1455.423 ms/op


# Run progress: 50.63% complete, ETA 05:01:38
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1359.479 ±(99.9%) 304.313 ms/op
# Warmup Iteration   2: 1270.612 ±(99.9%) 242.583 ms/op
# Warmup Iteration   3: 1246.495 ±(99.9%) 204.050 ms/op
# Warmup Iteration   4: 1283.457 ±(99.9%) 184.185 ms/op
# Warmup Iteration   5: 1217.397 ±(99.9%) 136.985 ms/op
Iteration   1: 1266.942 ±(99.9%) 161.294 ms/op
                 executeQuery·p0.00:   1149.239 ms/op
                 executeQuery·p0.50:   1256.194 ms/op
                 executeQuery·p0.90:   1413.480 ms/op
                 executeQuery·p0.95:   1413.480 ms/op
                 executeQuery·p0.99:   1413.480 ms/op
                 executeQuery·p0.999:  1413.480 ms/op
                 executeQuery·p0.9999: 1413.480 ms/op
                 executeQuery·p1.00:   1413.480 ms/op

Iteration   2: 1232.863 ±(99.9%) 83.819 ms/op
                 executeQuery·p0.00:   1151.336 ms/op
                 executeQuery·p0.50:   1248.854 ms/op
                 executeQuery·p0.90:   1277.166 ms/op
                 executeQuery·p0.95:   1277.166 ms/op
                 executeQuery·p0.99:   1277.166 ms/op
                 executeQuery·p0.999:  1277.166 ms/op
                 executeQuery·p0.9999: 1277.166 ms/op
                 executeQuery·p1.00:   1277.166 ms/op

Iteration   3: 1224.999 ±(99.9%) 238.631 ms/op
                 executeQuery·p0.00:   1090.519 ms/op
                 executeQuery·p0.50:   1206.911 ms/op
                 executeQuery·p0.90:   1413.480 ms/op
                 executeQuery·p0.95:   1413.480 ms/op
                 executeQuery·p0.99:   1413.480 ms/op
                 executeQuery·p0.999:  1413.480 ms/op
                 executeQuery·p0.9999: 1413.480 ms/op
                 executeQuery·p1.00:   1413.480 ms/op

Iteration   4: 1262.486 ±(99.9%) 168.448 ms/op
                 executeQuery·p0.00:   1138.754 ms/op
                 executeQuery·p0.50:   1253.048 ms/op
                 executeQuery·p0.90:   1386.217 ms/op
                 executeQuery·p0.95:   1386.217 ms/op
                 executeQuery·p0.99:   1386.217 ms/op
                 executeQuery·p0.999:  1386.217 ms/op
                 executeQuery·p0.9999: 1386.217 ms/op
                 executeQuery·p1.00:   1386.217 ms/op

Iteration   5: 1237.058 ±(99.9%) 56.764 ms/op
                 executeQuery·p0.00:   1182.794 ms/op
                 executeQuery·p0.50:   1236.271 ms/op
                 executeQuery·p0.90:   1277.166 ms/op
                 executeQuery·p0.95:   1277.166 ms/op
                 executeQuery·p0.99:   1277.166 ms/op
                 executeQuery·p0.999:  1277.166 ms/op
                 executeQuery·p0.9999: 1277.166 ms/op
                 executeQuery·p1.00:   1277.166 ms/op


# Run progress: 50.94% complete, ETA 04:59:35
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1346.634 ±(99.9%) 233.690 ms/op
# Warmup Iteration   2: 1258.815 ±(99.9%) 84.537 ms/op
# Warmup Iteration   3: 1256.718 ±(99.9%) 180.274 ms/op
# Warmup Iteration   4: 1221.329 ±(99.9%) 158.094 ms/op
# Warmup Iteration   5: 1234.174 ±(99.9%) 61.524 ms/op
Iteration   1: 1266.680 ±(99.9%) 115.379 ms/op
                 executeQuery·p0.00:   1163.919 ms/op
                 executeQuery·p0.50:   1276.117 ms/op
                 executeQuery·p0.90:   1342.177 ms/op
                 executeQuery·p0.95:   1342.177 ms/op
                 executeQuery·p0.99:   1342.177 ms/op
                 executeQuery·p0.999:  1342.177 ms/op
                 executeQuery·p0.9999: 1342.177 ms/op
                 executeQuery·p1.00:   1342.177 ms/op

Iteration   2: 1252.262 ±(99.9%) 91.018 ms/op
                 executeQuery·p0.00:   1189.085 ms/op
                 executeQuery·p0.50:   1250.951 ms/op
                 executeQuery·p0.90:   1308.623 ms/op
                 executeQuery·p0.95:   1308.623 ms/op
                 executeQuery·p0.99:   1308.623 ms/op
                 executeQuery·p0.999:  1308.623 ms/op
                 executeQuery·p0.9999: 1308.623 ms/op
                 executeQuery·p1.00:   1308.623 ms/op

Iteration   3: 1283.719 ±(99.9%) 121.496 ms/op
                 executeQuery·p0.00:   1182.794 ms/op
                 executeQuery·p0.50:   1298.137 ms/op
                 executeQuery·p0.90:   1346.372 ms/op
                 executeQuery·p0.95:   1346.372 ms/op
                 executeQuery·p0.99:   1346.372 ms/op
                 executeQuery·p0.999:  1346.372 ms/op
                 executeQuery·p0.9999: 1346.372 ms/op
                 executeQuery·p1.00:   1346.372 ms/op

Iteration   4: 1263.796 ±(99.9%) 91.484 ms/op
                 executeQuery·p0.00:   1195.377 ms/op
                 executeQuery·p0.50:   1258.291 ms/op
                 executeQuery·p0.90:   1327.497 ms/op
                 executeQuery·p0.95:   1327.497 ms/op
                 executeQuery·p0.99:   1327.497 ms/op
                 executeQuery·p0.999:  1327.497 ms/op
                 executeQuery·p0.9999: 1327.497 ms/op
                 executeQuery·p1.00:   1327.497 ms/op

Iteration   5: 1254.359 ±(99.9%) 135.729 ms/op
                 executeQuery·p0.00:   1134.559 ms/op
                 executeQuery·p0.50:   1249.903 ms/op
                 executeQuery·p0.90:   1386.217 ms/op
                 executeQuery·p0.95:   1386.217 ms/op
                 executeQuery·p0.99:   1386.217 ms/op
                 executeQuery·p0.999:  1386.217 ms/op
                 executeQuery·p0.9999: 1386.217 ms/op
                 executeQuery·p1.00:   1386.217 ms/op


# Run progress: 51.25% complete, ETA 04:57:32
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1354.760 ±(99.9%) 255.104 ms/op
# Warmup Iteration   2: 1228.931 ±(99.9%) 128.471 ms/op
# Warmup Iteration   3: 1244.135 ±(99.9%) 149.181 ms/op
# Warmup Iteration   4: 1234.436 ±(99.9%) 146.308 ms/op
# Warmup Iteration   5: 1277.690 ±(99.9%) 177.540 ms/op
Iteration   1: 1228.931 ±(99.9%) 194.224 ms/op
                 executeQuery·p0.00:   1103.102 ms/op
                 executeQuery·p0.50:   1228.931 ms/op
                 executeQuery·p0.90:   1430.258 ms/op
                 executeQuery·p0.95:   1430.258 ms/op
                 executeQuery·p0.99:   1430.258 ms/op
                 executeQuery·p0.999:  1430.258 ms/op
                 executeQuery·p0.9999: 1430.258 ms/op
                 executeQuery·p1.00:   1430.258 ms/op

Iteration   2: 1255.408 ±(99.9%) 133.692 ms/op
                 executeQuery·p0.00:   1140.851 ms/op
                 executeQuery·p0.50:   1249.903 ms/op
                 executeQuery·p0.90:   1373.635 ms/op
                 executeQuery·p0.95:   1373.635 ms/op
                 executeQuery·p0.99:   1373.635 ms/op
                 executeQuery·p0.999:  1373.635 ms/op
                 executeQuery·p0.9999: 1373.635 ms/op
                 executeQuery·p1.00:   1373.635 ms/op

Iteration   3: 1255.145 ±(99.9%) 59.705 ms/op
                 executeQuery·p0.00:   1214.251 ms/op
                 executeQuery·p0.50:   1247.805 ms/op
                 executeQuery·p0.90:   1314.914 ms/op
                 executeQuery·p0.95:   1314.914 ms/op
                 executeQuery·p0.99:   1314.914 ms/op
                 executeQuery·p0.999:  1314.914 ms/op
                 executeQuery·p0.9999: 1314.914 ms/op
                 executeQuery·p1.00:   1314.914 ms/op

Iteration   4: 1247.019 ±(99.9%) 129.822 ms/op
                 executeQuery·p0.00:   1161.822 ms/op
                 executeQuery·p0.50:   1245.708 ms/op
                 executeQuery·p0.90:   1371.537 ms/op
                 executeQuery·p0.95:   1371.537 ms/op
                 executeQuery·p0.99:   1371.537 ms/op
                 executeQuery·p0.999:  1371.537 ms/op
                 executeQuery·p0.9999: 1371.537 ms/op
                 executeQuery·p1.00:   1371.537 ms/op

Iteration   5: 1244.660 ±(99.9%) 130.810 ms/op
                 executeQuery·p0.00:   1094.713 ms/op
                 executeQuery·p0.50:   1253.048 ms/op
                 executeQuery·p0.90:   1333.789 ms/op
                 executeQuery·p0.95:   1333.789 ms/op
                 executeQuery·p0.99:   1333.789 ms/op
                 executeQuery·p0.999:  1333.789 ms/op
                 executeQuery·p0.9999: 1333.789 ms/op
                 executeQuery·p1.00:   1333.789 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 202
  mean =   1244.898 ±(99.9%) 17.811 ms/op

  Histogram, ms/op:
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 6 
    [1100.000, 1150.000) = 23 
    [1150.000, 1200.000) = 26 
    [1200.000, 1250.000) = 55 
    [1250.000, 1300.000) = 49 
    [1300.000, 1350.000) = 26 
    [1350.000, 1400.000) = 11 
    [1400.000, 1450.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =   1084.228 ms/op
     p(50.0000) =   1245.708 ms/op
     p(90.0000) =   1345.742 ms/op
     p(95.0000) =   1384.330 ms/op
     p(99.0000) =   1429.754 ms/op
     p(99.9000) =   1455.423 ms/op
     p(99.9900) =   1455.423 ms/op
     p(99.9990) =   1455.423 ms/op
     p(99.9999) =   1455.423 ms/op
    p(100.0000) =   1455.423 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4)

# Run progress: 51.56% complete, ETA 04:55:29
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1449.132 ±(99.9%) 472.254 ms/op
# Warmup Iteration   2: 1306.526 ±(99.9%) 143.775 ms/op
# Warmup Iteration   3: 1263.796 ±(99.9%) 79.560 ms/op
# Warmup Iteration   4: 1283.457 ±(99.9%) 69.119 ms/op
# Warmup Iteration   5: 1264.321 ±(99.9%) 118.569 ms/op
Iteration   1: 1255.408 ±(99.9%) 219.714 ms/op
                 executeQuery·p0.00:   1107.296 ms/op
                 executeQuery·p0.50:   1265.631 ms/op
                 executeQuery·p0.90:   1478.492 ms/op
                 executeQuery·p0.95:   1478.492 ms/op
                 executeQuery·p0.99:   1478.492 ms/op
                 executeQuery·p0.999:  1478.492 ms/op
                 executeQuery·p0.9999: 1478.492 ms/op
                 executeQuery·p1.00:   1478.492 ms/op

Iteration   2: 1281.622 ±(99.9%) 151.650 ms/op
                 executeQuery·p0.00:   1168.114 ms/op
                 executeQuery·p0.50:   1281.360 ms/op
                 executeQuery·p0.90:   1369.440 ms/op
                 executeQuery·p0.95:   1369.440 ms/op
                 executeQuery·p0.99:   1369.440 ms/op
                 executeQuery·p0.999:  1369.440 ms/op
                 executeQuery·p0.9999: 1369.440 ms/op
                 executeQuery·p1.00:   1369.440 ms/op

Iteration   3: 1281.360 ±(99.9%) 119.467 ms/op
                 executeQuery·p0.00:   1182.794 ms/op
                 executeQuery·p0.50:   1300.234 ms/op
                 executeQuery·p0.90:   1375.732 ms/op
                 executeQuery·p0.95:   1375.732 ms/op
                 executeQuery·p0.99:   1375.732 ms/op
                 executeQuery·p0.999:  1375.732 ms/op
                 executeQuery·p0.9999: 1375.732 ms/op
                 executeQuery·p1.00:   1375.732 ms/op

Iteration   4: 1306.526 ±(99.9%) 92.086 ms/op
                 executeQuery·p0.00:   1235.223 ms/op
                 executeQuery·p0.50:   1307.574 ms/op
                 executeQuery·p0.90:   1386.217 ms/op
                 executeQuery·p0.95:   1386.217 ms/op
                 executeQuery·p0.99:   1386.217 ms/op
                 executeQuery·p0.999:  1386.217 ms/op
                 executeQuery·p0.9999: 1386.217 ms/op
                 executeQuery·p1.00:   1386.217 ms/op

Iteration   5: 1292.894 ±(99.9%) 69.615 ms/op
                 executeQuery·p0.00:   1239.417 ms/op
                 executeQuery·p0.50:   1298.137 ms/op
                 executeQuery·p0.90:   1333.789 ms/op
                 executeQuery·p0.95:   1333.789 ms/op
                 executeQuery·p0.99:   1333.789 ms/op
                 executeQuery·p0.999:  1333.789 ms/op
                 executeQuery·p0.9999: 1333.789 ms/op
                 executeQuery·p1.00:   1333.789 ms/op


# Run progress: 51.88% complete, ETA 04:53:27
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1358.692 ±(99.9%) 254.702 ms/op
# Warmup Iteration   2: 1276.903 ±(99.9%) 170.716 ms/op
# Warmup Iteration   3: 1259.602 ±(99.9%) 97.559 ms/op
# Warmup Iteration   4: 1248.068 ±(99.9%) 86.887 ms/op
# Warmup Iteration   5: 1266.942 ±(99.9%) 116.576 ms/op
Iteration   1: 1259.340 ±(99.9%) 99.749 ms/op
                 executeQuery·p0.00:   1155.531 ms/op
                 executeQuery·p0.50:   1275.068 ms/op
                 executeQuery·p0.90:   1310.720 ms/op
                 executeQuery·p0.95:   1310.720 ms/op
                 executeQuery·p0.99:   1310.720 ms/op
                 executeQuery·p0.999:  1310.720 ms/op
                 executeQuery·p0.9999: 1310.720 ms/op
                 executeQuery·p1.00:   1310.720 ms/op

Iteration   2: 1224.038 ±(99.9%) 125.181 ms/op
                 executeQuery·p0.00:   1096.810 ms/op
                 executeQuery·p0.50:   1243.611 ms/op
                 executeQuery·p0.90:   1321.206 ms/op
                 executeQuery·p0.95:   1321.206 ms/op
                 executeQuery·p0.99:   1321.206 ms/op
                 executeQuery·p0.999:  1321.206 ms/op
                 executeQuery·p0.9999: 1321.206 ms/op
                 executeQuery·p1.00:   1321.206 ms/op

Iteration   3: 1254.883 ±(99.9%) 109.495 ms/op
                 executeQuery·p0.00:   1174.405 ms/op
                 executeQuery·p0.50:   1268.777 ms/op
                 executeQuery·p0.90:   1323.303 ms/op
                 executeQuery·p0.95:   1323.303 ms/op
                 executeQuery·p0.99:   1323.303 ms/op
                 executeQuery·p0.999:  1323.303 ms/op
                 executeQuery·p0.9999: 1323.303 ms/op
                 executeQuery·p1.00:   1323.303 ms/op

Iteration   4: 1259.864 ±(99.9%) 119.405 ms/op
                 executeQuery·p0.00:   1149.239 ms/op
                 executeQuery·p0.50:   1270.874 ms/op
                 executeQuery·p0.90:   1356.857 ms/op
                 executeQuery·p0.95:   1356.857 ms/op
                 executeQuery·p0.99:   1356.857 ms/op
                 executeQuery·p0.999:  1356.857 ms/op
                 executeQuery·p0.9999: 1356.857 ms/op
                 executeQuery·p1.00:   1356.857 ms/op

Iteration   5: 1267.991 ±(99.9%) 77.690 ms/op
                 executeQuery·p0.00:   1216.348 ms/op
                 executeQuery·p0.50:   1265.631 ms/op
                 executeQuery·p0.90:   1331.692 ms/op
                 executeQuery·p0.95:   1331.692 ms/op
                 executeQuery·p0.99:   1331.692 ms/op
                 executeQuery·p0.999:  1331.692 ms/op
                 executeQuery·p0.9999: 1331.692 ms/op
                 executeQuery·p1.00:   1331.692 ms/op


# Run progress: 52.19% complete, ETA 04:51:26
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1469.504 ±(99.9%) 496.815 ms/op
# Warmup Iteration   2: 1308.099 ±(99.9%) 108.986 ms/op
# Warmup Iteration   3: 1266.418 ±(99.9%) 169.108 ms/op
# Warmup Iteration   4: 1299.972 ±(99.9%) 136.388 ms/op
# Warmup Iteration   5: 1268.253 ±(99.9%) 133.878 ms/op
Iteration   1: 1301.545 ±(99.9%) 77.216 ms/op
                 executeQuery·p0.00:   1249.903 ms/op
                 executeQuery·p0.50:   1291.846 ms/op
                 executeQuery·p0.90:   1384.120 ms/op
                 executeQuery·p0.95:   1384.120 ms/op
                 executeQuery·p0.99:   1384.120 ms/op
                 executeQuery·p0.999:  1384.120 ms/op
                 executeQuery·p0.9999: 1384.120 ms/op
                 executeQuery·p1.00:   1384.120 ms/op

Iteration   2: 1299.710 ±(99.9%) 58.764 ms/op
                 executeQuery·p0.00:   1233.125 ms/op
                 executeQuery·p0.50:   1303.380 ms/op
                 executeQuery·p0.90:   1335.886 ms/op
                 executeQuery·p0.95:   1335.886 ms/op
                 executeQuery·p0.99:   1335.886 ms/op
                 executeQuery·p0.999:  1335.886 ms/op
                 executeQuery·p0.9999: 1335.886 ms/op
                 executeQuery·p1.00:   1335.886 ms/op

Iteration   3: 1293.418 ±(99.9%) 243.512 ms/op
                 executeQuery·p0.00:   1130.365 ms/op
                 executeQuery·p0.50:   1277.166 ms/op
                 executeQuery·p0.90:   1449.132 ms/op
                 executeQuery·p0.95:   1449.132 ms/op
                 executeQuery·p0.99:   1449.132 ms/op
                 executeQuery·p0.999:  1449.132 ms/op
                 executeQuery·p0.9999: 1449.132 ms/op
                 executeQuery·p1.00:   1449.132 ms/op

Iteration   4: 1256.980 ±(99.9%) 249.284 ms/op
                 executeQuery·p0.00:   1130.365 ms/op
                 executeQuery·p0.50:   1217.397 ms/op
                 executeQuery·p0.90:   1468.006 ms/op
                 executeQuery·p0.95:   1468.006 ms/op
                 executeQuery·p0.99:   1468.006 ms/op
                 executeQuery·p0.999:  1468.006 ms/op
                 executeQuery·p0.9999: 1468.006 ms/op
                 executeQuery·p1.00:   1468.006 ms/op

Iteration   5: 1305.215 ±(99.9%) 118.268 ms/op
                 executeQuery·p0.00:   1201.668 ms/op
                 executeQuery·p0.50:   1300.234 ms/op
                 executeQuery·p0.90:   1419.772 ms/op
                 executeQuery·p0.95:   1419.772 ms/op
                 executeQuery·p0.99:   1419.772 ms/op
                 executeQuery·p0.999:  1419.772 ms/op
                 executeQuery·p0.9999: 1419.772 ms/op
                 executeQuery·p1.00:   1419.772 ms/op


# Run progress: 52.50% complete, ETA 04:49:26
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1355.547 ±(99.9%) 223.404 ms/op
# Warmup Iteration   2: 1269.563 ±(99.9%) 73.716 ms/op
# Warmup Iteration   3: 1277.952 ±(99.9%) 88.290 ms/op
# Warmup Iteration   4: 1258.815 ±(99.9%) 110.264 ms/op
# Warmup Iteration   5: 1260.913 ±(99.9%) 131.681 ms/op
Iteration   1: 1290.273 ±(99.9%) 118.420 ms/op
                 executeQuery·p0.00:   1166.017 ms/op
                 executeQuery·p0.50:   1294.991 ms/op
                 executeQuery·p0.90:   1388.315 ms/op
                 executeQuery·p0.95:   1388.315 ms/op
                 executeQuery·p0.99:   1388.315 ms/op
                 executeQuery·p0.999:  1388.315 ms/op
                 executeQuery·p0.9999: 1388.315 ms/op
                 executeQuery·p1.00:   1388.315 ms/op

Iteration   2: 1255.408 ±(99.9%) 60.048 ms/op
                 executeQuery·p0.00:   1205.862 ms/op
                 executeQuery·p0.50:   1269.826 ms/op
                 executeQuery·p0.90:   1285.554 ms/op
                 executeQuery·p0.95:   1285.554 ms/op
                 executeQuery·p0.99:   1285.554 ms/op
                 executeQuery·p0.999:  1285.554 ms/op
                 executeQuery·p0.9999: 1285.554 ms/op
                 executeQuery·p1.00:   1285.554 ms/op

Iteration   3: 1283.981 ±(99.9%) 66.984 ms/op
                 executeQuery·p0.00:   1241.514 ms/op
                 executeQuery·p0.50:   1271.923 ms/op
                 executeQuery·p0.90:   1335.886 ms/op
                 executeQuery·p0.95:   1335.886 ms/op
                 executeQuery·p0.99:   1335.886 ms/op
                 executeQuery·p0.999:  1335.886 ms/op
                 executeQuery·p0.9999: 1335.886 ms/op
                 executeQuery·p1.00:   1335.886 ms/op

Iteration   4: 1288.438 ±(99.9%) 190.462 ms/op
                 executeQuery·p0.00:   1178.599 ms/op
                 executeQuery·p0.50:   1268.777 ms/op
                 executeQuery·p0.90:   1470.104 ms/op
                 executeQuery·p0.95:   1470.104 ms/op
                 executeQuery·p0.99:   1470.104 ms/op
                 executeQuery·p0.999:  1470.104 ms/op
                 executeQuery·p0.9999: 1470.104 ms/op
                 executeQuery·p1.00:   1470.104 ms/op

Iteration   5: 1237.320 ±(99.9%) 92.459 ms/op
                 executeQuery·p0.00:   1166.017 ms/op
                 executeQuery·p0.50:   1264.583 ms/op
                 executeQuery·p0.90:   1281.360 ms/op
                 executeQuery·p0.95:   1281.360 ms/op
                 executeQuery·p0.99:   1281.360 ms/op
                 executeQuery·p0.999:  1281.360 ms/op
                 executeQuery·p0.9999: 1281.360 ms/op
                 executeQuery·p1.00:   1281.360 ms/op


# Run progress: 52.81% complete, ETA 04:47:25
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1439.245 ±(99.9%) 443.866 ms/op
# Warmup Iteration   2: 1281.098 ±(99.9%) 124.004 ms/op
# Warmup Iteration   3: 1294.205 ±(99.9%) 122.213 ms/op
# Warmup Iteration   4: 1258.029 ±(99.9%) 88.718 ms/op
# Warmup Iteration   5: 1263.010 ±(99.9%) 89.242 ms/op
Iteration   1: 1251.213 ±(99.9%) 153.584 ms/op
                 executeQuery·p0.00:   1121.976 ms/op
                 executeQuery·p0.50:   1259.340 ms/op
                 executeQuery·p0.90:   1367.343 ms/op
                 executeQuery·p0.95:   1367.343 ms/op
                 executeQuery·p0.99:   1367.343 ms/op
                 executeQuery·p0.999:  1367.343 ms/op
                 executeQuery·p0.9999: 1367.343 ms/op
                 executeQuery·p1.00:   1367.343 ms/op

Iteration   2: 1292.632 ±(99.9%) 87.243 ms/op
                 executeQuery·p0.00:   1216.348 ms/op
                 executeQuery·p0.50:   1303.380 ms/op
                 executeQuery·p0.90:   1333.789 ms/op
                 executeQuery·p0.95:   1333.789 ms/op
                 executeQuery·p0.99:   1333.789 ms/op
                 executeQuery·p0.999:  1333.789 ms/op
                 executeQuery·p0.9999: 1333.789 ms/op
                 executeQuery·p1.00:   1333.789 ms/op

Iteration   3: 1264.058 ±(99.9%) 138.615 ms/op
                 executeQuery·p0.00:   1130.365 ms/op
                 executeQuery·p0.50:   1267.728 ms/op
                 executeQuery·p0.90:   1344.274 ms/op
                 executeQuery·p0.95:   1344.274 ms/op
                 executeQuery·p0.99:   1344.274 ms/op
                 executeQuery·p0.999:  1344.274 ms/op
                 executeQuery·p0.9999: 1344.274 ms/op
                 executeQuery·p1.00:   1344.274 ms/op

Iteration   4: 1296.302 ±(99.9%) 103.621 ms/op
                 executeQuery·p0.00:   1193.279 ms/op
                 executeQuery·p0.50:   1310.720 ms/op
                 executeQuery·p0.90:   1367.343 ms/op
                 executeQuery·p0.95:   1367.343 ms/op
                 executeQuery·p0.99:   1367.343 ms/op
                 executeQuery·p0.999:  1367.343 ms/op
                 executeQuery·p0.9999: 1367.343 ms/op
                 executeQuery·p1.00:   1367.343 ms/op

Iteration   5: 1293.156 ±(99.9%) 132.432 ms/op
                 executeQuery·p0.00:   1178.599 ms/op
                 executeQuery·p0.50:   1292.894 ms/op
                 executeQuery·p0.90:   1428.161 ms/op
                 executeQuery·p0.95:   1428.161 ms/op
                 executeQuery·p0.99:   1428.161 ms/op
                 executeQuery·p0.999:  1428.161 ms/op
                 executeQuery·p0.9999: 1428.161 ms/op
                 executeQuery·p1.00:   1428.161 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 201
  mean =   1275.486 ±(99.9%) 16.419 ms/op

  Histogram, ms/op:
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 1 
    [1100.000, 1150.000) = 8 
    [1150.000, 1200.000) = 22 
    [1200.000, 1250.000) = 31 
    [1250.000, 1300.000) = 68 
    [1300.000, 1350.000) = 51 
    [1350.000, 1400.000) = 11 
    [1400.000, 1450.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =   1096.810 ms/op
     p(50.0000) =   1281.360 ms/op
     p(90.0000) =   1349.308 ms/op
     p(95.0000) =   1388.105 ms/op
     p(99.0000) =   1470.062 ms/op
     p(99.9000) =   1478.492 ms/op
     p(99.9900) =   1478.492 ms/op
     p(99.9990) =   1478.492 ms/op
     p(99.9999) =   1478.492 ms/op
    p(100.0000) =   1478.492 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6)

# Run progress: 53.13% complete, ETA 04:45:24
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1434.452 ±(99.9%) 364.528 ms/op
# Warmup Iteration   2: 1314.914 ±(99.9%) 123.569 ms/op
# Warmup Iteration   3: 1293.156 ±(99.9%) 81.668 ms/op
# Warmup Iteration   4: 1294.991 ±(99.9%) 216.089 ms/op
# Warmup Iteration   5: 1288.700 ±(99.9%) 158.211 ms/op
Iteration   1: 1281.098 ±(99.9%) 141.496 ms/op
                 executeQuery·p0.00:   1142.948 ms/op
                 executeQuery·p0.50:   1293.943 ms/op
                 executeQuery·p0.90:   1388.315 ms/op
                 executeQuery·p0.95:   1388.315 ms/op
                 executeQuery·p0.99:   1388.315 ms/op
                 executeQuery·p0.999:  1388.315 ms/op
                 executeQuery·p0.9999: 1388.315 ms/op
                 executeQuery·p1.00:   1388.315 ms/op

Iteration   2: 1306.788 ±(99.9%) 39.429 ms/op
                 executeQuery·p0.00:   1275.068 ms/op
                 executeQuery·p0.50:   1307.574 ms/op
                 executeQuery·p0.90:   1340.080 ms/op
                 executeQuery·p0.95:   1340.080 ms/op
                 executeQuery·p0.99:   1340.080 ms/op
                 executeQuery·p0.999:  1340.080 ms/op
                 executeQuery·p0.9999: 1340.080 ms/op
                 executeQuery·p1.00:   1340.080 ms/op

Iteration   3: 1297.613 ±(99.9%) 139.457 ms/op
                 executeQuery·p0.00:   1191.182 ms/op
                 executeQuery·p0.50:   1302.331 ms/op
                 executeQuery·p0.90:   1426.063 ms/op
                 executeQuery·p0.95:   1426.063 ms/op
                 executeQuery·p0.99:   1426.063 ms/op
                 executeQuery·p0.999:  1426.063 ms/op
                 executeQuery·p0.9999: 1426.063 ms/op
                 executeQuery·p1.00:   1426.063 ms/op

Iteration   4: 1298.137 ±(99.9%) 92.708 ms/op
                 executeQuery·p0.00:   1193.279 ms/op
                 executeQuery·p0.50:   1306.526 ms/op
                 executeQuery·p0.90:   1365.246 ms/op
                 executeQuery·p0.95:   1365.246 ms/op
                 executeQuery·p0.99:   1365.246 ms/op
                 executeQuery·p0.999:  1365.246 ms/op
                 executeQuery·p0.9999: 1365.246 ms/op
                 executeQuery·p1.00:   1365.246 ms/op

Iteration   5: 1297.613 ±(99.9%) 96.298 ms/op
                 executeQuery·p0.00:   1195.377 ms/op
                 executeQuery·p0.50:   1307.574 ms/op
                 executeQuery·p0.90:   1377.829 ms/op
                 executeQuery·p0.95:   1377.829 ms/op
                 executeQuery·p0.99:   1377.829 ms/op
                 executeQuery·p0.999:  1377.829 ms/op
                 executeQuery·p0.9999: 1377.829 ms/op
                 executeQuery·p1.00:   1377.829 ms/op


# Run progress: 53.44% complete, ETA 04:43:25
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1418.873 ±(99.9%) 390.508 ms/op
# Warmup Iteration   2: 1316.487 ±(99.9%) 192.713 ms/op
# Warmup Iteration   3: 1290.535 ±(99.9%) 100.687 ms/op
# Warmup Iteration   4: 1299.186 ±(99.9%) 178.896 ms/op
# Warmup Iteration   5: 1275.855 ±(99.9%) 175.552 ms/op
Iteration   1: 1294.467 ±(99.9%) 238.942 ms/op
                 executeQuery·p0.00:   1145.045 ms/op
                 executeQuery·p0.50:   1287.651 ms/op
                 executeQuery·p0.90:   1501.561 ms/op
                 executeQuery·p0.95:   1501.561 ms/op
                 executeQuery·p0.99:   1501.561 ms/op
                 executeQuery·p0.999:  1501.561 ms/op
                 executeQuery·p0.9999: 1501.561 ms/op
                 executeQuery·p1.00:   1501.561 ms/op

Iteration   2: 1321.992 ±(99.9%) 172.875 ms/op
                 executeQuery·p0.00:   1178.599 ms/op
                 executeQuery·p0.50:   1354.760 ms/op
                 executeQuery·p0.90:   1402.995 ms/op
                 executeQuery·p0.95:   1402.995 ms/op
                 executeQuery·p0.99:   1402.995 ms/op
                 executeQuery·p0.999:  1402.995 ms/op
                 executeQuery·p0.9999: 1402.995 ms/op
                 executeQuery·p1.00:   1402.995 ms/op

Iteration   3: 1299.710 ±(99.9%) 82.863 ms/op
                 executeQuery·p0.00:   1235.223 ms/op
                 executeQuery·p0.50:   1297.089 ms/op
                 executeQuery·p0.90:   1386.217 ms/op
                 executeQuery·p0.95:   1386.217 ms/op
                 executeQuery·p0.99:   1386.217 ms/op
                 executeQuery·p0.999:  1386.217 ms/op
                 executeQuery·p0.9999: 1386.217 ms/op
                 executeQuery·p1.00:   1386.217 ms/op

Iteration   4: 1278.214 ±(99.9%) 97.701 ms/op
                 executeQuery·p0.00:   1163.919 ms/op
                 executeQuery·p0.50:   1302.331 ms/op
                 executeQuery·p0.90:   1314.914 ms/op
                 executeQuery·p0.95:   1314.914 ms/op
                 executeQuery·p0.99:   1314.914 ms/op
                 executeQuery·p0.999:  1314.914 ms/op
                 executeQuery·p0.9999: 1314.914 ms/op
                 executeQuery·p1.00:   1314.914 ms/op

Iteration   5: 1293.681 ±(99.9%) 66.422 ms/op
                 executeQuery·p0.00:   1220.542 ms/op
                 executeQuery·p0.50:   1293.943 ms/op
                 executeQuery·p0.90:   1331.692 ms/op
                 executeQuery·p0.95:   1331.692 ms/op
                 executeQuery·p0.99:   1331.692 ms/op
                 executeQuery·p0.999:  1331.692 ms/op
                 executeQuery·p0.9999: 1331.692 ms/op
                 executeQuery·p1.00:   1331.692 ms/op


# Run progress: 53.75% complete, ETA 04:41:25
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1419.472 ±(99.9%) 390.142 ms/op
# Warmup Iteration   2: 1312.031 ±(99.9%) 184.781 ms/op
# Warmup Iteration   3: 1276.641 ±(99.9%) 144.091 ms/op
# Warmup Iteration   4: 1274.282 ±(99.9%) 140.788 ms/op
# Warmup Iteration   5: 1271.661 ±(99.9%) 184.171 ms/op
Iteration   1: 1279.525 ±(99.9%) 153.067 ms/op
                 executeQuery·p0.00:   1166.017 ms/op
                 executeQuery·p0.50:   1257.243 ms/op
                 executeQuery·p0.90:   1415.578 ms/op
                 executeQuery·p0.95:   1415.578 ms/op
                 executeQuery·p0.99:   1415.578 ms/op
                 executeQuery·p0.999:  1415.578 ms/op
                 executeQuery·p0.9999: 1415.578 ms/op
                 executeQuery·p1.00:   1415.578 ms/op

Iteration   2: 1270.350 ±(99.9%) 109.700 ms/op
                 executeQuery·p0.00:   1168.114 ms/op
                 executeQuery·p0.50:   1280.311 ms/op
                 executeQuery·p0.90:   1356.857 ms/op
                 executeQuery·p0.95:   1356.857 ms/op
                 executeQuery·p0.99:   1356.857 ms/op
                 executeQuery·p0.999:  1356.857 ms/op
                 executeQuery·p0.9999: 1356.857 ms/op
                 executeQuery·p1.00:   1356.857 ms/op

Iteration   3: 1281.098 ±(99.9%) 130.396 ms/op
                 executeQuery·p0.00:   1170.211 ms/op
                 executeQuery·p0.50:   1286.603 ms/op
                 executeQuery·p0.90:   1361.052 ms/op
                 executeQuery·p0.95:   1361.052 ms/op
                 executeQuery·p0.99:   1361.052 ms/op
                 executeQuery·p0.999:  1361.052 ms/op
                 executeQuery·p0.9999: 1361.052 ms/op
                 executeQuery·p1.00:   1361.052 ms/op

Iteration   4: 1277.690 ±(99.9%) 129.819 ms/op
                 executeQuery·p0.00:   1166.017 ms/op
                 executeQuery·p0.50:   1265.631 ms/op
                 executeQuery·p0.90:   1371.537 ms/op
                 executeQuery·p0.95:   1371.537 ms/op
                 executeQuery·p0.99:   1371.537 ms/op
                 executeQuery·p0.999:  1371.537 ms/op
                 executeQuery·p0.9999: 1371.537 ms/op
                 executeQuery·p1.00:   1371.537 ms/op

Iteration   5: 1292.632 ±(99.9%) 55.681 ms/op
                 executeQuery·p0.00:   1237.320 ms/op
                 executeQuery·p0.50:   1292.894 ms/op
                 executeQuery·p0.90:   1331.692 ms/op
                 executeQuery·p0.95:   1331.692 ms/op
                 executeQuery·p0.99:   1331.692 ms/op
                 executeQuery·p0.999:  1331.692 ms/op
                 executeQuery·p0.9999: 1331.692 ms/op
                 executeQuery·p1.00:   1331.692 ms/op


# Run progress: 54.06% complete, ETA 04:39:25
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1406.290 ±(99.9%) 330.592 ms/op
# Warmup Iteration   2: 1314.128 ±(99.9%) 89.402 ms/op
# Warmup Iteration   3: 1305.477 ±(99.9%) 120.748 ms/op
# Warmup Iteration   4: 1301.807 ±(99.9%) 175.772 ms/op
# Warmup Iteration   5: 1288.176 ±(99.9%) 180.262 ms/op
Iteration   1: 1312.817 ±(99.9%) 236.004 ms/op
                 executeQuery·p0.00:   1157.628 ms/op
                 executeQuery·p0.50:   1329.594 ms/op
                 executeQuery·p0.90:   1486.881 ms/op
                 executeQuery·p0.95:   1486.881 ms/op
                 executeQuery·p0.99:   1486.881 ms/op
                 executeQuery·p0.999:  1486.881 ms/op
                 executeQuery·p0.9999: 1486.881 ms/op
                 executeQuery·p1.00:   1486.881 ms/op

Iteration   2: 1327.759 ±(99.9%) 120.204 ms/op
                 executeQuery·p0.00:   1247.805 ms/op
                 executeQuery·p0.50:   1304.429 ms/op
                 executeQuery·p0.90:   1440.743 ms/op
                 executeQuery·p0.95:   1440.743 ms/op
                 executeQuery·p0.99:   1440.743 ms/op
                 executeQuery·p0.999:  1440.743 ms/op
                 executeQuery·p0.9999: 1440.743 ms/op
                 executeQuery·p1.00:   1440.743 ms/op

Iteration   3: 1298.137 ±(99.9%) 206.301 ms/op
                 executeQuery·p0.00:   1166.017 ms/op
                 executeQuery·p0.50:   1325.400 ms/op
                 executeQuery·p0.90:   1442.841 ms/op
                 executeQuery·p0.95:   1442.841 ms/op
                 executeQuery·p0.99:   1442.841 ms/op
                 executeQuery·p0.999:  1442.841 ms/op
                 executeQuery·p0.9999: 1442.841 ms/op
                 executeQuery·p1.00:   1442.841 ms/op

Iteration   4: 1317.798 ±(99.9%) 96.708 ms/op
                 executeQuery·p0.00:   1205.862 ms/op
                 executeQuery·p0.50:   1329.594 ms/op
                 executeQuery·p0.90:   1377.829 ms/op
                 executeQuery·p0.95:   1377.829 ms/op
                 executeQuery·p0.99:   1377.829 ms/op
                 executeQuery·p0.999:  1377.829 ms/op
                 executeQuery·p0.9999: 1377.829 ms/op
                 executeQuery·p1.00:   1377.829 ms/op

Iteration   5: 1311.769 ±(99.9%) 215.076 ms/op
                 executeQuery·p0.00:   1163.919 ms/op
                 executeQuery·p0.50:   1325.400 ms/op
                 executeQuery·p0.90:   1495.269 ms/op
                 executeQuery·p0.95:   1495.269 ms/op
                 executeQuery·p0.99:   1495.269 ms/op
                 executeQuery·p0.999:  1495.269 ms/op
                 executeQuery·p0.9999: 1495.269 ms/op
                 executeQuery·p1.00:   1495.269 ms/op


# Run progress: 54.37% complete, ETA 04:37:26
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1440.444 ±(99.9%) 298.007 ms/op
# Warmup Iteration   2: 1331.954 ±(99.9%) 83.792 ms/op
# Warmup Iteration   3: 1310.458 ±(99.9%) 158.232 ms/op
# Warmup Iteration   4: 1348.469 ±(99.9%) 169.779 ms/op
# Warmup Iteration   5: 1336.148 ±(99.9%) 81.231 ms/op
Iteration   1: 1303.118 ±(99.9%) 82.563 ms/op
                 executeQuery·p0.00:   1243.611 ms/op
                 executeQuery·p0.50:   1307.574 ms/op
                 executeQuery·p0.90:   1379.926 ms/op
                 executeQuery·p0.95:   1379.926 ms/op
                 executeQuery·p0.99:   1379.926 ms/op
                 executeQuery·p0.999:  1379.926 ms/op
                 executeQuery·p0.9999: 1379.926 ms/op
                 executeQuery·p1.00:   1379.926 ms/op

Iteration   2: 1333.527 ±(99.9%) 94.776 ms/op
                 executeQuery·p0.00:   1264.583 ms/op
                 executeQuery·p0.50:   1339.032 ms/op
                 executeQuery·p0.90:   1394.606 ms/op
                 executeQuery·p0.95:   1394.606 ms/op
                 executeQuery·p0.99:   1394.606 ms/op
                 executeQuery·p0.999:  1394.606 ms/op
                 executeQuery·p0.9999: 1394.606 ms/op
                 executeQuery·p1.00:   1394.606 ms/op

Iteration   3: 1327.497 ±(99.9%) 77.721 ms/op
                 executeQuery·p0.00:   1252.000 ms/op
                 executeQuery·p0.50:   1326.449 ms/op
                 executeQuery·p0.90:   1382.023 ms/op
                 executeQuery·p0.95:   1382.023 ms/op
                 executeQuery·p0.99:   1382.023 ms/op
                 executeQuery·p0.999:  1382.023 ms/op
                 executeQuery·p0.9999: 1382.023 ms/op
                 executeQuery·p1.00:   1382.023 ms/op

Iteration   4: 1331.954 ±(99.9%) 198.533 ms/op
                 executeQuery·p0.00:   1205.862 ms/op
                 executeQuery·p0.50:   1369.440 ms/op
                 executeQuery·p0.90:   1468.006 ms/op
                 executeQuery·p0.95:   1468.006 ms/op
                 executeQuery·p0.99:   1468.006 ms/op
                 executeQuery·p0.999:  1468.006 ms/op
                 executeQuery·p0.9999: 1468.006 ms/op
                 executeQuery·p1.00:   1468.006 ms/op

Iteration   5: 1302.594 ±(99.9%) 165.150 ms/op
                 executeQuery·p0.00:   1170.211 ms/op
                 executeQuery·p0.50:   1325.400 ms/op
                 executeQuery·p0.90:   1428.161 ms/op
                 executeQuery·p0.95:   1428.161 ms/op
                 executeQuery·p0.99:   1428.161 ms/op
                 executeQuery·p0.999:  1428.161 ms/op
                 executeQuery·p0.9999: 1428.161 ms/op
                 executeQuery·p1.00:   1428.161 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 200
  mean =   1301.503 ±(99.9%) 16.851 ms/op

  Histogram, ms/op:
    [1100.000, 1150.000) = 2 
    [1150.000, 1200.000) = 20 
    [1200.000, 1250.000) = 23 
    [1250.000, 1300.000) = 45 
    [1300.000, 1350.000) = 63 
    [1350.000, 1400.000) = 30 
    [1400.000, 1450.000) = 13 
    [1450.000, 1500.000) = 3 
    [1500.000, 1550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1142.948 ms/op
     p(50.0000) =   1304.429 ms/op
     p(90.0000) =   1392.299 ms/op
     p(95.0000) =   1425.539 ms/op
     p(99.0000) =   1495.185 ms/op
     p(99.9000) =   1501.561 ms/op
     p(99.9900) =   1501.561 ms/op
     p(99.9990) =   1501.561 ms/op
     p(99.9999) =   1501.561 ms/op
    p(100.0000) =   1501.561 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8)

# Run progress: 54.69% complete, ETA 04:35:29
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1506.354 ±(99.9%) 314.474 ms/op
# Warmup Iteration   2: 1334.837 ±(99.9%) 127.736 ms/op
# Warmup Iteration   3: 1336.148 ±(99.9%) 172.150 ms/op
# Warmup Iteration   4: 1299.448 ±(99.9%) 112.045 ms/op
# Warmup Iteration   5: 1351.877 ±(99.9%) 79.125 ms/op
Iteration   1: 1345.061 ±(99.9%) 117.684 ms/op
                 executeQuery·p0.00:   1214.251 ms/op
                 executeQuery·p0.50:   1362.100 ms/op
                 executeQuery·p0.90:   1419.772 ms/op
                 executeQuery·p0.95:   1419.772 ms/op
                 executeQuery·p0.99:   1419.772 ms/op
                 executeQuery·p0.999:  1419.772 ms/op
                 executeQuery·p0.9999: 1419.772 ms/op
                 executeQuery·p1.00:   1419.772 ms/op

Iteration   2: 1306.264 ±(99.9%) 189.064 ms/op
                 executeQuery·p0.00:   1168.114 ms/op
                 executeQuery·p0.50:   1320.157 ms/op
                 executeQuery·p0.90:   1488.978 ms/op
                 executeQuery·p0.95:   1488.978 ms/op
                 executeQuery·p0.99:   1488.978 ms/op
                 executeQuery·p0.999:  1488.978 ms/op
                 executeQuery·p0.9999: 1488.978 ms/op
                 executeQuery·p1.00:   1488.978 ms/op

Iteration   3: 1327.497 ±(99.9%) 138.403 ms/op
                 executeQuery·p0.00:   1220.542 ms/op
                 executeQuery·p0.50:   1328.546 ms/op
                 executeQuery·p0.90:   1457.521 ms/op
                 executeQuery·p0.95:   1457.521 ms/op
                 executeQuery·p0.99:   1457.521 ms/op
                 executeQuery·p0.999:  1457.521 ms/op
                 executeQuery·p0.9999: 1457.521 ms/op
                 executeQuery·p1.00:   1457.521 ms/op

Iteration   4: 1325.138 ±(99.9%) 128.925 ms/op
                 executeQuery·p0.00:   1260.388 ms/op
                 executeQuery·p0.50:   1311.769 ms/op
                 executeQuery·p0.90:   1442.841 ms/op
                 executeQuery·p0.95:   1442.841 ms/op
                 executeQuery·p0.99:   1442.841 ms/op
                 executeQuery·p0.999:  1442.841 ms/op
                 executeQuery·p0.9999: 1442.841 ms/op
                 executeQuery·p1.00:   1442.841 ms/op

Iteration   5: 1345.323 ±(99.9%) 96.590 ms/op
                 executeQuery·p0.00:   1277.166 ms/op
                 executeQuery·p0.50:   1332.740 ms/op
                 executeQuery·p0.90:   1432.355 ms/op
                 executeQuery·p0.95:   1432.355 ms/op
                 executeQuery·p0.99:   1432.355 ms/op
                 executeQuery·p0.999:  1432.355 ms/op
                 executeQuery·p0.9999: 1432.355 ms/op
                 executeQuery·p1.00:   1432.355 ms/op


# Run progress: 55.00% complete, ETA 04:33:32
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1453.027 ±(99.9%) 388.346 ms/op
# Warmup Iteration   2: 1350.828 ±(99.9%) 96.458 ms/op
# Warmup Iteration   3: 1306.526 ±(99.9%) 161.031 ms/op
# Warmup Iteration   4: 1318.060 ±(99.9%) 152.625 ms/op
# Warmup Iteration   5: 1306.264 ±(99.9%) 122.812 ms/op
Iteration   1: 1345.061 ±(99.9%) 123.027 ms/op
                 executeQuery·p0.00:   1226.834 ms/op
                 executeQuery·p0.50:   1350.566 ms/op
                 executeQuery·p0.90:   1438.646 ms/op
                 executeQuery·p0.95:   1438.646 ms/op
                 executeQuery·p0.99:   1438.646 ms/op
                 executeQuery·p0.999:  1438.646 ms/op
                 executeQuery·p0.9999: 1438.646 ms/op
                 executeQuery·p1.00:   1438.646 ms/op

Iteration   2: 1322.516 ±(99.9%) 130.844 ms/op
                 executeQuery·p0.00:   1231.028 ms/op
                 executeQuery·p0.50:   1320.157 ms/op
                 executeQuery·p0.90:   1440.743 ms/op
                 executeQuery·p0.95:   1440.743 ms/op
                 executeQuery·p0.99:   1440.743 ms/op
                 executeQuery·p0.999:  1440.743 ms/op
                 executeQuery·p0.9999: 1440.743 ms/op
                 executeQuery·p1.00:   1440.743 ms/op

Iteration   3: 1315.963 ±(99.9%) 59.319 ms/op
                 executeQuery·p0.00:   1270.874 ms/op
                 executeQuery·p0.50:   1305.477 ms/op
                 executeQuery·p0.90:   1367.343 ms/op
                 executeQuery·p0.95:   1367.343 ms/op
                 executeQuery·p0.99:   1367.343 ms/op
                 executeQuery·p0.999:  1367.343 ms/op
                 executeQuery·p0.9999: 1367.343 ms/op
                 executeQuery·p1.00:   1367.343 ms/op

Iteration   4: 1344.799 ±(99.9%) 95.460 ms/op
                 executeQuery·p0.00:   1268.777 ms/op
                 executeQuery·p0.50:   1335.886 ms/op
                 executeQuery·p0.90:   1415.578 ms/op
                 executeQuery·p0.95:   1415.578 ms/op
                 executeQuery·p0.99:   1415.578 ms/op
                 executeQuery·p0.999:  1415.578 ms/op
                 executeQuery·p0.9999: 1415.578 ms/op
                 executeQuery·p1.00:   1415.578 ms/op

Iteration   5: 1337.721 ±(99.9%) 169.148 ms/op
                 executeQuery·p0.00:   1235.223 ms/op
                 executeQuery·p0.50:   1339.032 ms/op
                 executeQuery·p0.90:   1493.172 ms/op
                 executeQuery·p0.95:   1493.172 ms/op
                 executeQuery·p0.99:   1493.172 ms/op
                 executeQuery·p0.999:  1493.172 ms/op
                 executeQuery·p0.9999: 1493.172 ms/op
                 executeQuery·p1.00:   1493.172 ms/op


# Run progress: 55.31% complete, ETA 04:31:35
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1426.063 ±(99.9%) 378.519 ms/op
# Warmup Iteration   2: 1358.692 ±(99.9%) 158.232 ms/op
# Warmup Iteration   3: 1335.362 ±(99.9%) 154.029 ms/op
# Warmup Iteration   4: 1360.790 ±(99.9%) 182.197 ms/op
# Warmup Iteration   5: 1330.119 ±(99.9%) 206.621 ms/op
Iteration   1: 1360.003 ±(99.9%) 99.818 ms/op
                 executeQuery·p0.00:   1300.234 ms/op
                 executeQuery·p0.50:   1340.080 ms/op
                 executeQuery·p0.90:   1442.841 ms/op
                 executeQuery·p0.95:   1442.841 ms/op
                 executeQuery·p0.99:   1442.841 ms/op
                 executeQuery·p0.999:  1442.841 ms/op
                 executeQuery·p0.9999: 1442.841 ms/op
                 executeQuery·p1.00:   1442.841 ms/op

Iteration   2: 1334.051 ±(99.9%) 152.526 ms/op
                 executeQuery·p0.00:   1191.182 ms/op
                 executeQuery·p0.50:   1342.177 ms/op
                 executeQuery·p0.90:   1451.229 ms/op
                 executeQuery·p0.95:   1451.229 ms/op
                 executeQuery·p0.99:   1451.229 ms/op
                 executeQuery·p0.999:  1451.229 ms/op
                 executeQuery·p0.9999: 1451.229 ms/op
                 executeQuery·p1.00:   1451.229 ms/op

Iteration   3: 1323.827 ±(99.9%) 154.044 ms/op
                 executeQuery·p0.00:   1191.182 ms/op
                 executeQuery·p0.50:   1323.303 ms/op
                 executeQuery·p0.90:   1470.104 ms/op
                 executeQuery·p0.95:   1470.104 ms/op
                 executeQuery·p0.99:   1470.104 ms/op
                 executeQuery·p0.999:  1470.104 ms/op
                 executeQuery·p0.9999: 1470.104 ms/op
                 executeQuery·p1.00:   1470.104 ms/op

Iteration   4: 1373.897 ±(99.9%) 85.743 ms/op
                 executeQuery·p0.00:   1296.040 ms/op
                 executeQuery·p0.50:   1374.683 ms/op
                 executeQuery·p0.90:   1444.938 ms/op
                 executeQuery·p0.95:   1444.938 ms/op
                 executeQuery·p0.99:   1444.938 ms/op
                 executeQuery·p0.999:  1444.938 ms/op
                 executeQuery·p0.9999: 1444.938 ms/op
                 executeQuery·p1.00:   1444.938 ms/op

Iteration   5: 1340.604 ±(99.9%) 72.326 ms/op
                 executeQuery·p0.00:   1289.748 ms/op
                 executeQuery·p0.50:   1334.837 ms/op
                 executeQuery·p0.90:   1384.120 ms/op
                 executeQuery·p0.95:   1384.120 ms/op
                 executeQuery·p0.99:   1384.120 ms/op
                 executeQuery·p0.999:  1384.120 ms/op
                 executeQuery·p0.9999: 1384.120 ms/op
                 executeQuery·p1.00:   1384.120 ms/op


# Run progress: 55.63% complete, ETA 04:29:39
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1437.148 ±(99.9%) 475.289 ms/op
# Warmup Iteration   2: 1281.622 ±(99.9%) 97.782 ms/op
# Warmup Iteration   3: 1242.825 ±(99.9%) 195.567 ms/op
# Warmup Iteration   4: 1246.233 ±(99.9%) 174.302 ms/op
# Warmup Iteration   5: 1267.204 ±(99.9%) 187.249 ms/op
Iteration   1: 1280.836 ±(99.9%) 95.267 ms/op
                 executeQuery·p0.00:   1207.960 ms/op
                 executeQuery·p0.50:   1278.214 ms/op
                 executeQuery·p0.90:   1369.440 ms/op
                 executeQuery·p0.95:   1369.440 ms/op
                 executeQuery·p0.99:   1369.440 ms/op
                 executeQuery·p0.999:  1369.440 ms/op
                 executeQuery·p0.9999: 1369.440 ms/op
                 executeQuery·p1.00:   1369.440 ms/op

Iteration   2: 1265.107 ±(99.9%) 101.772 ms/op
                 executeQuery·p0.00:   1184.891 ms/op
                 executeQuery·p0.50:   1262.486 ms/op
                 executeQuery·p0.90:   1344.274 ms/op
                 executeQuery·p0.95:   1344.274 ms/op
                 executeQuery·p0.99:   1344.274 ms/op
                 executeQuery·p0.999:  1344.274 ms/op
                 executeQuery·p0.9999: 1344.274 ms/op
                 executeQuery·p1.00:   1344.274 ms/op

Iteration   3: 1249.116 ±(99.9%) 240.753 ms/op
                 executeQuery·p0.00:   1115.685 ms/op
                 executeQuery·p0.50:   1204.814 ms/op
                 executeQuery·p0.90:   1457.521 ms/op
                 executeQuery·p0.95:   1457.521 ms/op
                 executeQuery·p0.99:   1457.521 ms/op
                 executeQuery·p0.999:  1457.521 ms/op
                 executeQuery·p0.9999: 1457.521 ms/op
                 executeQuery·p1.00:   1457.521 ms/op

Iteration   4: 1257.243 ±(99.9%) 216.831 ms/op
                 executeQuery·p0.00:   1113.588 ms/op
                 executeQuery·p0.50:   1224.737 ms/op
                 executeQuery·p0.90:   1444.938 ms/op
                 executeQuery·p0.95:   1444.938 ms/op
                 executeQuery·p0.99:   1444.938 ms/op
                 executeQuery·p0.999:  1444.938 ms/op
                 executeQuery·p0.9999: 1444.938 ms/op
                 executeQuery·p1.00:   1444.938 ms/op

Iteration   5: 1281.884 ±(99.9%) 116.009 ms/op
                 executeQuery·p0.00:   1205.862 ms/op
                 executeQuery·p0.50:   1267.728 ms/op
                 executeQuery·p0.90:   1375.732 ms/op
                 executeQuery·p0.95:   1375.732 ms/op
                 executeQuery·p0.99:   1375.732 ms/op
                 executeQuery·p0.999:  1375.732 ms/op
                 executeQuery·p0.9999: 1375.732 ms/op
                 executeQuery·p1.00:   1375.732 ms/op


# Run progress: 55.94% complete, ETA 04:27:38
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1480.589 ±(99.9%) 352.434 ms/op
# Warmup Iteration   2: 1339.556 ±(99.9%) 116.029 ms/op
# Warmup Iteration   3: 1339.294 ±(99.9%) 165.684 ms/op
# Warmup Iteration   4: 1359.479 ±(99.9%) 166.608 ms/op
# Warmup Iteration   5: 1301.021 ±(99.9%) 219.075 ms/op
Iteration   1: 1333.264 ±(99.9%) 169.315 ms/op
                 executeQuery·p0.00:   1161.822 ms/op
                 executeQuery·p0.50:   1336.934 ms/op
                 executeQuery·p0.90:   1419.772 ms/op
                 executeQuery·p0.95:   1419.772 ms/op
                 executeQuery·p0.99:   1419.772 ms/op
                 executeQuery·p0.999:  1419.772 ms/op
                 executeQuery·p0.9999: 1419.772 ms/op
                 executeQuery·p1.00:   1419.772 ms/op

Iteration   2: 1284.243 ±(99.9%) 210.193 ms/op
                 executeQuery·p0.00:   1161.822 ms/op
                 executeQuery·p0.50:   1280.311 ms/op
                 executeQuery·p0.90:   1457.521 ms/op
                 executeQuery·p0.95:   1457.521 ms/op
                 executeQuery·p0.99:   1457.521 ms/op
                 executeQuery·p0.999:  1457.521 ms/op
                 executeQuery·p0.9999: 1457.521 ms/op
                 executeQuery·p1.00:   1457.521 ms/op

Iteration   3: 1328.284 ±(99.9%) 194.176 ms/op
                 executeQuery·p0.00:   1170.211 ms/op
                 executeQuery·p0.50:   1327.497 ms/op
                 executeQuery·p0.90:   1484.784 ms/op
                 executeQuery·p0.95:   1484.784 ms/op
                 executeQuery·p0.99:   1484.784 ms/op
                 executeQuery·p0.999:  1484.784 ms/op
                 executeQuery·p0.9999: 1484.784 ms/op
                 executeQuery·p1.00:   1484.784 ms/op

Iteration   4: 1319.633 ±(99.9%) 128.574 ms/op
                 executeQuery·p0.00:   1191.182 ms/op
                 executeQuery·p0.50:   1312.817 ms/op
                 executeQuery·p0.90:   1415.578 ms/op
                 executeQuery·p0.95:   1415.578 ms/op
                 executeQuery·p0.99:   1415.578 ms/op
                 executeQuery·p0.999:  1415.578 ms/op
                 executeQuery·p0.9999: 1415.578 ms/op
                 executeQuery·p1.00:   1415.578 ms/op

Iteration   5: 1309.934 ±(99.9%) 92.483 ms/op
                 executeQuery·p0.00:   1231.028 ms/op
                 executeQuery·p0.50:   1311.769 ms/op
                 executeQuery·p0.90:   1394.606 ms/op
                 executeQuery·p0.95:   1394.606 ms/op
                 executeQuery·p0.99:   1394.606 ms/op
                 executeQuery·p0.999:  1394.606 ms/op
                 executeQuery·p0.9999: 1394.606 ms/op
                 executeQuery·p1.00:   1394.606 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 200
  mean =   1318.291 ±(99.9%) 18.165 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 2 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 9 
    [1175.000, 1200.000) = 5 
    [1200.000, 1225.000) = 8 
    [1225.000, 1250.000) = 12 
    [1250.000, 1275.000) = 16 
    [1275.000, 1300.000) = 20 
    [1300.000, 1325.000) = 32 
    [1325.000, 1350.000) = 27 
    [1350.000, 1375.000) = 22 
    [1375.000, 1400.000) = 19 
    [1400.000, 1425.000) = 13 
    [1425.000, 1450.000) = 7 
    [1450.000, 1475.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =   1113.588 ms/op
     p(50.0000) =   1322.254 ms/op
     p(90.0000) =   1415.578 ms/op
     p(95.0000) =   1444.833 ms/op
     p(99.0000) =   1488.936 ms/op
     p(99.9000) =   1493.172 ms/op
     p(99.9900) =   1493.172 ms/op
     p(99.9990) =   1493.172 ms/op
     p(99.9999) =   1493.172 ms/op
    p(100.0000) =   1493.172 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2)

# Run progress: 56.25% complete, ETA 04:25:42
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1792.366 ±(99.9%) 416.495 ms/op
# Warmup Iteration   2: 1687.159 ±(99.9%) 202.892 ms/op
# Warmup Iteration   3: 1663.741 ±(99.9%) 272.673 ms/op
# Warmup Iteration   4: 1643.818 ±(99.9%) 113.755 ms/op
# Warmup Iteration   5: 1682.265 ±(99.9%) 340.100 ms/op
Iteration   1: 1660.595 ±(99.9%) 174.112 ms/op
                 executeQuery·p0.00:   1558.184 ms/op
                 executeQuery·p0.50:   1672.479 ms/op
                 executeQuery·p0.90:   1740.636 ms/op
                 executeQuery·p0.95:   1740.636 ms/op
                 executeQuery·p0.99:   1740.636 ms/op
                 executeQuery·p0.999:  1740.636 ms/op
                 executeQuery·p0.9999: 1740.636 ms/op
                 executeQuery·p1.00:   1740.636 ms/op

Iteration   2: 1660.245 ±(99.9%) 324.558 ms/op
                 executeQuery·p0.00:   1488.978 ms/op
                 executeQuery·p0.50:   1672.479 ms/op
                 executeQuery·p0.90:   1814.036 ms/op
                 executeQuery·p0.95:   1814.036 ms/op
                 executeQuery·p0.99:   1814.036 ms/op
                 executeQuery·p0.999:  1814.036 ms/op
                 executeQuery·p0.9999: 1814.036 ms/op
                 executeQuery·p1.00:   1814.036 ms/op

Iteration   3: 1667.585 ±(99.9%) 340.771 ms/op
                 executeQuery·p0.00:   1533.018 ms/op
                 executeQuery·p0.50:   1658.847 ms/op
                 executeQuery·p0.90:   1845.494 ms/op
                 executeQuery·p0.95:   1845.494 ms/op
                 executeQuery·p0.99:   1845.494 ms/op
                 executeQuery·p0.999:  1845.494 ms/op
                 executeQuery·p0.9999: 1845.494 ms/op
                 executeQuery·p1.00:   1845.494 ms/op

Iteration   4: 1658.498 ±(99.9%) 204.511 ms/op
                 executeQuery·p0.00:   1598.030 ms/op
                 executeQuery·p0.50:   1634.730 ms/op
                 executeQuery·p0.90:   1788.871 ms/op
                 executeQuery·p0.95:   1788.871 ms/op
                 executeQuery·p0.99:   1788.871 ms/op
                 executeQuery·p0.999:  1788.871 ms/op
                 executeQuery·p0.9999: 1788.871 ms/op
                 executeQuery·p1.00:   1788.871 ms/op

Iteration   5: 1695.547 ±(99.9%) 254.599 ms/op
                 executeQuery·p0.00:   1537.212 ms/op
                 executeQuery·p0.50:   1699.742 ms/op
                 executeQuery·p0.90:   1784.676 ms/op
                 executeQuery·p0.95:   1784.676 ms/op
                 executeQuery·p0.99:   1784.676 ms/op
                 executeQuery·p0.999:  1784.676 ms/op
                 executeQuery·p0.9999: 1784.676 ms/op
                 executeQuery·p1.00:   1784.676 ms/op


# Run progress: 56.56% complete, ETA 04:23:41
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1756.714 ±(99.9%) 547.498 ms/op
# Warmup Iteration   2: 1592.637 ±(99.9%) 192.456 ms/op
# Warmup Iteration   3: 1617.503 ±(99.9%) 114.977 ms/op
# Warmup Iteration   4: 1608.815 ±(99.9%) 166.422 ms/op
# Warmup Iteration   5: 1576.459 ±(99.9%) 208.086 ms/op
Iteration   1: 1597.730 ±(99.9%) 194.064 ms/op
                 executeQuery·p0.00:   1474.298 ms/op
                 executeQuery·p0.50:   1585.447 ms/op
                 executeQuery·p0.90:   1759.511 ms/op
                 executeQuery·p0.95:   1759.511 ms/op
                 executeQuery·p0.99:   1759.511 ms/op
                 executeQuery·p0.999:  1759.511 ms/op
                 executeQuery·p0.9999: 1759.511 ms/op
                 executeQuery·p1.00:   1759.511 ms/op

Iteration   2: 1612.111 ±(99.9%) 236.268 ms/op
                 executeQuery·p0.00:   1491.075 ms/op
                 executeQuery·p0.50:   1589.641 ms/op
                 executeQuery·p0.90:   1776.288 ms/op
                 executeQuery·p0.95:   1776.288 ms/op
                 executeQuery·p0.99:   1776.288 ms/op
                 executeQuery·p0.999:  1776.288 ms/op
                 executeQuery·p0.9999: 1776.288 ms/op
                 executeQuery·p1.00:   1776.288 ms/op

Iteration   3: 1572.265 ±(99.9%) 225.197 ms/op
                 executeQuery·p0.00:   1417.675 ms/op
                 executeQuery·p0.50:   1587.544 ms/op
                 executeQuery·p0.90:   1730.150 ms/op
                 executeQuery·p0.95:   1730.150 ms/op
                 executeQuery·p0.99:   1730.150 ms/op
                 executeQuery·p0.999:  1730.150 ms/op
                 executeQuery·p0.9999: 1730.150 ms/op
                 executeQuery·p1.00:   1730.150 ms/op

Iteration   4: 1607.018 ±(99.9%) 71.979 ms/op
                 executeQuery·p0.00:   1560.281 ms/op
                 executeQuery·p0.50:   1606.418 ms/op
                 executeQuery·p0.90:   1652.556 ms/op
                 executeQuery·p0.95:   1652.556 ms/op
                 executeQuery·p0.99:   1652.556 ms/op
                 executeQuery·p0.999:  1652.556 ms/op
                 executeQuery·p0.9999: 1652.556 ms/op
                 executeQuery·p1.00:   1652.556 ms/op

Iteration   5: 1613.908 ±(99.9%) 195.447 ms/op
                 executeQuery·p0.00:   1478.492 ms/op
                 executeQuery·p0.50:   1621.098 ms/op
                 executeQuery·p0.90:   1723.859 ms/op
                 executeQuery·p0.95:   1723.859 ms/op
                 executeQuery·p0.99:   1723.859 ms/op
                 executeQuery·p0.999:  1723.859 ms/op
                 executeQuery·p0.9999: 1723.859 ms/op
                 executeQuery·p1.00:   1723.859 ms/op


# Run progress: 56.88% complete, ETA 04:21:49
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1837.105 ±(99.9%) 430.337 ms/op
# Warmup Iteration   2: 1676.673 ±(99.9%) 167.484 ms/op
# Warmup Iteration   3: 1636.128 ±(99.9%) 84.603 ms/op
# Warmup Iteration   4: 1693.800 ±(99.9%) 52.556 ms/op
# Warmup Iteration   5: 1692.052 ±(99.9%) 145.455 ms/op
Iteration   1: 1735.393 ±(99.9%) 348.841 ms/op
                 executeQuery·p0.00:   1639.973 ms/op
                 executeQuery·p0.50:   1692.402 ms/op
                 executeQuery·p0.90:   1962.934 ms/op
                 executeQuery·p0.95:   1962.934 ms/op
                 executeQuery·p0.99:   1962.934 ms/op
                 executeQuery·p0.999:  1962.934 ms/op
                 executeQuery·p0.9999: 1962.934 ms/op
                 executeQuery·p1.00:   1962.934 ms/op

Iteration   2: 1714.422 ±(99.9%) 163.641 ms/op
                 executeQuery·p0.00:   1667.236 ms/op
                 executeQuery·p0.50:   1688.207 ms/op
                 executeQuery·p0.90:   1811.939 ms/op
                 executeQuery·p0.95:   1811.939 ms/op
                 executeQuery·p0.99:   1811.939 ms/op
                 executeQuery·p0.999:  1811.939 ms/op
                 executeQuery·p0.9999: 1811.939 ms/op
                 executeQuery·p1.00:   1811.939 ms/op

Iteration   3: 1703.586 ±(99.9%) 143.505 ms/op
                 executeQuery·p0.00:   1600.127 ms/op
                 executeQuery·p0.50:   1724.908 ms/op
                 executeQuery·p0.90:   1732.248 ms/op
                 executeQuery·p0.95:   1732.248 ms/op
                 executeQuery·p0.99:   1732.248 ms/op
                 executeQuery·p0.999:  1732.248 ms/op
                 executeQuery·p0.9999: 1732.248 ms/op
                 executeQuery·p1.00:   1732.248 ms/op

Iteration   4: 1720.014 ±(99.9%) 234.331 ms/op
                 executeQuery·p0.00:   1600.127 ms/op
                 executeQuery·p0.50:   1713.373 ms/op
                 executeQuery·p0.90:   1858.077 ms/op
                 executeQuery·p0.95:   1858.077 ms/op
                 executeQuery·p0.99:   1858.077 ms/op
                 executeQuery·p0.999:  1858.077 ms/op
                 executeQuery·p0.9999: 1858.077 ms/op
                 executeQuery·p1.00:   1858.077 ms/op

Iteration   5: 1693.450 ±(99.9%) 263.096 ms/op
                 executeQuery·p0.00:   1543.504 ms/op
                 executeQuery·p0.50:   1689.256 ms/op
                 executeQuery·p0.90:   1811.939 ms/op
                 executeQuery·p0.95:   1811.939 ms/op
                 executeQuery·p0.99:   1811.939 ms/op
                 executeQuery·p0.999:  1811.939 ms/op
                 executeQuery·p0.9999: 1811.939 ms/op
                 executeQuery·p1.00:   1811.939 ms/op


# Run progress: 57.19% complete, ETA 04:19:49
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1814.736 ±(99.9%) 333.368 ms/op
# Warmup Iteration   2: 1692.052 ±(99.9%) 147.907 ms/op
# Warmup Iteration   3: 1661.993 ±(99.9%) 142.250 ms/op
# Warmup Iteration   4: 1686.110 ±(99.9%) 205.071 ms/op
# Warmup Iteration   5: 1699.043 ±(99.9%) 243.395 ms/op
Iteration   1: 1653.604 ±(99.9%) 144.565 ms/op
                 executeQuery·p0.00:   1612.710 ms/op
                 executeQuery·p0.50:   1631.584 ms/op
                 executeQuery·p0.90:   1742.733 ms/op
                 executeQuery·p0.95:   1742.733 ms/op
                 executeQuery·p0.99:   1742.733 ms/op
                 executeQuery·p0.999:  1742.733 ms/op
                 executeQuery·p0.9999: 1742.733 ms/op
                 executeQuery·p1.00:   1742.733 ms/op

Iteration   2: 1686.460 ±(99.9%) 229.500 ms/op
                 executeQuery·p0.00:   1543.504 ms/op
                 executeQuery·p0.50:   1693.450 ms/op
                 executeQuery·p0.90:   1797.259 ms/op
                 executeQuery·p0.95:   1797.259 ms/op
                 executeQuery·p0.99:   1797.259 ms/op
                 executeQuery·p0.999:  1797.259 ms/op
                 executeQuery·p0.9999: 1797.259 ms/op
                 executeQuery·p1.00:   1797.259 ms/op

Iteration   3: 1714.771 ±(99.9%) 248.130 ms/op
                 executeQuery·p0.00:   1568.670 ms/op
                 executeQuery·p0.50:   1713.373 ms/op
                 executeQuery·p0.90:   1820.328 ms/op
                 executeQuery·p0.95:   1820.328 ms/op
                 executeQuery·p0.99:   1820.328 ms/op
                 executeQuery·p0.999:  1820.328 ms/op
                 executeQuery·p0.9999: 1820.328 ms/op
                 executeQuery·p1.00:   1820.328 ms/op

Iteration   4: 1645.565 ±(99.9%) 182.917 ms/op
                 executeQuery·p0.00:   1566.573 ms/op
                 executeQuery·p0.50:   1661.993 ms/op
                 executeQuery·p0.90:   1725.956 ms/op
                 executeQuery·p0.95:   1725.956 ms/op
                 executeQuery·p0.99:   1725.956 ms/op
                 executeQuery·p0.999:  1725.956 ms/op
                 executeQuery·p0.9999: 1725.956 ms/op
                 executeQuery·p1.00:   1725.956 ms/op

Iteration   5: 1675.974 ±(99.9%) 222.771 ms/op
                 executeQuery·p0.00:   1545.601 ms/op
                 executeQuery·p0.50:   1689.256 ms/op
                 executeQuery·p0.90:   1780.482 ms/op
                 executeQuery·p0.95:   1780.482 ms/op
                 executeQuery·p0.99:   1780.482 ms/op
                 executeQuery·p0.999:  1780.482 ms/op
                 executeQuery·p0.9999: 1780.482 ms/op
                 executeQuery·p1.00:   1780.482 ms/op


# Run progress: 57.50% complete, ETA 04:17:49
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1837.804 ±(99.9%) 449.328 ms/op
# Warmup Iteration   2: 1672.129 ±(99.9%) 206.639 ms/op
# Warmup Iteration   3: 1703.237 ±(99.9%) 219.013 ms/op
# Warmup Iteration   4: 1720.364 ±(99.9%) 283.737 ms/op
# Warmup Iteration   5: 1682.265 ±(99.9%) 388.372 ms/op
Iteration   1: 1662.692 ±(99.9%) 123.604 ms/op
                 executeQuery·p0.00:   1577.058 ms/op
                 executeQuery·p0.50:   1678.770 ms/op
                 executeQuery·p0.90:   1694.499 ms/op
                 executeQuery·p0.95:   1694.499 ms/op
                 executeQuery·p0.99:   1694.499 ms/op
                 executeQuery·p0.999:  1694.499 ms/op
                 executeQuery·p0.9999: 1694.499 ms/op
                 executeQuery·p1.00:   1694.499 ms/op

Iteration   2: 1682.964 ±(99.9%) 155.758 ms/op
                 executeQuery·p0.00:   1595.933 ms/op
                 executeQuery·p0.50:   1699.742 ms/op
                 executeQuery·p0.90:   1742.733 ms/op
                 executeQuery·p0.95:   1742.733 ms/op
                 executeQuery·p0.99:   1742.733 ms/op
                 executeQuery·p0.999:  1742.733 ms/op
                 executeQuery·p0.9999: 1742.733 ms/op
                 executeQuery·p1.00:   1742.733 ms/op

Iteration   3: 1653.604 ±(99.9%) 140.784 ms/op
                 executeQuery·p0.00:   1553.990 ms/op
                 executeQuery·p0.50:   1667.236 ms/op
                 executeQuery·p0.90:   1690.305 ms/op
                 executeQuery·p0.95:   1690.305 ms/op
                 executeQuery·p0.99:   1690.305 ms/op
                 executeQuery·p0.999:  1690.305 ms/op
                 executeQuery·p0.9999: 1690.305 ms/op
                 executeQuery·p1.00:   1690.305 ms/op

Iteration   4: 1683.664 ±(99.9%) 259.674 ms/op
                 executeQuery·p0.00:   1537.212 ms/op
                 executeQuery·p0.50:   1677.722 ms/op
                 executeQuery·p0.90:   1826.619 ms/op
                 executeQuery·p0.95:   1826.619 ms/op
                 executeQuery·p0.99:   1826.619 ms/op
                 executeQuery·p0.999:  1826.619 ms/op
                 executeQuery·p0.9999: 1826.619 ms/op
                 executeQuery·p1.00:   1826.619 ms/op

Iteration   5: 1691.703 ±(99.9%) 232.620 ms/op
                 executeQuery·p0.00:   1581.253 ms/op
                 executeQuery·p0.50:   1674.576 ms/op
                 executeQuery·p0.90:   1822.425 ms/op
                 executeQuery·p0.95:   1822.425 ms/op
                 executeQuery·p0.99:   1822.425 ms/op
                 executeQuery·p0.999:  1822.425 ms/op
                 executeQuery·p0.9999: 1822.425 ms/op
                 executeQuery·p1.00:   1822.425 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 155
  mean =   1664.408 ±(99.9%) 23.348 ms/op

  Histogram, ms/op:
    [1400.000, 1450.000) = 1 
    [1450.000, 1500.000) = 6 
    [1500.000, 1550.000) = 7 
    [1550.000, 1600.000) = 22 
    [1600.000, 1650.000) = 25 
    [1650.000, 1700.000) = 46 
    [1700.000, 1750.000) = 27 
    [1750.000, 1800.000) = 12 
    [1800.000, 1850.000) = 7 
    [1850.000, 1900.000) = 1 
    [1900.000, 1950.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1417.675 ms/op
     p(50.0000) =   1673.527 ms/op
     p(90.0000) =   1780.482 ms/op
     p(95.0000) =   1812.359 ms/op
     p(99.0000) =   1904.214 ms/op
     p(99.9000) =   1962.934 ms/op
     p(99.9900) =   1962.934 ms/op
     p(99.9990) =   1962.934 ms/op
     p(99.9999) =   1962.934 ms/op
    p(100.0000) =   1962.934 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4)

# Run progress: 57.81% complete, ETA 04:15:50
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1785.026 ±(99.9%) 539.721 ms/op
# Warmup Iteration   2: 1696.945 ±(99.9%) 339.693 ms/op
# Warmup Iteration   3: 1639.623 ±(99.9%) 146.639 ms/op
# Warmup Iteration   4: 1650.459 ±(99.9%) 116.493 ms/op
# Warmup Iteration   5: 1635.479 ±(99.9%) 107.859 ms/op
Iteration   1: 1689.955 ±(99.9%) 274.689 ms/op
                 executeQuery·p0.00:   1528.824 ms/op
                 executeQuery·p0.50:   1693.450 ms/op
                 executeQuery·p0.90:   1830.814 ms/op
                 executeQuery·p0.95:   1830.814 ms/op
                 executeQuery·p0.99:   1830.814 ms/op
                 executeQuery·p0.999:  1830.814 ms/op
                 executeQuery·p0.9999: 1830.814 ms/op
                 executeQuery·p1.00:   1830.814 ms/op

Iteration   2: 1650.808 ±(99.9%) 253.173 ms/op
                 executeQuery·p0.00:   1545.601 ms/op
                 executeQuery·p0.50:   1649.410 ms/op
                 executeQuery·p0.90:   1790.968 ms/op
                 executeQuery·p0.95:   1790.968 ms/op
                 executeQuery·p0.99:   1790.968 ms/op
                 executeQuery·p0.999:  1790.968 ms/op
                 executeQuery·p0.9999: 1790.968 ms/op
                 executeQuery·p1.00:   1790.968 ms/op

Iteration   3: 1693.101 ±(99.9%) 192.534 ms/op
                 executeQuery·p0.00:   1637.876 ms/op
                 executeQuery·p0.50:   1659.896 ms/op
                 executeQuery·p0.90:   1799.356 ms/op
                 executeQuery·p0.95:   1799.356 ms/op
                 executeQuery·p0.99:   1799.356 ms/op
                 executeQuery·p0.999:  1799.356 ms/op
                 executeQuery·p0.9999: 1799.356 ms/op
                 executeQuery·p1.00:   1799.356 ms/op

Iteration   4: 1652.206 ±(99.9%) 165.183 ms/op
                 executeQuery·p0.00:   1535.115 ms/op
                 executeQuery·p0.50:   1668.284 ms/op
                 executeQuery·p0.90:   1698.693 ms/op
                 executeQuery·p0.95:   1698.693 ms/op
                 executeQuery·p0.99:   1698.693 ms/op
                 executeQuery·p0.999:  1698.693 ms/op
                 executeQuery·p0.9999: 1698.693 ms/op
                 executeQuery·p1.00:   1698.693 ms/op

Iteration   5: 1668.284 ±(99.9%) 238.814 ms/op
                 executeQuery·p0.00:   1549.795 ms/op
                 executeQuery·p0.50:   1660.944 ms/op
                 executeQuery·p0.90:   1816.134 ms/op
                 executeQuery·p0.95:   1816.134 ms/op
                 executeQuery·p0.99:   1816.134 ms/op
                 executeQuery·p0.999:  1816.134 ms/op
                 executeQuery·p0.9999: 1816.134 ms/op
                 executeQuery·p1.00:   1816.134 ms/op


# Run progress: 58.13% complete, ETA 04:13:51
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1909.457 ±(99.9%) 447.061 ms/op
# Warmup Iteration   2: 1739.937 ±(99.9%) 168.428 ms/op
# Warmup Iteration   3: 1754.617 ±(99.9%) 194.073 ms/op
# Warmup Iteration   4: 1762.656 ±(99.9%) 377.944 ms/op
# Warmup Iteration   5: 1737.840 ±(99.9%) 219.777 ms/op
Iteration   1: 1705.334 ±(99.9%) 260.126 ms/op
                 executeQuery·p0.00:   1551.892 ms/op
                 executeQuery·p0.50:   1735.393 ms/op
                 executeQuery·p0.90:   1816.134 ms/op
                 executeQuery·p0.95:   1816.134 ms/op
                 executeQuery·p0.99:   1816.134 ms/op
                 executeQuery·p0.999:  1816.134 ms/op
                 executeQuery·p0.9999: 1816.134 ms/op
                 executeQuery·p1.00:   1816.134 ms/op

Iteration   2: 1742.733 ±(99.9%) 349.104 ms/op
                 executeQuery·p0.00:   1652.556 ms/op
                 executeQuery·p0.50:   1676.673 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op

Iteration   3: 1718.267 ±(99.9%) 198.094 ms/op
                 executeQuery·p0.00:   1667.236 ms/op
                 executeQuery·p0.50:   1691.353 ms/op
                 executeQuery·p0.90:   1853.882 ms/op
                 executeQuery·p0.95:   1853.882 ms/op
                 executeQuery·p0.99:   1853.882 ms/op
                 executeQuery·p0.999:  1853.882 ms/op
                 executeQuery·p0.9999: 1853.882 ms/op
                 executeQuery·p1.00:   1853.882 ms/op

Iteration   4: 1757.763 ±(99.9%) 258.312 ms/op
                 executeQuery·p0.00:   1637.876 ms/op
                 executeQuery·p0.50:   1773.142 ms/op
                 executeQuery·p0.90:   1879.048 ms/op
                 executeQuery·p0.95:   1879.048 ms/op
                 executeQuery·p0.99:   1879.048 ms/op
                 executeQuery·p0.999:  1879.048 ms/op
                 executeQuery·p0.9999: 1879.048 ms/op
                 executeQuery·p1.00:   1879.048 ms/op

Iteration   5: 1771.744 ±(99.9%) 125.768 ms/op
                 executeQuery·p0.00:   1723.859 ms/op
                 executeQuery·p0.50:   1759.511 ms/op
                 executeQuery·p0.90:   1832.911 ms/op
                 executeQuery·p0.95:   1832.911 ms/op
                 executeQuery·p0.99:   1832.911 ms/op
                 executeQuery·p0.999:  1832.911 ms/op
                 executeQuery·p0.9999: 1832.911 ms/op
                 executeQuery·p1.00:   1832.911 ms/op


# Run progress: 58.44% complete, ETA 04:11:54
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1796.211 ±(99.9%) 507.616 ms/op
# Warmup Iteration   2: 1709.528 ±(99.9%) 285.141 ms/op
# Warmup Iteration   3: 1657.449 ±(99.9%) 338.822 ms/op
# Warmup Iteration   4: 1697.994 ±(99.9%) 294.690 ms/op
# Warmup Iteration   5: 1636.478 ±(99.9%) 267.241 ms/op
Iteration   1: 1649.760 ±(99.9%) 271.478 ms/op
                 executeQuery·p0.00:   1526.727 ms/op
                 executeQuery·p0.50:   1649.410 ms/op
                 executeQuery·p0.90:   1769.996 ms/op
                 executeQuery·p0.95:   1769.996 ms/op
                 executeQuery·p0.99:   1769.996 ms/op
                 executeQuery·p0.999:  1769.996 ms/op
                 executeQuery·p0.9999: 1769.996 ms/op
                 executeQuery·p1.00:   1769.996 ms/op

Iteration   2: 1668.284 ±(99.9%) 58.661 ms/op
                 executeQuery·p0.00:   1635.779 ms/op
                 executeQuery·p0.50:   1669.333 ms/op
                 executeQuery·p0.90:   1696.596 ms/op
                 executeQuery·p0.95:   1696.596 ms/op
                 executeQuery·p0.99:   1696.596 ms/op
                 executeQuery·p0.999:  1696.596 ms/op
                 executeQuery·p0.9999: 1696.596 ms/op
                 executeQuery·p1.00:   1696.596 ms/op

Iteration   3: 1639.623 ±(99.9%) 256.323 ms/op
                 executeQuery·p0.00:   1526.727 ms/op
                 executeQuery·p0.50:   1642.070 ms/op
                 executeQuery·p0.90:   1778.385 ms/op
                 executeQuery·p0.95:   1778.385 ms/op
                 executeQuery·p0.99:   1778.385 ms/op
                 executeQuery·p0.999:  1778.385 ms/op
                 executeQuery·p0.9999: 1778.385 ms/op
                 executeQuery·p1.00:   1778.385 ms/op

Iteration   4: 1659.546 ±(99.9%) 283.420 ms/op
                 executeQuery·p0.00:   1528.824 ms/op
                 executeQuery·p0.50:   1644.167 ms/op
                 executeQuery·p0.90:   1778.385 ms/op
                 executeQuery·p0.95:   1778.385 ms/op
                 executeQuery·p0.99:   1778.385 ms/op
                 executeQuery·p0.999:  1778.385 ms/op
                 executeQuery·p0.9999: 1778.385 ms/op
                 executeQuery·p1.00:   1778.385 ms/op

Iteration   5: 1691.353 ±(99.9%) 473.027 ms/op
                 executeQuery·p0.00:   1549.795 ms/op
                 executeQuery·p0.50:   1645.216 ms/op
                 executeQuery·p0.90:   2025.849 ms/op
                 executeQuery·p0.95:   2025.849 ms/op
                 executeQuery·p0.99:   2025.849 ms/op
                 executeQuery·p0.999:  2025.849 ms/op
                 executeQuery·p0.9999: 2025.849 ms/op
                 executeQuery·p1.00:   2025.849 ms/op


# Run progress: 58.75% complete, ETA 04:09:54
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1922.040 ±(99.9%) 344.231 ms/op
# Warmup Iteration   2: 1754.617 ±(99.9%) 77.275 ms/op
# Warmup Iteration   3: 1809.842 ±(99.9%) 304.260 ms/op
# Warmup Iteration   4: 1749.724 ±(99.9%) 319.684 ms/op
# Warmup Iteration   5: 1766.152 ±(99.9%) 260.578 ms/op
Iteration   1: 1730.849 ±(99.9%) 259.973 ms/op
                 executeQuery·p0.00:   1577.058 ms/op
                 executeQuery·p0.50:   1751.122 ms/op
                 executeQuery·p0.90:   1822.425 ms/op
                 executeQuery·p0.95:   1822.425 ms/op
                 executeQuery·p0.99:   1822.425 ms/op
                 executeQuery·p0.999:  1822.425 ms/op
                 executeQuery·p0.9999: 1822.425 ms/op
                 executeQuery·p1.00:   1822.425 ms/op

Iteration   2: 1818.930 ±(99.9%) 141.515 ms/op
                 executeQuery·p0.00:   1761.608 ms/op
                 executeQuery·p0.50:   1821.377 ms/op
                 executeQuery·p0.90:   1887.437 ms/op
                 executeQuery·p0.95:   1887.437 ms/op
                 executeQuery·p0.99:   1887.437 ms/op
                 executeQuery·p0.999:  1887.437 ms/op
                 executeQuery·p0.9999: 1887.437 ms/op
                 executeQuery·p1.00:   1887.437 ms/op

Iteration   3: 1739.588 ±(99.9%) 246.201 ms/op
                 executeQuery·p0.00:   1602.224 ms/op
                 executeQuery·p0.50:   1755.316 ms/op
                 executeQuery·p0.90:   1855.980 ms/op
                 executeQuery·p0.95:   1855.980 ms/op
                 executeQuery·p0.99:   1855.980 ms/op
                 executeQuery·p0.999:  1855.980 ms/op
                 executeQuery·p0.9999: 1855.980 ms/op
                 executeQuery·p1.00:   1855.980 ms/op

Iteration   4: 1744.481 ±(99.9%) 214.449 ms/op
                 executeQuery·p0.00:   1623.196 ms/op
                 executeQuery·p0.50:   1751.122 ms/op
                 executeQuery·p0.90:   1832.911 ms/op
                 executeQuery·p0.95:   1832.911 ms/op
                 executeQuery·p0.99:   1832.911 ms/op
                 executeQuery·p0.999:  1832.911 ms/op
                 executeQuery·p0.9999: 1832.911 ms/op
                 executeQuery·p1.00:   1832.911 ms/op

Iteration   5: 1760.210 ±(99.9%) 114.859 ms/op
                 executeQuery·p0.00:   1707.082 ms/op
                 executeQuery·p0.50:   1766.851 ms/op
                 executeQuery·p0.90:   1807.745 ms/op
                 executeQuery·p0.95:   1807.745 ms/op
                 executeQuery·p0.99:   1807.745 ms/op
                 executeQuery·p0.999:  1807.745 ms/op
                 executeQuery·p0.9999: 1807.745 ms/op
                 executeQuery·p1.00:   1807.745 ms/op


# Run progress: 59.06% complete, ETA 04:07:58
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1868.912 ±(99.9%) 479.066 ms/op
# Warmup Iteration   2: 1773.142 ±(99.9%) 335.912 ms/op
# Warmup Iteration   3: 1732.597 ±(99.9%) 121.516 ms/op
# Warmup Iteration   4: 1784.327 ±(99.9%) 372.500 ms/op
# Warmup Iteration   5: 1697.994 ±(99.9%) 155.221 ms/op
Iteration   1: 1792.016 ±(99.9%) 231.789 ms/op
                 executeQuery·p0.00:   1721.762 ms/op
                 executeQuery·p0.50:   1776.288 ms/op
                 executeQuery·p0.90:   1946.157 ms/op
                 executeQuery·p0.95:   1946.157 ms/op
                 executeQuery·p0.99:   1946.157 ms/op
                 executeQuery·p0.999:  1946.157 ms/op
                 executeQuery·p0.9999: 1946.157 ms/op
                 executeQuery·p1.00:   1946.157 ms/op

Iteration   2: 1719.315 ±(99.9%) 174.271 ms/op
                 executeQuery·p0.00:   1639.973 ms/op
                 executeQuery·p0.50:   1720.713 ms/op
                 executeQuery·p0.90:   1826.619 ms/op
                 executeQuery·p0.95:   1826.619 ms/op
                 executeQuery·p0.99:   1826.619 ms/op
                 executeQuery·p0.999:  1826.619 ms/op
                 executeQuery·p0.9999: 1826.619 ms/op
                 executeQuery·p1.00:   1826.619 ms/op

Iteration   3: 1748.326 ±(99.9%) 332.870 ms/op
                 executeQuery·p0.00:   1619.001 ms/op
                 executeQuery·p0.50:   1736.442 ms/op
                 executeQuery·p0.90:   1887.437 ms/op
                 executeQuery·p0.95:   1887.437 ms/op
                 executeQuery·p0.99:   1887.437 ms/op
                 executeQuery·p0.999:  1887.437 ms/op
                 executeQuery·p0.9999: 1887.437 ms/op
                 executeQuery·p1.00:   1887.437 ms/op

Iteration   4: 1722.461 ±(99.9%) 97.108 ms/op
                 executeQuery·p0.00:   1679.819 ms/op
                 executeQuery·p0.50:   1732.248 ms/op
                 executeQuery·p0.90:   1755.316 ms/op
                 executeQuery·p0.95:   1755.316 ms/op
                 executeQuery·p0.99:   1755.316 ms/op
                 executeQuery·p0.999:  1755.316 ms/op
                 executeQuery·p0.9999: 1755.316 ms/op
                 executeQuery·p1.00:   1755.316 ms/op

Iteration   5: 1794.114 ±(99.9%) 160.439 ms/op
                 executeQuery·p0.00:   1684.013 ms/op
                 executeQuery·p0.50:   1809.842 ms/op
                 executeQuery·p0.90:   1849.688 ms/op
                 executeQuery·p0.95:   1849.688 ms/op
                 executeQuery·p0.99:   1849.688 ms/op
                 executeQuery·p0.999:  1849.688 ms/op
                 executeQuery·p0.9999: 1849.688 ms/op
                 executeQuery·p1.00:   1849.688 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 150
  mean =   1717.162 ±(99.9%) 25.518 ms/op

  Histogram, ms/op:
    [1500.000, 1550.000) = 8 
    [1550.000, 1600.000) = 6 
    [1600.000, 1650.000) = 18 
    [1650.000, 1700.000) = 39 
    [1700.000, 1750.000) = 24 
    [1750.000, 1800.000) = 26 
    [1800.000, 1850.000) = 20 
    [1850.000, 1900.000) = 6 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1526.727 ms/op
     p(50.0000) =   1714.422 ms/op
     p(90.0000) =   1832.701 ms/op
     p(95.0000) =   1863.529 ms/op
     p(99.0000) =   1990.554 ms/op
     p(99.9000) =   2025.849 ms/op
     p(99.9900) =   2025.849 ms/op
     p(99.9990) =   2025.849 ms/op
     p(99.9999) =   2025.849 ms/op
    p(100.0000) =   2025.849 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6)

# Run progress: 59.38% complete, ETA 04:06:02
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1876.602 ±(99.9%) 453.477 ms/op
# Warmup Iteration   2: 1746.928 ±(99.9%) 217.065 ms/op
# Warmup Iteration   3: 1700.441 ±(99.9%) 299.527 ms/op
# Warmup Iteration   4: 1684.712 ±(99.9%) 259.094 ms/op
# Warmup Iteration   5: 1713.024 ±(99.9%) 300.357 ms/op
Iteration   1: 1697.295 ±(99.9%) 154.147 ms/op
                 executeQuery·p0.00:   1604.321 ms/op
                 executeQuery·p0.50:   1698.693 ms/op
                 executeQuery·p0.90:   1772.093 ms/op
                 executeQuery·p0.95:   1772.093 ms/op
                 executeQuery·p0.99:   1772.093 ms/op
                 executeQuery·p0.999:  1772.093 ms/op
                 executeQuery·p0.9999: 1772.093 ms/op
                 executeQuery·p1.00:   1772.093 ms/op

Iteration   2: 1738.189 ±(99.9%) 220.273 ms/op
                 executeQuery·p0.00:   1677.722 ms/op
                 executeQuery·p0.50:   1716.519 ms/op
                 executeQuery·p0.90:   1883.242 ms/op
                 executeQuery·p0.95:   1883.242 ms/op
                 executeQuery·p0.99:   1883.242 ms/op
                 executeQuery·p0.999:  1883.242 ms/op
                 executeQuery·p0.9999: 1883.242 ms/op
                 executeQuery·p1.00:   1883.242 ms/op

Iteration   3: 1775.938 ±(99.9%) 324.574 ms/op
                 executeQuery·p0.00:   1589.641 ms/op
                 executeQuery·p0.50:   1782.579 ms/op
                 executeQuery·p0.90:   1933.574 ms/op
                 executeQuery·p0.95:   1933.574 ms/op
                 executeQuery·p0.99:   1933.574 ms/op
                 executeQuery·p0.999:  1933.574 ms/op
                 executeQuery·p0.9999: 1933.574 ms/op
                 executeQuery·p1.00:   1933.574 ms/op

Iteration   4: 1665.139 ±(99.9%) 267.896 ms/op
                 executeQuery·p0.00:   1549.795 ms/op
                 executeQuery·p0.50:   1671.430 ms/op
                 executeQuery·p0.90:   1782.579 ms/op
                 executeQuery·p0.95:   1782.579 ms/op
                 executeQuery·p0.99:   1782.579 ms/op
                 executeQuery·p0.999:  1782.579 ms/op
                 executeQuery·p0.9999: 1782.579 ms/op
                 executeQuery·p1.00:   1782.579 ms/op

Iteration   5: 1725.607 ±(99.9%) 199.477 ms/op
                 executeQuery·p0.00:   1642.070 ms/op
                 executeQuery·p0.50:   1732.248 ms/op
                 executeQuery·p0.90:   1801.454 ms/op
                 executeQuery·p0.95:   1801.454 ms/op
                 executeQuery·p0.99:   1801.454 ms/op
                 executeQuery·p0.999:  1801.454 ms/op
                 executeQuery·p0.9999: 1801.454 ms/op
                 executeQuery·p1.00:   1801.454 ms/op


# Run progress: 59.69% complete, ETA 04:04:05
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1855.980 ±(99.9%) 556.760 ms/op
# Warmup Iteration   2: 1709.528 ±(99.9%) 171.349 ms/op
# Warmup Iteration   3: 1684.013 ±(99.9%) 138.268 ms/op
# Warmup Iteration   4: 1715.820 ±(99.9%) 227.988 ms/op
# Warmup Iteration   5: 1731.199 ±(99.9%) 276.654 ms/op
Iteration   1: 1709.878 ±(99.9%) 79.916 ms/op
                 executeQuery·p0.00:   1663.042 ms/op
                 executeQuery·p0.50:   1715.470 ms/op
                 executeQuery·p0.90:   1749.025 ms/op
                 executeQuery·p0.95:   1749.025 ms/op
                 executeQuery·p0.99:   1749.025 ms/op
                 executeQuery·p0.999:  1749.025 ms/op
                 executeQuery·p0.9999: 1749.025 ms/op
                 executeQuery·p1.00:   1749.025 ms/op

Iteration   2: 1680.168 ±(99.9%) 172.956 ms/op
                 executeQuery·p0.00:   1570.767 ms/op
                 executeQuery·p0.50:   1682.964 ms/op
                 executeQuery·p0.90:   1738.539 ms/op
                 executeQuery·p0.95:   1738.539 ms/op
                 executeQuery·p0.99:   1738.539 ms/op
                 executeQuery·p0.999:  1738.539 ms/op
                 executeQuery·p0.9999: 1738.539 ms/op
                 executeQuery·p1.00:   1738.539 ms/op

Iteration   3: 1712.325 ±(99.9%) 159.748 ms/op
                 executeQuery·p0.00:   1648.361 ms/op
                 executeQuery·p0.50:   1691.353 ms/op
                 executeQuery·p0.90:   1784.676 ms/op
                 executeQuery·p0.95:   1784.676 ms/op
                 executeQuery·p0.99:   1784.676 ms/op
                 executeQuery·p0.999:  1784.676 ms/op
                 executeQuery·p0.9999: 1784.676 ms/op
                 executeQuery·p1.00:   1784.676 ms/op

Iteration   4: 1696.596 ±(99.9%) 210.661 ms/op
                 executeQuery·p0.00:   1583.350 ms/op
                 executeQuery·p0.50:   1696.596 ms/op
                 executeQuery·p0.90:   1809.842 ms/op
                 executeQuery·p0.95:   1809.842 ms/op
                 executeQuery·p0.99:   1809.842 ms/op
                 executeQuery·p0.999:  1809.842 ms/op
                 executeQuery·p0.9999: 1809.842 ms/op
                 executeQuery·p1.00:   1809.842 ms/op

Iteration   5: 1692.751 ±(99.9%) 247.956 ms/op
                 executeQuery·p0.00:   1583.350 ms/op
                 executeQuery·p0.50:   1693.450 ms/op
                 executeQuery·p0.90:   1843.397 ms/op
                 executeQuery·p0.95:   1843.397 ms/op
                 executeQuery·p0.99:   1843.397 ms/op
                 executeQuery·p0.999:  1843.397 ms/op
                 executeQuery·p0.9999: 1843.397 ms/op
                 executeQuery·p1.00:   1843.397 ms/op


# Run progress: 60.00% complete, ETA 04:02:07
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1969.226 ±(99.9%) 548.175 ms/op
# Warmup Iteration   2: 1827.318 ±(99.9%) 242.034 ms/op
# Warmup Iteration   3: 1810.192 ±(99.9%) 317.964 ms/op
# Warmup Iteration   4: 1759.511 ±(99.9%) 123.301 ms/op
# Warmup Iteration   5: 1755.316 ±(99.9%) 269.287 ms/op
Iteration   1: 1792.715 ±(99.9%) 390.468 ms/op
                 executeQuery·p0.00:   1637.876 ms/op
                 executeQuery·p0.50:   1757.413 ms/op
                 executeQuery·p0.90:   2055.209 ms/op
                 executeQuery·p0.95:   2055.209 ms/op
                 executeQuery·p0.99:   2055.209 ms/op
                 executeQuery·p0.999:  2055.209 ms/op
                 executeQuery·p0.9999: 2055.209 ms/op
                 executeQuery·p1.00:   2055.209 ms/op

Iteration   2: 1807.745 ±(99.9%) 258.274 ms/op
                 executeQuery·p0.00:   1669.333 ms/op
                 executeQuery·p0.50:   1820.328 ms/op
                 executeQuery·p0.90:   1902.117 ms/op
                 executeQuery·p0.95:   1902.117 ms/op
                 executeQuery·p0.99:   1902.117 ms/op
                 executeQuery·p0.999:  1902.117 ms/op
                 executeQuery·p0.9999: 1902.117 ms/op
                 executeQuery·p1.00:   1902.117 ms/op

Iteration   3: 1795.162 ±(99.9%) 272.149 ms/op
                 executeQuery·p0.00:   1658.847 ms/op
                 executeQuery·p0.50:   1803.551 ms/op
                 executeQuery·p0.90:   1946.157 ms/op
                 executeQuery·p0.95:   1946.157 ms/op
                 executeQuery·p0.99:   1946.157 ms/op
                 executeQuery·p0.999:  1946.157 ms/op
                 executeQuery·p0.9999: 1946.157 ms/op
                 executeQuery·p1.00:   1946.157 ms/op

Iteration   4: 1794.813 ±(99.9%) 194.740 ms/op
                 executeQuery·p0.00:   1684.013 ms/op
                 executeQuery·p0.50:   1795.162 ms/op
                 executeQuery·p0.90:   1887.437 ms/op
                 executeQuery·p0.95:   1887.437 ms/op
                 executeQuery·p0.99:   1887.437 ms/op
                 executeQuery·p0.999:  1887.437 ms/op
                 executeQuery·p0.9999: 1887.437 ms/op
                 executeQuery·p1.00:   1887.437 ms/op

Iteration   5: 1824.872 ±(99.9%) 246.641 ms/op
                 executeQuery·p0.00:   1690.305 ms/op
                 executeQuery·p0.50:   1819.279 ms/op
                 executeQuery·p0.90:   1939.866 ms/op
                 executeQuery·p0.95:   1939.866 ms/op
                 executeQuery·p0.99:   1939.866 ms/op
                 executeQuery·p0.999:  1939.866 ms/op
                 executeQuery·p0.9999: 1939.866 ms/op
                 executeQuery·p1.00:   1939.866 ms/op


# Run progress: 60.31% complete, ETA 04:00:12
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1961.676 ±(99.9%) 634.846 ms/op
# Warmup Iteration   2: 1807.395 ±(99.9%) 171.954 ms/op
# Warmup Iteration   3: 1797.609 ±(99.9%) 164.932 ms/op
# Warmup Iteration   4: 1824.522 ±(99.9%) 235.144 ms/op
# Warmup Iteration   5: 1816.134 ±(99.9%) 208.383 ms/op
Iteration   1: 1804.599 ±(99.9%) 266.388 ms/op
                 executeQuery·p0.00:   1665.139 ms/op
                 executeQuery·p0.50:   1803.551 ms/op
                 executeQuery·p0.90:   1912.603 ms/op
                 executeQuery·p0.95:   1912.603 ms/op
                 executeQuery·p0.99:   1912.603 ms/op
                 executeQuery·p0.999:  1912.603 ms/op
                 executeQuery·p0.9999: 1912.603 ms/op
                 executeQuery·p1.00:   1912.603 ms/op

Iteration   2: 1792.715 ±(99.9%) 244.727 ms/op
                 executeQuery·p0.00:   1663.042 ms/op
                 executeQuery·p0.50:   1790.968 ms/op
                 executeQuery·p0.90:   1937.768 ms/op
                 executeQuery·p0.95:   1937.768 ms/op
                 executeQuery·p0.99:   1937.768 ms/op
                 executeQuery·p0.999:  1937.768 ms/op
                 executeQuery·p0.9999: 1937.768 ms/op
                 executeQuery·p1.00:   1937.768 ms/op

Iteration   3: 1816.483 ±(99.9%) 249.263 ms/op
                 executeQuery·p0.00:   1698.693 ms/op
                 executeQuery·p0.50:   1823.474 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op

Iteration   4: 1807.046 ±(99.9%) 86.563 ms/op
                 executeQuery·p0.00:   1772.093 ms/op
                 executeQuery·p0.50:   1797.259 ms/op
                 executeQuery·p0.90:   1845.494 ms/op
                 executeQuery·p0.95:   1845.494 ms/op
                 executeQuery·p0.99:   1845.494 ms/op
                 executeQuery·p0.999:  1845.494 ms/op
                 executeQuery·p0.9999: 1845.494 ms/op
                 executeQuery·p1.00:   1845.494 ms/op

Iteration   5: 1780.832 ±(99.9%) 345.628 ms/op
                 executeQuery·p0.00:   1623.196 ms/op
                 executeQuery·p0.50:   1778.385 ms/op
                 executeQuery·p0.90:   1948.254 ms/op
                 executeQuery·p0.95:   1948.254 ms/op
                 executeQuery·p0.99:   1948.254 ms/op
                 executeQuery·p0.999:  1948.254 ms/op
                 executeQuery·p0.9999: 1948.254 ms/op
                 executeQuery·p1.00:   1948.254 ms/op


# Run progress: 60.62% complete, ETA 03:58:17
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1991.875 ±(99.9%) 525.657 ms/op
# Warmup Iteration   2: 1846.542 ±(99.9%) 221.379 ms/op
# Warmup Iteration   3: 1777.336 ±(99.9%) 287.829 ms/op
# Warmup Iteration   4: 1765.103 ±(99.9%) 295.441 ms/op
# Warmup Iteration   5: 1793.764 ±(99.9%) 234.928 ms/op
Iteration   1: 1799.356 ±(99.9%) 207.185 ms/op
                 executeQuery·p0.00:   1681.916 ms/op
                 executeQuery·p0.50:   1796.211 ms/op
                 executeQuery·p0.90:   1908.408 ms/op
                 executeQuery·p0.95:   1908.408 ms/op
                 executeQuery·p0.99:   1908.408 ms/op
                 executeQuery·p0.999:  1908.408 ms/op
                 executeQuery·p0.9999: 1908.408 ms/op
                 executeQuery·p1.00:   1908.408 ms/op

Iteration   2: 1820.677 ±(99.9%) 157.158 ms/op
                 executeQuery·p0.00:   1753.219 ms/op
                 executeQuery·p0.50:   1810.891 ms/op
                 executeQuery·p0.90:   1910.505 ms/op
                 executeQuery·p0.95:   1910.505 ms/op
                 executeQuery·p0.99:   1910.505 ms/op
                 executeQuery·p0.999:  1910.505 ms/op
                 executeQuery·p0.9999: 1910.505 ms/op
                 executeQuery·p1.00:   1910.505 ms/op

Iteration   3: 1816.483 ±(99.9%) 296.276 ms/op
                 executeQuery·p0.00:   1660.944 ms/op
                 executeQuery·p0.50:   1829.765 ms/op
                 executeQuery·p0.90:   1923.088 ms/op
                 executeQuery·p0.95:   1923.088 ms/op
                 executeQuery·p0.99:   1923.088 ms/op
                 executeQuery·p0.999:  1923.088 ms/op
                 executeQuery·p0.9999: 1923.088 ms/op
                 executeQuery·p1.00:   1923.088 ms/op

Iteration   4: 1812.988 ±(99.9%) 222.252 ms/op
                 executeQuery·p0.00:   1684.013 ms/op
                 executeQuery·p0.50:   1815.085 ms/op
                 executeQuery·p0.90:   1929.380 ms/op
                 executeQuery·p0.95:   1929.380 ms/op
                 executeQuery·p0.99:   1929.380 ms/op
                 executeQuery·p0.999:  1929.380 ms/op
                 executeQuery·p0.9999: 1929.380 ms/op
                 executeQuery·p1.00:   1929.380 ms/op

Iteration   5: 1806.696 ±(99.9%) 216.578 ms/op
                 executeQuery·p0.00:   1698.693 ms/op
                 executeQuery·p0.50:   1832.911 ms/op
                 executeQuery·p0.90:   1887.437 ms/op
                 executeQuery·p0.95:   1887.437 ms/op
                 executeQuery·p0.99:   1887.437 ms/op
                 executeQuery·p0.999:  1887.437 ms/op
                 executeQuery·p0.9999: 1887.437 ms/op
                 executeQuery·p1.00:   1887.437 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 150
  mean =   1766.683 ±(99.9%) 25.580 ms/op

  Histogram, ms/op:
    [1500.000, 1550.000) = 1 
    [1550.000, 1600.000) = 5 
    [1600.000, 1650.000) = 6 
    [1650.000, 1700.000) = 32 
    [1700.000, 1750.000) = 20 
    [1750.000, 1800.000) = 35 
    [1800.000, 1850.000) = 27 
    [1850.000, 1900.000) = 10 
    [1900.000, 1950.000) = 12 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1549.795 ms/op
     p(50.0000) =   1773.142 ms/op
     p(90.0000) =   1897.713 ms/op
     p(95.0000) =   1931.267 ms/op
     p(99.0000) =   2004.940 ms/op
     p(99.9000) =   2055.209 ms/op
     p(99.9900) =   2055.209 ms/op
     p(99.9990) =   2055.209 ms/op
     p(99.9999) =   2055.209 ms/op
    p(100.0000) =   2055.209 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8)

# Run progress: 60.94% complete, ETA 03:56:22
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2010.330 ±(99.9%) 545.450 ms/op
# Warmup Iteration   2: 1884.291 ±(99.9%) 148.157 ms/op
# Warmup Iteration   3: 1825.571 ±(99.9%) 183.638 ms/op
# Warmup Iteration   4: 1800.055 ±(99.9%) 354.368 ms/op
# Warmup Iteration   5: 1873.456 ±(99.9%) 212.351 ms/op
Iteration   1: 1853.882 ±(99.9%) 217.319 ms/op
                 executeQuery·p0.00:   1790.968 ms/op
                 executeQuery·p0.50:   1832.911 ms/op
                 executeQuery·p0.90:   2006.974 ms/op
                 executeQuery·p0.95:   2006.974 ms/op
                 executeQuery·p0.99:   2006.974 ms/op
                 executeQuery·p0.999:  2006.974 ms/op
                 executeQuery·p0.9999: 2006.974 ms/op
                 executeQuery·p1.00:   2006.974 ms/op

Iteration   2: 1859.475 ±(99.9%) 257.030 ms/op
                 executeQuery·p0.00:   1723.859 ms/op
                 executeQuery·p0.50:   1854.931 ms/op
                 executeQuery·p0.90:   2009.072 ms/op
                 executeQuery·p0.95:   2009.072 ms/op
                 executeQuery·p0.99:   2009.072 ms/op
                 executeQuery·p0.999:  2009.072 ms/op
                 executeQuery·p0.9999: 2009.072 ms/op
                 executeQuery·p1.00:   2009.072 ms/op

Iteration   3: 1915.748 ±(99.9%) 383.882 ms/op
                 executeQuery·p0.00:   1671.430 ms/op
                 executeQuery·p0.50:   1969.226 ms/op
                 executeQuery·p0.90:   2021.655 ms/op
                 executeQuery·p0.95:   2021.655 ms/op
                 executeQuery·p0.99:   2021.655 ms/op
                 executeQuery·p0.999:  2021.655 ms/op
                 executeQuery·p0.9999: 2021.655 ms/op
                 executeQuery·p1.00:   2021.655 ms/op

Iteration   4: 1833.610 ±(99.9%) 235.956 ms/op
                 executeQuery·p0.00:   1690.305 ms/op
                 executeQuery·p0.50:   1842.348 ms/op
                 executeQuery·p0.90:   1946.157 ms/op
                 executeQuery·p0.95:   1946.157 ms/op
                 executeQuery·p0.99:   1946.157 ms/op
                 executeQuery·p0.999:  1946.157 ms/op
                 executeQuery·p0.9999: 1946.157 ms/op
                 executeQuery·p1.00:   1946.157 ms/op

Iteration   5: 1833.959 ±(99.9%) 239.912 ms/op
                 executeQuery·p0.00:   1723.859 ms/op
                 executeQuery·p0.50:   1815.085 ms/op
                 executeQuery·p0.90:   1952.449 ms/op
                 executeQuery·p0.95:   1952.449 ms/op
                 executeQuery·p0.99:   1952.449 ms/op
                 executeQuery·p0.999:  1952.449 ms/op
                 executeQuery·p0.9999: 1952.449 ms/op
                 executeQuery·p1.00:   1952.449 ms/op


# Run progress: 61.25% complete, ETA 03:54:29
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2042.207 ±(99.9%) 740.791 ms/op
# Warmup Iteration   2: 1879.398 ±(99.9%) 164.217 ms/op
# Warmup Iteration   3: 1858.776 ±(99.9%) 156.817 ms/op
# Warmup Iteration   4: 1860.873 ±(99.9%) 286.358 ms/op
# Warmup Iteration   5: 1851.086 ±(99.9%) 203.808 ms/op
Iteration   1: 1846.892 ±(99.9%) 111.063 ms/op
                 executeQuery·p0.00:   1818.231 ms/op
                 executeQuery·p0.50:   1835.008 ms/op
                 executeQuery·p0.90:   1923.088 ms/op
                 executeQuery·p0.95:   1923.088 ms/op
                 executeQuery·p0.99:   1923.088 ms/op
                 executeQuery·p0.999:  1923.088 ms/op
                 executeQuery·p0.9999: 1923.088 ms/op
                 executeQuery·p1.00:   1923.088 ms/op

Iteration   2: 1865.417 ±(99.9%) 216.131 ms/op
                 executeQuery·p0.00:   1778.385 ms/op
                 executeQuery·p0.50:   1860.174 ms/op
                 executeQuery·p0.90:   2002.780 ms/op
                 executeQuery·p0.95:   2002.780 ms/op
                 executeQuery·p0.99:   2002.780 ms/op
                 executeQuery·p0.999:  2002.780 ms/op
                 executeQuery·p0.9999: 2002.780 ms/op
                 executeQuery·p1.00:   2002.780 ms/op

Iteration   3: 1836.406 ±(99.9%) 287.971 ms/op
                 executeQuery·p0.00:   1717.567 ms/op
                 executeQuery·p0.50:   1823.474 ms/op
                 executeQuery·p0.90:   1962.934 ms/op
                 executeQuery·p0.95:   1962.934 ms/op
                 executeQuery·p0.99:   1962.934 ms/op
                 executeQuery·p0.999:  1962.934 ms/op
                 executeQuery·p0.9999: 1962.934 ms/op
                 executeQuery·p1.00:   1962.934 ms/op

Iteration   4: 1832.561 ±(99.9%) 219.895 ms/op
                 executeQuery·p0.00:   1709.179 ms/op
                 executeQuery·p0.50:   1840.251 ms/op
                 executeQuery·p0.90:   1946.157 ms/op
                 executeQuery·p0.95:   1946.157 ms/op
                 executeQuery·p0.99:   1946.157 ms/op
                 executeQuery·p0.999:  1946.157 ms/op
                 executeQuery·p0.9999: 1946.157 ms/op
                 executeQuery·p1.00:   1946.157 ms/op

Iteration   5: 1853.533 ±(99.9%) 179.357 ms/op
                 executeQuery·p0.00:   1788.871 ms/op
                 executeQuery·p0.50:   1839.202 ms/op
                 executeQuery·p0.90:   1975.517 ms/op
                 executeQuery·p0.95:   1975.517 ms/op
                 executeQuery·p0.99:   1975.517 ms/op
                 executeQuery·p0.999:  1975.517 ms/op
                 executeQuery·p0.9999: 1975.517 ms/op
                 executeQuery·p1.00:   1975.517 ms/op


# Run progress: 61.56% complete, ETA 03:52:36
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2037.593 ±(99.9%) 621.453 ms/op
# Warmup Iteration   2: 1814.036 ±(99.9%) 290.371 ms/op
# Warmup Iteration   3: 1891.631 ±(99.9%) 387.759 ms/op
# Warmup Iteration   4: 1852.834 ±(99.9%) 134.502 ms/op
# Warmup Iteration   5: 1887.437 ±(99.9%) 252.806 ms/op
Iteration   1: 1841.999 ±(99.9%) 228.753 ms/op
                 executeQuery·p0.00:   1711.276 ms/op
                 executeQuery·p0.50:   1837.105 ms/op
                 executeQuery·p0.90:   1952.449 ms/op
                 executeQuery·p0.95:   1952.449 ms/op
                 executeQuery·p0.99:   1952.449 ms/op
                 executeQuery·p0.999:  1952.449 ms/op
                 executeQuery·p0.9999: 1952.449 ms/op
                 executeQuery·p1.00:   1952.449 ms/op

Iteration   2: 1841.999 ±(99.9%) 266.308 ms/op
                 executeQuery·p0.00:   1742.733 ms/op
                 executeQuery·p0.50:   1818.231 ms/op
                 executeQuery·p0.90:   1965.031 ms/op
                 executeQuery·p0.95:   1965.031 ms/op
                 executeQuery·p0.99:   1965.031 ms/op
                 executeQuery·p0.999:  1965.031 ms/op
                 executeQuery·p0.9999: 1965.031 ms/op
                 executeQuery·p1.00:   1965.031 ms/op

Iteration   3: 1868.912 ±(99.9%) 181.160 ms/op
                 executeQuery·p0.00:   1740.636 ms/op
                 executeQuery·p0.50:   1897.923 ms/op
                 executeQuery·p0.90:   1906.311 ms/op
                 executeQuery·p0.95:   1906.311 ms/op
                 executeQuery·p0.99:   1906.311 ms/op
                 executeQuery·p0.999:  1906.311 ms/op
                 executeQuery·p0.9999: 1906.311 ms/op
                 executeQuery·p1.00:   1906.311 ms/op

Iteration   4: 1825.221 ±(99.9%) 151.248 ms/op
                 executeQuery·p0.00:   1757.413 ms/op
                 executeQuery·p0.50:   1847.591 ms/op
                 executeQuery·p0.90:   1881.145 ms/op
                 executeQuery·p0.95:   1881.145 ms/op
                 executeQuery·p0.99:   1881.145 ms/op
                 executeQuery·p0.999:  1881.145 ms/op
                 executeQuery·p0.9999: 1881.145 ms/op
                 executeQuery·p1.00:   1881.145 ms/op

Iteration   5: 1872.058 ±(99.9%) 237.214 ms/op
                 executeQuery·p0.00:   1707.082 ms/op
                 executeQuery·p0.50:   1895.825 ms/op
                 executeQuery·p0.90:   1937.768 ms/op
                 executeQuery·p0.95:   1937.768 ms/op
                 executeQuery·p0.99:   1937.768 ms/op
                 executeQuery·p0.999:  1937.768 ms/op
                 executeQuery·p0.9999: 1937.768 ms/op
                 executeQuery·p1.00:   1937.768 ms/op


# Run progress: 61.88% complete, ETA 03:50:43
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2060.242 ±(99.9%) 558.826 ms/op
# Warmup Iteration   2: 1893.379 ±(99.9%) 212.212 ms/op
# Warmup Iteration   3: 1803.900 ±(99.9%) 222.398 ms/op
# Warmup Iteration   4: 1854.931 ±(99.9%) 207.176 ms/op
# Warmup Iteration   5: 1855.630 ±(99.9%) 98.645 ms/op
Iteration   1: 1813.337 ±(99.9%) 308.631 ms/op
                 executeQuery·p0.00:   1692.402 ms/op
                 executeQuery·p0.50:   1795.162 ms/op
                 executeQuery·p0.90:   1948.254 ms/op
                 executeQuery·p0.95:   1948.254 ms/op
                 executeQuery·p0.99:   1948.254 ms/op
                 executeQuery·p0.999:  1948.254 ms/op
                 executeQuery·p0.9999: 1948.254 ms/op
                 executeQuery·p1.00:   1948.254 ms/op

Iteration   2: 1819.629 ±(99.9%) 185.023 ms/op
                 executeQuery·p0.00:   1742.733 ms/op
                 executeQuery·p0.50:   1814.036 ms/op
                 executeQuery·p0.90:   1923.088 ms/op
                 executeQuery·p0.95:   1923.088 ms/op
                 executeQuery·p0.99:   1923.088 ms/op
                 executeQuery·p0.999:  1923.088 ms/op
                 executeQuery·p0.9999: 1923.088 ms/op
                 executeQuery·p1.00:   1923.088 ms/op

Iteration   3: 1850.737 ±(99.9%) 262.623 ms/op
                 executeQuery·p0.00:   1721.762 ms/op
                 executeQuery·p0.50:   1845.494 ms/op
                 executeQuery·p0.90:   1958.740 ms/op
                 executeQuery·p0.95:   1958.740 ms/op
                 executeQuery·p0.99:   1958.740 ms/op
                 executeQuery·p0.999:  1958.740 ms/op
                 executeQuery·p0.9999: 1958.740 ms/op
                 executeQuery·p1.00:   1958.740 ms/op

Iteration   4: 1840.950 ±(99.9%) 416.657 ms/op
                 executeQuery·p0.00:   1646.264 ms/op
                 executeQuery·p0.50:   1837.105 ms/op
                 executeQuery·p0.90:   2061.500 ms/op
                 executeQuery·p0.95:   2061.500 ms/op
                 executeQuery·p0.99:   2061.500 ms/op
                 executeQuery·p0.999:  2061.500 ms/op
                 executeQuery·p0.9999: 2061.500 ms/op
                 executeQuery·p1.00:   2061.500 ms/op

Iteration   5: 1825.221 ±(99.9%) 240.515 ms/op
                 executeQuery·p0.00:   1725.956 ms/op
                 executeQuery·p0.50:   1837.105 ms/op
                 executeQuery·p0.90:   1960.837 ms/op
                 executeQuery·p0.95:   1960.837 ms/op
                 executeQuery·p0.99:   1960.837 ms/op
                 executeQuery·p0.999:  1960.837 ms/op
                 executeQuery·p0.9999: 1960.837 ms/op
                 executeQuery·p1.00:   1960.837 ms/op


# Run progress: 62.19% complete, ETA 03:48:49
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1950.351 ±(99.9%) 906.658 ms/op
# Warmup Iteration   2: 1799.706 ±(99.9%) 108.336 ms/op
# Warmup Iteration   3: 1809.842 ±(99.9%) 131.814 ms/op
# Warmup Iteration   4: 1824.173 ±(99.9%) 211.559 ms/op
# Warmup Iteration   5: 1782.230 ±(99.9%) 220.178 ms/op
Iteration   1: 1803.551 ±(99.9%) 308.392 ms/op
                 executeQuery·p0.00:   1665.139 ms/op
                 executeQuery·p0.50:   1789.919 ms/op
                 executeQuery·p0.90:   1933.574 ms/op
                 executeQuery·p0.95:   1933.574 ms/op
                 executeQuery·p0.99:   1933.574 ms/op
                 executeQuery·p0.999:  1933.574 ms/op
                 executeQuery·p0.9999: 1933.574 ms/op
                 executeQuery·p1.00:   1933.574 ms/op

Iteration   2: 1803.900 ±(99.9%) 121.971 ms/op
                 executeQuery·p0.00:   1740.636 ms/op
                 executeQuery·p0.50:   1810.891 ms/op
                 executeQuery·p0.90:   1860.174 ms/op
                 executeQuery·p0.95:   1860.174 ms/op
                 executeQuery·p0.99:   1860.174 ms/op
                 executeQuery·p0.999:  1860.174 ms/op
                 executeQuery·p0.9999: 1860.174 ms/op
                 executeQuery·p1.00:   1860.174 ms/op

Iteration   3: 1780.832 ±(99.9%) 258.339 ms/op
                 executeQuery·p0.00:   1684.013 ms/op
                 executeQuery·p0.50:   1765.802 ms/op
                 executeQuery·p0.90:   1925.186 ms/op
                 executeQuery·p0.95:   1925.186 ms/op
                 executeQuery·p0.99:   1925.186 ms/op
                 executeQuery·p0.999:  1925.186 ms/op
                 executeQuery·p0.9999: 1925.186 ms/op
                 executeQuery·p1.00:   1925.186 ms/op

Iteration   4: 1807.046 ±(99.9%) 241.147 ms/op
                 executeQuery·p0.00:   1700.790 ms/op
                 executeQuery·p0.50:   1800.405 ms/op
                 executeQuery·p0.90:   1908.408 ms/op
                 executeQuery·p0.95:   1908.408 ms/op
                 executeQuery·p0.99:   1908.408 ms/op
                 executeQuery·p0.999:  1908.408 ms/op
                 executeQuery·p0.9999: 1908.408 ms/op
                 executeQuery·p1.00:   1908.408 ms/op

Iteration   5: 1766.501 ±(99.9%) 317.839 ms/op
                 executeQuery·p0.00:   1665.139 ms/op
                 executeQuery·p0.50:   1729.102 ms/op
                 executeQuery·p0.90:   1929.380 ms/op
                 executeQuery·p0.95:   1929.380 ms/op
                 executeQuery·p0.99:   1929.380 ms/op
                 executeQuery·p0.999:  1929.380 ms/op
                 executeQuery·p0.9999: 1929.380 ms/op
                 executeQuery·p1.00:   1929.380 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 150
  mean =   1835.735 ±(99.9%) 24.122 ms/op

  Histogram, ms/op:
    [1600.000, 1650.000) = 1 
    [1650.000, 1700.000) = 9 
    [1700.000, 1750.000) = 19 
    [1750.000, 1800.000) = 19 
    [1800.000, 1850.000) = 41 
    [1850.000, 1900.000) = 23 
    [1900.000, 1950.000) = 21 
    [1950.000, 2000.000) = 11 
    [2000.000, 2050.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =   1646.264 ms/op
     p(50.0000) =   1833.959 ms/op
     p(90.0000) =   1952.449 ms/op
     p(95.0000) =   1978.348 ms/op
     p(99.0000) =   2041.179 ms/op
     p(99.9000) =   2061.500 ms/op
     p(99.9900) =   2061.500 ms/op
     p(99.9990) =   2061.500 ms/op
     p(99.9999) =   2061.500 ms/op
    p(100.0000) =   2061.500 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2)

# Run progress: 62.50% complete, ETA 03:46:54
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2333.711 ±(99.9%) 447.671 ms/op
# Warmup Iteration   2: 2187.749 ±(99.9%) 327.745 ms/op
# Warmup Iteration   3: 2198.654 ±(99.9%) 154.660 ms/op
# Warmup Iteration   4: 2160.067 ±(99.9%) 276.928 ms/op
# Warmup Iteration   5: 2172.230 ±(99.9%) 497.158 ms/op
Iteration   1: 2184.394 ±(99.9%) 469.367 ms/op
                 executeQuery·p0.00:   1994.392 ms/op
                 executeQuery·p0.50:   2260.730 ms/op
                 executeQuery·p0.90:   2273.313 ms/op
                 executeQuery·p0.95:   2273.313 ms/op
                 executeQuery·p0.99:   2273.313 ms/op
                 executeQuery·p0.999:  2273.313 ms/op
                 executeQuery·p0.9999: 2273.313 ms/op
                 executeQuery·p1.00:   2273.313 ms/op

Iteration   2: 2198.235 ±(99.9%) 433.536 ms/op
                 executeQuery·p0.00:   2034.237 ms/op
                 executeQuery·p0.50:   2256.536 ms/op
                 executeQuery·p0.90:   2311.062 ms/op
                 executeQuery·p0.95:   2311.062 ms/op
                 executeQuery·p0.99:   2311.062 ms/op
                 executeQuery·p0.999:  2311.062 ms/op
                 executeQuery·p0.9999: 2311.062 ms/op
                 executeQuery·p1.00:   2311.062 ms/op

Iteration   3: 2161.325 ±(99.9%) 398.142 ms/op
                 executeQuery·p0.00:   2021.655 ms/op
                 executeQuery·p0.50:   2197.815 ms/op
                 executeQuery·p0.90:   2285.896 ms/op
                 executeQuery·p0.95:   2285.896 ms/op
                 executeQuery·p0.99:   2285.896 ms/op
                 executeQuery·p0.999:  2285.896 ms/op
                 executeQuery·p0.9999: 2285.896 ms/op
                 executeQuery·p1.00:   2285.896 ms/op

Iteration   4: 2211.656 ±(99.9%) 193.270 ms/op
                 executeQuery·p0.00:   2145.386 ms/op
                 executeQuery·p0.50:   2206.204 ms/op
                 executeQuery·p0.90:   2269.118 ms/op
                 executeQuery·p0.95:   2269.118 ms/op
                 executeQuery·p0.99:   2269.118 ms/op
                 executeQuery·p0.999:  2269.118 ms/op
                 executeQuery·p0.9999: 2269.118 ms/op
                 executeQuery·p1.00:   2269.118 ms/op

Iteration   5: 2143.289 ±(99.9%) 286.875 ms/op
                 executeQuery·p0.00:   2025.849 ms/op
                 executeQuery·p0.50:   2151.678 ms/op
                 executeQuery·p0.90:   2214.593 ms/op
                 executeQuery·p0.95:   2214.593 ms/op
                 executeQuery·p0.99:   2214.593 ms/op
                 executeQuery·p0.999:  2214.593 ms/op
                 executeQuery·p0.9999: 2214.593 ms/op
                 executeQuery·p1.00:   2214.593 ms/op


# Run progress: 62.81% complete, ETA 03:45:00
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2235.983 ±(99.9%) 856.265 ms/op
# Warmup Iteration   2: 2118.124 ±(99.9%) 475.008 ms/op
# Warmup Iteration   3: 2094.635 ±(99.9%) 386.878 ms/op
# Warmup Iteration   4: 2071.986 ±(99.9%) 310.246 ms/op
# Warmup Iteration   5: 2091.699 ±(99.9%) 417.881 ms/op
Iteration   1: 2074.503 ±(99.9%) 402.532 ms/op
                 executeQuery·p0.00:   1962.934 ms/op
                 executeQuery·p0.50:   2046.820 ms/op
                 executeQuery·p0.90:   2239.758 ms/op
                 executeQuery·p0.95:   2239.758 ms/op
                 executeQuery·p0.99:   2239.758 ms/op
                 executeQuery·p0.999:  2239.758 ms/op
                 executeQuery·p0.9999: 2239.758 ms/op
                 executeQuery·p1.00:   2239.758 ms/op

Iteration   2: 2038.432 ±(99.9%) 369.708 ms/op
                 executeQuery·p0.00:   1941.963 ms/op
                 executeQuery·p0.50:   2034.237 ms/op
                 executeQuery·p0.90:   2164.261 ms/op
                 executeQuery·p0.95:   2164.261 ms/op
                 executeQuery·p0.99:   2164.261 ms/op
                 executeQuery·p0.999:  2164.261 ms/op
                 executeQuery·p0.9999: 2164.261 ms/op
                 executeQuery·p1.00:   2164.261 ms/op

Iteration   3: 2051.015 ±(99.9%) 344.744 ms/op
                 executeQuery·p0.00:   1937.768 ms/op
                 executeQuery·p0.50:   2036.335 ms/op
                 executeQuery·p0.90:   2143.289 ms/op
                 executeQuery·p0.95:   2143.289 ms/op
                 executeQuery·p0.99:   2143.289 ms/op
                 executeQuery·p0.999:  2143.289 ms/op
                 executeQuery·p0.9999: 2143.289 ms/op
                 executeQuery·p1.00:   2143.289 ms/op

Iteration   4: 2102.605 ±(99.9%) 213.166 ms/op
                 executeQuery·p0.00:   2036.335 ms/op
                 executeQuery·p0.50:   2101.346 ms/op
                 executeQuery·p0.90:   2189.427 ms/op
                 executeQuery·p0.95:   2189.427 ms/op
                 executeQuery·p0.99:   2189.427 ms/op
                 executeQuery·p0.999:  2189.427 ms/op
                 executeQuery·p0.9999: 2189.427 ms/op
                 executeQuery·p1.00:   2189.427 ms/op

Iteration   5: 2041.368 ±(99.9%) 399.532 ms/op
                 executeQuery·p0.00:   1925.186 ms/op
                 executeQuery·p0.50:   2042.626 ms/op
                 executeQuery·p0.90:   2164.261 ms/op
                 executeQuery·p0.95:   2164.261 ms/op
                 executeQuery·p0.99:   2164.261 ms/op
                 executeQuery·p0.999:  2164.261 ms/op
                 executeQuery·p0.9999: 2164.261 ms/op
                 executeQuery·p1.00:   2164.261 ms/op


# Run progress: 63.13% complete, ETA 03:43:04
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2330.355 ±(99.9%) 493.802 ms/op
# Warmup Iteration   2: 2223.820 ±(99.9%) 339.963 ms/op
# Warmup Iteration   3: 2239.339 ±(99.9%) 547.771 ms/op
# Warmup Iteration   4: 2140.773 ±(99.9%) 541.033 ms/op
# Warmup Iteration   5: 2204.526 ±(99.9%) 522.203 ms/op
Iteration   1: 2246.469 ±(99.9%) 281.274 ms/op
                 executeQuery·p0.00:   2147.484 ms/op
                 executeQuery·p0.50:   2273.313 ms/op
                 executeQuery·p0.90:   2319.450 ms/op
                 executeQuery·p0.95:   2319.450 ms/op
                 executeQuery·p0.99:   2319.450 ms/op
                 executeQuery·p0.999:  2319.450 ms/op
                 executeQuery·p0.9999: 2319.450 ms/op
                 executeQuery·p1.00:   2319.450 ms/op

Iteration   2: 2193.621 ±(99.9%) 371.116 ms/op
                 executeQuery·p0.00:   2051.015 ms/op
                 executeQuery·p0.50:   2239.758 ms/op
                 executeQuery·p0.90:   2281.701 ms/op
                 executeQuery·p0.95:   2281.701 ms/op
                 executeQuery·p0.99:   2281.701 ms/op
                 executeQuery·p0.999:  2281.701 ms/op
                 executeQuery·p0.9999: 2281.701 ms/op
                 executeQuery·p1.00:   2281.701 ms/op

Iteration   3: 2211.237 ±(99.9%) 419.516 ms/op
                 executeQuery·p0.00:   2051.015 ms/op
                 executeQuery·p0.50:   2189.427 ms/op
                 executeQuery·p0.90:   2319.450 ms/op
                 executeQuery·p0.95:   2319.450 ms/op
                 executeQuery·p0.99:   2319.450 ms/op
                 executeQuery·p0.999:  2319.450 ms/op
                 executeQuery·p0.9999: 2319.450 ms/op
                 executeQuery·p1.00:   2319.450 ms/op

Iteration   4: 2181.458 ±(99.9%) 395.546 ms/op
                 executeQuery·p0.00:   2076.180 ms/op
                 executeQuery·p0.50:   2139.095 ms/op
                 executeQuery·p0.90:   2311.062 ms/op
                 executeQuery·p0.95:   2311.062 ms/op
                 executeQuery·p0.99:   2311.062 ms/op
                 executeQuery·p0.999:  2311.062 ms/op
                 executeQuery·p0.9999: 2311.062 ms/op
                 executeQuery·p1.00:   2311.062 ms/op

Iteration   5: 2205.365 ±(99.9%) 210.704 ms/op
                 executeQuery·p0.00:   2164.261 ms/op
                 executeQuery·p0.50:   2172.649 ms/op
                 executeQuery·p0.90:   2290.090 ms/op
                 executeQuery·p0.95:   2290.090 ms/op
                 executeQuery·p0.99:   2290.090 ms/op
                 executeQuery·p0.999:  2290.090 ms/op
                 executeQuery·p0.9999: 2290.090 ms/op
                 executeQuery·p1.00:   2290.090 ms/op


# Run progress: 63.44% complete, ETA 03:41:11
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2311.900 ±(99.9%) 493.775 ms/op
# Warmup Iteration   2: 2202.429 ±(99.9%) 324.847 ms/op
# Warmup Iteration   3: 2200.751 ±(99.9%) 349.935 ms/op
# Warmup Iteration   4: 2204.107 ±(99.9%) 353.385 ms/op
# Warmup Iteration   5: 2184.394 ±(99.9%) 249.005 ms/op
Iteration   1: 2228.434 ±(99.9%) 579.507 ms/op
                 executeQuery·p0.00:   2040.529 ms/op
                 executeQuery·p0.50:   2235.564 ms/op
                 executeQuery·p0.90:   2453.668 ms/op
                 executeQuery·p0.95:   2453.668 ms/op
                 executeQuery·p0.99:   2453.668 ms/op
                 executeQuery·p0.999:  2453.668 ms/op
                 executeQuery·p0.9999: 2453.668 ms/op
                 executeQuery·p1.00:   2453.668 ms/op

Iteration   2: 2120.640 ±(99.9%) 241.277 ms/op
                 executeQuery·p0.00:   2032.140 ms/op
                 executeQuery·p0.50:   2147.484 ms/op
                 executeQuery·p0.90:   2189.427 ms/op
                 executeQuery·p0.95:   2189.427 ms/op
                 executeQuery·p0.99:   2189.427 ms/op
                 executeQuery·p0.999:  2189.427 ms/op
                 executeQuery·p0.9999: 2189.427 ms/op
                 executeQuery·p1.00:   2189.427 ms/op

Iteration   3: 2180.199 ±(99.9%) 356.810 ms/op
                 executeQuery·p0.00:   2044.723 ms/op
                 executeQuery·p0.50:   2189.427 ms/op
                 executeQuery·p0.90:   2290.090 ms/op
                 executeQuery·p0.95:   2290.090 ms/op
                 executeQuery·p0.99:   2290.090 ms/op
                 executeQuery·p0.999:  2290.090 ms/op
                 executeQuery·p0.9999: 2290.090 ms/op
                 executeQuery·p1.00:   2290.090 ms/op

Iteration   4: 2185.232 ±(99.9%) 436.669 ms/op
                 executeQuery·p0.00:   2000.683 ms/op
                 executeQuery·p0.50:   2197.815 ms/op
                 executeQuery·p0.90:   2281.701 ms/op
                 executeQuery·p0.95:   2281.701 ms/op
                 executeQuery·p0.99:   2281.701 ms/op
                 executeQuery·p0.999:  2281.701 ms/op
                 executeQuery·p0.9999: 2281.701 ms/op
                 executeQuery·p1.00:   2281.701 ms/op

Iteration   5: 2169.713 ±(99.9%) 368.719 ms/op
                 executeQuery·p0.00:   2027.946 ms/op
                 executeQuery·p0.50:   2214.593 ms/op
                 executeQuery·p0.90:   2264.924 ms/op
                 executeQuery·p0.95:   2264.924 ms/op
                 executeQuery·p0.99:   2264.924 ms/op
                 executeQuery·p0.999:  2264.924 ms/op
                 executeQuery·p0.9999: 2264.924 ms/op
                 executeQuery·p1.00:   2264.924 ms/op


# Run progress: 63.75% complete, ETA 03:39:18
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2256.116 ±(99.9%) 781.821 ms/op
# Warmup Iteration   2: 2056.467 ±(99.9%) 224.127 ms/op
# Warmup Iteration   3: 2087.086 ±(99.9%) 206.152 ms/op
# Warmup Iteration   4: 2074.503 ±(99.9%) 162.253 ms/op
# Warmup Iteration   5: 2113.090 ±(99.9%) 457.334 ms/op
Iteration   1: 2090.861 ±(99.9%) 517.833 ms/op
                 executeQuery·p0.00:   1944.060 ms/op
                 executeQuery·p0.50:   2055.209 ms/op
                 executeQuery·p0.90:   2294.284 ms/op
                 executeQuery·p0.95:   2294.284 ms/op
                 executeQuery·p0.99:   2294.284 ms/op
                 executeQuery·p0.999:  2294.284 ms/op
                 executeQuery·p0.9999: 2294.284 ms/op
                 executeQuery·p1.00:   2294.284 ms/op

Iteration   2: 2034.657 ±(99.9%) 510.617 ms/op
                 executeQuery·p0.00:   1866.465 ms/op
                 executeQuery·p0.50:   2092.958 ms/op
                 executeQuery·p0.90:   2185.232 ms/op
                 executeQuery·p0.95:   2185.232 ms/op
                 executeQuery·p0.99:   2185.232 ms/op
                 executeQuery·p0.999:  2185.232 ms/op
                 executeQuery·p0.9999: 2185.232 ms/op
                 executeQuery·p1.00:   2185.232 ms/op

Iteration   3: 2100.507 ±(99.9%) 312.164 ms/op
                 executeQuery·p0.00:   1986.003 ms/op
                 executeQuery·p0.50:   2136.998 ms/op
                 executeQuery·p0.90:   2189.427 ms/op
                 executeQuery·p0.95:   2189.427 ms/op
                 executeQuery·p0.99:   2189.427 ms/op
                 executeQuery·p0.999:  2189.427 ms/op
                 executeQuery·p0.9999: 2189.427 ms/op
                 executeQuery·p1.00:   2189.427 ms/op

Iteration   4: 2085.408 ±(99.9%) 278.138 ms/op
                 executeQuery·p0.00:   1988.100 ms/op
                 executeQuery·p0.50:   2095.055 ms/op
                 executeQuery·p0.90:   2172.649 ms/op
                 executeQuery·p0.95:   2172.649 ms/op
                 executeQuery·p0.99:   2172.649 ms/op
                 executeQuery·p0.999:  2172.649 ms/op
                 executeQuery·p0.9999: 2172.649 ms/op
                 executeQuery·p1.00:   2172.649 ms/op

Iteration   5: 2076.600 ±(99.9%) 351.321 ms/op
                 executeQuery·p0.00:   1986.003 ms/op
                 executeQuery·p0.50:   2078.278 ms/op
                 executeQuery·p0.90:   2197.815 ms/op
                 executeQuery·p0.95:   2197.815 ms/op
                 executeQuery·p0.99:   2197.815 ms/op
                 executeQuery·p0.999:  2197.815 ms/op
                 executeQuery·p0.9999: 2197.815 ms/op
                 executeQuery·p1.00:   2197.815 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 125
  mean =   2140.689 ±(99.9%) 33.033 ms/op

  Histogram, ms/op:
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 1 
    [1900.000, 1950.000) = 5 
    [1950.000, 2000.000) = 9 
    [2000.000, 2050.000) = 16 
    [2050.000, 2100.000) = 12 
    [2100.000, 2150.000) = 23 
    [2150.000, 2200.000) = 23 
    [2200.000, 2250.000) = 11 
    [2250.000, 2300.000) = 19 
    [2300.000, 2350.000) = 5 
    [2350.000, 2400.000) = 0 
    [2400.000, 2450.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1866.465 ms/op
     p(50.0000) =   2145.386 ms/op
     p(90.0000) =   2281.701 ms/op
     p(95.0000) =   2304.351 ms/op
     p(99.0000) =   2418.771 ms/op
     p(99.9000) =   2453.668 ms/op
     p(99.9900) =   2453.668 ms/op
     p(99.9990) =   2453.668 ms/op
     p(99.9999) =   2453.668 ms/op
    p(100.0000) =   2453.668 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4)

# Run progress: 64.06% complete, ETA 03:37:21
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2470.445 ±(99.9%) 1123.626 ms/op
# Warmup Iteration   2: 2320.289 ±(99.9%) 417.334 ms/op
# Warmup Iteration   3: 2306.028 ±(99.9%) 384.816 ms/op
# Warmup Iteration   4: 2216.270 ±(99.9%) 280.810 ms/op
# Warmup Iteration   5: 2259.891 ±(99.9%) 284.685 ms/op
Iteration   1: 2249.825 ±(99.9%) 328.937 ms/op
                 executeQuery·p0.00:   2164.261 ms/op
                 executeQuery·p0.50:   2252.341 ms/op
                 executeQuery·p0.90:   2386.559 ms/op
                 executeQuery·p0.95:   2386.559 ms/op
                 executeQuery·p0.99:   2386.559 ms/op
                 executeQuery·p0.999:  2386.559 ms/op
                 executeQuery·p0.9999: 2386.559 ms/op
                 executeQuery·p1.00:   2386.559 ms/op

Iteration   2: 2258.213 ±(99.9%) 236.155 ms/op
                 executeQuery·p0.00:   2218.787 ms/op
                 executeQuery·p0.50:   2227.175 ms/op
                 executeQuery·p0.90:   2365.587 ms/op
                 executeQuery·p0.95:   2365.587 ms/op
                 executeQuery·p0.99:   2365.587 ms/op
                 executeQuery·p0.999:  2365.587 ms/op
                 executeQuery·p0.9999: 2365.587 ms/op
                 executeQuery·p1.00:   2365.587 ms/op

Iteration   3: 2269.118 ±(99.9%) 230.962 ms/op
                 executeQuery·p0.00:   2185.232 ms/op
                 executeQuery·p0.50:   2269.118 ms/op
                 executeQuery·p0.90:   2353.005 ms/op
                 executeQuery·p0.95:   2353.005 ms/op
                 executeQuery·p0.99:   2353.005 ms/op
                 executeQuery·p0.999:  2353.005 ms/op
                 executeQuery·p0.9999: 2353.005 ms/op
                 executeQuery·p1.00:   2353.005 ms/op

Iteration   4: 2270.796 ±(99.9%) 164.151 ms/op
                 executeQuery·p0.00:   2235.564 ms/op
                 executeQuery·p0.50:   2252.341 ms/op
                 executeQuery·p0.90:   2340.422 ms/op
                 executeQuery·p0.95:   2340.422 ms/op
                 executeQuery·p0.99:   2340.422 ms/op
                 executeQuery·p0.999:  2340.422 ms/op
                 executeQuery·p0.9999: 2340.422 ms/op
                 executeQuery·p1.00:   2340.422 ms/op

Iteration   5: 2286.735 ±(99.9%) 415.925 ms/op
                 executeQuery·p0.00:   2113.929 ms/op
                 executeQuery·p0.50:   2298.479 ms/op
                 executeQuery·p0.90:   2399.142 ms/op
                 executeQuery·p0.95:   2399.142 ms/op
                 executeQuery·p0.99:   2399.142 ms/op
                 executeQuery·p0.999:  2399.142 ms/op
                 executeQuery·p0.9999: 2399.142 ms/op
                 executeQuery·p1.00:   2399.142 ms/op


# Run progress: 64.38% complete, ETA 03:35:29
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2382.365 ±(99.9%) 586.231 ms/op
# Warmup Iteration   2: 2213.754 ±(99.9%) 161.265 ms/op
# Warmup Iteration   3: 2168.455 ±(99.9%) 289.646 ms/op
# Warmup Iteration   4: 2202.848 ±(99.9%) 358.087 ms/op
# Warmup Iteration   5: 2172.649 ±(99.9%) 359.513 ms/op
Iteration   1: 2194.879 ±(99.9%) 155.291 ms/op
                 executeQuery·p0.00:   2124.415 ms/op
                 executeQuery·p0.50:   2206.204 ms/op
                 executeQuery·p0.90:   2227.175 ms/op
                 executeQuery·p0.95:   2227.175 ms/op
                 executeQuery·p0.99:   2227.175 ms/op
                 executeQuery·p0.999:  2227.175 ms/op
                 executeQuery·p0.9999: 2227.175 ms/op
                 executeQuery·p1.00:   2227.175 ms/op

Iteration   2: 2189.427 ±(99.9%) 449.510 ms/op
                 executeQuery·p0.00:   2061.500 ms/op
                 executeQuery·p0.50:   2243.953 ms/op
                 executeQuery·p0.90:   2302.673 ms/op
                 executeQuery·p0.95:   2302.673 ms/op
                 executeQuery·p0.99:   2302.673 ms/op
                 executeQuery·p0.999:  2302.673 ms/op
                 executeQuery·p0.9999: 2302.673 ms/op
                 executeQuery·p1.00:   2302.673 ms/op

Iteration   3: 2189.007 ±(99.9%) 366.448 ms/op
                 executeQuery·p0.00:   2048.918 ms/op
                 executeQuery·p0.50:   2210.398 ms/op
                 executeQuery·p0.90:   2306.867 ms/op
                 executeQuery·p0.95:   2306.867 ms/op
                 executeQuery·p0.99:   2306.867 ms/op
                 executeQuery·p0.999:  2306.867 ms/op
                 executeQuery·p0.9999: 2306.867 ms/op
                 executeQuery·p1.00:   2306.867 ms/op

Iteration   4: 2208.301 ±(99.9%) 416.803 ms/op
                 executeQuery·p0.00:   2044.723 ms/op
                 executeQuery·p0.50:   2235.564 ms/op
                 executeQuery·p0.90:   2302.673 ms/op
                 executeQuery·p0.95:   2302.673 ms/op
                 executeQuery·p0.99:   2302.673 ms/op
                 executeQuery·p0.999:  2302.673 ms/op
                 executeQuery·p0.9999: 2302.673 ms/op
                 executeQuery·p1.00:   2302.673 ms/op

Iteration   5: 2188.588 ±(99.9%) 171.457 ms/op
                 executeQuery·p0.00:   2143.289 ms/op
                 executeQuery·p0.50:   2176.844 ms/op
                 executeQuery·p0.90:   2256.536 ms/op
                 executeQuery·p0.95:   2256.536 ms/op
                 executeQuery·p0.99:   2256.536 ms/op
                 executeQuery·p0.999:  2256.536 ms/op
                 executeQuery·p0.9999: 2256.536 ms/op
                 executeQuery·p1.00:   2256.536 ms/op


# Run progress: 64.69% complete, ETA 03:33:36
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2377.332 ±(99.9%) 600.561 ms/op
# Warmup Iteration   2: 2261.569 ±(99.9%) 291.923 ms/op
# Warmup Iteration   3: 2217.529 ±(99.9%) 358.496 ms/op
# Warmup Iteration   4: 2226.337 ±(99.9%) 205.375 ms/op
# Warmup Iteration   5: 2278.346 ±(99.9%) 280.531 ms/op
Iteration   1: 2159.228 ±(99.9%) 265.237 ms/op
                 executeQuery·p0.00:   2088.763 ms/op
                 executeQuery·p0.50:   2181.038 ms/op
                 executeQuery·p0.90:   2252.341 ms/op
                 executeQuery·p0.95:   2252.341 ms/op
                 executeQuery·p0.99:   2252.341 ms/op
                 executeQuery·p0.999:  2252.341 ms/op
                 executeQuery·p0.9999: 2252.341 ms/op
                 executeQuery·p1.00:   2252.341 ms/op

Iteration   2: 2235.145 ±(99.9%) 423.030 ms/op
                 executeQuery·p0.00:   2057.306 ms/op
                 executeQuery·p0.50:   2285.896 ms/op
                 executeQuery·p0.90:   2336.227 ms/op
                 executeQuery·p0.95:   2336.227 ms/op
                 executeQuery·p0.99:   2336.227 ms/op
                 executeQuery·p0.999:  2336.227 ms/op
                 executeQuery·p0.9999: 2336.227 ms/op
                 executeQuery·p1.00:   2336.227 ms/op

Iteration   3: 2269.957 ±(99.9%) 111.546 ms/op
                 executeQuery·p0.00:   2227.175 ms/op
                 executeQuery·p0.50:   2264.924 ms/op
                 executeQuery·p0.90:   2302.673 ms/op
                 executeQuery·p0.95:   2302.673 ms/op
                 executeQuery·p0.99:   2302.673 ms/op
                 executeQuery·p0.999:  2302.673 ms/op
                 executeQuery·p0.9999: 2302.673 ms/op
                 executeQuery·p1.00:   2302.673 ms/op

Iteration   4: 2203.687 ±(99.9%) 132.495 ms/op
                 executeQuery·p0.00:   2160.067 ms/op
                 executeQuery·p0.50:   2193.621 ms/op
                 executeQuery·p0.90:   2248.147 ms/op
                 executeQuery·p0.95:   2248.147 ms/op
                 executeQuery·p0.99:   2248.147 ms/op
                 executeQuery·p0.999:  2248.147 ms/op
                 executeQuery·p0.9999: 2248.147 ms/op
                 executeQuery·p1.00:   2248.147 ms/op

Iteration   5: 2186.071 ±(99.9%) 556.751 ms/op
                 executeQuery·p0.00:   2027.946 ms/op
                 executeQuery·p0.50:   2222.981 ms/op
                 executeQuery·p0.90:   2365.587 ms/op
                 executeQuery·p0.95:   2365.587 ms/op
                 executeQuery·p0.99:   2365.587 ms/op
                 executeQuery·p0.999:  2365.587 ms/op
                 executeQuery·p0.9999: 2365.587 ms/op
                 executeQuery·p1.00:   2365.587 ms/op


# Run progress: 65.00% complete, ETA 03:31:44
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2374.815 ±(99.9%) 667.322 ms/op
# Warmup Iteration   2: 2269.957 ±(99.9%) 359.948 ms/op
# Warmup Iteration   3: 2232.209 ±(99.9%) 162.072 ms/op
# Warmup Iteration   4: 2268.280 ±(99.9%) 284.914 ms/op
# Warmup Iteration   5: 2260.730 ±(99.9%) 446.124 ms/op
Iteration   1: 2271.635 ±(99.9%) 171.913 ms/op
                 executeQuery·p0.00:   2206.204 ms/op
                 executeQuery·p0.50:   2281.701 ms/op
                 executeQuery·p0.90:   2327.839 ms/op
                 executeQuery·p0.95:   2327.839 ms/op
                 executeQuery·p0.99:   2327.839 ms/op
                 executeQuery·p0.999:  2327.839 ms/op
                 executeQuery·p0.9999: 2327.839 ms/op
                 executeQuery·p1.00:   2327.839 ms/op

Iteration   2: 2192.782 ±(99.9%) 197.608 ms/op
                 executeQuery·p0.00:   2122.318 ms/op
                 executeQuery·p0.50:   2206.204 ms/op
                 executeQuery·p0.90:   2260.730 ms/op
                 executeQuery·p0.95:   2260.730 ms/op
                 executeQuery·p0.99:   2260.730 ms/op
                 executeQuery·p0.999:  2260.730 ms/op
                 executeQuery·p0.9999: 2260.730 ms/op
                 executeQuery·p1.00:   2260.730 ms/op

Iteration   3: 2254.858 ±(99.9%) 290.624 ms/op
                 executeQuery·p0.00:   2143.289 ms/op
                 executeQuery·p0.50:   2298.479 ms/op
                 executeQuery·p0.90:   2319.450 ms/op
                 executeQuery·p0.95:   2319.450 ms/op
                 executeQuery·p0.99:   2319.450 ms/op
                 executeQuery·p0.999:  2319.450 ms/op
                 executeQuery·p0.9999: 2319.450 ms/op
                 executeQuery·p1.00:   2319.450 ms/op

Iteration   4: 2266.602 ±(99.9%) 163.354 ms/op
                 executeQuery·p0.00:   2231.370 ms/op
                 executeQuery·p0.50:   2252.341 ms/op
                 executeQuery·p0.90:   2340.422 ms/op
                 executeQuery·p0.95:   2340.422 ms/op
                 executeQuery·p0.99:   2340.422 ms/op
                 executeQuery·p0.999:  2340.422 ms/op
                 executeQuery·p0.9999: 2340.422 ms/op
                 executeQuery·p1.00:   2340.422 ms/op

Iteration   5: 2282.540 ±(99.9%) 289.230 ms/op
                 executeQuery·p0.00:   2155.872 ms/op
                 executeQuery·p0.50:   2294.284 ms/op
                 executeQuery·p0.90:   2353.005 ms/op
                 executeQuery·p0.95:   2353.005 ms/op
                 executeQuery·p0.99:   2353.005 ms/op
                 executeQuery·p0.999:  2353.005 ms/op
                 executeQuery·p0.9999: 2353.005 ms/op
                 executeQuery·p1.00:   2353.005 ms/op


# Run progress: 65.31% complete, ETA 03:29:53
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2486.174 ±(99.9%) 1230.229 ms/op
# Warmup Iteration   2: 2332.033 ±(99.9%) 277.163 ms/op
# Warmup Iteration   3: 2233.047 ±(99.9%) 294.192 ms/op
# Warmup Iteration   4: 2203.268 ±(99.9%) 250.831 ms/op
# Warmup Iteration   5: 2251.083 ±(99.9%) 365.611 ms/op
Iteration   1: 2244.372 ±(99.9%) 425.566 ms/op
                 executeQuery·p0.00:   2118.124 ms/op
                 executeQuery·p0.50:   2269.118 ms/op
                 executeQuery·p0.90:   2365.587 ms/op
                 executeQuery·p0.95:   2365.587 ms/op
                 executeQuery·p0.99:   2365.587 ms/op
                 executeQuery·p0.999:  2365.587 ms/op
                 executeQuery·p0.9999: 2365.587 ms/op
                 executeQuery·p1.00:   2365.587 ms/op

Iteration   2: 2277.927 ±(99.9%) 335.901 ms/op
                 executeQuery·p0.00:   2128.609 ms/op
                 executeQuery·p0.50:   2302.673 ms/op
                 executeQuery·p0.90:   2348.810 ms/op
                 executeQuery·p0.95:   2348.810 ms/op
                 executeQuery·p0.99:   2348.810 ms/op
                 executeQuery·p0.999:  2348.810 ms/op
                 executeQuery·p0.9999: 2348.810 ms/op
                 executeQuery·p1.00:   2348.810 ms/op

Iteration   3: 2272.054 ±(99.9%) 358.769 ms/op
                 executeQuery·p0.00:   2116.026 ms/op
                 executeQuery·p0.50:   2315.256 ms/op
                 executeQuery·p0.90:   2340.422 ms/op
                 executeQuery·p0.95:   2340.422 ms/op
                 executeQuery·p0.99:   2340.422 ms/op
                 executeQuery·p0.999:  2340.422 ms/op
                 executeQuery·p0.9999: 2340.422 ms/op
                 executeQuery·p1.00:   2340.422 ms/op

Iteration   4: 2246.469 ±(99.9%) 324.345 ms/op
                 executeQuery·p0.00:   2147.484 ms/op
                 executeQuery·p0.50:   2264.924 ms/op
                 executeQuery·p0.90:   2344.616 ms/op
                 executeQuery·p0.95:   2344.616 ms/op
                 executeQuery·p0.99:   2344.616 ms/op
                 executeQuery·p0.999:  2344.616 ms/op
                 executeQuery·p0.9999: 2344.616 ms/op
                 executeQuery·p1.00:   2344.616 ms/op

Iteration   5: 2267.021 ±(99.9%) 277.281 ms/op
                 executeQuery·p0.00:   2141.192 ms/op
                 executeQuery·p0.50:   2294.284 ms/op
                 executeQuery·p0.90:   2323.644 ms/op
                 executeQuery·p0.95:   2323.644 ms/op
                 executeQuery·p0.99:   2323.644 ms/op
                 executeQuery·p0.999:  2323.644 ms/op
                 executeQuery·p0.9999: 2323.644 ms/op
                 executeQuery·p1.00:   2323.644 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 125
  mean =   2237.410 ±(99.9%) 24.779 ms/op

  Histogram, ms/op:
    [2000.000, 2025.000) = 0 
    [2025.000, 2050.000) = 4 
    [2050.000, 2075.000) = 3 
    [2075.000, 2100.000) = 2 
    [2100.000, 2125.000) = 5 
    [2125.000, 2150.000) = 6 
    [2150.000, 2175.000) = 8 
    [2175.000, 2200.000) = 7 
    [2200.000, 2225.000) = 13 
    [2225.000, 2250.000) = 11 
    [2250.000, 2275.000) = 21 
    [2275.000, 2300.000) = 16 
    [2300.000, 2325.000) = 11 
    [2325.000, 2350.000) = 11 
    [2350.000, 2375.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =   2027.946 ms/op
     p(50.0000) =   2252.341 ms/op
     p(90.0000) =   2340.422 ms/op
     p(95.0000) =   2353.005 ms/op
     p(99.0000) =   2395.870 ms/op
     p(99.9000) =   2399.142 ms/op
     p(99.9900) =   2399.142 ms/op
     p(99.9990) =   2399.142 ms/op
     p(99.9999) =   2399.142 ms/op
    p(100.0000) =   2399.142 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6)

# Run progress: 65.63% complete, ETA 03:28:00
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2508.194 ±(99.9%) 977.483 ms/op
# Warmup Iteration   2: 2317.772 ±(99.9%) 223.966 ms/op
# Warmup Iteration   3: 2311.062 ±(99.9%) 308.349 ms/op
# Warmup Iteration   4: 2327.000 ±(99.9%) 280.996 ms/op
# Warmup Iteration   5: 2327.839 ±(99.9%) 324.224 ms/op
Iteration   1: 2316.934 ±(99.9%) 156.837 ms/op
                 executeQuery·p0.00:   2248.147 ms/op
                 executeQuery·p0.50:   2323.644 ms/op
                 executeQuery·p0.90:   2353.005 ms/op
                 executeQuery·p0.95:   2353.005 ms/op
                 executeQuery·p0.99:   2353.005 ms/op
                 executeQuery·p0.999:  2353.005 ms/op
                 executeQuery·p0.9999: 2353.005 ms/op
                 executeQuery·p1.00:   2353.005 ms/op

Iteration   2: 2327.000 ±(99.9%) 322.490 ms/op
                 executeQuery·p0.00:   2202.010 ms/op
                 executeQuery·p0.50:   2340.422 ms/op
                 executeQuery·p0.90:   2432.696 ms/op
                 executeQuery·p0.95:   2432.696 ms/op
                 executeQuery·p0.99:   2432.696 ms/op
                 executeQuery·p0.999:  2432.696 ms/op
                 executeQuery·p0.9999: 2432.696 ms/op
                 executeQuery·p1.00:   2432.696 ms/op

Iteration   3: 2323.644 ±(99.9%) 324.426 ms/op
                 executeQuery·p0.00:   2252.341 ms/op
                 executeQuery·p0.50:   2298.479 ms/op
                 executeQuery·p0.90:   2449.474 ms/op
                 executeQuery·p0.95:   2449.474 ms/op
                 executeQuery·p0.99:   2449.474 ms/op
                 executeQuery·p0.999:  2449.474 ms/op
                 executeQuery·p0.9999: 2449.474 ms/op
                 executeQuery·p1.00:   2449.474 ms/op

Iteration   4: 2295.962 ±(99.9%) 160.941 ms/op
                 executeQuery·p0.00:   2235.564 ms/op
                 executeQuery·p0.50:   2298.479 ms/op
                 executeQuery·p0.90:   2340.422 ms/op
                 executeQuery·p0.95:   2340.422 ms/op
                 executeQuery·p0.99:   2340.422 ms/op
                 executeQuery·p0.999:  2340.422 ms/op
                 executeQuery·p0.9999: 2340.422 ms/op
                 executeQuery·p1.00:   2340.422 ms/op

Iteration   5: 2321.967 ±(99.9%) 440.327 ms/op
                 executeQuery·p0.00:   2202.010 ms/op
                 executeQuery·p0.50:   2294.284 ms/op
                 executeQuery·p0.90:   2508.194 ms/op
                 executeQuery·p0.95:   2508.194 ms/op
                 executeQuery·p0.99:   2508.194 ms/op
                 executeQuery·p0.999:  2508.194 ms/op
                 executeQuery·p0.9999: 2508.194 ms/op
                 executeQuery·p1.00:   2508.194 ms/op


# Run progress: 65.94% complete, ETA 03:26:09
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2478.834 ±(99.9%) 1119.041 ms/op
# Warmup Iteration   2: 2321.967 ±(99.9%) 350.438 ms/op
# Warmup Iteration   3: 2237.242 ±(99.9%) 289.725 ms/op
# Warmup Iteration   4: 2261.988 ±(99.9%) 532.902 ms/op
# Warmup Iteration   5: 2295.543 ±(99.9%) 403.187 ms/op
Iteration   1: 2248.147 ±(99.9%) 305.373 ms/op
                 executeQuery·p0.00:   2176.844 ms/op
                 executeQuery·p0.50:   2206.204 ms/op
                 executeQuery·p0.90:   2357.199 ms/op
                 executeQuery·p0.95:   2357.199 ms/op
                 executeQuery·p0.99:   2357.199 ms/op
                 executeQuery·p0.999:  2357.199 ms/op
                 executeQuery·p0.9999: 2357.199 ms/op
                 executeQuery·p1.00:   2357.199 ms/op

Iteration   2: 2293.445 ±(99.9%) 466.195 ms/op
                 executeQuery·p0.00:   2143.289 ms/op
                 executeQuery·p0.50:   2264.924 ms/op
                 executeQuery·p0.90:   2436.891 ms/op
                 executeQuery·p0.95:   2436.891 ms/op
                 executeQuery·p0.99:   2436.891 ms/op
                 executeQuery·p0.999:  2436.891 ms/op
                 executeQuery·p0.9999: 2436.891 ms/op
                 executeQuery·p1.00:   2436.891 ms/op

Iteration   3: 2255.697 ±(99.9%) 320.868 ms/op
                 executeQuery·p0.00:   2176.844 ms/op
                 executeQuery·p0.50:   2239.758 ms/op
                 executeQuery·p0.90:   2390.753 ms/op
                 executeQuery·p0.95:   2390.753 ms/op
                 executeQuery·p0.99:   2390.753 ms/op
                 executeQuery·p0.999:  2390.753 ms/op
                 executeQuery·p0.9999: 2390.753 ms/op
                 executeQuery·p1.00:   2390.753 ms/op

Iteration   4: 2257.794 ±(99.9%) 489.264 ms/op
                 executeQuery·p0.00:   2105.541 ms/op
                 executeQuery·p0.50:   2311.062 ms/op
                 executeQuery·p0.90:   2394.948 ms/op
                 executeQuery·p0.95:   2394.948 ms/op
                 executeQuery·p0.99:   2394.948 ms/op
                 executeQuery·p0.999:  2394.948 ms/op
                 executeQuery·p0.9999: 2394.948 ms/op
                 executeQuery·p1.00:   2394.948 ms/op

Iteration   5: 2273.313 ±(99.9%) 239.010 ms/op
                 executeQuery·p0.00:   2210.398 ms/op
                 executeQuery·p0.50:   2243.953 ms/op
                 executeQuery·p0.90:   2357.199 ms/op
                 executeQuery·p0.95:   2357.199 ms/op
                 executeQuery·p0.99:   2357.199 ms/op
                 executeQuery·p0.999:  2357.199 ms/op
                 executeQuery·p0.9999: 2357.199 ms/op
                 executeQuery·p1.00:   2357.199 ms/op


# Run progress: 66.25% complete, ETA 03:24:17
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2501.902 ±(99.9%) 1161.454 ms/op
# Warmup Iteration   2: 2332.033 ±(99.9%) 215.175 ms/op
# Warmup Iteration   3: 2366.426 ±(99.9%) 458.864 ms/op
# Warmup Iteration   4: 2346.294 ±(99.9%) 344.243 ms/op
# Warmup Iteration   5: 2336.227 ±(99.9%) 229.261 ms/op
Iteration   1: 2353.843 ±(99.9%) 318.420 ms/op
                 executeQuery·p0.00:   2231.370 ms/op
                 executeQuery·p0.50:   2340.422 ms/op
                 executeQuery·p0.90:   2436.891 ms/op
                 executeQuery·p0.95:   2436.891 ms/op
                 executeQuery·p0.99:   2436.891 ms/op
                 executeQuery·p0.999:  2436.891 ms/op
                 executeQuery·p0.9999: 2436.891 ms/op
                 executeQuery·p1.00:   2436.891 ms/op

Iteration   2: 2314.417 ±(99.9%) 315.333 ms/op
                 executeQuery·p0.00:   2189.427 ms/op
                 executeQuery·p0.50:   2323.644 ms/op
                 executeQuery·p0.90:   2415.919 ms/op
                 executeQuery·p0.95:   2415.919 ms/op
                 executeQuery·p0.99:   2415.919 ms/op
                 executeQuery·p0.999:  2415.919 ms/op
                 executeQuery·p0.9999: 2415.919 ms/op
                 executeQuery·p1.00:   2415.919 ms/op

Iteration   3: 2357.199 ±(99.9%) 403.769 ms/op
                 executeQuery·p0.00:   2210.398 ms/op
                 executeQuery·p0.50:   2403.336 ms/op
                 executeQuery·p0.90:   2457.862 ms/op
                 executeQuery·p0.95:   2457.862 ms/op
                 executeQuery·p0.99:   2457.862 ms/op
                 executeQuery·p0.999:  2457.862 ms/op
                 executeQuery·p0.9999: 2457.862 ms/op
                 executeQuery·p1.00:   2457.862 ms/op

Iteration   4: 2325.322 ±(99.9%) 291.967 ms/op
                 executeQuery·p0.00:   2222.981 ms/op
                 executeQuery·p0.50:   2319.450 ms/op
                 executeQuery·p0.90:   2436.891 ms/op
                 executeQuery·p0.95:   2436.891 ms/op
                 executeQuery·p0.99:   2436.891 ms/op
                 executeQuery·p0.999:  2436.891 ms/op
                 executeQuery·p0.9999: 2436.891 ms/op
                 executeQuery·p1.00:   2436.891 ms/op

Iteration   5: 2342.938 ±(99.9%) 373.673 ms/op
                 executeQuery·p0.00:   2197.815 ms/op
                 executeQuery·p0.50:   2361.393 ms/op
                 executeQuery·p0.90:   2453.668 ms/op
                 executeQuery·p0.95:   2453.668 ms/op
                 executeQuery·p0.99:   2453.668 ms/op
                 executeQuery·p0.999:  2453.668 ms/op
                 executeQuery·p0.9999: 2453.668 ms/op
                 executeQuery·p1.00:   2453.668 ms/op


# Run progress: 66.56% complete, ETA 03:22:26
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2583.691 ±(99.9%) 1221.164 ms/op
# Warmup Iteration   2: 2346.294 ±(99.9%) 308.476 ms/op
# Warmup Iteration   3: 2272.054 ±(99.9%) 457.654 ms/op
# Warmup Iteration   4: 2340.422 ±(99.9%) 351.813 ms/op
# Warmup Iteration   5: 2311.062 ±(99.9%) 297.586 ms/op
Iteration   1: 2353.843 ±(99.9%) 420.448 ms/op
                 executeQuery·p0.00:   2168.455 ms/op
                 executeQuery·p0.50:   2373.976 ms/op
                 executeQuery·p0.90:   2457.862 ms/op
                 executeQuery·p0.95:   2457.862 ms/op
                 executeQuery·p0.99:   2457.862 ms/op
                 executeQuery·p0.999:  2457.862 ms/op
                 executeQuery·p0.9999: 2457.862 ms/op
                 executeQuery·p1.00:   2457.862 ms/op

Iteration   2: 2384.881 ±(99.9%) 295.299 ms/op
                 executeQuery·p0.00:   2290.090 ms/op
                 executeQuery·p0.50:   2373.976 ms/op
                 executeQuery·p0.90:   2470.445 ms/op
                 executeQuery·p0.95:   2470.445 ms/op
                 executeQuery·p0.99:   2470.445 ms/op
                 executeQuery·p0.999:  2470.445 ms/op
                 executeQuery·p0.9999: 2470.445 ms/op
                 executeQuery·p1.00:   2470.445 ms/op

Iteration   3: 2346.294 ±(99.9%) 448.398 ms/op
                 executeQuery·p0.00:   2164.261 ms/op
                 executeQuery·p0.50:   2361.393 ms/op
                 executeQuery·p0.90:   2457.862 ms/op
                 executeQuery·p0.95:   2457.862 ms/op
                 executeQuery·p0.99:   2457.862 ms/op
                 executeQuery·p0.999:  2457.862 ms/op
                 executeQuery·p0.9999: 2457.862 ms/op
                 executeQuery·p1.00:   2457.862 ms/op

Iteration   4: 2300.995 ±(99.9%) 123.846 ms/op
                 executeQuery·p0.00:   2248.147 ms/op
                 executeQuery·p0.50:   2306.867 ms/op
                 executeQuery·p0.90:   2332.033 ms/op
                 executeQuery·p0.95:   2332.033 ms/op
                 executeQuery·p0.99:   2332.033 ms/op
                 executeQuery·p0.999:  2332.033 ms/op
                 executeQuery·p0.9999: 2332.033 ms/op
                 executeQuery·p1.00:   2332.033 ms/op

Iteration   5: 2360.554 ±(99.9%) 222.154 ms/op
                 executeQuery·p0.00:   2277.507 ms/op
                 executeQuery·p0.50:   2353.005 ms/op
                 executeQuery·p0.90:   2436.891 ms/op
                 executeQuery·p0.95:   2436.891 ms/op
                 executeQuery·p0.99:   2436.891 ms/op
                 executeQuery·p0.999:  2436.891 ms/op
                 executeQuery·p0.9999: 2436.891 ms/op
                 executeQuery·p1.00:   2436.891 ms/op


# Run progress: 66.88% complete, ETA 03:20:35
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2561.671 ±(99.9%) 1132.607 ms/op
# Warmup Iteration   2: 2380.687 ±(99.9%) 295.299 ms/op
# Warmup Iteration   3: 2316.934 ±(99.9%) 107.497 ms/op
# Warmup Iteration   4: 2333.711 ±(99.9%) 467.759 ms/op
# Warmup Iteration   5: 2345.874 ±(99.9%) 522.459 ms/op
Iteration   1: 2338.744 ±(99.9%) 434.513 ms/op
                 executeQuery·p0.00:   2181.038 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2470.445 ms/op
                 executeQuery·p0.95:   2470.445 ms/op
                 executeQuery·p0.99:   2470.445 ms/op
                 executeQuery·p0.999:  2470.445 ms/op
                 executeQuery·p0.9999: 2470.445 ms/op
                 executeQuery·p1.00:   2470.445 ms/op

Iteration   2: 2325.322 ±(99.9%) 311.840 ms/op
                 executeQuery·p0.00:   2252.341 ms/op
                 executeQuery·p0.50:   2306.867 ms/op
                 executeQuery·p0.90:   2436.891 ms/op
                 executeQuery·p0.95:   2436.891 ms/op
                 executeQuery·p0.99:   2436.891 ms/op
                 executeQuery·p0.999:  2436.891 ms/op
                 executeQuery·p0.9999: 2436.891 ms/op
                 executeQuery·p1.00:   2436.891 ms/op

Iteration   3: 2305.189 ±(99.9%) 381.446 ms/op
                 executeQuery·p0.00:   2210.398 ms/op
                 executeQuery·p0.50:   2264.924 ms/op
                 executeQuery·p0.90:   2445.279 ms/op
                 executeQuery·p0.95:   2445.279 ms/op
                 executeQuery·p0.99:   2445.279 ms/op
                 executeQuery·p0.999:  2445.279 ms/op
                 executeQuery·p0.9999: 2445.279 ms/op
                 executeQuery·p1.00:   2445.279 ms/op

Iteration   4: 2399.142 ±(99.9%) 182.368 ms/op
                 executeQuery·p0.00:   2336.227 ms/op
                 executeQuery·p0.50:   2386.559 ms/op
                 executeQuery·p0.90:   2457.862 ms/op
                 executeQuery·p0.95:   2457.862 ms/op
                 executeQuery·p0.99:   2457.862 ms/op
                 executeQuery·p0.999:  2457.862 ms/op
                 executeQuery·p0.9999: 2457.862 ms/op
                 executeQuery·p1.00:   2457.862 ms/op

Iteration   5: 2342.099 ±(99.9%) 393.396 ms/op
                 executeQuery·p0.00:   2193.621 ms/op
                 executeQuery·p0.50:   2382.365 ms/op
                 executeQuery·p0.90:   2457.862 ms/op
                 executeQuery·p0.95:   2457.862 ms/op
                 executeQuery·p0.99:   2457.862 ms/op
                 executeQuery·p0.999:  2457.862 ms/op
                 executeQuery·p0.9999: 2457.862 ms/op
                 executeQuery·p1.00:   2457.862 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 125
  mean =   2322.587 ±(99.9%) 26.501 ms/op

  Histogram, ms/op:
    [2100.000, 2150.000) = 3 
    [2150.000, 2200.000) = 9 
    [2200.000, 2250.000) = 17 
    [2250.000, 2300.000) = 18 
    [2300.000, 2350.000) = 29 
    [2350.000, 2400.000) = 24 
    [2400.000, 2450.000) = 15 
    [2450.000, 2500.000) = 9 
    [2500.000, 2550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2105.541 ms/op
     p(50.0000) =   2327.839 ms/op
     p(90.0000) =   2440.246 ms/op
     p(95.0000) =   2457.862 ms/op
     p(99.0000) =   2498.379 ms/op
     p(99.9000) =   2508.194 ms/op
     p(99.9900) =   2508.194 ms/op
     p(99.9990) =   2508.194 ms/op
     p(99.9999) =   2508.194 ms/op
    p(100.0000) =   2508.194 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 67.19% complete, ETA 03:18:44
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2616.197 ±(99.9%) 1057.241 ms/op
# Warmup Iteration   2: 2396.625 ±(99.9%) 509.018 ms/op
# Warmup Iteration   3: 2409.208 ±(99.9%) 328.342 ms/op
# Warmup Iteration   4: 2389.914 ±(99.9%) 196.947 ms/op
# Warmup Iteration   5: 2409.208 ±(99.9%) 95.276 ms/op
Iteration   1: 2411.725 ±(99.9%) 369.179 ms/op
                 executeQuery·p0.00:   2256.536 ms/op
                 executeQuery·p0.50:   2436.891 ms/op
                 executeQuery·p0.90:   2512.388 ms/op
                 executeQuery·p0.95:   2512.388 ms/op
                 executeQuery·p0.99:   2512.388 ms/op
                 executeQuery·p0.999:  2512.388 ms/op
                 executeQuery·p0.9999: 2512.388 ms/op
                 executeQuery·p1.00:   2512.388 ms/op

Iteration   2: 2409.208 ±(99.9%) 109.896 ms/op
                 executeQuery·p0.00:   2369.782 ms/op
                 executeQuery·p0.50:   2415.919 ms/op
                 executeQuery·p0.90:   2436.891 ms/op
                 executeQuery·p0.95:   2436.891 ms/op
                 executeQuery·p0.99:   2436.891 ms/op
                 executeQuery·p0.999:  2436.891 ms/op
                 executeQuery·p0.9999: 2436.891 ms/op
                 executeQuery·p1.00:   2436.891 ms/op

Iteration   3: 2410.047 ±(99.9%) 142.457 ms/op
                 executeQuery·p0.00:   2348.810 ms/op
                 executeQuery·p0.50:   2424.308 ms/op
                 executeQuery·p0.90:   2441.085 ms/op
                 executeQuery·p0.95:   2441.085 ms/op
                 executeQuery·p0.99:   2441.085 ms/op
                 executeQuery·p0.999:  2441.085 ms/op
                 executeQuery·p0.9999: 2441.085 ms/op
                 executeQuery·p1.00:   2441.085 ms/op

Iteration   4: 2360.554 ±(99.9%) 395.183 ms/op
                 executeQuery·p0.00:   2260.730 ms/op
                 executeQuery·p0.50:   2378.170 ms/op
                 executeQuery·p0.90:   2508.194 ms/op
                 executeQuery·p0.95:   2508.194 ms/op
                 executeQuery·p0.99:   2508.194 ms/op
                 executeQuery·p0.999:  2508.194 ms/op
                 executeQuery·p0.9999: 2508.194 ms/op
                 executeQuery·p1.00:   2508.194 ms/op

Iteration   5: 2423.469 ±(99.9%) 199.251 ms/op
                 executeQuery·p0.00:   2336.227 ms/op
                 executeQuery·p0.50:   2432.696 ms/op
                 executeQuery·p0.90:   2474.639 ms/op
                 executeQuery·p0.95:   2474.639 ms/op
                 executeQuery·p0.99:   2474.639 ms/op
                 executeQuery·p0.999:  2474.639 ms/op
                 executeQuery·p0.9999: 2474.639 ms/op
                 executeQuery·p1.00:   2474.639 ms/op


# Run progress: 67.50% complete, ETA 03:16:55
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2605.711 ±(99.9%) 1160.162 ms/op
# Warmup Iteration   2: 2453.668 ±(99.9%) 110.134 ms/op
# Warmup Iteration   3: 2497.289 ±(99.9%) 634.481 ms/op
# Warmup Iteration   4: 2410.886 ±(99.9%) 363.733 ms/op
# Warmup Iteration   5: 2375.654 ±(99.9%) 413.441 ms/op
Iteration   1: 2484.077 ±(99.9%) 204.478 ms/op
                 executeQuery·p0.00:   2462.056 ms/op
                 executeQuery·p0.50:   2472.542 ms/op
                 executeQuery·p0.90:   2529.165 ms/op
                 executeQuery·p0.95:   2529.165 ms/op
                 executeQuery·p0.99:   2529.165 ms/op
                 executeQuery·p0.999:  2529.165 ms/op
                 executeQuery·p0.9999: 2529.165 ms/op
                 executeQuery·p1.00:   2529.165 ms/op

Iteration   2: 2436.891 ±(99.9%) 436.967 ms/op
                 executeQuery·p0.00:   2260.730 ms/op
                 executeQuery·p0.50:   2457.862 ms/op
                 executeQuery·p0.90:   2533.360 ms/op
                 executeQuery·p0.95:   2533.360 ms/op
                 executeQuery·p0.99:   2533.360 ms/op
                 executeQuery·p0.999:  2533.360 ms/op
                 executeQuery·p0.9999: 2533.360 ms/op
                 executeQuery·p1.00:   2533.360 ms/op

Iteration   3: 2420.952 ±(99.9%) 367.479 ms/op
                 executeQuery·p0.00:   2290.090 ms/op
                 executeQuery·p0.50:   2457.862 ms/op
                 executeQuery·p0.90:   2512.388 ms/op
                 executeQuery·p0.95:   2512.388 ms/op
                 executeQuery·p0.99:   2512.388 ms/op
                 executeQuery·p0.999:  2512.388 ms/op
                 executeQuery·p0.9999: 2512.388 ms/op
                 executeQuery·p1.00:   2512.388 ms/op

Iteration   4: 2413.403 ±(99.9%) 360.889 ms/op
                 executeQuery·p0.00:   2281.701 ms/op
                 executeQuery·p0.50:   2390.753 ms/op
                 executeQuery·p0.90:   2512.388 ms/op
                 executeQuery·p0.95:   2512.388 ms/op
                 executeQuery·p0.99:   2512.388 ms/op
                 executeQuery·p0.999:  2512.388 ms/op
                 executeQuery·p0.9999: 2512.388 ms/op
                 executeQuery·p1.00:   2512.388 ms/op

Iteration   5: 2408.369 ±(99.9%) 526.748 ms/op
                 executeQuery·p0.00:   2252.341 ms/op
                 executeQuery·p0.50:   2453.668 ms/op
                 executeQuery·p0.90:   2533.360 ms/op
                 executeQuery·p0.95:   2533.360 ms/op
                 executeQuery·p0.99:   2533.360 ms/op
                 executeQuery·p0.999:  2533.360 ms/op
                 executeQuery·p0.9999: 2533.360 ms/op
                 executeQuery·p1.00:   2533.360 ms/op


# Run progress: 67.81% complete, ETA 03:15:05
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2603.614 ±(99.9%) 1144.436 ms/op
# Warmup Iteration   2: 2382.365 ±(99.9%) 269.529 ms/op
# Warmup Iteration   3: 2366.426 ±(99.9%) 261.772 ms/op
# Warmup Iteration   4: 2347.133 ±(99.9%) 353.219 ms/op
# Warmup Iteration   5: 2350.488 ±(99.9%) 347.636 ms/op
Iteration   1: 2363.910 ±(99.9%) 233.098 ms/op
                 executeQuery·p0.00:   2294.284 ms/op
                 executeQuery·p0.50:   2373.976 ms/op
                 executeQuery·p0.90:   2445.279 ms/op
                 executeQuery·p0.95:   2445.279 ms/op
                 executeQuery·p0.99:   2445.279 ms/op
                 executeQuery·p0.999:  2445.279 ms/op
                 executeQuery·p0.9999: 2445.279 ms/op
                 executeQuery·p1.00:   2445.279 ms/op

Iteration   2: 2389.076 ±(99.9%) 313.924 ms/op
                 executeQuery·p0.00:   2260.730 ms/op
                 executeQuery·p0.50:   2415.919 ms/op
                 executeQuery·p0.90:   2478.834 ms/op
                 executeQuery·p0.95:   2478.834 ms/op
                 executeQuery·p0.99:   2478.834 ms/op
                 executeQuery·p0.999:  2478.834 ms/op
                 executeQuery·p0.9999: 2478.834 ms/op
                 executeQuery·p1.00:   2478.834 ms/op

Iteration   3: 2339.583 ±(99.9%) 178.172 ms/op
                 executeQuery·p0.00:   2290.090 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2411.725 ms/op
                 executeQuery·p0.95:   2411.725 ms/op
                 executeQuery·p0.99:   2411.725 ms/op
                 executeQuery·p0.999:  2411.725 ms/op
                 executeQuery·p0.9999: 2411.725 ms/op
                 executeQuery·p1.00:   2411.725 ms/op

Iteration   4: 2334.550 ±(99.9%) 385.019 ms/op
                 executeQuery·p0.00:   2197.815 ms/op
                 executeQuery·p0.50:   2332.033 ms/op
                 executeQuery·p0.90:   2453.668 ms/op
                 executeQuery·p0.95:   2453.668 ms/op
                 executeQuery·p0.99:   2453.668 ms/op
                 executeQuery·p0.999:  2453.668 ms/op
                 executeQuery·p0.9999: 2453.668 ms/op
                 executeQuery·p1.00:   2453.668 ms/op

Iteration   5: 2335.388 ±(99.9%) 392.866 ms/op
                 executeQuery·p0.00:   2222.981 ms/op
                 executeQuery·p0.50:   2315.256 ms/op
                 executeQuery·p0.90:   2445.279 ms/op
                 executeQuery·p0.95:   2445.279 ms/op
                 executeQuery·p0.99:   2445.279 ms/op
                 executeQuery·p0.999:  2445.279 ms/op
                 executeQuery·p0.9999: 2445.279 ms/op
                 executeQuery·p1.00:   2445.279 ms/op


# Run progress: 68.13% complete, ETA 03:13:14
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2630.877 ±(99.9%) 1060.709 ms/op
# Warmup Iteration   2: 2506.097 ±(99.9%) 376.535 ms/op
# Warmup Iteration   3: 2468.348 ±(99.9%) 51.899 ms/op
# Warmup Iteration   4: 2511.340 ±(99.9%) 686.162 ms/op
# Warmup Iteration   5: 2427.663 ±(99.9%) 198.267 ms/op
Iteration   1: 2495.611 ±(99.9%) 79.791 ms/op
                 executeQuery·p0.00:   2483.028 ms/op
                 executeQuery·p0.50:   2493.514 ms/op
                 executeQuery·p0.90:   2512.388 ms/op
                 executeQuery·p0.95:   2512.388 ms/op
                 executeQuery·p0.99:   2512.388 ms/op
                 executeQuery·p0.999:  2512.388 ms/op
                 executeQuery·p0.9999: 2512.388 ms/op
                 executeQuery·p1.00:   2512.388 ms/op

Iteration   2: 2446.957 ±(99.9%) 169.622 ms/op
                 executeQuery·p0.00:   2382.365 ms/op
                 executeQuery·p0.50:   2445.279 ms/op
                 executeQuery·p0.90:   2495.611 ms/op
                 executeQuery·p0.95:   2495.611 ms/op
                 executeQuery·p0.99:   2495.611 ms/op
                 executeQuery·p0.999:  2495.611 ms/op
                 executeQuery·p0.9999: 2495.611 ms/op
                 executeQuery·p1.00:   2495.611 ms/op

Iteration   3: 2430.180 ±(99.9%) 308.898 ms/op
                 executeQuery·p0.00:   2302.673 ms/op
                 executeQuery·p0.50:   2432.696 ms/op
                 executeQuery·p0.90:   2516.582 ms/op
                 executeQuery·p0.95:   2516.582 ms/op
                 executeQuery·p0.99:   2516.582 ms/op
                 executeQuery·p0.999:  2516.582 ms/op
                 executeQuery·p0.9999: 2516.582 ms/op
                 executeQuery·p1.00:   2516.582 ms/op

Iteration   4: 2448.635 ±(99.9%) 365.878 ms/op
                 executeQuery·p0.00:   2327.839 ms/op
                 executeQuery·p0.50:   2462.056 ms/op
                 executeQuery·p0.90:   2554.331 ms/op
                 executeQuery·p0.95:   2554.331 ms/op
                 executeQuery·p0.99:   2554.331 ms/op
                 executeQuery·p0.999:  2554.331 ms/op
                 executeQuery·p0.9999: 2554.331 ms/op
                 executeQuery·p1.00:   2554.331 ms/op

Iteration   5: 2468.348 ±(99.9%) 163.372 ms/op
                 executeQuery·p0.00:   2445.279 ms/op
                 executeQuery·p0.50:   2462.056 ms/op
                 executeQuery·p0.90:   2503.999 ms/op
                 executeQuery·p0.95:   2503.999 ms/op
                 executeQuery·p0.99:   2503.999 ms/op
                 executeQuery·p0.999:  2503.999 ms/op
                 executeQuery·p0.9999: 2503.999 ms/op
                 executeQuery·p1.00:   2503.999 ms/op


# Run progress: 68.44% complete, ETA 03:11:20
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2565.865 ±(99.9%) 1276.339 ms/op
# Warmup Iteration   2: 2453.668 ±(99.9%) 496.488 ms/op
# Warmup Iteration   3: 2476.737 ±(99.9%) 561.813 ms/op
# Warmup Iteration   4: 2388.237 ±(99.9%) 258.564 ms/op
# Warmup Iteration   5: 2410.886 ±(99.9%) 310.540 ms/op
Iteration   1: 2407.530 ±(99.9%) 99.560 ms/op
                 executeQuery·p0.00:   2369.782 ms/op
                 executeQuery·p0.50:   2411.725 ms/op
                 executeQuery·p0.90:   2432.696 ms/op
                 executeQuery·p0.95:   2432.696 ms/op
                 executeQuery·p0.99:   2432.696 ms/op
                 executeQuery·p0.999:  2432.696 ms/op
                 executeQuery·p0.9999: 2432.696 ms/op
                 executeQuery·p1.00:   2432.696 ms/op

Iteration   2: 2437.729 ±(99.9%) 339.819 ms/op
                 executeQuery·p0.00:   2281.701 ms/op
                 executeQuery·p0.50:   2470.445 ms/op
                 executeQuery·p0.90:   2491.417 ms/op
                 executeQuery·p0.95:   2491.417 ms/op
                 executeQuery·p0.99:   2491.417 ms/op
                 executeQuery·p0.999:  2491.417 ms/op
                 executeQuery·p0.9999: 2491.417 ms/op
                 executeQuery·p1.00:   2491.417 ms/op

Iteration   3: 2358.038 ±(99.9%) 274.895 ms/op
                 executeQuery·p0.00:   2277.507 ms/op
                 executeQuery·p0.50:   2365.587 ms/op
                 executeQuery·p0.90:   2457.862 ms/op
                 executeQuery·p0.95:   2457.862 ms/op
                 executeQuery·p0.99:   2457.862 ms/op
                 executeQuery·p0.999:  2457.862 ms/op
                 executeQuery·p0.9999: 2457.862 ms/op
                 executeQuery·p1.00:   2457.862 ms/op

Iteration   4: 2507.145 ±(99.9%) 387.353 ms/op
                 executeQuery·p0.00:   2449.474 ms/op
                 executeQuery·p0.50:   2506.097 ms/op
                 executeQuery·p0.90:   2566.914 ms/op
                 executeQuery·p0.95:   2566.914 ms/op
                 executeQuery·p0.99:   2566.914 ms/op
                 executeQuery·p0.999:  2566.914 ms/op
                 executeQuery·p0.9999: 2566.914 ms/op
                 executeQuery·p1.00:   2566.914 ms/op

Iteration   5: 2462.056 ±(99.9%) 378.597 ms/op
                 executeQuery·p0.00:   2315.256 ms/op
                 executeQuery·p0.50:   2495.611 ms/op
                 executeQuery·p0.90:   2550.137 ms/op
                 executeQuery·p0.95:   2550.137 ms/op
                 executeQuery·p0.99:   2550.137 ms/op
                 executeQuery·p0.999:  2550.137 ms/op
                 executeQuery·p0.9999: 2550.137 ms/op
                 executeQuery·p1.00:   2550.137 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 121
  mean =   2413.735 ±(99.9%) 26.051 ms/op

  Histogram, ms/op:
    [2100.000, 2150.000) = 0 
    [2150.000, 2200.000) = 1 
    [2200.000, 2250.000) = 1 
    [2250.000, 2300.000) = 15 
    [2300.000, 2350.000) = 11 
    [2350.000, 2400.000) = 19 
    [2400.000, 2450.000) = 28 
    [2450.000, 2500.000) = 28 
    [2500.000, 2550.000) = 14 

  Percentiles, ms/op:
      p(0.0000) =   2197.815 ms/op
     p(50.0000) =   2432.696 ms/op
     p(90.0000) =   2515.744 ms/op
     p(95.0000) =   2533.360 ms/op
     p(99.0000) =   2564.146 ms/op
     p(99.9000) =   2566.914 ms/op
     p(99.9900) =   2566.914 ms/op
     p(99.9990) =   2566.914 ms/op
     p(99.9999) =   2566.914 ms/op
    p(100.0000) =   2566.914 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2)

# Run progress: 68.75% complete, ETA 03:09:28
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2919.236 ±(99.9%) 1093.811 ms/op
# Warmup Iteration   2: 2722.103 ±(99.9%) 1060.161 ms/op
# Warmup Iteration   3: 2706.375 ±(99.9%) 765.765 ms/op
# Warmup Iteration   4: 2673.869 ±(99.9%) 734.134 ms/op
# Warmup Iteration   5: 2692.743 ±(99.9%) 440.936 ms/op
Iteration   1: 2664.432 ±(99.9%) 503.851 ms/op
                 executeQuery·p0.00:   2575.303 ms/op
                 executeQuery·p0.50:   2659.189 ms/op
                 executeQuery·p0.90:   2764.046 ms/op
                 executeQuery·p0.95:   2764.046 ms/op
                 executeQuery·p0.99:   2764.046 ms/op
                 executeQuery·p0.999:  2764.046 ms/op
                 executeQuery·p0.9999: 2764.046 ms/op
                 executeQuery·p1.00:   2764.046 ms/op

Iteration   2: 2660.237 ±(99.9%) 503.851 ms/op
                 executeQuery·p0.00:   2583.691 ms/op
                 executeQuery·p0.50:   2644.509 ms/op
                 executeQuery·p0.90:   2768.241 ms/op
                 executeQuery·p0.95:   2768.241 ms/op
                 executeQuery·p0.99:   2768.241 ms/op
                 executeQuery·p0.999:  2768.241 ms/op
                 executeQuery·p0.9999: 2768.241 ms/op
                 executeQuery·p1.00:   2768.241 ms/op

Iteration   3: 2743.075 ±(99.9%) 181.141 ms/op
                 executeQuery·p0.00:   2705.326 ms/op
                 executeQuery·p0.50:   2747.269 ms/op
                 executeQuery·p0.90:   2772.435 ms/op
                 executeQuery·p0.95:   2772.435 ms/op
                 executeQuery·p0.99:   2772.435 ms/op
                 executeQuery·p0.999:  2772.435 ms/op
                 executeQuery·p0.9999: 2772.435 ms/op
                 executeQuery·p1.00:   2772.435 ms/op

Iteration   4: 2731.540 ±(99.9%) 342.389 ms/op
                 executeQuery·p0.00:   2675.966 ms/op
                 executeQuery·p0.50:   2728.395 ms/op
                 executeQuery·p0.90:   2793.406 ms/op
                 executeQuery·p0.95:   2793.406 ms/op
                 executeQuery·p0.99:   2793.406 ms/op
                 executeQuery·p0.999:  2793.406 ms/op
                 executeQuery·p0.9999: 2793.406 ms/op
                 executeQuery·p1.00:   2793.406 ms/op

Iteration   5: 2712.666 ±(99.9%) 846.272 ms/op
                 executeQuery·p0.00:   2579.497 ms/op
                 executeQuery·p0.50:   2717.909 ms/op
                 executeQuery·p0.90:   2835.350 ms/op
                 executeQuery·p0.95:   2835.350 ms/op
                 executeQuery·p0.99:   2835.350 ms/op
                 executeQuery·p0.999:  2835.350 ms/op
                 executeQuery·p0.9999: 2835.350 ms/op
                 executeQuery·p1.00:   2835.350 ms/op


# Run progress: 69.06% complete, ETA 03:07:34
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2874.147 ±(99.9%) 945.489 ms/op
# Warmup Iteration   2: 2780.824 ±(99.9%) 675.236 ms/op
# Warmup Iteration   3: 2695.889 ±(99.9%) 557.383 ms/op
# Warmup Iteration   4: 2638.217 ±(99.9%) 388.379 ms/op
# Warmup Iteration   5: 2658.140 ±(99.9%) 740.403 ms/op
Iteration   1: 2692.743 ±(99.9%) 642.531 ms/op
                 executeQuery·p0.00:   2571.108 ms/op
                 executeQuery·p0.50:   2694.840 ms/op
                 executeQuery·p0.90:   2810.184 ms/op
                 executeQuery·p0.95:   2810.184 ms/op
                 executeQuery·p0.99:   2810.184 ms/op
                 executeQuery·p0.999:  2810.184 ms/op
                 executeQuery·p0.9999: 2810.184 ms/op
                 executeQuery·p1.00:   2810.184 ms/op

Iteration   2: 2678.063 ±(99.9%) 613.483 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2707.423 ms/op
                 executeQuery·p0.90:   2755.658 ms/op
                 executeQuery·p0.95:   2755.658 ms/op
                 executeQuery·p0.99:   2755.658 ms/op
                 executeQuery·p0.999:  2755.658 ms/op
                 executeQuery·p0.9999: 2755.658 ms/op
                 executeQuery·p1.00:   2755.658 ms/op

Iteration   3: 2614.100 ±(99.9%) 429.330 ms/op
                 executeQuery·p0.00:   2529.165 ms/op
                 executeQuery·p0.50:   2619.343 ms/op
                 executeQuery·p0.90:   2688.549 ms/op
                 executeQuery·p0.95:   2688.549 ms/op
                 executeQuery·p0.99:   2688.549 ms/op
                 executeQuery·p0.999:  2688.549 ms/op
                 executeQuery·p0.9999: 2688.549 ms/op
                 executeQuery·p1.00:   2688.549 ms/op

Iteration   4: 2662.334 ±(99.9%) 138.864 ms/op
                 executeQuery·p0.00:   2642.412 ms/op
                 executeQuery·p0.50:   2657.092 ms/op
                 executeQuery·p0.90:   2692.743 ms/op
                 executeQuery·p0.95:   2692.743 ms/op
                 executeQuery·p0.99:   2692.743 ms/op
                 executeQuery·p0.999:  2692.743 ms/op
                 executeQuery·p0.9999: 2692.743 ms/op
                 executeQuery·p1.00:   2692.743 ms/op

Iteration   5: 2665.480 ±(99.9%) 836.705 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2675.966 ms/op
                 executeQuery·p0.90:   2805.989 ms/op
                 executeQuery·p0.95:   2805.989 ms/op
                 executeQuery·p0.99:   2805.989 ms/op
                 executeQuery·p0.999:  2805.989 ms/op
                 executeQuery·p0.9999: 2805.989 ms/op
                 executeQuery·p1.00:   2805.989 ms/op


# Run progress: 69.38% complete, ETA 03:05:39
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2857.370 ±(99.9%) 1098.140 ms/op
# Warmup Iteration   2: 2752.512 ±(99.9%) 544.044 ms/op
# Warmup Iteration   3: 2700.083 ±(99.9%) 851.464 ms/op
# Warmup Iteration   4: 2699.035 ±(99.9%) 623.382 ms/op
# Warmup Iteration   5: 2648.703 ±(99.9%) 753.881 ms/op
Iteration   1: 2781.872 ±(99.9%) 325.525 ms/op
                 executeQuery·p0.00:   2738.881 ms/op
                 executeQuery·p0.50:   2776.629 ms/op
                 executeQuery·p0.90:   2835.350 ms/op
                 executeQuery·p0.95:   2835.350 ms/op
                 executeQuery·p0.99:   2835.350 ms/op
                 executeQuery·p0.999:  2835.350 ms/op
                 executeQuery·p0.9999: 2835.350 ms/op
                 executeQuery·p1.00:   2835.350 ms/op

Iteration   2: 2649.752 ±(99.9%) 706.557 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2634.023 ms/op
                 executeQuery·p0.90:   2789.212 ms/op
                 executeQuery·p0.95:   2789.212 ms/op
                 executeQuery·p0.99:   2789.212 ms/op
                 executeQuery·p0.999:  2789.212 ms/op
                 executeQuery·p0.9999: 2789.212 ms/op
                 executeQuery·p1.00:   2789.212 ms/op

Iteration   3: 2728.395 ±(99.9%) 294.004 ms/op
                 executeQuery·p0.00:   2675.966 ms/op
                 executeQuery·p0.50:   2728.395 ms/op
                 executeQuery·p0.90:   2780.824 ms/op
                 executeQuery·p0.95:   2780.824 ms/op
                 executeQuery·p0.99:   2780.824 ms/op
                 executeQuery·p0.999:  2780.824 ms/op
                 executeQuery·p0.9999: 2780.824 ms/op
                 executeQuery·p1.00:   2780.824 ms/op

Iteration   4: 2648.703 ±(99.9%) 469.708 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2629.829 ms/op
                 executeQuery·p0.90:   2747.269 ms/op
                 executeQuery·p0.95:   2747.269 ms/op
                 executeQuery·p0.99:   2747.269 ms/op
                 executeQuery·p0.999:  2747.269 ms/op
                 executeQuery·p0.9999: 2747.269 ms/op
                 executeQuery·p1.00:   2747.269 ms/op

Iteration   5: 2654.994 ±(99.9%) 827.731 ms/op
                 executeQuery·p0.00:   2524.971 ms/op
                 executeQuery·p0.50:   2631.926 ms/op
                 executeQuery·p0.90:   2831.155 ms/op
                 executeQuery·p0.95:   2831.155 ms/op
                 executeQuery·p0.99:   2831.155 ms/op
                 executeQuery·p0.999:  2831.155 ms/op
                 executeQuery·p0.9999: 2831.155 ms/op
                 executeQuery·p1.00:   2831.155 ms/op


# Run progress: 69.69% complete, ETA 03:03:45
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2880.438 ±(99.9%) 843.373 ms/op
# Warmup Iteration   2: 2744.123 ±(99.9%) 321.742 ms/op
# Warmup Iteration   3: 2766.143 ±(99.9%) 650.673 ms/op
# Warmup Iteration   4: 2664.432 ±(99.9%) 646.852 ms/op
# Warmup Iteration   5: 2715.812 ±(99.9%) 374.578 ms/op
Iteration   1: 2754.609 ±(99.9%) 483.515 ms/op
                 executeQuery·p0.00:   2671.772 ms/op
                 executeQuery·p0.50:   2747.269 ms/op
                 executeQuery·p0.90:   2852.127 ms/op
                 executeQuery·p0.95:   2852.127 ms/op
                 executeQuery·p0.99:   2852.127 ms/op
                 executeQuery·p0.999:  2852.127 ms/op
                 executeQuery·p0.9999: 2852.127 ms/op
                 executeQuery·p1.00:   2852.127 ms/op

Iteration   2: 2739.929 ±(99.9%) 543.593 ms/op
                 executeQuery·p0.00:   2680.160 ms/op
                 executeQuery·p0.50:   2709.520 ms/op
                 executeQuery·p0.90:   2860.515 ms/op
                 executeQuery·p0.95:   2860.515 ms/op
                 executeQuery·p0.99:   2860.515 ms/op
                 executeQuery·p0.999:  2860.515 ms/op
                 executeQuery·p0.9999: 2860.515 ms/op
                 executeQuery·p1.00:   2860.515 ms/op

Iteration   3: 2713.715 ±(99.9%) 927.084 ms/op
                 executeQuery·p0.00:   2558.525 ms/op
                 executeQuery·p0.50:   2703.229 ms/op
                 executeQuery·p0.90:   2889.875 ms/op
                 executeQuery·p0.95:   2889.875 ms/op
                 executeQuery·p0.99:   2889.875 ms/op
                 executeQuery·p0.999:  2889.875 ms/op
                 executeQuery·p0.9999: 2889.875 ms/op
                 executeQuery·p1.00:   2889.875 ms/op

Iteration   4: 2673.869 ±(99.9%) 652.552 ms/op
                 executeQuery·p0.00:   2550.137 ms/op
                 executeQuery·p0.50:   2688.549 ms/op
                 executeQuery·p0.90:   2768.241 ms/op
                 executeQuery·p0.95:   2768.241 ms/op
                 executeQuery·p0.99:   2768.241 ms/op
                 executeQuery·p0.999:  2768.241 ms/op
                 executeQuery·p0.9999: 2768.241 ms/op
                 executeQuery·p1.00:   2768.241 ms/op

Iteration   5: 2701.132 ±(99.9%) 561.159 ms/op
                 executeQuery·p0.00:   2575.303 ms/op
                 executeQuery·p0.50:   2728.395 ms/op
                 executeQuery·p0.90:   2772.435 ms/op
                 executeQuery·p0.95:   2772.435 ms/op
                 executeQuery·p0.99:   2772.435 ms/op
                 executeQuery·p0.999:  2772.435 ms/op
                 executeQuery·p0.9999: 2772.435 ms/op
                 executeQuery·p1.00:   2772.435 ms/op


# Run progress: 70.00% complete, ETA 03:01:51
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2903.507 ±(99.9%) 1168.364 ms/op
# Warmup Iteration   2: 2708.472 ±(99.9%) 559.575 ms/op
# Warmup Iteration   3: 2695.889 ±(99.9%) 642.674 ms/op
# Warmup Iteration   4: 2629.829 ±(99.9%) 566.371 ms/op
# Warmup Iteration   5: 2749.366 ±(99.9%) 294.004 ms/op
Iteration   1: 2628.780 ±(99.9%) 551.642 ms/op
                 executeQuery·p0.00:   2516.582 ms/op
                 executeQuery·p0.50:   2640.314 ms/op
                 executeQuery·p0.90:   2717.909 ms/op
                 executeQuery·p0.95:   2717.909 ms/op
                 executeQuery·p0.99:   2717.909 ms/op
                 executeQuery·p0.999:  2717.909 ms/op
                 executeQuery·p0.9999: 2717.909 ms/op
                 executeQuery·p1.00:   2717.909 ms/op

Iteration   2: 2746.221 ±(99.9%) 233.547 ms/op
                 executeQuery·p0.00:   2709.520 ms/op
                 executeQuery·p0.50:   2745.172 ms/op
                 executeQuery·p0.90:   2785.018 ms/op
                 executeQuery·p0.95:   2785.018 ms/op
                 executeQuery·p0.99:   2785.018 ms/op
                 executeQuery·p0.999:  2785.018 ms/op
                 executeQuery·p0.9999: 2785.018 ms/op
                 executeQuery·p1.00:   2785.018 ms/op

Iteration   3: 2682.257 ±(99.9%) 629.246 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2684.355 ms/op
                 executeQuery·p0.90:   2772.435 ms/op
                 executeQuery·p0.95:   2772.435 ms/op
                 executeQuery·p0.99:   2772.435 ms/op
                 executeQuery·p0.999:  2772.435 ms/op
                 executeQuery·p0.9999: 2772.435 ms/op
                 executeQuery·p1.00:   2772.435 ms/op

Iteration   4: 2738.881 ±(99.9%) 351.998 ms/op
                 executeQuery·p0.00:   2675.966 ms/op
                 executeQuery·p0.50:   2740.978 ms/op
                 executeQuery·p0.90:   2797.601 ms/op
                 executeQuery·p0.95:   2797.601 ms/op
                 executeQuery·p0.99:   2797.601 ms/op
                 executeQuery·p0.999:  2797.601 ms/op
                 executeQuery·p0.9999: 2797.601 ms/op
                 executeQuery·p1.00:   2797.601 ms/op

Iteration   5: 2650.800 ±(99.9%) 440.936 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2648.703 ms/op
                 executeQuery·p0.90:   2717.909 ms/op
                 executeQuery·p0.95:   2717.909 ms/op
                 executeQuery·p0.99:   2717.909 ms/op
                 executeQuery·p0.999:  2717.909 ms/op
                 executeQuery·p0.9999: 2717.909 ms/op
                 executeQuery·p1.00:   2717.909 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 100
  mean =   2692.743 ±(99.9%) 29.555 ms/op

  Histogram, ms/op:
    [2500.000, 2525.000) = 3 
    [2525.000, 2550.000) = 3 
    [2550.000, 2575.000) = 3 
    [2575.000, 2600.000) = 9 
    [2600.000, 2625.000) = 6 
    [2625.000, 2650.000) = 8 
    [2650.000, 2675.000) = 8 
    [2675.000, 2700.000) = 9 
    [2700.000, 2725.000) = 12 
    [2725.000, 2750.000) = 10 
    [2750.000, 2775.000) = 14 
    [2775.000, 2800.000) = 5 
    [2800.000, 2825.000) = 4 
    [2825.000, 2850.000) = 3 
    [2850.000, 2875.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   2503.999 ms/op
     p(50.0000) =   2701.132 ms/op
     p(90.0000) =   2805.151 ms/op
     p(95.0000) =   2835.140 ms/op
     p(99.0000) =   2889.582 ms/op
     p(99.9000) =   2889.875 ms/op
     p(99.9900) =   2889.875 ms/op
     p(99.9990) =   2889.875 ms/op
     p(99.9999) =   2889.875 ms/op
    p(100.0000) =   2889.875 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4)

# Run progress: 70.31% complete, ETA 02:59:56
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2939.159 ±(99.9%) 985.808 ms/op
# Warmup Iteration   2: 2838.495 ±(99.9%) 644.956 ms/op
# Warmup Iteration   3: 2847.932 ±(99.9%) 821.197 ms/op
# Warmup Iteration   4: 2772.435 ±(99.9%) 507.061 ms/op
# Warmup Iteration   5: 2788.164 ±(99.9%) 536.794 ms/op
Iteration   1: 2830.107 ±(99.9%) 741.725 ms/op
                 executeQuery·p0.00:   2717.909 ms/op
                 executeQuery·p0.50:   2820.669 ms/op
                 executeQuery·p0.90:   2961.179 ms/op
                 executeQuery·p0.95:   2961.179 ms/op
                 executeQuery·p0.99:   2961.179 ms/op
                 executeQuery·p0.999:  2961.179 ms/op
                 executeQuery·p0.9999: 2961.179 ms/op
                 executeQuery·p1.00:   2961.179 ms/op

Iteration   2: 2793.406 ±(99.9%) 148.452 ms/op
                 executeQuery·p0.00:   2759.852 ms/op
                 executeQuery·p0.50:   2801.795 ms/op
                 executeQuery·p0.90:   2810.184 ms/op
                 executeQuery·p0.95:   2810.184 ms/op
                 executeQuery·p0.99:   2810.184 ms/op
                 executeQuery·p0.999:  2810.184 ms/op
                 executeQuery·p0.9999: 2810.184 ms/op
                 executeQuery·p1.00:   2810.184 ms/op

Iteration   3: 2762.998 ±(99.9%) 422.430 ms/op
                 executeQuery·p0.00:   2713.715 ms/op
                 executeQuery·p0.50:   2740.978 ms/op
                 executeQuery·p0.90:   2856.321 ms/op
                 executeQuery·p0.95:   2856.321 ms/op
                 executeQuery·p0.99:   2856.321 ms/op
                 executeQuery·p0.999:  2856.321 ms/op
                 executeQuery·p0.9999: 2856.321 ms/op
                 executeQuery·p1.00:   2856.321 ms/op

Iteration   4: 2794.455 ±(99.9%) 237.704 ms/op
                 executeQuery·p0.00:   2768.241 ms/op
                 executeQuery·p0.50:   2780.824 ms/op
                 executeQuery·p0.90:   2847.932 ms/op
                 executeQuery·p0.95:   2847.932 ms/op
                 executeQuery·p0.99:   2847.932 ms/op
                 executeQuery·p0.999:  2847.932 ms/op
                 executeQuery·p0.9999: 2847.932 ms/op
                 executeQuery·p1.00:   2847.932 ms/op

Iteration   5: 2808.087 ±(99.9%) 172.131 ms/op
                 executeQuery·p0.00:   2772.435 ms/op
                 executeQuery·p0.50:   2812.281 ms/op
                 executeQuery·p0.90:   2835.350 ms/op
                 executeQuery·p0.95:   2835.350 ms/op
                 executeQuery·p0.99:   2835.350 ms/op
                 executeQuery·p0.999:  2835.350 ms/op
                 executeQuery·p0.9999: 2835.350 ms/op
                 executeQuery·p1.00:   2835.350 ms/op


# Run progress: 70.63% complete, ETA 02:58:03
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3049.259 ±(99.9%) 1131.228 ms/op
# Warmup Iteration   2: 2723.152 ±(99.9%) 212.695 ms/op
# Warmup Iteration   3: 2754.609 ±(99.9%) 625.294 ms/op
# Warmup Iteration   4: 2743.075 ±(99.9%) 640.623 ms/op
# Warmup Iteration   5: 2753.561 ±(99.9%) 959.660 ms/op
Iteration   1: 2685.403 ±(99.9%) 292.229 ms/op
                 executeQuery·p0.00:   2629.829 ms/op
                 executeQuery·p0.50:   2692.743 ms/op
                 executeQuery·p0.90:   2726.298 ms/op
                 executeQuery·p0.95:   2726.298 ms/op
                 executeQuery·p0.99:   2726.298 ms/op
                 executeQuery·p0.999:  2726.298 ms/op
                 executeQuery·p0.9999: 2726.298 ms/op
                 executeQuery·p1.00:   2726.298 ms/op

Iteration   2: 2713.715 ±(99.9%) 919.126 ms/op
                 executeQuery·p0.00:   2512.388 ms/op
                 executeQuery·p0.50:   2749.366 ms/op
                 executeQuery·p0.90:   2843.738 ms/op
                 executeQuery·p0.95:   2843.738 ms/op
                 executeQuery·p0.99:   2843.738 ms/op
                 executeQuery·p0.999:  2843.738 ms/op
                 executeQuery·p0.9999: 2843.738 ms/op
                 executeQuery·p1.00:   2843.738 ms/op

Iteration   3: 2712.666 ±(99.9%) 1051.901 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2692.743 ms/op
                 executeQuery·p0.90:   2923.430 ms/op
                 executeQuery·p0.95:   2923.430 ms/op
                 executeQuery·p0.99:   2923.430 ms/op
                 executeQuery·p0.999:  2923.430 ms/op
                 executeQuery·p0.9999: 2923.430 ms/op
                 executeQuery·p1.00:   2923.430 ms/op

Iteration   4: 2683.306 ±(99.9%) 303.733 ms/op
                 executeQuery·p0.00:   2646.606 ms/op
                 executeQuery·p0.50:   2667.577 ms/op
                 executeQuery·p0.90:   2751.463 ms/op
                 executeQuery·p0.95:   2751.463 ms/op
                 executeQuery·p0.99:   2751.463 ms/op
                 executeQuery·p0.999:  2751.463 ms/op
                 executeQuery·p0.9999: 2751.463 ms/op
                 executeQuery·p1.00:   2751.463 ms/op

Iteration   5: 2764.046 ±(99.9%) 292.752 ms/op
                 executeQuery·p0.00:   2705.326 ms/op
                 executeQuery·p0.50:   2774.532 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op


# Run progress: 70.94% complete, ETA 02:56:10
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2999.976 ±(99.9%) 819.518 ms/op
# Warmup Iteration   2: 2798.649 ±(99.9%) 364.557 ms/op
# Warmup Iteration   3: 2861.564 ±(99.9%) 524.800 ms/op
# Warmup Iteration   4: 2775.581 ±(99.9%) 837.839 ms/op
# Warmup Iteration   5: 2785.018 ±(99.9%) 968.423 ms/op
Iteration   1: 2733.638 ±(99.9%) 437.801 ms/op
                 executeQuery·p0.00:   2642.412 ms/op
                 executeQuery·p0.50:   2751.463 ms/op
                 executeQuery·p0.90:   2789.212 ms/op
                 executeQuery·p0.95:   2789.212 ms/op
                 executeQuery·p0.99:   2789.212 ms/op
                 executeQuery·p0.999:  2789.212 ms/op
                 executeQuery·p0.9999: 2789.212 ms/op
                 executeQuery·p1.00:   2789.212 ms/op

Iteration   2: 2842.690 ±(99.9%) 255.575 ms/op
                 executeQuery·p0.00:   2797.601 ms/op
                 executeQuery·p0.50:   2839.544 ms/op
                 executeQuery·p0.90:   2894.070 ms/op
                 executeQuery·p0.95:   2894.070 ms/op
                 executeQuery·p0.99:   2894.070 ms/op
                 executeQuery·p0.999:  2894.070 ms/op
                 executeQuery·p0.9999: 2894.070 ms/op
                 executeQuery·p1.00:   2894.070 ms/op

Iteration   3: 2848.981 ±(99.9%) 554.299 ms/op
                 executeQuery·p0.00:   2755.658 ms/op
                 executeQuery·p0.50:   2847.932 ms/op
                 executeQuery·p0.90:   2944.401 ms/op
                 executeQuery·p0.95:   2944.401 ms/op
                 executeQuery·p0.99:   2944.401 ms/op
                 executeQuery·p0.999:  2944.401 ms/op
                 executeQuery·p0.9999: 2944.401 ms/op
                 executeQuery·p1.00:   2944.401 ms/op

Iteration   4: 2745.172 ±(99.9%) 523.924 ms/op
                 executeQuery·p0.00:   2642.412 ms/op
                 executeQuery·p0.50:   2755.658 ms/op
                 executeQuery·p0.90:   2826.961 ms/op
                 executeQuery·p0.95:   2826.961 ms/op
                 executeQuery·p0.99:   2826.961 ms/op
                 executeQuery·p0.999:  2826.961 ms/op
                 executeQuery·p0.9999: 2826.961 ms/op
                 executeQuery·p1.00:   2826.961 ms/op

Iteration   5: 2831.155 ±(99.9%) 535.252 ms/op
                 executeQuery·p0.00:   2738.881 ms/op
                 executeQuery·p0.50:   2822.767 ms/op
                 executeQuery·p0.90:   2940.207 ms/op
                 executeQuery·p0.95:   2940.207 ms/op
                 executeQuery·p0.99:   2940.207 ms/op
                 executeQuery·p0.999:  2940.207 ms/op
                 executeQuery·p0.9999: 2940.207 ms/op
                 executeQuery·p1.00:   2940.207 ms/op


# Run progress: 71.25% complete, ETA 02:54:17
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3088.056 ±(99.9%) 1469.165 ms/op
# Warmup Iteration   2: 2773.484 ±(99.9%) 1026.690 ms/op
# Warmup Iteration   3: 2817.524 ±(99.9%) 401.020 ms/op
# Warmup Iteration   4: 2839.544 ±(99.9%) 488.366 ms/op
# Warmup Iteration   5: 2821.718 ±(99.9%) 251.713 ms/op
Iteration   1: 2823.815 ±(99.9%) 426.468 ms/op
                 executeQuery·p0.00:   2730.492 ms/op
                 executeQuery·p0.50:   2839.544 ms/op
                 executeQuery·p0.90:   2885.681 ms/op
                 executeQuery·p0.95:   2885.681 ms/op
                 executeQuery·p0.99:   2885.681 ms/op
                 executeQuery·p0.999:  2885.681 ms/op
                 executeQuery·p0.9999: 2885.681 ms/op
                 executeQuery·p1.00:   2885.681 ms/op

Iteration   2: 2828.009 ±(99.9%) 429.330 ms/op
                 executeQuery·p0.00:   2751.463 ms/op
                 executeQuery·p0.50:   2837.447 ms/op
                 executeQuery·p0.90:   2885.681 ms/op
                 executeQuery·p0.95:   2885.681 ms/op
                 executeQuery·p0.99:   2885.681 ms/op
                 executeQuery·p0.999:  2885.681 ms/op
                 executeQuery·p0.9999: 2885.681 ms/op
                 executeQuery·p1.00:   2885.681 ms/op

Iteration   3: 2746.221 ±(99.9%) 352.259 ms/op
                 executeQuery·p0.00:   2684.355 ms/op
                 executeQuery·p0.50:   2749.366 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   4: 2787.115 ±(99.9%) 730.791 ms/op
                 executeQuery·p0.00:   2671.772 ms/op
                 executeQuery·p0.50:   2789.212 ms/op
                 executeQuery·p0.90:   2898.264 ms/op
                 executeQuery·p0.95:   2898.264 ms/op
                 executeQuery·p0.99:   2898.264 ms/op
                 executeQuery·p0.999:  2898.264 ms/op
                 executeQuery·p0.9999: 2898.264 ms/op
                 executeQuery·p1.00:   2898.264 ms/op

Iteration   5: 2863.661 ±(99.9%) 598.890 ms/op
                 executeQuery·p0.00:   2789.212 ms/op
                 executeQuery·p0.50:   2833.252 ms/op
                 executeQuery·p0.90:   2998.927 ms/op
                 executeQuery·p0.95:   2998.927 ms/op
                 executeQuery·p0.99:   2998.927 ms/op
                 executeQuery·p0.999:  2998.927 ms/op
                 executeQuery·p0.9999: 2998.927 ms/op
                 executeQuery·p1.00:   2998.927 ms/op


# Run progress: 71.56% complete, ETA 02:52:25
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3024.093 ±(99.9%) 1069.818 ms/op
# Warmup Iteration   2: 2841.641 ±(99.9%) 167.809 ms/op
# Warmup Iteration   3: 2808.087 ±(99.9%) 781.316 ms/op
# Warmup Iteration   4: 2768.241 ±(99.9%) 1004.661 ms/op
# Warmup Iteration   5: 2757.755 ±(99.9%) 702.778 ms/op
Iteration   1: 2850.030 ±(99.9%) 470.749 ms/op
                 executeQuery·p0.00:   2743.075 ms/op
                 executeQuery·p0.50:   2875.195 ms/op
                 executeQuery·p0.90:   2906.653 ms/op
                 executeQuery·p0.95:   2906.653 ms/op
                 executeQuery·p0.99:   2906.653 ms/op
                 executeQuery·p0.999:  2906.653 ms/op
                 executeQuery·p0.9999: 2906.653 ms/op
                 executeQuery·p1.00:   2906.653 ms/op

Iteration   2: 2808.087 ±(99.9%) 581.096 ms/op
                 executeQuery·p0.00:   2722.103 ms/op
                 executeQuery·p0.50:   2810.184 ms/op
                 executeQuery·p0.90:   2889.875 ms/op
                 executeQuery·p0.95:   2889.875 ms/op
                 executeQuery·p0.99:   2889.875 ms/op
                 executeQuery·p0.999:  2889.875 ms/op
                 executeQuery·p0.9999: 2889.875 ms/op
                 executeQuery·p1.00:   2889.875 ms/op

Iteration   3: 2747.269 ±(99.9%) 756.314 ms/op
                 executeQuery·p0.00:   2646.606 ms/op
                 executeQuery·p0.50:   2713.715 ms/op
                 executeQuery·p0.90:   2915.041 ms/op
                 executeQuery·p0.95:   2915.041 ms/op
                 executeQuery·p0.99:   2915.041 ms/op
                 executeQuery·p0.999:  2915.041 ms/op
                 executeQuery·p0.9999: 2915.041 ms/op
                 executeQuery·p1.00:   2915.041 ms/op

Iteration   4: 2764.046 ±(99.9%) 770.110 ms/op
                 executeQuery·p0.00:   2617.246 ms/op
                 executeQuery·p0.50:   2782.921 ms/op
                 executeQuery·p0.90:   2873.098 ms/op
                 executeQuery·p0.95:   2873.098 ms/op
                 executeQuery·p0.99:   2873.098 ms/op
                 executeQuery·p0.999:  2873.098 ms/op
                 executeQuery·p0.9999: 2873.098 ms/op
                 executeQuery·p1.00:   2873.098 ms/op

Iteration   5: 2817.524 ±(99.9%) 272.275 ms/op
                 executeQuery·p0.00:   2764.046 ms/op
                 executeQuery·p0.50:   2820.669 ms/op
                 executeQuery·p0.90:   2864.710 ms/op
                 executeQuery·p0.95:   2864.710 ms/op
                 executeQuery·p0.99:   2864.710 ms/op
                 executeQuery·p0.999:  2864.710 ms/op
                 executeQuery·p0.9999: 2864.710 ms/op
                 executeQuery·p1.00:   2864.710 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 100
  mean =   2783.424 ±(99.9%) 30.399 ms/op

  Histogram, ms/op:
    [2500.000, 2550.000) = 2 
    [2550.000, 2600.000) = 0 
    [2600.000, 2650.000) = 7 
    [2650.000, 2700.000) = 6 
    [2700.000, 2750.000) = 19 
    [2750.000, 2800.000) = 22 
    [2800.000, 2850.000) = 22 
    [2850.000, 2900.000) = 15 
    [2900.000, 2950.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =   2512.388 ms/op
     p(50.0000) =   2789.212 ms/op
     p(90.0000) =   2893.650 ms/op
     p(95.0000) =   2923.010 ms/op
     p(99.0000) =   2998.550 ms/op
     p(99.9000) =   2998.927 ms/op
     p(99.9900) =   2998.927 ms/op
     p(99.9990) =   2998.927 ms/op
     p(99.9999) =   2998.927 ms/op
    p(100.0000) =   2998.927 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6)

# Run progress: 71.88% complete, ETA 02:50:32
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3120.562 ±(99.9%) 582.569 ms/op
# Warmup Iteration   2: 2928.673 ±(99.9%) 487.550 ms/op
# Warmup Iteration   3: 2945.450 ±(99.9%) 379.692 ms/op
# Warmup Iteration   4: 2968.519 ±(99.9%) 687.944 ms/op
# Warmup Iteration   5: 2912.944 ±(99.9%) 808.425 ms/op
Iteration   1: 2915.041 ±(99.9%) 491.365 ms/op
                 executeQuery·p0.00:   2822.767 ms/op
                 executeQuery·p0.50:   2915.041 ms/op
                 executeQuery·p0.90:   3007.316 ms/op
                 executeQuery·p0.95:   3007.316 ms/op
                 executeQuery·p0.99:   3007.316 ms/op
                 executeQuery·p0.999:  3007.316 ms/op
                 executeQuery·p0.9999: 3007.316 ms/op
                 executeQuery·p1.00:   3007.316 ms/op

Iteration   2: 2970.616 ±(99.9%) 629.975 ms/op
                 executeQuery·p0.00:   2864.710 ms/op
                 executeQuery·p0.50:   2982.150 ms/op
                 executeQuery·p0.90:   3053.453 ms/op
                 executeQuery·p0.95:   3053.453 ms/op
                 executeQuery·p0.99:   3053.453 ms/op
                 executeQuery·p0.999:  3053.453 ms/op
                 executeQuery·p0.9999: 3053.453 ms/op
                 executeQuery·p1.00:   3053.453 ms/op

Iteration   3: 2880.438 ±(99.9%) 809.900 ms/op
                 executeQuery·p0.00:   2726.298 ms/op
                 executeQuery·p0.50:   2894.070 ms/op
                 executeQuery·p0.90:   3007.316 ms/op
                 executeQuery·p0.95:   3007.316 ms/op
                 executeQuery·p0.99:   3007.316 ms/op
                 executeQuery·p0.999:  3007.316 ms/op
                 executeQuery·p0.9999: 3007.316 ms/op
                 executeQuery·p1.00:   3007.316 ms/op

Iteration   4: 2939.159 ±(99.9%) 251.713 ms/op
                 executeQuery·p0.00:   2894.070 ms/op
                 executeQuery·p0.50:   2944.401 ms/op
                 executeQuery·p0.90:   2973.762 ms/op
                 executeQuery·p0.95:   2973.762 ms/op
                 executeQuery·p0.99:   2973.762 ms/op
                 executeQuery·p0.999:  2973.762 ms/op
                 executeQuery·p0.9999: 2973.762 ms/op
                 executeQuery·p1.00:   2973.762 ms/op

Iteration   5: 2844.787 ±(99.9%) 611.434 ms/op
                 executeQuery·p0.00:   2747.269 ms/op
                 executeQuery·p0.50:   2837.447 ms/op
                 executeQuery·p0.90:   2956.984 ms/op
                 executeQuery·p0.95:   2956.984 ms/op
                 executeQuery·p0.99:   2956.984 ms/op
                 executeQuery·p0.999:  2956.984 ms/op
                 executeQuery·p0.9999: 2956.984 ms/op
                 executeQuery·p1.00:   2956.984 ms/op


# Run progress: 72.19% complete, ETA 02:48:41
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3074.425 ±(99.9%) 738.292 ms/op
# Warmup Iteration   2: 2952.790 ±(99.9%) 281.668 ms/op
# Warmup Iteration   3: 2868.904 ±(99.9%) 178.417 ms/op
# Warmup Iteration   4: 2987.393 ±(99.9%) 404.667 ms/op
# Warmup Iteration   5: 2951.741 ±(99.9%) 812.617 ms/op
Iteration   1: 2839.544 ±(99.9%) 145.116 ms/op
                 executeQuery·p0.00:   2826.961 ms/op
                 executeQuery·p0.50:   2829.058 ms/op
                 executeQuery·p0.90:   2873.098 ms/op
                 executeQuery·p0.95:   2873.098 ms/op
                 executeQuery·p0.99:   2873.098 ms/op
                 executeQuery·p0.999:  2873.098 ms/op
                 executeQuery·p0.9999: 2873.098 ms/op
                 executeQuery·p1.00:   2873.098 ms/op

Iteration   2: 2916.090 ±(99.9%) 405.875 ms/op
                 executeQuery·p0.00:   2856.321 ms/op
                 executeQuery·p0.50:   2902.458 ms/op
                 executeQuery·p0.90:   3003.122 ms/op
                 executeQuery·p0.95:   3003.122 ms/op
                 executeQuery·p0.99:   3003.122 ms/op
                 executeQuery·p0.999:  3003.122 ms/op
                 executeQuery·p0.9999: 3003.122 ms/op
                 executeQuery·p1.00:   3003.122 ms/op

Iteration   3: 2887.778 ±(99.9%) 705.560 ms/op
                 executeQuery·p0.00:   2768.241 ms/op
                 executeQuery·p0.50:   2896.167 ms/op
                 executeQuery·p0.90:   2990.539 ms/op
                 executeQuery·p0.95:   2990.539 ms/op
                 executeQuery·p0.99:   2990.539 ms/op
                 executeQuery·p0.999:  2990.539 ms/op
                 executeQuery·p0.9999: 2990.539 ms/op
                 executeQuery·p1.00:   2990.539 ms/op

Iteration   4: 2909.798 ±(99.9%) 417.180 ms/op
                 executeQuery·p0.00:   2847.932 ms/op
                 executeQuery·p0.50:   2900.361 ms/op
                 executeQuery·p0.90:   2990.539 ms/op
                 executeQuery·p0.95:   2990.539 ms/op
                 executeQuery·p0.99:   2990.539 ms/op
                 executeQuery·p0.999:  2990.539 ms/op
                 executeQuery·p0.9999: 2990.539 ms/op
                 executeQuery·p1.00:   2990.539 ms/op

Iteration   5: 2884.633 ±(99.9%) 228.244 ms/op
                 executeQuery·p0.00:   2835.350 ms/op
                 executeQuery·p0.50:   2891.973 ms/op
                 executeQuery·p0.90:   2919.236 ms/op
                 executeQuery·p0.95:   2919.236 ms/op
                 executeQuery·p0.99:   2919.236 ms/op
                 executeQuery·p0.999:  2919.236 ms/op
                 executeQuery·p0.9999: 2919.236 ms/op
                 executeQuery·p1.00:   2919.236 ms/op


# Run progress: 72.50% complete, ETA 02:46:50
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3089.105 ±(99.9%) 753.881 ms/op
# Warmup Iteration   2: 2934.964 ±(99.9%) 475.343 ms/op
# Warmup Iteration   3: 2865.758 ±(99.9%) 463.872 ms/op
# Warmup Iteration   4: 2897.215 ±(99.9%) 938.471 ms/op
# Warmup Iteration   5: 2924.478 ±(99.9%) 612.634 ms/op
Iteration   1: 2927.624 ±(99.9%) 301.000 ms/op
                 executeQuery·p0.00:   2873.098 ms/op
                 executeQuery·p0.50:   2925.527 ms/op
                 executeQuery·p0.90:   2986.344 ms/op
                 executeQuery·p0.95:   2986.344 ms/op
                 executeQuery·p0.99:   2986.344 ms/op
                 executeQuery·p0.999:  2986.344 ms/op
                 executeQuery·p0.9999: 2986.344 ms/op
                 executeQuery·p1.00:   2986.344 ms/op

Iteration   2: 2859.467 ±(99.9%) 711.737 ms/op
                 executeQuery·p0.00:   2734.686 ms/op
                 executeQuery·p0.50:   2850.030 ms/op
                 executeQuery·p0.90:   3003.122 ms/op
                 executeQuery·p0.95:   3003.122 ms/op
                 executeQuery·p0.99:   3003.122 ms/op
                 executeQuery·p0.999:  3003.122 ms/op
                 executeQuery·p0.9999: 3003.122 ms/op
                 executeQuery·p1.00:   3003.122 ms/op

Iteration   3: 2893.021 ±(99.9%) 231.441 ms/op
                 executeQuery·p0.00:   2843.738 ms/op
                 executeQuery·p0.50:   2902.458 ms/op
                 executeQuery·p0.90:   2923.430 ms/op
                 executeQuery·p0.95:   2923.430 ms/op
                 executeQuery·p0.99:   2923.430 ms/op
                 executeQuery·p0.999:  2923.430 ms/op
                 executeQuery·p0.9999: 2923.430 ms/op
                 executeQuery·p1.00:   2923.430 ms/op

Iteration   4: 2954.887 ±(99.9%) 347.447 ms/op
                 executeQuery·p0.00:   2902.458 ms/op
                 executeQuery·p0.50:   2944.401 ms/op
                 executeQuery·p0.90:   3028.287 ms/op
                 executeQuery·p0.95:   3028.287 ms/op
                 executeQuery·p0.99:   3028.287 ms/op
                 executeQuery·p0.999:  3028.287 ms/op
                 executeQuery·p0.9999: 3028.287 ms/op
                 executeQuery·p1.00:   3028.287 ms/op

Iteration   5: 2933.916 ±(99.9%) 504.883 ms/op
                 executeQuery·p0.00:   2843.738 ms/op
                 executeQuery·p0.50:   2931.818 ms/op
                 executeQuery·p0.90:   3028.287 ms/op
                 executeQuery·p0.95:   3028.287 ms/op
                 executeQuery·p0.99:   3028.287 ms/op
                 executeQuery·p0.999:  3028.287 ms/op
                 executeQuery·p0.9999: 3028.287 ms/op
                 executeQuery·p1.00:   3028.287 ms/op


# Run progress: 72.81% complete, ETA 02:44:59
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3041.919 ±(99.9%) 1060.479 ms/op
# Warmup Iteration   2: 2913.993 ±(99.9%) 772.451 ms/op
# Warmup Iteration   3: 2929.721 ±(99.9%) 956.593 ms/op
# Warmup Iteration   4: 2889.875 ±(99.9%) 632.545 ms/op
# Warmup Iteration   5: 2894.070 ±(99.9%) 831.274 ms/op
Iteration   1: 2854.224 ±(99.9%) 747.357 ms/op
                 executeQuery·p0.00:   2755.658 ms/op
                 executeQuery·p0.50:   2820.669 ms/op
                 executeQuery·p0.90:   3019.899 ms/op
                 executeQuery·p0.95:   3019.899 ms/op
                 executeQuery·p0.99:   3019.899 ms/op
                 executeQuery·p0.999:  3019.899 ms/op
                 executeQuery·p0.9999: 3019.899 ms/op
                 executeQuery·p1.00:   3019.899 ms/op

Iteration   2: 2835.350 ±(99.9%) 973.718 ms/op
                 executeQuery·p0.00:   2684.355 ms/op
                 executeQuery·p0.50:   2826.961 ms/op
                 executeQuery·p0.90:   3003.122 ms/op
                 executeQuery·p0.95:   3003.122 ms/op
                 executeQuery·p0.99:   3003.122 ms/op
                 executeQuery·p0.999:  3003.122 ms/op
                 executeQuery·p0.9999: 3003.122 ms/op
                 executeQuery·p1.00:   3003.122 ms/op

Iteration   3: 2950.693 ±(99.9%) 288.963 ms/op
                 executeQuery·p0.00:   2915.041 ms/op
                 executeQuery·p0.50:   2938.110 ms/op
                 executeQuery·p0.90:   3011.510 ms/op
                 executeQuery·p0.95:   3011.510 ms/op
                 executeQuery·p0.99:   3011.510 ms/op
                 executeQuery·p0.999:  3011.510 ms/op
                 executeQuery·p0.9999: 3011.510 ms/op
                 executeQuery·p1.00:   3011.510 ms/op

Iteration   4: 2911.896 ±(99.9%) 793.097 ms/op
                 executeQuery·p0.00:   2759.852 ms/op
                 executeQuery·p0.50:   2917.138 ms/op
                 executeQuery·p0.90:   3053.453 ms/op
                 executeQuery·p0.95:   3053.453 ms/op
                 executeQuery·p0.99:   3053.453 ms/op
                 executeQuery·p0.999:  3053.453 ms/op
                 executeQuery·p0.9999: 3053.453 ms/op
                 executeQuery·p1.00:   3053.453 ms/op

Iteration   5: 2903.507 ±(99.9%) 177.558 ms/op
                 executeQuery·p0.00:   2868.904 ms/op
                 executeQuery·p0.50:   2904.556 ms/op
                 executeQuery·p0.90:   2936.013 ms/op
                 executeQuery·p0.95:   2936.013 ms/op
                 executeQuery·p0.99:   2936.013 ms/op
                 executeQuery·p0.999:  2936.013 ms/op
                 executeQuery·p0.9999: 2936.013 ms/op
                 executeQuery·p1.00:   2936.013 ms/op


# Run progress: 73.13% complete, ETA 02:43:07
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3045.065 ±(99.9%) 1756.232 ms/op
# Warmup Iteration   2: 2834.301 ±(99.9%) 376.453 ms/op
# Warmup Iteration   3: 2850.030 ±(99.9%) 829.357 ms/op
# Warmup Iteration   4: 2832.204 ±(99.9%) 743.044 ms/op
# Warmup Iteration   5: 2841.641 ±(99.9%) 137.313 ms/op
Iteration   1: 2900.361 ±(99.9%) 314.915 ms/op
                 executeQuery·p0.00:   2831.155 ms/op
                 executeQuery·p0.50:   2915.041 ms/op
                 executeQuery·p0.90:   2940.207 ms/op
                 executeQuery·p0.95:   2940.207 ms/op
                 executeQuery·p0.99:   2940.207 ms/op
                 executeQuery·p0.999:  2940.207 ms/op
                 executeQuery·p0.9999: 2940.207 ms/op
                 executeQuery·p1.00:   2940.207 ms/op

Iteration   2: 2823.815 ±(99.9%) 174.778 ms/op
                 executeQuery·p0.00:   2797.601 ms/op
                 executeQuery·p0.50:   2820.669 ms/op
                 executeQuery·p0.90:   2856.321 ms/op
                 executeQuery·p0.95:   2856.321 ms/op
                 executeQuery·p0.99:   2856.321 ms/op
                 executeQuery·p0.999:  2856.321 ms/op
                 executeQuery·p0.9999: 2856.321 ms/op
                 executeQuery·p1.00:   2856.321 ms/op

Iteration   3: 2836.398 ±(99.9%) 686.162 ms/op
                 executeQuery·p0.00:   2705.326 ms/op
                 executeQuery·p0.50:   2845.835 ms/op
                 executeQuery·p0.90:   2948.596 ms/op
                 executeQuery·p0.95:   2948.596 ms/op
                 executeQuery·p0.99:   2948.596 ms/op
                 executeQuery·p0.999:  2948.596 ms/op
                 executeQuery·p0.9999: 2948.596 ms/op
                 executeQuery·p1.00:   2948.596 ms/op

Iteration   4: 2837.447 ±(99.9%) 803.564 ms/op
                 executeQuery·p0.00:   2684.355 ms/op
                 executeQuery·p0.50:   2841.641 ms/op
                 executeQuery·p0.90:   2982.150 ms/op
                 executeQuery·p0.95:   2982.150 ms/op
                 executeQuery·p0.99:   2982.150 ms/op
                 executeQuery·p0.999:  2982.150 ms/op
                 executeQuery·p0.9999: 2982.150 ms/op
                 executeQuery·p1.00:   2982.150 ms/op

Iteration   5: 2865.758 ±(99.9%) 412.458 ms/op
                 executeQuery·p0.00:   2801.795 ms/op
                 executeQuery·p0.50:   2862.612 ms/op
                 executeQuery·p0.90:   2936.013 ms/op
                 executeQuery·p0.95:   2936.013 ms/op
                 executeQuery·p0.99:   2936.013 ms/op
                 executeQuery·p0.999:  2936.013 ms/op
                 executeQuery·p0.9999: 2936.013 ms/op
                 executeQuery·p1.00:   2936.013 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 100
  mean =   2891.050 ±(99.9%) 28.507 ms/op

  Histogram, ms/op:
    [2600.000, 2650.000) = 0 
    [2650.000, 2700.000) = 2 
    [2700.000, 2750.000) = 5 
    [2750.000, 2800.000) = 5 
    [2800.000, 2850.000) = 20 
    [2850.000, 2900.000) = 17 
    [2900.000, 2950.000) = 27 
    [2950.000, 3000.000) = 12 
    [3000.000, 3050.000) = 9 

  Percentiles, ms/op:
      p(0.0000) =   2684.355 ms/op
     p(50.0000) =   2902.458 ms/op
     p(90.0000) =   3003.122 ms/op
     p(95.0000) =   3027.868 ms/op
     p(99.0000) =   3053.453 ms/op
     p(99.9000) =   3053.453 ms/op
     p(99.9900) =   3053.453 ms/op
     p(99.9990) =   3053.453 ms/op
     p(99.9999) =   3053.453 ms/op
    p(100.0000) =   3053.453 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8)

# Run progress: 73.44% complete, ETA 02:41:15
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_2100239584 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_2100239584(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_2100239584> join_map = new Int_Multi_Object_Map<JRT_2100239584>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1805251188 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1805251188(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1805251188> join_map_0 = new Int_Multi_Object_Map<JRT_1805251188>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1805251188 left_join_record = new JRT_1805251188(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1805251188> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1805251188 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_2100239584 left_join_record_0 = new JRT_2100239584(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_2100239584> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_2100239584 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3282.742 ±(99.9%) 6232.640 ms/op
# Warmup Iteration   2: 2955.936 ±(99.9%) 643.436 ms/op
# Warmup Iteration   3: 2947.547 ±(99.9%) 348.063 ms/op
# Warmup Iteration   4: 2952.790 ±(99.9%) 93.889 ms/op
# Warmup Iteration   5: 2941.256 ±(99.9%) 463.872 ms/op
Iteration   1: 2933.916 ±(99.9%) 537.762 ms/op
                 executeQuery·p0.00:   2843.738 ms/op
                 executeQuery·p0.50:   2925.527 ms/op
                 executeQuery·p0.90:   3040.870 ms/op
                 executeQuery·p0.95:   3040.870 ms/op
                 executeQuery·p0.99:   3040.870 ms/op
                 executeQuery·p0.999:  3040.870 ms/op
                 executeQuery·p0.9999: 3040.870 ms/op
                 executeQuery·p1.00:   3040.870 ms/op

Iteration   2: 2942.304 ±(99.9%) 788.802 ms/op
                 executeQuery·p0.00:   2818.572 ms/op
                 executeQuery·p0.50:   2950.693 ms/op
                 executeQuery·p0.90:   3049.259 ms/op
                 executeQuery·p0.95:   3049.259 ms/op
                 executeQuery·p0.99:   3049.259 ms/op
                 executeQuery·p0.999:  3049.259 ms/op
                 executeQuery·p0.9999: 3049.259 ms/op
                 executeQuery·p1.00:   3049.259 ms/op

Iteration   3: 2952.790 ±(99.9%) 277.288 ms/op
                 executeQuery·p0.00:   2889.875 ms/op
                 executeQuery·p0.50:   2969.567 ms/op
                 executeQuery·p0.90:   2982.150 ms/op
                 executeQuery·p0.95:   2982.150 ms/op
                 executeQuery·p0.99:   2982.150 ms/op
                 executeQuery·p0.999:  2982.150 ms/op
                 executeQuery·p0.9999: 2982.150 ms/op
                 executeQuery·p1.00:   2982.150 ms/op

Iteration   4: 2968.519 ±(99.9%) 331.488 ms/op
                 executeQuery·p0.00:   2919.236 ms/op
                 executeQuery·p0.50:   2961.179 ms/op
                 executeQuery·p0.90:   3032.482 ms/op
                 executeQuery·p0.95:   3032.482 ms/op
                 executeQuery·p0.99:   3032.482 ms/op
                 executeQuery·p0.999:  3032.482 ms/op
                 executeQuery·p0.9999: 3032.482 ms/op
                 executeQuery·p1.00:   3032.482 ms/op

Iteration   5: 2996.830 ±(99.9%) 582.358 ms/op
                 executeQuery·p0.00:   2931.818 ms/op
                 executeQuery·p0.50:   2963.276 ms/op
                 executeQuery·p0.90:   3128.951 ms/op
                 executeQuery·p0.95:   3128.951 ms/op
                 executeQuery·p0.99:   3128.951 ms/op
                 executeQuery·p0.999:  3128.951 ms/op
                 executeQuery·p0.9999: 3128.951 ms/op
                 executeQuery·p1.00:   3128.951 ms/op


# Run progress: 73.75% complete, ETA 02:39:23
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3312.102 ±(99.9%) 5828.740 ms/op
# Warmup Iteration   2: 3005.219 ±(99.9%) 441.768 ms/op
# Warmup Iteration   3: 3025.142 ±(99.9%) 131.622 ms/op
# Warmup Iteration   4: 2973.762 ±(99.9%) 452.989 ms/op
# Warmup Iteration   5: 2940.207 ±(99.9%) 503.183 ms/op
Iteration   1: 2979.004 ±(99.9%) 1078.112 ms/op
                 executeQuery·p0.00:   2826.961 ms/op
                 executeQuery·p0.50:   2936.013 ms/op
                 executeQuery·p0.90:   3217.031 ms/op
                 executeQuery·p0.95:   3217.031 ms/op
                 executeQuery·p0.99:   3217.031 ms/op
                 executeQuery·p0.999:  3217.031 ms/op
                 executeQuery·p0.9999: 3217.031 ms/op
                 executeQuery·p1.00:   3217.031 ms/op

Iteration   2: 2985.296 ±(99.9%) 671.007 ms/op
                 executeQuery·p0.00:   2898.264 ms/op
                 executeQuery·p0.50:   2954.887 ms/op
                 executeQuery·p0.90:   3133.145 ms/op
                 executeQuery·p0.95:   3133.145 ms/op
                 executeQuery·p0.99:   3133.145 ms/op
                 executeQuery·p0.999:  3133.145 ms/op
                 executeQuery·p0.9999: 3133.145 ms/op
                 executeQuery·p1.00:   3133.145 ms/op

Iteration   3: 2925.527 ±(99.9%) 672.146 ms/op
                 executeQuery·p0.00:   2847.932 ms/op
                 executeQuery·p0.50:   2889.875 ms/op
                 executeQuery·p0.90:   3074.425 ms/op
                 executeQuery·p0.95:   3074.425 ms/op
                 executeQuery·p0.99:   3074.425 ms/op
                 executeQuery·p0.999:  3074.425 ms/op
                 executeQuery·p0.9999: 3074.425 ms/op
                 executeQuery·p1.00:   3074.425 ms/op

Iteration   4: 2949.644 ±(99.9%) 1095.237 ms/op
                 executeQuery·p0.00:   2768.241 ms/op
                 executeQuery·p0.50:   2950.693 ms/op
                 executeQuery·p0.90:   3128.951 ms/op
                 executeQuery·p0.95:   3128.951 ms/op
                 executeQuery·p0.99:   3128.951 ms/op
                 executeQuery·p0.999:  3128.951 ms/op
                 executeQuery·p0.9999: 3128.951 ms/op
                 executeQuery·p1.00:   3128.951 ms/op

Iteration   5: 2954.887 ±(99.9%) 104.972 ms/op
                 executeQuery·p0.00:   2940.207 ms/op
                 executeQuery·p0.50:   2950.693 ms/op
                 executeQuery·p0.90:   2977.956 ms/op
                 executeQuery·p0.95:   2977.956 ms/op
                 executeQuery·p0.99:   2977.956 ms/op
                 executeQuery·p0.999:  2977.956 ms/op
                 executeQuery·p0.9999: 2977.956 ms/op
                 executeQuery·p1.00:   2977.956 ms/op


# Run progress: 74.06% complete, ETA 02:37:31
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3307.908 ±(99.9%) 2090.450 ms/op
# Warmup Iteration   2: 3070.231 ±(99.9%) 679.573 ms/op
# Warmup Iteration   3: 3083.862 ±(99.9%) 795.871 ms/op
# Warmup Iteration   4: 3027.239 ±(99.9%) 1004.752 ms/op
# Warmup Iteration   5: 2986.344 ±(99.9%) 463.674 ms/op
Iteration   1: 3014.656 ±(99.9%) 357.777 ms/op
                 executeQuery·p0.00:   2965.373 ms/op
                 executeQuery·p0.50:   3003.122 ms/op
                 executeQuery·p0.90:   3087.008 ms/op
                 executeQuery·p0.95:   3087.008 ms/op
                 executeQuery·p0.99:   3087.008 ms/op
                 executeQuery·p0.999:  3087.008 ms/op
                 executeQuery·p0.9999: 3087.008 ms/op
                 executeQuery·p1.00:   3087.008 ms/op

Iteration   2: 3024.093 ±(99.9%) 562.467 ms/op
                 executeQuery·p0.00:   2902.458 ms/op
                 executeQuery·p0.50:   3053.453 ms/op
                 executeQuery·p0.90:   3087.008 ms/op
                 executeQuery·p0.95:   3087.008 ms/op
                 executeQuery·p0.99:   3087.008 ms/op
                 executeQuery·p0.999:  3087.008 ms/op
                 executeQuery·p0.9999: 3087.008 ms/op
                 executeQuery·p1.00:   3087.008 ms/op

Iteration   3: 3058.696 ±(99.9%) 432.172 ms/op
                 executeQuery·p0.00:   2977.956 ms/op
                 executeQuery·p0.50:   3057.648 ms/op
                 executeQuery·p0.90:   3141.534 ms/op
                 executeQuery·p0.95:   3141.534 ms/op
                 executeQuery·p0.99:   3141.534 ms/op
                 executeQuery·p0.999:  3141.534 ms/op
                 executeQuery·p0.9999: 3141.534 ms/op
                 executeQuery·p1.00:   3141.534 ms/op

Iteration   4: 3004.170 ±(99.9%) 569.981 ms/op
                 executeQuery·p0.00:   2923.430 ms/op
                 executeQuery·p0.50:   2984.247 ms/op
                 executeQuery·p0.90:   3124.756 ms/op
                 executeQuery·p0.95:   3124.756 ms/op
                 executeQuery·p0.99:   3124.756 ms/op
                 executeQuery·p0.999:  3124.756 ms/op
                 executeQuery·p0.9999: 3124.756 ms/op
                 executeQuery·p1.00:   3124.756 ms/op

Iteration   5: 3030.385 ±(99.9%) 439.546 ms/op
                 executeQuery·p0.00:   2969.567 ms/op
                 executeQuery·p0.50:   3013.607 ms/op
                 executeQuery·p0.90:   3124.756 ms/op
                 executeQuery·p0.95:   3124.756 ms/op
                 executeQuery·p0.99:   3124.756 ms/op
                 executeQuery·p0.999:  3124.756 ms/op
                 executeQuery·p0.9999: 3124.756 ms/op
                 executeQuery·p1.00:   3124.756 ms/op


# Run progress: 74.38% complete, ETA 02:35:40
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3209.691 ±(99.9%) 1137.999 ms/op
# Warmup Iteration   2: 3060.793 ±(99.9%) 581.885 ms/op
# Warmup Iteration   3: 3080.716 ±(99.9%) 266.020 ms/op
# Warmup Iteration   4: 2995.782 ±(99.9%) 556.063 ms/op
# Warmup Iteration   5: 3047.162 ±(99.9%) 318.010 ms/op
Iteration   1: 2972.713 ±(99.9%) 627.249 ms/op
                 executeQuery·p0.00:   2885.681 ms/op
                 executeQuery·p0.50:   2950.693 ms/op
                 executeQuery·p0.90:   3103.785 ms/op
                 executeQuery·p0.95:   3103.785 ms/op
                 executeQuery·p0.99:   3103.785 ms/op
                 executeQuery·p0.999:  3103.785 ms/op
                 executeQuery·p0.9999: 3103.785 ms/op
                 executeQuery·p1.00:   3103.785 ms/op

Iteration   2: 3090.153 ±(99.9%) 265.905 ms/op
                 executeQuery·p0.00:   3040.870 ms/op
                 executeQuery·p0.50:   3089.105 ms/op
                 executeQuery·p0.90:   3141.534 ms/op
                 executeQuery·p0.95:   3141.534 ms/op
                 executeQuery·p0.99:   3141.534 ms/op
                 executeQuery·p0.999:  3141.534 ms/op
                 executeQuery·p0.9999: 3141.534 ms/op
                 executeQuery·p1.00:   3141.534 ms/op

Iteration   3: 3033.530 ±(99.9%) 632.303 ms/op
                 executeQuery·p0.00:   2948.596 ms/op
                 executeQuery·p0.50:   3021.996 ms/op
                 executeQuery·p0.90:   3141.534 ms/op
                 executeQuery·p0.95:   3141.534 ms/op
                 executeQuery·p0.99:   3141.534 ms/op
                 executeQuery·p0.999:  3141.534 ms/op
                 executeQuery·p0.9999: 3141.534 ms/op
                 executeQuery·p1.00:   3141.534 ms/op

Iteration   4: 3032.482 ±(99.9%) 517.103 ms/op
                 executeQuery·p0.00:   2944.401 ms/op
                 executeQuery·p0.50:   3036.676 ms/op
                 executeQuery·p0.90:   3112.174 ms/op
                 executeQuery·p0.95:   3112.174 ms/op
                 executeQuery·p0.99:   3112.174 ms/op
                 executeQuery·p0.999:  3112.174 ms/op
                 executeQuery·p0.9999: 3112.174 ms/op
                 executeQuery·p1.00:   3112.174 ms/op

Iteration   5: 3010.462 ±(99.9%) 446.112 ms/op
                 executeQuery·p0.00:   2944.401 ms/op
                 executeQuery·p0.50:   3001.025 ms/op
                 executeQuery·p0.90:   3095.396 ms/op
                 executeQuery·p0.95:   3095.396 ms/op
                 executeQuery·p0.99:   3095.396 ms/op
                 executeQuery·p0.999:  3095.396 ms/op
                 executeQuery·p0.9999: 3095.396 ms/op
                 executeQuery·p1.00:   3095.396 ms/op


# Run progress: 74.69% complete, ETA 02:33:50
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_1142877482 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_1142877482(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_1142877482> join_map = new Int_Multi_Object_Map<JRT_1142877482>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1049239655 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1049239655(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1049239655> join_map_0 = new Int_Multi_Object_Map<JRT_1049239655>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1049239655 left_join_record = new JRT_1049239655(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1049239655> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1049239655 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_1142877482 left_join_record_0 = new JRT_1142877482(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1142877482> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_1142877482 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3210.740 ±(99.9%) 894.417 ms/op
# Warmup Iteration   2: 3057.648 ±(99.9%) 643.293 ms/op
# Warmup Iteration   3: 2989.490 ±(99.9%) 583.986 ms/op
# Warmup Iteration   4: 2997.879 ±(99.9%) 835.790 ms/op
# Warmup Iteration   5: 3066.036 ±(99.9%) 542.974 ms/op
Iteration   1: 3055.550 ±(99.9%) 263.244 ms/op
                 executeQuery·p0.00:   3015.705 ms/op
                 executeQuery·p0.50:   3049.259 ms/op
                 executeQuery·p0.90:   3107.979 ms/op
                 executeQuery·p0.95:   3107.979 ms/op
                 executeQuery·p0.99:   3107.979 ms/op
                 executeQuery·p0.999:  3107.979 ms/op
                 executeQuery·p0.9999: 3107.979 ms/op
                 executeQuery·p1.00:   3107.979 ms/op

Iteration   2: 3034.579 ±(99.9%) 607.063 ms/op
                 executeQuery·p0.00:   2936.013 ms/op
                 executeQuery·p0.50:   3024.093 ms/op
                 executeQuery·p0.90:   3154.117 ms/op
                 executeQuery·p0.95:   3154.117 ms/op
                 executeQuery·p0.99:   3154.117 ms/op
                 executeQuery·p0.999:  3154.117 ms/op
                 executeQuery·p0.9999: 3154.117 ms/op
                 executeQuery·p1.00:   3154.117 ms/op

Iteration   3: 3061.842 ±(99.9%) 540.261 ms/op
                 executeQuery·p0.00:   2952.790 ms/op
                 executeQuery·p0.50:   3074.425 ms/op
                 executeQuery·p0.90:   3145.728 ms/op
                 executeQuery·p0.95:   3145.728 ms/op
                 executeQuery·p0.99:   3145.728 ms/op
                 executeQuery·p0.999:  3145.728 ms/op
                 executeQuery·p0.9999: 3145.728 ms/op
                 executeQuery·p1.00:   3145.728 ms/op

Iteration   4: 2946.499 ±(99.9%) 619.046 ms/op
                 executeQuery·p0.00:   2826.961 ms/op
                 executeQuery·p0.50:   2952.790 ms/op
                 executeQuery·p0.90:   3053.453 ms/op
                 executeQuery·p0.95:   3053.453 ms/op
                 executeQuery·p0.99:   3053.453 ms/op
                 executeQuery·p0.999:  3053.453 ms/op
                 executeQuery·p0.9999: 3053.453 ms/op
                 executeQuery·p1.00:   3053.453 ms/op

Iteration   5: 3054.502 ±(99.9%) 322.502 ms/op
                 executeQuery·p0.00:   3003.122 ms/op
                 executeQuery·p0.50:   3051.356 ms/op
                 executeQuery·p0.90:   3112.174 ms/op
                 executeQuery·p0.95:   3112.174 ms/op
                 executeQuery·p0.99:   3112.174 ms/op
                 executeQuery·p0.999:  3112.174 ms/op
                 executeQuery·p0.9999: 3112.174 ms/op
                 executeQuery·p1.00:   3112.174 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 100
  mean =   3000.521 ±(99.9%) 30.716 ms/op

  Histogram, ms/op:
    [2700.000, 2750.000) = 0 
    [2750.000, 2800.000) = 1 
    [2800.000, 2850.000) = 6 
    [2850.000, 2900.000) = 5 
    [2900.000, 2950.000) = 20 
    [2950.000, 3000.000) = 21 
    [3000.000, 3050.000) = 15 
    [3050.000, 3100.000) = 16 
    [3100.000, 3150.000) = 14 
    [3150.000, 3200.000) = 1 
    [3200.000, 3250.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2768.241 ms/op
     p(50.0000) =   2986.344 ms/op
     p(90.0000) =   3124.756 ms/op
     p(95.0000) =   3141.534 ms/op
     p(99.0000) =   3216.402 ms/op
     p(99.9000) =   3217.031 ms/op
     p(99.9900) =   3217.031 ms/op
     p(99.9990) =   3217.031 ms/op
     p(99.9999) =   3217.031 ms/op
    p(100.0000) =   3217.031 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2)

# Run progress: 75.00% complete, ETA 02:32:00
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1530.322 ±(99.9%) 264.287 ms/op
# Warmup Iteration   2: 1414.080 ±(99.9%) 117.441 ms/op
# Warmup Iteration   3: 1404.493 ±(99.9%) 67.059 ms/op
# Warmup Iteration   4: 1448.832 ±(99.9%) 304.560 ms/op
# Warmup Iteration   5: 1392.247 ±(99.9%) 141.820 ms/op
Iteration   1: 1416.476 ±(99.9%) 187.723 ms/op
                 executeQuery·p0.00:   1323.303 ms/op
                 executeQuery·p0.50:   1400.898 ms/op
                 executeQuery·p0.90:   1579.155 ms/op
                 executeQuery·p0.95:   1579.155 ms/op
                 executeQuery·p0.99:   1579.155 ms/op
                 executeQuery·p0.999:  1579.155 ms/op
                 executeQuery·p0.9999: 1579.155 ms/op
                 executeQuery·p1.00:   1579.155 ms/op

Iteration   2: 1429.059 ±(99.9%) 91.865 ms/op
                 executeQuery·p0.00:   1367.343 ms/op
                 executeQuery·p0.50:   1419.772 ms/op
                 executeQuery·p0.90:   1482.686 ms/op
                 executeQuery·p0.95:   1482.686 ms/op
                 executeQuery·p0.99:   1482.686 ms/op
                 executeQuery·p0.999:  1482.686 ms/op
                 executeQuery·p0.9999: 1482.686 ms/op
                 executeQuery·p1.00:   1482.686 ms/op

Iteration   3: 1438.946 ±(99.9%) 148.249 ms/op
                 executeQuery·p0.00:   1323.303 ms/op
                 executeQuery·p0.50:   1428.161 ms/op
                 executeQuery·p0.90:   1518.338 ms/op
                 executeQuery·p0.95:   1518.338 ms/op
                 executeQuery·p0.99:   1518.338 ms/op
                 executeQuery·p0.999:  1518.338 ms/op
                 executeQuery·p0.9999: 1518.338 ms/op
                 executeQuery·p1.00:   1518.338 ms/op

Iteration   4: 1402.396 ±(99.9%) 158.016 ms/op
                 executeQuery·p0.00:   1256.194 ms/op
                 executeQuery·p0.50:   1417.675 ms/op
                 executeQuery·p0.90:   1463.812 ms/op
                 executeQuery·p0.95:   1463.812 ms/op
                 executeQuery·p0.99:   1463.812 ms/op
                 executeQuery·p0.999:  1463.812 ms/op
                 executeQuery·p0.9999: 1463.812 ms/op
                 executeQuery·p1.00:   1463.812 ms/op

Iteration   5: 1402.396 ±(99.9%) 81.796 ms/op
                 executeQuery·p0.00:   1344.274 ms/op
                 executeQuery·p0.50:   1417.675 ms/op
                 executeQuery·p0.90:   1438.646 ms/op
                 executeQuery·p0.95:   1438.646 ms/op
                 executeQuery·p0.99:   1438.646 ms/op
                 executeQuery·p0.999:  1438.646 ms/op
                 executeQuery·p0.9999: 1438.646 ms/op
                 executeQuery·p1.00:   1438.646 ms/op


# Run progress: 75.31% complete, ETA 02:30:03
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1505.156 ±(99.9%) 373.034 ms/op
# Warmup Iteration   2: 1441.043 ±(99.9%) 146.177 ms/op
# Warmup Iteration   3: 1419.472 ±(99.9%) 124.052 ms/op
# Warmup Iteration   4: 1406.290 ±(99.9%) 90.807 ms/op
# Warmup Iteration   5: 1404.193 ±(99.9%) 191.643 ms/op
Iteration   1: 1422.169 ±(99.9%) 215.645 ms/op
                 executeQuery·p0.00:   1266.680 ms/op
                 executeQuery·p0.50:   1430.258 ms/op
                 executeQuery·p0.90:   1551.892 ms/op
                 executeQuery·p0.95:   1551.892 ms/op
                 executeQuery·p0.99:   1551.892 ms/op
                 executeQuery·p0.999:  1551.892 ms/op
                 executeQuery·p0.9999: 1551.892 ms/op
                 executeQuery·p1.00:   1551.892 ms/op

Iteration   2: 1452.128 ±(99.9%) 159.122 ms/op
                 executeQuery·p0.00:   1386.217 ms/op
                 executeQuery·p0.50:   1405.092 ms/op
                 executeQuery·p0.90:   1558.184 ms/op
                 executeQuery·p0.95:   1558.184 ms/op
                 executeQuery·p0.99:   1558.184 ms/op
                 executeQuery·p0.999:  1558.184 ms/op
                 executeQuery·p0.9999: 1558.184 ms/op
                 executeQuery·p1.00:   1558.184 ms/op

Iteration   3: 1408.987 ±(99.9%) 234.669 ms/op
                 executeQuery·p0.00:   1264.583 ms/op
                 executeQuery·p0.50:   1438.646 ms/op
                 executeQuery·p0.90:   1556.087 ms/op
                 executeQuery·p0.95:   1556.087 ms/op
                 executeQuery·p0.99:   1556.087 ms/op
                 executeQuery·p0.999:  1556.087 ms/op
                 executeQuery·p0.9999: 1556.087 ms/op
                 executeQuery·p1.00:   1556.087 ms/op

Iteration   4: 1435.950 ±(99.9%) 148.781 ms/op
                 executeQuery·p0.00:   1373.635 ms/op
                 executeQuery·p0.50:   1405.092 ms/op
                 executeQuery·p0.90:   1566.573 ms/op
                 executeQuery·p0.95:   1566.573 ms/op
                 executeQuery·p0.99:   1566.573 ms/op
                 executeQuery·p0.999:  1566.573 ms/op
                 executeQuery·p0.9999: 1566.573 ms/op
                 executeQuery·p1.00:   1566.573 ms/op

Iteration   5: 1409.286 ±(99.9%) 198.001 ms/op
                 executeQuery·p0.00:   1266.680 ms/op
                 executeQuery·p0.50:   1405.092 ms/op
                 executeQuery·p0.90:   1551.892 ms/op
                 executeQuery·p0.95:   1551.892 ms/op
                 executeQuery·p0.99:   1551.892 ms/op
                 executeQuery·p0.999:  1551.892 ms/op
                 executeQuery·p0.9999: 1551.892 ms/op
                 executeQuery·p1.00:   1551.892 ms/op


# Run progress: 75.63% complete, ETA 02:28:06
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1508.451 ±(99.9%) 316.372 ms/op
# Warmup Iteration   2: 1419.173 ±(99.9%) 118.355 ms/op
# Warmup Iteration   3: 1402.995 ±(99.9%) 120.913 ms/op
# Warmup Iteration   4: 1400.898 ±(99.9%) 176.349 ms/op
# Warmup Iteration   5: 1419.173 ±(99.9%) 207.639 ms/op
Iteration   1: 1428.161 ±(99.9%) 267.924 ms/op
                 executeQuery·p0.00:   1258.291 ms/op
                 executeQuery·p0.50:   1423.966 ms/op
                 executeQuery·p0.90:   1642.070 ms/op
                 executeQuery·p0.95:   1642.070 ms/op
                 executeQuery·p0.99:   1642.070 ms/op
                 executeQuery·p0.999:  1642.070 ms/op
                 executeQuery·p0.9999: 1642.070 ms/op
                 executeQuery·p1.00:   1642.070 ms/op

Iteration   2: 1419.472 ±(99.9%) 282.704 ms/op
                 executeQuery·p0.00:   1258.291 ms/op
                 executeQuery·p0.50:   1434.452 ms/op
                 executeQuery·p0.90:   1610.613 ms/op
                 executeQuery·p0.95:   1610.613 ms/op
                 executeQuery·p0.99:   1610.613 ms/op
                 executeQuery·p0.999:  1610.613 ms/op
                 executeQuery·p0.9999: 1610.613 ms/op
                 executeQuery·p1.00:   1610.613 ms/op

Iteration   3: 1392.247 ±(99.9%) 81.794 ms/op
                 executeQuery·p0.00:   1327.497 ms/op
                 executeQuery·p0.50:   1417.675 ms/op
                 executeQuery·p0.90:   1423.966 ms/op
                 executeQuery·p0.95:   1423.966 ms/op
                 executeQuery·p0.99:   1423.966 ms/op
                 executeQuery·p0.999:  1423.966 ms/op
                 executeQuery·p0.9999: 1423.966 ms/op
                 executeQuery·p1.00:   1423.966 ms/op

Iteration   4: 1422.768 ±(99.9%) 97.367 ms/op
                 executeQuery·p0.00:   1371.537 ms/op
                 executeQuery·p0.50:   1415.578 ms/op
                 executeQuery·p0.90:   1484.784 ms/op
                 executeQuery·p0.95:   1484.784 ms/op
                 executeQuery·p0.99:   1484.784 ms/op
                 executeQuery·p0.999:  1484.784 ms/op
                 executeQuery·p0.9999: 1484.784 ms/op
                 executeQuery·p1.00:   1484.784 ms/op

Iteration   5: 1419.472 ±(99.9%) 100.914 ms/op
                 executeQuery·p0.00:   1373.635 ms/op
                 executeQuery·p0.50:   1398.800 ms/op
                 executeQuery·p0.90:   1488.978 ms/op
                 executeQuery·p0.95:   1488.978 ms/op
                 executeQuery·p0.99:   1488.978 ms/op
                 executeQuery·p0.999:  1488.978 ms/op
                 executeQuery·p0.9999: 1488.978 ms/op
                 executeQuery·p1.00:   1488.978 ms/op


# Run progress: 75.94% complete, ETA 02:26:10
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1530.022 ±(99.9%) 295.569 ms/op
# Warmup Iteration   2: 1460.816 ±(99.9%) 115.079 ms/op
# Warmup Iteration   3: 1432.355 ±(99.9%) 151.831 ms/op
# Warmup Iteration   4: 1381.499 ±(99.9%) 125.957 ms/op
# Warmup Iteration   5: 1420.671 ±(99.9%) 86.701 ms/op
Iteration   1: 1393.707 ±(99.9%) 226.205 ms/op
                 executeQuery·p0.00:   1268.777 ms/op
                 executeQuery·p0.50:   1392.509 ms/op
                 executeQuery·p0.90:   1572.864 ms/op
                 executeQuery·p0.95:   1572.864 ms/op
                 executeQuery·p0.99:   1572.864 ms/op
                 executeQuery·p0.999:  1572.864 ms/op
                 executeQuery·p0.9999: 1572.864 ms/op
                 executeQuery·p1.00:   1572.864 ms/op

Iteration   2: 1432.055 ±(99.9%) 117.527 ms/op
                 executeQuery·p0.00:   1369.440 ms/op
                 executeQuery·p0.50:   1415.578 ms/op
                 executeQuery·p0.90:   1488.978 ms/op
                 executeQuery·p0.95:   1488.978 ms/op
                 executeQuery·p0.99:   1488.978 ms/op
                 executeQuery·p0.999:  1488.978 ms/op
                 executeQuery·p0.9999: 1488.978 ms/op
                 executeQuery·p1.00:   1488.978 ms/op

Iteration   3: 1441.642 ±(99.9%) 135.962 ms/op
                 executeQuery·p0.00:   1329.594 ms/op
                 executeQuery·p0.50:   1442.841 ms/op
                 executeQuery·p0.90:   1516.241 ms/op
                 executeQuery·p0.95:   1516.241 ms/op
                 executeQuery·p0.99:   1516.241 ms/op
                 executeQuery·p0.999:  1516.241 ms/op
                 executeQuery·p0.9999: 1516.241 ms/op
                 executeQuery·p1.00:   1516.241 ms/op

Iteration   4: 1424.266 ±(99.9%) 106.297 ms/op
                 executeQuery·p0.00:   1375.732 ms/op
                 executeQuery·p0.50:   1402.995 ms/op
                 executeQuery·p0.90:   1499.464 ms/op
                 executeQuery·p0.95:   1499.464 ms/op
                 executeQuery·p0.99:   1499.464 ms/op
                 executeQuery·p0.999:  1499.464 ms/op
                 executeQuery·p0.9999: 1499.464 ms/op
                 executeQuery·p1.00:   1499.464 ms/op

Iteration   5: 1424.266 ±(99.9%) 103.640 ms/op
                 executeQuery·p0.00:   1331.692 ms/op
                 executeQuery·p0.50:   1442.841 ms/op
                 executeQuery·p0.90:   1461.715 ms/op
                 executeQuery·p0.95:   1461.715 ms/op
                 executeQuery·p0.99:   1461.715 ms/op
                 executeQuery·p0.999:  1461.715 ms/op
                 executeQuery·p0.9999: 1461.715 ms/op
                 executeQuery·p1.00:   1461.715 ms/op


# Run progress: 76.25% complete, ETA 02:24:13
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1518.038 ±(99.9%) 358.609 ms/op
# Warmup Iteration   2: 1426.063 ±(99.9%) 85.629 ms/op
# Warmup Iteration   3: 1403.257 ±(99.9%) 166.037 ms/op
# Warmup Iteration   4: 1401.197 ±(99.9%) 226.083 ms/op
# Warmup Iteration   5: 1410.485 ±(99.9%) 95.827 ms/op
Iteration   1: 1403.594 ±(99.9%) 113.545 ms/op
                 executeQuery·p0.00:   1329.594 ms/op
                 executeQuery·p0.50:   1396.703 ms/op
                 executeQuery·p0.90:   1493.172 ms/op
                 executeQuery·p0.95:   1493.172 ms/op
                 executeQuery·p0.99:   1493.172 ms/op
                 executeQuery·p0.999:  1493.172 ms/op
                 executeQuery·p0.9999: 1493.172 ms/op
                 executeQuery·p1.00:   1493.172 ms/op

Iteration   2: 1436.549 ±(99.9%) 148.363 ms/op
                 executeQuery·p0.00:   1329.594 ms/op
                 executeQuery·p0.50:   1428.161 ms/op
                 executeQuery·p0.90:   1530.921 ms/op
                 executeQuery·p0.95:   1530.921 ms/op
                 executeQuery·p0.99:   1530.921 ms/op
                 executeQuery·p0.999:  1530.921 ms/op
                 executeQuery·p0.9999: 1530.921 ms/op
                 executeQuery·p1.00:   1530.921 ms/op

Iteration   3: 1416.776 ±(99.9%) 242.391 ms/op
                 executeQuery·p0.00:   1262.486 ms/op
                 executeQuery·p0.50:   1426.063 ms/op
                 executeQuery·p0.90:   1616.904 ms/op
                 executeQuery·p0.95:   1616.904 ms/op
                 executeQuery·p0.99:   1616.904 ms/op
                 executeQuery·p0.999:  1616.904 ms/op
                 executeQuery·p0.9999: 1616.904 ms/op
                 executeQuery·p1.00:   1616.904 ms/op

Iteration   4: 1450.031 ±(99.9%) 246.287 ms/op
                 executeQuery·p0.00:   1262.486 ms/op
                 executeQuery·p0.50:   1436.549 ms/op
                 executeQuery·p0.90:   1593.836 ms/op
                 executeQuery·p0.95:   1593.836 ms/op
                 executeQuery·p0.99:   1593.836 ms/op
                 executeQuery·p0.999:  1593.836 ms/op
                 executeQuery·p0.9999: 1593.836 ms/op
                 executeQuery·p1.00:   1593.836 ms/op

Iteration   5: 1435.650 ±(99.9%) 205.192 ms/op
                 executeQuery·p0.00:   1270.874 ms/op
                 executeQuery·p0.50:   1426.063 ms/op
                 executeQuery·p0.90:   1539.310 ms/op
                 executeQuery·p0.95:   1539.310 ms/op
                 executeQuery·p0.99:   1539.310 ms/op
                 executeQuery·p0.999:  1539.310 ms/op
                 executeQuery·p0.9999: 1539.310 ms/op
                 executeQuery·p1.00:   1539.310 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 176
  mean =   1422.167 ±(99.9%) 18.645 ms/op

  Histogram, ms/op:
    [1200.000, 1250.000) = 0 
    [1250.000, 1300.000) = 11 
    [1300.000, 1350.000) = 15 
    [1350.000, 1400.000) = 32 
    [1400.000, 1450.000) = 69 
    [1450.000, 1500.000) = 25 
    [1500.000, 1550.000) = 13 
    [1550.000, 1600.000) = 8 
    [1600.000, 1650.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   1256.194 ms/op
     p(50.0000) =   1421.869 ms/op
     p(90.0000) =   1514.773 ms/op
     p(95.0000) =   1556.401 ms/op
     p(99.0000) =   1622.692 ms/op
     p(99.9000) =   1642.070 ms/op
     p(99.9900) =   1642.070 ms/op
     p(99.9990) =   1642.070 ms/op
     p(99.9999) =   1642.070 ms/op
    p(100.0000) =   1642.070 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4)

# Run progress: 76.56% complete, ETA 02:22:17
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1553.690 ±(99.9%) 344.716 ms/op
# Warmup Iteration   2: 1501.261 ±(99.9%) 227.296 ms/op
# Warmup Iteration   3: 1457.221 ±(99.9%) 159.322 ms/op
# Warmup Iteration   4: 1427.262 ±(99.9%) 201.590 ms/op
# Warmup Iteration   5: 1473.399 ±(99.9%) 83.734 ms/op
Iteration   1: 1473.399 ±(99.9%) 186.211 ms/op
                 executeQuery·p0.00:   1396.703 ms/op
                 executeQuery·p0.50:   1449.132 ms/op
                 executeQuery·p0.90:   1642.070 ms/op
                 executeQuery·p0.95:   1642.070 ms/op
                 executeQuery·p0.99:   1642.070 ms/op
                 executeQuery·p0.999:  1642.070 ms/op
                 executeQuery·p0.9999: 1642.070 ms/op
                 executeQuery·p1.00:   1642.070 ms/op

Iteration   2: 1438.946 ±(99.9%) 132.852 ms/op
                 executeQuery·p0.00:   1373.635 ms/op
                 executeQuery·p0.50:   1415.578 ms/op
                 executeQuery·p0.90:   1530.921 ms/op
                 executeQuery·p0.95:   1530.921 ms/op
                 executeQuery·p0.99:   1530.921 ms/op
                 executeQuery·p0.999:  1530.921 ms/op
                 executeQuery·p0.9999: 1530.921 ms/op
                 executeQuery·p1.00:   1530.921 ms/op

Iteration   3: 1452.727 ±(99.9%) 88.183 ms/op
                 executeQuery·p0.00:   1375.732 ms/op
                 executeQuery·p0.50:   1463.812 ms/op
                 executeQuery·p0.90:   1499.464 ms/op
                 executeQuery·p0.95:   1499.464 ms/op
                 executeQuery·p0.99:   1499.464 ms/op
                 executeQuery·p0.999:  1499.464 ms/op
                 executeQuery·p0.9999: 1499.464 ms/op
                 executeQuery·p1.00:   1499.464 ms/op

Iteration   4: 1436.849 ±(99.9%) 175.194 ms/op
                 executeQuery·p0.00:   1335.886 ms/op
                 executeQuery·p0.50:   1415.578 ms/op
                 executeQuery·p0.90:   1551.892 ms/op
                 executeQuery·p0.95:   1551.892 ms/op
                 executeQuery·p0.99:   1551.892 ms/op
                 executeQuery·p0.999:  1551.892 ms/op
                 executeQuery·p0.9999: 1551.892 ms/op
                 executeQuery·p1.00:   1551.892 ms/op

Iteration   5: 1482.986 ±(99.9%) 72.068 ms/op
                 executeQuery·p0.00:   1434.452 ms/op
                 executeQuery·p0.50:   1497.367 ms/op
                 executeQuery·p0.90:   1526.727 ms/op
                 executeQuery·p0.95:   1526.727 ms/op
                 executeQuery·p0.99:   1526.727 ms/op
                 executeQuery·p0.999:  1526.727 ms/op
                 executeQuery·p0.9999: 1526.727 ms/op
                 executeQuery·p1.00:   1526.727 ms/op


# Run progress: 76.88% complete, ETA 02:20:21
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1562.977 ±(99.9%) 324.460 ms/op
# Warmup Iteration   2: 1439.845 ±(99.9%) 192.707 ms/op
# Warmup Iteration   3: 1429.059 ±(99.9%) 230.148 ms/op
# Warmup Iteration   4: 1430.857 ±(99.9%) 120.503 ms/op
# Warmup Iteration   5: 1436.549 ±(99.9%) 86.191 ms/op
Iteration   1: 1466.508 ±(99.9%) 237.993 ms/op
                 executeQuery·p0.00:   1371.537 ms/op
                 executeQuery·p0.50:   1413.480 ms/op
                 executeQuery·p0.90:   1633.681 ms/op
                 executeQuery·p0.95:   1633.681 ms/op
                 executeQuery·p0.99:   1633.681 ms/op
                 executeQuery·p0.999:  1633.681 ms/op
                 executeQuery·p0.9999: 1633.681 ms/op
                 executeQuery·p1.00:   1633.681 ms/op

Iteration   2: 1410.185 ±(99.9%) 145.474 ms/op
                 executeQuery·p0.00:   1285.554 ms/op
                 executeQuery·p0.50:   1417.675 ms/op
                 executeQuery·p0.90:   1484.784 ms/op
                 executeQuery·p0.95:   1484.784 ms/op
                 executeQuery·p0.99:   1484.784 ms/op
                 executeQuery·p0.999:  1484.784 ms/op
                 executeQuery·p0.9999: 1484.784 ms/op
                 executeQuery·p1.00:   1484.784 ms/op

Iteration   3: 1484.484 ±(99.9%) 235.744 ms/op
                 executeQuery·p0.00:   1428.161 ms/op
                 executeQuery·p0.50:   1455.423 ms/op
                 executeQuery·p0.90:   1719.665 ms/op
                 executeQuery·p0.95:   1719.665 ms/op
                 executeQuery·p0.99:   1719.665 ms/op
                 executeQuery·p0.999:  1719.665 ms/op
                 executeQuery·p0.9999: 1719.665 ms/op
                 executeQuery·p1.00:   1719.665 ms/op

Iteration   4: 1429.059 ±(99.9%) 127.844 ms/op
                 executeQuery·p0.00:   1337.983 ms/op
                 executeQuery·p0.50:   1463.812 ms/op
                 executeQuery·p0.90:   1472.201 ms/op
                 executeQuery·p0.95:   1472.201 ms/op
                 executeQuery·p0.99:   1472.201 ms/op
                 executeQuery·p0.999:  1472.201 ms/op
                 executeQuery·p0.9999: 1472.201 ms/op
                 executeQuery·p1.00:   1472.201 ms/op

Iteration   5: 1444.339 ±(99.9%) 146.058 ms/op
                 executeQuery·p0.00:   1365.246 ms/op
                 executeQuery·p0.50:   1442.841 ms/op
                 executeQuery·p0.90:   1551.892 ms/op
                 executeQuery·p0.95:   1551.892 ms/op
                 executeQuery·p0.99:   1551.892 ms/op
                 executeQuery·p0.999:  1551.892 ms/op
                 executeQuery·p0.9999: 1551.892 ms/op
                 executeQuery·p1.00:   1551.892 ms/op


# Run progress: 77.19% complete, ETA 02:18:25
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1556.986 ±(99.9%) 424.767 ms/op
# Warmup Iteration   2: 1466.209 ±(99.9%) 133.383 ms/op
# Warmup Iteration   3: 1436.849 ±(99.9%) 177.744 ms/op
# Warmup Iteration   4: 1412.582 ±(99.9%) 129.491 ms/op
# Warmup Iteration   5: 1426.962 ±(99.9%) 79.310 ms/op
Iteration   1: 1443.140 ±(99.9%) 260.285 ms/op
                 executeQuery·p0.00:   1289.748 ms/op
                 executeQuery·p0.50:   1476.395 ms/op
                 executeQuery·p0.90:   1577.058 ms/op
                 executeQuery·p0.95:   1577.058 ms/op
                 executeQuery·p0.99:   1577.058 ms/op
                 executeQuery·p0.999:  1577.058 ms/op
                 executeQuery·p0.9999: 1577.058 ms/op
                 executeQuery·p1.00:   1577.058 ms/op

Iteration   2: 1453.027 ±(99.9%) 207.831 ms/op
                 executeQuery·p0.00:   1327.497 ms/op
                 executeQuery·p0.50:   1465.909 ms/op
                 executeQuery·p0.90:   1598.030 ms/op
                 executeQuery·p0.95:   1598.030 ms/op
                 executeQuery·p0.99:   1598.030 ms/op
                 executeQuery·p0.999:  1598.030 ms/op
                 executeQuery·p0.9999: 1598.030 ms/op
                 executeQuery·p1.00:   1598.030 ms/op

Iteration   3: 1419.472 ±(99.9%) 229.089 ms/op
                 executeQuery·p0.00:   1285.554 ms/op
                 executeQuery·p0.50:   1436.549 ms/op
                 executeQuery·p0.90:   1591.738 ms/op
                 executeQuery·p0.95:   1591.738 ms/op
                 executeQuery·p0.99:   1591.738 ms/op
                 executeQuery·p0.999:  1591.738 ms/op
                 executeQuery·p0.9999: 1591.738 ms/op
                 executeQuery·p1.00:   1591.738 ms/op

Iteration   4: 1439.545 ±(99.9%) 169.793 ms/op
                 executeQuery·p0.00:   1340.080 ms/op
                 executeQuery·p0.50:   1449.132 ms/op
                 executeQuery·p0.90:   1574.961 ms/op
                 executeQuery·p0.95:   1574.961 ms/op
                 executeQuery·p0.99:   1574.961 ms/op
                 executeQuery·p0.999:  1574.961 ms/op
                 executeQuery·p0.9999: 1574.961 ms/op
                 executeQuery·p1.00:   1574.961 ms/op

Iteration   5: 1452.128 ±(99.9%) 67.122 ms/op
                 executeQuery·p0.00:   1398.800 ms/op
                 executeQuery·p0.50:   1455.423 ms/op
                 executeQuery·p0.90:   1482.686 ms/op
                 executeQuery·p0.95:   1482.686 ms/op
                 executeQuery·p0.99:   1482.686 ms/op
                 executeQuery·p0.999:  1482.686 ms/op
                 executeQuery·p0.9999: 1482.686 ms/op
                 executeQuery·p1.00:   1482.686 ms/op


# Run progress: 77.50% complete, ETA 02:16:29
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1586.346 ±(99.9%) 274.272 ms/op
# Warmup Iteration   2: 1462.614 ±(99.9%) 138.590 ms/op
# Warmup Iteration   3: 1473.998 ±(99.9%) 87.749 ms/op
# Warmup Iteration   4: 1478.792 ±(99.9%) 166.913 ms/op
# Warmup Iteration   5: 1423.367 ±(99.9%) 111.829 ms/op
Iteration   1: 1464.411 ±(99.9%) 111.896 ms/op
                 executeQuery·p0.00:   1358.954 ms/op
                 executeQuery·p0.50:   1470.104 ms/op
                 executeQuery·p0.90:   1503.658 ms/op
                 executeQuery·p0.95:   1503.658 ms/op
                 executeQuery·p0.99:   1503.658 ms/op
                 executeQuery·p0.999:  1503.658 ms/op
                 executeQuery·p0.9999: 1503.658 ms/op
                 executeQuery·p1.00:   1503.658 ms/op

Iteration   2: 1466.808 ±(99.9%) 150.993 ms/op
                 executeQuery·p0.00:   1337.983 ms/op
                 executeQuery·p0.50:   1463.812 ms/op
                 executeQuery·p0.90:   1530.921 ms/op
                 executeQuery·p0.95:   1530.921 ms/op
                 executeQuery·p0.99:   1530.921 ms/op
                 executeQuery·p0.999:  1530.921 ms/op
                 executeQuery·p0.9999: 1530.921 ms/op
                 executeQuery·p1.00:   1530.921 ms/op

Iteration   3: 1458.120 ±(99.9%) 75.656 ms/op
                 executeQuery·p0.00:   1415.578 ms/op
                 executeQuery·p0.50:   1459.618 ms/op
                 executeQuery·p0.90:   1509.949 ms/op
                 executeQuery·p0.95:   1509.949 ms/op
                 executeQuery·p0.99:   1509.949 ms/op
                 executeQuery·p0.999:  1509.949 ms/op
                 executeQuery·p0.9999: 1509.949 ms/op
                 executeQuery·p1.00:   1509.949 ms/op

Iteration   4: 1426.962 ±(99.9%) 169.420 ms/op
                 executeQuery·p0.00:   1335.886 ms/op
                 executeQuery·p0.50:   1428.161 ms/op
                 executeQuery·p0.90:   1522.532 ms/op
                 executeQuery·p0.95:   1522.532 ms/op
                 executeQuery·p0.99:   1522.532 ms/op
                 executeQuery·p0.999:  1522.532 ms/op
                 executeQuery·p0.9999: 1522.532 ms/op
                 executeQuery·p1.00:   1522.532 ms/op

Iteration   5: 1455.723 ±(99.9%) 102.522 ms/op
                 executeQuery·p0.00:   1358.954 ms/op
                 executeQuery·p0.50:   1472.201 ms/op
                 executeQuery·p0.90:   1499.464 ms/op
                 executeQuery·p0.95:   1499.464 ms/op
                 executeQuery·p0.99:   1499.464 ms/op
                 executeQuery·p0.999:  1499.464 ms/op
                 executeQuery·p0.9999: 1499.464 ms/op
                 executeQuery·p1.00:   1499.464 ms/op


# Run progress: 77.81% complete, ETA 02:14:33
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1571.666 ±(99.9%) 327.825 ms/op
# Warmup Iteration   2: 1467.707 ±(99.9%) 188.742 ms/op
# Warmup Iteration   3: 1465.310 ±(99.9%) 128.536 ms/op
# Warmup Iteration   4: 1464.711 ±(99.9%) 223.376 ms/op
# Warmup Iteration   5: 1438.646 ±(99.9%) 213.819 ms/op
Iteration   1: 1469.804 ±(99.9%) 133.160 ms/op
                 executeQuery·p0.00:   1411.383 ms/op
                 executeQuery·p0.50:   1465.909 ms/op
                 executeQuery·p0.90:   1568.670 ms/op
                 executeQuery·p0.95:   1568.670 ms/op
                 executeQuery·p0.99:   1568.670 ms/op
                 executeQuery·p0.999:  1568.670 ms/op
                 executeQuery·p0.9999: 1568.670 ms/op
                 executeQuery·p1.00:   1568.670 ms/op

Iteration   2: 1471.302 ±(99.9%) 47.535 ms/op
                 executeQuery·p0.00:   1444.938 ms/op
                 executeQuery·p0.50:   1468.006 ms/op
                 executeQuery·p0.90:   1497.367 ms/op
                 executeQuery·p0.95:   1497.367 ms/op
                 executeQuery·p0.99:   1497.367 ms/op
                 executeQuery·p0.999:  1497.367 ms/op
                 executeQuery·p0.9999: 1497.367 ms/op
                 executeQuery·p1.00:   1497.367 ms/op

Iteration   3: 1479.691 ±(99.9%) 129.835 ms/op
                 executeQuery·p0.00:   1426.063 ms/op
                 executeQuery·p0.50:   1472.201 ms/op
                 executeQuery·p0.90:   1600.127 ms/op
                 executeQuery·p0.95:   1600.127 ms/op
                 executeQuery·p0.99:   1600.127 ms/op
                 executeQuery·p0.999:  1600.127 ms/op
                 executeQuery·p0.9999: 1600.127 ms/op
                 executeQuery·p1.00:   1600.127 ms/op

Iteration   4: 1424.865 ±(99.9%) 116.172 ms/op
                 executeQuery·p0.00:   1350.566 ms/op
                 executeQuery·p0.50:   1440.743 ms/op
                 executeQuery·p0.90:   1495.269 ms/op
                 executeQuery·p0.95:   1495.269 ms/op
                 executeQuery·p0.99:   1495.269 ms/op
                 executeQuery·p0.999:  1495.269 ms/op
                 executeQuery·p0.9999: 1495.269 ms/op
                 executeQuery·p1.00:   1495.269 ms/op

Iteration   5: 1452.428 ±(99.9%) 119.516 ms/op
                 executeQuery·p0.00:   1396.703 ms/op
                 executeQuery·p0.50:   1436.549 ms/op
                 executeQuery·p0.90:   1537.212 ms/op
                 executeQuery·p0.95:   1537.212 ms/op
                 executeQuery·p0.99:   1537.212 ms/op
                 executeQuery·p0.999:  1537.212 ms/op
                 executeQuery·p0.9999: 1537.212 ms/op
                 executeQuery·p1.00:   1537.212 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 175
  mean =   1451.876 ±(99.9%) 17.046 ms/op

  Histogram, ms/op:
    [1200.000, 1250.000) = 0 
    [1250.000, 1300.000) = 4 
    [1300.000, 1350.000) = 7 
    [1350.000, 1400.000) = 25 
    [1400.000, 1450.000) = 48 
    [1450.000, 1500.000) = 62 
    [1500.000, 1550.000) = 17 
    [1550.000, 1600.000) = 8 
    [1600.000, 1650.000) = 3 
    [1650.000, 1700.000) = 0 
    [1700.000, 1750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1285.554 ms/op
     p(50.0000) =   1453.326 ms/op
     p(90.0000) =   1524.210 ms/op
     p(95.0000) =   1575.381 ms/op
     p(99.0000) =   1660.693 ms/op
     p(99.9000) =   1719.665 ms/op
     p(99.9900) =   1719.665 ms/op
     p(99.9990) =   1719.665 ms/op
     p(99.9999) =   1719.665 ms/op
    p(100.0000) =   1719.665 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6)

# Run progress: 78.13% complete, ETA 02:12:38
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1580.054 ±(99.9%) 342.502 ms/op
# Warmup Iteration   2: 1489.877 ±(99.9%) 103.224 ms/op
# Warmup Iteration   3: 1484.484 ±(99.9%) 227.901 ms/op
# Warmup Iteration   4: 1508.751 ±(99.9%) 175.097 ms/op
# Warmup Iteration   5: 1452.727 ±(99.9%) 220.475 ms/op
Iteration   1: 1489.278 ±(99.9%) 176.695 ms/op
                 executeQuery·p0.00:   1346.372 ms/op
                 executeQuery·p0.50:   1509.949 ms/op
                 executeQuery·p0.90:   1581.253 ms/op
                 executeQuery·p0.95:   1581.253 ms/op
                 executeQuery·p0.99:   1581.253 ms/op
                 executeQuery·p0.999:  1581.253 ms/op
                 executeQuery·p0.9999: 1581.253 ms/op
                 executeQuery·p1.00:   1581.253 ms/op

Iteration   2: 1498.864 ±(99.9%) 242.481 ms/op
                 executeQuery·p0.00:   1340.080 ms/op
                 executeQuery·p0.50:   1486.881 ms/op
                 executeQuery·p0.90:   1663.042 ms/op
                 executeQuery·p0.95:   1663.042 ms/op
                 executeQuery·p0.99:   1663.042 ms/op
                 executeQuery·p0.999:  1663.042 ms/op
                 executeQuery·p0.9999: 1663.042 ms/op
                 executeQuery·p1.00:   1663.042 ms/op

Iteration   3: 1503.958 ±(99.9%) 52.129 ms/op
                 executeQuery·p0.00:   1474.298 ms/op
                 executeQuery·p0.50:   1507.852 ms/op
                 executeQuery·p0.90:   1543.504 ms/op
                 executeQuery·p0.95:   1543.504 ms/op
                 executeQuery·p0.99:   1543.504 ms/op
                 executeQuery·p0.999:  1543.504 ms/op
                 executeQuery·p0.9999: 1543.504 ms/op
                 executeQuery·p1.00:   1543.504 ms/op

Iteration   4: 1494.071 ±(99.9%) 102.320 ms/op
                 executeQuery·p0.00:   1409.286 ms/op
                 executeQuery·p0.50:   1505.755 ms/op
                 executeQuery·p0.90:   1549.795 ms/op
                 executeQuery·p0.95:   1549.795 ms/op
                 executeQuery·p0.99:   1549.795 ms/op
                 executeQuery·p0.999:  1549.795 ms/op
                 executeQuery·p0.9999: 1549.795 ms/op
                 executeQuery·p1.00:   1549.795 ms/op

Iteration   5: 1530.322 ±(99.9%) 172.204 ms/op
                 executeQuery·p0.00:   1423.966 ms/op
                 executeQuery·p0.50:   1524.630 ms/op
                 executeQuery·p0.90:   1667.236 ms/op
                 executeQuery·p0.95:   1667.236 ms/op
                 executeQuery·p0.99:   1667.236 ms/op
                 executeQuery·p0.999:  1667.236 ms/op
                 executeQuery·p0.9999: 1667.236 ms/op
                 executeQuery·p1.00:   1667.236 ms/op


# Run progress: 78.44% complete, ETA 02:10:43
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1565.374 ±(99.9%) 316.174 ms/op
# Warmup Iteration   2: 1501.261 ±(99.9%) 142.520 ms/op
# Warmup Iteration   3: 1532.119 ±(99.9%) 117.572 ms/op
# Warmup Iteration   4: 1463.812 ±(99.9%) 117.101 ms/op
# Warmup Iteration   5: 1489.577 ±(99.9%) 172.312 ms/op
Iteration   1: 1479.990 ±(99.9%) 88.646 ms/op
                 executeQuery·p0.00:   1413.480 ms/op
                 executeQuery·p0.50:   1472.201 ms/op
                 executeQuery·p0.90:   1526.727 ms/op
                 executeQuery·p0.95:   1526.727 ms/op
                 executeQuery·p0.99:   1526.727 ms/op
                 executeQuery·p0.999:  1526.727 ms/op
                 executeQuery·p0.9999: 1526.727 ms/op
                 executeQuery·p1.00:   1526.727 ms/op

Iteration   2: 1513.844 ±(99.9%) 157.326 ms/op
                 executeQuery·p0.00:   1398.800 ms/op
                 executeQuery·p0.50:   1520.435 ms/op
                 executeQuery·p0.90:   1612.710 ms/op
                 executeQuery·p0.95:   1612.710 ms/op
                 executeQuery·p0.99:   1612.710 ms/op
                 executeQuery·p0.999:  1612.710 ms/op
                 executeQuery·p0.9999: 1612.710 ms/op
                 executeQuery·p1.00:   1612.710 ms/op

Iteration   3: 1530.322 ±(99.9%) 79.397 ms/op
                 executeQuery·p0.00:   1484.784 ms/op
                 executeQuery·p0.50:   1530.921 ms/op
                 executeQuery·p0.90:   1587.544 ms/op
                 executeQuery·p0.95:   1587.544 ms/op
                 executeQuery·p0.99:   1587.544 ms/op
                 executeQuery·p0.999:  1587.544 ms/op
                 executeQuery·p0.9999: 1587.544 ms/op
                 executeQuery·p1.00:   1587.544 ms/op

Iteration   4: 1481.188 ±(99.9%) 165.352 ms/op
                 executeQuery·p0.00:   1335.886 ms/op
                 executeQuery·p0.50:   1484.784 ms/op
                 executeQuery·p0.90:   1570.767 ms/op
                 executeQuery·p0.95:   1570.767 ms/op
                 executeQuery·p0.99:   1570.767 ms/op
                 executeQuery·p0.999:  1570.767 ms/op
                 executeQuery·p0.9999: 1570.767 ms/op
                 executeQuery·p1.00:   1570.767 ms/op

Iteration   5: 1491.674 ±(99.9%) 116.806 ms/op
                 executeQuery·p0.00:   1419.772 ms/op
                 executeQuery·p0.50:   1495.269 ms/op
                 executeQuery·p0.90:   1570.767 ms/op
                 executeQuery·p0.95:   1570.767 ms/op
                 executeQuery·p0.99:   1570.767 ms/op
                 executeQuery·p0.999:  1570.767 ms/op
                 executeQuery·p0.9999: 1570.767 ms/op
                 executeQuery·p1.00:   1570.767 ms/op


# Run progress: 78.75% complete, ETA 02:08:48
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1659.546 ±(99.9%) 287.515 ms/op
# Warmup Iteration   2: 1482.387 ±(99.9%) 166.578 ms/op
# Warmup Iteration   3: 1503.658 ±(99.9%) 265.148 ms/op
# Warmup Iteration   4: 1495.269 ±(99.9%) 181.932 ms/op
# Warmup Iteration   5: 1475.496 ±(99.9%) 229.436 ms/op
Iteration   1: 1492.273 ±(99.9%) 92.430 ms/op
                 executeQuery·p0.00:   1438.646 ms/op
                 executeQuery·p0.50:   1493.172 ms/op
                 executeQuery·p0.90:   1547.698 ms/op
                 executeQuery·p0.95:   1547.698 ms/op
                 executeQuery·p0.99:   1547.698 ms/op
                 executeQuery·p0.999:  1547.698 ms/op
                 executeQuery·p0.9999: 1547.698 ms/op
                 executeQuery·p1.00:   1547.698 ms/op

Iteration   2: 1509.949 ±(99.9%) 175.122 ms/op
                 executeQuery·p0.00:   1379.926 ms/op
                 executeQuery·p0.50:   1486.881 ms/op
                 executeQuery·p0.90:   1604.321 ms/op
                 executeQuery·p0.95:   1604.321 ms/op
                 executeQuery·p0.99:   1604.321 ms/op
                 executeQuery·p0.999:  1604.321 ms/op
                 executeQuery·p0.9999: 1604.321 ms/op
                 executeQuery·p1.00:   1604.321 ms/op

Iteration   3: 1456.322 ±(99.9%) 128.076 ms/op
                 executeQuery·p0.00:   1361.052 ms/op
                 executeQuery·p0.50:   1482.686 ms/op
                 executeQuery·p0.90:   1503.658 ms/op
                 executeQuery·p0.95:   1503.658 ms/op
                 executeQuery·p0.99:   1503.658 ms/op
                 executeQuery·p0.999:  1503.658 ms/op
                 executeQuery·p0.9999: 1503.658 ms/op
                 executeQuery·p1.00:   1503.658 ms/op

Iteration   4: 1503.958 ±(99.9%) 173.702 ms/op
                 executeQuery·p0.00:   1371.537 ms/op
                 executeQuery·p0.50:   1514.144 ms/op
                 executeQuery·p0.90:   1579.155 ms/op
                 executeQuery·p0.95:   1579.155 ms/op
                 executeQuery·p0.99:   1579.155 ms/op
                 executeQuery·p0.999:  1579.155 ms/op
                 executeQuery·p0.9999: 1579.155 ms/op
                 executeQuery·p1.00:   1579.155 ms/op

Iteration   5: 1506.954 ±(99.9%) 108.937 ms/op
                 executeQuery·p0.00:   1432.355 ms/op
                 executeQuery·p0.50:   1501.561 ms/op
                 executeQuery·p0.90:   1585.447 ms/op
                 executeQuery·p0.95:   1585.447 ms/op
                 executeQuery·p0.99:   1585.447 ms/op
                 executeQuery·p0.999:  1585.447 ms/op
                 executeQuery·p0.9999: 1585.447 ms/op
                 executeQuery·p1.00:   1585.447 ms/op


# Run progress: 79.06% complete, ETA 02:06:53
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1583.949 ±(99.9%) 371.346 ms/op
# Warmup Iteration   2: 1517.739 ±(99.9%) 175.984 ms/op
# Warmup Iteration   3: 1516.241 ±(99.9%) 206.206 ms/op
# Warmup Iteration   4: 1482.686 ±(99.9%) 129.438 ms/op
# Warmup Iteration   5: 1511.447 ±(99.9%) 72.289 ms/op
Iteration   1: 1467.108 ±(99.9%) 177.564 ms/op
                 executeQuery·p0.00:   1329.594 ms/op
                 executeQuery·p0.50:   1476.395 ms/op
                 executeQuery·p0.90:   1547.698 ms/op
                 executeQuery·p0.95:   1547.698 ms/op
                 executeQuery·p0.99:   1547.698 ms/op
                 executeQuery·p0.999:  1547.698 ms/op
                 executeQuery·p0.9999: 1547.698 ms/op
                 executeQuery·p1.00:   1547.698 ms/op

Iteration   2: 1510.249 ±(99.9%) 111.953 ms/op
                 executeQuery·p0.00:   1455.423 ms/op
                 executeQuery·p0.50:   1493.172 ms/op
                 executeQuery·p0.90:   1577.058 ms/op
                 executeQuery·p0.95:   1577.058 ms/op
                 executeQuery·p0.99:   1577.058 ms/op
                 executeQuery·p0.999:  1577.058 ms/op
                 executeQuery·p0.9999: 1577.058 ms/op
                 executeQuery·p1.00:   1577.058 ms/op

Iteration   3: 1477.893 ±(99.9%) 117.028 ms/op
                 executeQuery·p0.00:   1388.315 ms/op
                 executeQuery·p0.50:   1484.784 ms/op
                 executeQuery·p0.90:   1535.115 ms/op
                 executeQuery·p0.95:   1535.115 ms/op
                 executeQuery·p0.99:   1535.115 ms/op
                 executeQuery·p0.999:  1535.115 ms/op
                 executeQuery·p0.9999: 1535.115 ms/op
                 executeQuery·p1.00:   1535.115 ms/op

Iteration   4: 1465.610 ±(99.9%) 221.799 ms/op
                 executeQuery·p0.00:   1327.497 ms/op
                 executeQuery·p0.50:   1468.006 ms/op
                 executeQuery·p0.90:   1629.487 ms/op
                 executeQuery·p0.95:   1629.487 ms/op
                 executeQuery·p0.99:   1629.487 ms/op
                 executeQuery·p0.999:  1629.487 ms/op
                 executeQuery·p0.9999: 1629.487 ms/op
                 executeQuery·p1.00:   1629.487 ms/op

Iteration   5: 1476.095 ±(99.9%) 116.254 ms/op
                 executeQuery·p0.00:   1419.772 ms/op
                 executeQuery·p0.50:   1455.423 ms/op
                 executeQuery·p0.90:   1556.087 ms/op
                 executeQuery·p0.95:   1556.087 ms/op
                 executeQuery·p0.99:   1556.087 ms/op
                 executeQuery·p0.999:  1556.087 ms/op
                 executeQuery·p0.9999: 1556.087 ms/op
                 executeQuery·p1.00:   1556.087 ms/op


# Run progress: 79.38% complete, ETA 02:04:58
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1595.633 ±(99.9%) 303.839 ms/op
# Warmup Iteration   2: 1531.520 ±(99.9%) 132.187 ms/op
# Warmup Iteration   3: 1492.273 ±(99.9%) 202.584 ms/op
# Warmup Iteration   4: 1463.812 ±(99.9%) 221.574 ms/op
# Warmup Iteration   5: 1452.428 ±(99.9%) 145.781 ms/op
Iteration   1: 1494.670 ±(99.9%) 219.580 ms/op
                 executeQuery·p0.00:   1335.886 ms/op
                 executeQuery·p0.50:   1522.532 ms/op
                 executeQuery·p0.90:   1627.390 ms/op
                 executeQuery·p0.95:   1627.390 ms/op
                 executeQuery·p0.99:   1627.390 ms/op
                 executeQuery·p0.999:  1627.390 ms/op
                 executeQuery·p0.9999: 1627.390 ms/op
                 executeQuery·p1.00:   1627.390 ms/op

Iteration   2: 1488.678 ±(99.9%) 136.115 ms/op
                 executeQuery·p0.00:   1398.800 ms/op
                 executeQuery·p0.50:   1505.755 ms/op
                 executeQuery·p0.90:   1562.378 ms/op
                 executeQuery·p0.95:   1562.378 ms/op
                 executeQuery·p0.99:   1562.378 ms/op
                 executeQuery·p0.999:  1562.378 ms/op
                 executeQuery·p0.9999: 1562.378 ms/op
                 executeQuery·p1.00:   1562.378 ms/op

Iteration   3: 1506.954 ±(99.9%) 283.760 ms/op
                 executeQuery·p0.00:   1352.663 ms/op
                 executeQuery·p0.50:   1484.784 ms/op
                 executeQuery·p0.90:   1709.179 ms/op
                 executeQuery·p0.95:   1709.179 ms/op
                 executeQuery·p0.99:   1709.179 ms/op
                 executeQuery·p0.999:  1709.179 ms/op
                 executeQuery·p0.9999: 1709.179 ms/op
                 executeQuery·p1.00:   1709.179 ms/op

Iteration   4: 1492.873 ±(99.9%) 204.367 ms/op
                 executeQuery·p0.00:   1335.886 ms/op
                 executeQuery·p0.50:   1499.464 ms/op
                 executeQuery·p0.90:   1629.487 ms/op
                 executeQuery·p0.95:   1629.487 ms/op
                 executeQuery·p0.99:   1629.487 ms/op
                 executeQuery·p0.999:  1629.487 ms/op
                 executeQuery·p0.9999: 1629.487 ms/op
                 executeQuery·p1.00:   1629.487 ms/op

Iteration   5: 1469.804 ±(99.9%) 83.181 ms/op
                 executeQuery·p0.00:   1409.286 ms/op
                 executeQuery·p0.50:   1484.784 ms/op
                 executeQuery·p0.90:   1514.144 ms/op
                 executeQuery·p0.95:   1514.144 ms/op
                 executeQuery·p0.99:   1514.144 ms/op
                 executeQuery·p0.999:  1514.144 ms/op
                 executeQuery·p0.9999: 1514.144 ms/op
                 executeQuery·p1.00:   1514.144 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 175
  mean =   1493.316 ±(99.9%) 17.177 ms/op

  Histogram, ms/op:
    [1300.000, 1350.000) = 7 
    [1350.000, 1400.000) = 10 
    [1400.000, 1450.000) = 23 
    [1450.000, 1500.000) = 56 
    [1500.000, 1550.000) = 49 
    [1550.000, 1600.000) = 21 
    [1600.000, 1650.000) = 6 
    [1650.000, 1700.000) = 2 
    [1700.000, 1750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1327.497 ms/op
     p(50.0000) =   1491.075 ms/op
     p(90.0000) =   1571.606 ms/op
     p(95.0000) =   1604.321 ms/op
     p(99.0000) =   1677.302 ms/op
     p(99.9000) =   1709.179 ms/op
     p(99.9900) =   1709.179 ms/op
     p(99.9990) =   1709.179 ms/op
     p(99.9999) =   1709.179 ms/op
    p(100.0000) =   1709.179 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8)

# Run progress: 79.69% complete, ETA 02:03:03
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1656.750 ±(99.9%) 323.412 ms/op
# Warmup Iteration   2: 1515.642 ±(99.9%) 217.641 ms/op
# Warmup Iteration   3: 1504.557 ±(99.9%) 51.370 ms/op
# Warmup Iteration   4: 1501.261 ±(99.9%) 194.390 ms/op
# Warmup Iteration   5: 1549.496 ±(99.9%) 99.242 ms/op
Iteration   1: 1513.545 ±(99.9%) 130.174 ms/op
                 executeQuery·p0.00:   1392.509 ms/op
                 executeQuery·p0.50:   1535.115 ms/op
                 executeQuery·p0.90:   1570.767 ms/op
                 executeQuery·p0.95:   1570.767 ms/op
                 executeQuery·p0.99:   1570.767 ms/op
                 executeQuery·p0.999:  1570.767 ms/op
                 executeQuery·p0.9999: 1570.767 ms/op
                 executeQuery·p1.00:   1570.767 ms/op

Iteration   2: 1524.030 ±(99.9%) 146.566 ms/op
                 executeQuery·p0.00:   1419.772 ms/op
                 executeQuery·p0.50:   1528.824 ms/op
                 executeQuery·p0.90:   1600.127 ms/op
                 executeQuery·p0.95:   1600.127 ms/op
                 executeQuery·p0.99:   1600.127 ms/op
                 executeQuery·p0.999:  1600.127 ms/op
                 executeQuery·p0.9999: 1600.127 ms/op
                 executeQuery·p1.00:   1600.127 ms/op

Iteration   3: 1539.010 ±(99.9%) 153.522 ms/op
                 executeQuery·p0.00:   1459.618 ms/op
                 executeQuery·p0.50:   1516.241 ms/op
                 executeQuery·p0.90:   1673.527 ms/op
                 executeQuery·p0.95:   1673.527 ms/op
                 executeQuery·p0.99:   1673.527 ms/op
                 executeQuery·p0.999:  1673.527 ms/op
                 executeQuery·p0.9999: 1673.527 ms/op
                 executeQuery·p1.00:   1673.527 ms/op

Iteration   4: 1493.771 ±(99.9%) 138.666 ms/op
                 executeQuery·p0.00:   1400.898 ms/op
                 executeQuery·p0.50:   1528.824 ms/op
                 executeQuery·p0.90:   1551.892 ms/op
                 executeQuery·p0.95:   1551.892 ms/op
                 executeQuery·p0.99:   1551.892 ms/op
                 executeQuery·p0.999:  1551.892 ms/op
                 executeQuery·p0.9999: 1551.892 ms/op
                 executeQuery·p1.00:   1551.892 ms/op

Iteration   5: 1528.225 ±(99.9%) 47.914 ms/op
                 executeQuery·p0.00:   1495.269 ms/op
                 executeQuery·p0.50:   1526.727 ms/op
                 executeQuery·p0.90:   1558.184 ms/op
                 executeQuery·p0.95:   1558.184 ms/op
                 executeQuery·p0.99:   1558.184 ms/op
                 executeQuery·p0.999:  1558.184 ms/op
                 executeQuery·p0.9999: 1558.184 ms/op
                 executeQuery·p1.00:   1558.184 ms/op


# Run progress: 80.00% complete, ETA 02:01:09
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1640.322 ±(99.9%) 349.667 ms/op
# Warmup Iteration   2: 1517.140 ±(99.9%) 86.915 ms/op
# Warmup Iteration   3: 1515.043 ±(99.9%) 214.477 ms/op
# Warmup Iteration   4: 1526.427 ±(99.9%) 171.830 ms/op
# Warmup Iteration   5: 1535.714 ±(99.9%) 248.958 ms/op
Iteration   1: 1507.253 ±(99.9%) 145.113 ms/op
                 executeQuery·p0.00:   1426.063 ms/op
                 executeQuery·p0.50:   1518.338 ms/op
                 executeQuery·p0.90:   1614.807 ms/op
                 executeQuery·p0.95:   1614.807 ms/op
                 executeQuery·p0.99:   1614.807 ms/op
                 executeQuery·p0.999:  1614.807 ms/op
                 executeQuery·p0.9999: 1614.807 ms/op
                 executeQuery·p1.00:   1614.807 ms/op

Iteration   2: 1540.208 ±(99.9%) 141.615 ms/op
                 executeQuery·p0.00:   1436.549 ms/op
                 executeQuery·p0.50:   1547.698 ms/op
                 executeQuery·p0.90:   1627.390 ms/op
                 executeQuery·p0.95:   1627.390 ms/op
                 executeQuery·p0.99:   1627.390 ms/op
                 executeQuery·p0.999:  1627.390 ms/op
                 executeQuery·p0.9999: 1627.390 ms/op
                 executeQuery·p1.00:   1627.390 ms/op

Iteration   3: 1512.047 ±(99.9%) 121.923 ms/op
                 executeQuery·p0.00:   1405.092 ms/op
                 executeQuery·p0.50:   1518.338 ms/op
                 executeQuery·p0.90:   1572.864 ms/op
                 executeQuery·p0.95:   1572.864 ms/op
                 executeQuery·p0.99:   1572.864 ms/op
                 executeQuery·p0.999:  1572.864 ms/op
                 executeQuery·p0.9999: 1572.864 ms/op
                 executeQuery·p1.00:   1572.864 ms/op

Iteration   4: 1527.925 ±(99.9%) 128.076 ms/op
                 executeQuery·p0.00:   1468.006 ms/op
                 executeQuery·p0.50:   1514.144 ms/op
                 executeQuery·p0.90:   1639.973 ms/op
                 executeQuery·p0.95:   1639.973 ms/op
                 executeQuery·p0.99:   1639.973 ms/op
                 executeQuery·p0.999:  1639.973 ms/op
                 executeQuery·p0.9999: 1639.973 ms/op
                 executeQuery·p1.00:   1639.973 ms/op

Iteration   5: 1507.553 ±(99.9%) 119.223 ms/op
                 executeQuery·p0.00:   1438.646 ms/op
                 executeQuery·p0.50:   1501.561 ms/op
                 executeQuery·p0.90:   1604.321 ms/op
                 executeQuery·p0.95:   1604.321 ms/op
                 executeQuery·p0.99:   1604.321 ms/op
                 executeQuery·p0.999:  1604.321 ms/op
                 executeQuery·p0.9999: 1604.321 ms/op
                 executeQuery·p1.00:   1604.321 ms/op


# Run progress: 80.31% complete, ETA 01:59:14
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1620.399 ±(99.9%) 392.909 ms/op
# Warmup Iteration   2: 1548.297 ±(99.9%) 161.553 ms/op
# Warmup Iteration   3: 1533.917 ±(99.9%) 178.650 ms/op
# Warmup Iteration   4: 1506.954 ±(99.9%) 207.444 ms/op
# Warmup Iteration   5: 1543.504 ±(99.9%) 197.003 ms/op
Iteration   1: 1473.399 ±(99.9%) 253.034 ms/op
                 executeQuery·p0.00:   1354.760 ms/op
                 executeQuery·p0.50:   1409.286 ms/op
                 executeQuery·p0.90:   1652.556 ms/op
                 executeQuery·p0.95:   1652.556 ms/op
                 executeQuery·p0.99:   1652.556 ms/op
                 executeQuery·p0.999:  1652.556 ms/op
                 executeQuery·p0.9999: 1652.556 ms/op
                 executeQuery·p1.00:   1652.556 ms/op

Iteration   2: 1500.662 ±(99.9%) 122.224 ms/op
                 executeQuery·p0.00:   1417.675 ms/op
                 executeQuery·p0.50:   1522.532 ms/op
                 executeQuery·p0.90:   1570.767 ms/op
                 executeQuery·p0.95:   1570.767 ms/op
                 executeQuery·p0.99:   1570.767 ms/op
                 executeQuery·p0.999:  1570.767 ms/op
                 executeQuery·p0.9999: 1570.767 ms/op
                 executeQuery·p1.00:   1570.767 ms/op

Iteration   3: 1503.059 ±(99.9%) 228.134 ms/op
                 executeQuery·p0.00:   1358.954 ms/op
                 executeQuery·p0.50:   1516.241 ms/op
                 executeQuery·p0.90:   1681.916 ms/op
                 executeQuery·p0.95:   1681.916 ms/op
                 executeQuery·p0.99:   1681.916 ms/op
                 executeQuery·p0.999:  1681.916 ms/op
                 executeQuery·p0.9999: 1681.916 ms/op
                 executeQuery·p1.00:   1681.916 ms/op

Iteration   4: 1530.621 ±(99.9%) 122.878 ms/op
                 executeQuery·p0.00:   1436.549 ms/op
                 executeQuery·p0.50:   1528.824 ms/op
                 executeQuery·p0.90:   1610.613 ms/op
                 executeQuery·p0.95:   1610.613 ms/op
                 executeQuery·p0.99:   1610.613 ms/op
                 executeQuery·p0.999:  1610.613 ms/op
                 executeQuery·p0.9999: 1610.613 ms/op
                 executeQuery·p1.00:   1610.613 ms/op

Iteration   5: 1532.419 ±(99.9%) 95.705 ms/op
                 executeQuery·p0.00:   1474.298 ms/op
                 executeQuery·p0.50:   1518.338 ms/op
                 executeQuery·p0.90:   1579.155 ms/op
                 executeQuery·p0.95:   1579.155 ms/op
                 executeQuery·p0.99:   1579.155 ms/op
                 executeQuery·p0.999:  1579.155 ms/op
                 executeQuery·p0.9999: 1579.155 ms/op
                 executeQuery·p1.00:   1579.155 ms/op


# Run progress: 80.63% complete, ETA 01:57:20
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1613.059 ±(99.9%) 456.639 ms/op
# Warmup Iteration   2: 1551.293 ±(99.9%) 104.151 ms/op
# Warmup Iteration   3: 1531.221 ±(99.9%) 99.802 ms/op
# Warmup Iteration   4: 1503.358 ±(99.9%) 162.511 ms/op
# Warmup Iteration   5: 1534.816 ±(99.9%) 261.980 ms/op
Iteration   1: 1500.362 ±(99.9%) 165.513 ms/op
                 executeQuery·p0.00:   1373.635 ms/op
                 executeQuery·p0.50:   1526.727 ms/op
                 executeQuery·p0.90:   1593.836 ms/op
                 executeQuery·p0.95:   1593.836 ms/op
                 executeQuery·p0.99:   1593.836 ms/op
                 executeQuery·p0.999:  1593.836 ms/op
                 executeQuery·p0.9999: 1593.836 ms/op
                 executeQuery·p1.00:   1593.836 ms/op

Iteration   2: 1522.233 ±(99.9%) 99.578 ms/op
                 executeQuery·p0.00:   1447.035 ms/op
                 executeQuery·p0.50:   1514.144 ms/op
                 executeQuery·p0.90:   1585.447 ms/op
                 executeQuery·p0.95:   1585.447 ms/op
                 executeQuery·p0.99:   1585.447 ms/op
                 executeQuery·p0.999:  1585.447 ms/op
                 executeQuery·p0.9999: 1585.447 ms/op
                 executeQuery·p1.00:   1585.447 ms/op

Iteration   3: 1548.597 ±(99.9%) 179.003 ms/op
                 executeQuery·p0.00:   1465.909 ms/op
                 executeQuery·p0.50:   1528.824 ms/op
                 executeQuery·p0.90:   1656.750 ms/op
                 executeQuery·p0.95:   1656.750 ms/op
                 executeQuery·p0.99:   1656.750 ms/op
                 executeQuery·p0.999:  1656.750 ms/op
                 executeQuery·p0.9999: 1656.750 ms/op
                 executeQuery·p1.00:   1656.750 ms/op

Iteration   4: 1522.233 ±(99.9%) 160.577 ms/op
                 executeQuery·p0.00:   1369.440 ms/op
                 executeQuery·p0.50:   1545.601 ms/op
                 executeQuery·p0.90:   1591.738 ms/op
                 executeQuery·p0.95:   1591.738 ms/op
                 executeQuery·p0.99:   1591.738 ms/op
                 executeQuery·p0.999:  1591.738 ms/op
                 executeQuery·p0.9999: 1591.738 ms/op
                 executeQuery·p1.00:   1591.738 ms/op

Iteration   5: 1528.524 ±(99.9%) 142.989 ms/op
                 executeQuery·p0.00:   1419.772 ms/op
                 executeQuery·p0.50:   1530.921 ms/op
                 executeQuery·p0.90:   1621.098 ms/op
                 executeQuery·p0.95:   1621.098 ms/op
                 executeQuery·p0.99:   1621.098 ms/op
                 executeQuery·p0.999:  1621.098 ms/op
                 executeQuery·p0.9999: 1621.098 ms/op
                 executeQuery·p1.00:   1621.098 ms/op


# Run progress: 80.94% complete, ETA 01:55:25
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1640.322 ±(99.9%) 359.132 ms/op
# Warmup Iteration   2: 1523.731 ±(99.9%) 75.466 ms/op
# Warmup Iteration   3: 1520.435 ±(99.9%) 207.357 ms/op
# Warmup Iteration   4: 1505.456 ±(99.9%) 221.765 ms/op
# Warmup Iteration   5: 1506.954 ±(99.9%) 201.332 ms/op
Iteration   1: 1539.010 ±(99.9%) 147.242 ms/op
                 executeQuery·p0.00:   1440.743 ms/op
                 executeQuery·p0.50:   1551.892 ms/op
                 executeQuery·p0.90:   1606.418 ms/op
                 executeQuery·p0.95:   1606.418 ms/op
                 executeQuery·p0.99:   1606.418 ms/op
                 executeQuery·p0.999:  1606.418 ms/op
                 executeQuery·p0.9999: 1606.418 ms/op
                 executeQuery·p1.00:   1606.418 ms/op

Iteration   2: 1524.929 ±(99.9%) 122.150 ms/op
                 executeQuery·p0.00:   1430.258 ms/op
                 executeQuery·p0.50:   1518.338 ms/op
                 executeQuery·p0.90:   1602.224 ms/op
                 executeQuery·p0.95:   1602.224 ms/op
                 executeQuery·p0.99:   1602.224 ms/op
                 executeQuery·p0.999:  1602.224 ms/op
                 executeQuery·p0.9999: 1602.224 ms/op
                 executeQuery·p1.00:   1602.224 ms/op

Iteration   3: 1548.897 ±(99.9%) 77.364 ms/op
                 executeQuery·p0.00:   1512.047 ms/op
                 executeQuery·p0.50:   1535.115 ms/op
                 executeQuery·p0.90:   1591.738 ms/op
                 executeQuery·p0.95:   1591.738 ms/op
                 executeQuery·p0.99:   1591.738 ms/op
                 executeQuery·p0.999:  1591.738 ms/op
                 executeQuery·p0.9999: 1591.738 ms/op
                 executeQuery·p1.00:   1591.738 ms/op

Iteration   4: 1529.723 ±(99.9%) 165.849 ms/op
                 executeQuery·p0.00:   1419.772 ms/op
                 executeQuery·p0.50:   1524.630 ms/op
                 executeQuery·p0.90:   1667.236 ms/op
                 executeQuery·p0.95:   1667.236 ms/op
                 executeQuery·p0.99:   1667.236 ms/op
                 executeQuery·p0.999:  1667.236 ms/op
                 executeQuery·p0.9999: 1667.236 ms/op
                 executeQuery·p1.00:   1667.236 ms/op

Iteration   5: 1536.314 ±(99.9%) 149.732 ms/op
                 executeQuery·p0.00:   1430.258 ms/op
                 executeQuery·p0.50:   1524.630 ms/op
                 executeQuery·p0.90:   1631.584 ms/op
                 executeQuery·p0.95:   1631.584 ms/op
                 executeQuery·p0.99:   1631.584 ms/op
                 executeQuery·p0.999:  1631.584 ms/op
                 executeQuery·p0.9999: 1631.584 ms/op
                 executeQuery·p1.00:   1631.584 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 175
  mean =   1521.382 ±(99.9%) 15.895 ms/op

  Histogram, ms/op:
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 4 
    [1375.000, 1400.000) = 2 
    [1400.000, 1425.000) = 9 
    [1425.000, 1450.000) = 12 
    [1450.000, 1475.000) = 9 
    [1475.000, 1500.000) = 13 
    [1500.000, 1525.000) = 42 
    [1525.000, 1550.000) = 38 
    [1550.000, 1575.000) = 18 
    [1575.000, 1600.000) = 11 
    [1600.000, 1625.000) = 8 
    [1625.000, 1650.000) = 3 
    [1650.000, 1675.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =   1354.760 ms/op
     p(50.0000) =   1524.630 ms/op
     p(90.0000) =   1598.869 ms/op
     p(95.0000) =   1628.229 ms/op
     p(99.0000) =   1675.541 ms/op
     p(99.9000) =   1681.916 ms/op
     p(99.9900) =   1681.916 ms/op
     p(99.9990) =   1681.916 ms/op
     p(99.9999) =   1681.916 ms/op
    p(100.0000) =   1681.916 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2)

# Run progress: 81.25% complete, ETA 01:53:31
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2023.332 ±(99.9%) 585.351 ms/op
# Warmup Iteration   2: 1920.642 ±(99.9%) 276.396 ms/op
# Warmup Iteration   3: 1882.543 ±(99.9%) 201.487 ms/op
# Warmup Iteration   4: 1913.302 ±(99.9%) 95.817 ms/op
# Warmup Iteration   5: 1889.534 ±(99.9%) 215.433 ms/op
Iteration   1: 1910.855 ±(99.9%) 243.196 ms/op
                 executeQuery·p0.00:   1769.996 ms/op
                 executeQuery·p0.50:   1909.457 ms/op
                 executeQuery·p0.90:   2036.335 ms/op
                 executeQuery·p0.95:   2036.335 ms/op
                 executeQuery·p0.99:   2036.335 ms/op
                 executeQuery·p0.999:  2036.335 ms/op
                 executeQuery·p0.9999: 2036.335 ms/op
                 executeQuery·p1.00:   2036.335 ms/op

Iteration   2: 1932.875 ±(99.9%) 191.309 ms/op
                 executeQuery·p0.00:   1832.911 ms/op
                 executeQuery·p0.50:   1925.186 ms/op
                 executeQuery·p0.90:   2017.460 ms/op
                 executeQuery·p0.95:   2017.460 ms/op
                 executeQuery·p0.99:   2017.460 ms/op
                 executeQuery·p0.999:  2017.460 ms/op
                 executeQuery·p0.9999: 2017.460 ms/op
                 executeQuery·p1.00:   2017.460 ms/op

Iteration   3: 1939.516 ±(99.9%) 230.102 ms/op
                 executeQuery·p0.00:   1832.911 ms/op
                 executeQuery·p0.50:   1966.080 ms/op
                 executeQuery·p0.90:   2027.946 ms/op
                 executeQuery·p0.95:   2027.946 ms/op
                 executeQuery·p0.99:   2027.946 ms/op
                 executeQuery·p0.999:  2027.946 ms/op
                 executeQuery·p0.9999: 2027.946 ms/op
                 executeQuery·p1.00:   2027.946 ms/op

Iteration   4: 1931.827 ±(99.9%) 233.296 ms/op
                 executeQuery·p0.00:   1868.562 ms/op
                 executeQuery·p0.50:   1896.874 ms/op
                 executeQuery·p0.90:   2095.055 ms/op
                 executeQuery·p0.95:   2095.055 ms/op
                 executeQuery·p0.99:   2095.055 ms/op
                 executeQuery·p0.999:  2095.055 ms/op
                 executeQuery·p0.9999: 2095.055 ms/op
                 executeQuery·p1.00:   2095.055 ms/op

Iteration   5: 1888.136 ±(99.9%) 162.151 ms/op
                 executeQuery·p0.00:   1807.745 ms/op
                 executeQuery·p0.50:   1898.971 ms/op
                 executeQuery·p0.90:   1958.740 ms/op
                 executeQuery·p0.95:   1958.740 ms/op
                 executeQuery·p0.99:   1958.740 ms/op
                 executeQuery·p0.999:  1958.740 ms/op
                 executeQuery·p0.9999: 1958.740 ms/op
                 executeQuery·p1.00:   1958.740 ms/op


# Run progress: 81.56% complete, ETA 01:51:38
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1991.036 ±(99.9%) 677.986 ms/op
# Warmup Iteration   2: 1880.796 ±(99.9%) 202.129 ms/op
# Warmup Iteration   3: 1874.504 ±(99.9%) 210.050 ms/op
# Warmup Iteration   4: 1881.495 ±(99.9%) 222.677 ms/op
# Warmup Iteration   5: 1870.660 ±(99.9%) 155.814 ms/op
Iteration   1: 1880.097 ±(99.9%) 129.578 ms/op
                 executeQuery·p0.00:   1830.814 ms/op
                 executeQuery·p0.50:   1881.145 ms/op
                 executeQuery·p0.90:   1933.574 ms/op
                 executeQuery·p0.95:   1933.574 ms/op
                 executeQuery·p0.99:   1933.574 ms/op
                 executeQuery·p0.999:  1933.574 ms/op
                 executeQuery·p0.9999: 1933.574 ms/op
                 executeQuery·p1.00:   1933.574 ms/op

Iteration   2: 1857.727 ±(99.9%) 204.240 ms/op
                 executeQuery·p0.00:   1736.442 ms/op
                 executeQuery·p0.50:   1866.465 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op

Iteration   3: 1874.155 ±(99.9%) 73.514 ms/op
                 executeQuery·p0.00:   1837.105 ms/op
                 executeQuery·p0.50:   1869.611 ms/op
                 executeQuery·p0.90:   1916.797 ms/op
                 executeQuery·p0.95:   1916.797 ms/op
                 executeQuery·p0.99:   1916.797 ms/op
                 executeQuery·p0.999:  1916.797 ms/op
                 executeQuery·p0.9999: 1916.797 ms/op
                 executeQuery·p1.00:   1916.797 ms/op

Iteration   4: 1846.892 ±(99.9%) 195.634 ms/op
                 executeQuery·p0.00:   1751.122 ms/op
                 executeQuery·p0.50:   1845.494 ms/op
                 executeQuery·p0.90:   1960.837 ms/op
                 executeQuery·p0.95:   1960.837 ms/op
                 executeQuery·p0.99:   1960.837 ms/op
                 executeQuery·p0.999:  1960.837 ms/op
                 executeQuery·p0.9999: 1960.837 ms/op
                 executeQuery·p1.00:   1960.837 ms/op

Iteration   5: 1852.484 ±(99.9%) 256.572 ms/op
                 executeQuery·p0.00:   1738.539 ms/op
                 executeQuery·p0.50:   1851.785 ms/op
                 executeQuery·p0.90:   1990.197 ms/op
                 executeQuery·p0.95:   1990.197 ms/op
                 executeQuery·p0.99:   1990.197 ms/op
                 executeQuery·p0.999:  1990.197 ms/op
                 executeQuery·p0.9999: 1990.197 ms/op
                 executeQuery·p1.00:   1990.197 ms/op


# Run progress: 81.88% complete, ETA 01:49:45
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1937.419 ±(99.9%) 443.171 ms/op
# Warmup Iteration   2: 1865.766 ±(99.9%) 178.283 ms/op
# Warmup Iteration   3: 1886.388 ±(99.9%) 158.706 ms/op
# Warmup Iteration   4: 1911.554 ±(99.9%) 287.589 ms/op
# Warmup Iteration   5: 1894.427 ±(99.9%) 265.554 ms/op
Iteration   1: 1880.446 ±(99.9%) 92.137 ms/op
                 executeQuery·p0.00:   1839.202 ms/op
                 executeQuery·p0.50:   1885.340 ms/op
                 executeQuery·p0.90:   1916.797 ms/op
                 executeQuery·p0.95:   1916.797 ms/op
                 executeQuery·p0.99:   1916.797 ms/op
                 executeQuery·p0.999:  1916.797 ms/op
                 executeQuery·p0.9999: 1916.797 ms/op
                 executeQuery·p1.00:   1916.797 ms/op

Iteration   2: 1894.078 ±(99.9%) 153.326 ms/op
                 executeQuery·p0.00:   1826.619 ms/op
                 executeQuery·p0.50:   1885.340 ms/op
                 executeQuery·p0.90:   1975.517 ms/op
                 executeQuery·p0.95:   1975.517 ms/op
                 executeQuery·p0.99:   1975.517 ms/op
                 executeQuery·p0.999:  1975.517 ms/op
                 executeQuery·p0.9999: 1975.517 ms/op
                 executeQuery·p1.00:   1975.517 ms/op

Iteration   3: 1916.797 ±(99.9%) 348.271 ms/op
                 executeQuery·p0.00:   1717.567 ms/op
                 executeQuery·p0.50:   1922.040 ms/op
                 executeQuery·p0.90:   2099.249 ms/op
                 executeQuery·p0.95:   2099.249 ms/op
                 executeQuery·p0.99:   2099.249 ms/op
                 executeQuery·p0.999:  2099.249 ms/op
                 executeQuery·p0.9999: 2099.249 ms/op
                 executeQuery·p1.00:   2099.249 ms/op

Iteration   4: 1875.902 ±(99.9%) 124.404 ms/op
                 executeQuery·p0.00:   1835.008 ms/op
                 executeQuery·p0.50:   1858.077 ms/op
                 executeQuery·p0.90:   1954.546 ms/op
                 executeQuery·p0.95:   1954.546 ms/op
                 executeQuery·p0.99:   1954.546 ms/op
                 executeQuery·p0.999:  1954.546 ms/op
                 executeQuery·p0.9999: 1954.546 ms/op
                 executeQuery·p1.00:   1954.546 ms/op

Iteration   5: 1903.864 ±(99.9%) 97.941 ms/op
                 executeQuery·p0.00:   1845.494 ms/op
                 executeQuery·p0.50:   1914.700 ms/op
                 executeQuery·p0.90:   1937.768 ms/op
                 executeQuery·p0.95:   1937.768 ms/op
                 executeQuery·p0.99:   1937.768 ms/op
                 executeQuery·p0.999:  1937.768 ms/op
                 executeQuery·p0.9999: 1937.768 ms/op
                 executeQuery·p1.00:   1937.768 ms/op


# Run progress: 82.19% complete, ETA 01:47:53
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

1947.555 ±(99.9%) 431.487 ms/op
# Warmup Iteration   2: 1879.398 ±(99.9%) 262.719 ms/op
# Warmup Iteration   3: 1855.980 ±(99.9%) 161.909 ms/op
# Warmup Iteration   4: 1920.642 ±(99.9%) 77.966 ms/op
# Warmup Iteration   5: 1861.222 ±(99.9%) 272.726 ms/op
Iteration   1: 1871.009 ±(99.9%) 253.583 ms/op
                 executeQuery·p0.00:   1778.385 ms/op
                 executeQuery·p0.50:   1843.397 ms/op
                 executeQuery·p0.90:   1988.100 ms/op
                 executeQuery·p0.95:   1988.100 ms/op
                 executeQuery·p0.99:   1988.100 ms/op
                 executeQuery·p0.999:  1988.100 ms/op
                 executeQuery·p0.9999: 1988.100 ms/op
                 executeQuery·p1.00:   1988.100 ms/op

Iteration   2: 1832.911 ±(99.9%) 281.420 ms/op
                 executeQuery·p0.00:   1732.248 ms/op
                 executeQuery·p0.50:   1820.328 ms/op
                 executeQuery·p0.90:   2009.072 ms/op
                 executeQuery·p0.95:   2009.072 ms/op
                 executeQuery·p0.99:   2009.072 ms/op
                 executeQuery·p0.999:  2009.072 ms/op
                 executeQuery·p0.9999: 2009.072 ms/op
                 executeQuery·p1.00:   2009.072 ms/op

Iteration   3: 1885.340 ±(99.9%) 234.083 ms/op
                 executeQuery·p0.00:   1738.539 ms/op
                 executeQuery·p0.50:   1892.680 ms/op
                 executeQuery·p0.90:   1965.031 ms/op
                 executeQuery·p0.95:   1965.031 ms/op
                 executeQuery·p0.99:   1965.031 ms/op
                 executeQuery·p0.999:  1965.031 ms/op
                 executeQuery·p0.9999: 1965.031 ms/op
                 executeQuery·p1.00:   1965.031 ms/op

Iteration   4: 1889.883 ±(99.9%) 79.373 ms/op
                 executeQuery·p0.00:   1835.008 ms/op
                 executeQuery·p0.50:   1901.068 ms/op
                 executeQuery·p0.90:   1912.603 ms/op
                 executeQuery·p0.95:   1912.603 ms/op
                 executeQuery·p0.99:   1912.603 ms/op
                 executeQuery·p0.999:  1912.603 ms/op
                 executeQuery·p0.9999: 1912.603 ms/op
                 executeQuery·p1.00:   1912.603 ms/op

Iteration   5: 1884.990 ±(99.9%) 352.346 ms/op
                 executeQuery·p0.00:   1816.134 ms/op
                 executeQuery·p0.50:   1830.814 ms/op
                 executeQuery·p0.90:   2139.095 ms/op
                 executeQuery·p0.95:   2139.095 ms/op
                 executeQuery·p0.99:   2139.095 ms/op
                 executeQuery·p0.999:  2139.095 ms/op
                 executeQuery·p0.9999: 2139.095 ms/op
                 executeQuery·p1.00:   2139.095 ms/op


# Run progress: 82.50% complete, ETA 01:46:00
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2040.529 ±(99.9%) 504.728 ms/op
# Warmup Iteration   2: 1918.894 ±(99.9%) 208.748 ms/op
# Warmup Iteration   3: 1895.825 ±(99.9%) 196.282 ms/op
# Warmup Iteration   4: 1890.583 ±(99.9%) 225.159 ms/op
# Warmup Iteration   5: 1944.060 ±(99.9%) 295.799 ms/op
Iteration   1: 1885.689 ±(99.9%) 172.275 ms/op
                 executeQuery·p0.00:   1801.454 ms/op
                 executeQuery·p0.50:   1911.554 ms/op
                 executeQuery·p0.90:   1939.866 ms/op
                 executeQuery·p0.95:   1939.866 ms/op
                 executeQuery·p0.99:   1939.866 ms/op
                 executeQuery·p0.999:  1939.866 ms/op
                 executeQuery·p0.9999: 1939.866 ms/op
                 executeQuery·p1.00:   1939.866 ms/op

Iteration   2: 1927.632 ±(99.9%) 268.088 ms/op
                 executeQuery·p0.00:   1769.996 ms/op
                 executeQuery·p0.50:   1948.254 ms/op
                 executeQuery·p0.90:   2021.655 ms/op
                 executeQuery·p0.95:   2021.655 ms/op
                 executeQuery·p0.99:   2021.655 ms/op
                 executeQuery·p0.999:  2021.655 ms/op
                 executeQuery·p0.9999: 2021.655 ms/op
                 executeQuery·p1.00:   2021.655 ms/op

Iteration   3: 1900.020 ±(99.9%) 297.106 ms/op
                 executeQuery·p0.00:   1769.996 ms/op
                 executeQuery·p0.50:   1924.137 ms/op
                 executeQuery·p0.90:   2023.752 ms/op
                 executeQuery·p0.95:   2023.752 ms/op
                 executeQuery·p0.99:   2023.752 ms/op
                 executeQuery·p0.999:  2023.752 ms/op
                 executeQuery·p0.9999: 2023.752 ms/op
                 executeQuery·p1.00:   2023.752 ms/op

Iteration   4: 1913.302 ±(99.9%) 373.228 ms/op
                 executeQuery·p0.00:   1776.288 ms/op
                 executeQuery·p0.50:   1885.340 ms/op
                 executeQuery·p0.90:   2080.375 ms/op
                 executeQuery·p0.95:   2080.375 ms/op
                 executeQuery·p0.99:   2080.375 ms/op
                 executeQuery·p0.999:  2080.375 ms/op
                 executeQuery·p0.9999: 2080.375 ms/op
                 executeQuery·p1.00:   2080.375 ms/op

Iteration   5: 1902.466 ±(99.9%) 307.728 ms/op
                 executeQuery·p0.00:   1746.928 ms/op
                 executeQuery·p0.50:   1936.720 ms/op
                 executeQuery·p0.90:   2025.849 ms/op
                 executeQuery·p0.95:   2025.849 ms/op
                 executeQuery·p0.99:   2025.849 ms/op
                 executeQuery·p0.999:  2025.849 ms/op
                 executeQuery·p0.9999: 2025.849 ms/op
                 executeQuery·p1.00:   2025.849 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 150
  mean =   1891.156 ±(99.9%) 21.932 ms/op

  Histogram, ms/op:
    [1700.000, 1750.000) = 7 
    [1750.000, 1800.000) = 11 
    [1800.000, 1850.000) = 28 
    [1850.000, 1900.000) = 34 
    [1900.000, 1950.000) = 37 
    [1950.000, 2000.000) = 21 
    [2000.000, 2050.000) = 7 
    [2050.000, 2100.000) = 4 
    [2100.000, 2150.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1717.567 ms/op
     p(50.0000) =   1892.680 ms/op
     p(90.0000) =   1996.279 ms/op
     p(95.0000) =   2026.793 ms/op
     p(99.0000) =   2118.774 ms/op
     p(99.9000) =   2139.095 ms/op
     p(99.9900) =   2139.095 ms/op
     p(99.9990) =   2139.095 ms/op
     p(99.9999) =   2139.095 ms/op
    p(100.0000) =   2139.095 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4)

# Run progress: 82.81% complete, ETA 01:44:07
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2096.733 ±(99.9%) 416.818 ms/op
# Warmup Iteration   2: 1926.584 ±(99.9%) 179.212 ms/op
# Warmup Iteration   3: 2001.522 ±(99.9%) 339.963 ms/op
# Warmup Iteration   4: 1924.836 ±(99.9%) 352.817 ms/op
# Warmup Iteration   5: 1985.584 ±(99.9%) 190.706 ms/op
Iteration   1: 1910.505 ±(99.9%) 192.042 ms/op
                 executeQuery·p0.00:   1811.939 ms/op
                 executeQuery·p0.50:   1896.874 ms/op
                 executeQuery·p0.90:   2006.974 ms/op
                 executeQuery·p0.95:   2006.974 ms/op
                 executeQuery·p0.99:   2006.974 ms/op
                 executeQuery·p0.999:  2006.974 ms/op
                 executeQuery·p0.9999: 2006.974 ms/op
                 executeQuery·p1.00:   2006.974 ms/op

Iteration   2: 1938.467 ±(99.9%) 157.740 ms/op
                 executeQuery·p0.00:   1855.980 ms/op
                 executeQuery·p0.50:   1933.574 ms/op
                 executeQuery·p0.90:   2019.557 ms/op
                 executeQuery·p0.95:   2019.557 ms/op
                 executeQuery·p0.99:   2019.557 ms/op
                 executeQuery·p0.999:  2019.557 ms/op
                 executeQuery·p0.9999: 2019.557 ms/op
                 executeQuery·p1.00:   2019.557 ms/op

Iteration   3: 1971.323 ±(99.9%) 218.707 ms/op
                 executeQuery·p0.00:   1885.340 ms/op
                 executeQuery·p0.50:   1992.294 ms/op
                 executeQuery·p0.90:   2030.043 ms/op
                 executeQuery·p0.95:   2030.043 ms/op
                 executeQuery·p0.99:   2030.043 ms/op
                 executeQuery·p0.999:  2030.043 ms/op
                 executeQuery·p0.9999: 2030.043 ms/op
                 executeQuery·p1.00:   2030.043 ms/op

Iteration   4: 1952.099 ±(99.9%) 295.552 ms/op
                 executeQuery·p0.00:   1753.219 ms/op
                 executeQuery·p0.50:   1972.371 ms/op
                 executeQuery·p0.90:   2042.626 ms/op
                 executeQuery·p0.95:   2042.626 ms/op
                 executeQuery·p0.99:   2042.626 ms/op
                 executeQuery·p0.999:  2042.626 ms/op
                 executeQuery·p0.9999: 2042.626 ms/op
                 executeQuery·p1.00:   2042.626 ms/op

Iteration   5: 1938.467 ±(99.9%) 276.051 ms/op
                 executeQuery·p0.00:   1784.676 ms/op
                 executeQuery·p0.50:   1944.060 ms/op
                 executeQuery·p0.90:   2055.209 ms/op
                 executeQuery·p0.95:   2055.209 ms/op
                 executeQuery·p0.99:   2055.209 ms/op
                 executeQuery·p0.999:  2055.209 ms/op
                 executeQuery·p0.9999: 2055.209 ms/op
                 executeQuery·p1.00:   2055.209 ms/op


# Run progress: 83.13% complete, ETA 01:42:13
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2059.823 ±(99.9%) 619.504 ms/op
# Warmup Iteration   2: 1978.453 ±(99.9%) 319.494 ms/op
# Warmup Iteration   3: 1954.546 ±(99.9%) 129.110 ms/op
# Warmup Iteration   4: 1974.259 ±(99.9%) 349.935 ms/op
# Warmup Iteration   5: 1930.428 ±(99.9%) 281.217 ms/op
Iteration   1: 1954.895 ±(99.9%) 115.265 ms/op
                 executeQuery·p0.00:   1914.700 ms/op
                 executeQuery·p0.50:   1941.963 ms/op
                 executeQuery·p0.90:   2017.460 ms/op
                 executeQuery·p0.95:   2017.460 ms/op
                 executeQuery·p0.99:   2017.460 ms/op
                 executeQuery·p0.999:  2017.460 ms/op
                 executeQuery·p0.9999: 2017.460 ms/op
                 executeQuery·p1.00:   2017.460 ms/op

Iteration   2: 1926.234 ±(99.9%) 330.264 ms/op
                 executeQuery·p0.00:   1772.093 ms/op
                 executeQuery·p0.50:   1941.963 ms/op
                 executeQuery·p0.90:   2051.015 ms/op
                 executeQuery·p0.95:   2051.015 ms/op
                 executeQuery·p0.99:   2051.015 ms/op
                 executeQuery·p0.999:  2051.015 ms/op
                 executeQuery·p0.9999: 2051.015 ms/op
                 executeQuery·p1.00:   2051.015 ms/op

Iteration   3: 1951.610 ±(99.9%) 159.640 ms/op
                 executeQuery·p0.00:   1891.631 ms/op
                 executeQuery·p0.50:   1967.129 ms/op
                 executeQuery·p0.90:   1992.294 ms/op
                 executeQuery·p0.95:   1992.294 ms/op
                 executeQuery·p0.99:   1992.294 ms/op
                 executeQuery·p0.999:  1992.294 ms/op
                 executeQuery·p0.9999: 1992.294 ms/op
                 executeQuery·p1.00:   1992.294 ms/op

Iteration   4: 1975.517 ±(99.9%) 411.052 ms/op
                 executeQuery·p0.00:   1881.145 ms/op
                 executeQuery·p0.50:   1935.671 ms/op
                 executeQuery·p0.90:   2151.678 ms/op
                 executeQuery·p0.95:   2151.678 ms/op
                 executeQuery·p0.99:   2151.678 ms/op
                 executeQuery·p0.999:  2151.678 ms/op
                 executeQuery·p0.9999: 2151.678 ms/op
                 executeQuery·p1.00:   2151.678 ms/op

Iteration   5: 1978.453 ±(99.9%) 387.644 ms/op
                 executeQuery·p0.00:   1830.814 ms/op
                 executeQuery·p0.50:   2006.974 ms/op
                 executeQuery·p0.90:   2088.763 ms/op
                 executeQuery·p0.95:   2088.763 ms/op
                 executeQuery·p0.99:   2088.763 ms/op
                 executeQuery·p0.999:  2088.763 ms/op
                 executeQuery·p0.9999: 2088.763 ms/op
                 executeQuery·p1.00:   2088.763 ms/op


# Run progress: 83.44% complete, ETA 01:40:19
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2122.737 ±(99.9%) 553.161 ms/op
# Warmup Iteration   2: 2011.169 ±(99.9%) 371.512 ms/op
# Warmup Iteration   3: 1954.196 ±(99.9%) 73.678 ms/op
# Warmup Iteration   4: 1971.672 ±(99.9%) 136.881 ms/op
# Warmup Iteration   5: 1917.846 ±(99.9%) 157.129 ms/op
Iteration   1: 1966.779 ±(99.9%) 218.792 ms/op
                 executeQuery·p0.00:   1870.660 ms/op
                 executeQuery·p0.50:   1994.392 ms/op
                 executeQuery·p0.90:   2036.335 ms/op
                 executeQuery·p0.95:   2036.335 ms/op
                 executeQuery·p0.99:   2036.335 ms/op
                 executeQuery·p0.999:  2036.335 ms/op
                 executeQuery·p0.9999: 2036.335 ms/op
                 executeQuery·p1.00:   2036.335 ms/op

Iteration   2: 1975.517 ±(99.9%) 536.330 ms/op
                 executeQuery·p0.00:   1759.511 ms/op
                 executeQuery·p0.50:   1977.614 ms/op
                 executeQuery·p0.90:   2143.289 ms/op
                 executeQuery·p0.95:   2143.289 ms/op
                 executeQuery·p0.99:   2143.289 ms/op
                 executeQuery·p0.999:  2143.289 ms/op
                 executeQuery·p0.9999: 2143.289 ms/op
                 executeQuery·p1.00:   2143.289 ms/op

Iteration   3: 1958.390 ±(99.9%) 225.333 ms/op
                 executeQuery·p0.00:   1881.145 ms/op
                 executeQuery·p0.50:   1945.108 ms/op
                 executeQuery·p0.90:   2078.278 ms/op
                 executeQuery·p0.95:   2078.278 ms/op
                 executeQuery·p0.99:   2078.278 ms/op
                 executeQuery·p0.999:  2078.278 ms/op
                 executeQuery·p0.9999: 2078.278 ms/op
                 executeQuery·p1.00:   2078.278 ms/op

Iteration   4: 1935.671 ±(99.9%) 217.860 ms/op
                 executeQuery·p0.00:   1803.551 ms/op
                 executeQuery·p0.50:   1947.206 ms/op
                 executeQuery·p0.90:   2044.723 ms/op
                 executeQuery·p0.95:   2044.723 ms/op
                 executeQuery·p0.99:   2044.723 ms/op
                 executeQuery·p0.999:  2044.723 ms/op
                 executeQuery·p0.9999: 2044.723 ms/op
                 executeQuery·p1.00:   2044.723 ms/op

Iteration   5: 1901.767 ±(99.9%) 233.977 ms/op
                 executeQuery·p0.00:   1751.122 ms/op
                 executeQuery·p0.50:   1934.623 ms/op
                 executeQuery·p0.90:   1975.517 ms/op
                 executeQuery·p0.95:   1975.517 ms/op
                 executeQuery·p0.99:   1975.517 ms/op
                 executeQuery·p0.999:  1975.517 ms/op
                 executeQuery·p0.9999: 1975.517 ms/op
                 executeQuery·p1.00:   1975.517 ms/op


# Run progress: 83.75% complete, ETA 01:38:26
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2058.984 ±(99.9%) 664.649 ms/op
# Warmup Iteration   2: 1966.430 ±(99.9%) 389.941 ms/op
# Warmup Iteration   3: 1949.303 ±(99.9%) 131.117 ms/op
# Warmup Iteration   4: 1915.399 ±(99.9%) 157.521 ms/op
# Warmup Iteration   5: 1968.177 ±(99.9%) 194.822 ms/op
Iteration   1: 1924.486 ±(99.9%) 294.855 ms/op
                 executeQuery·p0.00:   1780.482 ms/op
                 executeQuery·p0.50:   1931.477 ms/op
                 executeQuery·p0.90:   2055.209 ms/op
                 executeQuery·p0.95:   2055.209 ms/op
                 executeQuery·p0.99:   2055.209 ms/op
                 executeQuery·p0.999:  2055.209 ms/op
                 executeQuery·p0.9999: 2055.209 ms/op
                 executeQuery·p1.00:   2055.209 ms/op

Iteration   2: 1962.585 ±(99.9%) 210.412 ms/op
                 executeQuery·p0.00:   1843.397 ms/op
                 executeQuery·p0.50:   1955.594 ms/op
                 executeQuery·p0.90:   2069.889 ms/op
                 executeQuery·p0.95:   2069.889 ms/op
                 executeQuery·p0.99:   2069.889 ms/op
                 executeQuery·p0.999:  2069.889 ms/op
                 executeQuery·p0.9999: 2069.889 ms/op
                 executeQuery·p1.00:   2069.889 ms/op

Iteration   3: 1955.944 ±(99.9%) 277.626 ms/op
                 executeQuery·p0.00:   1795.162 ms/op
                 executeQuery·p0.50:   1946.157 ms/op
                 executeQuery·p0.90:   2071.986 ms/op
                 executeQuery·p0.95:   2071.986 ms/op
                 executeQuery·p0.99:   2071.986 ms/op
                 executeQuery·p0.999:  2071.986 ms/op
                 executeQuery·p0.9999: 2071.986 ms/op
                 executeQuery·p1.00:   2071.986 ms/op

Iteration   4: 1945.458 ±(99.9%) 291.931 ms/op
                 executeQuery·p0.00:   1811.939 ms/op
                 executeQuery·p0.50:   1937.768 ms/op
                 executeQuery·p0.90:   2130.706 ms/op
                 executeQuery·p0.95:   2130.706 ms/op
                 executeQuery·p0.99:   2130.706 ms/op
                 executeQuery·p0.999:  2130.706 ms/op
                 executeQuery·p0.9999: 2130.706 ms/op
                 executeQuery·p1.00:   2130.706 ms/op

Iteration   5: 1932.176 ±(99.9%) 242.747 ms/op
                 executeQuery·p0.00:   1801.454 ms/op
                 executeQuery·p0.50:   1969.226 ms/op
                 executeQuery·p0.90:   2009.072 ms/op
                 executeQuery·p0.95:   2009.072 ms/op
                 executeQuery·p0.99:   2009.072 ms/op
                 executeQuery·p0.999:  2009.072 ms/op
                 executeQuery·p0.9999: 2009.072 ms/op
                 executeQuery·p1.00:   2009.072 ms/op


# Run progress: 84.06% complete, ETA 01:36:33
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2084.569 ±(99.9%) 681.617 ms/op
# Warmup Iteration   2: 1928.681 ±(99.9%) 91.383 ms/op
# Warmup Iteration   3: 1962.235 ±(99.9%) 263.120 ms/op
# Warmup Iteration   4: 1918.894 ±(99.9%) 250.525 ms/op
# Warmup Iteration   5: 1973.839 ±(99.9%) 350.717 ms/op
Iteration   1: 1940.215 ±(99.9%) 218.665 ms/op
                 executeQuery·p0.00:   1832.911 ms/op
                 executeQuery·p0.50:   1967.129 ms/op
                 executeQuery·p0.90:   2015.363 ms/op
                 executeQuery·p0.95:   2015.363 ms/op
                 executeQuery·p0.99:   2015.363 ms/op
                 executeQuery·p0.999:  2015.363 ms/op
                 executeQuery·p0.9999: 2015.363 ms/op
                 executeQuery·p1.00:   2015.363 ms/op

Iteration   2: 1987.261 ±(99.9%) 320.207 ms/op
                 executeQuery·p0.00:   1933.574 ms/op
                 executeQuery·p0.50:   1954.546 ms/op
                 executeQuery·p0.90:   2134.901 ms/op
                 executeQuery·p0.95:   2134.901 ms/op
                 executeQuery·p0.99:   2134.901 ms/op
                 executeQuery·p0.999:  2134.901 ms/op
                 executeQuery·p0.9999: 2134.901 ms/op
                 executeQuery·p1.00:   2134.901 ms/op

Iteration   3: 1905.962 ±(99.9%) 139.533 ms/op
                 executeQuery·p0.00:   1809.842 ms/op
                 executeQuery·p0.50:   1926.234 ms/op
                 executeQuery·p0.90:   1944.060 ms/op
                 executeQuery·p0.95:   1944.060 ms/op
                 executeQuery·p0.99:   1944.060 ms/op
                 executeQuery·p0.999:  1944.060 ms/op
                 executeQuery·p0.9999: 1944.060 ms/op
                 executeQuery·p1.00:   1944.060 ms/op

Iteration   4: 1945.808 ±(99.9%) 100.037 ms/op
                 executeQuery·p0.00:   1891.631 ms/op
                 executeQuery·p0.50:   1951.400 ms/op
                 executeQuery·p0.90:   1983.906 ms/op
                 executeQuery·p0.95:   1983.906 ms/op
                 executeQuery·p0.99:   1983.906 ms/op
                 executeQuery·p0.999:  1983.906 ms/op
                 executeQuery·p0.9999: 1983.906 ms/op
                 executeQuery·p1.00:   1983.906 ms/op

Iteration   5: 1934.273 ±(99.9%) 277.002 ms/op
                 executeQuery·p0.00:   1826.619 ms/op
                 executeQuery·p0.50:   1916.797 ms/op
                 executeQuery·p0.90:   2055.209 ms/op
                 executeQuery·p0.95:   2055.209 ms/op
                 executeQuery·p0.99:   2055.209 ms/op
                 executeQuery·p0.999:  2055.209 ms/op
                 executeQuery·p0.9999: 2055.209 ms/op
                 executeQuery·p1.00:   2055.209 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 144
  mean =   1945.691 ±(99.9%) 22.843 ms/op

  Histogram, ms/op:
    [1700.000, 1750.000) = 0 
    [1750.000, 1800.000) = 7 
    [1800.000, 1850.000) = 13 
    [1850.000, 1900.000) = 17 
    [1900.000, 1950.000) = 36 
    [1950.000, 2000.000) = 36 
    [2000.000, 2050.000) = 23 
    [2050.000, 2100.000) = 8 
    [2100.000, 2150.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   1751.122 ms/op
     p(50.0000) =   1947.206 ms/op
     p(90.0000) =   2043.675 ms/op
     p(95.0000) =   2071.462 ms/op
     p(99.0000) =   2147.903 ms/op
     p(99.9000) =   2151.678 ms/op
     p(99.9900) =   2151.678 ms/op
     p(99.9990) =   2151.678 ms/op
     p(99.9999) =   2151.678 ms/op
    p(100.0000) =   2151.678 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6)

# Run progress: 84.38% complete, ETA 01:34:40
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2067.372 ±(99.9%) 710.987 ms/op
# Warmup Iteration   2: 2066.114 ±(99.9%) 180.336 ms/op
# Warmup Iteration   3: 2001.941 ±(99.9%) 327.556 ms/op
# Warmup Iteration   4: 1986.003 ±(99.9%) 251.506 ms/op
# Warmup Iteration   5: 2039.690 ±(99.9%) 177.438 ms/op
Iteration   1: 2008.652 ±(99.9%) 277.657 ms/op
                 executeQuery·p0.00:   1889.534 ms/op
                 executeQuery·p0.50:   2021.655 ms/op
                 executeQuery·p0.90:   2084.569 ms/op
                 executeQuery·p0.95:   2084.569 ms/op
                 executeQuery·p0.99:   2084.569 ms/op
                 executeQuery·p0.999:  2084.569 ms/op
                 executeQuery·p0.9999: 2084.569 ms/op
                 executeQuery·p1.00:   2084.569 ms/op

Iteration   2: 2007.394 ±(99.9%) 249.907 ms/op
                 executeQuery·p0.00:   1952.449 ms/op
                 executeQuery·p0.50:   1981.809 ms/op
                 executeQuery·p0.90:   2101.346 ms/op
                 executeQuery·p0.95:   2101.346 ms/op
                 executeQuery·p0.99:   2101.346 ms/op
                 executeQuery·p0.999:  2101.346 ms/op
                 executeQuery·p0.9999: 2101.346 ms/op
                 executeQuery·p1.00:   2101.346 ms/op

Iteration   3: 2014.105 ±(99.9%) 351.052 ms/op
                 executeQuery·p0.00:   1889.534 ms/op
                 executeQuery·p0.50:   2006.974 ms/op
                 executeQuery·p0.90:   2124.415 ms/op
                 executeQuery·p0.95:   2124.415 ms/op
                 executeQuery·p0.99:   2124.415 ms/op
                 executeQuery·p0.999:  2124.415 ms/op
                 executeQuery·p0.9999: 2124.415 ms/op
                 executeQuery·p1.00:   2124.415 ms/op

Iteration   4: 2002.780 ±(99.9%) 108.192 ms/op
                 executeQuery·p0.00:   1965.031 ms/op
                 executeQuery·p0.50:   2011.169 ms/op
                 executeQuery·p0.90:   2038.432 ms/op
                 executeQuery·p0.95:   2038.432 ms/op
                 executeQuery·p0.99:   2038.432 ms/op
                 executeQuery·p0.999:  2038.432 ms/op
                 executeQuery·p0.9999: 2038.432 ms/op
                 executeQuery·p1.00:   2038.432 ms/op

Iteration   5: 1987.261 ±(99.9%) 422.459 ms/op
                 executeQuery·p0.00:   1879.048 ms/op
                 executeQuery·p0.50:   1956.643 ms/op
                 executeQuery·p0.90:   2128.609 ms/op
                 executeQuery·p0.95:   2128.609 ms/op
                 executeQuery·p0.99:   2128.609 ms/op
                 executeQuery·p0.999:  2128.609 ms/op
                 executeQuery·p0.9999: 2128.609 ms/op
                 executeQuery·p1.00:   2128.609 ms/op


# Run progress: 84.69% complete, ETA 01:32:45
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2122.318 ±(99.9%) 644.110 ms/op
# Warmup Iteration   2: 2054.790 ±(99.9%) 175.758 ms/op
# Warmup Iteration   3: 2028.365 ±(99.9%) 370.651 ms/op
# Warmup Iteration   4: 2023.332 ±(99.9%) 205.359 ms/op
# Warmup Iteration   5: 2014.944 ±(99.9%) 331.160 ms/op
Iteration   1: 2019.557 ±(99.9%) 306.546 ms/op
                 executeQuery·p0.00:   1883.242 ms/op
                 executeQuery·p0.50:   2038.432 ms/op
                 executeQuery·p0.90:   2092.958 ms/op
                 executeQuery·p0.95:   2092.958 ms/op
                 executeQuery·p0.99:   2092.958 ms/op
                 executeQuery·p0.999:  2092.958 ms/op
                 executeQuery·p0.9999: 2092.958 ms/op
                 executeQuery·p1.00:   2092.958 ms/op

Iteration   2: 2009.072 ±(99.9%) 351.117 ms/op
                 executeQuery·p0.00:   1887.437 ms/op
                 executeQuery·p0.50:   1994.392 ms/op
                 executeQuery·p0.90:   2130.706 ms/op
                 executeQuery·p0.95:   2130.706 ms/op
                 executeQuery·p0.99:   2130.706 ms/op
                 executeQuery·p0.999:  2130.706 ms/op
                 executeQuery·p0.9999: 2130.706 ms/op
                 executeQuery·p1.00:   2130.706 ms/op

Iteration   3: 2022.074 ±(99.9%) 321.112 ms/op
                 executeQuery·p0.00:   1897.923 ms/op
                 executeQuery·p0.50:   2015.363 ms/op
                 executeQuery·p0.90:   2116.026 ms/op
                 executeQuery·p0.95:   2116.026 ms/op
                 executeQuery·p0.99:   2116.026 ms/op
                 executeQuery·p0.999:  2116.026 ms/op
                 executeQuery·p0.9999: 2116.026 ms/op
                 executeQuery·p1.00:   2116.026 ms/op

Iteration   4: 2045.562 ±(99.9%) 97.173 ms/op
                 executeQuery·p0.00:   2021.655 ms/op
                 executeQuery·p0.50:   2034.237 ms/op
                 executeQuery·p0.90:   2080.375 ms/op
                 executeQuery·p0.95:   2080.375 ms/op
                 executeQuery·p0.99:   2080.375 ms/op
                 executeQuery·p0.999:  2080.375 ms/op
                 executeQuery·p0.9999: 2080.375 ms/op
                 executeQuery·p1.00:   2080.375 ms/op

Iteration   5: 2043.465 ±(99.9%) 398.428 ms/op
                 executeQuery·p0.00:   1866.465 ms/op
                 executeQuery·p0.50:   2071.986 ms/op
                 executeQuery·p0.90:   2139.095 ms/op
                 executeQuery·p0.95:   2139.095 ms/op
                 executeQuery·p0.99:   2139.095 ms/op
                 executeQuery·p0.999:  2139.095 ms/op
                 executeQuery·p0.9999: 2139.095 ms/op
                 executeQuery·p1.00:   2139.095 ms/op


# Run progress: 85.00% complete, ETA 01:30:50
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2151.259 ±(99.9%) 709.219 ms/op
# Warmup Iteration   2: 1983.067 ±(99.9%) 269.868 ms/op
# Warmup Iteration   3: 2041.787 ±(99.9%) 136.639 ms/op
# Warmup Iteration   4: 2007.394 ±(99.9%) 340.864 ms/op
# Warmup Iteration   5: 1951.400 ±(99.9%) 122.499 ms/op
Iteration   1: 2000.683 ±(99.9%) 180.571 ms/op
                 executeQuery·p0.00:   1962.934 ms/op
                 executeQuery·p0.50:   1981.809 ms/op
                 executeQuery·p0.90:   2074.083 ms/op
                 executeQuery·p0.95:   2074.083 ms/op
                 executeQuery·p0.99:   2074.083 ms/op
                 executeQuery·p0.999:  2074.083 ms/op
                 executeQuery·p0.9999: 2074.083 ms/op
                 executeQuery·p1.00:   2074.083 ms/op

Iteration   2: 2027.107 ±(99.9%) 336.008 ms/op
                 executeQuery·p0.00:   1923.088 ms/op
                 executeQuery·p0.50:   2013.266 ms/op
                 executeQuery·p0.90:   2120.221 ms/op
                 executeQuery·p0.95:   2120.221 ms/op
                 executeQuery·p0.99:   2120.221 ms/op
                 executeQuery·p0.999:  2120.221 ms/op
                 executeQuery·p0.9999: 2120.221 ms/op
                 executeQuery·p1.00:   2120.221 ms/op

Iteration   3: 1990.617 ±(99.9%) 179.066 ms/op
                 executeQuery·p0.00:   1944.060 ms/op
                 executeQuery·p0.50:   1975.517 ms/op
                 executeQuery·p0.90:   2067.792 ms/op
                 executeQuery·p0.95:   2067.792 ms/op
                 executeQuery·p0.99:   2067.792 ms/op
                 executeQuery·p0.999:  2067.792 ms/op
                 executeQuery·p0.9999: 2067.792 ms/op
                 executeQuery·p1.00:   2067.792 ms/op

Iteration   4: 2008.233 ±(99.9%) 359.359 ms/op
                 executeQuery·p0.00:   1889.534 ms/op
                 executeQuery·p0.50:   2034.237 ms/op
                 executeQuery·p0.90:   2107.638 ms/op
                 executeQuery·p0.95:   2107.638 ms/op
                 executeQuery·p0.99:   2107.638 ms/op
                 executeQuery·p0.999:  2107.638 ms/op
                 executeQuery·p0.9999: 2107.638 ms/op
                 executeQuery·p1.00:   2107.638 ms/op

Iteration   5: 2023.752 ±(99.9%) 71.548 ms/op
                 executeQuery·p0.00:   2002.780 ms/op
                 executeQuery·p0.50:   2021.655 ms/op
                 executeQuery·p0.90:   2053.112 ms/op
                 executeQuery·p0.95:   2053.112 ms/op
                 executeQuery·p0.99:   2053.112 ms/op
                 executeQuery·p0.999:  2053.112 ms/op
                 executeQuery·p0.9999: 2053.112 ms/op
                 executeQuery·p1.00:   2053.112 ms/op


# Run progress: 85.31% complete, ETA 01:28:55
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2078.278 ±(99.9%) 507.819 ms/op
# Warmup Iteration   2: 1989.358 ±(99.9%) 278.431 ms/op
# Warmup Iteration   3: 2010.330 ±(99.9%) 235.477 ms/op
# Warmup Iteration   4: 2022.074 ±(99.9%) 325.699 ms/op
# Warmup Iteration   5: 2003.619 ±(99.9%) 335.036 ms/op
Iteration   1: 2023.752 ±(99.9%) 304.893 ms/op
                 executeQuery·p0.00:   1893.728 ms/op
                 executeQuery·p0.50:   2042.626 ms/op
                 executeQuery·p0.90:   2086.666 ms/op
                 executeQuery·p0.95:   2086.666 ms/op
                 executeQuery·p0.99:   2086.666 ms/op
                 executeQuery·p0.999:  2086.666 ms/op
                 executeQuery·p0.9999: 2086.666 ms/op
                 executeQuery·p1.00:   2086.666 ms/op

Iteration   2: 2014.105 ±(99.9%) 191.150 ms/op
                 executeQuery·p0.00:   1939.866 ms/op
                 executeQuery·p0.50:   2025.849 ms/op
                 executeQuery·p0.90:   2065.695 ms/op
                 executeQuery·p0.95:   2065.695 ms/op
                 executeQuery·p0.99:   2065.695 ms/op
                 executeQuery·p0.999:  2065.695 ms/op
                 executeQuery·p0.9999: 2065.695 ms/op
                 executeQuery·p1.00:   2065.695 ms/op

Iteration   3: 2032.560 ±(99.9%) 337.789 ms/op
                 executeQuery·p0.00:   1929.380 ms/op
                 executeQuery·p0.50:   2090.861 ms/op
                 executeQuery·p0.90:   2101.346 ms/op
                 executeQuery·p0.95:   2101.346 ms/op
                 executeQuery·p0.99:   2101.346 ms/op
                 executeQuery·p0.999:  2101.346 ms/op
                 executeQuery·p0.9999: 2101.346 ms/op
                 executeQuery·p1.00:   2101.346 ms/op

Iteration   4: 2017.460 ±(99.9%) 435.809 ms/op
                 executeQuery·p0.00:   1893.728 ms/op
                 executeQuery·p0.50:   1992.294 ms/op
                 executeQuery·p0.90:   2147.484 ms/op
                 executeQuery·p0.95:   2147.484 ms/op
                 executeQuery·p0.99:   2147.484 ms/op
                 executeQuery·p0.999:  2147.484 ms/op
                 executeQuery·p0.9999: 2147.484 ms/op
                 executeQuery·p1.00:   2147.484 ms/op

Iteration   5: 2054.790 ±(99.9%) 156.421 ms/op
                 executeQuery·p0.00:   2000.683 ms/op
                 executeQuery·p0.50:   2063.598 ms/op
                 executeQuery·p0.90:   2092.958 ms/op
                 executeQuery·p0.95:   2092.958 ms/op
                 executeQuery·p0.99:   2092.958 ms/op
                 executeQuery·p0.999:  2092.958 ms/op
                 executeQuery·p0.9999: 2092.958 ms/op
                 executeQuery·p1.00:   2092.958 ms/op


# Run progress: 85.63% complete, ETA 01:27:00
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2048.079 ±(99.9%) 773.650 ms/op
# Warmup Iteration   2: 2045.981 ±(99.9%) 455.118 ms/op
# Warmup Iteration   3: 2009.072 ±(99.9%) 373.394 ms/op
# Warmup Iteration   4: 1963.354 ±(99.9%) 266.206 ms/op
# Warmup Iteration   5: 2025.429 ±(99.9%) 308.528 ms/op
Iteration   1: 2026.268 ±(99.9%) 391.902 ms/op
                 executeQuery·p0.00:   1900.020 ms/op
                 executeQuery·p0.50:   2013.266 ms/op
                 executeQuery·p0.90:   2147.484 ms/op
                 executeQuery·p0.95:   2147.484 ms/op
                 executeQuery·p0.99:   2147.484 ms/op
                 executeQuery·p0.999:  2147.484 ms/op
                 executeQuery·p0.9999: 2147.484 ms/op
                 executeQuery·p1.00:   2147.484 ms/op

Iteration   2: 1992.294 ±(99.9%) 410.735 ms/op
                 executeQuery·p0.00:   1818.231 ms/op
                 executeQuery·p0.50:   2002.780 ms/op
                 executeQuery·p0.90:   2103.443 ms/op
                 executeQuery·p0.95:   2103.443 ms/op
                 executeQuery·p0.99:   2103.443 ms/op
                 executeQuery·p0.999:  2103.443 ms/op
                 executeQuery·p0.9999: 2103.443 ms/op
                 executeQuery·p1.00:   2103.443 ms/op

Iteration   3: 1997.328 ±(99.9%) 342.543 ms/op
                 executeQuery·p0.00:   1885.340 ms/op
                 executeQuery·p0.50:   1981.809 ms/op
                 executeQuery·p0.90:   2118.124 ms/op
                 executeQuery·p0.95:   2118.124 ms/op
                 executeQuery·p0.99:   2118.124 ms/op
                 executeQuery·p0.999:  2118.124 ms/op
                 executeQuery·p0.9999: 2118.124 ms/op
                 executeQuery·p1.00:   2118.124 ms/op

Iteration   4: 2015.783 ±(99.9%) 431.198 ms/op
                 executeQuery·p0.00:   1870.660 ms/op
                 executeQuery·p0.50:   1981.809 ms/op
                 executeQuery·p0.90:   2141.192 ms/op
                 executeQuery·p0.95:   2141.192 ms/op
                 executeQuery·p0.99:   2141.192 ms/op
                 executeQuery·p0.999:  2141.192 ms/op
                 executeQuery·p0.9999: 2141.192 ms/op
                 executeQuery·p1.00:   2141.192 ms/op

Iteration   5: 2019.138 ±(99.9%) 72.992 ms/op
                 executeQuery·p0.00:   1992.294 ms/op
                 executeQuery·p0.50:   2027.946 ms/op
                 executeQuery·p0.90:   2038.432 ms/op
                 executeQuery·p0.95:   2038.432 ms/op
                 executeQuery·p0.99:   2038.432 ms/op
                 executeQuery·p0.999:  2038.432 ms/op
                 executeQuery·p0.9999: 2038.432 ms/op
                 executeQuery·p1.00:   2038.432 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 125
  mean =   2016.152 ±(99.9%) 22.097 ms/op

  Histogram, ms/op:
    [1800.000, 1825.000) = 1 
    [1825.000, 1850.000) = 0 
    [1850.000, 1875.000) = 2 
    [1875.000, 1900.000) = 11 
    [1900.000, 1925.000) = 2 
    [1925.000, 1950.000) = 6 
    [1950.000, 1975.000) = 12 
    [1975.000, 2000.000) = 13 
    [2000.000, 2025.000) = 18 
    [2025.000, 2050.000) = 19 
    [2050.000, 2075.000) = 10 
    [2075.000, 2100.000) = 13 
    [2100.000, 2125.000) = 12 
    [2125.000, 2150.000) = 6 
    [2150.000, 2175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1818.231 ms/op
     p(50.0000) =   2021.655 ms/op
     p(90.0000) =   2113.510 ms/op
     p(95.0000) =   2127.351 ms/op
     p(99.0000) =   2147.484 ms/op
     p(99.9000) =   2147.484 ms/op
     p(99.9900) =   2147.484 ms/op
     p(99.9990) =   2147.484 ms/op
     p(99.9999) =   2147.484 ms/op
    p(100.0000) =   2147.484 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8)

# Run progress: 85.94% complete, ETA 01:25:05
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2234.725 ±(99.9%) 568.544 ms/op
# Warmup Iteration   2: 2095.474 ±(99.9%) 315.530 ms/op
# Warmup Iteration   3: 2150.839 ±(99.9%) 318.881 ms/op
# Warmup Iteration   4: 2129.029 ±(99.9%) 389.398 ms/op
# Warmup Iteration   5: 2092.119 ±(99.9%) 181.256 ms/op
Iteration   1: 2138.676 ±(99.9%) 229.290 ms/op
                 executeQuery·p0.00:   2042.626 ms/op
                 executeQuery·p0.50:   2145.386 ms/op
                 executeQuery·p0.90:   2202.010 ms/op
                 executeQuery·p0.95:   2202.010 ms/op
                 executeQuery·p0.99:   2202.010 ms/op
                 executeQuery·p0.999:  2202.010 ms/op
                 executeQuery·p0.9999: 2202.010 ms/op
                 executeQuery·p1.00:   2202.010 ms/op

Iteration   2: 2109.735 ±(99.9%) 287.329 ms/op
                 executeQuery·p0.00:   2046.820 ms/op
                 executeQuery·p0.50:   2076.180 ms/op
                 executeQuery·p0.90:   2227.175 ms/op
                 executeQuery·p0.95:   2227.175 ms/op
                 executeQuery·p0.99:   2227.175 ms/op
                 executeQuery·p0.999:  2227.175 ms/op
                 executeQuery·p0.9999: 2227.175 ms/op
                 executeQuery·p1.00:   2227.175 ms/op

Iteration   3: 2139.095 ±(99.9%) 307.978 ms/op
                 executeQuery·p0.00:   2011.169 ms/op
                 executeQuery·p0.50:   2168.455 ms/op
                 executeQuery·p0.90:   2214.593 ms/op
                 executeQuery·p0.95:   2214.593 ms/op
                 executeQuery·p0.99:   2214.593 ms/op
                 executeQuery·p0.999:  2214.593 ms/op
                 executeQuery·p0.9999: 2214.593 ms/op
                 executeQuery·p1.00:   2214.593 ms/op

Iteration   4: 2107.218 ±(99.9%) 366.626 ms/op
                 executeQuery·p0.00:   2013.266 ms/op
                 executeQuery·p0.50:   2097.152 ms/op
                 executeQuery·p0.90:   2260.730 ms/op
                 executeQuery·p0.95:   2260.730 ms/op
                 executeQuery·p0.99:   2260.730 ms/op
                 executeQuery·p0.999:  2260.730 ms/op
                 executeQuery·p0.9999: 2260.730 ms/op
                 executeQuery·p1.00:   2260.730 ms/op

Iteration   5: 2125.254 ±(99.9%) 433.055 ms/op
                 executeQuery·p0.00:   1952.449 ms/op
                 executeQuery·p0.50:   2176.844 ms/op
                 executeQuery·p0.90:   2214.593 ms/op
                 executeQuery·p0.95:   2214.593 ms/op
                 executeQuery·p0.99:   2214.593 ms/op
                 executeQuery·p0.999:  2214.593 ms/op
                 executeQuery·p0.9999: 2214.593 ms/op
                 executeQuery·p1.00:   2214.593 ms/op


# Run progress: 86.25% complete, ETA 01:23:11
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2130.706 ±(99.9%) 489.411 ms/op
# Warmup Iteration   2: 2094.635 ±(99.9%) 339.041 ms/op
# Warmup Iteration   3: 2058.564 ±(99.9%) 86.712 ms/op
# Warmup Iteration   4: 2077.439 ±(99.9%) 361.395 ms/op
# Warmup Iteration   5: 2095.055 ±(99.9%) 307.289 ms/op
Iteration   1: 2098.410 ±(99.9%) 389.490 ms/op
                 executeQuery·p0.00:   1948.254 ms/op
                 executeQuery·p0.50:   2107.638 ms/op
                 executeQuery·p0.90:   2193.621 ms/op
                 executeQuery·p0.95:   2193.621 ms/op
                 executeQuery·p0.99:   2193.621 ms/op
                 executeQuery·p0.999:  2193.621 ms/op
                 executeQuery·p0.9999: 2193.621 ms/op
                 executeQuery·p1.00:   2193.621 ms/op

Iteration   2: 2070.308 ±(99.9%) 57.783 ms/op
                 executeQuery·p0.00:   2044.723 ms/op
                 executeQuery·p0.50:   2076.180 ms/op
                 executeQuery·p0.90:   2082.472 ms/op
                 executeQuery·p0.95:   2082.472 ms/op
                 executeQuery·p0.99:   2082.472 ms/op
                 executeQuery·p0.999:  2082.472 ms/op
                 executeQuery·p0.9999: 2082.472 ms/op
                 executeQuery·p1.00:   2082.472 ms/op

Iteration   3: 2043.045 ±(99.9%) 304.967 ms/op
                 executeQuery·p0.00:   1960.837 ms/op
                 executeQuery·p0.50:   2046.820 ms/op
                 executeQuery·p0.90:   2160.067 ms/op
                 executeQuery·p0.95:   2160.067 ms/op
                 executeQuery·p0.99:   2160.067 ms/op
                 executeQuery·p0.999:  2160.067 ms/op
                 executeQuery·p0.9999: 2160.067 ms/op
                 executeQuery·p1.00:   2160.067 ms/op

Iteration   4: 2046.820 ±(99.9%) 345.358 ms/op
                 executeQuery·p0.00:   1912.603 ms/op
                 executeQuery·p0.50:   2057.306 ms/op
                 executeQuery·p0.90:   2132.804 ms/op
                 executeQuery·p0.95:   2132.804 ms/op
                 executeQuery·p0.99:   2132.804 ms/op
                 executeQuery·p0.999:  2132.804 ms/op
                 executeQuery·p0.9999: 2132.804 ms/op
                 executeQuery·p1.00:   2132.804 ms/op

Iteration   5: 2116.446 ±(99.9%) 261.386 ms/op
                 executeQuery·p0.00:   2034.237 ms/op
                 executeQuery·p0.50:   2111.832 ms/op
                 executeQuery·p0.90:   2222.981 ms/op
                 executeQuery·p0.95:   2222.981 ms/op
                 executeQuery·p0.99:   2222.981 ms/op
                 executeQuery·p0.999:  2222.981 ms/op
                 executeQuery·p0.9999: 2222.981 ms/op
                 executeQuery·p1.00:   2222.981 ms/op


# Run progress: 86.56% complete, ETA 01:21:17
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2174.327 ±(99.9%) 701.011 ms/op
# Warmup Iteration   2: 2073.664 ±(99.9%) 178.884 ms/op
# Warmup Iteration   3: 2140.773 ±(99.9%) 478.748 ms/op
# Warmup Iteration   4: 2029.204 ±(99.9%) 324.104 ms/op
# Warmup Iteration   5: 2056.467 ±(99.9%) 403.753 ms/op
Iteration   1: 2082.472 ±(99.9%) 198.053 ms/op
                 executeQuery·p0.00:   2017.460 ms/op
                 executeQuery·p0.50:   2074.083 ms/op
                 executeQuery·p0.90:   2151.678 ms/op
                 executeQuery·p0.95:   2151.678 ms/op
                 executeQuery·p0.99:   2151.678 ms/op
                 executeQuery·p0.999:  2151.678 ms/op
                 executeQuery·p0.9999: 2151.678 ms/op
                 executeQuery·p1.00:   2151.678 ms/op

Iteration   2: 2104.702 ±(99.9%) 171.267 ms/op
                 executeQuery·p0.00:   2032.140 ms/op
                 executeQuery·p0.50:   2118.124 ms/op
                 executeQuery·p0.90:   2141.192 ms/op
                 executeQuery·p0.95:   2141.192 ms/op
                 executeQuery·p0.99:   2141.192 ms/op
                 executeQuery·p0.999:  2141.192 ms/op
                 executeQuery·p0.9999: 2141.192 ms/op
                 executeQuery·p1.00:   2141.192 ms/op

Iteration   3: 2077.019 ±(99.9%) 339.819 ms/op
                 executeQuery·p0.00:   1977.614 ms/op
                 executeQuery·p0.50:   2111.832 ms/op
                 executeQuery·p0.90:   2185.232 ms/op
                 executeQuery·p0.95:   2185.232 ms/op
                 executeQuery·p0.99:   2185.232 ms/op
                 executeQuery·p0.999:  2185.232 ms/op
                 executeQuery·p0.9999: 2185.232 ms/op
                 executeQuery·p1.00:   2185.232 ms/op

Iteration   4: 2121.898 ±(99.9%) 259.947 ms/op
                 executeQuery·p0.00:   2027.946 ms/op
                 executeQuery·p0.50:   2143.289 ms/op
                 executeQuery·p0.90:   2197.815 ms/op
                 executeQuery·p0.95:   2197.815 ms/op
                 executeQuery·p0.99:   2197.815 ms/op
                 executeQuery·p0.999:  2197.815 ms/op
                 executeQuery·p0.9999: 2197.815 ms/op
                 executeQuery·p1.00:   2197.815 ms/op

Iteration   5: 2073.244 ±(99.9%) 285.142 ms/op
                 executeQuery·p0.00:   1981.809 ms/op
                 executeQuery·p0.50:   2084.569 ms/op
                 executeQuery·p0.90:   2147.484 ms/op
                 executeQuery·p0.95:   2147.484 ms/op
                 executeQuery·p0.99:   2147.484 ms/op
                 executeQuery·p0.999:  2147.484 ms/op
                 executeQuery·p0.9999: 2147.484 ms/op
                 executeQuery·p1.00:   2147.484 ms/op


# Run progress: 86.88% complete, ETA 01:19:23
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2213.754 ±(99.9%) 634.023 ms/op
# Warmup Iteration   2: 2103.443 ±(99.9%) 289.027 ms/op
# Warmup Iteration   3: 2076.600 ±(99.9%) 276.775 ms/op
# Warmup Iteration   4: 2053.531 ±(99.9%) 142.342 ms/op
# Warmup Iteration   5: 2078.697 ±(99.9%) 324.948 ms/op
Iteration   1: 2093.377 ±(99.9%) 311.212 ms/op
                 executeQuery·p0.00:   1962.934 ms/op
                 executeQuery·p0.50:   2099.249 ms/op
                 executeQuery·p0.90:   2176.844 ms/op
                 executeQuery·p0.95:   2176.844 ms/op
                 executeQuery·p0.99:   2176.844 ms/op
                 executeQuery·p0.999:  2176.844 ms/op
                 executeQuery·p0.9999: 2176.844 ms/op
                 executeQuery·p1.00:   2176.844 ms/op

Iteration   2: 2058.984 ±(99.9%) 216.414 ms/op
                 executeQuery·p0.00:   1971.323 ms/op
                 executeQuery·p0.50:   2080.375 ms/op
                 executeQuery·p0.90:   2118.124 ms/op
                 executeQuery·p0.95:   2118.124 ms/op
                 executeQuery·p0.99:   2118.124 ms/op
                 executeQuery·p0.999:  2118.124 ms/op
                 executeQuery·p0.9999: 2118.124 ms/op
                 executeQuery·p1.00:   2118.124 ms/op

Iteration   3: 2082.891 ±(99.9%) 233.657 ms/op
                 executeQuery·p0.00:   2013.266 ms/op
                 executeQuery·p0.50:   2059.403 ms/op
                 executeQuery·p0.90:   2168.455 ms/op
                 executeQuery·p0.95:   2168.455 ms/op
                 executeQuery·p0.99:   2168.455 ms/op
                 executeQuery·p0.999:  2168.455 ms/op
                 executeQuery·p0.9999: 2168.455 ms/op
                 executeQuery·p1.00:   2168.455 ms/op

Iteration   4: 2078.697 ±(99.9%) 489.258 ms/op
                 executeQuery·p0.00:   1933.574 ms/op
                 executeQuery·p0.50:   2128.609 ms/op
                 executeQuery·p0.90:   2206.204 ms/op
                 executeQuery·p0.95:   2206.204 ms/op
                 executeQuery·p0.99:   2206.204 ms/op
                 executeQuery·p0.999:  2206.204 ms/op
                 executeQuery·p0.9999: 2206.204 ms/op
                 executeQuery·p1.00:   2206.204 ms/op

Iteration   5: 2034.237 ±(99.9%) 270.556 ms/op
                 executeQuery·p0.00:   1954.546 ms/op
                 executeQuery·p0.50:   2065.695 ms/op
                 executeQuery·p0.90:   2103.443 ms/op
                 executeQuery·p0.95:   2103.443 ms/op
                 executeQuery·p0.99:   2103.443 ms/op
                 executeQuery·p0.999:  2103.443 ms/op
                 executeQuery·p0.9999: 2103.443 ms/op
                 executeQuery·p1.00:   2103.443 ms/op


# Run progress: 87.19% complete, ETA 01:17:28
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2172.230 ±(99.9%) 484.940 ms/op
# Warmup Iteration   2: 2098.830 ±(99.9%) 350.624 ms/op
# Warmup Iteration   3: 2062.339 ±(99.9%) 493.048 ms/op
# Warmup Iteration   4: 2061.500 ±(99.9%) 261.797 ms/op
# Warmup Iteration   5: 2050.595 ±(99.9%) 274.527 ms/op
Iteration   1: 2049.756 ±(99.9%) 279.775 ms/op
                 executeQuery·p0.00:   1977.614 ms/op
                 executeQuery·p0.50:   2027.946 ms/op
                 executeQuery·p0.90:   2164.261 ms/op
                 executeQuery·p0.95:   2164.261 ms/op
                 executeQuery·p0.99:   2164.261 ms/op
                 executeQuery·p0.999:  2164.261 ms/op
                 executeQuery·p0.9999: 2164.261 ms/op
                 executeQuery·p1.00:   2164.261 ms/op

Iteration   2: 2065.275 ±(99.9%) 218.513 ms/op
                 executeQuery·p0.00:   2002.780 ms/op
                 executeQuery·p0.50:   2078.278 ms/op
                 executeQuery·p0.90:   2141.192 ms/op
                 executeQuery·p0.95:   2141.192 ms/op
                 executeQuery·p0.99:   2141.192 ms/op
                 executeQuery·p0.999:  2141.192 ms/op
                 executeQuery·p0.9999: 2141.192 ms/op
                 executeQuery·p1.00:   2141.192 ms/op

Iteration   3: 2084.569 ±(99.9%) 323.419 ms/op
                 executeQuery·p0.00:   1962.934 ms/op
                 executeQuery·p0.50:   2105.541 ms/op
                 executeQuery·p0.90:   2164.261 ms/op
                 executeQuery·p0.95:   2164.261 ms/op
                 executeQuery·p0.99:   2164.261 ms/op
                 executeQuery·p0.999:  2164.261 ms/op
                 executeQuery·p0.9999: 2164.261 ms/op
                 executeQuery·p1.00:   2164.261 ms/op

Iteration   4: 2040.948 ±(99.9%) 245.098 ms/op
                 executeQuery·p0.00:   1944.060 ms/op
                 executeQuery·p0.50:   2053.112 ms/op
                 executeQuery·p0.90:   2120.221 ms/op
                 executeQuery·p0.95:   2120.221 ms/op
                 executeQuery·p0.99:   2120.221 ms/op
                 executeQuery·p0.999:  2120.221 ms/op
                 executeQuery·p0.9999: 2120.221 ms/op
                 executeQuery·p1.00:   2120.221 ms/op

Iteration   5: 2082.891 ±(99.9%) 280.868 ms/op
                 executeQuery·p0.00:   1965.031 ms/op
                 executeQuery·p0.50:   2088.763 ms/op
                 executeQuery·p0.90:   2164.261 ms/op
                 executeQuery·p0.95:   2164.261 ms/op
                 executeQuery·p0.99:   2164.261 ms/op
                 executeQuery·p0.999:  2164.261 ms/op
                 executeQuery·p0.9999: 2164.261 ms/op
                 executeQuery·p1.00:   2164.261 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 125
  mean =   2085.039 ±(99.9%) 22.716 ms/op

  Histogram, ms/op:
    [1900.000, 1925.000) = 1 
    [1925.000, 1950.000) = 3 
    [1950.000, 1975.000) = 9 
    [1975.000, 2000.000) = 5 
    [2000.000, 2025.000) = 9 
    [2025.000, 2050.000) = 12 
    [2050.000, 2075.000) = 14 
    [2075.000, 2100.000) = 18 
    [2100.000, 2125.000) = 16 
    [2125.000, 2150.000) = 12 
    [2150.000, 2175.000) = 11 
    [2175.000, 2200.000) = 7 
    [2200.000, 2225.000) = 6 
    [2225.000, 2250.000) = 1 
    [2250.000, 2275.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1912.603 ms/op
     p(50.0000) =   2084.569 ms/op
     p(90.0000) =   2185.232 ms/op
     p(95.0000) =   2209.140 ms/op
     p(99.0000) =   2252.006 ms/op
     p(99.9000) =   2260.730 ms/op
     p(99.9900) =   2260.730 ms/op
     p(99.9990) =   2260.730 ms/op
     p(99.9999) =   2260.730 ms/op
    p(100.0000) =   2260.730 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2)

# Run progress: 87.50% complete, ETA 01:15:34
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2456.814 ±(99.9%) 1282.464 ms/op
# Warmup Iteration   2: 2373.976 ±(99.9%) 274.088 ms/op
# Warmup Iteration   3: 2392.431 ±(99.9%) 373.848 ms/op
# Warmup Iteration   4: 2269.957 ±(99.9%) 292.592 ms/op
# Warmup Iteration   5: 2358.877 ±(99.9%) 252.696 ms/op
Iteration   1: 2401.658 ±(99.9%) 247.218 ms/op
                 executeQuery·p0.00:   2327.839 ms/op
                 executeQuery·p0.50:   2411.725 ms/op
                 executeQuery·p0.90:   2491.417 ms/op
                 executeQuery·p0.95:   2491.417 ms/op
                 executeQuery·p0.99:   2491.417 ms/op
                 executeQuery·p0.999:  2491.417 ms/op
                 executeQuery·p0.9999: 2491.417 ms/op
                 executeQuery·p1.00:   2491.417 ms/op

Iteration   2: 2306.867 ±(99.9%) 259.671 ms/op
                 executeQuery·p0.00:   2218.787 ms/op
                 executeQuery·p0.50:   2323.644 ms/op
                 executeQuery·p0.90:   2394.948 ms/op
                 executeQuery·p0.95:   2394.948 ms/op
                 executeQuery·p0.99:   2394.948 ms/op
                 executeQuery·p0.999:  2394.948 ms/op
                 executeQuery·p0.9999: 2394.948 ms/op
                 executeQuery·p1.00:   2394.948 ms/op

Iteration   3: 2376.493 ±(99.9%) 416.583 ms/op
                 executeQuery·p0.00:   2235.564 ms/op
                 executeQuery·p0.50:   2420.113 ms/op
                 executeQuery·p0.90:   2487.222 ms/op
                 executeQuery·p0.95:   2487.222 ms/op
                 executeQuery·p0.99:   2487.222 ms/op
                 executeQuery·p0.999:  2487.222 ms/op
                 executeQuery·p0.9999: 2487.222 ms/op
                 executeQuery·p1.00:   2487.222 ms/op

Iteration   4: 2342.938 ±(99.9%) 216.866 ms/op
                 executeQuery·p0.00:   2252.341 ms/op
                 executeQuery·p0.50:   2353.005 ms/op
                 executeQuery·p0.90:   2407.530 ms/op
                 executeQuery·p0.95:   2407.530 ms/op
                 executeQuery·p0.99:   2407.530 ms/op
                 executeQuery·p0.999:  2407.530 ms/op
                 executeQuery·p0.9999: 2407.530 ms/op
                 executeQuery·p1.00:   2407.530 ms/op

Iteration   5: 2332.033 ±(99.9%) 197.145 ms/op
                 executeQuery·p0.00:   2248.147 ms/op
                 executeQuery·p0.50:   2353.005 ms/op
                 executeQuery·p0.90:   2369.782 ms/op
                 executeQuery·p0.95:   2369.782 ms/op
                 executeQuery·p0.99:   2369.782 ms/op
                 executeQuery·p0.999:  2369.782 ms/op
                 executeQuery·p0.9999: 2369.782 ms/op
                 executeQuery·p1.00:   2369.782 ms/op


# Run progress: 87.81% complete, ETA 01:13:42
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2486.174 ±(99.9%) 1682.804 ms/op
# Warmup Iteration   2: 2405.014 ±(99.9%) 352.294 ms/op
# Warmup Iteration   3: 2424.308 ±(99.9%) 233.210 ms/op
# Warmup Iteration   4: 2358.038 ±(99.9%) 463.248 ms/op
# Warmup Iteration   5: 2405.014 ±(99.9%) 598.625 ms/op
Iteration   1: 2416.758 ±(99.9%) 434.182 ms/op
                 executeQuery·p0.00:   2235.564 ms/op
                 executeQuery·p0.50:   2420.113 ms/op
                 executeQuery·p0.90:   2533.360 ms/op
                 executeQuery·p0.95:   2533.360 ms/op
                 executeQuery·p0.99:   2533.360 ms/op
                 executeQuery·p0.999:  2533.360 ms/op
                 executeQuery·p0.9999: 2533.360 ms/op
                 executeQuery·p1.00:   2533.360 ms/op

Iteration   2: 2359.715 ±(99.9%) 216.565 ms/op
                 executeQuery·p0.00:   2273.313 ms/op
                 executeQuery·p0.50:   2357.199 ms/op
                 executeQuery·p0.90:   2424.308 ms/op
                 executeQuery·p0.95:   2424.308 ms/op
                 executeQuery·p0.99:   2424.308 ms/op
                 executeQuery·p0.999:  2424.308 ms/op
                 executeQuery·p0.9999: 2424.308 ms/op
                 executeQuery·p1.00:   2424.308 ms/op

Iteration   3: 2394.109 ±(99.9%) 397.650 ms/op
                 executeQuery·p0.00:   2222.981 ms/op
                 executeQuery·p0.50:   2403.336 ms/op
                 executeQuery·p0.90:   2487.222 ms/op
                 executeQuery·p0.95:   2487.222 ms/op
                 executeQuery·p0.99:   2487.222 ms/op
                 executeQuery·p0.999:  2487.222 ms/op
                 executeQuery·p0.9999: 2487.222 ms/op
                 executeQuery·p1.00:   2487.222 ms/op

Iteration   4: 2389.076 ±(99.9%) 428.011 ms/op
                 executeQuery·p0.00:   2273.313 ms/op
                 executeQuery·p0.50:   2365.587 ms/op
                 executeQuery·p0.90:   2537.554 ms/op
                 executeQuery·p0.95:   2537.554 ms/op
                 executeQuery·p0.99:   2537.554 ms/op
                 executeQuery·p0.999:  2537.554 ms/op
                 executeQuery·p0.9999: 2537.554 ms/op
                 executeQuery·p1.00:   2537.554 ms/op

Iteration   5: 2380.687 ±(99.9%) 270.881 ms/op
                 executeQuery·p0.00:   2269.118 ms/op
                 executeQuery·p0.50:   2378.170 ms/op
                 executeQuery·p0.90:   2441.085 ms/op
                 executeQuery·p0.95:   2441.085 ms/op
                 executeQuery·p0.99:   2441.085 ms/op
                 executeQuery·p0.999:  2441.085 ms/op
                 executeQuery·p0.9999: 2441.085 ms/op
                 executeQuery·p1.00:   2441.085 ms/op


# Run progress: 88.13% complete, ETA 01:11:49
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2490.368 ±(99.9%) 1199.798 ms/op
# Warmup Iteration   2: 2415.919 ±(99.9%) 213.349 ms/op
# Warmup Iteration   3: 2308.964 ±(99.9%) 435.322 ms/op
# Warmup Iteration   4: 2282.121 ±(99.9%) 360.347 ms/op
# Warmup Iteration   5: 2385.720 ±(99.9%) 446.182 ms/op
Iteration   1: 2279.185 ±(99.9%) 418.925 ms/op
                 executeQuery·p0.00:   2164.261 ms/op
                 executeQuery·p0.50:   2277.507 ms/op
                 executeQuery·p0.90:   2441.085 ms/op
                 executeQuery·p0.95:   2441.085 ms/op
                 executeQuery·p0.99:   2441.085 ms/op
                 executeQuery·p0.999:  2441.085 ms/op
                 executeQuery·p0.9999: 2441.085 ms/op
                 executeQuery·p1.00:   2441.085 ms/op

Iteration   2: 2339.583 ±(99.9%) 233.880 ms/op
                 executeQuery·p0.00:   2252.341 ms/op
                 executeQuery·p0.50:   2340.422 ms/op
                 executeQuery·p0.90:   2415.919 ms/op
                 executeQuery·p0.95:   2415.919 ms/op
                 executeQuery·p0.99:   2415.919 ms/op
                 executeQuery·p0.999:  2415.919 ms/op
                 executeQuery·p0.9999: 2415.919 ms/op
                 executeQuery·p1.00:   2415.919 ms/op

Iteration   3: 2337.905 ±(99.9%) 273.278 ms/op
                 executeQuery·p0.00:   2248.147 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2445.279 ms/op
                 executeQuery·p0.95:   2445.279 ms/op
                 executeQuery·p0.99:   2445.279 ms/op
                 executeQuery·p0.999:  2445.279 ms/op
                 executeQuery·p0.9999: 2445.279 ms/op
                 executeQuery·p1.00:   2445.279 ms/op

Iteration   4: 2342.938 ±(99.9%) 305.074 ms/op
                 executeQuery·p0.00:   2256.536 ms/op
                 executeQuery·p0.50:   2357.199 ms/op
                 executeQuery·p0.90:   2449.474 ms/op
                 executeQuery·p0.95:   2449.474 ms/op
                 executeQuery·p0.99:   2449.474 ms/op
                 executeQuery·p0.999:  2449.474 ms/op
                 executeQuery·p0.9999: 2449.474 ms/op
                 executeQuery·p1.00:   2449.474 ms/op

Iteration   5: 2337.905 ±(99.9%) 394.390 ms/op
                 executeQuery·p0.00:   2185.232 ms/op
                 executeQuery·p0.50:   2361.393 ms/op
                 executeQuery·p0.90:   2449.474 ms/op
                 executeQuery·p0.95:   2449.474 ms/op
                 executeQuery·p0.99:   2449.474 ms/op
                 executeQuery·p0.999:  2449.474 ms/op
                 executeQuery·p0.9999: 2449.474 ms/op
                 executeQuery·p1.00:   2449.474 ms/op


# Run progress: 88.44% complete, ETA 01:09:56
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2532.311 ±(99.9%) 1171.713 ms/op
# Warmup Iteration   2: 2410.047 ±(99.9%) 486.082 ms/op
# Warmup Iteration   3: 2415.919 ±(99.9%) 410.020 ms/op
# Warmup Iteration   4: 2405.853 ±(99.9%) 273.992 ms/op
# Warmup Iteration   5: 2368.104 ±(99.9%) 235.325 ms/op
Iteration   1: 2398.303 ±(99.9%) 313.882 ms/op
                 executeQuery·p0.00:   2281.701 ms/op
                 executeQuery·p0.50:   2403.336 ms/op
                 executeQuery·p0.90:   2508.194 ms/op
                 executeQuery·p0.95:   2508.194 ms/op
                 executeQuery·p0.99:   2508.194 ms/op
                 executeQuery·p0.999:  2508.194 ms/op
                 executeQuery·p0.9999: 2508.194 ms/op
                 executeQuery·p1.00:   2508.194 ms/op

Iteration   2: 2391.592 ±(99.9%) 262.518 ms/op
                 executeQuery·p0.00:   2323.644 ms/op
                 executeQuery·p0.50:   2378.170 ms/op
                 executeQuery·p0.90:   2474.639 ms/op
                 executeQuery·p0.95:   2474.639 ms/op
                 executeQuery·p0.99:   2474.639 ms/op
                 executeQuery·p0.999:  2474.639 ms/op
                 executeQuery·p0.9999: 2474.639 ms/op
                 executeQuery·p1.00:   2474.639 ms/op

Iteration   3: 2427.663 ±(99.9%) 181.795 ms/op
                 executeQuery·p0.00:   2386.559 ms/op
                 executeQuery·p0.50:   2424.308 ms/op
                 executeQuery·p0.90:   2503.999 ms/op
                 executeQuery·p0.95:   2503.999 ms/op
                 executeQuery·p0.99:   2503.999 ms/op
                 executeQuery·p0.999:  2503.999 ms/op
                 executeQuery·p0.9999: 2503.999 ms/op
                 executeQuery·p1.00:   2503.999 ms/op

Iteration   4: 2409.208 ±(99.9%) 262.071 ms/op
                 executeQuery·p0.00:   2311.062 ms/op
                 executeQuery·p0.50:   2403.336 ms/op
                 executeQuery·p0.90:   2499.805 ms/op
                 executeQuery·p0.95:   2499.805 ms/op
                 executeQuery·p0.99:   2499.805 ms/op
                 executeQuery·p0.999:  2499.805 ms/op
                 executeQuery·p0.9999: 2499.805 ms/op
                 executeQuery·p1.00:   2499.805 ms/op

Iteration   5: 2421.791 ±(99.9%) 213.838 ms/op
                 executeQuery·p0.00:   2353.005 ms/op
                 executeQuery·p0.50:   2420.113 ms/op
                 executeQuery·p0.90:   2478.834 ms/op
                 executeQuery·p0.95:   2478.834 ms/op
                 executeQuery·p0.99:   2478.834 ms/op
                 executeQuery·p0.999:  2478.834 ms/op
                 executeQuery·p0.9999: 2478.834 ms/op
                 executeQuery·p1.00:   2478.834 ms/op


# Run progress: 88.75% complete, ETA 01:08:04
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2511.340 ±(99.9%) 1297.271 ms/op
# Warmup Iteration   2: 2342.099 ±(99.9%) 311.840 ms/op
# Warmup Iteration   3: 2390.753 ±(99.9%) 399.711 ms/op
# Warmup Iteration   4: 2307.706 ±(99.9%) 119.450 ms/op
# Warmup Iteration   5: 2382.365 ±(99.9%) 597.688 ms/op
Iteration   1: 2350.488 ±(99.9%) 371.222 ms/op
                 executeQuery·p0.00:   2214.593 ms/op
                 executeQuery·p0.50:   2348.810 ms/op
                 executeQuery·p0.90:   2466.251 ms/op
                 executeQuery·p0.95:   2466.251 ms/op
                 executeQuery·p0.99:   2466.251 ms/op
                 executeQuery·p0.999:  2466.251 ms/op
                 executeQuery·p0.9999: 2466.251 ms/op
                 executeQuery·p1.00:   2466.251 ms/op

Iteration   2: 2367.265 ±(99.9%) 233.935 ms/op
                 executeQuery·p0.00:   2323.644 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2462.056 ms/op
                 executeQuery·p0.95:   2462.056 ms/op
                 executeQuery·p0.99:   2462.056 ms/op
                 executeQuery·p0.999:  2462.056 ms/op
                 executeQuery·p0.9999: 2462.056 ms/op
                 executeQuery·p1.00:   2462.056 ms/op

Iteration   3: 2368.104 ±(99.9%) 137.329 ms/op
                 executeQuery·p0.00:   2340.422 ms/op
                 executeQuery·p0.50:   2344.616 ms/op
                 executeQuery·p0.90:   2420.113 ms/op
                 executeQuery·p0.95:   2420.113 ms/op
                 executeQuery·p0.99:   2420.113 ms/op
                 executeQuery·p0.999:  2420.113 ms/op
                 executeQuery·p0.9999: 2420.113 ms/op
                 executeQuery·p1.00:   2420.113 ms/op

Iteration   4: 2406.692 ±(99.9%) 307.586 ms/op
                 executeQuery·p0.00:   2311.062 ms/op
                 executeQuery·p0.50:   2411.725 ms/op
                 executeQuery·p0.90:   2524.971 ms/op
                 executeQuery·p0.95:   2524.971 ms/op
                 executeQuery·p0.99:   2524.971 ms/op
                 executeQuery·p0.999:  2524.971 ms/op
                 executeQuery·p0.9999: 2524.971 ms/op
                 executeQuery·p1.00:   2524.971 ms/op

Iteration   5: 2372.298 ±(99.9%) 346.132 ms/op
                 executeQuery·p0.00:   2256.536 ms/op
                 executeQuery·p0.50:   2394.948 ms/op
                 executeQuery·p0.90:   2466.251 ms/op
                 executeQuery·p0.95:   2466.251 ms/op
                 executeQuery·p0.99:   2466.251 ms/op
                 executeQuery·p0.999:  2466.251 ms/op
                 executeQuery·p0.9999: 2466.251 ms/op
                 executeQuery·p1.00:   2466.251 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 125
  mean =   2370.050 ±(99.9%) 24.133 ms/op

  Histogram, ms/op:
    [2100.000, 2150.000) = 0 
    [2150.000, 2200.000) = 3 
    [2200.000, 2250.000) = 7 
    [2250.000, 2300.000) = 13 
    [2300.000, 2350.000) = 25 
    [2350.000, 2400.000) = 30 
    [2400.000, 2450.000) = 29 
    [2450.000, 2500.000) = 13 
    [2500.000, 2550.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =   2164.261 ms/op
     p(50.0000) =   2373.976 ms/op
     p(90.0000) =   2474.639 ms/op
     p(95.0000) =   2497.289 ms/op
     p(99.0000) =   2536.463 ms/op
     p(99.9000) =   2537.554 ms/op
     p(99.9900) =   2537.554 ms/op
     p(99.9990) =   2537.554 ms/op
     p(99.9999) =   2537.554 ms/op
    p(100.0000) =   2537.554 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4)

# Run progress: 89.06% complete, ETA 01:06:11
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2559.574 ±(99.9%) 1232.417 ms/op
# Warmup Iteration   2: 2475.478 ±(99.9%) 395.348 ms/op
# Warmup Iteration   3: 2472.542 ±(99.9%) 750.626 ms/op
# Warmup Iteration   4: 2415.080 ±(99.9%) 190.894 ms/op
# Warmup Iteration   5: 2509.242 ±(99.9%) 94.862 ms/op
Iteration   1: 2484.077 ±(99.9%) 277.618 ms/op
                 executeQuery·p0.00:   2432.696 ms/op
                 executeQuery·p0.50:   2483.028 ms/op
                 executeQuery·p0.90:   2537.554 ms/op
                 executeQuery·p0.95:   2537.554 ms/op
                 executeQuery·p0.99:   2537.554 ms/op
                 executeQuery·p0.999:  2537.554 ms/op
                 executeQuery·p0.9999: 2537.554 ms/op
                 executeQuery·p1.00:   2537.554 ms/op

Iteration   2: 2480.931 ±(99.9%) 706.254 ms/op
                 executeQuery·p0.00:   2319.450 ms/op
                 executeQuery·p0.50:   2522.874 ms/op
                 executeQuery·p0.90:   2558.525 ms/op
                 executeQuery·p0.95:   2558.525 ms/op
                 executeQuery·p0.99:   2558.525 ms/op
                 executeQuery·p0.999:  2558.525 ms/op
                 executeQuery·p0.9999: 2558.525 ms/op
                 executeQuery·p1.00:   2558.525 ms/op

Iteration   3: 2446.118 ±(99.9%) 296.797 ms/op
                 executeQuery·p0.00:   2357.199 ms/op
                 executeQuery·p0.50:   2441.085 ms/op
                 executeQuery·p0.90:   2566.914 ms/op
                 executeQuery·p0.95:   2566.914 ms/op
                 executeQuery·p0.99:   2566.914 ms/op
                 executeQuery·p0.999:  2566.914 ms/op
                 executeQuery·p0.9999: 2566.914 ms/op
                 executeQuery·p1.00:   2566.914 ms/op

Iteration   4: 2467.928 ±(99.9%) 332.486 ms/op
                 executeQuery·p0.00:   2344.616 ms/op
                 executeQuery·p0.50:   2508.194 ms/op
                 executeQuery·p0.90:   2545.943 ms/op
                 executeQuery·p0.95:   2545.943 ms/op
                 executeQuery·p0.99:   2545.943 ms/op
                 executeQuery·p0.999:  2545.943 ms/op
                 executeQuery·p0.9999: 2545.943 ms/op
                 executeQuery·p1.00:   2545.943 ms/op

Iteration   5: 2496.659 ±(99.9%) 302.926 ms/op
                 executeQuery·p0.00:   2432.696 ms/op
                 executeQuery·p0.50:   2508.194 ms/op
                 executeQuery·p0.90:   2537.554 ms/op
                 executeQuery·p0.95:   2537.554 ms/op
                 executeQuery·p0.99:   2537.554 ms/op
                 executeQuery·p0.999:  2537.554 ms/op
                 executeQuery·p0.9999: 2537.554 ms/op
                 executeQuery·p1.00:   2537.554 ms/op


# Run progress: 89.38% complete, ETA 01:04:18
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2626.683 ±(99.9%) 1118.685 ms/op
# Warmup Iteration   2: 2497.708 ±(99.9%) 226.224 ms/op
# Warmup Iteration   3: 2492.465 ±(99.9%) 323.260 ms/op
# Warmup Iteration   4: 2480.931 ±(99.9%) 354.425 ms/op
# Warmup Iteration   5: 2431.019 ±(99.9%) 161.750 ms/op
Iteration   1: 2488.271 ±(99.9%) 589.411 ms/op
                 executeQuery·p0.00:   2390.753 ms/op
                 executeQuery·p0.50:   2485.125 ms/op
                 executeQuery·p0.90:   2592.080 ms/op
                 executeQuery·p0.95:   2592.080 ms/op
                 executeQuery·p0.99:   2592.080 ms/op
                 executeQuery·p0.999:  2592.080 ms/op
                 executeQuery·p0.9999: 2592.080 ms/op
                 executeQuery·p1.00:   2592.080 ms/op

Iteration   2: 2506.097 ±(99.9%) 820.451 ms/op
                 executeQuery·p0.00:   2353.005 ms/op
                 executeQuery·p0.50:   2506.097 ms/op
                 executeQuery·p0.90:   2659.189 ms/op
                 executeQuery·p0.95:   2659.189 ms/op
                 executeQuery·p0.99:   2659.189 ms/op
                 executeQuery·p0.999:  2659.189 ms/op
                 executeQuery·p0.9999: 2659.189 ms/op
                 executeQuery·p1.00:   2659.189 ms/op

Iteration   3: 2475.688 ±(99.9%) 802.306 ms/op
                 executeQuery·p0.00:   2336.227 ms/op
                 executeQuery·p0.50:   2470.445 ms/op
                 executeQuery·p0.90:   2625.634 ms/op
                 executeQuery·p0.95:   2625.634 ms/op
                 executeQuery·p0.99:   2625.634 ms/op
                 executeQuery·p0.999:  2625.634 ms/op
                 executeQuery·p0.9999: 2625.634 ms/op
                 executeQuery·p1.00:   2625.634 ms/op

Iteration   4: 2477.156 ±(99.9%) 307.629 ms/op
                 executeQuery·p0.00:   2340.422 ms/op
                 executeQuery·p0.50:   2499.805 ms/op
                 executeQuery·p0.90:   2533.360 ms/op
                 executeQuery·p0.95:   2533.360 ms/op
                 executeQuery·p0.99:   2533.360 ms/op
                 executeQuery·p0.999:  2533.360 ms/op
                 executeQuery·p0.9999: 2533.360 ms/op
                 executeQuery·p1.00:   2533.360 ms/op

Iteration   5: 2472.542 ±(99.9%) 129.984 ms/op
                 executeQuery·p0.00:   2449.474 ms/op
                 executeQuery·p0.50:   2474.639 ms/op
                 executeQuery·p0.90:   2491.417 ms/op
                 executeQuery·p0.95:   2491.417 ms/op
                 executeQuery·p0.99:   2491.417 ms/op
                 executeQuery·p0.999:  2491.417 ms/op
                 executeQuery·p0.9999: 2491.417 ms/op
                 executeQuery·p1.00:   2491.417 ms/op


# Run progress: 89.69% complete, ETA 01:02:24
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2528.117 ±(99.9%) 1626.420 ms/op
# Warmup Iteration   2: 2477.785 ±(99.9%) 259.379 ms/op
# Warmup Iteration   3: 2443.602 ±(99.9%) 161.346 ms/op
# Warmup Iteration   4: 2447.796 ±(99.9%) 317.024 ms/op
# Warmup Iteration   5: 2462.056 ±(99.9%) 607.535 ms/op
Iteration   1: 2419.275 ±(99.9%) 206.957 ms/op
                 executeQuery·p0.00:   2369.782 ms/op
                 executeQuery·p0.50:   2399.142 ms/op
                 executeQuery·p0.90:   2495.611 ms/op
                 executeQuery·p0.95:   2495.611 ms/op
                 executeQuery·p0.99:   2495.611 ms/op
                 executeQuery·p0.999:  2495.611 ms/op
                 executeQuery·p0.9999: 2495.611 ms/op
                 executeQuery·p1.00:   2495.611 ms/op

Iteration   2: 2447.796 ±(99.9%) 195.351 ms/op
                 executeQuery·p0.00:   2365.587 ms/op
                 executeQuery·p0.50:   2449.474 ms/op
                 executeQuery·p0.90:   2495.611 ms/op
                 executeQuery·p0.95:   2495.611 ms/op
                 executeQuery·p0.99:   2495.611 ms/op
                 executeQuery·p0.999:  2495.611 ms/op
                 executeQuery·p0.9999: 2495.611 ms/op
                 executeQuery·p1.00:   2495.611 ms/op

Iteration   3: 2446.118 ±(99.9%) 371.362 ms/op
                 executeQuery·p0.00:   2332.033 ms/op
                 executeQuery·p0.50:   2436.891 ms/op
                 executeQuery·p0.90:   2592.080 ms/op
                 executeQuery·p0.95:   2592.080 ms/op
                 executeQuery·p0.99:   2592.080 ms/op
                 executeQuery·p0.999:  2592.080 ms/op
                 executeQuery·p0.9999: 2592.080 ms/op
                 executeQuery·p1.00:   2592.080 ms/op

Iteration   4: 2455.765 ±(99.9%) 560.504 ms/op
                 executeQuery·p0.00:   2340.422 ms/op
                 executeQuery·p0.50:   2466.251 ms/op
                 executeQuery·p0.90:   2550.137 ms/op
                 executeQuery·p0.95:   2550.137 ms/op
                 executeQuery·p0.99:   2550.137 ms/op
                 executeQuery·p0.999:  2550.137 ms/op
                 executeQuery·p0.9999: 2550.137 ms/op
                 executeQuery·p1.00:   2550.137 ms/op

Iteration   5: 2415.919 ±(99.9%) 253.829 ms/op
                 executeQuery·p0.00:   2361.393 ms/op
                 executeQuery·p0.50:   2394.948 ms/op
                 executeQuery·p0.90:   2516.582 ms/op
                 executeQuery·p0.95:   2516.582 ms/op
                 executeQuery·p0.99:   2516.582 ms/op
                 executeQuery·p0.999:  2516.582 ms/op
                 executeQuery·p0.9999: 2516.582 ms/op
                 executeQuery·p1.00:   2516.582 ms/op


# Run progress: 90.00% complete, ETA 01:00:31
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2571.108 ±(99.9%) 1274.347 ms/op
# Warmup Iteration   2: 2443.602 ±(99.9%) 166.125 ms/op
# Warmup Iteration   3: 2508.194 ±(99.9%) 623.185 ms/op
# Warmup Iteration   4: 2473.591 ±(99.9%) 365.898 ms/op
# Warmup Iteration   5: 2461.008 ±(99.9%) 399.184 ms/op
Iteration   1: 2442.763 ±(99.9%) 435.562 ms/op
                 executeQuery·p0.00:   2273.313 ms/op
                 executeQuery·p0.50:   2466.251 ms/op
                 executeQuery·p0.90:   2575.303 ms/op
                 executeQuery·p0.95:   2575.303 ms/op
                 executeQuery·p0.99:   2575.303 ms/op
                 executeQuery·p0.999:  2575.303 ms/op
                 executeQuery·p0.9999: 2575.303 ms/op
                 executeQuery·p1.00:   2575.303 ms/op

Iteration   2: 2447.796 ±(99.9%) 371.222 ms/op
                 executeQuery·p0.00:   2290.090 ms/op
                 executeQuery·p0.50:   2466.251 ms/op
                 executeQuery·p0.90:   2554.331 ms/op
                 executeQuery·p0.95:   2554.331 ms/op
                 executeQuery·p0.99:   2554.331 ms/op
                 executeQuery·p0.999:  2554.331 ms/op
                 executeQuery·p0.9999: 2554.331 ms/op
                 executeQuery·p1.00:   2554.331 ms/op

Iteration   3: 2443.602 ±(99.9%) 164.548 ms/op
                 executeQuery·p0.00:   2399.142 ms/op
                 executeQuery·p0.50:   2424.308 ms/op
                 executeQuery·p0.90:   2491.417 ms/op
                 executeQuery·p0.95:   2491.417 ms/op
                 executeQuery·p0.99:   2491.417 ms/op
                 executeQuery·p0.999:  2491.417 ms/op
                 executeQuery·p0.9999: 2491.417 ms/op
                 executeQuery·p1.00:   2491.417 ms/op

Iteration   4: 2468.348 ±(99.9%) 407.155 ms/op
                 executeQuery·p0.00:   2411.725 ms/op
                 executeQuery·p0.50:   2459.959 ms/op
                 executeQuery·p0.90:   2541.748 ms/op
                 executeQuery·p0.95:   2541.748 ms/op
                 executeQuery·p0.99:   2541.748 ms/op
                 executeQuery·p0.999:  2541.748 ms/op
                 executeQuery·p0.9999: 2541.748 ms/op
                 executeQuery·p1.00:   2541.748 ms/op

Iteration   5: 2470.445 ±(99.9%) 279.506 ms/op
                 executeQuery·p0.00:   2353.005 ms/op
                 executeQuery·p0.50:   2503.999 ms/op
                 executeQuery·p0.90:   2533.360 ms/op
                 executeQuery·p0.95:   2533.360 ms/op
                 executeQuery·p0.99:   2533.360 ms/op
                 executeQuery·p0.999:  2533.360 ms/op
                 executeQuery·p0.9999: 2533.360 ms/op
                 executeQuery·p1.00:   2533.360 ms/op


# Run progress: 90.31% complete, ETA 00:58:38
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2562.720 ±(99.9%) 1198.292 ms/op
# Warmup Iteration   2: 2441.085 ±(99.9%) 317.107 ms/op
# Warmup Iteration   3: 2470.445 ±(99.9%) 206.414 ms/op
# Warmup Iteration   4: 2486.174 ±(99.9%) 279.377 ms/op
# Warmup Iteration   5: 2424.308 ±(99.9%) 117.023 ms/op
Iteration   1: 2391.592 ±(99.9%) 238.846 ms/op
                 executeQuery·p0.00:   2311.062 ms/op
                 executeQuery·p0.50:   2424.308 ms/op
                 executeQuery·p0.90:   2453.668 ms/op
                 executeQuery·p0.95:   2453.668 ms/op
                 executeQuery·p0.99:   2453.668 ms/op
                 executeQuery·p0.999:  2453.668 ms/op
                 executeQuery·p0.9999: 2453.668 ms/op
                 executeQuery·p1.00:   2453.668 ms/op

Iteration   2: 2500.854 ±(99.9%) 219.494 ms/op
                 executeQuery·p0.00:   2474.639 ms/op
                 executeQuery·p0.50:   2489.319 ms/op
                 executeQuery·p0.90:   2550.137 ms/op
                 executeQuery·p0.95:   2550.137 ms/op
                 executeQuery·p0.99:   2550.137 ms/op
                 executeQuery·p0.999:  2550.137 ms/op
                 executeQuery·p0.9999: 2550.137 ms/op
                 executeQuery·p1.00:   2550.137 ms/op

Iteration   3: 2475.688 ±(99.9%) 837.254 ms/op
                 executeQuery·p0.00:   2319.450 ms/op
                 executeQuery·p0.50:   2474.639 ms/op
                 executeQuery·p0.90:   2634.023 ms/op
                 executeQuery·p0.95:   2634.023 ms/op
                 executeQuery·p0.99:   2634.023 ms/op
                 executeQuery·p0.999:  2634.023 ms/op
                 executeQuery·p0.9999: 2634.023 ms/op
                 executeQuery·p1.00:   2634.023 ms/op

Iteration   4: 2431.857 ±(99.9%) 235.547 ms/op
                 executeQuery·p0.00:   2353.005 ms/op
                 executeQuery·p0.50:   2436.891 ms/op
                 executeQuery·p0.90:   2503.999 ms/op
                 executeQuery·p0.95:   2503.999 ms/op
                 executeQuery·p0.99:   2503.999 ms/op
                 executeQuery·p0.999:  2503.999 ms/op
                 executeQuery·p0.9999: 2503.999 ms/op
                 executeQuery·p1.00:   2503.999 ms/op

Iteration   5: 2502.322 ±(99.9%) 339.282 ms/op
                 executeQuery·p0.00:   2424.308 ms/op
                 executeQuery·p0.50:   2478.834 ms/op
                 executeQuery·p0.90:   2650.800 ms/op
                 executeQuery·p0.95:   2650.800 ms/op
                 executeQuery·p0.99:   2650.800 ms/op
                 executeQuery·p0.999:  2650.800 ms/op
                 executeQuery·p0.9999: 2650.800 ms/op
                 executeQuery·p1.00:   2650.800 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 114
  mean =   2460.290 ±(99.9%) 24.627 ms/op

  Histogram, ms/op:
    [2200.000, 2250.000) = 0 
    [2250.000, 2300.000) = 2 
    [2300.000, 2350.000) = 9 
    [2350.000, 2400.000) = 15 
    [2400.000, 2450.000) = 22 
    [2450.000, 2500.000) = 34 
    [2500.000, 2550.000) = 20 
    [2550.000, 2600.000) = 8 
    [2600.000, 2650.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   2273.313 ms/op
     p(50.0000) =   2466.251 ms/op
     p(90.0000) =   2550.137 ms/op
     p(95.0000) =   2592.080 ms/op
     p(99.0000) =   2657.930 ms/op
     p(99.9000) =   2659.189 ms/op
     p(99.9900) =   2659.189 ms/op
     p(99.9990) =   2659.189 ms/op
     p(99.9999) =   2659.189 ms/op
    p(100.0000) =   2659.189 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6)

# Run progress: 90.63% complete, ETA 00:56:44
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2654.994 ±(99.9%) 1787.328 ms/op
# Warmup Iteration   2: 2601.517 ±(99.9%) 386.087 ms/op
# Warmup Iteration   3: 2527.068 ±(99.9%) 240.902 ms/op
# Warmup Iteration   4: 2555.380 ±(99.9%) 592.312 ms/op
# Warmup Iteration   5: 2588.934 ±(99.9%) 273.173 ms/op
Iteration   1: 2594.177 ±(99.9%) 401.706 ms/op
                 executeQuery·p0.00:   2516.582 ms/op
                 executeQuery·p0.50:   2600.468 ms/op
                 executeQuery·p0.90:   2659.189 ms/op
                 executeQuery·p0.95:   2659.189 ms/op
                 executeQuery·p0.99:   2659.189 ms/op
                 executeQuery·p0.999:  2659.189 ms/op
                 executeQuery·p0.9999: 2659.189 ms/op
                 executeQuery·p1.00:   2659.189 ms/op

Iteration   2: 2556.428 ±(99.9%) 734.134 ms/op
                 executeQuery·p0.00:   2411.725 ms/op
                 executeQuery·p0.50:   2569.011 ms/op
                 executeQuery·p0.90:   2675.966 ms/op
                 executeQuery·p0.95:   2675.966 ms/op
                 executeQuery·p0.99:   2675.966 ms/op
                 executeQuery·p0.999:  2675.966 ms/op
                 executeQuery·p0.9999: 2675.966 ms/op
                 executeQuery·p1.00:   2675.966 ms/op

Iteration   3: 2522.874 ±(99.9%) 603.016 ms/op
                 executeQuery·p0.00:   2415.919 ms/op
                 executeQuery·p0.50:   2516.582 ms/op
                 executeQuery·p0.90:   2642.412 ms/op
                 executeQuery·p0.95:   2642.412 ms/op
                 executeQuery·p0.99:   2642.412 ms/op
                 executeQuery·p0.999:  2642.412 ms/op
                 executeQuery·p0.9999: 2642.412 ms/op
                 executeQuery·p1.00:   2642.412 ms/op

Iteration   4: 2544.894 ±(99.9%) 757.406 ms/op
                 executeQuery·p0.00:   2415.919 ms/op
                 executeQuery·p0.50:   2543.845 ms/op
                 executeQuery·p0.90:   2675.966 ms/op
                 executeQuery·p0.95:   2675.966 ms/op
                 executeQuery·p0.99:   2675.966 ms/op
                 executeQuery·p0.999:  2675.966 ms/op
                 executeQuery·p0.9999: 2675.966 ms/op
                 executeQuery·p1.00:   2675.966 ms/op

Iteration   5: 2597.323 ±(99.9%) 339.516 ms/op
                 executeQuery·p0.00:   2550.137 ms/op
                 executeQuery·p0.50:   2594.177 ms/op
                 executeQuery·p0.90:   2650.800 ms/op
                 executeQuery·p0.95:   2650.800 ms/op
                 executeQuery·p0.99:   2650.800 ms/op
                 executeQuery·p0.999:  2650.800 ms/op
                 executeQuery·p0.9999: 2650.800 ms/op
                 executeQuery·p1.00:   2650.800 ms/op


# Run progress: 90.94% complete, ETA 00:54:50
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2744.123 ±(99.9%) 1026.690 ms/op
# Warmup Iteration   2: 2541.748 ±(99.9%) 220.190 ms/op
# Warmup Iteration   3: 2542.797 ±(99.9%) 611.434 ms/op
# Warmup Iteration   4: 2596.274 ±(99.9%) 719.479 ms/op
# Warmup Iteration   5: 2505.048 ±(99.9%) 321.742 ms/op
Iteration   1: 2575.303 ±(99.9%) 322.976 ms/op
                 executeQuery·p0.00:   2524.971 ms/op
                 executeQuery·p0.50:   2573.206 ms/op
                 executeQuery·p0.90:   2629.829 ms/op
                 executeQuery·p0.95:   2629.829 ms/op
                 executeQuery·p0.99:   2629.829 ms/op
                 executeQuery·p0.999:  2629.829 ms/op
                 executeQuery·p0.9999: 2629.829 ms/op
                 executeQuery·p1.00:   2629.829 ms/op

Iteration   2: 2539.651 ±(99.9%) 709.022 ms/op
                 executeQuery·p0.00:   2415.919 ms/op
                 executeQuery·p0.50:   2552.234 ms/op
                 executeQuery·p0.90:   2638.217 ms/op
                 executeQuery·p0.95:   2638.217 ms/op
                 executeQuery·p0.99:   2638.217 ms/op
                 executeQuery·p0.999:  2638.217 ms/op
                 executeQuery·p0.9999: 2638.217 ms/op
                 executeQuery·p1.00:   2638.217 ms/op

Iteration   3: 2524.971 ±(99.9%) 279.048 ms/op
                 executeQuery·p0.00:   2491.417 ms/op
                 executeQuery·p0.50:   2510.291 ms/op
                 executeQuery·p0.90:   2587.886 ms/op
                 executeQuery·p0.95:   2587.886 ms/op
                 executeQuery·p0.99:   2587.886 ms/op
                 executeQuery·p0.999:  2587.886 ms/op
                 executeQuery·p0.9999: 2587.886 ms/op
                 executeQuery·p1.00:   2587.886 ms/op

Iteration   4: 2551.185 ±(99.9%) 446.661 ms/op
                 executeQuery·p0.00:   2470.445 ms/op
                 executeQuery·p0.50:   2554.331 ms/op
                 executeQuery·p0.90:   2625.634 ms/op
                 executeQuery·p0.95:   2625.634 ms/op
                 executeQuery·p0.99:   2625.634 ms/op
                 executeQuery·p0.999:  2625.634 ms/op
                 executeQuery·p0.9999: 2625.634 ms/op
                 executeQuery·p1.00:   2625.634 ms/op

Iteration   5: 2608.857 ±(99.9%) 387.748 ms/op
                 executeQuery·p0.00:   2545.943 ms/op
                 executeQuery·p0.50:   2602.566 ms/op
                 executeQuery·p0.90:   2684.355 ms/op
                 executeQuery·p0.95:   2684.355 ms/op
                 executeQuery·p0.99:   2684.355 ms/op
                 executeQuery·p0.999:  2684.355 ms/op
                 executeQuery·p0.9999: 2684.355 ms/op
                 executeQuery·p1.00:   2684.355 ms/op


# Run progress: 91.25% complete, ETA 00:52:56
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2643.460 ±(99.9%) 1239.352 ms/op
# Warmup Iteration   2: 2536.505 ±(99.9%) 360.504 ms/op
# Warmup Iteration   3: 2540.700 ±(99.9%) 459.097 ms/op
# Warmup Iteration   4: 2573.206 ±(99.9%) 554.796 ms/op
# Warmup Iteration   5: 2522.874 ±(99.9%) 703.475 ms/op
Iteration   1: 2558.525 ±(99.9%) 411.641 ms/op
                 executeQuery·p0.00:   2495.611 ms/op
                 executeQuery·p0.50:   2545.943 ms/op
                 executeQuery·p0.90:   2646.606 ms/op
                 executeQuery·p0.95:   2646.606 ms/op
                 executeQuery·p0.99:   2646.606 ms/op
                 executeQuery·p0.999:  2646.606 ms/op
                 executeQuery·p0.9999: 2646.606 ms/op
                 executeQuery·p1.00:   2646.606 ms/op

Iteration   2: 2507.145 ±(99.9%) 721.306 ms/op
                 executeQuery·p0.00:   2382.365 ms/op
                 executeQuery·p0.50:   2499.805 ms/op
                 executeQuery·p0.90:   2646.606 ms/op
                 executeQuery·p0.95:   2646.606 ms/op
                 executeQuery·p0.99:   2646.606 ms/op
                 executeQuery·p0.999:  2646.606 ms/op
                 executeQuery·p0.9999: 2646.606 ms/op
                 executeQuery·p1.00:   2646.606 ms/op

Iteration   3: 2582.643 ±(99.9%) 252.684 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2581.594 ms/op
                 executeQuery·p0.90:   2625.634 ms/op
                 executeQuery·p0.95:   2625.634 ms/op
                 executeQuery·p0.99:   2625.634 ms/op
                 executeQuery·p0.999:  2625.634 ms/op
                 executeQuery·p0.9999: 2625.634 ms/op
                 executeQuery·p1.00:   2625.634 ms/op

Iteration   4: 2574.254 ±(99.9%) 429.330 ms/op
                 executeQuery·p0.00:   2508.194 ms/op
                 executeQuery·p0.50:   2566.914 ms/op
                 executeQuery·p0.90:   2654.994 ms/op
                 executeQuery·p0.95:   2654.994 ms/op
                 executeQuery·p0.99:   2654.994 ms/op
                 executeQuery·p0.999:  2654.994 ms/op
                 executeQuery·p0.9999: 2654.994 ms/op
                 executeQuery·p1.00:   2654.994 ms/op

Iteration   5: 2538.602 ±(99.9%) 780.963 ms/op
                 executeQuery·p0.00:   2407.530 ms/op
                 executeQuery·p0.50:   2543.845 ms/op
                 executeQuery·p0.90:   2659.189 ms/op
                 executeQuery·p0.95:   2659.189 ms/op
                 executeQuery·p0.99:   2659.189 ms/op
                 executeQuery·p0.999:  2659.189 ms/op
                 executeQuery·p0.9999: 2659.189 ms/op
                 executeQuery·p1.00:   2659.189 ms/op


# Run progress: 91.56% complete, ETA 00:51:02
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2705.326 ±(99.9%) 1394.889 ms/op
# Warmup Iteration   2: 2610.954 ±(99.9%) 531.810 ms/op
# Warmup Iteration   3: 2586.837 ±(99.9%) 446.112 ms/op
# Warmup Iteration   4: 2543.845 ±(99.9%) 636.212 ms/op
# Warmup Iteration   5: 2539.651 ±(99.9%) 808.122 ms/op
Iteration   1: 2553.283 ±(99.9%) 766.724 ms/op
                 executeQuery·p0.00:   2436.891 ms/op
                 executeQuery·p0.50:   2545.943 ms/op
                 executeQuery·p0.90:   2684.355 ms/op
                 executeQuery·p0.95:   2684.355 ms/op
                 executeQuery·p0.99:   2684.355 ms/op
                 executeQuery·p0.999:  2684.355 ms/op
                 executeQuery·p0.9999: 2684.355 ms/op
                 executeQuery·p1.00:   2684.355 ms/op

Iteration   2: 2546.991 ±(99.9%) 737.421 ms/op
                 executeQuery·p0.00:   2411.725 ms/op
                 executeQuery·p0.50:   2558.525 ms/op
                 executeQuery·p0.90:   2659.189 ms/op
                 executeQuery·p0.95:   2659.189 ms/op
                 executeQuery·p0.99:   2659.189 ms/op
                 executeQuery·p0.999:  2659.189 ms/op
                 executeQuery·p0.9999: 2659.189 ms/op
                 executeQuery·p1.00:   2659.189 ms/op

Iteration   3: 2557.477 ±(99.9%) 354.339 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2545.943 ms/op
                 executeQuery·p0.90:   2634.023 ms/op
                 executeQuery·p0.95:   2634.023 ms/op
                 executeQuery·p0.99:   2634.023 ms/op
                 executeQuery·p0.999:  2634.023 ms/op
                 executeQuery·p0.9999: 2634.023 ms/op
                 executeQuery·p1.00:   2634.023 ms/op

Iteration   4: 2531.262 ±(99.9%) 744.073 ms/op
                 executeQuery·p0.00:   2386.559 ms/op
                 executeQuery·p0.50:   2552.234 ms/op
                 executeQuery·p0.90:   2634.023 ms/op
                 executeQuery·p0.95:   2634.023 ms/op
                 executeQuery·p0.99:   2634.023 ms/op
                 executeQuery·p0.999:  2634.023 ms/op
                 executeQuery·p0.9999: 2634.023 ms/op
                 executeQuery·p1.00:   2634.023 ms/op

Iteration   5: 2531.262 ±(99.9%) 434.503 ms/op
                 executeQuery·p0.00:   2445.279 ms/op
                 executeQuery·p0.50:   2541.748 ms/op
                 executeQuery·p0.90:   2596.274 ms/op
                 executeQuery·p0.95:   2596.274 ms/op
                 executeQuery·p0.99:   2596.274 ms/op
                 executeQuery·p0.999:  2596.274 ms/op
                 executeQuery·p0.9999: 2596.274 ms/op
                 executeQuery·p1.00:   2596.274 ms/op


# Run progress: 91.88% complete, ETA 00:49:08
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2602.566 ±(99.9%) 1483.285 ms/op
# Warmup Iteration   2: 2536.505 ±(99.9%) 397.955 ms/op
# Warmup Iteration   3: 2545.943 ±(99.9%) 574.953 ms/op
# Warmup Iteration   4: 2573.206 ±(99.9%) 609.478 ms/op
# Warmup Iteration   5: 2535.457 ±(99.9%) 665.556 ms/op
Iteration   1: 2528.117 ±(99.9%) 620.577 ms/op
                 executeQuery·p0.00:   2470.445 ms/op
                 executeQuery·p0.50:   2485.125 ms/op
                 executeQuery·p0.90:   2671.772 ms/op
                 executeQuery·p0.95:   2671.772 ms/op
                 executeQuery·p0.99:   2671.772 ms/op
                 executeQuery·p0.999:  2671.772 ms/op
                 executeQuery·p0.9999: 2671.772 ms/op
                 executeQuery·p1.00:   2671.772 ms/op

Iteration   2: 2569.011 ±(99.9%) 781.942 ms/op
                 executeQuery·p0.00:   2428.502 ms/op
                 executeQuery·p0.50:   2564.817 ms/op
                 executeQuery·p0.90:   2717.909 ms/op
                 executeQuery·p0.95:   2717.909 ms/op
                 executeQuery·p0.99:   2717.909 ms/op
                 executeQuery·p0.999:  2717.909 ms/op
                 executeQuery·p0.9999: 2717.909 ms/op
                 executeQuery·p1.00:   2717.909 ms/op

Iteration   3: 2516.582 ±(99.9%) 508.508 ms/op
                 executeQuery·p0.00:   2432.696 ms/op
                 executeQuery·p0.50:   2524.971 ms/op
                 executeQuery·p0.90:   2583.691 ms/op
                 executeQuery·p0.95:   2583.691 ms/op
                 executeQuery·p0.99:   2583.691 ms/op
                 executeQuery·p0.999:  2583.691 ms/op
                 executeQuery·p0.9999: 2583.691 ms/op
                 executeQuery·p1.00:   2583.691 ms/op

Iteration   4: 2595.226 ±(99.9%) 117.882 ms/op
                 executeQuery·p0.00:   2579.497 ms/op
                 executeQuery·p0.50:   2589.983 ms/op
                 executeQuery·p0.90:   2621.440 ms/op
                 executeQuery·p0.95:   2621.440 ms/op
                 executeQuery·p0.99:   2621.440 ms/op
                 executeQuery·p0.999:  2621.440 ms/op
                 executeQuery·p0.9999: 2621.440 ms/op
                 executeQuery·p1.00:   2621.440 ms/op

Iteration   5: 2574.254 ±(99.9%) 455.348 ms/op
                 executeQuery·p0.00:   2495.611 ms/op
                 executeQuery·p0.50:   2569.011 ms/op
                 executeQuery·p0.90:   2663.383 ms/op
                 executeQuery·p0.95:   2663.383 ms/op
                 executeQuery·p0.99:   2663.383 ms/op
                 executeQuery·p0.999:  2663.383 ms/op
                 executeQuery·p0.9999: 2663.383 ms/op
                 executeQuery·p1.00:   2663.383 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 100
  mean =   2555.212 ±(99.9%) 27.142 ms/op

  Histogram, ms/op:
    [2300.000, 2350.000) = 0 
    [2350.000, 2400.000) = 2 
    [2400.000, 2450.000) = 10 
    [2450.000, 2500.000) = 15 
    [2500.000, 2550.000) = 19 
    [2550.000, 2600.000) = 19 
    [2600.000, 2650.000) = 23 
    [2650.000, 2700.000) = 11 
    [2700.000, 2750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2382.365 ms/op
     p(50.0000) =   2554.331 ms/op
     p(90.0000) =   2658.769 ms/op
     p(95.0000) =   2675.756 ms/op
     p(99.0000) =   2717.573 ms/op
     p(99.9000) =   2717.909 ms/op
     p(99.9900) =   2717.909 ms/op
     p(99.9990) =   2717.909 ms/op
     p(99.9999) =   2717.909 ms/op
    p(100.0000) =   2717.909 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 92.19% complete, ETA 00:47:13
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_440187105 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_440187105(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_440187105> join_map = new Int_Multi_Object_Map<JRT_440187105>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_609402041 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_609402041(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_609402041> join_map_0 = new Int_Multi_Object_Map<JRT_609402041>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_609402041 left_join_record = new JRT_609402041(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_609402041> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_609402041 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_440187105 left_join_record_0 = new JRT_440187105(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_440187105> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_440187105 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2694.840 ±(99.9%) 1342.013 ms/op
# Warmup Iteration   2: 2603.614 ±(99.9%) 197.162 ms/op
# Warmup Iteration   3: 2688.549 ±(99.9%) 865.335 ms/op
# Warmup Iteration   4: 2620.391 ±(99.9%) 263.128 ms/op
# Warmup Iteration   5: 2587.886 ±(99.9%) 335.617 ms/op
Iteration   1: 2663.383 ±(99.9%) 498.784 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2654.994 ms/op
                 executeQuery·p0.90:   2755.658 ms/op
                 executeQuery·p0.95:   2755.658 ms/op
                 executeQuery·p0.99:   2755.658 ms/op
                 executeQuery·p0.999:  2755.658 ms/op
                 executeQuery·p0.9999: 2755.658 ms/op
                 executeQuery·p1.00:   2755.658 ms/op

Iteration   2: 2638.217 ±(99.9%) 514.730 ms/op
                 executeQuery·p0.00:   2550.137 ms/op
                 executeQuery·p0.50:   2629.829 ms/op
                 executeQuery·p0.90:   2743.075 ms/op
                 executeQuery·p0.95:   2743.075 ms/op
                 executeQuery·p0.99:   2743.075 ms/op
                 executeQuery·p0.999:  2743.075 ms/op
                 executeQuery·p0.9999: 2743.075 ms/op
                 executeQuery·p1.00:   2743.075 ms/op

Iteration   3: 2621.440 ±(99.9%) 175.651 ms/op
                 executeQuery·p0.00:   2596.274 ms/op
                 executeQuery·p0.50:   2619.343 ms/op
                 executeQuery·p0.90:   2650.800 ms/op
                 executeQuery·p0.95:   2650.800 ms/op
                 executeQuery·p0.99:   2650.800 ms/op
                 executeQuery·p0.999:  2650.800 ms/op
                 executeQuery·p0.9999: 2650.800 ms/op
                 executeQuery·p1.00:   2650.800 ms/op

Iteration   4: 2637.169 ±(99.9%) 411.269 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2667.577 ms/op
                 executeQuery·p0.90:   2671.772 ms/op
                 executeQuery·p0.95:   2671.772 ms/op
                 executeQuery·p0.99:   2671.772 ms/op
                 executeQuery·p0.999:  2671.772 ms/op
                 executeQuery·p0.9999: 2671.772 ms/op
                 executeQuery·p1.00:   2671.772 ms/op

Iteration   5: 2629.829 ±(99.9%) 450.821 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2636.120 ms/op
                 executeQuery·p0.90:   2705.326 ms/op
                 executeQuery·p0.95:   2705.326 ms/op
                 executeQuery·p0.99:   2705.326 ms/op
                 executeQuery·p0.999:  2705.326 ms/op
                 executeQuery·p0.9999: 2705.326 ms/op
                 executeQuery·p1.00:   2705.326 ms/op


# Run progress: 92.50% complete, ETA 00:45:20
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2710.569 ±(99.9%) 1398.462 ms/op
# Warmup Iteration   2: 2654.994 ±(99.9%) 525.557 ms/op
# Warmup Iteration   3: 2657.092 ±(99.9%) 251.835 ms/op
# Warmup Iteration   4: 2652.897 ±(99.9%) 437.312 ms/op
# Warmup Iteration   5: 2707.423 ±(99.9%) 357.178 ms/op
Iteration   1: 2725.249 ±(99.9%) 416.005 ms/op
                 executeQuery·p0.00:   2638.217 ms/op
                 executeQuery·p0.50:   2734.686 ms/op
                 executeQuery·p0.90:   2793.406 ms/op
                 executeQuery·p0.95:   2793.406 ms/op
                 executeQuery·p0.99:   2793.406 ms/op
                 executeQuery·p0.999:  2793.406 ms/op
                 executeQuery·p0.9999: 2793.406 ms/op
                 executeQuery·p1.00:   2793.406 ms/op

Iteration   2: 2659.189 ±(99.9%) 660.941 ms/op
                 executeQuery·p0.00:   2533.360 ms/op
                 executeQuery·p0.50:   2663.383 ms/op
                 executeQuery·p0.90:   2776.629 ms/op
                 executeQuery·p0.95:   2776.629 ms/op
                 executeQuery·p0.99:   2776.629 ms/op
                 executeQuery·p0.999:  2776.629 ms/op
                 executeQuery·p0.9999: 2776.629 ms/op
                 executeQuery·p1.00:   2776.629 ms/op

Iteration   3: 2682.257 ±(99.9%) 366.650 ms/op
                 executeQuery·p0.00:   2613.051 ms/op
                 executeQuery·p0.50:   2690.646 ms/op
                 executeQuery·p0.90:   2734.686 ms/op
                 executeQuery·p0.95:   2734.686 ms/op
                 executeQuery·p0.99:   2734.686 ms/op
                 executeQuery·p0.999:  2734.686 ms/op
                 executeQuery·p0.9999: 2734.686 ms/op
                 executeQuery·p1.00:   2734.686 ms/op

Iteration   4: 2699.035 ±(99.9%) 335.252 ms/op
                 executeQuery·p0.00:   2642.412 ms/op
                 executeQuery·p0.50:   2705.326 ms/op
                 executeQuery·p0.90:   2743.075 ms/op
                 executeQuery·p0.95:   2743.075 ms/op
                 executeQuery·p0.99:   2743.075 ms/op
                 executeQuery·p0.999:  2743.075 ms/op
                 executeQuery·p0.9999: 2743.075 ms/op
                 executeQuery·p1.00:   2743.075 ms/op

Iteration   5: 2730.492 ±(99.9%) 141.701 ms/op
                 executeQuery·p0.00:   2713.715 ms/op
                 executeQuery·p0.50:   2724.200 ms/op
                 executeQuery·p0.90:   2759.852 ms/op
                 executeQuery·p0.95:   2759.852 ms/op
                 executeQuery·p0.99:   2759.852 ms/op
                 executeQuery·p0.999:  2759.852 ms/op
                 executeQuery·p0.9999: 2759.852 ms/op
                 executeQuery·p1.00:   2759.852 ms/op


# Run progress: 92.81% complete, ETA 00:43:26
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2745.172 ±(99.9%) 1269.052 ms/op
# Warmup Iteration   2: 2658.140 ±(99.9%) 427.615 ms/op
# Warmup Iteration   3: 2643.460 ±(99.9%) 473.278 ms/op
# Warmup Iteration   4: 2601.517 ±(99.9%) 503.365 ms/op
# Warmup Iteration   5: 2670.723 ±(99.9%) 655.501 ms/op
Iteration   1: 2654.994 ±(99.9%) 301.000 ms/op
                 executeQuery·p0.00:   2621.440 ms/op
                 executeQuery·p0.50:   2638.217 ms/op
                 executeQuery·p0.90:   2722.103 ms/op
                 executeQuery·p0.95:   2722.103 ms/op
                 executeQuery·p0.99:   2722.103 ms/op
                 executeQuery·p0.999:  2722.103 ms/op
                 executeQuery·p0.9999: 2722.103 ms/op
                 executeQuery·p1.00:   2722.103 ms/op

Iteration   2: 2661.286 ±(99.9%) 1123.735 ms/op
                 executeQuery·p0.00:   2428.502 ms/op
                 executeQuery·p0.50:   2686.452 ms/op
                 executeQuery·p0.90:   2843.738 ms/op
                 executeQuery·p0.95:   2843.738 ms/op
                 executeQuery·p0.99:   2843.738 ms/op
                 executeQuery·p0.999:  2843.738 ms/op
                 executeQuery·p0.9999: 2843.738 ms/op
                 executeQuery·p1.00:   2843.738 ms/op

Iteration   3: 2688.549 ±(99.9%) 500.254 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2690.646 ms/op
                 executeQuery·p0.90:   2772.435 ms/op
                 executeQuery·p0.95:   2772.435 ms/op
                 executeQuery·p0.99:   2772.435 ms/op
                 executeQuery·p0.999:  2772.435 ms/op
                 executeQuery·p0.9999: 2772.435 ms/op
                 executeQuery·p1.00:   2772.435 ms/op

Iteration   4: 2622.489 ±(99.9%) 455.348 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2617.246 ms/op
                 executeQuery·p0.90:   2713.715 ms/op
                 executeQuery·p0.95:   2713.715 ms/op
                 executeQuery·p0.99:   2713.715 ms/op
                 executeQuery·p0.999:  2713.715 ms/op
                 executeQuery·p0.9999: 2713.715 ms/op
                 executeQuery·p1.00:   2713.715 ms/op

Iteration   5: 2629.829 ±(99.9%) 463.674 ms/op
                 executeQuery·p0.00:   2558.525 ms/op
                 executeQuery·p0.50:   2627.731 ms/op
                 executeQuery·p0.90:   2705.326 ms/op
                 executeQuery·p0.95:   2705.326 ms/op
                 executeQuery·p0.99:   2705.326 ms/op
                 executeQuery·p0.999:  2705.326 ms/op
                 executeQuery·p0.9999: 2705.326 ms/op
                 executeQuery·p1.00:   2705.326 ms/op


# Run progress: 93.13% complete, ETA 00:41:33
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2759.852 ±(99.9%) 1578.845 ms/op
# Warmup Iteration   2: 2672.820 ±(99.9%) 423.588 ms/op
# Warmup Iteration   3: 2666.529 ±(99.9%) 824.879 ms/op
# Warmup Iteration   4: 2665.480 ±(99.9%) 691.893 ms/op
# Warmup Iteration   5: 2618.294 ±(99.9%) 748.298 ms/op
Iteration   1: 2702.180 ±(99.9%) 500.438 ms/op
                 executeQuery·p0.00:   2629.829 ms/op
                 executeQuery·p0.50:   2686.452 ms/op
                 executeQuery·p0.90:   2805.989 ms/op
                 executeQuery·p0.95:   2805.989 ms/op
                 executeQuery·p0.99:   2805.989 ms/op
                 executeQuery·p0.999:  2805.989 ms/op
                 executeQuery·p0.9999: 2805.989 ms/op
                 executeQuery·p1.00:   2805.989 ms/op

Iteration   2: 2644.509 ±(99.9%) 46.945 ms/op
                 executeQuery·p0.00:   2634.023 ms/op
                 executeQuery·p0.50:   2646.606 ms/op
                 executeQuery·p0.90:   2650.800 ms/op
                 executeQuery·p0.95:   2650.800 ms/op
                 executeQuery·p0.99:   2650.800 ms/op
                 executeQuery·p0.999:  2650.800 ms/op
                 executeQuery·p0.9999: 2650.800 ms/op
                 executeQuery·p1.00:   2650.800 ms/op

Iteration   3: 2606.760 ±(99.9%) 259.497 ms/op
                 executeQuery·p0.00:   2550.137 ms/op
                 executeQuery·p0.50:   2617.246 ms/op
                 executeQuery·p0.90:   2642.412 ms/op
                 executeQuery·p0.95:   2642.412 ms/op
                 executeQuery·p0.99:   2642.412 ms/op
                 executeQuery·p0.999:  2642.412 ms/op
                 executeQuery·p0.9999: 2642.412 ms/op
                 executeQuery·p1.00:   2642.412 ms/op

Iteration   4: 2609.906 ±(99.9%) 345.946 ms/op
                 executeQuery·p0.00:   2545.943 ms/op
                 executeQuery·p0.50:   2608.857 ms/op
                 executeQuery·p0.90:   2675.966 ms/op
                 executeQuery·p0.95:   2675.966 ms/op
                 executeQuery·p0.99:   2675.966 ms/op
                 executeQuery·p0.999:  2675.966 ms/op
                 executeQuery·p0.9999: 2675.966 ms/op
                 executeQuery·p1.00:   2675.966 ms/op

Iteration   5: 2638.217 ±(99.9%) 255.215 ms/op
                 executeQuery·p0.00:   2592.080 ms/op
                 executeQuery·p0.50:   2636.120 ms/op
                 executeQuery·p0.90:   2688.549 ms/op
                 executeQuery·p0.95:   2688.549 ms/op
                 executeQuery·p0.99:   2688.549 ms/op
                 executeQuery·p0.999:  2688.549 ms/op
                 executeQuery·p0.9999: 2688.549 ms/op
                 executeQuery·p1.00:   2688.549 ms/op


# Run progress: 93.44% complete, ETA 00:39:39
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2713.715 ±(99.9%) 1365.438 ms/op
# Warmup Iteration   2: 2658.140 ±(99.9%) 208.039 ms/op
# Warmup Iteration   3: 2728.395 ±(99.9%) 311.003 ms/op
# Warmup Iteration   4: 2634.023 ±(99.9%) 457.293 ms/op
# Warmup Iteration   5: 2721.055 ±(99.9%) 219.494 ms/op
Iteration   1: 2685.403 ±(99.9%) 422.430 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2692.743 ms/op
                 executeQuery·p0.90:   2755.658 ms/op
                 executeQuery·p0.95:   2755.658 ms/op
                 executeQuery·p0.99:   2755.658 ms/op
                 executeQuery·p0.999:  2755.658 ms/op
                 executeQuery·p0.9999: 2755.658 ms/op
                 executeQuery·p1.00:   2755.658 ms/op

Iteration   2: 2670.723 ±(99.9%) 877.244 ms/op
                 executeQuery·p0.00:   2499.805 ms/op
                 executeQuery·p0.50:   2692.743 ms/op
                 executeQuery·p0.90:   2797.601 ms/op
                 executeQuery·p0.95:   2797.601 ms/op
                 executeQuery·p0.99:   2797.601 ms/op
                 executeQuery·p0.999:  2797.601 ms/op
                 executeQuery·p0.9999: 2797.601 ms/op
                 executeQuery·p1.00:   2797.601 ms/op

Iteration   3: 2659.189 ±(99.9%) 412.235 ms/op
                 executeQuery·p0.00:   2604.663 ms/op
                 executeQuery·p0.50:   2640.314 ms/op
                 executeQuery·p0.90:   2751.463 ms/op
                 executeQuery·p0.95:   2751.463 ms/op
                 executeQuery·p0.99:   2751.463 ms/op
                 executeQuery·p0.999:  2751.463 ms/op
                 executeQuery·p0.9999: 2751.463 ms/op
                 executeQuery·p1.00:   2751.463 ms/op

Iteration   4: 2704.278 ±(99.9%) 714.484 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2743.075 ms/op
                 executeQuery·p0.90:   2789.212 ms/op
                 executeQuery·p0.95:   2789.212 ms/op
                 executeQuery·p0.99:   2789.212 ms/op
                 executeQuery·p0.999:  2789.212 ms/op
                 executeQuery·p0.9999: 2789.212 ms/op
                 executeQuery·p1.00:   2789.212 ms/op

Iteration   5: 2686.452 ±(99.9%) 536.851 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2680.160 ms/op
                 executeQuery·p0.90:   2785.018 ms/op
                 executeQuery·p0.95:   2785.018 ms/op
                 executeQuery·p0.99:   2785.018 ms/op
                 executeQuery·p0.999:  2785.018 ms/op
                 executeQuery·p0.9999: 2785.018 ms/op
                 executeQuery·p1.00:   2785.018 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 100
  mean =   2662.041 ±(99.9%) 25.604 ms/op

  Histogram, ms/op:
    [2400.000, 2450.000) = 1 
    [2450.000, 2500.000) = 1 
    [2500.000, 2550.000) = 6 
    [2550.000, 2600.000) = 7 
    [2600.000, 2650.000) = 33 
    [2650.000, 2700.000) = 18 
    [2700.000, 2750.000) = 21 
    [2750.000, 2800.000) = 11 
    [2800.000, 2850.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   2428.502 ms/op
     p(50.0000) =   2650.800 ms/op
     p(90.0000) =   2759.433 ms/op
     p(95.0000) =   2789.002 ms/op
     p(99.0000) =   2843.361 ms/op
     p(99.9000) =   2843.738 ms/op
     p(99.9900) =   2843.738 ms/op
     p(99.9990) =   2843.738 ms/op
     p(99.9999) =   2843.738 ms/op
    p(100.0000) =   2843.738 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2)

# Run progress: 93.75% complete, ETA 00:37:46
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2977.956 ±(99.9%) 1482.211 ms/op
# Warmup Iteration   2: 2944.401 ±(99.9%) 1064.310 ms/op
# Warmup Iteration   3: 2850.030 ±(99.9%) 661.867 ms/op
# Warmup Iteration   4: 2793.406 ±(99.9%) 331.949 ms/op
# Warmup Iteration   5: 2776.629 ±(99.9%) 632.545 ms/op
Iteration   1: 2879.390 ±(99.9%) 1097.722 ms/op
                 executeQuery·p0.00:   2717.909 ms/op
                 executeQuery·p0.50:   2871.001 ms/op
                 executeQuery·p0.90:   3057.648 ms/op
                 executeQuery·p0.95:   3057.648 ms/op
                 executeQuery·p0.99:   3057.648 ms/op
                 executeQuery·p0.999:  3057.648 ms/op
                 executeQuery·p0.9999: 3057.648 ms/op
                 executeQuery·p1.00:   3057.648 ms/op

Iteration   2: 2864.710 ±(99.9%) 826.843 ms/op
                 executeQuery·p0.00:   2696.937 ms/op
                 executeQuery·p0.50:   2877.293 ms/op
                 executeQuery·p0.90:   3007.316 ms/op
                 executeQuery·p0.95:   3007.316 ms/op
                 executeQuery·p0.99:   3007.316 ms/op
                 executeQuery·p0.999:  3007.316 ms/op
                 executeQuery·p0.9999: 3007.316 ms/op
                 executeQuery·p1.00:   3007.316 ms/op

Iteration   3: 2855.272 ±(99.9%) 705.170 ms/op
                 executeQuery·p0.00:   2764.046 ms/op
                 executeQuery·p0.50:   2822.767 ms/op
                 executeQuery·p0.90:   3011.510 ms/op
                 executeQuery·p0.95:   3011.510 ms/op
                 executeQuery·p0.99:   3011.510 ms/op
                 executeQuery·p0.999:  3011.510 ms/op
                 executeQuery·p0.9999: 3011.510 ms/op
                 executeQuery·p1.00:   3011.510 ms/op

Iteration   4: 2944.401 ±(99.9%) 385.214 ms/op
                 executeQuery·p0.00:   2860.515 ms/op
                 executeQuery·p0.50:   2959.081 ms/op
                 executeQuery·p0.90:   2998.927 ms/op
                 executeQuery·p0.95:   2998.927 ms/op
                 executeQuery·p0.99:   2998.927 ms/op
                 executeQuery·p0.999:  2998.927 ms/op
                 executeQuery·p0.9999: 2998.927 ms/op
                 executeQuery·p1.00:   2998.927 ms/op

Iteration   5: 2811.232 ±(99.9%) 719.606 ms/op
                 executeQuery·p0.00:   2688.549 ms/op
                 executeQuery·p0.50:   2803.892 ms/op
                 executeQuery·p0.90:   2948.596 ms/op
                 executeQuery·p0.95:   2948.596 ms/op
                 executeQuery·p0.99:   2948.596 ms/op
                 executeQuery·p0.999:  2948.596 ms/op
                 executeQuery·p0.9999: 2948.596 ms/op
                 executeQuery·p1.00:   2948.596 ms/op


# Run progress: 94.06% complete, ETA 00:35:53
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2968.519 ±(99.9%) 1347.090 ms/op
# Warmup Iteration   2: 2912.944 ±(99.9%) 657.040 ms/op
# Warmup Iteration   3: 2845.835 ±(99.9%) 788.802 ms/op
# Warmup Iteration   4: 2838.495 ±(99.9%) 459.097 ms/op
# Warmup Iteration   5: 2857.370 ±(99.9%) 558.261 ms/op
Iteration   1: 2845.835 ±(99.9%) 81.311 ms/op
                 executeQuery·p0.00:   2831.155 ms/op
                 executeQuery·p0.50:   2847.932 ms/op
                 executeQuery·p0.90:   2856.321 ms/op
                 executeQuery·p0.95:   2856.321 ms/op
                 executeQuery·p0.99:   2856.321 ms/op
                 executeQuery·p0.999:  2856.321 ms/op
                 executeQuery·p0.9999: 2856.321 ms/op
                 executeQuery·p1.00:   2856.321 ms/op

Iteration   2: 2854.224 ±(99.9%) 709.022 ms/op
                 executeQuery·p0.00:   2738.881 ms/op
                 executeQuery·p0.50:   2837.447 ms/op
                 executeQuery·p0.90:   3003.122 ms/op
                 executeQuery·p0.95:   3003.122 ms/op
                 executeQuery·p0.99:   3003.122 ms/op
                 executeQuery·p0.999:  3003.122 ms/op
                 executeQuery·p0.9999: 3003.122 ms/op
                 executeQuery·p1.00:   3003.122 ms/op

Iteration   3: 2885.681 ±(99.9%) 638.709 ms/op
                 executeQuery·p0.00:   2818.572 ms/op
                 executeQuery·p0.50:   2845.835 ms/op
                 executeQuery·p0.90:   3032.482 ms/op
                 executeQuery·p0.95:   3032.482 ms/op
                 executeQuery·p0.99:   3032.482 ms/op
                 executeQuery·p0.999:  3032.482 ms/op
                 executeQuery·p0.9999: 3032.482 ms/op
                 executeQuery·p1.00:   3032.482 ms/op

Iteration   4: 2999.976 ±(99.9%) 482.502 ms/op
                 executeQuery·p0.00:   2927.624 ms/op
                 executeQuery·p0.50:   2984.247 ms/op
                 executeQuery·p0.90:   3103.785 ms/op
                 executeQuery·p0.95:   3103.785 ms/op
                 executeQuery·p0.99:   3103.785 ms/op
                 executeQuery·p0.999:  3103.785 ms/op
                 executeQuery·p0.9999: 3103.785 ms/op
                 executeQuery·p1.00:   3103.785 ms/op

Iteration   5: 2930.770 ±(99.9%) 718.585 ms/op
                 executeQuery·p0.00:   2835.350 ms/op
                 executeQuery·p0.50:   2898.264 ms/op
                 executeQuery·p0.90:   3091.202 ms/op
                 executeQuery·p0.95:   3091.202 ms/op
                 executeQuery·p0.99:   3091.202 ms/op
                 executeQuery·p0.999:  3091.202 ms/op
                 executeQuery·p0.9999: 3091.202 ms/op
                 executeQuery·p1.00:   3091.202 ms/op


# Run progress: 94.38% complete, ETA 00:34:00
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3038.773 ±(99.9%) 1363.913 ms/op
# Warmup Iteration   2: 2859.467 ±(99.9%) 593.551 ms/op
# Warmup Iteration   3: 2872.050 ±(99.9%) 221.714 ms/op
# Warmup Iteration   4: 2799.698 ±(99.9%) 448.371 ms/op
# Warmup Iteration   5: 2899.313 ±(99.9%) 776.876 ms/op
Iteration   1: 2855.272 ±(99.9%) 135.292 ms/op
                 executeQuery·p0.00:   2826.961 ms/op
                 executeQuery·p0.50:   2860.515 ms/op
                 executeQuery·p0.90:   2873.098 ms/op
                 executeQuery·p0.95:   2873.098 ms/op
                 executeQuery·p0.99:   2873.098 ms/op
                 executeQuery·p0.999:  2873.098 ms/op
                 executeQuery·p0.9999: 2873.098 ms/op
                 executeQuery·p1.00:   2873.098 ms/op

Iteration   2: 2874.147 ±(99.9%) 686.519 ms/op
                 executeQuery·p0.00:   2755.658 ms/op
                 executeQuery·p0.50:   2866.807 ms/op
                 executeQuery·p0.90:   3007.316 ms/op
                 executeQuery·p0.95:   3007.316 ms/op
                 executeQuery·p0.99:   3007.316 ms/op
                 executeQuery·p0.999:  3007.316 ms/op
                 executeQuery·p0.9999: 3007.316 ms/op
                 executeQuery·p1.00:   3007.316 ms/op

Iteration   3: 2873.098 ±(99.9%) 365.647 ms/op
                 executeQuery·p0.00:   2797.601 ms/op
                 executeQuery·p0.50:   2881.487 ms/op
                 executeQuery·p0.90:   2931.818 ms/op
                 executeQuery·p0.95:   2931.818 ms/op
                 executeQuery·p0.99:   2931.818 ms/op
                 executeQuery·p0.999:  2931.818 ms/op
                 executeQuery·p0.9999: 2931.818 ms/op
                 executeQuery·p1.00:   2931.818 ms/op

Iteration   4: 2867.855 ±(99.9%) 480.977 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2871.001 ms/op
                 executeQuery·p0.90:   2952.790 ms/op
                 executeQuery·p0.95:   2952.790 ms/op
                 executeQuery·p0.99:   2952.790 ms/op
                 executeQuery·p0.999:  2952.790 ms/op
                 executeQuery·p0.9999: 2952.790 ms/op
                 executeQuery·p1.00:   2952.790 ms/op

Iteration   5: 2812.281 ±(99.9%) 439.546 ms/op
                 executeQuery·p0.00:   2722.103 ms/op
                 executeQuery·p0.50:   2820.669 ms/op
                 executeQuery·p0.90:   2885.681 ms/op
                 executeQuery·p0.95:   2885.681 ms/op
                 executeQuery·p0.99:   2885.681 ms/op
                 executeQuery·p0.999:  2885.681 ms/op
                 executeQuery·p0.9999: 2885.681 ms/op
                 executeQuery·p1.00:   2885.681 ms/op


# Run progress: 94.69% complete, ETA 00:32:07
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

2994.733 ±(99.9%) 1099.171 ms/op
# Warmup Iteration   2: 2903.507 ±(99.9%) 819.518 ms/op
# Warmup Iteration   3: 2838.495 ±(99.9%) 795.563 ms/op
# Warmup Iteration   4: 2863.661 ±(99.9%) 522.461 ms/op
# Warmup Iteration   5: 2842.690 ±(99.9%) 528.519 ms/op
Iteration   1: 2840.592 ±(99.9%) 569.121 ms/op
                 executeQuery·p0.00:   2722.103 ms/op
                 executeQuery·p0.50:   2860.515 ms/op
                 executeQuery·p0.90:   2919.236 ms/op
                 executeQuery·p0.95:   2919.236 ms/op
                 executeQuery·p0.99:   2919.236 ms/op
                 executeQuery·p0.999:  2919.236 ms/op
                 executeQuery·p0.9999: 2919.236 ms/op
                 executeQuery·p1.00:   2919.236 ms/op

Iteration   2: 2817.524 ±(99.9%) 746.661 ms/op
                 executeQuery·p0.00:   2675.966 ms/op
                 executeQuery·p0.50:   2833.252 ms/op
                 executeQuery·p0.90:   2927.624 ms/op
                 executeQuery·p0.95:   2927.624 ms/op
                 executeQuery·p0.99:   2927.624 ms/op
                 executeQuery·p0.999:  2927.624 ms/op
                 executeQuery·p0.9999: 2927.624 ms/op
                 executeQuery·p1.00:   2927.624 ms/op

Iteration   3: 2774.532 ±(99.9%) 252.805 ms/op
                 executeQuery·p0.00:   2743.075 ms/op
                 executeQuery·p0.50:   2761.949 ms/op
                 executeQuery·p0.90:   2831.155 ms/op
                 executeQuery·p0.95:   2831.155 ms/op
                 executeQuery·p0.99:   2831.155 ms/op
                 executeQuery·p0.999:  2831.155 ms/op
                 executeQuery·p0.9999: 2831.155 ms/op
                 executeQuery·p1.00:   2831.155 ms/op

Iteration   4: 2852.127 ±(99.9%) 425.678 ms/op
                 executeQuery·p0.00:   2805.989 ms/op
                 executeQuery·p0.50:   2826.961 ms/op
                 executeQuery·p0.90:   2948.596 ms/op
                 executeQuery·p0.95:   2948.596 ms/op
                 executeQuery·p0.99:   2948.596 ms/op
                 executeQuery·p0.999:  2948.596 ms/op
                 executeQuery·p0.9999: 2948.596 ms/op
                 executeQuery·p1.00:   2948.596 ms/op

Iteration   5: 2910.847 ±(99.9%) 522.286 ms/op
                 executeQuery·p0.00:   2839.544 ms/op
                 executeQuery·p0.50:   2904.556 ms/op
                 executeQuery·p0.90:   2994.733 ms/op
                 executeQuery·p0.95:   2994.733 ms/op
                 executeQuery·p0.99:   2994.733 ms/op
                 executeQuery·p0.999:  2994.733 ms/op
                 executeQuery·p0.9999: 2994.733 ms/op
                 executeQuery·p1.00:   2994.733 ms/op


# Run progress: 95.00% complete, ETA 00:30:13
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3001.025 ±(99.9%) 1257.422 ms/op
# Warmup Iteration   2: 2905.604 ±(99.9%) 611.033 ms/op
# Warmup Iteration   3: 2829.058 ±(99.9%) 441.768 ms/op
# Warmup Iteration   4: 2847.932 ±(99.9%) 1011.704 ms/op
# Warmup Iteration   5: 2898.264 ±(99.9%) 627.883 ms/op
Iteration   1: 2861.564 ±(99.9%) 446.112 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2864.710 ms/op
                 executeQuery·p0.90:   2940.207 ms/op
                 executeQuery·p0.95:   2940.207 ms/op
                 executeQuery·p0.99:   2940.207 ms/op
                 executeQuery·p0.999:  2940.207 ms/op
                 executeQuery·p0.9999: 2940.207 ms/op
                 executeQuery·p1.00:   2940.207 ms/op

Iteration   2: 2851.078 ±(99.9%) 794.331 ms/op
                 executeQuery·p0.00:   2734.686 ms/op
                 executeQuery·p0.50:   2837.447 ms/op
                 executeQuery·p0.90:   2994.733 ms/op
                 executeQuery·p0.95:   2994.733 ms/op
                 executeQuery·p0.99:   2994.733 ms/op
                 executeQuery·p0.999:  2994.733 ms/op
                 executeQuery·p0.9999: 2994.733 ms/op
                 executeQuery·p1.00:   2994.733 ms/op

Iteration   3: 2958.033 ±(99.9%) 591.485 ms/op
                 executeQuery·p0.00:   2881.487 ms/op
                 executeQuery·p0.50:   2931.818 ms/op
                 executeQuery·p0.90:   3087.008 ms/op
                 executeQuery·p0.95:   3087.008 ms/op
                 executeQuery·p0.99:   3087.008 ms/op
                 executeQuery·p0.999:  3087.008 ms/op
                 executeQuery·p0.9999: 3087.008 ms/op
                 executeQuery·p1.00:   3087.008 ms/op

Iteration   4: 2840.592 ±(99.9%) 494.531 ms/op
                 executeQuery·p0.00:   2768.241 ms/op
                 executeQuery·p0.50:   2824.864 ms/op
                 executeQuery·p0.90:   2944.401 ms/op
                 executeQuery·p0.95:   2944.401 ms/op
                 executeQuery·p0.99:   2944.401 ms/op
                 executeQuery·p0.999:  2944.401 ms/op
                 executeQuery·p0.9999: 2944.401 ms/op
                 executeQuery·p1.00:   2944.401 ms/op

Iteration   5: 2909.798 ±(99.9%) 243.806 ms/op
                 executeQuery·p0.00:   2856.321 ms/op
                 executeQuery·p0.50:   2921.333 ms/op
                 executeQuery·p0.90:   2940.207 ms/op
                 executeQuery·p0.95:   2940.207 ms/op
                 executeQuery·p0.99:   2940.207 ms/op
                 executeQuery·p0.999:  2940.207 ms/op
                 executeQuery·p0.9999: 2940.207 ms/op
                 executeQuery·p1.00:   2940.207 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 100
  mean =   2870.833 ±(99.9%) 31.629 ms/op

  Histogram, ms/op:
    [2600.000, 2650.000) = 0 
    [2650.000, 2700.000) = 3 
    [2700.000, 2750.000) = 6 
    [2750.000, 2800.000) = 12 
    [2800.000, 2850.000) = 25 
    [2850.000, 2900.000) = 20 
    [2900.000, 2950.000) = 15 
    [2950.000, 3000.000) = 10 
    [3000.000, 3050.000) = 5 
    [3050.000, 3100.000) = 3 
    [3100.000, 3150.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2675.966 ms/op
     p(50.0000) =   2856.321 ms/op
     p(90.0000) =   2998.508 ms/op
     p(95.0000) =   3031.433 ms/op
     p(99.0000) =   3103.659 ms/op
     p(99.9000) =   3103.785 ms/op
     p(99.9900) =   3103.785 ms/op
     p(99.9990) =   3103.785 ms/op
     p(99.9999) =   3103.785 ms/op
    p(100.0000) =   3103.785 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4)

# Run progress: 95.31% complete, ETA 00:28:20
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3113.222 ±(99.9%) 1236.978 ms/op
# Warmup Iteration   2: 3007.316 ±(99.9%) 865.335 ms/op
# Warmup Iteration   3: 2968.519 ±(99.9%) 234.593 ms/op
# Warmup Iteration   4: 3004.170 ±(99.9%) 494.531 ms/op
# Warmup Iteration   5: 2959.081 ±(99.9%) 212.839 ms/op
Iteration   1: 2948.596 ±(99.9%) 798.827 ms/op
                 executeQuery·p0.00:   2822.767 ms/op
                 executeQuery·p0.50:   2936.013 ms/op
                 executeQuery·p0.90:   3099.591 ms/op
                 executeQuery·p0.95:   3099.591 ms/op
                 executeQuery·p0.99:   3099.591 ms/op
                 executeQuery·p0.999:  3099.591 ms/op
                 executeQuery·p0.9999: 3099.591 ms/op
                 executeQuery·p1.00:   3099.591 ms/op

Iteration   2: 3066.036 ±(99.9%) 597.918 ms/op
                 executeQuery·p0.00:   2952.790 ms/op
                 executeQuery·p0.50:   3066.036 ms/op
                 executeQuery·p0.90:   3179.282 ms/op
                 executeQuery·p0.95:   3179.282 ms/op
                 executeQuery·p0.99:   3179.282 ms/op
                 executeQuery·p0.999:  3179.282 ms/op
                 executeQuery·p0.9999: 3179.282 ms/op
                 executeQuery·p1.00:   3179.282 ms/op

Iteration   3: 2937.061 ±(99.9%) 109.258 ms/op
                 executeQuery·p0.00:   2923.430 ms/op
                 executeQuery·p0.50:   2931.818 ms/op
                 executeQuery·p0.90:   2961.179 ms/op
                 executeQuery·p0.95:   2961.179 ms/op
                 executeQuery·p0.99:   2961.179 ms/op
                 executeQuery·p0.999:  2961.179 ms/op
                 executeQuery·p0.9999: 2961.179 ms/op
                 executeQuery·p1.00:   2961.179 ms/op

Iteration   4: 2996.830 ±(99.9%) 583.199 ms/op
                 executeQuery·p0.00:   2873.098 ms/op
                 executeQuery·p0.50:   3013.607 ms/op
                 executeQuery·p0.90:   3087.008 ms/op
                 executeQuery·p0.95:   3087.008 ms/op
                 executeQuery·p0.99:   3087.008 ms/op
                 executeQuery·p0.999:  3087.008 ms/op
                 executeQuery·p0.9999: 3087.008 ms/op
                 executeQuery·p1.00:   3087.008 ms/op

Iteration   5: 2989.490 ±(99.9%) 326.276 ms/op
                 executeQuery·p0.00:   2936.013 ms/op
                 executeQuery·p0.50:   2982.150 ms/op
                 executeQuery·p0.90:   3057.648 ms/op
                 executeQuery·p0.95:   3057.648 ms/op
                 executeQuery·p0.99:   3057.648 ms/op
                 executeQuery·p0.999:  3057.648 ms/op
                 executeQuery·p0.9999: 3057.648 ms/op
                 executeQuery·p1.00:   3057.648 ms/op


# Run progress: 95.63% complete, ETA 00:26:27
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3132.097 ±(99.9%) 1358.494 ms/op
# Warmup Iteration   2: 3025.142 ±(99.9%) 747.316 ms/op
# Warmup Iteration   3: 2929.721 ±(99.9%) 133.699 ms/op
# Warmup Iteration   4: 3005.219 ±(99.9%) 694.718 ms/op
# Warmup Iteration   5: 2941.256 ±(99.9%) 310.116 ms/op
Iteration   1: 2972.713 ±(99.9%) 849.449 ms/op
                 executeQuery·p0.00:   2852.127 ms/op
                 executeQuery·p0.50:   2942.304 ms/op
                 executeQuery·p0.90:   3154.117 ms/op
                 executeQuery·p0.95:   3154.117 ms/op
                 executeQuery·p0.99:   3154.117 ms/op
                 executeQuery·p0.999:  3154.117 ms/op
                 executeQuery·p0.9999: 3154.117 ms/op
                 executeQuery·p1.00:   3154.117 ms/op

Iteration   2: 2962.227 ±(99.9%) 397.339 ms/op
                 executeQuery·p0.00:   2919.236 ms/op
                 executeQuery·p0.50:   2938.110 ms/op
                 executeQuery·p0.90:   3053.453 ms/op
                 executeQuery·p0.95:   3053.453 ms/op
                 executeQuery·p0.99:   3053.453 ms/op
                 executeQuery·p0.999:  3053.453 ms/op
                 executeQuery·p0.9999: 3053.453 ms/op
                 executeQuery·p1.00:   3053.453 ms/op

Iteration   3: 2981.102 ±(99.9%) 312.475 ms/op
                 executeQuery·p0.00:   2952.790 ms/op
                 executeQuery·p0.50:   2959.081 ms/op
                 executeQuery·p0.90:   3053.453 ms/op
                 executeQuery·p0.95:   3053.453 ms/op
                 executeQuery·p0.99:   3053.453 ms/op
                 executeQuery·p0.999:  3053.453 ms/op
                 executeQuery·p0.9999: 3053.453 ms/op
                 executeQuery·p1.00:   3053.453 ms/op

Iteration   4: 2985.296 ±(99.9%) 807.781 ms/op
                 executeQuery·p0.00:   2868.904 ms/op
                 executeQuery·p0.50:   2986.344 ms/op
                 executeQuery·p0.90:   3099.591 ms/op
                 executeQuery·p0.95:   3099.591 ms/op
                 executeQuery·p0.99:   3099.591 ms/op
                 executeQuery·p0.999:  3099.591 ms/op
                 executeQuery·p0.9999: 3099.591 ms/op
                 executeQuery·p1.00:   3099.591 ms/op

Iteration   5: 3028.287 ±(99.9%) 723.213 ms/op
                 executeQuery·p0.00:   2860.515 ms/op
                 executeQuery·p0.50:   3082.813 ms/op
                 executeQuery·p0.90:   3087.008 ms/op
                 executeQuery·p0.95:   3087.008 ms/op
                 executeQuery·p0.99:   3087.008 ms/op
                 executeQuery·p0.999:  3087.008 ms/op
                 executeQuery·p0.9999: 3087.008 ms/op
                 executeQuery·p1.00:   3087.008 ms/op


# Run progress: 95.94% complete, ETA 00:24:34
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3125.805 ±(99.9%) 1431.344 ms/op
# Warmup Iteration   2: 2997.879 ±(99.9%) 340.956 ms/op
# Warmup Iteration   3: 2987.393 ±(99.9%) 748.626 ms/op
# Warmup Iteration   4: 2946.499 ±(99.9%) 423.082 ms/op
# Warmup Iteration   5: 2981.102 ±(99.9%) 845.982 ms/op
Iteration   1: 3009.413 ±(99.9%) 789.422 ms/op
                 executeQuery·p0.00:   2847.932 ms/op
                 executeQuery·p0.50:   3038.773 ms/op
                 executeQuery·p0.90:   3112.174 ms/op
                 executeQuery·p0.95:   3112.174 ms/op
                 executeQuery·p0.99:   3112.174 ms/op
                 executeQuery·p0.999:  3112.174 ms/op
                 executeQuery·p0.9999: 3112.174 ms/op
                 executeQuery·p1.00:   3112.174 ms/op

Iteration   2: 2929.721 ±(99.9%) 553.470 ms/op
                 executeQuery·p0.00:   2847.932 ms/op
                 executeQuery·p0.50:   2910.847 ms/op
                 executeQuery·p0.90:   3049.259 ms/op
                 executeQuery·p0.95:   3049.259 ms/op
                 executeQuery·p0.99:   3049.259 ms/op
                 executeQuery·p0.999:  3049.259 ms/op
                 executeQuery·p0.9999: 3049.259 ms/op
                 executeQuery·p1.00:   3049.259 ms/op

Iteration   3: 2998.927 ±(99.9%) 595.456 ms/op
                 executeQuery·p0.00:   2915.041 ms/op
                 executeQuery·p0.50:   2998.927 ms/op
                 executeQuery·p0.90:   3082.813 ms/op
                 executeQuery·p0.95:   3082.813 ms/op
                 executeQuery·p0.99:   3082.813 ms/op
                 executeQuery·p0.999:  3082.813 ms/op
                 executeQuery·p0.9999: 3082.813 ms/op
                 executeQuery·p1.00:   3082.813 ms/op

Iteration   4: 2941.256 ±(99.9%) 270.470 ms/op
                 executeQuery·p0.00:   2902.458 ms/op
                 executeQuery·p0.50:   2936.013 ms/op
                 executeQuery·p0.90:   2990.539 ms/op
                 executeQuery·p0.95:   2990.539 ms/op
                 executeQuery·p0.99:   2990.539 ms/op
                 executeQuery·p0.999:  2990.539 ms/op
                 executeQuery·p0.9999: 2990.539 ms/op
                 executeQuery·p1.00:   2990.539 ms/op

Iteration   5: 3017.802 ±(99.9%) 308.632 ms/op
                 executeQuery·p0.00:   2982.150 ms/op
                 executeQuery·p0.50:   3001.025 ms/op
                 executeQuery·p0.90:   3087.008 ms/op
                 executeQuery·p0.95:   3087.008 ms/op
                 executeQuery·p0.99:   3087.008 ms/op
                 executeQuery·p0.999:  3087.008 ms/op
                 executeQuery·p0.9999: 3087.008 ms/op
                 executeQuery·p1.00:   3087.008 ms/op


# Run progress: 96.25% complete, ETA 00:22:41
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3124.756 ±(99.9%) 1426.824 ms/op
# Warmup Iteration   2: 3003.122 ±(99.9%) 1003.197 ms/op
# Warmup Iteration   3: 3037.725 ±(99.9%) 227.169 ms/op
# Warmup Iteration   4: 2982.150 ±(99.9%) 398.339 ms/op
# Warmup Iteration   5: 2956.984 ±(99.9%) 940.198 ms/op
Iteration   1: 3004.170 ±(99.9%) 610.231 ms/op
                 executeQuery·p0.00:   2894.070 ms/op
                 executeQuery·p0.50:   3001.025 ms/op
                 executeQuery·p0.90:   3120.562 ms/op
                 executeQuery·p0.95:   3120.562 ms/op
                 executeQuery·p0.99:   3120.562 ms/op
                 executeQuery·p0.999:  3120.562 ms/op
                 executeQuery·p0.9999: 3120.562 ms/op
                 executeQuery·p1.00:   3120.562 ms/op

Iteration   2: 2979.004 ±(99.9%) 527.127 ms/op
                 executeQuery·p0.00:   2868.904 ms/op
                 executeQuery·p0.50:   2990.539 ms/op
                 executeQuery·p0.90:   3066.036 ms/op
                 executeQuery·p0.95:   3066.036 ms/op
                 executeQuery·p0.99:   3066.036 ms/op
                 executeQuery·p0.999:  3066.036 ms/op
                 executeQuery·p0.9999: 3066.036 ms/op
                 executeQuery·p1.00:   3066.036 ms/op

Iteration   3: 2988.442 ±(99.9%) 396.182 ms/op
                 executeQuery·p0.00:   2923.430 ms/op
                 executeQuery·p0.50:   2980.053 ms/op
                 executeQuery·p0.90:   3070.231 ms/op
                 executeQuery·p0.95:   3070.231 ms/op
                 executeQuery·p0.99:   3070.231 ms/op
                 executeQuery·p0.999:  3070.231 ms/op
                 executeQuery·p0.9999: 3070.231 ms/op
                 executeQuery·p1.00:   3070.231 ms/op

Iteration   4: 2955.936 ±(99.9%) 255.575 ms/op
                 executeQuery·p0.00:   2902.458 ms/op
                 executeQuery·p0.50:   2963.276 ms/op
                 executeQuery·p0.90:   2994.733 ms/op
                 executeQuery·p0.95:   2994.733 ms/op
                 executeQuery·p0.99:   2994.733 ms/op
                 executeQuery·p0.999:  2994.733 ms/op
                 executeQuery·p0.9999: 2994.733 ms/op
                 executeQuery·p1.00:   2994.733 ms/op

Iteration   5: 3049.259 ±(99.9%) 139.962 ms/op
                 executeQuery·p0.00:   3024.093 ms/op
                 executeQuery·p0.50:   3049.259 ms/op
                 executeQuery·p0.90:   3074.425 ms/op
                 executeQuery·p0.95:   3074.425 ms/op
                 executeQuery·p0.99:   3074.425 ms/op
                 executeQuery·p0.999:  3074.425 ms/op
                 executeQuery·p0.9999: 3074.425 ms/op
                 executeQuery·p1.00:   3074.425 ms/op


# Run progress: 96.56% complete, ETA 00:20:48
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3052.405 ±(99.9%) 1234.601 ms/op
# Warmup Iteration   2: 3008.365 ±(99.9%) 1185.838 ms/op
# Warmup Iteration   3: 3052.405 ±(99.9%) 195.916 ms/op
# Warmup Iteration   4: 3023.045 ±(99.9%) 440.589 ms/op
# Warmup Iteration   5: 2937.061 ±(99.9%) 608.624 ms/op
Iteration   1: 3042.968 ±(99.9%) 327.119 ms/op
                 executeQuery·p0.00:   2977.956 ms/op
                 executeQuery·p0.50:   3047.162 ms/op
                 executeQuery·p0.90:   3099.591 ms/op
                 executeQuery·p0.95:   3099.591 ms/op
                 executeQuery·p0.99:   3099.591 ms/op
                 executeQuery·p0.999:  3099.591 ms/op
                 executeQuery·p0.9999: 3099.591 ms/op
                 executeQuery·p1.00:   3099.591 ms/op

Iteration   2: 2973.762 ±(99.9%) 400.791 ms/op
                 executeQuery·p0.00:   2931.818 ms/op
                 executeQuery·p0.50:   2948.596 ms/op
                 executeQuery·p0.90:   3066.036 ms/op
                 executeQuery·p0.95:   3066.036 ms/op
                 executeQuery·p0.99:   3066.036 ms/op
                 executeQuery·p0.999:  3066.036 ms/op
                 executeQuery·p0.9999: 3066.036 ms/op
                 executeQuery·p1.00:   3066.036 ms/op

Iteration   3: 3020.947 ±(99.9%) 737.421 ms/op
                 executeQuery·p0.00:   2852.127 ms/op
                 executeQuery·p0.50:   3063.939 ms/op
                 executeQuery·p0.90:   3103.785 ms/op
                 executeQuery·p0.95:   3103.785 ms/op
                 executeQuery·p0.99:   3103.785 ms/op
                 executeQuery·p0.999:  3103.785 ms/op
                 executeQuery·p0.9999: 3103.785 ms/op
                 executeQuery·p1.00:   3103.785 ms/op

Iteration   4: 2956.984 ±(99.9%) 314.526 ms/op
                 executeQuery·p0.00:   2894.070 ms/op
                 executeQuery·p0.50:   2961.179 ms/op
                 executeQuery·p0.90:   3011.510 ms/op
                 executeQuery·p0.95:   3011.510 ms/op
                 executeQuery·p0.99:   3011.510 ms/op
                 executeQuery·p0.999:  3011.510 ms/op
                 executeQuery·p0.9999: 3011.510 ms/op
                 executeQuery·p1.00:   3011.510 ms/op

Iteration   5: 2976.907 ±(99.9%) 357.777 ms/op
                 executeQuery·p0.00:   2906.653 ms/op
                 executeQuery·p0.50:   2984.247 ms/op
                 executeQuery·p0.90:   3032.482 ms/op
                 executeQuery·p0.95:   3032.482 ms/op
                 executeQuery·p0.99:   3032.482 ms/op
                 executeQuery·p0.999:  3032.482 ms/op
                 executeQuery·p0.9999: 3032.482 ms/op
                 executeQuery·p1.00:   3032.482 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 100
  mean =   2988.525 ±(99.9%) 26.925 ms/op

  Histogram, ms/op:
    [2800.000, 2825.000) = 1 
    [2825.000, 2850.000) = 2 
    [2850.000, 2875.000) = 6 
    [2875.000, 2900.000) = 5 
    [2900.000, 2925.000) = 11 
    [2925.000, 2950.000) = 8 
    [2950.000, 2975.000) = 12 
    [2975.000, 3000.000) = 15 
    [3000.000, 3025.000) = 5 
    [3025.000, 3050.000) = 5 
    [3050.000, 3075.000) = 14 
    [3075.000, 3100.000) = 11 
    [3100.000, 3125.000) = 3 
    [3125.000, 3150.000) = 0 
    [3150.000, 3175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2822.767 ms/op
     p(50.0000) =   2982.150 ms/op
     p(90.0000) =   3087.008 ms/op
     p(95.0000) =   3103.575 ms/op
     p(99.0000) =   3179.031 ms/op
     p(99.9000) =   3179.282 ms/op
     p(99.9900) =   3179.282 ms/op
     p(99.9990) =   3179.282 ms/op
     p(99.9999) =   3179.282 ms/op
    p(100.0000) =   3179.282 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6)

# Run progress: 96.88% complete, ETA 00:18:55
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3298.121 ±(99.9%) 2701.410 ms/op
# Warmup Iteration   2: 3182.428 ±(99.9%) 729.743 ms/op
# Warmup Iteration   3: 3085.959 ±(99.9%) 232.496 ms/op
# Warmup Iteration   4: 3158.311 ±(99.9%) 396.491 ms/op
# Warmup Iteration   5: 3111.125 ±(99.9%) 490.055 ms/op
Iteration   1: 3135.242 ±(99.9%) 129.984 ms/op
                 executeQuery·p0.00:   3112.174 ms/op
                 executeQuery·p0.50:   3137.339 ms/op
                 executeQuery·p0.90:   3154.117 ms/op
                 executeQuery·p0.95:   3154.117 ms/op
                 executeQuery·p0.99:   3154.117 ms/op
                 executeQuery·p0.999:  3154.117 ms/op
                 executeQuery·p0.9999: 3154.117 ms/op
                 executeQuery·p1.00:   3154.117 ms/op

Iteration   2: 3185.574 ±(99.9%) 328.613 ms/op
                 executeQuery·p0.00:   3116.368 ms/op
                 executeQuery·p0.50:   3198.157 ms/op
                 executeQuery·p0.90:   3229.614 ms/op
                 executeQuery·p0.95:   3229.614 ms/op
                 executeQuery·p0.99:   3229.614 ms/op
                 executeQuery·p0.999:  3229.614 ms/op
                 executeQuery·p0.9999: 3229.614 ms/op
                 executeQuery·p1.00:   3229.614 ms/op

Iteration   3: 3059.745 ±(99.9%) 752.906 ms/op
                 executeQuery·p0.00:   2915.041 ms/op
                 executeQuery·p0.50:   3066.036 ms/op
                 executeQuery·p0.90:   3191.865 ms/op
                 executeQuery·p0.95:   3191.865 ms/op
                 executeQuery·p0.99:   3191.865 ms/op
                 executeQuery·p0.999:  3191.865 ms/op
                 executeQuery·p0.9999: 3191.865 ms/op
                 executeQuery·p1.00:   3191.865 ms/op

Iteration   4: 3133.145 ±(99.9%) 316.079 ms/op
                 executeQuery·p0.00:   3066.036 ms/op
                 executeQuery·p0.50:   3141.534 ms/op
                 executeQuery·p0.90:   3183.477 ms/op
                 executeQuery·p0.95:   3183.477 ms/op
                 executeQuery·p0.99:   3183.477 ms/op
                 executeQuery·p0.999:  3183.477 ms/op
                 executeQuery·p0.9999: 3183.477 ms/op
                 executeQuery·p1.00:   3183.477 ms/op

Iteration   5: 3225.420 ±(99.9%) 271.035 ms/op
                 executeQuery·p0.00:   3170.894 ms/op
                 executeQuery·p0.50:   3229.614 ms/op
                 executeQuery·p0.90:   3271.557 ms/op
                 executeQuery·p0.95:   3271.557 ms/op
                 executeQuery·p0.99:   3271.557 ms/op
                 executeQuery·p0.999:  3271.557 ms/op
                 executeQuery·p0.9999: 3271.557 ms/op
                 executeQuery·p1.00:   3271.557 ms/op


# Run progress: 97.19% complete, ETA 00:17:02
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3274.353 ±(99.9%) 4932.011 ms/op
# Warmup Iteration   2: 3136.291 ±(99.9%) 227.169 ms/op
# Warmup Iteration   3: 3114.271 ±(99.9%) 764.205 ms/op
# Warmup Iteration   4: 3037.725 ±(99.9%) 878.081 ms/op
# Warmup Iteration   5: 3049.259 ±(99.9%) 154.910 ms/op
Iteration   1: 3148.874 ±(99.9%) 1021.909 ms/op
                 executeQuery·p0.00:   2990.539 ms/op
                 executeQuery·p0.50:   3118.465 ms/op
                 executeQuery·p0.90:   3368.026 ms/op
                 executeQuery·p0.95:   3368.026 ms/op
                 executeQuery·p0.99:   3368.026 ms/op
                 executeQuery·p0.999:  3368.026 ms/op
                 executeQuery·p0.9999: 3368.026 ms/op
                 executeQuery·p1.00:   3368.026 ms/op

Iteration   2: 3062.890 ±(99.9%) 357.777 ms/op
                 executeQuery·p0.00:   2982.150 ms/op
                 executeQuery·p0.50:   3080.716 ms/op
                 executeQuery·p0.90:   3107.979 ms/op
                 executeQuery·p0.95:   3107.979 ms/op
                 executeQuery·p0.99:   3107.979 ms/op
                 executeQuery·p0.999:  3107.979 ms/op
                 executeQuery·p0.9999: 3107.979 ms/op
                 executeQuery·p1.00:   3107.979 ms/op

Iteration   3: 3061.842 ±(99.9%) 301.000 ms/op
                 executeQuery·p0.00:   2994.733 ms/op
                 executeQuery·p0.50:   3078.619 ms/op
                 executeQuery·p0.90:   3095.396 ms/op
                 executeQuery·p0.95:   3095.396 ms/op
                 executeQuery·p0.99:   3095.396 ms/op
                 executeQuery·p0.999:  3095.396 ms/op
                 executeQuery·p0.9999: 3095.396 ms/op
                 executeQuery·p1.00:   3095.396 ms/op

Iteration   4: 3005.219 ±(99.9%) 232.628 ms/op
                 executeQuery·p0.00:   2956.984 ms/op
                 executeQuery·p0.50:   3013.607 ms/op
                 executeQuery·p0.90:   3036.676 ms/op
                 executeQuery·p0.95:   3036.676 ms/op
                 executeQuery·p0.99:   3036.676 ms/op
                 executeQuery·p0.999:  3036.676 ms/op
                 executeQuery·p0.9999: 3036.676 ms/op
                 executeQuery·p1.00:   3036.676 ms/op

Iteration   5: 3143.631 ±(99.9%) 298.959 ms/op
                 executeQuery·p0.00:   3074.425 ms/op
                 executeQuery·p0.50:   3164.602 ms/op
                 executeQuery·p0.90:   3170.894 ms/op
                 executeQuery·p0.95:   3170.894 ms/op
                 executeQuery·p0.99:   3170.894 ms/op
                 executeQuery·p0.999:  3170.894 ms/op
                 executeQuery·p0.9999: 3170.894 ms/op
                 executeQuery·p1.00:   3170.894 ms/op


# Run progress: 97.50% complete, ETA 00:15:08
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3255.828 ±(99.9%) 1285.896 ms/op
# Warmup Iteration   2: 3096.445 ±(99.9%) 860.048 ms/op
# Warmup Iteration   3: 3078.619 ±(99.9%) 508.026 ms/op
# Warmup Iteration   4: 3075.473 ±(99.9%) 452.110 ms/op
# Warmup Iteration   5: 3060.793 ±(99.9%) 707.942 ms/op
Iteration   1: 3078.619 ±(99.9%) 833.921 ms/op
                 executeQuery·p0.00:   2936.013 ms/op
                 executeQuery·p0.50:   3091.202 ms/op
                 executeQuery·p0.90:   3196.060 ms/op
                 executeQuery·p0.95:   3196.060 ms/op
                 executeQuery·p0.99:   3196.060 ms/op
                 executeQuery·p0.999:  3196.060 ms/op
                 executeQuery·p0.9999: 3196.060 ms/op
                 executeQuery·p1.00:   3196.060 ms/op

Iteration   2: 3041.919 ±(99.9%) 171.953 ms/op
                 executeQuery·p0.00:   3011.510 ms/op
                 executeQuery·p0.50:   3040.870 ms/op
                 executeQuery·p0.90:   3074.425 ms/op
                 executeQuery·p0.95:   3074.425 ms/op
                 executeQuery·p0.99:   3074.425 ms/op
                 executeQuery·p0.999:  3074.425 ms/op
                 executeQuery·p0.9999: 3074.425 ms/op
                 executeQuery·p1.00:   3074.425 ms/op

Iteration   3: 3115.319 ±(99.9%) 284.587 ms/op
                 executeQuery·p0.00:   3053.453 ms/op
                 executeQuery·p0.50:   3126.854 ms/op
                 executeQuery·p0.90:   3154.117 ms/op
                 executeQuery·p0.95:   3154.117 ms/op
                 executeQuery·p0.99:   3154.117 ms/op
                 executeQuery·p0.999:  3154.117 ms/op
                 executeQuery·p0.9999: 3154.117 ms/op
                 executeQuery·p1.00:   3154.117 ms/op

Iteration   4: 3150.971 ±(99.9%) 712.425 ms/op
                 executeQuery·p0.00:   3003.122 ms/op
                 executeQuery·p0.50:   3175.088 ms/op
                 executeQuery·p0.90:   3250.586 ms/op
                 executeQuery·p0.95:   3250.586 ms/op
                 executeQuery·p0.99:   3250.586 ms/op
                 executeQuery·p0.999:  3250.586 ms/op
                 executeQuery·p0.9999: 3250.586 ms/op
                 executeQuery·p1.00:   3250.586 ms/op

Iteration   5: 3063.939 ±(99.9%) 514.492 ms/op
                 executeQuery·p0.00:   2948.596 ms/op
                 executeQuery·p0.50:   3089.105 ms/op
                 executeQuery·p0.90:   3128.951 ms/op
                 executeQuery·p0.95:   3128.951 ms/op
                 executeQuery·p0.99:   3128.951 ms/op
                 executeQuery·p0.999:  3128.951 ms/op
                 executeQuery·p0.9999: 3128.951 ms/op
                 executeQuery·p1.00:   3128.951 ms/op


# Run progress: 97.81% complete, ETA 00:13:15
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3180.331 ±(99.9%) 1279.597 ms/op
# Warmup Iteration   2: 3121.611 ±(99.9%) 695.731 ms/op
# Warmup Iteration   3: 3123.708 ±(99.9%) 949.882 ms/op
# Warmup Iteration   4: 3070.231 ±(99.9%) 358.888 ms/op
# Warmup Iteration   5: 3050.308 ±(99.9%) 922.151 ms/op
Iteration   1: 3092.251 ±(99.9%) 463.872 ms/op
                 executeQuery·p0.00:   3028.287 ms/op
                 executeQuery·p0.50:   3089.105 ms/op
                 executeQuery·p0.90:   3162.505 ms/op
                 executeQuery·p0.95:   3162.505 ms/op
                 executeQuery·p0.99:   3162.505 ms/op
                 executeQuery·p0.999:  3162.505 ms/op
                 executeQuery·p0.9999: 3162.505 ms/op
                 executeQuery·p1.00:   3162.505 ms/op

Iteration   2: 3084.911 ±(99.9%) 524.391 ms/op
                 executeQuery·p0.00:   2982.150 ms/op
                 executeQuery·p0.50:   3103.785 ms/op
                 executeQuery·p0.90:   3149.922 ms/op
                 executeQuery·p0.95:   3149.922 ms/op
                 executeQuery·p0.99:   3149.922 ms/op
                 executeQuery·p0.999:  3149.922 ms/op
                 executeQuery·p0.9999: 3149.922 ms/op
                 executeQuery·p1.00:   3149.922 ms/op

Iteration   3: 3112.174 ±(99.9%) 484.338 ms/op
                 executeQuery·p0.00:   3045.065 ms/op
                 executeQuery·p0.50:   3099.591 ms/op
                 executeQuery·p0.90:   3204.448 ms/op
                 executeQuery·p0.95:   3204.448 ms/op
                 executeQuery·p0.99:   3204.448 ms/op
                 executeQuery·p0.999:  3204.448 ms/op
                 executeQuery·p0.9999: 3204.448 ms/op
                 executeQuery·p1.00:   3204.448 ms/op

Iteration   4: 3140.485 ±(99.9%) 226.089 ms/op
                 executeQuery·p0.00:   3107.979 ms/op
                 executeQuery·p0.50:   3135.242 ms/op
                 executeQuery·p0.90:   3183.477 ms/op
                 executeQuery·p0.95:   3183.477 ms/op
                 executeQuery·p0.99:   3183.477 ms/op
                 executeQuery·p0.999:  3183.477 ms/op
                 executeQuery·p0.9999: 3183.477 ms/op
                 executeQuery·p1.00:   3183.477 ms/op

Iteration   5: 3066.036 ±(99.9%) 853.941 ms/op
                 executeQuery·p0.00:   2910.847 ms/op
                 executeQuery·p0.50:   3059.745 ms/op
                 executeQuery·p0.90:   3233.808 ms/op
                 executeQuery·p0.95:   3233.808 ms/op
                 executeQuery·p0.99:   3233.808 ms/op
                 executeQuery·p0.999:  3233.808 ms/op
                 executeQuery·p0.9999: 3233.808 ms/op
                 executeQuery·p1.00:   3233.808 ms/op


# Run progress: 98.13% complete, ETA 00:11:22
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3180.331 ±(99.9%) 1314.708 ms/op
# Warmup Iteration   2: 3104.834 ±(99.9%) 556.063 ms/op
# Warmup Iteration   3: 3074.425 ±(99.9%) 547.912 ms/op
# Warmup Iteration   4: 3114.271 ±(99.9%) 719.989 ms/op
# Warmup Iteration   5: 3063.939 ±(99.9%) 586.131 ms/op
Iteration   1: 3096.445 ±(99.9%) 276.735 ms/op
                 executeQuery·p0.00:   3045.065 ms/op
                 executeQuery·p0.50:   3097.494 ms/op
                 executeQuery·p0.90:   3145.728 ms/op
                 executeQuery·p0.95:   3145.728 ms/op
                 executeQuery·p0.99:   3145.728 ms/op
                 executeQuery·p0.999:  3145.728 ms/op
                 executeQuery·p0.9999: 3145.728 ms/op
                 executeQuery·p1.00:   3145.728 ms/op

Iteration   2: 3070.231 ±(99.9%) 864.202 ms/op
                 executeQuery·p0.00:   2906.653 ms/op
                 executeQuery·p0.50:   3072.328 ms/op
                 executeQuery·p0.90:   3229.614 ms/op
                 executeQuery·p0.95:   3229.614 ms/op
                 executeQuery·p0.99:   3229.614 ms/op
                 executeQuery·p0.999:  3229.614 ms/op
                 executeQuery·p0.9999: 3229.614 ms/op
                 executeQuery·p1.00:   3229.614 ms/op

Iteration   3: 3095.396 ±(99.9%) 528.809 ms/op
                 executeQuery·p0.00:   3007.316 ms/op
                 executeQuery·p0.50:   3099.591 ms/op
                 executeQuery·p0.90:   3175.088 ms/op
                 executeQuery·p0.95:   3175.088 ms/op
                 executeQuery·p0.99:   3175.088 ms/op
                 executeQuery·p0.999:  3175.088 ms/op
                 executeQuery·p0.9999: 3175.088 ms/op
                 executeQuery·p1.00:   3175.088 ms/op

Iteration   4: 3124.756 ±(99.9%) 189.078 ms/op
                 executeQuery·p0.00:   3099.591 ms/op
                 executeQuery·p0.50:   3116.368 ms/op
                 executeQuery·p0.90:   3166.700 ms/op
                 executeQuery·p0.95:   3166.700 ms/op
                 executeQuery·p0.99:   3166.700 ms/op
                 executeQuery·p0.999:  3166.700 ms/op
                 executeQuery·p0.9999: 3166.700 ms/op
                 executeQuery·p1.00:   3166.700 ms/op

Iteration   5: 3068.133 ±(99.9%) 721.009 ms/op
                 executeQuery·p0.00:   2923.430 ms/op
                 executeQuery·p0.50:   3078.619 ms/op
                 executeQuery·p0.90:   3191.865 ms/op
                 executeQuery·p0.95:   3191.865 ms/op
                 executeQuery·p0.99:   3191.865 ms/op
                 executeQuery·p0.999:  3191.865 ms/op
                 executeQuery·p0.9999: 3191.865 ms/op
                 executeQuery·p1.00:   3191.865 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 100
  mean =   3102.527 ±(99.9%) 29.137 ms/op

  Histogram, ms/op:
    [2900.000, 2950.000) = 6 
    [2950.000, 3000.000) = 6 
    [3000.000, 3050.000) = 15 
    [3050.000, 3100.000) = 21 
    [3100.000, 3150.000) = 23 
    [3150.000, 3200.000) = 18 
    [3200.000, 3250.000) = 8 
    [3250.000, 3300.000) = 2 
    [3300.000, 3350.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2906.653 ms/op
     p(50.0000) =   3110.076 ms/op
     p(90.0000) =   3215.773 ms/op
     p(95.0000) =   3233.599 ms/op
     p(99.0000) =   3367.061 ms/op
     p(99.9000) =   3368.026 ms/op
     p(99.9900) =   3368.026 ms/op
     p(99.9990) =   3368.026 ms/op
     p(99.9999) =   3368.026 ms/op
    p(100.0000) =   3368.026 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8)

# Run progress: 98.44% complete, ETA 00:09:28
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3394.590 ±(99.9%) 4257.917 ms/op
# Warmup Iteration   2: 3268.411 ±(99.9%) 633.077 ms/op
# Warmup Iteration   3: 3185.574 ±(99.9%) 386.800 ms/op
# Warmup Iteration   4: 3218.080 ±(99.9%) 423.588 ms/op
# Warmup Iteration   5: 3255.828 ±(99.9%) 1106.359 ms/op
Iteration   1: 3175.088 ±(99.9%) 868.160 ms/op
                 executeQuery·p0.00:   3040.870 ms/op
                 executeQuery·p0.50:   3179.282 ms/op
                 executeQuery·p0.90:   3300.917 ms/op
                 executeQuery·p0.95:   3300.917 ms/op
                 executeQuery·p0.99:   3300.917 ms/op
                 executeQuery·p0.999:  3300.917 ms/op
                 executeQuery·p0.9999: 3300.917 ms/op
                 executeQuery·p1.00:   3300.917 ms/op

Iteration   2: 3165.651 ±(99.9%) 622.546 ms/op
                 executeQuery·p0.00:   3070.231 ms/op
                 executeQuery·p0.50:   3168.797 ms/op
                 executeQuery·p0.90:   3254.780 ms/op
                 executeQuery·p0.95:   3254.780 ms/op
                 executeQuery·p0.99:   3254.780 ms/op
                 executeQuery·p0.999:  3254.780 ms/op
                 executeQuery·p0.9999: 3254.780 ms/op
                 executeQuery·p1.00:   3254.780 ms/op

Iteration   3: 3191.865 ±(99.9%) 526.488 ms/op
                 executeQuery·p0.00:   3087.008 ms/op
                 executeQuery·p0.50:   3204.448 ms/op
                 executeQuery·p0.90:   3271.557 ms/op
                 executeQuery·p0.95:   3271.557 ms/op
                 executeQuery·p0.99:   3271.557 ms/op
                 executeQuery·p0.999:  3271.557 ms/op
                 executeQuery·p0.9999: 3271.557 ms/op
                 executeQuery·p1.00:   3271.557 ms/op

Iteration   4: 3273.654 ±(99.9%) 154.117 ms/op
                 executeQuery·p0.00:   3246.391 ms/op
                 executeQuery·p0.50:   3273.654 ms/op
                 executeQuery·p0.90:   3300.917 ms/op
                 executeQuery·p0.95:   3300.917 ms/op
                 executeQuery·p0.99:   3300.917 ms/op
                 executeQuery·p0.999:  3300.917 ms/op
                 executeQuery·p0.9999: 3300.917 ms/op
                 executeQuery·p1.00:   3300.917 ms/op

Iteration   5: 3182.428 ±(99.9%) 198.400 ms/op
                 executeQuery·p0.00:   3158.311 ms/op
                 executeQuery·p0.50:   3172.991 ms/op
                 executeQuery·p0.90:   3225.420 ms/op
                 executeQuery·p0.95:   3225.420 ms/op
                 executeQuery·p0.99:   3225.420 ms/op
                 executeQuery·p0.999:  3225.420 ms/op
                 executeQuery·p0.9999: 3225.420 ms/op
                 executeQuery·p1.00:   3225.420 ms/op


# Run progress: 98.75% complete, ETA 00:07:35
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3369.424 ±(99.9%) 4288.064 ms/op
# Warmup Iteration   2: 3214.934 ±(99.9%) 379.772 ms/op
# Warmup Iteration   3: 3205.497 ±(99.9%) 786.275 ms/op
# Warmup Iteration   4: 3199.205 ±(99.9%) 906.349 ms/op
# Warmup Iteration   5: 3132.097 ±(99.9%) 440.589 ms/op
Iteration   1: 3175.088 ±(99.9%) 590.501 ms/op
                 executeQuery·p0.00:   3049.259 ms/op
                 executeQuery·p0.50:   3200.254 ms/op
                 executeQuery·p0.90:   3250.586 ms/op
                 executeQuery·p0.95:   3250.586 ms/op
                 executeQuery·p0.99:   3250.586 ms/op
                 executeQuery·p0.999:  3250.586 ms/op
                 executeQuery·p0.9999: 3250.586 ms/op
                 executeQuery·p1.00:   3250.586 ms/op

Iteration   2: 3172.991 ±(99.9%) 948.624 ms/op
                 executeQuery·p0.00:   3066.036 ms/op
                 executeQuery·p0.50:   3120.562 ms/op
                 executeQuery·p0.90:   3384.803 ms/op
                 executeQuery·p0.95:   3384.803 ms/op
                 executeQuery·p0.99:   3384.803 ms/op
                 executeQuery·p0.999:  3384.803 ms/op
                 executeQuery·p0.9999: 3384.803 ms/op
                 executeQuery·p1.00:   3384.803 ms/op

Iteration   3: 3229.614 ±(99.9%) 287.689 ms/op
                 executeQuery·p0.00:   3166.700 ms/op
                 executeQuery·p0.50:   3244.294 ms/op
                 executeQuery·p0.90:   3263.169 ms/op
                 executeQuery·p0.95:   3263.169 ms/op
                 executeQuery·p0.99:   3263.169 ms/op
                 executeQuery·p0.999:  3263.169 ms/op
                 executeQuery·p0.9999: 3263.169 ms/op
                 executeQuery·p1.00:   3263.169 ms/op

Iteration   4: 3222.274 ±(99.9%) 235.635 ms/op
                 executeQuery·p0.00:   3183.477 ms/op
                 executeQuery·p0.50:   3217.031 ms/op
                 executeQuery·p0.90:   3271.557 ms/op
                 executeQuery·p0.95:   3271.557 ms/op
                 executeQuery·p0.99:   3271.557 ms/op
                 executeQuery·p0.999:  3271.557 ms/op
                 executeQuery·p0.9999: 3271.557 ms/op
                 executeQuery·p1.00:   3271.557 ms/op

Iteration   5: 3228.566 ±(99.9%) 200.853 ms/op
                 executeQuery·p0.00:   3200.254 ms/op
                 executeQuery·p0.50:   3225.420 ms/op
                 executeQuery·p0.90:   3263.169 ms/op
                 executeQuery·p0.95:   3263.169 ms/op
                 executeQuery·p0.99:   3263.169 ms/op
                 executeQuery·p0.999:  3263.169 ms/op
                 executeQuery·p0.9999: 3263.169 ms/op
                 executeQuery·p1.00:   3263.169 ms/op


# Run progress: 99.06% complete, ETA 00:05:41
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_128375920 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_128375920(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_128375920> join_map = new Int_Multi_Object_Map<JRT_128375920>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_569826907 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_569826907(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_569826907> join_map_0 = new Int_Multi_Object_Map<JRT_569826907>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_569826907 left_join_record = new JRT_569826907(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_569826907> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_569826907 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_128375920 left_join_record_0 = new JRT_128375920(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_128375920> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_128375920 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3463.097 ±(99.9%) 4819.123 ms/op
# Warmup Iteration   2: 3252.683 ±(99.9%) 154.117 ms/op
# Warmup Iteration   3: 3221.225 ±(99.9%) 332.686 ms/op
# Warmup Iteration   4: 3247.440 ±(99.9%) 668.081 ms/op
# Warmup Iteration   5: 3234.857 ±(99.9%) 527.127 ms/op
Iteration   1: 3198.157 ±(99.9%) 401.096 ms/op
                 executeQuery·p0.00:   3149.922 ms/op
                 executeQuery·p0.50:   3181.380 ms/op
                 executeQuery·p0.90:   3279.946 ms/op
                 executeQuery·p0.95:   3279.946 ms/op
                 executeQuery·p0.99:   3279.946 ms/op
                 executeQuery·p0.999:  3279.946 ms/op
                 executeQuery·p0.9999: 3279.946 ms/op
                 executeQuery·p1.00:   3279.946 ms/op

Iteration   2: 3197.108 ±(99.9%) 371.872 ms/op
                 executeQuery·p0.00:   3154.117 ms/op
                 executeQuery·p0.50:   3179.282 ms/op
                 executeQuery·p0.90:   3275.751 ms/op
                 executeQuery·p0.95:   3275.751 ms/op
                 executeQuery·p0.99:   3275.751 ms/op
                 executeQuery·p0.999:  3275.751 ms/op
                 executeQuery·p0.9999: 3275.751 ms/op
                 executeQuery·p1.00:   3275.751 ms/op

Iteration   3: 3255.828 ±(99.9%) 425.894 ms/op
                 executeQuery·p0.00:   3170.894 ms/op
                 executeQuery·p0.50:   3261.071 ms/op
                 executeQuery·p0.90:   3330.277 ms/op
                 executeQuery·p0.95:   3330.277 ms/op
                 executeQuery·p0.99:   3330.277 ms/op
                 executeQuery·p0.999:  3330.277 ms/op
                 executeQuery·p0.9999: 3330.277 ms/op
                 executeQuery·p1.00:   3330.277 ms/op

Iteration   4: 3184.525 ±(99.9%) 544.943 ms/op
                 executeQuery·p0.00:   3124.756 ms/op
                 executeQuery·p0.50:   3152.019 ms/op
                 executeQuery·p0.90:   3309.306 ms/op
                 executeQuery·p0.95:   3309.306 ms/op
                 executeQuery·p0.99:   3309.306 ms/op
                 executeQuery·p0.999:  3309.306 ms/op
                 executeQuery·p0.9999: 3309.306 ms/op
                 executeQuery·p1.00:   3309.306 ms/op

Iteration   5: 3159.359 ±(99.9%) 404.667 ms/op
                 executeQuery·p0.00:   3091.202 ms/op
                 executeQuery·p0.50:   3154.117 ms/op
                 executeQuery·p0.90:   3238.003 ms/op
                 executeQuery·p0.95:   3238.003 ms/op
                 executeQuery·p0.99:   3238.003 ms/op
                 executeQuery·p0.999:  3238.003 ms/op
                 executeQuery·p0.9999: 3238.003 ms/op
                 executeQuery·p1.00:   3238.003 ms/op


# Run progress: 99.38% complete, ETA 00:03:47
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3352.647 ±(99.9%) 4178.098 ms/op
# Warmup Iteration   2: 3059.745 ±(99.9%) 669.957 ms/op
# Warmup Iteration   3: 3109.028 ±(99.9%) 536.794 ms/op
# Warmup Iteration   4: 3250.586 ±(99.9%) 556.778 ms/op
# Warmup Iteration   5: 3128.951 ±(99.9%) 313.746 ms/op
Iteration   1: 3187.671 ±(99.9%) 742.261 ms/op
                 executeQuery·p0.00:   3099.591 ms/op
                 executeQuery·p0.50:   3152.019 ms/op
                 executeQuery·p0.90:   3347.055 ms/op
                 executeQuery·p0.95:   3347.055 ms/op
                 executeQuery·p0.99:   3347.055 ms/op
                 executeQuery·p0.999:  3347.055 ms/op
                 executeQuery·p0.9999: 3347.055 ms/op
                 executeQuery·p1.00:   3347.055 ms/op

Iteration   2: 3207.594 ±(99.9%) 509.169 ms/op
                 executeQuery·p0.00:   3120.562 ms/op
                 executeQuery·p0.50:   3202.351 ms/op
                 executeQuery·p0.90:   3305.112 ms/op
                 executeQuery·p0.95:   3305.112 ms/op
                 executeQuery·p0.99:   3305.112 ms/op
                 executeQuery·p0.999:  3305.112 ms/op
                 executeQuery·p0.9999: 3305.112 ms/op
                 executeQuery·p1.00:   3305.112 ms/op

Iteration   3: 3177.185 ±(99.9%) 394.323 ms/op
                 executeQuery·p0.00:   3087.008 ms/op
                 executeQuery·p0.50:   3200.254 ms/op
                 executeQuery·p0.90:   3221.225 ms/op
                 executeQuery·p0.95:   3221.225 ms/op
                 executeQuery·p0.99:   3221.225 ms/op
                 executeQuery·p0.999:  3221.225 ms/op
                 executeQuery·p0.9999: 3221.225 ms/op
                 executeQuery·p1.00:   3221.225 ms/op

Iteration   4: 3227.517 ±(99.9%) 567.882 ms/op
                 executeQuery·p0.00:   3116.368 ms/op
                 executeQuery·p0.50:   3231.711 ms/op
                 executeQuery·p0.90:   3330.277 ms/op
                 executeQuery·p0.95:   3330.277 ms/op
                 executeQuery·p0.99:   3330.277 ms/op
                 executeQuery·p0.999:  3330.277 ms/op
                 executeQuery·p0.9999: 3330.277 ms/op
                 executeQuery·p1.00:   3330.277 ms/op

Iteration   5: 3236.954 ±(99.9%) 432.738 ms/op
                 executeQuery·p0.00:   3154.117 ms/op
                 executeQuery·p0.50:   3240.100 ms/op
                 executeQuery·p0.90:   3313.500 ms/op
                 executeQuery·p0.95:   3313.500 ms/op
                 executeQuery·p0.99:   3313.500 ms/op
                 executeQuery·p0.999:  3313.500 ms/op
                 executeQuery·p0.9999: 3313.500 ms/op
                 executeQuery·p1.00:   3313.500 ms/op


# Run progress: 99.69% complete, ETA 00:01:53
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class JRT_909559406 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;
    public final int ord_3;
    public final int ord_4;
    public final int ord_5;

    public JRT_909559406(int ord_0, int ord_1, int ord_2, int ord_3, int ord_4, int ord_5) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
        this.ord_3 = ord_3;
        this.ord_4 = ord_4;
        this.ord_5 = ord_5;
    }
}

Int_Multi_Object_Map<JRT_909559406> join_map = new Int_Multi_Object_Map<JRT_909559406>();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class JRT_1769505713 {
    public final int ord_0;
    public final int ord_1;
    public final int ord_2;

    public JRT_1769505713(int ord_0, int ord_1, int ord_2) {
        this.ord_0 = ord_0;
        this.ord_1 = ord_1;
        this.ord_2 = ord_2;
    }
}

Int_Multi_Object_Map<JRT_1769505713> join_map_0 = new Int_Multi_Object_Map<JRT_1769505713>();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = (org.apache.arrow.vector.IntVector) table_A.getVector(0);
    org.apache.arrow.vector.IntVector table_A_vc_1 = (org.apache.arrow.vector.IntVector) table_A.getVector(1);
    org.apache.arrow.vector.IntVector table_A_vc_2 = (org.apache.arrow.vector.IntVector) table_A.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_A_vc_0);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        JRT_1769505713 left_join_record = new JRT_1769505713(left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
        join_map_0.add(left_join_record_key, pre_hash_vector_0[i], left_join_record);
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = (org.apache.arrow.vector.IntVector) table_B.getVector(0);
    org.apache.arrow.vector.IntVector table_B_vc_1 = (org.apache.arrow.vector.IntVector) table_B.getVector(1);
    org.apache.arrow.vector.IntVector table_B_vc_2 = (org.apache.arrow.vector.IntVector) table_B.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector_0, table_B_vc_0);
    int recordCount = table_B_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_B_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentRecordIndex];
            if (!join_map_0.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_1769505713> records_to_join_list = join_map_0.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentRecordIndex);
            foreach (JRT_1769505713 left_join_record : records_to_join_list) {
                join_result_vector_ord_0_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1_0[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2_0[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex);
        for (int i = 0; i < currentResultIndex; i++) {
            int left_join_record_key = join_result_vector_ord_1_0[i];
            JRT_909559406 left_join_record_0 = new JRT_909559406(join_result_vector_ord_0_0[i], left_join_record_key, join_result_vector_ord_2_0[i], join_result_vector_ord_3_0[i], join_result_vector_ord_4_0[i], join_result_vector_ord_5_0[i]);
            join_map.add(left_join_record_key, pre_hash_vector[i], left_join_record_0);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = (org.apache.arrow.vector.IntVector) table_C.getVector(0);
    org.apache.arrow.vector.IntVector table_C_vc_1 = (org.apache.arrow.vector.IntVector) table_C.getVector(1);
    org.apache.arrow.vector.IntVector table_C_vc_2 = (org.apache.arrow.vector.IntVector) table_C.getVector(2);
    VectorisedHashOperators.constructPreHashKeyVectorSIMD(pre_hash_vector, table_C_vc_0);
    int recordCount = table_C_vc_0.getValueCount();
    int currentRecordIndex = 0;
    while (currentRecordIndex < recordCount) {
        int currentResultIndex = 0;
        while (currentRecordIndex < recordCount) {
            int right_join_key = table_C_vc_0.get(currentRecordIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentRecordIndex];
            if (!join_map.contains(right_join_key, right_join_key_pre_hash)) {
                currentRecordIndex++;
                continue;
            }
            List<JRT_909559406> records_to_join_list = join_map.get(right_join_key, right_join_key_pre_hash);
            if (records_to_join_list.size() > VectorisedOperators.VECTOR_LENGTH - currentResultIndex) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentRecordIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentRecordIndex);
            foreach (JRT_909559406 left_join_record : records_to_join_list) {
                join_result_vector_ord_0[currentResultIndex] = left_join_record.ord_0;
                join_result_vector_ord_1[currentResultIndex] = left_join_record.ord_1;
                join_result_vector_ord_2[currentResultIndex] = left_join_record.ord_2;
                join_result_vector_ord_3[currentResultIndex] = left_join_record.ord_3;
                join_result_vector_ord_4[currentResultIndex] = left_join_record.ord_4;
                join_result_vector_ord_5[currentResultIndex] = left_join_record.ord_5;
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentRecordIndex++;
        }
        agg_0_count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

3359.638 ±(99.9%) 4595.645 ms/op
# Warmup Iteration   2: 3222.274 ±(99.9%) 805.048 ms/op
# Warmup Iteration   3: 3183.477 ±(99.9%) 402.011 ms/op
# Warmup Iteration   4: 3169.845 ±(99.9%) 529.445 ms/op
# Warmup Iteration   5: 3165.651 ±(99.9%) 838.131 ms/op
Iteration   1: 3210.740 ±(99.9%) 507.302 ms/op
                 executeQuery·p0.00:   3133.145 ms/op
                 executeQuery·p0.50:   3204.448 ms/op
                 executeQuery·p0.90:   3300.917 ms/op
                 executeQuery·p0.95:   3300.917 ms/op
                 executeQuery·p0.99:   3300.917 ms/op
                 executeQuery·p0.999:  3300.917 ms/op
                 executeQuery·p0.9999: 3300.917 ms/op
                 executeQuery·p1.00:   3300.917 ms/op

Iteration   2: 3260.023 ±(99.9%) 422.430 ms/op
                 executeQuery·p0.00:   3196.060 ms/op
                 executeQuery·p0.50:   3246.391 ms/op
                 executeQuery·p0.90:   3351.249 ms/op
                 executeQuery·p0.95:   3351.249 ms/op
                 executeQuery·p0.99:   3351.249 ms/op
                 executeQuery·p0.999:  3351.249 ms/op
                 executeQuery·p0.9999: 3351.249 ms/op
                 executeQuery·p1.00:   3351.249 ms/op

Iteration   3: 3191.865 ±(99.9%) 742.921 ms/op
                 executeQuery·p0.00:   3049.259 ms/op
                 executeQuery·p0.50:   3196.060 ms/op
                 executeQuery·p0.90:   3326.083 ms/op
                 executeQuery·p0.95:   3326.083 ms/op
                 executeQuery·p0.99:   3326.083 ms/op
                 executeQuery·p0.999:  3326.083 ms/op
                 executeQuery·p0.9999: 3326.083 ms/op
                 executeQuery·p1.00:   3326.083 ms/op

Iteration   4: 3236.954 ±(99.9%) 352.259 ms/op
                 executeQuery·p0.00:   3158.311 ms/op
                 executeQuery·p0.50:   3252.683 ms/op
                 executeQuery·p0.90:   3284.140 ms/op
                 executeQuery·p0.95:   3284.140 ms/op
                 executeQuery·p0.99:   3284.140 ms/op
                 executeQuery·p0.999:  3284.140 ms/op
                 executeQuery·p0.9999: 3284.140 ms/op
                 executeQuery·p1.00:   3284.140 ms/op

Iteration   5: 3172.991 ±(99.9%) 651.426 ms/op
                 executeQuery·p0.00:   3024.093 ms/op
                 executeQuery·p0.50:   3210.740 ms/op
                 executeQuery·p0.90:   3246.391 ms/op
                 executeQuery·p0.95:   3246.391 ms/op
                 executeQuery·p0.99:   3246.391 ms/op
                 executeQuery·p0.999:  3246.391 ms/op
                 executeQuery·p0.9999: 3246.391 ms/op
                 executeQuery·p1.00:   3246.391 ms/op



Result "benchmarks.join_query.VectorisedSimd.executeQuery":
  N = 100
  mean =   3204.868 ±(99.9%) 26.186 ms/op

  Histogram, ms/op:
    [3000.000, 3025.000) = 1 
    [3025.000, 3050.000) = 3 
    [3050.000, 3075.000) = 2 
    [3075.000, 3100.000) = 7 
    [3100.000, 3125.000) = 4 
    [3125.000, 3150.000) = 5 
    [3150.000, 3175.000) = 14 
    [3175.000, 3200.000) = 7 
    [3200.000, 3225.000) = 13 
    [3225.000, 3250.000) = 12 
    [3250.000, 3275.000) = 15 
    [3275.000, 3300.000) = 5 
    [3300.000, 3325.000) = 6 
    [3325.000, 3350.000) = 4 
    [3350.000, 3375.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3024.093 ms/op
     p(50.0000) =   3217.031 ms/op
     p(90.0000) =   3300.917 ms/op
     p(95.0000) =   3330.068 ms/op
     p(99.0000) =   3384.468 ms/op
     p(99.9000) =   3384.803 ms/op
     p(99.9900) =   3384.803 ms/op
     p(99.9990) =   3384.803 ms/op
     p(99.9999) =   3384.803 ms/op
    p(100.0000) =   3384.803 ms/op


# Run complete. Total time: 10:07:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                  (tableFilePath)    Mode  Cnt     Score    Error  Units
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample  200  1290.053 ± 17.409  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1124.073           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1291.846           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1382.023           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1421.869           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1472.180           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1514.144           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1514.144           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1514.144           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample  200  1317.714 ± 16.630  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1151.336           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1321.206           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1396.284           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1450.915           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1499.401           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1528.824           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1528.824           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1528.824           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample  200  1343.027 ± 14.409  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1189.085           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1340.080           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1417.255           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1451.124           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1514.102           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1549.795           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1549.795           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1549.795           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample  199  1364.540 ± 16.373  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1195.377           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1363.149           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1453.326           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1476.395           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1577.058           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1581.253           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1581.253           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1581.253           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample  150  1746.424 ± 18.871  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1602.224           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1750.073           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1834.379           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1850.632           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1942.969           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1998.586           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1998.586           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1998.586           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample  150  1797.329 ± 21.791  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1610.613           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1795.162           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1902.117           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1930.114           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2054.915           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2069.889           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2069.889           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2069.889           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample  150  1840.265 ± 20.714  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       1667.236           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       1839.202           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       1943.850           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       1954.546           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2028.932           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2032.140           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2032.140           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2032.140           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample  150  1882.166 ± 21.724  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       1690.305           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       1879.048           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       1981.389           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2005.402           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2138.990           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2197.815           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2197.815           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2197.815           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample  125  2222.595 ± 24.393  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2065.695           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2227.175           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2325.322           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2347.552           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2447.544           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2470.445           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2470.445           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2470.445           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample  125  2282.523 ± 24.300  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2086.666           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2290.090           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2384.042           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2405.014           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2535.625           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2558.525           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2558.525           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2558.525           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample  125  2351.193 ± 23.650  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2193.621           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2353.005           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2453.668           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2464.992           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2581.342           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2587.886           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2587.886           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2587.886           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample  123  2415.749 ± 25.175  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2222.981           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2407.530           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2521.616           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2549.298           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2661.370           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2688.549           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2688.549           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2688.549           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample  100  2747.227 ± 27.703  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2533.360           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2749.366           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2851.288           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2872.679           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2989.532           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2990.539           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2990.539           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2990.539           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample  100  2816.182 ± 29.431  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2629.829           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2812.281           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2923.430           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2952.790           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3091.034           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3091.202           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3091.202           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3091.202           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample  100  2886.604 ± 29.620  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       2696.937           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       2896.167           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       2990.539           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3015.495           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3057.438           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3057.648           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3057.648           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3057.648           ms/op
NonVectorisedNonSimd.executeQuery                       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample  100  2943.604 ± 28.515  ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       2768.241           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       2944.401           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3044.645           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3086.588           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3216.025           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3217.031           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3217.031           ms/op
NonVectorisedNonSimd.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3217.031           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample  164  1611.367 ± 27.649  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1344.274           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1605.370           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1749.025           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1772.093           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1901.488           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1958.740           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1958.740           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1958.740           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample  163  1634.132 ± 25.971  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1409.286           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1621.098           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1761.608           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1796.840           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1968.471           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       2067.792           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       2067.792           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       2067.792           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample  152  1684.813 ± 24.122  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1493.172           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1670.382           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1794.533           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1819.909           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       2040.403           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       2042.626           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       2042.626           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       2042.626           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample  152  1688.856 ± 29.952  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1455.423           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1664.090           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1830.185           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1914.805           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1988.100           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1988.100           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1988.100           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1988.100           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample  125  2090.978 ± 29.961  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1841.299           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2092.958           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2212.076           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2242.694           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2350.824           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2353.005           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2353.005           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2353.005           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample  125  2158.238 ± 27.861  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1958.740           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2151.678           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2283.379           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2306.028           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2439.491           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2453.668           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2453.668           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2453.668           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample  125  2178.907 ± 32.363  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       1975.517           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2147.484           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2326.161           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2374.815           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2524.132           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2545.943           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2545.943           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2545.943           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample  125  2229.927 ± 30.974  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2021.655           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2227.175           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2363.071           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2416.339           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2494.353           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2499.805           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2499.805           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2499.805           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample  100  2609.402 ± 39.405  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2403.336           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2596.274           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2754.819           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2800.327           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       3030.594           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       3032.482           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       3032.482           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       3032.482           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample  100  2662.167 ± 31.834  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2474.639           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2661.286           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2776.210           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2801.795           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2956.145           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2956.984           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2956.984           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2956.984           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample  100  2726.843 ± 33.618  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2554.331           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2715.812           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2838.705           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2860.515           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       3189.768           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       3191.865           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       3191.865           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       3191.865           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample  100  2768.031 ± 33.580  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2537.554           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2764.046           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2889.037           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2950.064           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       3028.246           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       3028.287           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       3028.287           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       3028.287           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample  100  3081.597 ± 34.026  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2822.767           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3080.716           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3200.254           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3254.570           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3434.338           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3435.135           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3435.135           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3435.135           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample  100  3178.737 ± 36.903  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2923.430           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3181.380           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3317.694           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3355.233           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3493.016           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3493.855           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3493.855           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3493.855           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample   98  3239.929 ± 40.478  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       2961.179           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3240.100           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3372.220           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3444.782           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3611.296           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3611.296           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3611.296           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3611.296           ms/op
NonVectorisedSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample   91  3292.252 ± 34.259  ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3082.813           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3275.751           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3404.097           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3469.528           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3519.021           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3519.021           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3519.021           ms/op
NonVectorisedSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3519.021           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample  202  1244.898 ± 17.811  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1084.228           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1245.708           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1345.742           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1384.330           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1429.754           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1455.423           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1455.423           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1455.423           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample  201  1275.486 ± 16.419  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1096.810           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1281.360           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1349.308           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1388.105           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1470.062           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1478.492           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1478.492           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1478.492           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample  200  1301.503 ± 16.851  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1142.948           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1304.429           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1392.299           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1425.539           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1495.185           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1501.561           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1501.561           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1501.561           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample  200  1318.291 ± 18.165  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1113.588           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1322.254           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1415.578           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1444.833           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1488.936           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1493.172           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1493.172           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1493.172           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample  155  1664.408 ± 23.348  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1417.675           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1673.527           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1780.482           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1812.359           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1904.214           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1962.934           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1962.934           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1962.934           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample  150  1717.162 ± 25.518  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1526.727           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1714.422           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1832.701           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1863.529           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1990.554           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2025.849           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2025.849           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2025.849           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample  150  1766.683 ± 25.580  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       1549.795           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       1773.142           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       1897.713           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       1931.267           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2004.940           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2055.209           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2055.209           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2055.209           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample  150  1835.735 ± 24.122  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       1646.264           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       1833.959           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       1952.449           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       1978.348           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2041.179           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2061.500           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2061.500           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2061.500           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample  125  2140.689 ± 33.033  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       1866.465           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2145.386           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2281.701           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2304.351           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2418.771           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2453.668           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2453.668           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2453.668           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample  125  2237.410 ± 24.779  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2027.946           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2252.341           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2340.422           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2353.005           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2395.870           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2399.142           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2399.142           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2399.142           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample  125  2322.587 ± 26.501  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2105.541           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2327.839           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2440.246           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2457.862           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2498.379           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2508.194           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2508.194           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2508.194           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample  121  2413.735 ± 26.051  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2197.815           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2432.696           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2515.744           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2533.360           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2564.146           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2566.914           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2566.914           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2566.914           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample  100  2692.743 ± 29.555  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2503.999           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2701.132           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2805.151           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2835.140           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2889.582           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2889.875           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2889.875           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2889.875           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample  100  2783.424 ± 30.399  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2512.388           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2789.212           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2893.650           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2923.010           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2998.550           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2998.927           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2998.927           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2998.927           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample  100  2891.050 ± 28.507  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       2684.355           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       2902.458           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3003.122           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3027.868           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3053.453           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3053.453           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3053.453           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3053.453           ms/op
VectorisedNonSimd.executeQuery                          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample  100  3000.521 ± 30.716  ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       2768.241           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       2986.344           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3124.756           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3141.534           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3216.402           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3217.031           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3217.031           ms/op
VectorisedNonSimd.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3217.031           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample  176  1422.167 ± 18.645  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1256.194           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1421.869           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1514.773           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1556.401           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1622.692           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1642.070           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1642.070           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.2  sample       1642.070           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample  175  1451.876 ± 17.046  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1285.554           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1453.326           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1524.210           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1575.381           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1660.693           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1719.665           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1719.665           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.4  sample       1719.665           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample  175  1493.316 ± 17.177  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1327.497           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1491.075           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1571.606           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1604.321           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1677.302           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1709.179           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1709.179           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.6  sample       1709.179           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample  175  1521.382 ± 15.895  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1354.760           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1524.630           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1598.869           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1628.229           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1675.541           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1681.916           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1681.916           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.2_C_0.8  sample       1681.916           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample  150  1891.156 ± 21.932  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1717.567           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1892.680           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       1996.279           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2026.793           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2118.774           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2139.095           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2139.095           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.2  sample       2139.095           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample  144  1945.691 ± 22.843  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1751.122           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       1947.206           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2043.675           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2071.462           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2147.903           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2151.678           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2151.678           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.4  sample       2151.678           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample  125  2016.152 ± 22.097  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       1818.231           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2021.655           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2113.510           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2127.351           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2147.484           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2147.484           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2147.484           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.6  sample       2147.484           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample  125  2085.039 ± 22.716  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       1912.603           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2084.569           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2185.232           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2209.140           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2252.006           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2260.730           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2260.730           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.4_C_0.8  sample       2260.730           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample  125  2370.050 ± 24.133  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2164.261           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2373.976           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2474.639           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2497.289           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2536.463           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2537.554           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2537.554           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.2  sample       2537.554           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample  114  2460.290 ± 24.627  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2273.313           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2466.251           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2550.137           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2592.080           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2657.930           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2659.189           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2659.189           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.4  sample       2659.189           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample  100  2555.212 ± 27.142  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2382.365           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2554.331           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2658.769           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2675.756           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2717.573           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2717.909           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2717.909           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.6  sample       2717.909           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample  100  2662.041 ± 25.604  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2428.502           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2650.800           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2759.433           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2789.002           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2843.361           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2843.738           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2843.738           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8  sample       2843.738           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample  100  2870.833 ± 31.629  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2675.966           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2856.321           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       2998.508           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3031.433           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3103.659           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3103.785           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3103.785           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.2  sample       3103.785           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample  100  2988.525 ± 26.925  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2822.767           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       2982.150           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3087.008           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3103.575           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3179.031           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3179.282           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3179.282           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.4  sample       3179.282           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample  100  3102.527 ± 29.137  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       2906.653           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3110.076           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3215.773           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3233.599           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3367.061           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3368.026           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3368.026           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.6  sample       3368.026           ms/op
VectorisedSimd.executeQuery                             /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample  100  3204.868 ± 26.186  ms/op
VectorisedSimd.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3024.093           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3217.031           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3300.917           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3330.068           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3384.468           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3384.803           ms/op
VectorisedSimd.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3384.803           ms/op
VectorisedSimd.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/join_query_int/A_B_0.8_C_0.8  sample       3384.803           ms/op

Benchmark result is saved to jmh-result.csv

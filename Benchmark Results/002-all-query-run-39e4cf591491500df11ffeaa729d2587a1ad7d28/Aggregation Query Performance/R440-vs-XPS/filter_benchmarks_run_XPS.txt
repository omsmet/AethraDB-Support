# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 0.00% complete, ETA 01:40:00
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.024 ±(99.9%) 2.544 ms/op
# Warmup Iteration   2: 43.798 ±(99.9%) 0.355 ms/op
# Warmup Iteration   3: 43.160 ±(99.9%) 0.302 ms/op
# Warmup Iteration   4: 42.857 ±(99.9%) 0.195 ms/op
# Warmup Iteration   5: 42.842 ±(99.9%) 0.250 ms/op
Iteration   1: 43.027 ±(99.9%) 0.347 ms/op
                 executeFilterQuery·p0.00:   42.598 ms/op
                 executeFilterQuery·p0.50:   42.664 ms/op
                 executeFilterQuery·p0.90:   45.285 ms/op
                 executeFilterQuery·p0.95:   45.351 ms/op
                 executeFilterQuery·p0.99:   45.351 ms/op
                 executeFilterQuery·p0.999:  45.351 ms/op
                 executeFilterQuery·p0.9999: 45.351 ms/op
                 executeFilterQuery·p1.00:   45.351 ms/op

Iteration   2: 42.728 ±(99.9%) 0.029 ms/op
                 executeFilterQuery·p0.00:   42.598 ms/op
                 executeFilterQuery·p0.50:   42.729 ms/op
                 executeFilterQuery·p0.90:   42.795 ms/op
                 executeFilterQuery·p0.95:   42.861 ms/op
                 executeFilterQuery·p0.99:   43.123 ms/op
                 executeFilterQuery·p0.999:  43.123 ms/op
                 executeFilterQuery·p0.9999: 43.123 ms/op
                 executeFilterQuery·p1.00:   43.123 ms/op

Iteration   3: 43.237 ±(99.9%) 0.597 ms/op
                 executeFilterQuery·p0.00:   41.222 ms/op
                 executeFilterQuery·p0.50:   42.729 ms/op
                 executeFilterQuery·p0.90:   45.285 ms/op
                 executeFilterQuery·p0.95:   45.364 ms/op
                 executeFilterQuery·p0.99:   53.412 ms/op
                 executeFilterQuery·p0.999:  53.412 ms/op
                 executeFilterQuery·p0.9999: 53.412 ms/op
                 executeFilterQuery·p1.00:   53.412 ms/op

Iteration   4: 43.124 ±(99.9%) 0.433 ms/op
                 executeFilterQuery·p0.00:   42.533 ms/op
                 executeFilterQuery·p0.50:   42.664 ms/op
                 executeFilterQuery·p0.90:   45.351 ms/op
                 executeFilterQuery·p0.95:   45.351 ms/op
                 executeFilterQuery·p0.99:   49.021 ms/op
                 executeFilterQuery·p0.999:  49.021 ms/op
                 executeFilterQuery·p0.9999: 49.021 ms/op
                 executeFilterQuery·p1.00:   49.021 ms/op

Iteration   5: 42.857 ±(99.9%) 0.171 ms/op
                 executeFilterQuery·p0.00:   42.598 ms/op
                 executeFilterQuery·p0.50:   42.729 ms/op
                 executeFilterQuery·p0.90:   43.123 ms/op
                 executeFilterQuery·p0.95:   43.260 ms/op
                 executeFilterQuery·p0.99:   45.416 ms/op
                 executeFilterQuery·p0.999:  45.416 ms/op
                 executeFilterQuery·p0.9999: 45.416 ms/op
                 executeFilterQuery·p1.00:   45.416 ms/op


# Run progress: 1.67% complete, ETA 01:40:47
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

43.429 ±(99.9%) 2.889 ms/op
# Warmup Iteration   2: 43.724 ±(99.9%) 0.312 ms/op
# Warmup Iteration   3: 43.684 ±(99.9%) 0.268 ms/op
# Warmup Iteration   4: 43.426 ±(99.9%) 0.122 ms/op
# Warmup Iteration   5: 44.021 ±(99.9%) 0.677 ms/op
Iteration   1: 44.634 ±(99.9%) 0.764 ms/op
                 executeFilterQuery·p0.00:   41.878 ms/op
                 executeFilterQuery·p0.50:   43.975 ms/op
                 executeFilterQuery·p0.90:   46.426 ms/op
                 executeFilterQuery·p0.95:   47.828 ms/op
                 executeFilterQuery·p0.99:   55.837 ms/op
                 executeFilterQuery·p0.999:  55.837 ms/op
                 executeFilterQuery·p0.9999: 55.837 ms/op
                 executeFilterQuery·p1.00:   55.837 ms/op

Iteration   2: 44.187 ±(99.9%) 0.653 ms/op
                 executeFilterQuery·p0.00:   41.812 ms/op
                 executeFilterQuery·p0.50:   43.942 ms/op
                 executeFilterQuery·p0.90:   45.548 ms/op
                 executeFilterQuery·p0.95:   47.006 ms/op
                 executeFilterQuery·p0.99:   51.905 ms/op
                 executeFilterQuery·p0.999:  51.905 ms/op
                 executeFilterQuery·p0.9999: 51.905 ms/op
                 executeFilterQuery·p1.00:   51.905 ms/op

Iteration   3: 44.229 ±(99.9%) 1.283 ms/op
                 executeFilterQuery·p0.00:   41.157 ms/op
                 executeFilterQuery·p0.50:   43.287 ms/op
                 executeFilterQuery·p0.90:   45.908 ms/op
                 executeFilterQuery·p0.95:   53.395 ms/op
                 executeFilterQuery·p0.99:   60.162 ms/op
                 executeFilterQuery·p0.999:  60.162 ms/op
                 executeFilterQuery·p0.9999: 60.162 ms/op
                 executeFilterQuery·p1.00:   60.162 ms/op

Iteration   4: 43.758 ±(99.9%) 0.642 ms/op
                 executeFilterQuery·p0.00:   41.353 ms/op
                 executeFilterQuery·p0.50:   43.385 ms/op
                 executeFilterQuery·p0.90:   45.194 ms/op
                 executeFilterQuery·p0.95:   46.164 ms/op
                 executeFilterQuery·p0.99:   54.854 ms/op
                 executeFilterQuery·p0.999:  54.854 ms/op
                 executeFilterQuery·p0.9999: 54.854 ms/op
                 executeFilterQuery·p1.00:   54.854 ms/op

Iteration   5: 44.295 ±(99.9%) 0.767 ms/op
                 executeFilterQuery·p0.00:   42.467 ms/op
                 executeFilterQuery·p0.50:   43.778 ms/op
                 executeFilterQuery·p0.90:   45.777 ms/op
                 executeFilterQuery·p0.95:   47.366 ms/op
                 executeFilterQuery·p0.99:   56.230 ms/op
                 executeFilterQuery·p0.999:  56.230 ms/op
                 executeFilterQuery·p0.9999: 56.230 ms/op
                 executeFilterQuery·p1.00:   56.230 ms/op


# Run progress: 3.33% complete, ETA 01:38:52
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

46.173 ±(99.9%) 5.812 ms/op
# Warmup Iteration   2: 44.128 ±(99.9%) 0.950 ms/op
# Warmup Iteration   3: 45.004 ±(99.9%) 0.943 ms/op
# Warmup Iteration   4: 45.154 ±(99.9%) 1.315 ms/op
# Warmup Iteration   5: 44.792 ±(99.9%) 1.025 ms/op
Iteration   1: 44.060 ±(99.9%) 0.859 ms/op
                 executeFilterQuery·p0.00:   41.681 ms/op
                 executeFilterQuery·p0.50:   43.516 ms/op
                 executeFilterQuery·p0.90:   45.928 ms/op
                 executeFilterQuery·p0.95:   47.081 ms/op
                 executeFilterQuery·p0.99:   56.361 ms/op
                 executeFilterQuery·p0.999:  56.361 ms/op
                 executeFilterQuery·p0.9999: 56.361 ms/op
                 executeFilterQuery·p1.00:   56.361 ms/op

Iteration   2: 45.057 ±(99.9%) 1.323 ms/op
                 executeFilterQuery·p0.00:   41.353 ms/op
                 executeFilterQuery·p0.50:   44.106 ms/op
                 executeFilterQuery·p0.90:   46.635 ms/op
                 executeFilterQuery·p0.95:   55.974 ms/op
                 executeFilterQuery·p0.99:   58.917 ms/op
                 executeFilterQuery·p0.999:  58.917 ms/op
                 executeFilterQuery·p0.9999: 58.917 ms/op
                 executeFilterQuery·p1.00:   58.917 ms/op

Iteration   3: 45.264 ±(99.9%) 1.282 ms/op
                 executeFilterQuery·p0.00:   42.402 ms/op
                 executeFilterQuery·p0.50:   43.909 ms/op
                 executeFilterQuery·p0.90:   50.096 ms/op
                 executeFilterQuery·p0.95:   54.454 ms/op
                 executeFilterQuery·p0.99:   57.606 ms/op
                 executeFilterQuery·p0.999:  57.606 ms/op
                 executeFilterQuery·p0.9999: 57.606 ms/op
                 executeFilterQuery·p1.00:   57.606 ms/op

Iteration   4: 45.497 ±(99.9%) 1.597 ms/op
                 executeFilterQuery·p0.00:   41.222 ms/op
                 executeFilterQuery·p0.50:   44.040 ms/op
                 executeFilterQuery·p0.90:   54.283 ms/op
                 executeFilterQuery·p0.95:   56.712 ms/op
                 executeFilterQuery·p0.99:   57.213 ms/op
                 executeFilterQuery·p0.999:  57.213 ms/op
                 executeFilterQuery·p0.9999: 57.213 ms/op
                 executeFilterQuery·p1.00:   57.213 ms/op

Iteration   5: 44.440 ±(99.9%) 0.941 ms/op
                 executeFilterQuery·p0.00:   41.812 ms/op
                 executeFilterQuery·p0.50:   43.844 ms/op
                 executeFilterQuery·p0.90:   45.548 ms/op
                 executeFilterQuery·p0.95:   48.005 ms/op
                 executeFilterQuery·p0.99:   56.754 ms/op
                 executeFilterQuery·p0.999:  56.754 ms/op
                 executeFilterQuery·p0.9999: 56.754 ms/op
                 executeFilterQuery·p1.00:   56.754 ms/op


# Run progress: 5.00% complete, ETA 01:37:08
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

46.147 ±(99.9%) 3.194 ms/op
# Warmup Iteration   2: 44.959 ±(99.9%) 1.405 ms/op
# Warmup Iteration   3: 44.080 ±(99.9%) 0.925 ms/op
# Warmup Iteration   4: 44.248 ±(99.9%) 0.388 ms/op
# Warmup Iteration   5: 43.502 ±(99.9%) 0.264 ms/op
Iteration   1: 43.677 ±(99.9%) 0.340 ms/op
                 executeFilterQuery·p0.00:   43.188 ms/op
                 executeFilterQuery·p0.50:   43.319 ms/op
                 executeFilterQuery·p0.90:   45.744 ms/op
                 executeFilterQuery·p0.95:   45.744 ms/op
                 executeFilterQuery·p0.99:   45.744 ms/op
                 executeFilterQuery·p0.999:  45.744 ms/op
                 executeFilterQuery·p0.9999: 45.744 ms/op
                 executeFilterQuery·p1.00:   45.744 ms/op

Iteration   2: 43.850 ±(99.9%) 0.385 ms/op
                 executeFilterQuery·p0.00:   43.123 ms/op
                 executeFilterQuery·p0.50:   43.319 ms/op
                 executeFilterQuery·p0.90:   45.679 ms/op
                 executeFilterQuery·p0.95:   45.744 ms/op
                 executeFilterQuery·p0.99:   45.810 ms/op
                 executeFilterQuery·p0.999:  45.810 ms/op
                 executeFilterQuery·p0.9999: 45.810 ms/op
                 executeFilterQuery·p1.00:   45.810 ms/op

Iteration   3: 43.223 ±(99.9%) 0.127 ms/op
                 executeFilterQuery·p0.00:   42.992 ms/op
                 executeFilterQuery·p0.50:   43.188 ms/op
                 executeFilterQuery·p0.90:   43.319 ms/op
                 executeFilterQuery·p0.95:   43.391 ms/op
                 executeFilterQuery·p0.99:   45.613 ms/op
                 executeFilterQuery·p0.999:  45.613 ms/op
                 executeFilterQuery·p0.9999: 45.613 ms/op
                 executeFilterQuery·p1.00:   45.613 ms/op

Iteration   4: 43.762 ±(99.9%) 0.283 ms/op
                 executeFilterQuery·p0.00:   42.992 ms/op
                 executeFilterQuery·p0.50:   43.483 ms/op
                 executeFilterQuery·p0.90:   44.931 ms/op
                 executeFilterQuery·p0.95:   45.259 ms/op
                 executeFilterQuery·p0.99:   46.203 ms/op
                 executeFilterQuery·p0.999:  46.203 ms/op
                 executeFilterQuery·p0.9999: 46.203 ms/op
                 executeFilterQuery·p1.00:   46.203 ms/op

Iteration   5: 43.258 ±(99.9%) 0.126 ms/op
                 executeFilterQuery·p0.00:   42.992 ms/op
                 executeFilterQuery·p0.50:   43.123 ms/op
                 executeFilterQuery·p0.90:   43.647 ms/op
                 executeFilterQuery·p0.95:   44.132 ms/op
                 executeFilterQuery·p0.99:   44.564 ms/op
                 executeFilterQuery·p0.999:  44.564 ms/op
                 executeFilterQuery·p0.9999: 44.564 ms/op
                 executeFilterQuery·p1.00:   44.564 ms/op


# Run progress: 6.67% complete, ETA 01:35:21
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

45.341 ±(99.9%) 2.260 ms/op
# Warmup Iteration   2: 45.004 ±(99.9%) 0.721 ms/op
# Warmup Iteration   3: 43.821 ±(99.9%) 0.476 ms/op
# Warmup Iteration   4: 43.776 ±(99.9%) 0.217 ms/op
# Warmup Iteration   5: 43.642 ±(99.9%) 0.390 ms/op
Iteration   1: 43.655 ±(99.9%) 0.335 ms/op
                 executeFilterQuery·p0.00:   42.664 ms/op
                 executeFilterQuery·p0.50:   43.385 ms/op
                 executeFilterQuery·p0.90:   44.761 ms/op
                 executeFilterQuery·p0.95:   45.390 ms/op
                 executeFilterQuery·p0.99:   47.317 ms/op
                 executeFilterQuery·p0.999:  47.317 ms/op
                 executeFilterQuery·p0.9999: 47.317 ms/op
                 executeFilterQuery·p1.00:   47.317 ms/op

Iteration   2: 45.152 ±(99.9%) 0.568 ms/op
                 executeFilterQuery·p0.00:   43.254 ms/op
                 executeFilterQuery·p0.50:   44.761 ms/op
                 executeFilterQuery·p0.90:   46.871 ms/op
                 executeFilterQuery·p0.95:   48.176 ms/op
                 executeFilterQuery·p0.99:   50.856 ms/op
                 executeFilterQuery·p0.999:  50.856 ms/op
                 executeFilterQuery·p0.9999: 50.856 ms/op
                 executeFilterQuery·p1.00:   50.856 ms/op

Iteration   3: 45.805 ±(99.9%) 0.495 ms/op
                 executeFilterQuery·p0.00:   44.433 ms/op
                 executeFilterQuery·p0.50:   45.285 ms/op
                 executeFilterQuery·p0.90:   47.776 ms/op
                 executeFilterQuery·p0.95:   48.254 ms/op
                 executeFilterQuery·p0.99:   48.497 ms/op
                 executeFilterQuery·p0.999:  48.497 ms/op
                 executeFilterQuery·p0.9999: 48.497 ms/op
                 executeFilterQuery·p1.00:   48.497 ms/op

Iteration   4: 44.509 ±(99.9%) 0.294 ms/op
                 executeFilterQuery·p0.00:   43.385 ms/op
                 executeFilterQuery·p0.50:   44.302 ms/op
                 executeFilterQuery·p0.90:   45.312 ms/op
                 executeFilterQuery·p0.95:   46.884 ms/op
                 executeFilterQuery·p0.99:   47.317 ms/op
                 executeFilterQuery·p0.999:  47.317 ms/op
                 executeFilterQuery·p0.9999: 47.317 ms/op
                 executeFilterQuery·p1.00:   47.317 ms/op

Iteration   5: 44.959 ±(99.9%) 0.480 ms/op
                 executeFilterQuery·p0.00:   43.975 ms/op
                 executeFilterQuery·p0.50:   44.106 ms/op
                 executeFilterQuery·p0.90:   46.662 ms/op
                 executeFilterQuery·p0.95:   46.727 ms/op
                 executeFilterQuery·p0.99:   46.924 ms/op
                 executeFilterQuery·p0.999:  46.924 ms/op
                 executeFilterQuery·p0.9999: 46.924 ms/op
                 executeFilterQuery·p1.00:   46.924 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1883
  mean =     44.071 ±(99.9%) 0.151 ms/op

  Histogram, ms/op:
    [40.000, 42.500) = 27 
    [42.500, 45.000) = 1524 
    [45.000, 47.500) = 264 
    [47.500, 50.000) = 26 
    [50.000, 52.500) = 12 
    [52.500, 55.000) = 11 
    [55.000, 57.500) = 14 
    [57.500, 60.000) = 4 
    [60.000, 62.500) = 1 
    [62.500, 65.000) = 0 
    [65.000, 67.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     41.157 ms/op
     p(50.0000) =     43.516 ms/op
     p(90.0000) =     45.744 ms/op
     p(95.0000) =     46.727 ms/op
     p(99.0000) =     55.092 ms/op
     p(99.9000) =     59.061 ms/op
     p(99.9900) =     60.162 ms/op
     p(99.9990) =     60.162 ms/op
     p(99.9999) =     60.162 ms/op
    p(100.0000) =     60.162 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 8.33% complete, ETA 01:33:37
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

51.928 ±(99.9%) 3.994 ms/op
# Warmup Iteration   2: 51.636 ±(99.9%) 0.545 ms/op
# Warmup Iteration   3: 50.775 ±(99.9%) 0.357 ms/op
# Warmup Iteration   4: 51.667 ±(99.9%) 0.667 ms/op
# Warmup Iteration   5: 50.617 ±(99.9%) 0.348 ms/op
Iteration   1: 50.393 ±(99.9%) 0.269 ms/op
                 executeFilterQuery·p0.00:   49.218 ms/op
                 executeFilterQuery·p0.50:   50.397 ms/op
                 executeFilterQuery·p0.90:   51.118 ms/op
                 executeFilterQuery·p0.95:   51.646 ms/op
                 executeFilterQuery·p0.99:   52.888 ms/op
                 executeFilterQuery·p0.999:  52.888 ms/op
                 executeFilterQuery·p0.9999: 52.888 ms/op
                 executeFilterQuery·p1.00:   52.888 ms/op

Iteration   2: 49.907 ±(99.9%) 0.101 ms/op
                 executeFilterQuery·p0.00:   49.611 ms/op
                 executeFilterQuery·p0.50:   49.807 ms/op
                 executeFilterQuery·p0.90:   50.266 ms/op
                 executeFilterQuery·p0.95:   50.548 ms/op
                 executeFilterQuery·p0.99:   50.725 ms/op
                 executeFilterQuery·p0.999:  50.725 ms/op
                 executeFilterQuery·p0.9999: 50.725 ms/op
                 executeFilterQuery·p1.00:   50.725 ms/op

Iteration   3: 50.054 ±(99.9%) 0.381 ms/op
                 executeFilterQuery·p0.00:   49.480 ms/op
                 executeFilterQuery·p0.50:   49.676 ms/op
                 executeFilterQuery·p0.90:   52.363 ms/op
                 executeFilterQuery·p0.95:   52.560 ms/op
                 executeFilterQuery·p0.99:   52.625 ms/op
                 executeFilterQuery·p0.999:  52.625 ms/op
                 executeFilterQuery·p0.9999: 52.625 ms/op
                 executeFilterQuery·p1.00:   52.625 ms/op

Iteration   4: 51.197 ±(99.9%) 0.509 ms/op
                 executeFilterQuery·p0.00:   48.628 ms/op
                 executeFilterQuery·p0.50:   51.118 ms/op
                 executeFilterQuery·p0.90:   52.612 ms/op
                 executeFilterQuery·p0.95:   53.176 ms/op
                 executeFilterQuery·p0.99:   54.329 ms/op
                 executeFilterQuery·p0.999:  54.329 ms/op
                 executeFilterQuery·p0.9999: 54.329 ms/op
                 executeFilterQuery·p1.00:   54.329 ms/op

Iteration   5: 51.185 ±(99.9%) 0.562 ms/op
                 executeFilterQuery·p0.00:   47.514 ms/op
                 executeFilterQuery·p0.50:   51.216 ms/op
                 executeFilterQuery·p0.90:   53.012 ms/op
                 executeFilterQuery·p0.95:   53.376 ms/op
                 executeFilterQuery·p0.99:   54.591 ms/op
                 executeFilterQuery·p0.999:  54.591 ms/op
                 executeFilterQuery·p0.9999: 54.591 ms/op
                 executeFilterQuery·p1.00:   54.591 ms/op


# Run progress: 10.00% complete, ETA 01:32:00
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

52.294 ±(99.9%) 4.124 ms/op
# Warmup Iteration   2: 50.392 ±(99.9%) 0.313 ms/op
# Warmup Iteration   3: 50.499 ±(99.9%) 0.828 ms/op
# Warmup Iteration   4: 50.521 ±(99.9%) 0.442 ms/op
# Warmup Iteration   5: 50.329 ±(99.9%) 0.345 ms/op
Iteration   1: 50.612 ±(99.9%) 0.172 ms/op
                 executeFilterQuery·p0.00:   50.135 ms/op
                 executeFilterQuery·p0.50:   50.463 ms/op
                 executeFilterQuery·p0.90:   51.315 ms/op
                 executeFilterQuery·p0.95:   51.341 ms/op
                 executeFilterQuery·p0.99:   52.167 ms/op
                 executeFilterQuery·p0.999:  52.167 ms/op
                 executeFilterQuery·p0.9999: 52.167 ms/op
                 executeFilterQuery·p1.00:   52.167 ms/op

Iteration   2: 51.119 ±(99.9%) 0.375 ms/op
                 executeFilterQuery·p0.00:   50.070 ms/op
                 executeFilterQuery·p0.50:   51.020 ms/op
                 executeFilterQuery·p0.90:   52.848 ms/op
                 executeFilterQuery·p0.95:   53.078 ms/op
                 executeFilterQuery·p0.99:   54.002 ms/op
                 executeFilterQuery·p0.999:  54.002 ms/op
                 executeFilterQuery·p0.9999: 54.002 ms/op
                 executeFilterQuery·p1.00:   54.002 ms/op

Iteration   3: 51.618 ±(99.9%) 0.583 ms/op
                 executeFilterQuery·p0.00:   50.201 ms/op
                 executeFilterQuery·p0.50:   50.921 ms/op
                 executeFilterQuery·p0.90:   53.799 ms/op
                 executeFilterQuery·p0.95:   54.156 ms/op
                 executeFilterQuery·p0.99:   55.640 ms/op
                 executeFilterQuery·p0.999:  55.640 ms/op
                 executeFilterQuery·p0.9999: 55.640 ms/op
                 executeFilterQuery·p1.00:   55.640 ms/op

Iteration   4: 51.232 ±(99.9%) 0.467 ms/op
                 executeFilterQuery·p0.00:   49.676 ms/op
                 executeFilterQuery·p0.50:   50.725 ms/op
                 executeFilterQuery·p0.90:   52.874 ms/op
                 executeFilterQuery·p0.95:   54.460 ms/op
                 executeFilterQuery·p0.99:   54.526 ms/op
                 executeFilterQuery·p0.999:  54.526 ms/op
                 executeFilterQuery·p0.9999: 54.526 ms/op
                 executeFilterQuery·p1.00:   54.526 ms/op

Iteration   5: 50.494 ±(99.9%) 0.389 ms/op
                 executeFilterQuery·p0.00:   49.545 ms/op
                 executeFilterQuery·p0.50:   50.201 ms/op
                 executeFilterQuery·p0.90:   52.167 ms/op
                 executeFilterQuery·p0.95:   52.953 ms/op
                 executeFilterQuery·p0.99:   53.477 ms/op
                 executeFilterQuery·p0.999:  53.477 ms/op
                 executeFilterQuery·p0.9999: 53.477 ms/op
                 executeFilterQuery·p1.00:   53.477 ms/op


# Run progress: 11.67% complete, ETA 01:30:17
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

52.121 ±(99.9%) 3.523 ms/op
# Warmup Iteration   2: 51.637 ±(99.9%) 0.319 ms/op
# Warmup Iteration   3: 52.183 ±(99.9%) 0.499 ms/op
# Warmup Iteration   4: 52.517 ±(99.9%) 0.432 ms/op
# Warmup Iteration   5: 52.426 ±(99.9%) 0.431 ms/op
Iteration   1: 51.962 ±(99.9%) 0.394 ms/op
                 executeFilterQuery·p0.00:   49.414 ms/op
                 executeFilterQuery·p0.50:   51.708 ms/op
                 executeFilterQuery·p0.90:   53.412 ms/op
                 executeFilterQuery·p0.95:   54.133 ms/op
                 executeFilterQuery·p0.99:   54.919 ms/op
                 executeFilterQuery·p0.999:  54.919 ms/op
                 executeFilterQuery·p0.9999: 54.919 ms/op
                 executeFilterQuery·p1.00:   54.919 ms/op

Iteration   2: 51.682 ±(99.9%) 0.375 ms/op
                 executeFilterQuery·p0.00:   51.053 ms/op
                 executeFilterQuery·p0.50:   51.315 ms/op
                 executeFilterQuery·p0.90:   52.901 ms/op
                 executeFilterQuery·p0.95:   54.395 ms/op
                 executeFilterQuery·p0.99:   55.312 ms/op
                 executeFilterQuery·p0.999:  55.312 ms/op
                 executeFilterQuery·p0.9999: 55.312 ms/op
                 executeFilterQuery·p1.00:   55.312 ms/op

Iteration   3: 51.537 ±(99.9%) 0.244 ms/op
                 executeFilterQuery·p0.00:   51.053 ms/op
                 executeFilterQuery·p0.50:   51.380 ms/op
                 executeFilterQuery·p0.90:   52.088 ms/op
                 executeFilterQuery·p0.95:   52.796 ms/op
                 executeFilterQuery·p0.99:   54.198 ms/op
                 executeFilterQuery·p0.999:  54.198 ms/op
                 executeFilterQuery·p0.9999: 54.198 ms/op
                 executeFilterQuery·p1.00:   54.198 ms/op

Iteration   4: 52.062 ±(99.9%) 0.342 ms/op
                 executeFilterQuery·p0.00:   50.987 ms/op
                 executeFilterQuery·p0.50:   51.773 ms/op
                 executeFilterQuery·p0.90:   53.464 ms/op
                 executeFilterQuery·p0.95:   53.828 ms/op
                 executeFilterQuery·p0.99:   55.050 ms/op
                 executeFilterQuery·p0.999:  55.050 ms/op
                 executeFilterQuery·p0.9999: 55.050 ms/op
                 executeFilterQuery·p1.00:   55.050 ms/op

Iteration   5: 52.327 ±(99.9%) 0.355 ms/op
                 executeFilterQuery·p0.00:   51.315 ms/op
                 executeFilterQuery·p0.50:   52.167 ms/op
                 executeFilterQuery·p0.90:   53.281 ms/op
                 executeFilterQuery·p0.95:   54.428 ms/op
                 executeFilterQuery·p0.99:   54.985 ms/op
                 executeFilterQuery·p0.999:  54.985 ms/op
                 executeFilterQuery·p0.9999: 54.985 ms/op
                 executeFilterQuery·p1.00:   54.985 ms/op


# Run progress: 13.33% complete, ETA 01:28:34
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

51.791 ±(99.9%) 3.258 ms/op
# Warmup Iteration   2: 51.242 ±(99.9%) 0.127 ms/op
# Warmup Iteration   3: 51.185 ±(99.9%) 0.058 ms/op
# Warmup Iteration   4: 51.964 ±(99.9%) 0.470 ms/op
# Warmup Iteration   5: 52.088 ±(99.9%) 0.447 ms/op
Iteration   1: 52.304 ±(99.9%) 0.450 ms/op
                 executeFilterQuery·p0.00:   48.759 ms/op
                 executeFilterQuery·p0.50:   52.232 ms/op
                 executeFilterQuery·p0.90:   53.543 ms/op
                 executeFilterQuery·p0.95:   53.805 ms/op
                 executeFilterQuery·p0.99:   54.460 ms/op
                 executeFilterQuery·p0.999:  54.460 ms/op
                 executeFilterQuery·p0.9999: 54.460 ms/op
                 executeFilterQuery·p1.00:   54.460 ms/op

Iteration   2: 52.569 ±(99.9%) 0.726 ms/op
                 executeFilterQuery·p0.00:   49.349 ms/op
                 executeFilterQuery·p0.50:   52.330 ms/op
                 executeFilterQuery·p0.90:   53.628 ms/op
                 executeFilterQuery·p0.95:   57.547 ms/op
                 executeFilterQuery·p0.99:   60.817 ms/op
                 executeFilterQuery·p0.999:  60.817 ms/op
                 executeFilterQuery·p0.9999: 60.817 ms/op
                 executeFilterQuery·p1.00:   60.817 ms/op

Iteration   3: 51.209 ±(99.9%) 0.396 ms/op
                 executeFilterQuery·p0.00:   48.103 ms/op
                 executeFilterQuery·p0.50:   51.053 ms/op
                 executeFilterQuery·p0.90:   52.193 ms/op
                 executeFilterQuery·p0.95:   52.671 ms/op
                 executeFilterQuery·p0.99:   56.754 ms/op
                 executeFilterQuery·p0.999:  56.754 ms/op
                 executeFilterQuery·p0.9999: 56.754 ms/op
                 executeFilterQuery·p1.00:   56.754 ms/op

Iteration   4: 51.759 ±(99.9%) 0.634 ms/op
                 executeFilterQuery·p0.00:   48.234 ms/op
                 executeFilterQuery·p0.50:   51.118 ms/op
                 executeFilterQuery·p0.90:   53.674 ms/op
                 executeFilterQuery·p0.95:   54.487 ms/op
                 executeFilterQuery·p0.99:   58.982 ms/op
                 executeFilterQuery·p0.999:  58.982 ms/op
                 executeFilterQuery·p0.9999: 58.982 ms/op
                 executeFilterQuery·p1.00:   58.982 ms/op

Iteration   5: 51.377 ±(99.9%) 0.316 ms/op
                 executeFilterQuery·p0.00:   50.725 ms/op
                 executeFilterQuery·p0.50:   51.184 ms/op
                 executeFilterQuery·p0.90:   52.285 ms/op
                 executeFilterQuery·p0.95:   53.753 ms/op
                 executeFilterQuery·p0.99:   54.329 ms/op
                 executeFilterQuery·p0.999:  54.329 ms/op
                 executeFilterQuery·p0.9999: 54.329 ms/op
                 executeFilterQuery·p1.00:   54.329 ms/op


# Run progress: 15.00% complete, ETA 01:26:51
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

51.427 ±(99.9%) 3.211 ms/op
# Warmup Iteration   2: 50.590 ±(99.9%) 0.435 ms/op
# Warmup Iteration   3: 50.898 ±(99.9%) 0.463 ms/op
# Warmup Iteration   4: 51.066 ±(99.9%) 0.525 ms/op
# Warmup Iteration   5: 51.020 ±(99.9%) 0.523 ms/op
Iteration   1: 50.689 ±(99.9%) 0.460 ms/op
                 executeFilterQuery·p0.00:   49.611 ms/op
                 executeFilterQuery·p0.50:   50.332 ms/op
                 executeFilterQuery·p0.90:   52.350 ms/op
                 executeFilterQuery·p0.95:   53.110 ms/op
                 executeFilterQuery·p0.99:   56.426 ms/op
                 executeFilterQuery·p0.999:  56.426 ms/op
                 executeFilterQuery·p0.9999: 56.426 ms/op
                 executeFilterQuery·p1.00:   56.426 ms/op

Iteration   2: 49.759 ±(99.9%) 0.318 ms/op
                 executeFilterQuery·p0.00:   49.086 ms/op
                 executeFilterQuery·p0.50:   49.480 ms/op
                 executeFilterQuery·p0.90:   51.105 ms/op
                 executeFilterQuery·p0.95:   52.029 ms/op
                 executeFilterQuery·p0.99:   52.429 ms/op
                 executeFilterQuery·p0.999:  52.429 ms/op
                 executeFilterQuery·p0.9999: 52.429 ms/op
                 executeFilterQuery·p1.00:   52.429 ms/op

Iteration   3: 49.827 ±(99.9%) 0.416 ms/op
                 executeFilterQuery·p0.00:   49.021 ms/op
                 executeFilterQuery·p0.50:   49.414 ms/op
                 executeFilterQuery·p0.90:   52.232 ms/op
                 executeFilterQuery·p0.95:   52.363 ms/op
                 executeFilterQuery·p0.99:   52.494 ms/op
                 executeFilterQuery·p0.999:  52.494 ms/op
                 executeFilterQuery·p0.9999: 52.494 ms/op
                 executeFilterQuery·p1.00:   52.494 ms/op

Iteration   4: 50.011 ±(99.9%) 0.734 ms/op
                 executeFilterQuery·p0.00:   49.086 ms/op
                 executeFilterQuery·p0.50:   49.414 ms/op
                 executeFilterQuery·p0.90:   51.275 ms/op
                 executeFilterQuery·p0.95:   52.691 ms/op
                 executeFilterQuery·p0.99:   63.046 ms/op
                 executeFilterQuery·p0.999:  63.046 ms/op
                 executeFilterQuery·p0.9999: 63.046 ms/op
                 executeFilterQuery·p1.00:   63.046 ms/op

Iteration   5: 50.385 ±(99.9%) 0.633 ms/op
                 executeFilterQuery·p0.00:   49.021 ms/op
                 executeFilterQuery·p0.50:   49.283 ms/op
                 executeFilterQuery·p0.90:   52.363 ms/op
                 executeFilterQuery·p0.95:   52.488 ms/op
                 executeFilterQuery·p0.99:   54.395 ms/op
                 executeFilterQuery·p0.999:  54.395 ms/op
                 executeFilterQuery·p0.9999: 54.395 ms/op
                 executeFilterQuery·p1.00:   54.395 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1775
  mean =     51.077 ±(99.9%) 0.107 ms/op

  Histogram, ms/op:
    [40.000, 42.500) = 0 
    [42.500, 45.000) = 0 
    [45.000, 47.500) = 0 
    [47.500, 50.000) = 438 
    [50.000, 52.500) = 1115 
    [52.500, 55.000) = 210 
    [55.000, 57.500) = 6 
    [57.500, 60.000) = 4 
    [60.000, 62.500) = 1 
    [62.500, 65.000) = 1 
    [65.000, 67.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     47.514 ms/op
     p(50.0000) =     51.053 ms/op
     p(90.0000) =     52.691 ms/op
     p(95.0000) =     53.412 ms/op
     p(99.0000) =     54.623 ms/op
     p(99.9000) =     61.317 ms/op
     p(99.9900) =     63.046 ms/op
     p(99.9990) =     63.046 ms/op
     p(99.9999) =     63.046 ms/op
    p(100.0000) =     63.046 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 16.67% complete, ETA 01:25:09
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

47.547 ±(99.9%) 3.973 ms/op
# Warmup Iteration   2: 46.994 ±(99.9%) 0.499 ms/op
# Warmup Iteration   3: 46.408 ±(99.9%) 0.261 ms/op
# Warmup Iteration   4: 46.625 ±(99.9%) 0.358 ms/op
# Warmup Iteration   5: 46.422 ±(99.9%) 0.285 ms/op
Iteration   1: 46.379 ±(99.9%) 0.266 ms/op
                 executeFilterQuery·p0.00:   46.006 ms/op
                 executeFilterQuery·p0.50:   46.137 ms/op
                 executeFilterQuery·p0.90:   47.841 ms/op
                 executeFilterQuery·p0.95:   48.431 ms/op
                 executeFilterQuery·p0.99:   48.497 ms/op
                 executeFilterQuery·p0.999:  48.497 ms/op
                 executeFilterQuery·p0.9999: 48.497 ms/op
                 executeFilterQuery·p1.00:   48.497 ms/op

Iteration   2: 46.787 ±(99.9%) 0.658 ms/op
                 executeFilterQuery·p0.00:   46.072 ms/op
                 executeFilterQuery·p0.50:   46.268 ms/op
                 executeFilterQuery·p0.90:   48.431 ms/op
                 executeFilterQuery·p0.95:   48.982 ms/op
                 executeFilterQuery·p0.99:   58.917 ms/op
                 executeFilterQuery·p0.999:  58.917 ms/op
                 executeFilterQuery·p0.9999: 58.917 ms/op
                 executeFilterQuery·p1.00:   58.917 ms/op

Iteration   3: 46.489 ±(99.9%) 0.340 ms/op
                 executeFilterQuery·p0.00:   46.006 ms/op
                 executeFilterQuery·p0.50:   46.137 ms/op
                 executeFilterQuery·p0.90:   48.431 ms/op
                 executeFilterQuery·p0.95:   48.565 ms/op
                 executeFilterQuery·p0.99:   49.611 ms/op
                 executeFilterQuery·p0.999:  49.611 ms/op
                 executeFilterQuery·p0.9999: 49.611 ms/op
                 executeFilterQuery·p1.00:   49.611 ms/op

Iteration   4: 46.856 ±(99.9%) 0.464 ms/op
                 executeFilterQuery·p0.00:   46.006 ms/op
                 executeFilterQuery·p0.50:   46.399 ms/op
                 executeFilterQuery·p0.90:   48.431 ms/op
                 executeFilterQuery·p0.95:   48.641 ms/op
                 executeFilterQuery·p0.99:   53.805 ms/op
                 executeFilterQuery·p0.999:  53.805 ms/op
                 executeFilterQuery·p0.9999: 53.805 ms/op
                 executeFilterQuery·p1.00:   53.805 ms/op

Iteration   5: 47.540 ±(99.9%) 0.569 ms/op
                 executeFilterQuery·p0.00:   46.006 ms/op
                 executeFilterQuery·p0.50:   48.169 ms/op
                 executeFilterQuery·p0.90:   48.785 ms/op
                 executeFilterQuery·p0.95:   50.410 ms/op
                 executeFilterQuery·p0.99:   52.560 ms/op
                 executeFilterQuery·p0.999:  52.560 ms/op
                 executeFilterQuery·p0.9999: 52.560 ms/op
                 executeFilterQuery·p1.00:   52.560 ms/op


# Run progress: 18.33% complete, ETA 01:23:27
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.573 ±(99.9%) 4.178 ms/op
# Warmup Iteration   2: 47.810 ±(99.9%) 0.448 ms/op
# Warmup Iteration   3: 47.716 ±(99.9%) 0.668 ms/op
# Warmup Iteration   4: 47.717 ±(99.9%) 0.464 ms/op
# Warmup Iteration   5: 47.510 ±(99.9%) 0.402 ms/op
Iteration   1: 46.898 ±(99.9%) 0.165 ms/op
                 executeFilterQuery·p0.00:   46.662 ms/op
                 executeFilterQuery·p0.50:   46.793 ms/op
                 executeFilterQuery·p0.90:   46.924 ms/op
                 executeFilterQuery·p0.95:   47.373 ms/op
                 executeFilterQuery·p0.99:   49.152 ms/op
                 executeFilterQuery·p0.999:  49.152 ms/op
                 executeFilterQuery·p0.9999: 49.152 ms/op
                 executeFilterQuery·p1.00:   49.152 ms/op

Iteration   2: 47.118 ±(99.9%) 0.374 ms/op
                 executeFilterQuery·p0.00:   46.662 ms/op
                 executeFilterQuery·p0.50:   46.793 ms/op
                 executeFilterQuery·p0.90:   47.605 ms/op
                 executeFilterQuery·p0.95:   49.807 ms/op
                 executeFilterQuery·p0.99:   52.232 ms/op
                 executeFilterQuery·p0.999:  52.232 ms/op
                 executeFilterQuery·p0.9999: 52.232 ms/op
                 executeFilterQuery·p1.00:   52.232 ms/op

Iteration   3: 47.683 ±(99.9%) 0.412 ms/op
                 executeFilterQuery·p0.00:   46.662 ms/op
                 executeFilterQuery·p0.50:   46.989 ms/op
                 executeFilterQuery·p0.90:   49.021 ms/op
                 executeFilterQuery·p0.95:   49.152 ms/op
                 executeFilterQuery·p0.99:   49.218 ms/op
                 executeFilterQuery·p0.999:  49.218 ms/op
                 executeFilterQuery·p0.9999: 49.218 ms/op
                 executeFilterQuery·p1.00:   49.218 ms/op

Iteration   4: 47.914 ±(99.9%) 0.550 ms/op
                 executeFilterQuery·p0.00:   46.662 ms/op
                 executeFilterQuery·p0.50:   47.120 ms/op
                 executeFilterQuery·p0.90:   49.152 ms/op
                 executeFilterQuery·p0.95:   49.231 ms/op
                 executeFilterQuery·p0.99:   55.378 ms/op
                 executeFilterQuery·p0.999:  55.378 ms/op
                 executeFilterQuery·p0.9999: 55.378 ms/op
                 executeFilterQuery·p1.00:   55.378 ms/op

Iteration   5: 47.469 ±(99.9%) 0.487 ms/op
                 executeFilterQuery·p0.00:   46.662 ms/op
                 executeFilterQuery·p0.50:   46.825 ms/op
                 executeFilterQuery·p0.90:   49.021 ms/op
                 executeFilterQuery·p0.95:   50.823 ms/op
                 executeFilterQuery·p0.99:   52.429 ms/op
                 executeFilterQuery·p0.999:  52.429 ms/op
                 executeFilterQuery·p0.9999: 52.429 ms/op
                 executeFilterQuery·p1.00:   52.429 ms/op


# Run progress: 20.00% complete, ETA 01:21:45
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

50.357 ±(99.9%) 9.258 ms/op
# Warmup Iteration   2: 47.941 ±(99.9%) 0.539 ms/op
# Warmup Iteration   3: 47.103 ±(99.9%) 0.392 ms/op
# Warmup Iteration   4: 46.865 ±(99.9%) 0.342 ms/op
# Warmup Iteration   5: 46.993 ±(99.9%) 0.376 ms/op
Iteration   1: 46.974 ±(99.9%) 0.577 ms/op
                 executeFilterQuery·p0.00:   46.268 ms/op
                 executeFilterQuery·p0.50:   46.465 ms/op
                 executeFilterQuery·p0.90:   48.824 ms/op
                 executeFilterQuery·p0.95:   49.912 ms/op
                 executeFilterQuery·p0.99:   56.164 ms/op
                 executeFilterQuery·p0.999:  56.164 ms/op
                 executeFilterQuery·p0.9999: 56.164 ms/op
                 executeFilterQuery·p1.00:   56.164 ms/op

Iteration   2: 47.746 ±(99.9%) 0.533 ms/op
                 executeFilterQuery·p0.00:   46.399 ms/op
                 executeFilterQuery·p0.50:   47.120 ms/op
                 executeFilterQuery·p0.90:   50.056 ms/op
                 executeFilterQuery·p0.95:   50.384 ms/op
                 executeFilterQuery·p0.99:   52.036 ms/op
                 executeFilterQuery·p0.999:  52.036 ms/op
                 executeFilterQuery·p0.9999: 52.036 ms/op
                 executeFilterQuery·p1.00:   52.036 ms/op

Iteration   3: 47.232 ±(99.9%) 0.456 ms/op
                 executeFilterQuery·p0.00:   46.334 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   49.218 ms/op
                 executeFilterQuery·p0.95:   49.558 ms/op
                 executeFilterQuery·p0.99:   50.266 ms/op
                 executeFilterQuery·p0.999:  50.266 ms/op
                 executeFilterQuery·p0.9999: 50.266 ms/op
                 executeFilterQuery·p1.00:   50.266 ms/op

Iteration   4: 47.820 ±(99.9%) 0.507 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   47.186 ms/op
                 executeFilterQuery·p0.90:   49.689 ms/op
                 executeFilterQuery·p0.95:   50.181 ms/op
                 executeFilterQuery·p0.99:   51.970 ms/op
                 executeFilterQuery·p0.999:  51.970 ms/op
                 executeFilterQuery·p0.9999: 51.970 ms/op
                 executeFilterQuery·p1.00:   51.970 ms/op

Iteration   5: 47.666 ±(99.9%) 0.630 ms/op
                 executeFilterQuery·p0.00:   46.531 ms/op
                 executeFilterQuery·p0.50:   47.120 ms/op
                 executeFilterQuery·p0.90:   49.447 ms/op
                 executeFilterQuery·p0.95:   50.954 ms/op
                 executeFilterQuery·p0.99:   54.395 ms/op
                 executeFilterQuery·p0.999:  54.395 ms/op
                 executeFilterQuery·p0.9999: 54.395 ms/op
                 executeFilterQuery·p1.00:   54.395 ms/op


# Run progress: 21.67% complete, ETA 01:20:02
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.936 ±(99.9%) 4.283 ms/op
# Warmup Iteration   2: 48.278 ±(99.9%) 0.609 ms/op
# Warmup Iteration   3: 47.018 ±(99.9%) 0.278 ms/op
# Warmup Iteration   4: 47.147 ±(99.9%) 0.353 ms/op
# Warmup Iteration   5: 47.356 ±(99.9%) 0.290 ms/op
Iteration   1: 47.666 ±(99.9%) 0.321 ms/op
                 executeFilterQuery·p0.00:   46.727 ms/op
                 executeFilterQuery·p0.50:   47.514 ms/op
                 executeFilterQuery·p0.90:   48.864 ms/op
                 executeFilterQuery·p0.95:   49.480 ms/op
                 executeFilterQuery·p0.99:   50.397 ms/op
                 executeFilterQuery·p0.999:  50.397 ms/op
                 executeFilterQuery·p0.9999: 50.397 ms/op
                 executeFilterQuery·p1.00:   50.397 ms/op

Iteration   2: 47.589 ±(99.9%) 0.416 ms/op
                 executeFilterQuery·p0.00:   46.596 ms/op
                 executeFilterQuery·p0.50:   47.120 ms/op
                 executeFilterQuery·p0.90:   49.309 ms/op
                 executeFilterQuery·p0.95:   49.650 ms/op
                 executeFilterQuery·p0.99:   50.856 ms/op
                 executeFilterQuery·p0.999:  50.856 ms/op
                 executeFilterQuery·p0.9999: 50.856 ms/op
                 executeFilterQuery·p1.00:   50.856 ms/op

Iteration   3: 47.916 ±(99.9%) 0.510 ms/op
                 executeFilterQuery·p0.00:   46.596 ms/op
                 executeFilterQuery·p0.50:   47.055 ms/op
                 executeFilterQuery·p0.90:   49.309 ms/op
                 executeFilterQuery·p0.95:   49.755 ms/op
                 executeFilterQuery·p0.99:   52.822 ms/op
                 executeFilterQuery·p0.999:  52.822 ms/op
                 executeFilterQuery·p0.9999: 52.822 ms/op
                 executeFilterQuery·p1.00:   52.822 ms/op

Iteration   4: 47.777 ±(99.9%) 0.441 ms/op
                 executeFilterQuery·p0.00:   46.596 ms/op
                 executeFilterQuery·p0.50:   47.350 ms/op
                 executeFilterQuery·p0.90:   48.955 ms/op
                 executeFilterQuery·p0.95:   48.965 ms/op
                 executeFilterQuery·p0.99:   49.218 ms/op
                 executeFilterQuery·p0.999:  49.218 ms/op
                 executeFilterQuery·p0.9999: 49.218 ms/op
                 executeFilterQuery·p1.00:   49.218 ms/op

Iteration   5: 47.010 ±(99.9%) 0.319 ms/op
                 executeFilterQuery·p0.00:   46.531 ms/op
                 executeFilterQuery·p0.50:   46.662 ms/op
                 executeFilterQuery·p0.90:   48.733 ms/op
                 executeFilterQuery·p0.95:   48.955 ms/op
                 executeFilterQuery·p0.99:   50.463 ms/op
                 executeFilterQuery·p0.999:  50.463 ms/op
                 executeFilterQuery·p0.9999: 50.463 ms/op
                 executeFilterQuery·p1.00:   50.463 ms/op


# Run progress: 23.33% complete, ETA 01:18:19
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.266 ±(99.9%) 4.317 ms/op
# Warmup Iteration   2: 47.387 ±(99.9%) 0.463 ms/op
# Warmup Iteration   3: 47.092 ±(99.9%) 0.408 ms/op
# Warmup Iteration   4: 47.091 ±(99.9%) 0.393 ms/op
# Warmup Iteration   5: 47.086 ±(99.9%) 0.371 ms/op
Iteration   1: 46.396 ±(99.9%) 0.037 ms/op
                 executeFilterQuery·p0.00:   46.137 ms/op
                 executeFilterQuery·p0.50:   46.399 ms/op
                 executeFilterQuery·p0.90:   46.465 ms/op
                 executeFilterQuery·p0.95:   46.531 ms/op
                 executeFilterQuery·p0.99:   46.924 ms/op
                 executeFilterQuery·p0.999:  46.924 ms/op
                 executeFilterQuery·p0.9999: 46.924 ms/op
                 executeFilterQuery·p1.00:   46.924 ms/op

Iteration   2: 46.879 ±(99.9%) 0.356 ms/op
                 executeFilterQuery·p0.00:   46.268 ms/op
                 executeFilterQuery·p0.50:   46.399 ms/op
                 executeFilterQuery·p0.90:   48.759 ms/op
                 executeFilterQuery·p0.95:   48.772 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op

Iteration   3: 47.472 ±(99.9%) 0.434 ms/op
                 executeFilterQuery·p0.00:   46.268 ms/op
                 executeFilterQuery·p0.50:   46.924 ms/op
                 executeFilterQuery·p0.90:   49.021 ms/op
                 executeFilterQuery·p0.95:   49.119 ms/op
                 executeFilterQuery·p0.99:   50.921 ms/op
                 executeFilterQuery·p0.999:  50.921 ms/op
                 executeFilterQuery·p0.9999: 50.921 ms/op
                 executeFilterQuery·p1.00:   50.921 ms/op

Iteration   4: 47.464 ±(99.9%) 0.442 ms/op
                 executeFilterQuery·p0.00:   46.072 ms/op
                 executeFilterQuery·p0.50:   46.989 ms/op
                 executeFilterQuery·p0.90:   49.054 ms/op
                 executeFilterQuery·p0.95:   49.234 ms/op
                 executeFilterQuery·p0.99:   50.790 ms/op
                 executeFilterQuery·p0.999:  50.790 ms/op
                 executeFilterQuery·p0.9999: 50.790 ms/op
                 executeFilterQuery·p1.00:   50.790 ms/op

Iteration   5: 47.576 ±(99.9%) 0.483 ms/op
                 executeFilterQuery·p0.00:   46.334 ms/op
                 executeFilterQuery·p0.50:   46.858 ms/op
                 executeFilterQuery·p0.90:   48.995 ms/op
                 executeFilterQuery·p0.95:   49.722 ms/op
                 executeFilterQuery·p0.99:   51.053 ms/op
                 executeFilterQuery·p0.999:  51.053 ms/op
                 executeFilterQuery·p0.9999: 51.053 ms/op
                 executeFilterQuery·p1.00:   51.053 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1870
  mean =     47.289 ±(99.9%) 0.093 ms/op

  Histogram, ms/op:
    [40.000, 41.250) = 0 
    [41.250, 42.500) = 0 
    [42.500, 43.750) = 0 
    [43.750, 45.000) = 0 
    [45.000, 46.250) = 202 
    [46.250, 47.500) = 1129 
    [47.500, 48.750) = 209 
    [48.750, 50.000) = 285 
    [50.000, 51.250) = 30 
    [51.250, 52.500) = 6 
    [52.500, 53.750) = 2 
    [53.750, 55.000) = 4 
    [55.000, 56.250) = 2 
    [56.250, 57.500) = 0 
    [57.500, 58.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     46.006 ms/op
     p(50.0000) =     46.793 ms/op
     p(90.0000) =     48.955 ms/op
     p(95.0000) =     49.283 ms/op
     p(99.0000) =     50.959 ms/op
     p(99.9000) =     56.519 ms/op
     p(99.9900) =     58.917 ms/op
     p(99.9990) =     58.917 ms/op
     p(99.9999) =     58.917 ms/op
    p(100.0000) =     58.917 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 25.00% complete, ETA 01:16:36
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

78.757 ±(99.9%) 10.704 ms/op
# Warmup Iteration   2: 73.285 ±(99.9%) 0.440 ms/op
# Warmup Iteration   3: 73.384 ±(99.9%) 0.404 ms/op
# Warmup Iteration   4: 74.988 ±(99.9%) 1.198 ms/op
# Warmup Iteration   5: 73.898 ±(99.9%) 0.666 ms/op
Iteration   1: 74.482 ±(99.9%) 1.295 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   77.804 ms/op
                 executeFilterQuery·p0.95:   79.351 ms/op
                 executeFilterQuery·p0.99:   91.881 ms/op
                 executeFilterQuery·p0.999:  91.881 ms/op
                 executeFilterQuery·p0.9999: 91.881 ms/op
                 executeFilterQuery·p1.00:   91.881 ms/op

Iteration   2: 73.283 ±(99.9%) 0.374 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   74.632 ms/op
                 executeFilterQuery·p0.95:   76.022 ms/op
                 executeFilterQuery·p0.99:   76.284 ms/op
                 executeFilterQuery·p0.999:  76.284 ms/op
                 executeFilterQuery·p0.9999: 76.284 ms/op
                 executeFilterQuery·p1.00:   76.284 ms/op

Iteration   3: 72.747 ±(99.9%) 0.041 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   72.876 ms/op
                 executeFilterQuery·p0.95:   72.876 ms/op
                 executeFilterQuery·p0.99:   73.007 ms/op
                 executeFilterQuery·p0.999:  73.007 ms/op
                 executeFilterQuery·p0.9999: 73.007 ms/op
                 executeFilterQuery·p1.00:   73.007 ms/op

Iteration   4: 72.767 ±(99.9%) 0.089 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   72.876 ms/op
                 executeFilterQuery·p0.95:   73.531 ms/op
                 executeFilterQuery·p0.99:   73.531 ms/op
                 executeFilterQuery·p0.999:  73.531 ms/op
                 executeFilterQuery·p0.9999: 73.531 ms/op
                 executeFilterQuery·p1.00:   73.531 ms/op

Iteration   5: 72.725 ±(99.9%) 0.030 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   72.745 ms/op
                 executeFilterQuery·p0.95:   72.830 ms/op
                 executeFilterQuery·p0.99:   73.007 ms/op
                 executeFilterQuery·p0.999:  73.007 ms/op
                 executeFilterQuery·p0.9999: 73.007 ms/op
                 executeFilterQuery·p1.00:   73.007 ms/op


# Run progress: 26.67% complete, ETA 01:14:55
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

78.756 ±(99.9%) 10.534 ms/op
# Warmup Iteration   2: 74.270 ±(99.9%) 0.774 ms/op
# Warmup Iteration   3: 74.118 ±(99.9%) 0.605 ms/op
# Warmup Iteration   4: 73.731 ±(99.9%) 0.621 ms/op
# Warmup Iteration   5: 73.017 ±(99.9%) 0.256 ms/op
Iteration   1: 73.619 ±(99.9%) 0.667 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   75.996 ms/op
                 executeFilterQuery·p0.95:   78.093 ms/op
                 executeFilterQuery·p0.99:   78.774 ms/op
                 executeFilterQuery·p0.999:  78.774 ms/op
                 executeFilterQuery·p0.9999: 78.774 ms/op
                 executeFilterQuery·p1.00:   78.774 ms/op

Iteration   2: 74.844 ±(99.9%) 1.098 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   79.377 ms/op
                 executeFilterQuery·p0.95:   79.692 ms/op
                 executeFilterQuery·p0.99:   80.085 ms/op
                 executeFilterQuery·p0.999:  80.085 ms/op
                 executeFilterQuery·p0.9999: 80.085 ms/op
                 executeFilterQuery·p1.00:   80.085 ms/op

Iteration   3: 74.227 ±(99.9%) 0.796 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   77.293 ms/op
                 executeFilterQuery·p0.95:   77.988 ms/op
                 executeFilterQuery·p0.99:   78.512 ms/op
                 executeFilterQuery·p0.999:  78.512 ms/op
                 executeFilterQuery·p0.9999: 78.512 ms/op
                 executeFilterQuery·p1.00:   78.512 ms/op

Iteration   4: 74.016 ±(99.9%) 0.718 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   76.900 ms/op
                 executeFilterQuery·p0.95:   77.798 ms/op
                 executeFilterQuery·p0.99:   78.119 ms/op
                 executeFilterQuery·p0.999:  78.119 ms/op
                 executeFilterQuery·p0.9999: 78.119 ms/op
                 executeFilterQuery·p1.00:   78.119 ms/op

Iteration   5: 73.329 ±(99.9%) 0.384 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   74.711 ms/op
                 executeFilterQuery·p0.95:   76.022 ms/op
                 executeFilterQuery·p0.99:   76.284 ms/op
                 executeFilterQuery·p0.999:  76.284 ms/op
                 executeFilterQuery·p0.9999: 76.284 ms/op
                 executeFilterQuery·p1.00:   76.284 ms/op


# Run progress: 28.33% complete, ETA 01:13:12
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

79.969 ±(99.9%) 14.707 ms/op
# Warmup Iteration   2: 74.041 ±(99.9%) 0.873 ms/op
# Warmup Iteration   3: 73.110 ±(99.9%) 0.283 ms/op
# Warmup Iteration   4: 72.945 ±(99.9%) 0.192 ms/op
# Warmup Iteration   5: 73.509 ±(99.9%) 1.011 ms/op
Iteration   1: 74.164 ±(99.9%) 0.597 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.531 ms/op
                 executeFilterQuery·p0.90:   76.284 ms/op
                 executeFilterQuery·p0.95:   77.234 ms/op
                 executeFilterQuery·p0.99:   78.119 ms/op
                 executeFilterQuery·p0.999:  78.119 ms/op
                 executeFilterQuery·p0.9999: 78.119 ms/op
                 executeFilterQuery·p1.00:   78.119 ms/op

Iteration   2: 73.556 ±(99.9%) 0.618 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   75.760 ms/op
                 executeFilterQuery·p0.95:   77.169 ms/op
                 executeFilterQuery·p0.99:   79.823 ms/op
                 executeFilterQuery·p0.999:  79.823 ms/op
                 executeFilterQuery·p0.9999: 79.823 ms/op
                 executeFilterQuery·p1.00:   79.823 ms/op

Iteration   3: 74.715 ±(99.9%) 1.040 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.662 ms/op
                 executeFilterQuery·p0.90:   77.962 ms/op
                 executeFilterQuery·p0.95:   81.684 ms/op
                 executeFilterQuery·p0.99:   81.920 ms/op
                 executeFilterQuery·p0.999:  81.920 ms/op
                 executeFilterQuery·p0.9999: 81.920 ms/op
                 executeFilterQuery·p1.00:   81.920 ms/op

Iteration   4: 73.787 ±(99.9%) 0.434 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   73.531 ms/op
                 executeFilterQuery·p0.90:   74.908 ms/op
                 executeFilterQuery·p0.95:   75.825 ms/op
                 executeFilterQuery·p0.99:   78.512 ms/op
                 executeFilterQuery·p0.999:  78.512 ms/op
                 executeFilterQuery·p0.9999: 78.512 ms/op
                 executeFilterQuery·p1.00:   78.512 ms/op

Iteration   5: 74.466 ±(99.9%) 0.583 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   73.925 ms/op
                 executeFilterQuery·p0.90:   76.703 ms/op
                 executeFilterQuery·p0.95:   77.175 ms/op
                 executeFilterQuery·p0.99:   78.119 ms/op
                 executeFilterQuery·p0.999:  78.119 ms/op
                 executeFilterQuery·p0.9999: 78.119 ms/op
                 executeFilterQuery·p1.00:   78.119 ms/op


# Run progress: 30.00% complete, ETA 01:11:30
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

79.536 ±(99.9%) 8.587 ms/op
# Warmup Iteration   2: 74.246 ±(99.9%) 1.217 ms/op
# Warmup Iteration   3: 73.605 ±(99.9%) 0.429 ms/op
# Warmup Iteration   4: 73.611 ±(99.9%) 0.486 ms/op
# Warmup Iteration   5: 74.640 ±(99.9%) 0.406 ms/op
Iteration   1: 74.499 ±(99.9%) 0.417 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   74.449 ms/op
                 executeFilterQuery·p0.90:   75.891 ms/op
                 executeFilterQuery·p0.95:   75.891 ms/op
                 executeFilterQuery·p0.99:   76.415 ms/op
                 executeFilterQuery·p0.999:  76.415 ms/op
                 executeFilterQuery·p0.9999: 76.415 ms/op
                 executeFilterQuery·p1.00:   76.415 ms/op

Iteration   2: 74.083 ±(99.9%) 0.523 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.794 ms/op
                 executeFilterQuery·p0.90:   75.707 ms/op
                 executeFilterQuery·p0.95:   76.861 ms/op
                 executeFilterQuery·p0.99:   77.988 ms/op
                 executeFilterQuery·p0.999:  77.988 ms/op
                 executeFilterQuery·p0.9999: 77.988 ms/op
                 executeFilterQuery·p1.00:   77.988 ms/op

Iteration   3: 73.176 ±(99.9%) 0.268 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   74.318 ms/op
                 executeFilterQuery·p0.95:   74.895 ms/op
                 executeFilterQuery·p0.99:   75.366 ms/op
                 executeFilterQuery·p0.999:  75.366 ms/op
                 executeFilterQuery·p0.9999: 75.366 ms/op
                 executeFilterQuery·p1.00:   75.366 ms/op

Iteration   4: 72.828 ±(99.9%) 0.057 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   73.007 ms/op
                 executeFilterQuery·p0.95:   73.138 ms/op
                 executeFilterQuery·p0.99:   73.400 ms/op
                 executeFilterQuery·p0.999:  73.400 ms/op
                 executeFilterQuery·p0.9999: 73.400 ms/op
                 executeFilterQuery·p1.00:   73.400 ms/op

Iteration   5: 73.820 ±(99.9%) 0.931 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.942 ms/op
                 executeFilterQuery·p0.90:   75.825 ms/op
                 executeFilterQuery·p0.95:   77.595 ms/op
                 executeFilterQuery·p0.99:   86.639 ms/op
                 executeFilterQuery·p0.999:  86.639 ms/op
                 executeFilterQuery·p0.9999: 86.639 ms/op
                 executeFilterQuery·p1.00:   86.639 ms/op


# Run progress: 31.67% complete, ETA 01:09:48
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

78.121 ±(99.9%) 8.647 ms/op
# Warmup Iteration   2: 74.742 ±(99.9%) 1.561 ms/op
# Warmup Iteration   3: 74.330 ±(99.9%) 1.152 ms/op
# Warmup Iteration   4: 73.255 ±(99.9%) 0.308 ms/op
# Warmup Iteration   5: 73.340 ±(99.9%) 0.241 ms/op
Iteration   1: 73.716 ±(99.9%) 0.410 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.269 ms/op
                 executeFilterQuery·p0.90:   75.235 ms/op
                 executeFilterQuery·p0.95:   75.956 ms/op
                 executeFilterQuery·p0.99:   76.284 ms/op
                 executeFilterQuery·p0.999:  76.284 ms/op
                 executeFilterQuery·p0.9999: 76.284 ms/op
                 executeFilterQuery·p1.00:   76.284 ms/op

Iteration   2: 74.397 ±(99.9%) 0.847 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   74.056 ms/op
                 executeFilterQuery·p0.90:   76.258 ms/op
                 executeFilterQuery·p0.95:   78.198 ms/op
                 executeFilterQuery·p0.99:   83.886 ms/op
                 executeFilterQuery·p0.999:  83.886 ms/op
                 executeFilterQuery·p0.9999: 83.886 ms/op
                 executeFilterQuery·p1.00:   83.886 ms/op

Iteration   3: 74.214 ±(99.9%) 0.535 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   74.056 ms/op
                 executeFilterQuery·p0.90:   75.969 ms/op
                 executeFilterQuery·p0.95:   77.018 ms/op
                 executeFilterQuery·p0.99:   78.119 ms/op
                 executeFilterQuery·p0.999:  78.119 ms/op
                 executeFilterQuery·p0.9999: 78.119 ms/op
                 executeFilterQuery·p1.00:   78.119 ms/op

Iteration   4: 74.045 ±(99.9%) 0.565 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   73.662 ms/op
                 executeFilterQuery·p0.90:   75.838 ms/op
                 executeFilterQuery·p0.95:   76.494 ms/op
                 executeFilterQuery·p0.99:   79.692 ms/op
                 executeFilterQuery·p0.999:  79.692 ms/op
                 executeFilterQuery·p0.9999: 79.692 ms/op
                 executeFilterQuery·p1.00:   79.692 ms/op

Iteration   5: 74.141 ±(99.9%) 0.515 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   74.056 ms/op
                 executeFilterQuery·p0.90:   75.838 ms/op
                 executeFilterQuery·p0.95:   76.127 ms/op
                 executeFilterQuery·p0.99:   79.692 ms/op
                 executeFilterQuery·p0.999:  79.692 ms/op
                 executeFilterQuery·p0.9999: 79.692 ms/op
                 executeFilterQuery·p1.00:   79.692 ms/op



Result "benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery":
  N = 1593
  mean =     73.814 ±(99.9%) 0.131 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 0 
    [ 72.500,  75.000) = 1327 
    [ 75.000,  77.500) = 211 
    [ 77.500,  80.000) = 44 
    [ 80.000,  82.500) = 8 
    [ 82.500,  85.000) = 1 
    [ 85.000,  87.500) = 1 
    [ 87.500,  90.000) = 0 
    [ 90.000,  92.500) = 1 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.614 ms/op
     p(50.0000) =     73.138 ms/op
     p(90.0000) =     75.891 ms/op
     p(95.0000) =     76.848 ms/op
     p(99.0000) =     79.692 ms/op
     p(99.9000) =     88.767 ms/op
     p(99.9900) =     91.881 ms/op
     p(99.9990) =     91.881 ms/op
     p(99.9999) =     91.881 ms/op
    p(100.0000) =     91.881 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 33.33% complete, ETA 01:08:07
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

77.672 ±(99.9%) 8.163 ms/op
# Warmup Iteration   2: 74.157 ±(99.9%) 0.509 ms/op
# Warmup Iteration   3: 73.317 ±(99.9%) 0.437 ms/op
# Warmup Iteration   4: 74.153 ±(99.9%) 0.908 ms/op
# Warmup Iteration   5: 73.402 ±(99.9%) 0.288 ms/op
Iteration   1: 73.194 ±(99.9%) 0.164 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   73.269 ms/op
                 executeFilterQuery·p0.95:   73.505 ms/op
                 executeFilterQuery·p0.99:   75.366 ms/op
                 executeFilterQuery·p0.999:  75.366 ms/op
                 executeFilterQuery·p0.9999: 75.366 ms/op
                 executeFilterQuery·p1.00:   75.366 ms/op

Iteration   2: 73.766 ±(99.9%) 0.397 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   73.400 ms/op
                 executeFilterQuery·p0.90:   75.497 ms/op
                 executeFilterQuery·p0.95:   76.133 ms/op
                 executeFilterQuery·p0.99:   76.415 ms/op
                 executeFilterQuery·p0.999:  76.415 ms/op
                 executeFilterQuery·p0.9999: 76.415 ms/op
                 executeFilterQuery·p1.00:   76.415 ms/op

Iteration   3: 74.206 ±(99.9%) 0.542 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   73.662 ms/op
                 executeFilterQuery·p0.90:   76.245 ms/op
                 executeFilterQuery·p0.95:   76.920 ms/op
                 executeFilterQuery·p0.99:   77.988 ms/op
                 executeFilterQuery·p0.999:  77.988 ms/op
                 executeFilterQuery·p0.9999: 77.988 ms/op
                 executeFilterQuery·p1.00:   77.988 ms/op

Iteration   4: 75.377 ±(99.9%) 1.473 ms/op
                 executeFilterQuery·p0.00:   73.269 ms/op
                 executeFilterQuery·p0.50:   74.646 ms/op
                 executeFilterQuery·p0.90:   77.555 ms/op
                 executeFilterQuery·p0.95:   78.243 ms/op
                 executeFilterQuery·p0.99:   98.173 ms/op
                 executeFilterQuery·p0.999:  98.173 ms/op
                 executeFilterQuery·p0.9999: 98.173 ms/op
                 executeFilterQuery·p1.00:   98.173 ms/op

Iteration   5: 73.617 ±(99.9%) 0.380 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   73.269 ms/op
                 executeFilterQuery·p0.90:   75.130 ms/op
                 executeFilterQuery·p0.95:   76.100 ms/op
                 executeFilterQuery·p0.99:   77.201 ms/op
                 executeFilterQuery·p0.999:  77.201 ms/op
                 executeFilterQuery·p0.9999: 77.201 ms/op
                 executeFilterQuery·p1.00:   77.201 ms/op


# Run progress: 35.00% complete, ETA 01:06:25
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.413 ±(99.9%) 7.489 ms/op
# Warmup Iteration   2: 73.196 ±(99.9%) 0.397 ms/op
# Warmup Iteration   3: 73.167 ±(99.9%) 0.390 ms/op
# Warmup Iteration   4: 73.454 ±(99.9%) 0.658 ms/op
# Warmup Iteration   5: 74.635 ±(99.9%) 1.110 ms/op
Iteration   1: 73.046 ±(99.9%) 0.507 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.810 ms/op
                 executeFilterQuery·p0.90:   73.138 ms/op
                 executeFilterQuery·p0.95:   73.400 ms/op
                 executeFilterQuery·p0.99:   81.396 ms/op
                 executeFilterQuery·p0.999:  81.396 ms/op
                 executeFilterQuery·p0.9999: 81.396 ms/op
                 executeFilterQuery·p1.00:   81.396 ms/op

Iteration   2: 73.841 ±(99.9%) 0.731 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   77.070 ms/op
                 executeFilterQuery·p0.95:   77.673 ms/op
                 executeFilterQuery·p0.99:   78.774 ms/op
                 executeFilterQuery·p0.999:  78.774 ms/op
                 executeFilterQuery·p0.9999: 78.774 ms/op
                 executeFilterQuery·p1.00:   78.774 ms/op

Iteration   3: 73.034 ±(99.9%) 0.392 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   73.269 ms/op
                 executeFilterQuery·p0.95:   75.563 ms/op
                 executeFilterQuery·p0.99:   77.595 ms/op
                 executeFilterQuery·p0.999:  77.595 ms/op
                 executeFilterQuery·p0.9999: 77.595 ms/op
                 executeFilterQuery·p1.00:   77.595 ms/op

Iteration   4: 73.958 ±(99.9%) 0.636 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   76.179 ms/op
                 executeFilterQuery·p0.95:   77.201 ms/op
                 executeFilterQuery·p0.99:   78.119 ms/op
                 executeFilterQuery·p0.999:  78.119 ms/op
                 executeFilterQuery·p0.9999: 78.119 ms/op
                 executeFilterQuery·p1.00:   78.119 ms/op

Iteration   5: 73.619 ±(99.9%) 0.508 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   75.707 ms/op
                 executeFilterQuery·p0.95:   76.415 ms/op
                 executeFilterQuery·p0.99:   77.332 ms/op
                 executeFilterQuery·p0.999:  77.332 ms/op
                 executeFilterQuery·p0.9999: 77.332 ms/op
                 executeFilterQuery·p1.00:   77.332 ms/op


# Run progress: 36.67% complete, ETA 01:04:42
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

77.007 ±(99.9%) 8.125 ms/op
# Warmup Iteration   2: 73.153 ±(99.9%) 0.338 ms/op
# Warmup Iteration   3: 73.798 ±(99.9%) 0.548 ms/op
# Warmup Iteration   4: 73.865 ±(99.9%) 0.619 ms/op
# Warmup Iteration   5: 73.533 ±(99.9%) 0.477 ms/op
Iteration   1: 74.627 ±(99.9%) 1.252 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.269 ms/op
                 executeFilterQuery·p0.90:   78.407 ms/op
                 executeFilterQuery·p0.95:   79.010 ms/op
                 executeFilterQuery·p0.99:   87.163 ms/op
                 executeFilterQuery·p0.999:  87.163 ms/op
                 executeFilterQuery·p0.9999: 87.163 ms/op
                 executeFilterQuery·p1.00:   87.163 ms/op

Iteration   2: 74.550 ±(99.9%) 0.990 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.925 ms/op
                 executeFilterQuery·p0.90:   76.769 ms/op
                 executeFilterQuery·p0.95:   76.939 ms/op
                 executeFilterQuery·p0.99:   88.211 ms/op
                 executeFilterQuery·p0.999:  88.211 ms/op
                 executeFilterQuery·p0.9999: 88.211 ms/op
                 executeFilterQuery·p1.00:   88.211 ms/op

Iteration   3: 73.155 ±(99.9%) 0.328 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   73.662 ms/op
                 executeFilterQuery·p0.95:   75.661 ms/op
                 executeFilterQuery·p0.99:   76.022 ms/op
                 executeFilterQuery·p0.999:  76.022 ms/op
                 executeFilterQuery·p0.9999: 76.022 ms/op
                 executeFilterQuery·p1.00:   76.022 ms/op

Iteration   4: 73.232 ±(99.9%) 0.323 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   74.082 ms/op
                 executeFilterQuery·p0.95:   75.209 ms/op
                 executeFilterQuery·p0.99:   76.284 ms/op
                 executeFilterQuery·p0.999:  76.284 ms/op
                 executeFilterQuery·p0.9999: 76.284 ms/op
                 executeFilterQuery·p1.00:   76.284 ms/op

Iteration   5: 73.313 ±(99.9%) 0.329 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   73.479 ms/op
                 executeFilterQuery·p0.95:   73.636 ms/op
                 executeFilterQuery·p0.99:   78.905 ms/op
                 executeFilterQuery·p0.999:  78.905 ms/op
                 executeFilterQuery·p0.9999: 78.905 ms/op
                 executeFilterQuery·p1.00:   78.905 ms/op


# Run progress: 38.33% complete, ETA 01:03:00
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

77.684 ±(99.9%) 8.699 ms/op
# Warmup Iteration   2: 73.028 ±(99.9%) 0.135 ms/op
# Warmup Iteration   3: 73.097 ±(99.9%) 0.132 ms/op
# Warmup Iteration   4: 73.345 ±(99.9%) 0.291 ms/op
# Warmup Iteration   5: 73.122 ±(99.9%) 0.029 ms/op
Iteration   1: 73.112 ±(99.9%) 0.065 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   73.269 ms/op
                 executeFilterQuery·p0.95:   73.269 ms/op
                 executeFilterQuery·p0.99:   74.056 ms/op
                 executeFilterQuery·p0.999:  74.056 ms/op
                 executeFilterQuery·p0.9999: 74.056 ms/op
                 executeFilterQuery·p1.00:   74.056 ms/op

Iteration   2: 73.122 ±(99.9%) 0.048 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   73.269 ms/op
                 executeFilterQuery·p0.95:   73.269 ms/op
                 executeFilterQuery·p0.99:   73.531 ms/op
                 executeFilterQuery·p0.999:  73.531 ms/op
                 executeFilterQuery·p0.9999: 73.531 ms/op
                 executeFilterQuery·p1.00:   73.531 ms/op

Iteration   3: 73.107 ±(99.9%) 0.064 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   73.204 ms/op
                 executeFilterQuery·p0.95:   73.368 ms/op
                 executeFilterQuery·p0.99:   73.925 ms/op
                 executeFilterQuery·p0.999:  73.925 ms/op
                 executeFilterQuery·p0.9999: 73.925 ms/op
                 executeFilterQuery·p1.00:   73.925 ms/op

Iteration   4: 73.791 ±(99.9%) 0.384 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   73.531 ms/op
                 executeFilterQuery·p0.90:   75.340 ms/op
                 executeFilterQuery·p0.95:   76.153 ms/op
                 executeFilterQuery·p0.99:   76.677 ms/op
                 executeFilterQuery·p0.999:  76.677 ms/op
                 executeFilterQuery·p0.9999: 76.677 ms/op
                 executeFilterQuery·p1.00:   76.677 ms/op

Iteration   5: 73.273 ±(99.9%) 0.389 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   73.990 ms/op
                 executeFilterQuery·p0.95:   74.187 ms/op
                 executeFilterQuery·p0.99:   77.988 ms/op
                 executeFilterQuery·p0.999:  77.988 ms/op
                 executeFilterQuery·p0.9999: 77.988 ms/op
                 executeFilterQuery·p1.00:   77.988 ms/op


# Run progress: 40.00% complete, ETA 01:01:18
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.997 ±(99.9%) 8.234 ms/op
# Warmup Iteration   2: 73.167 ±(99.9%) 0.056 ms/op
# Warmup Iteration   3: 73.171 ±(99.9%) 0.035 ms/op
# Warmup Iteration   4: 74.621 ±(99.9%) 0.839 ms/op
# Warmup Iteration   5: 75.493 ±(99.9%) 1.005 ms/op
Iteration   1: 74.625 ±(99.9%) 0.931 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.531 ms/op
                 executeFilterQuery·p0.90:   78.355 ms/op
                 executeFilterQuery·p0.95:   79.430 ms/op
                 executeFilterQuery·p0.99:   80.216 ms/op
                 executeFilterQuery·p0.999:  80.216 ms/op
                 executeFilterQuery·p0.9999: 80.216 ms/op
                 executeFilterQuery·p1.00:   80.216 ms/op

Iteration   2: 74.043 ±(99.9%) 0.669 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   73.531 ms/op
                 executeFilterQuery·p0.90:   75.550 ms/op
                 executeFilterQuery·p0.95:   78.302 ms/op
                 executeFilterQuery·p0.99:   80.609 ms/op
                 executeFilterQuery·p0.999:  80.609 ms/op
                 executeFilterQuery·p0.9999: 80.609 ms/op
                 executeFilterQuery·p1.00:   80.609 ms/op

Iteration   3: 74.504 ±(99.9%) 0.772 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   73.662 ms/op
                 executeFilterQuery·p0.90:   76.808 ms/op
                 executeFilterQuery·p0.95:   78.715 ms/op
                 executeFilterQuery·p0.99:   80.478 ms/op
                 executeFilterQuery·p0.999:  80.478 ms/op
                 executeFilterQuery·p0.9999: 80.478 ms/op
                 executeFilterQuery·p1.00:   80.478 ms/op

Iteration   4: 74.516 ±(99.9%) 0.602 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   73.794 ms/op
                 executeFilterQuery·p0.90:   76.677 ms/op
                 executeFilterQuery·p0.95:   77.070 ms/op
                 executeFilterQuery·p0.99:   77.464 ms/op
                 executeFilterQuery·p0.999:  77.464 ms/op
                 executeFilterQuery·p0.9999: 77.464 ms/op
                 executeFilterQuery·p1.00:   77.464 ms/op

Iteration   5: 74.500 ±(99.9%) 0.666 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   73.662 ms/op
                 executeFilterQuery·p0.90:   76.887 ms/op
                 executeFilterQuery·p0.95:   77.057 ms/op
                 executeFilterQuery·p0.99:   78.119 ms/op
                 executeFilterQuery·p0.999:  78.119 ms/op
                 executeFilterQuery·p0.9999: 78.119 ms/op
                 executeFilterQuery·p1.00:   78.119 ms/op



Result "benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery":
  N = 1567
  mean =     73.794 ±(99.9%) 0.131 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 1 
    [ 72.500,  75.000) = 1326 
    [ 75.000,  77.500) = 194 
    [ 77.500,  80.000) = 38 
    [ 80.000,  82.500) = 4 
    [ 82.500,  85.000) = 1 
    [ 85.000,  87.500) = 1 
    [ 87.500,  90.000) = 1 
    [ 90.000,  92.500) = 0 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.483 ms/op
     p(50.0000) =     73.269 ms/op
     p(90.0000) =     75.891 ms/op
     p(95.0000) =     76.808 ms/op
     p(99.0000) =     79.120 ms/op
     p(99.9000) =     92.515 ms/op
     p(99.9900) =     98.173 ms/op
     p(99.9990) =     98.173 ms/op
     p(99.9999) =     98.173 ms/op
    p(100.0000) =     98.173 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 41.67% complete, ETA 00:59:35
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.557 ±(99.9%) 7.844 ms/op
# Warmup Iteration   2: 74.591 ±(99.9%) 1.585 ms/op
# Warmup Iteration   3: 72.921 ±(99.9%) 0.326 ms/op
# Warmup Iteration   4: 73.296 ±(99.9%) 0.403 ms/op
# Warmup Iteration   5: 73.144 ±(99.9%) 0.377 ms/op
Iteration   1: 73.711 ±(99.9%) 0.508 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   73.269 ms/op
                 executeFilterQuery·p0.90:   75.157 ms/op
                 executeFilterQuery·p0.95:   75.851 ms/op
                 executeFilterQuery·p0.99:   79.430 ms/op
                 executeFilterQuery·p0.999:  79.430 ms/op
                 executeFilterQuery·p0.9999: 79.430 ms/op
                 executeFilterQuery·p1.00:   79.430 ms/op

Iteration   2: 73.359 ±(99.9%) 0.385 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   74.580 ms/op
                 executeFilterQuery·p0.95:   75.340 ms/op
                 executeFilterQuery·p0.99:   77.464 ms/op
                 executeFilterQuery·p0.999:  77.464 ms/op
                 executeFilterQuery·p0.9999: 77.464 ms/op
                 executeFilterQuery·p1.00:   77.464 ms/op

Iteration   3: 73.124 ±(99.9%) 0.271 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   74.003 ms/op
                 executeFilterQuery·p0.95:   74.763 ms/op
                 executeFilterQuery·p0.99:   75.235 ms/op
                 executeFilterQuery·p0.999:  75.235 ms/op
                 executeFilterQuery·p0.9999: 75.235 ms/op
                 executeFilterQuery·p1.00:   75.235 ms/op

Iteration   4: 73.194 ±(99.9%) 0.503 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   74.134 ms/op
                 executeFilterQuery·p0.95:   75.026 ms/op
                 executeFilterQuery·p0.99:   80.871 ms/op
                 executeFilterQuery·p0.999:  80.871 ms/op
                 executeFilterQuery·p0.9999: 80.871 ms/op
                 executeFilterQuery·p1.00:   80.871 ms/op

Iteration   5: 72.831 ±(99.9%) 0.234 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   73.007 ms/op
                 executeFilterQuery·p0.95:   73.007 ms/op
                 executeFilterQuery·p0.99:   76.022 ms/op
                 executeFilterQuery·p0.999:  76.022 ms/op
                 executeFilterQuery·p0.9999: 76.022 ms/op
                 executeFilterQuery·p1.00:   76.022 ms/op


# Run progress: 43.33% complete, ETA 00:57:53
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.920 ±(99.9%) 8.305 ms/op
# Warmup Iteration   2: 73.442 ±(99.9%) 2.179 ms/op
# Warmup Iteration   3: 73.065 ±(99.9%) 0.507 ms/op
# Warmup Iteration   4: 72.749 ±(99.9%) 0.025 ms/op
# Warmup Iteration   5: 73.434 ±(99.9%) 0.344 ms/op
Iteration   1: 73.521 ±(99.9%) 0.444 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   74.711 ms/op
                 executeFilterQuery·p0.95:   76.467 ms/op
                 executeFilterQuery·p0.99:   77.332 ms/op
                 executeFilterQuery·p0.999:  77.332 ms/op
                 executeFilterQuery·p0.9999: 77.332 ms/op
                 executeFilterQuery·p1.00:   77.332 ms/op

Iteration   2: 74.094 ±(99.9%) 0.522 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.728 ms/op
                 executeFilterQuery·p0.90:   76.114 ms/op
                 executeFilterQuery·p0.95:   76.395 ms/op
                 executeFilterQuery·p0.99:   76.677 ms/op
                 executeFilterQuery·p0.999:  76.677 ms/op
                 executeFilterQuery·p0.9999: 76.677 ms/op
                 executeFilterQuery·p1.00:   76.677 ms/op

Iteration   3: 74.857 ±(99.9%) 0.820 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   74.449 ms/op
                 executeFilterQuery·p0.90:   78.224 ms/op
                 executeFilterQuery·p0.95:   79.010 ms/op
                 executeFilterQuery·p0.99:   79.692 ms/op
                 executeFilterQuery·p0.999:  79.692 ms/op
                 executeFilterQuery·p0.9999: 79.692 ms/op
                 executeFilterQuery·p1.00:   79.692 ms/op

Iteration   4: 74.415 ±(99.9%) 1.098 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   78.355 ms/op
                 executeFilterQuery·p0.95:   80.085 ms/op
                 executeFilterQuery·p0.99:   83.624 ms/op
                 executeFilterQuery·p0.999:  83.624 ms/op
                 executeFilterQuery·p0.9999: 83.624 ms/op
                 executeFilterQuery·p1.00:   83.624 ms/op

Iteration   5: 72.882 ±(99.9%) 0.150 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   73.138 ms/op
                 executeFilterQuery·p0.95:   73.499 ms/op
                 executeFilterQuery·p0.99:   74.842 ms/op
                 executeFilterQuery·p0.999:  74.842 ms/op
                 executeFilterQuery·p0.9999: 74.842 ms/op
                 executeFilterQuery·p1.00:   74.842 ms/op


# Run progress: 45.00% complete, ETA 00:56:11
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.307 ±(99.9%) 7.594 ms/op
# Warmup Iteration   2: 73.017 ±(99.9%) 0.057 ms/op
# Warmup Iteration   3: 72.835 ±(99.9%) 0.060 ms/op
# Warmup Iteration   4: 72.958 ±(99.9%) 0.131 ms/op
# Warmup Iteration   5: 73.042 ±(99.9%) 0.282 ms/op
Iteration   1: 73.450 ±(99.9%) 0.583 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   76.363 ms/op
                 executeFilterQuery·p0.95:   76.939 ms/op
                 executeFilterQuery·p0.99:   78.512 ms/op
                 executeFilterQuery·p0.999:  78.512 ms/op
                 executeFilterQuery·p0.9999: 78.512 ms/op
                 executeFilterQuery·p1.00:   78.512 ms/op

Iteration   2: 73.431 ±(99.9%) 0.823 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   73.794 ms/op
                 executeFilterQuery·p0.95:   76.775 ms/op
                 executeFilterQuery·p0.99:   86.901 ms/op
                 executeFilterQuery·p0.999:  86.901 ms/op
                 executeFilterQuery·p0.9999: 86.901 ms/op
                 executeFilterQuery·p1.00:   86.901 ms/op

Iteration   3: 72.825 ±(99.9%) 0.037 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   72.876 ms/op
                 executeFilterQuery·p0.95:   73.007 ms/op
                 executeFilterQuery·p0.99:   73.138 ms/op
                 executeFilterQuery·p0.999:  73.138 ms/op
                 executeFilterQuery·p0.9999: 73.138 ms/op
                 executeFilterQuery·p1.00:   73.138 ms/op

Iteration   4: 72.989 ±(99.9%) 0.296 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   73.335 ms/op
                 executeFilterQuery·p0.95:   74.744 ms/op
                 executeFilterQuery·p0.99:   76.415 ms/op
                 executeFilterQuery·p0.999:  76.415 ms/op
                 executeFilterQuery·p0.9999: 76.415 ms/op
                 executeFilterQuery·p1.00:   76.415 ms/op

Iteration   5: 74.064 ±(99.9%) 0.757 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   77.018 ms/op
                 executeFilterQuery·p0.95:   77.306 ms/op
                 executeFilterQuery·p0.99:   79.954 ms/op
                 executeFilterQuery·p0.999:  79.954 ms/op
                 executeFilterQuery·p0.9999: 79.954 ms/op
                 executeFilterQuery·p1.00:   79.954 ms/op


# Run progress: 46.67% complete, ETA 00:54:29
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

78.838 ±(99.9%) 10.064 ms/op
# Warmup Iteration   2: 75.457 ±(99.9%) 1.023 ms/op
# Warmup Iteration   3: 73.848 ±(99.9%) 1.112 ms/op
# Warmup Iteration   4: 73.220 ±(99.9%) 0.148 ms/op
# Warmup Iteration   5: 73.052 ±(99.9%) 0.061 ms/op
Iteration   1: 73.062 ±(99.9%) 0.097 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   73.138 ms/op
                 executeFilterQuery·p0.95:   73.826 ms/op
                 executeFilterQuery·p0.99:   74.056 ms/op
                 executeFilterQuery·p0.999:  74.056 ms/op
                 executeFilterQuery·p0.9999: 74.056 ms/op
                 executeFilterQuery·p1.00:   74.056 ms/op

Iteration   2: 73.118 ±(99.9%) 0.163 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   73.138 ms/op
                 executeFilterQuery·p0.95:   73.138 ms/op
                 executeFilterQuery·p0.99:   76.022 ms/op
                 executeFilterQuery·p0.999:  76.022 ms/op
                 executeFilterQuery·p0.9999: 76.022 ms/op
                 executeFilterQuery·p1.00:   76.022 ms/op

Iteration   3: 73.099 ±(99.9%) 0.085 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   73.138 ms/op
                 executeFilterQuery·p0.95:   73.236 ms/op
                 executeFilterQuery·p0.99:   74.449 ms/op
                 executeFilterQuery·p0.999:  74.449 ms/op
                 executeFilterQuery·p0.9999: 74.449 ms/op
                 executeFilterQuery·p1.00:   74.449 ms/op

Iteration   4: 74.788 ±(99.9%) 0.667 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   74.580 ms/op
                 executeFilterQuery·p0.90:   77.280 ms/op
                 executeFilterQuery·p0.95:   78.302 ms/op
                 executeFilterQuery·p0.99:   79.299 ms/op
                 executeFilterQuery·p0.999:  79.299 ms/op
                 executeFilterQuery·p0.9999: 79.299 ms/op
                 executeFilterQuery·p1.00:   79.299 ms/op

Iteration   5: 74.644 ±(99.9%) 0.695 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   73.925 ms/op
                 executeFilterQuery·p0.90:   77.175 ms/op
                 executeFilterQuery·p0.95:   77.686 ms/op
                 executeFilterQuery·p0.99:   79.036 ms/op
                 executeFilterQuery·p0.999:  79.036 ms/op
                 executeFilterQuery·p0.9999: 79.036 ms/op
                 executeFilterQuery·p1.00:   79.036 ms/op


# Run progress: 48.33% complete, ETA 00:52:47
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

77.060 ±(99.9%) 8.586 ms/op
# Warmup Iteration   2: 73.355 ±(99.9%) 0.416 ms/op
# Warmup Iteration   3: 74.314 ±(99.9%) 0.911 ms/op
# Warmup Iteration   4: 74.599 ±(99.9%) 0.745 ms/op
# Warmup Iteration   5: 74.180 ±(99.9%) 0.669 ms/op
Iteration   1: 73.306 ±(99.9%) 0.355 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   74.514 ms/op
                 executeFilterQuery·p0.95:   75.530 ms/op
                 executeFilterQuery·p0.99:   76.415 ms/op
                 executeFilterQuery·p0.999:  76.415 ms/op
                 executeFilterQuery·p0.9999: 76.415 ms/op
                 executeFilterQuery·p1.00:   76.415 ms/op

Iteration   2: 74.168 ±(99.9%) 0.926 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.400 ms/op
                 executeFilterQuery·p0.90:   76.284 ms/op
                 executeFilterQuery·p0.95:   77.798 ms/op
                 executeFilterQuery·p0.99:   85.590 ms/op
                 executeFilterQuery·p0.999:  85.590 ms/op
                 executeFilterQuery·p0.9999: 85.590 ms/op
                 executeFilterQuery·p1.00:   85.590 ms/op

Iteration   3: 73.542 ±(99.9%) 0.394 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   75.288 ms/op
                 executeFilterQuery·p0.95:   75.733 ms/op
                 executeFilterQuery·p0.99:   75.891 ms/op
                 executeFilterQuery·p0.999:  75.891 ms/op
                 executeFilterQuery·p0.9999: 75.891 ms/op
                 executeFilterQuery·p1.00:   75.891 ms/op

Iteration   4: 73.914 ±(99.9%) 0.380 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.794 ms/op
                 executeFilterQuery·p0.90:   75.104 ms/op
                 executeFilterQuery·p0.95:   75.629 ms/op
                 executeFilterQuery·p0.99:   76.284 ms/op
                 executeFilterQuery·p0.999:  76.284 ms/op
                 executeFilterQuery·p0.9999: 76.284 ms/op
                 executeFilterQuery·p1.00:   76.284 ms/op

Iteration   5: 74.239 ±(99.9%) 1.311 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   76.756 ms/op
                 executeFilterQuery·p0.95:   79.325 ms/op
                 executeFilterQuery·p0.99:   93.848 ms/op
                 executeFilterQuery·p0.999:  93.848 ms/op
                 executeFilterQuery·p0.9999: 93.848 ms/op
                 executeFilterQuery·p1.00:   93.848 ms/op



Result "benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery":
  N = 1573
  mean =     73.616 ±(99.9%) 0.122 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 0 
    [ 72.500,  75.000) = 1390 
    [ 75.000,  77.500) = 148 
    [ 77.500,  80.000) = 26 
    [ 80.000,  82.500) = 5 
    [ 82.500,  85.000) = 1 
    [ 85.000,  87.500) = 2 
    [ 87.500,  90.000) = 0 
    [ 90.000,  92.500) = 0 
    [ 92.500,  95.000) = 1 
    [ 95.000,  97.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.614 ms/op
     p(50.0000) =     73.007 ms/op
     p(90.0000) =     75.497 ms/op
     p(95.0000) =     76.415 ms/op
     p(99.0000) =     79.202 ms/op
     p(99.9000) =     89.860 ms/op
     p(99.9900) =     93.848 ms/op
     p(99.9990) =     93.848 ms/op
     p(99.9999) =     93.848 ms/op
    p(100.0000) =     93.848 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 50.00% complete, ETA 00:51:05
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

26.785 ±(99.9%) 0.798 ms/op
# Warmup Iteration   2: 26.306 ±(99.9%) 0.281 ms/op
# Warmup Iteration   3: 26.413 ±(99.9%) 0.189 ms/op
# Warmup Iteration   4: 26.134 ±(99.9%) 0.215 ms/op
# Warmup Iteration   5: 25.276 ±(99.9%) 0.178 ms/op
Iteration   1: 26.026 ±(99.9%) 0.218 ms/op
                 executeFilterQuery·p0.00:   24.412 ms/op
                 executeFilterQuery·p0.50:   26.051 ms/op
                 executeFilterQuery·p0.90:   26.863 ms/op
                 executeFilterQuery·p0.95:   27.140 ms/op
                 executeFilterQuery·p0.99:   27.886 ms/op
                 executeFilterQuery·p0.999:  27.886 ms/op
                 executeFilterQuery·p0.9999: 27.886 ms/op
                 executeFilterQuery·p1.00:   27.886 ms/op

Iteration   2: 26.318 ±(99.9%) 0.205 ms/op
                 executeFilterQuery·p0.00:   24.314 ms/op
                 executeFilterQuery·p0.50:   26.280 ms/op
                 executeFilterQuery·p0.90:   27.040 ms/op
                 executeFilterQuery·p0.95:   27.237 ms/op
                 executeFilterQuery·p0.99:   27.722 ms/op
                 executeFilterQuery·p0.999:  27.722 ms/op
                 executeFilterQuery·p0.9999: 27.722 ms/op
                 executeFilterQuery·p1.00:   27.722 ms/op

Iteration   3: 25.870 ±(99.9%) 0.266 ms/op
                 executeFilterQuery·p0.00:   24.740 ms/op
                 executeFilterQuery·p0.50:   25.690 ms/op
                 executeFilterQuery·p0.90:   27.030 ms/op
                 executeFilterQuery·p0.95:   27.132 ms/op
                 executeFilterQuery·p0.99:   27.754 ms/op
                 executeFilterQuery·p0.999:  27.754 ms/op
                 executeFilterQuery·p0.9999: 27.754 ms/op
                 executeFilterQuery·p1.00:   27.754 ms/op

Iteration   4: 25.597 ±(99.9%) 0.261 ms/op
                 executeFilterQuery·p0.00:   25.100 ms/op
                 executeFilterQuery·p0.50:   25.428 ms/op
                 executeFilterQuery·p0.90:   26.018 ms/op
                 executeFilterQuery·p0.95:   26.139 ms/op
                 executeFilterQuery·p0.99:   31.818 ms/op
                 executeFilterQuery·p0.999:  31.818 ms/op
                 executeFilterQuery·p0.9999: 31.818 ms/op
                 executeFilterQuery·p1.00:   31.818 ms/op

Iteration   5: 25.732 ±(99.9%) 0.214 ms/op
                 executeFilterQuery·p0.00:   25.100 ms/op
                 executeFilterQuery·p0.50:   25.559 ms/op
                 executeFilterQuery·p0.90:   26.870 ms/op
                 executeFilterQuery·p0.95:   27.361 ms/op
                 executeFilterQuery·p0.99:   27.460 ms/op
                 executeFilterQuery·p0.999:  27.460 ms/op
                 executeFilterQuery·p0.9999: 27.460 ms/op
                 executeFilterQuery·p1.00:   27.460 ms/op


# Run progress: 51.67% complete, ETA 00:49:22
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

25.820 ±(99.9%) 0.784 ms/op
# Warmup Iteration   2: 25.909 ±(99.9%) 0.266 ms/op
# Warmup Iteration   3: 25.306 ±(99.9%) 0.078 ms/op
# Warmup Iteration   4: 25.084 ±(99.9%) 0.169 ms/op
# Warmup Iteration   5: 25.087 ±(99.9%) 0.214 ms/op
Iteration   1: 25.056 ±(99.9%) 0.146 ms/op
                 executeFilterQuery·p0.00:   24.740 ms/op
                 executeFilterQuery·p0.50:   24.904 ms/op
                 executeFilterQuery·p0.90:   25.264 ms/op
                 executeFilterQuery·p0.95:   25.339 ms/op
                 executeFilterQuery·p0.99:   27.197 ms/op
                 executeFilterQuery·p0.999:  27.197 ms/op
                 executeFilterQuery·p0.9999: 27.197 ms/op
                 executeFilterQuery·p1.00:   27.197 ms/op

Iteration   2: 26.185 ±(99.9%) 0.238 ms/op
                 executeFilterQuery·p0.00:   25.068 ms/op
                 executeFilterQuery·p0.50:   26.149 ms/op
                 executeFilterQuery·p0.90:   27.027 ms/op
                 executeFilterQuery·p0.95:   27.145 ms/op
                 executeFilterQuery·p0.99:   28.279 ms/op
                 executeFilterQuery·p0.999:  28.279 ms/op
                 executeFilterQuery·p0.9999: 28.279 ms/op
                 executeFilterQuery·p1.00:   28.279 ms/op

Iteration   3: 25.931 ±(99.9%) 0.223 ms/op
                 executeFilterQuery·p0.00:   25.100 ms/op
                 executeFilterQuery·p0.50:   25.919 ms/op
                 executeFilterQuery·p0.90:   26.837 ms/op
                 executeFilterQuery·p0.95:   27.292 ms/op
                 executeFilterQuery·p0.99:   27.492 ms/op
                 executeFilterQuery·p0.999:  27.492 ms/op
                 executeFilterQuery·p0.9999: 27.492 ms/op
                 executeFilterQuery·p1.00:   27.492 ms/op

Iteration   4: 25.551 ±(99.9%) 0.232 ms/op
                 executeFilterQuery·p0.00:   25.035 ms/op
                 executeFilterQuery·p0.50:   25.297 ms/op
                 executeFilterQuery·p0.90:   26.280 ms/op
                 executeFilterQuery·p0.95:   26.994 ms/op
                 executeFilterQuery·p0.99:   29.098 ms/op
                 executeFilterQuery·p0.999:  29.098 ms/op
                 executeFilterQuery·p0.9999: 29.098 ms/op
                 executeFilterQuery·p1.00:   29.098 ms/op

Iteration   5: 25.532 ±(99.9%) 0.207 ms/op
                 executeFilterQuery·p0.00:   25.068 ms/op
                 executeFilterQuery·p0.50:   25.264 ms/op
                 executeFilterQuery·p0.90:   26.319 ms/op
                 executeFilterQuery·p0.95:   27.053 ms/op
                 executeFilterQuery·p0.99:   28.410 ms/op
                 executeFilterQuery·p0.999:  28.410 ms/op
                 executeFilterQuery·p0.9999: 28.410 ms/op
                 executeFilterQuery·p1.00:   28.410 ms/op


# Run progress: 53.33% complete, ETA 00:47:40
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

26.327 ±(99.9%) 0.901 ms/op
# Warmup Iteration   2: 25.381 ±(99.9%) 0.163 ms/op
# Warmup Iteration   3: 25.130 ±(99.9%) 0.135 ms/op
# Warmup Iteration   4: 25.421 ±(99.9%) 0.210 ms/op
# Warmup Iteration   5: 25.302 ±(99.9%) 0.096 ms/op
Iteration   1: 25.297 ±(99.9%) 0.140 ms/op
                 executeFilterQuery·p0.00:   25.002 ms/op
                 executeFilterQuery·p0.50:   25.231 ms/op
                 executeFilterQuery·p0.90:   25.362 ms/op
                 executeFilterQuery·p0.95:   25.461 ms/op
                 executeFilterQuery·p0.99:   28.869 ms/op
                 executeFilterQuery·p0.999:  28.869 ms/op
                 executeFilterQuery·p0.9999: 28.869 ms/op
                 executeFilterQuery·p1.00:   28.869 ms/op

Iteration   2: 25.467 ±(99.9%) 0.222 ms/op
                 executeFilterQuery·p0.00:   24.936 ms/op
                 executeFilterQuery·p0.50:   25.100 ms/op
                 executeFilterQuery·p0.90:   26.529 ms/op
                 executeFilterQuery·p0.95:   26.575 ms/op
                 executeFilterQuery·p0.99:   26.837 ms/op
                 executeFilterQuery·p0.999:  26.837 ms/op
                 executeFilterQuery·p0.9999: 26.837 ms/op
                 executeFilterQuery·p1.00:   26.837 ms/op

Iteration   3: 25.225 ±(99.9%) 0.027 ms/op
                 executeFilterQuery·p0.00:   25.100 ms/op
                 executeFilterQuery·p0.50:   25.231 ms/op
                 executeFilterQuery·p0.90:   25.297 ms/op
                 executeFilterQuery·p0.95:   25.336 ms/op
                 executeFilterQuery·p0.99:   25.625 ms/op
                 executeFilterQuery·p0.999:  25.625 ms/op
                 executeFilterQuery·p0.9999: 25.625 ms/op
                 executeFilterQuery·p1.00:   25.625 ms/op

Iteration   4: 25.242 ±(99.9%) 0.049 ms/op
                 executeFilterQuery·p0.00:   25.100 ms/op
                 executeFilterQuery·p0.50:   25.231 ms/op
                 executeFilterQuery·p0.90:   25.330 ms/op
                 executeFilterQuery·p0.95:   25.494 ms/op
                 executeFilterQuery·p0.99:   26.149 ms/op
                 executeFilterQuery·p0.999:  26.149 ms/op
                 executeFilterQuery·p0.9999: 26.149 ms/op
                 executeFilterQuery·p1.00:   26.149 ms/op

Iteration   5: 25.382 ±(99.9%) 0.109 ms/op
                 executeFilterQuery·p0.00:   24.904 ms/op
                 executeFilterQuery·p0.50:   25.330 ms/op
                 executeFilterQuery·p0.90:   25.451 ms/op
                 executeFilterQuery·p0.95:   26.306 ms/op
                 executeFilterQuery·p0.99:   26.870 ms/op
                 executeFilterQuery·p0.999:  26.870 ms/op
                 executeFilterQuery·p0.9999: 26.870 ms/op
                 executeFilterQuery·p1.00:   26.870 ms/op


# Run progress: 55.00% complete, ETA 00:45:58
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

25.401 ±(99.9%) 0.735 ms/op
# Warmup Iteration   2: 25.110 ±(99.9%) 0.081 ms/op
# Warmup Iteration   3: 24.984 ±(99.9%) 0.142 ms/op
# Warmup Iteration   4: 24.936 ±(99.9%) 0.144 ms/op
# Warmup Iteration   5: 24.850 ±(99.9%) 0.074 ms/op
Iteration   1: 25.261 ±(99.9%) 0.351 ms/op
                 executeFilterQuery·p0.00:   24.642 ms/op
                 executeFilterQuery·p0.50:   24.871 ms/op
                 executeFilterQuery·p0.90:   26.332 ms/op
                 executeFilterQuery·p0.95:   26.431 ms/op
                 executeFilterQuery·p0.99:   33.030 ms/op
                 executeFilterQuery·p0.999:  33.030 ms/op
                 executeFilterQuery·p0.9999: 33.030 ms/op
                 executeFilterQuery·p1.00:   33.030 ms/op

Iteration   2: 25.532 ±(99.9%) 0.225 ms/op
                 executeFilterQuery·p0.00:   24.740 ms/op
                 executeFilterQuery·p0.50:   25.297 ms/op
                 executeFilterQuery·p0.90:   26.739 ms/op
                 executeFilterQuery·p0.95:   26.860 ms/op
                 executeFilterQuery·p0.99:   27.165 ms/op
                 executeFilterQuery·p0.999:  27.165 ms/op
                 executeFilterQuery·p0.9999: 27.165 ms/op
                 executeFilterQuery·p1.00:   27.165 ms/op

Iteration   3: 24.973 ±(99.9%) 0.143 ms/op
                 executeFilterQuery·p0.00:   24.478 ms/op
                 executeFilterQuery·p0.50:   24.838 ms/op
                 executeFilterQuery·p0.90:   25.756 ms/op
                 executeFilterQuery·p0.95:   26.190 ms/op
                 executeFilterQuery·p0.99:   26.313 ms/op
                 executeFilterQuery·p0.999:  26.313 ms/op
                 executeFilterQuery·p0.9999: 26.313 ms/op
                 executeFilterQuery·p1.00:   26.313 ms/op

Iteration   4: 25.110 ±(99.9%) 0.213 ms/op
                 executeFilterQuery·p0.00:   24.707 ms/op
                 executeFilterQuery·p0.50:   24.805 ms/op
                 executeFilterQuery·p0.90:   26.300 ms/op
                 executeFilterQuery·p0.95:   26.463 ms/op
                 executeFilterQuery·p0.99:   26.542 ms/op
                 executeFilterQuery·p0.999:  26.542 ms/op
                 executeFilterQuery·p0.9999: 26.542 ms/op
                 executeFilterQuery·p1.00:   26.542 ms/op

Iteration   5: 24.932 ±(99.9%) 0.140 ms/op
                 executeFilterQuery·p0.00:   24.674 ms/op
                 executeFilterQuery·p0.50:   24.805 ms/op
                 executeFilterQuery·p0.90:   25.035 ms/op
                 executeFilterQuery·p0.95:   26.182 ms/op
                 executeFilterQuery·p0.99:   26.444 ms/op
                 executeFilterQuery·p0.999:  26.444 ms/op
                 executeFilterQuery·p0.9999: 26.444 ms/op
                 executeFilterQuery·p1.00:   26.444 ms/op


# Run progress: 56.67% complete, ETA 00:44:15
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

25.926 ±(99.9%) 0.740 ms/op
# Warmup Iteration   2: 25.275 ±(99.9%) 0.097 ms/op
# Warmup Iteration   3: 25.043 ±(99.9%) 0.081 ms/op
# Warmup Iteration   4: 25.101 ±(99.9%) 0.084 ms/op
# Warmup Iteration   5: 25.464 ±(99.9%) 0.230 ms/op
Iteration   1: 26.742 ±(99.9%) 0.492 ms/op
                 executeFilterQuery·p0.00:   24.445 ms/op
                 executeFilterQuery·p0.50:   26.444 ms/op
                 executeFilterQuery·p0.90:   27.768 ms/op
                 executeFilterQuery·p0.95:   29.560 ms/op
                 executeFilterQuery·p0.99:   32.637 ms/op
                 executeFilterQuery·p0.999:  32.637 ms/op
                 executeFilterQuery·p0.9999: 32.637 ms/op
                 executeFilterQuery·p1.00:   32.637 ms/op

Iteration   2: 26.713 ±(99.9%) 0.486 ms/op
                 executeFilterQuery·p0.00:   24.740 ms/op
                 executeFilterQuery·p0.50:   26.460 ms/op
                 executeFilterQuery·p0.90:   27.689 ms/op
                 executeFilterQuery·p0.95:   27.969 ms/op
                 executeFilterQuery·p0.99:   34.931 ms/op
                 executeFilterQuery·p0.999:  34.931 ms/op
                 executeFilterQuery·p0.9999: 34.931 ms/op
                 executeFilterQuery·p1.00:   34.931 ms/op

Iteration   3: 26.418 ±(99.9%) 0.263 ms/op
                 executeFilterQuery·p0.00:   25.592 ms/op
                 executeFilterQuery·p0.50:   26.116 ms/op
                 executeFilterQuery·p0.90:   27.722 ms/op
                 executeFilterQuery·p0.95:   27.918 ms/op
                 executeFilterQuery·p0.99:   29.327 ms/op
                 executeFilterQuery·p0.999:  29.327 ms/op
                 executeFilterQuery·p0.9999: 29.327 ms/op
                 executeFilterQuery·p1.00:   29.327 ms/op

Iteration   4: 25.779 ±(99.9%) 0.274 ms/op
                 executeFilterQuery·p0.00:   24.740 ms/op
                 executeFilterQuery·p0.50:   25.657 ms/op
                 executeFilterQuery·p0.90:   26.922 ms/op
                 executeFilterQuery·p0.95:   27.440 ms/op
                 executeFilterQuery·p0.99:   27.787 ms/op
                 executeFilterQuery·p0.999:  27.787 ms/op
                 executeFilterQuery·p0.9999: 27.787 ms/op
                 executeFilterQuery·p1.00:   27.787 ms/op

Iteration   5: 25.045 ±(99.9%) 0.172 ms/op
                 executeFilterQuery·p0.00:   24.707 ms/op
                 executeFilterQuery·p0.50:   24.855 ms/op
                 executeFilterQuery·p0.90:   26.247 ms/op
                 executeFilterQuery·p0.95:   26.452 ms/op
                 executeFilterQuery·p0.99:   26.640 ms/op
                 executeFilterQuery·p0.999:  26.640 ms/op
                 executeFilterQuery·p0.9999: 26.640 ms/op
                 executeFilterQuery·p1.00:   26.640 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 2282
  mean =     25.624 ±(99.9%) 0.058 ms/op

  Histogram, ms/op:
    [20.000, 21.250) = 0 
    [21.250, 22.500) = 0 
    [22.500, 23.750) = 0 
    [23.750, 25.000) = 473 
    [25.000, 26.250) = 1376 
    [26.250, 27.500) = 376 
    [27.500, 28.750) = 45 
    [28.750, 30.000) = 5 
    [30.000, 31.250) = 0 
    [31.250, 32.500) = 4 
    [32.500, 33.750) = 2 
    [33.750, 35.000) = 1 
    [35.000, 36.250) = 0 
    [36.250, 37.500) = 0 
    [37.500, 38.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     24.314 ms/op
     p(50.0000) =     25.297 ms/op
     p(90.0000) =     26.640 ms/op
     p(95.0000) =     27.099 ms/op
     p(99.0000) =     27.886 ms/op
     p(99.9000) =     32.919 ms/op
     p(99.9900) =     34.931 ms/op
     p(99.9990) =     34.931 ms/op
     p(99.9999) =     34.931 ms/op
    p(100.0000) =     34.931 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 58.33% complete, ETA 00:42:33
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

52.982 ±(99.9%) 1.039 ms/op
# Warmup Iteration   2: 52.563 ±(99.9%) 0.534 ms/op
# Warmup Iteration   3: 52.283 ±(99.9%) 0.290 ms/op
# Warmup Iteration   4: 53.828 ±(99.9%) 1.016 ms/op
# Warmup Iteration   5: 53.234 ±(99.9%) 0.726 ms/op
Iteration   1: 52.094 ±(99.9%) 0.388 ms/op
                 executeFilterQuery·p0.00:   51.577 ms/op
                 executeFilterQuery·p0.50:   51.773 ms/op
                 executeFilterQuery·p0.90:   52.789 ms/op
                 executeFilterQuery·p0.95:   53.805 ms/op
                 executeFilterQuery·p0.99:   59.048 ms/op
                 executeFilterQuery·p0.999:  59.048 ms/op
                 executeFilterQuery·p0.9999: 59.048 ms/op
                 executeFilterQuery·p1.00:   59.048 ms/op

Iteration   2: 52.269 ±(99.9%) 0.568 ms/op
                 executeFilterQuery·p0.00:   51.577 ms/op
                 executeFilterQuery·p0.50:   51.708 ms/op
                 executeFilterQuery·p0.90:   55.706 ms/op
                 executeFilterQuery·p0.95:   55.968 ms/op
                 executeFilterQuery·p0.99:   56.164 ms/op
                 executeFilterQuery·p0.999:  56.164 ms/op
                 executeFilterQuery·p0.9999: 56.164 ms/op
                 executeFilterQuery·p1.00:   56.164 ms/op

Iteration   3: 52.237 ±(99.9%) 0.553 ms/op
                 executeFilterQuery·p0.00:   51.577 ms/op
                 executeFilterQuery·p0.50:   51.708 ms/op
                 executeFilterQuery·p0.90:   55.738 ms/op
                 executeFilterQuery·p0.95:   55.919 ms/op
                 executeFilterQuery·p0.99:   56.099 ms/op
                 executeFilterQuery·p0.999:  56.099 ms/op
                 executeFilterQuery·p0.9999: 56.099 ms/op
                 executeFilterQuery·p1.00:   56.099 ms/op

Iteration   4: 51.900 ±(99.9%) 0.383 ms/op
                 executeFilterQuery·p0.00:   51.577 ms/op
                 executeFilterQuery·p0.50:   51.642 ms/op
                 executeFilterQuery·p0.90:   51.800 ms/op
                 executeFilterQuery·p0.95:   55.719 ms/op
                 executeFilterQuery·p0.99:   56.164 ms/op
                 executeFilterQuery·p0.999:  56.164 ms/op
                 executeFilterQuery·p0.9999: 56.164 ms/op
                 executeFilterQuery·p1.00:   56.164 ms/op

Iteration   5: 52.949 ±(99.9%) 0.868 ms/op
                 executeFilterQuery·p0.00:   51.577 ms/op
                 executeFilterQuery·p0.50:   52.101 ms/op
                 executeFilterQuery·p0.90:   54.991 ms/op
                 executeFilterQuery·p0.95:   58.789 ms/op
                 executeFilterQuery·p0.99:   64.160 ms/op
                 executeFilterQuery·p0.999:  64.160 ms/op
                 executeFilterQuery·p0.9999: 64.160 ms/op
                 executeFilterQuery·p1.00:   64.160 ms/op


# Run progress: 60.00% complete, ETA 00:40:51
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

53.746 ±(99.9%) 1.573 ms/op
# Warmup Iteration   2: 54.007 ±(99.9%) 1.380 ms/op
# Warmup Iteration   3: 53.739 ±(99.9%) 1.602 ms/op
# Warmup Iteration   4: 55.136 ±(99.9%) 3.367 ms/op
# Warmup Iteration   5: 53.441 ±(99.9%) 0.474 ms/op
Iteration   1: 52.473 ±(99.9%) 0.316 ms/op
                 executeFilterQuery·p0.00:   52.101 ms/op
                 executeFilterQuery·p0.50:   52.298 ms/op
                 executeFilterQuery·p0.90:   52.691 ms/op
                 executeFilterQuery·p0.95:   53.445 ms/op
                 executeFilterQuery·p0.99:   57.082 ms/op
                 executeFilterQuery·p0.999:  57.082 ms/op
                 executeFilterQuery·p0.9999: 57.082 ms/op
                 executeFilterQuery·p1.00:   57.082 ms/op

Iteration   2: 52.721 ±(99.9%) 0.449 ms/op
                 executeFilterQuery·p0.00:   52.167 ms/op
                 executeFilterQuery·p0.50:   52.429 ms/op
                 executeFilterQuery·p0.90:   52.966 ms/op
                 executeFilterQuery·p0.95:   56.505 ms/op
                 executeFilterQuery·p0.99:   57.082 ms/op
                 executeFilterQuery·p0.999:  57.082 ms/op
                 executeFilterQuery·p0.9999: 57.082 ms/op
                 executeFilterQuery·p1.00:   57.082 ms/op

Iteration   3: 53.838 ±(99.9%) 0.802 ms/op
                 executeFilterQuery·p0.00:   52.167 ms/op
                 executeFilterQuery·p0.50:   52.494 ms/op
                 executeFilterQuery·p0.90:   56.754 ms/op
                 executeFilterQuery·p0.95:   56.905 ms/op
                 executeFilterQuery·p0.99:   57.147 ms/op
                 executeFilterQuery·p0.999:  57.147 ms/op
                 executeFilterQuery·p0.9999: 57.147 ms/op
                 executeFilterQuery·p1.00:   57.147 ms/op

Iteration   4: 54.106 ±(99.9%) 0.837 ms/op
                 executeFilterQuery·p0.00:   52.167 ms/op
                 executeFilterQuery·p0.50:   52.560 ms/op
                 executeFilterQuery·p0.90:   56.728 ms/op
                 executeFilterQuery·p0.95:   56.885 ms/op
                 executeFilterQuery·p0.99:   57.147 ms/op
                 executeFilterQuery·p0.999:  57.147 ms/op
                 executeFilterQuery·p0.9999: 57.147 ms/op
                 executeFilterQuery·p1.00:   57.147 ms/op

Iteration   5: 52.516 ±(99.9%) 0.358 ms/op
                 executeFilterQuery·p0.00:   52.101 ms/op
                 executeFilterQuery·p0.50:   52.298 ms/op
                 executeFilterQuery·p0.90:   52.527 ms/op
                 executeFilterQuery·p0.95:   55.427 ms/op
                 executeFilterQuery·p0.99:   56.623 ms/op
                 executeFilterQuery·p0.999:  56.623 ms/op
                 executeFilterQuery·p0.9999: 56.623 ms/op
                 executeFilterQuery·p1.00:   56.623 ms/op


# Run progress: 61.67% complete, ETA 00:39:09
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

52.704 ±(99.9%) 1.155 ms/op
# Warmup Iteration   2: 52.346 ±(99.9%) 0.403 ms/op
# Warmup Iteration   3: 52.371 ±(99.9%) 0.383 ms/op
# Warmup Iteration   4: 52.592 ±(99.9%) 0.530 ms/op
# Warmup Iteration   5: 52.719 ±(99.9%) 0.265 ms/op
Iteration   1: 54.487 ±(99.9%) 2.550 ms/op
                 executeFilterQuery·p0.00:   51.905 ms/op
                 executeFilterQuery·p0.50:   52.658 ms/op
                 executeFilterQuery·p0.90:   56.132 ms/op
                 executeFilterQuery·p0.95:   76.264 ms/op
                 executeFilterQuery·p0.99:   80.871 ms/op
                 executeFilterQuery·p0.999:  80.871 ms/op
                 executeFilterQuery·p0.9999: 80.871 ms/op
                 executeFilterQuery·p1.00:   80.871 ms/op

Iteration   2: 53.295 ±(99.9%) 0.957 ms/op
                 executeFilterQuery·p0.00:   51.905 ms/op
                 executeFilterQuery·p0.50:   52.494 ms/op
                 executeFilterQuery·p0.90:   54.723 ms/op
                 executeFilterQuery·p0.95:   56.505 ms/op
                 executeFilterQuery·p0.99:   66.388 ms/op
                 executeFilterQuery·p0.999:  66.388 ms/op
                 executeFilterQuery·p0.9999: 66.388 ms/op
                 executeFilterQuery·p1.00:   66.388 ms/op

Iteration   3: 53.212 ±(99.9%) 0.440 ms/op
                 executeFilterQuery·p0.00:   52.036 ms/op
                 executeFilterQuery·p0.50:   53.150 ms/op
                 executeFilterQuery·p0.90:   54.172 ms/op
                 executeFilterQuery·p0.95:   54.723 ms/op
                 executeFilterQuery·p0.99:   59.441 ms/op
                 executeFilterQuery·p0.999:  59.441 ms/op
                 executeFilterQuery·p0.9999: 59.441 ms/op
                 executeFilterQuery·p1.00:   59.441 ms/op

Iteration   4: 52.470 ±(99.9%) 0.256 ms/op
                 executeFilterQuery·p0.00:   51.773 ms/op
                 executeFilterQuery·p0.50:   52.232 ms/op
                 executeFilterQuery·p0.90:   53.740 ms/op
                 executeFilterQuery·p0.95:   53.956 ms/op
                 executeFilterQuery·p0.99:   54.460 ms/op
                 executeFilterQuery·p0.999:  54.460 ms/op
                 executeFilterQuery·p0.9999: 54.460 ms/op
                 executeFilterQuery·p1.00:   54.460 ms/op

Iteration   5: 53.709 ±(99.9%) 1.701 ms/op
                 executeFilterQuery·p0.00:   51.839 ms/op
                 executeFilterQuery·p0.50:   52.560 ms/op
                 executeFilterQuery·p0.90:   56.191 ms/op
                 executeFilterQuery·p0.95:   61.591 ms/op
                 executeFilterQuery·p0.99:   75.366 ms/op
                 executeFilterQuery·p0.999:  75.366 ms/op
                 executeFilterQuery·p0.9999: 75.366 ms/op
                 executeFilterQuery·p1.00:   75.366 ms/op


# Run progress: 63.33% complete, ETA 00:37:27
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

55.323 ±(99.9%) 3.087 ms/op
# Warmup Iteration   2: 56.111 ±(99.9%) 3.459 ms/op
# Warmup Iteration   3: 54.328 ±(99.9%) 2.013 ms/op
# Warmup Iteration   4: 54.490 ±(99.9%) 2.433 ms/op
# Warmup Iteration   5: 54.568 ±(99.9%) 1.621 ms/op
Iteration   1: 56.340 ±(99.9%) 3.155 ms/op
                 executeFilterQuery·p0.00:   51.642 ms/op
                 executeFilterQuery·p0.50:   53.740 ms/op
                 executeFilterQuery·p0.90:   68.996 ms/op
                 executeFilterQuery·p0.95:   79.430 ms/op
                 executeFilterQuery·p0.99:   81.658 ms/op
                 executeFilterQuery·p0.999:  81.658 ms/op
                 executeFilterQuery·p0.9999: 81.658 ms/op
                 executeFilterQuery·p1.00:   81.658 ms/op

Iteration   2: 52.162 ±(99.9%) 0.115 ms/op
                 executeFilterQuery·p0.00:   51.905 ms/op
                 executeFilterQuery·p0.50:   52.101 ms/op
                 executeFilterQuery·p0.90:   52.363 ms/op
                 executeFilterQuery·p0.95:   52.560 ms/op
                 executeFilterQuery·p0.99:   54.002 ms/op
                 executeFilterQuery·p0.999:  54.002 ms/op
                 executeFilterQuery·p0.9999: 54.002 ms/op
                 executeFilterQuery·p1.00:   54.002 ms/op

Iteration   3: 53.681 ±(99.9%) 1.191 ms/op
                 executeFilterQuery·p0.00:   52.036 ms/op
                 executeFilterQuery·p0.50:   52.888 ms/op
                 executeFilterQuery·p0.90:   56.309 ms/op
                 executeFilterQuery·p0.95:   58.366 ms/op
                 executeFilterQuery·p0.99:   69.337 ms/op
                 executeFilterQuery·p0.999:  69.337 ms/op
                 executeFilterQuery·p0.9999: 69.337 ms/op
                 executeFilterQuery·p1.00:   69.337 ms/op

Iteration   4: 53.263 ±(99.9%) 1.294 ms/op
                 executeFilterQuery·p0.00:   51.905 ms/op
                 executeFilterQuery·p0.50:   52.462 ms/op
                 executeFilterQuery·p0.90:   55.981 ms/op
                 executeFilterQuery·p0.95:   56.921 ms/op
                 executeFilterQuery·p0.99:   77.464 ms/op
                 executeFilterQuery·p0.999:  77.464 ms/op
                 executeFilterQuery·p0.9999: 77.464 ms/op
                 executeFilterQuery·p1.00:   77.464 ms/op

Iteration   5: 53.259 ±(99.9%) 1.246 ms/op
                 executeFilterQuery·p0.00:   51.970 ms/op
                 executeFilterQuery·p0.50:   52.494 ms/op
                 executeFilterQuery·p0.90:   53.838 ms/op
                 executeFilterQuery·p0.95:   57.144 ms/op
                 executeFilterQuery·p0.99:   74.842 ms/op
                 executeFilterQuery·p0.999:  74.842 ms/op
                 executeFilterQuery·p0.9999: 74.842 ms/op
                 executeFilterQuery·p1.00:   74.842 ms/op


# Run progress: 65.00% complete, ETA 00:35:45
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

54.362 ±(99.9%) 2.392 ms/op
# Warmup Iteration   2: 53.882 ±(99.9%) 2.401 ms/op
# Warmup Iteration   3: 52.399 ±(99.9%) 0.358 ms/op
# Warmup Iteration   4: 52.075 ±(99.9%) 0.164 ms/op
# Warmup Iteration   5: 52.781 ±(99.9%) 0.663 ms/op
Iteration   1: 55.003 ±(99.9%) 2.874 ms/op
                 executeFilterQuery·p0.00:   51.905 ms/op
                 executeFilterQuery·p0.50:   52.888 ms/op
                 executeFilterQuery·p0.90:   60.490 ms/op
                 executeFilterQuery·p0.95:   80.544 ms/op
                 executeFilterQuery·p0.99:   83.493 ms/op
                 executeFilterQuery·p0.999:  83.493 ms/op
                 executeFilterQuery·p0.9999: 83.493 ms/op
                 executeFilterQuery·p1.00:   83.493 ms/op

Iteration   2: 53.963 ±(99.9%) 2.058 ms/op
                 executeFilterQuery·p0.00:   52.036 ms/op
                 executeFilterQuery·p0.50:   52.756 ms/op
                 executeFilterQuery·p0.90:   54.723 ms/op
                 executeFilterQuery·p0.95:   64.848 ms/op
                 executeFilterQuery·p0.99:   83.100 ms/op
                 executeFilterQuery·p0.999:  83.100 ms/op
                 executeFilterQuery·p0.9999: 83.100 ms/op
                 executeFilterQuery·p1.00:   83.100 ms/op

Iteration   3: 53.534 ±(99.9%) 1.707 ms/op
                 executeFilterQuery·p0.00:   51.905 ms/op
                 executeFilterQuery·p0.50:   52.625 ms/op
                 executeFilterQuery·p0.90:   54.303 ms/op
                 executeFilterQuery·p0.95:   57.121 ms/op
                 executeFilterQuery·p0.99:   81.658 ms/op
                 executeFilterQuery·p0.999:  81.658 ms/op
                 executeFilterQuery·p0.9999: 81.658 ms/op
                 executeFilterQuery·p1.00:   81.658 ms/op

Iteration   4: 52.157 ±(99.9%) 0.133 ms/op
                 executeFilterQuery·p0.00:   51.905 ms/op
                 executeFilterQuery·p0.50:   52.036 ms/op
                 executeFilterQuery·p0.90:   52.468 ms/op
                 executeFilterQuery·p0.95:   53.143 ms/op
                 executeFilterQuery·p0.99:   53.477 ms/op
                 executeFilterQuery·p0.999:  53.477 ms/op
                 executeFilterQuery·p0.9999: 53.477 ms/op
                 executeFilterQuery·p1.00:   53.477 ms/op

Iteration   5: 52.150 ±(99.9%) 0.289 ms/op
                 executeFilterQuery·p0.00:   51.839 ms/op
                 executeFilterQuery·p0.50:   52.036 ms/op
                 executeFilterQuery·p0.90:   52.206 ms/op
                 executeFilterQuery·p0.95:   52.580 ms/op
                 executeFilterQuery·p0.99:   56.492 ms/op
                 executeFilterQuery·p0.999:  56.492 ms/op
                 executeFilterQuery·p0.9999: 56.492 ms/op
                 executeFilterQuery·p1.00:   56.492 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1801
  mean =     53.167 ±(99.9%) 0.257 ms/op

  Histogram, ms/op:
    [50.000, 52.500) = 1138 
    [52.500, 55.000) = 477 
    [55.000, 57.500) = 136 
    [57.500, 60.000) = 13 
    [60.000, 62.500) = 3 
    [62.500, 65.000) = 6 
    [65.000, 67.500) = 2 
    [67.500, 70.000) = 4 
    [70.000, 72.500) = 2 
    [72.500, 75.000) = 5 
    [75.000, 77.500) = 2 
    [77.500, 80.000) = 3 
    [80.000, 82.500) = 8 
    [82.500, 85.000) = 2 
    [85.000, 87.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     51.577 ms/op
     p(50.0000) =     52.298 ms/op
     p(90.0000) =     55.234 ms/op
     p(95.0000) =     56.623 ms/op
     p(99.0000) =     74.431 ms/op
     p(99.9000) =     83.178 ms/op
     p(99.9900) =     83.493 ms/op
     p(99.9990) =     83.493 ms/op
     p(99.9999) =     83.493 ms/op
    p(100.0000) =     83.493 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 66.67% complete, ETA 00:34:02
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

89.070 ±(99.9%) 2.904 ms/op
# Warmup Iteration   2: 91.967 ±(99.9%) 3.957 ms/op
# Warmup Iteration   3: 92.363 ±(99.9%) 4.066 ms/op
# Warmup Iteration   4: 91.884 ±(99.9%) 3.220 ms/op
# Warmup Iteration   5: 90.496 ±(99.9%) 2.918 ms/op
Iteration   1: 92.804 ±(99.9%) 4.390 ms/op
                 executeFilterQuery·p0.00:   88.474 ms/op
                 executeFilterQuery·p0.50:   90.046 ms/op
                 executeFilterQuery·p0.90:   97.255 ms/op
                 executeFilterQuery·p0.95:   121.962 ms/op
                 executeFilterQuery·p0.99:   137.626 ms/op
                 executeFilterQuery·p0.999:  137.626 ms/op
                 executeFilterQuery·p0.9999: 137.626 ms/op
                 executeFilterQuery·p1.00:   137.626 ms/op

Iteration   2: 90.882 ±(99.9%) 3.034 ms/op
                 executeFilterQuery·p0.00:   88.080 ms/op
                 executeFilterQuery·p0.50:   89.063 ms/op
                 executeFilterQuery·p0.90:   94.319 ms/op
                 executeFilterQuery·p0.95:   105.021 ms/op
                 executeFilterQuery·p0.99:   124.781 ms/op
                 executeFilterQuery·p0.999:  124.781 ms/op
                 executeFilterQuery·p0.9999: 124.781 ms/op
                 executeFilterQuery·p1.00:   124.781 ms/op

Iteration   3: 97.335 ±(99.9%) 7.132 ms/op
                 executeFilterQuery·p0.00:   88.080 ms/op
                 executeFilterQuery·p0.50:   90.046 ms/op
                 executeFilterQuery·p0.90:   127.297 ms/op
                 executeFilterQuery·p0.95:   137.599 ms/op
                 executeFilterQuery·p0.99:   139.461 ms/op
                 executeFilterQuery·p0.999:  139.461 ms/op
                 executeFilterQuery·p0.9999: 139.461 ms/op
                 executeFilterQuery·p1.00:   139.461 ms/op

Iteration   4: 92.329 ±(99.9%) 3.901 ms/op
                 executeFilterQuery·p0.00:   88.343 ms/op
                 executeFilterQuery·p0.50:   89.391 ms/op
                 executeFilterQuery·p0.90:   97.557 ms/op
                 executeFilterQuery·p0.95:   114.262 ms/op
                 executeFilterQuery·p0.99:   137.101 ms/op
                 executeFilterQuery·p0.999:  137.101 ms/op
                 executeFilterQuery·p0.9999: 137.101 ms/op
                 executeFilterQuery·p1.00:   137.101 ms/op

Iteration   5: 94.770 ±(99.9%) 5.499 ms/op
                 executeFilterQuery·p0.00:   88.080 ms/op
                 executeFilterQuery·p0.50:   89.784 ms/op
                 executeFilterQuery·p0.90:   116.471 ms/op
                 executeFilterQuery·p0.95:   125.161 ms/op
                 executeFilterQuery·p0.99:   137.101 ms/op
                 executeFilterQuery·p0.999:  137.101 ms/op
                 executeFilterQuery·p0.9999: 137.101 ms/op
                 executeFilterQuery·p1.00:   137.101 ms/op


# Run progress: 68.33% complete, ETA 00:32:20
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

88.914 ±(99.9%) 1.198 ms/op
# Warmup Iteration   2: 89.297 ±(99.9%) 0.617 ms/op
# Warmup Iteration   3: 90.297 ±(99.9%) 1.747 ms/op
# Warmup Iteration   4: 90.889 ±(99.9%) 3.919 ms/op
# Warmup Iteration   5: 91.001 ±(99.9%) 3.616 ms/op
Iteration   1: 91.062 ±(99.9%) 4.011 ms/op
                 executeFilterQuery·p0.00:   87.949 ms/op
                 executeFilterQuery·p0.50:   88.867 ms/op
                 executeFilterQuery·p0.90:   92.406 ms/op
                 executeFilterQuery·p0.95:   100.408 ms/op
                 executeFilterQuery·p0.99:   137.101 ms/op
                 executeFilterQuery·p0.999:  137.101 ms/op
                 executeFilterQuery·p0.9999: 137.101 ms/op
                 executeFilterQuery·p1.00:   137.101 ms/op

Iteration   2: 91.814 ±(99.9%) 3.118 ms/op
                 executeFilterQuery·p0.00:   88.080 ms/op
                 executeFilterQuery·p0.50:   89.588 ms/op
                 executeFilterQuery·p0.90:   99.025 ms/op
                 executeFilterQuery·p0.95:   113.207 ms/op
                 executeFilterQuery·p0.99:   117.834 ms/op
                 executeFilterQuery·p0.999:  117.834 ms/op
                 executeFilterQuery·p0.9999: 117.834 ms/op
                 executeFilterQuery·p1.00:   117.834 ms/op

Iteration   3: 91.320 ±(99.9%) 3.370 ms/op
                 executeFilterQuery·p0.00:   88.080 ms/op
                 executeFilterQuery·p0.50:   89.391 ms/op
                 executeFilterQuery·p0.90:   93.834 ms/op
                 executeFilterQuery·p0.95:   110.618 ms/op
                 executeFilterQuery·p0.99:   131.858 ms/op
                 executeFilterQuery·p0.999:  131.858 ms/op
                 executeFilterQuery·p0.9999: 131.858 ms/op
                 executeFilterQuery·p1.00:   131.858 ms/op

Iteration   4: 90.472 ±(99.9%) 3.327 ms/op
                 executeFilterQuery·p0.00:   87.818 ms/op
                 executeFilterQuery·p0.50:   88.867 ms/op
                 executeFilterQuery·p0.90:   90.938 ms/op
                 executeFilterQuery·p0.95:   95.302 ms/op
                 executeFilterQuery·p0.99:   134.742 ms/op
                 executeFilterQuery·p0.999:  134.742 ms/op
                 executeFilterQuery·p0.9999: 134.742 ms/op
                 executeFilterQuery·p1.00:   134.742 ms/op

Iteration   5: 95.045 ±(99.9%) 6.427 ms/op
                 executeFilterQuery·p0.00:   88.080 ms/op
                 executeFilterQuery·p0.50:   89.522 ms/op
                 executeFilterQuery·p0.90:   124.728 ms/op
                 executeFilterQuery·p0.95:   131.256 ms/op
                 executeFilterQuery·p0.99:   141.558 ms/op
                 executeFilterQuery·p0.999:  141.558 ms/op
                 executeFilterQuery·p0.9999: 141.558 ms/op
                 executeFilterQuery·p1.00:   141.558 ms/op


# Run progress: 70.00% complete, ETA 00:30:38
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

91.216 ±(99.9%) 4.165 ms/op
# Warmup Iteration   2: 92.420 ±(99.9%) 6.228 ms/op
# Warmup Iteration   3: 91.464 ±(99.9%) 4.836 ms/op
# Warmup Iteration   4: 89.327 ±(99.9%) 2.531 ms/op
# Warmup Iteration   5: 90.402 ±(99.9%) 3.038 ms/op
Iteration   1: 89.731 ±(99.9%) 3.663 ms/op
                 executeFilterQuery·p0.00:   86.770 ms/op
                 executeFilterQuery·p0.50:   87.294 ms/op
                 executeFilterQuery·p0.90:   96.548 ms/op
                 executeFilterQuery·p0.95:   102.957 ms/op
                 executeFilterQuery·p0.99:   135.791 ms/op
                 executeFilterQuery·p0.999:  135.791 ms/op
                 executeFilterQuery·p0.9999: 135.791 ms/op
                 executeFilterQuery·p1.00:   135.791 ms/op

Iteration   2: 88.945 ±(99.9%) 3.029 ms/op
                 executeFilterQuery·p0.00:   86.770 ms/op
                 executeFilterQuery·p0.50:   87.425 ms/op
                 executeFilterQuery·p0.90:   88.369 ms/op
                 executeFilterQuery·p0.95:   106.588 ms/op
                 executeFilterQuery·p0.99:   125.436 ms/op
                 executeFilterQuery·p0.999:  125.436 ms/op
                 executeFilterQuery·p0.9999: 125.436 ms/op
                 executeFilterQuery·p1.00:   125.436 ms/op

Iteration   3: 87.403 ±(99.9%) 0.557 ms/op
                 executeFilterQuery·p0.00:   86.508 ms/op
                 executeFilterQuery·p0.50:   86.770 ms/op
                 executeFilterQuery·p0.90:   90.046 ms/op
                 executeFilterQuery·p0.95:   90.046 ms/op
                 executeFilterQuery·p0.99:   90.178 ms/op
                 executeFilterQuery·p0.999:  90.178 ms/op
                 executeFilterQuery·p0.9999: 90.178 ms/op
                 executeFilterQuery·p1.00:   90.178 ms/op

Iteration   4: 86.805 ±(99.9%) 0.099 ms/op
                 executeFilterQuery·p0.00:   86.508 ms/op
                 executeFilterQuery·p0.50:   86.770 ms/op
                 executeFilterQuery·p0.90:   86.901 ms/op
                 executeFilterQuery·p0.95:   87.294 ms/op
                 executeFilterQuery·p0.99:   87.818 ms/op
                 executeFilterQuery·p0.999:  87.818 ms/op
                 executeFilterQuery·p0.9999: 87.818 ms/op
                 executeFilterQuery·p1.00:   87.818 ms/op

Iteration   5: 87.001 ±(99.9%) 0.248 ms/op
                 executeFilterQuery·p0.00:   86.639 ms/op
                 executeFilterQuery·p0.50:   86.770 ms/op
                 executeFilterQuery·p0.90:   87.687 ms/op
                 executeFilterQuery·p0.95:   88.474 ms/op
                 executeFilterQuery·p0.99:   89.915 ms/op
                 executeFilterQuery·p0.999:  89.915 ms/op
                 executeFilterQuery·p0.9999: 89.915 ms/op
                 executeFilterQuery·p1.00:   89.915 ms/op


# Run progress: 71.67% complete, ETA 00:28:56
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

87.100 ±(99.9%) 1.458 ms/op
# Warmup Iteration   2: 87.832 ±(99.9%) 0.076 ms/op
# Warmup Iteration   3: 89.957 ±(99.9%) 2.279 ms/op
# Warmup Iteration   4: 94.389 ±(99.9%) 5.595 ms/op
# Warmup Iteration   5: 94.908 ±(99.9%) 6.014 ms/op
Iteration   1: 89.384 ±(99.9%) 1.132 ms/op
                 executeFilterQuery·p0.00:   87.818 ms/op
                 executeFilterQuery·p0.50:   88.605 ms/op
                 executeFilterQuery·p0.90:   92.170 ms/op
                 executeFilterQuery·p0.95:   96.613 ms/op
                 executeFilterQuery·p0.99:   99.877 ms/op
                 executeFilterQuery·p0.999:  99.877 ms/op
                 executeFilterQuery·p0.9999: 99.877 ms/op
                 executeFilterQuery·p1.00:   99.877 ms/op

Iteration   2: 89.046 ±(99.9%) 0.620 ms/op
                 executeFilterQuery·p0.00:   87.687 ms/op
                 executeFilterQuery·p0.50:   88.736 ms/op
                 executeFilterQuery·p0.90:   90.492 ms/op
                 executeFilterQuery·p0.95:   92.550 ms/op
                 executeFilterQuery·p0.99:   95.814 ms/op
                 executeFilterQuery·p0.999:  95.814 ms/op
                 executeFilterQuery·p0.9999: 95.814 ms/op
                 executeFilterQuery·p1.00:   95.814 ms/op

Iteration   3: 93.105 ±(99.9%) 4.015 ms/op
                 executeFilterQuery·p0.00:   87.949 ms/op
                 executeFilterQuery·p0.50:   89.850 ms/op
                 executeFilterQuery·p0.90:   103.023 ms/op
                 executeFilterQuery·p0.95:   114.196 ms/op
                 executeFilterQuery·p0.99:   133.693 ms/op
                 executeFilterQuery·p0.999:  133.693 ms/op
                 executeFilterQuery·p0.9999: 133.693 ms/op
                 executeFilterQuery·p1.00:   133.693 ms/op

Iteration   4: 88.557 ±(99.9%) 0.339 ms/op
                 executeFilterQuery·p0.00:   87.687 ms/op
                 executeFilterQuery·p0.50:   88.408 ms/op
                 executeFilterQuery·p0.90:   89.653 ms/op
                 executeFilterQuery·p0.95:   89.928 ms/op
                 executeFilterQuery·p0.99:   90.964 ms/op
                 executeFilterQuery·p0.999:  90.964 ms/op
                 executeFilterQuery·p0.9999: 90.964 ms/op
                 executeFilterQuery·p1.00:   90.964 ms/op

Iteration   5: 87.836 ±(99.9%) 0.065 ms/op
                 executeFilterQuery·p0.00:   87.556 ms/op
                 executeFilterQuery·p0.50:   87.818 ms/op
                 executeFilterQuery·p0.90:   88.080 ms/op
                 executeFilterQuery·p0.95:   88.080 ms/op
                 executeFilterQuery·p0.99:   88.211 ms/op
                 executeFilterQuery·p0.999:  88.211 ms/op
                 executeFilterQuery·p0.9999: 88.211 ms/op
                 executeFilterQuery·p1.00:   88.211 ms/op


# Run progress: 73.33% complete, ETA 00:27:14
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

87.749 ±(99.9%) 1.523 ms/op
# Warmup Iteration   2: 88.514 ±(99.9%) 0.664 ms/op
# Warmup Iteration   3: 90.608 ±(99.9%) 2.969 ms/op
# Warmup Iteration   4: 91.972 ±(99.9%) 3.308 ms/op
# Warmup Iteration   5: 90.121 ±(99.9%) 3.009 ms/op
Iteration   1: 88.155 ±(99.9%) 0.520 ms/op
                 executeFilterQuery·p0.00:   87.425 ms/op
                 executeFilterQuery·p0.50:   87.687 ms/op
                 executeFilterQuery·p0.90:   90.702 ms/op
                 executeFilterQuery·p0.95:   90.839 ms/op
                 executeFilterQuery·p0.99:   91.095 ms/op
                 executeFilterQuery·p0.999:  91.095 ms/op
                 executeFilterQuery·p0.9999: 91.095 ms/op
                 executeFilterQuery·p1.00:   91.095 ms/op

Iteration   2: 87.816 ±(99.9%) 0.364 ms/op
                 executeFilterQuery·p0.00:   87.294 ms/op
                 executeFilterQuery·p0.50:   87.687 ms/op
                 executeFilterQuery·p0.90:   87.818 ms/op
                 executeFilterQuery·p0.95:   90.702 ms/op
                 executeFilterQuery·p0.99:   90.964 ms/op
                 executeFilterQuery·p0.999:  90.964 ms/op
                 executeFilterQuery·p0.9999: 90.964 ms/op
                 executeFilterQuery·p1.00:   90.964 ms/op

Iteration   3: 87.681 ±(99.9%) 0.085 ms/op
                 executeFilterQuery·p0.00:   87.425 ms/op
                 executeFilterQuery·p0.50:   87.687 ms/op
                 executeFilterQuery·p0.90:   87.949 ms/op
                 executeFilterQuery·p0.95:   88.080 ms/op
                 executeFilterQuery·p0.99:   88.474 ms/op
                 executeFilterQuery·p0.999:  88.474 ms/op
                 executeFilterQuery·p0.9999: 88.474 ms/op
                 executeFilterQuery·p1.00:   88.474 ms/op

Iteration   4: 87.867 ±(99.9%) 0.330 ms/op
                 executeFilterQuery·p0.00:   87.425 ms/op
                 executeFilterQuery·p0.50:   87.687 ms/op
                 executeFilterQuery·p0.90:   88.080 ms/op
                 executeFilterQuery·p0.95:   90.702 ms/op
                 executeFilterQuery·p0.99:   90.833 ms/op
                 executeFilterQuery·p0.999:  90.833 ms/op
                 executeFilterQuery·p0.9999: 90.833 ms/op
                 executeFilterQuery·p1.00:   90.833 ms/op

Iteration   5: 88.819 ±(99.9%) 1.654 ms/op
                 executeFilterQuery·p0.00:   87.294 ms/op
                 executeFilterQuery·p0.50:   87.818 ms/op
                 executeFilterQuery·p0.90:   90.833 ms/op
                 executeFilterQuery·p0.95:   90.839 ms/op
                 executeFilterQuery·p0.99:   114.426 ms/op
                 executeFilterQuery·p0.999:  114.426 ms/op
                 executeFilterQuery·p0.9999: 114.426 ms/op
                 executeFilterQuery·p1.00:   114.426 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1419
  mean =     90.146 ±(99.9%) 0.626 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 1123 
    [ 90.000,  95.000) = 199 
    [ 95.000, 100.000) = 31 
    [100.000, 105.000) = 10 
    [105.000, 110.000) = 8 
    [110.000, 115.000) = 7 
    [115.000, 120.000) = 14 
    [120.000, 125.000) = 6 
    [125.000, 130.000) = 5 
    [130.000, 135.000) = 6 
    [135.000, 140.000) = 9 
    [140.000, 145.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     86.508 ms/op
     p(50.0000) =     88.343 ms/op
     p(90.0000) =     91.488 ms/op
     p(95.0000) =     98.435 ms/op
     p(99.0000) =    132.278 ms/op
     p(99.9000) =    140.677 ms/op
     p(99.9900) =    141.558 ms/op
     p(99.9990) =    141.558 ms/op
     p(99.9999) =    141.558 ms/op
    p(100.0000) =    141.558 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 75.00% complete, ETA 00:25:32
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

41.741 ±(99.9%) 5.197 ms/op
# Warmup Iteration   2: 42.943 ±(99.9%) 2.287 ms/op
# Warmup Iteration   3: 44.355 ±(99.9%) 3.010 ms/op
# Warmup Iteration   4: 40.249 ±(99.9%) 0.153 ms/op
# Warmup Iteration   5: 42.437 ±(99.9%) 1.727 ms/op
Iteration   1: 42.083 ±(99.9%) 1.491 ms/op
                 executeFilterQuery·p0.00:   40.108 ms/op
                 executeFilterQuery·p0.50:   41.091 ms/op
                 executeFilterQuery·p0.90:   43.070 ms/op
                 executeFilterQuery·p0.95:   51.026 ms/op
                 executeFilterQuery·p0.99:   60.686 ms/op
                 executeFilterQuery·p0.999:  60.686 ms/op
                 executeFilterQuery·p0.9999: 60.686 ms/op
                 executeFilterQuery·p1.00:   60.686 ms/op

Iteration   2: 43.820 ±(99.9%) 2.193 ms/op
                 executeFilterQuery·p0.00:   40.763 ms/op
                 executeFilterQuery·p0.50:   42.009 ms/op
                 executeFilterQuery·p0.90:   51.852 ms/op
                 executeFilterQuery·p0.95:   62.351 ms/op
                 executeFilterQuery·p0.99:   64.422 ms/op
                 executeFilterQuery·p0.999:  64.422 ms/op
                 executeFilterQuery·p0.9999: 64.422 ms/op
                 executeFilterQuery·p1.00:   64.422 ms/op

Iteration   3: 42.529 ±(99.9%) 0.563 ms/op
                 executeFilterQuery·p0.00:   40.305 ms/op
                 executeFilterQuery·p0.50:   42.369 ms/op
                 executeFilterQuery·p0.90:   43.601 ms/op
                 executeFilterQuery·p0.95:   44.990 ms/op
                 executeFilterQuery·p0.99:   49.807 ms/op
                 executeFilterQuery·p0.999:  49.807 ms/op
                 executeFilterQuery·p0.9999: 49.807 ms/op
                 executeFilterQuery·p1.00:   49.807 ms/op

Iteration   4: 43.031 ±(99.9%) 2.039 ms/op
                 executeFilterQuery·p0.00:   40.501 ms/op
                 executeFilterQuery·p0.50:   41.812 ms/op
                 executeFilterQuery·p0.90:   43.660 ms/op
                 executeFilterQuery·p0.95:   60.614 ms/op
                 executeFilterQuery·p0.99:   70.910 ms/op
                 executeFilterQuery·p0.999:  70.910 ms/op
                 executeFilterQuery·p0.9999: 70.910 ms/op
                 executeFilterQuery·p1.00:   70.910 ms/op

Iteration   5: 44.895 ±(99.9%) 2.782 ms/op
                 executeFilterQuery·p0.00:   40.501 ms/op
                 executeFilterQuery·p0.50:   42.140 ms/op
                 executeFilterQuery·p0.90:   61.145 ms/op
                 executeFilterQuery·p0.95:   62.341 ms/op
                 executeFilterQuery·p0.99:   72.614 ms/op
                 executeFilterQuery·p0.999:  72.614 ms/op
                 executeFilterQuery·p0.9999: 72.614 ms/op
                 executeFilterQuery·p1.00:   72.614 ms/op


# Run progress: 76.67% complete, ETA 00:23:50
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

46.385 ±(99.9%) 7.520 ms/op
# Warmup Iteration   2: 42.809 ±(99.9%) 1.134 ms/op
# Warmup Iteration   3: 42.894 ±(99.9%) 1.550 ms/op
# Warmup Iteration   4: 44.337 ±(99.9%) 2.370 ms/op
# Warmup Iteration   5: 43.072 ±(99.9%) 1.802 ms/op
Iteration   1: 42.866 ±(99.9%) 1.807 ms/op
                 executeFilterQuery·p0.00:   40.567 ms/op
                 executeFilterQuery·p0.50:   41.157 ms/op
                 executeFilterQuery·p0.90:   46.367 ms/op
                 executeFilterQuery·p0.95:   58.530 ms/op
                 executeFilterQuery·p0.99:   61.669 ms/op
                 executeFilterQuery·p0.999:  61.669 ms/op
                 executeFilterQuery·p0.9999: 61.669 ms/op
                 executeFilterQuery·p1.00:   61.669 ms/op

Iteration   2: 41.813 ±(99.9%) 0.417 ms/op
                 executeFilterQuery·p0.00:   40.698 ms/op
                 executeFilterQuery·p0.50:   41.615 ms/op
                 executeFilterQuery·p0.90:   42.992 ms/op
                 executeFilterQuery·p0.95:   43.254 ms/op
                 executeFilterQuery·p0.99:   48.562 ms/op
                 executeFilterQuery·p0.999:  48.562 ms/op
                 executeFilterQuery·p0.9999: 48.562 ms/op
                 executeFilterQuery·p1.00:   48.562 ms/op

Iteration   3: 43.919 ±(99.9%) 1.948 ms/op
                 executeFilterQuery·p0.00:   40.763 ms/op
                 executeFilterQuery·p0.50:   42.664 ms/op
                 executeFilterQuery·p0.90:   47.592 ms/op
                 executeFilterQuery·p0.95:   61.080 ms/op
                 executeFilterQuery·p0.99:   63.111 ms/op
                 executeFilterQuery·p0.999:  63.111 ms/op
                 executeFilterQuery·p0.9999: 63.111 ms/op
                 executeFilterQuery·p1.00:   63.111 ms/op

Iteration   4: 43.118 ±(99.9%) 0.905 ms/op
                 executeFilterQuery·p0.00:   41.484 ms/op
                 executeFilterQuery·p0.50:   42.336 ms/op
                 executeFilterQuery·p0.90:   45.679 ms/op
                 executeFilterQuery·p0.95:   47.710 ms/op
                 executeFilterQuery·p0.99:   55.640 ms/op
                 executeFilterQuery·p0.999:  55.640 ms/op
                 executeFilterQuery·p0.9999: 55.640 ms/op
                 executeFilterQuery·p1.00:   55.640 ms/op

Iteration   5: 42.798 ±(99.9%) 0.857 ms/op
                 executeFilterQuery·p0.00:   41.484 ms/op
                 executeFilterQuery·p0.50:   42.205 ms/op
                 executeFilterQuery·p0.90:   44.211 ms/op
                 executeFilterQuery·p0.95:   46.472 ms/op
                 executeFilterQuery·p0.99:   58.065 ms/op
                 executeFilterQuery·p0.999:  58.065 ms/op
                 executeFilterQuery·p0.9999: 58.065 ms/op
                 executeFilterQuery·p1.00:   58.065 ms/op


# Run progress: 78.33% complete, ETA 00:22:08
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

43.262 ±(99.9%) 5.999 ms/op
# Warmup Iteration   2: 42.812 ±(99.9%) 1.370 ms/op
# Warmup Iteration   3: 42.954 ±(99.9%) 1.454 ms/op
# Warmup Iteration   4: 41.931 ±(99.9%) 1.438 ms/op
# Warmup Iteration   5: 41.422 ±(99.9%) 1.076 ms/op
Iteration   1: 42.280 ±(99.9%) 1.621 ms/op
                 executeFilterQuery·p0.00:   40.108 ms/op
                 executeFilterQuery·p0.50:   41.419 ms/op
                 executeFilterQuery·p0.90:   44.040 ms/op
                 executeFilterQuery·p0.95:   45.466 ms/op
                 executeFilterQuery·p0.99:   67.502 ms/op
                 executeFilterQuery·p0.999:  67.502 ms/op
                 executeFilterQuery·p0.9999: 67.502 ms/op
                 executeFilterQuery·p1.00:   67.502 ms/op

Iteration   2: 41.489 ±(99.9%) 1.053 ms/op
                 executeFilterQuery·p0.00:   39.977 ms/op
                 executeFilterQuery·p0.50:   40.894 ms/op
                 executeFilterQuery·p0.90:   42.205 ms/op
                 executeFilterQuery·p0.95:   43.188 ms/op
                 executeFilterQuery·p0.99:   61.735 ms/op
                 executeFilterQuery·p0.999:  61.735 ms/op
                 executeFilterQuery·p0.9999: 61.735 ms/op
                 executeFilterQuery·p1.00:   61.735 ms/op

Iteration   3: 41.400 ±(99.9%) 0.932 ms/op
                 executeFilterQuery·p0.00:   39.780 ms/op
                 executeFilterQuery·p0.50:   40.763 ms/op
                 executeFilterQuery·p0.90:   42.920 ms/op
                 executeFilterQuery·p0.95:   44.882 ms/op
                 executeFilterQuery·p0.99:   59.769 ms/op
                 executeFilterQuery·p0.999:  59.769 ms/op
                 executeFilterQuery·p0.9999: 59.769 ms/op
                 executeFilterQuery·p1.00:   59.769 ms/op

Iteration   4: 41.803 ±(99.9%) 0.742 ms/op
                 executeFilterQuery·p0.00:   40.042 ms/op
                 executeFilterQuery·p0.50:   41.484 ms/op
                 executeFilterQuery·p0.90:   42.729 ms/op
                 executeFilterQuery·p0.95:   43.516 ms/op
                 executeFilterQuery·p0.99:   55.509 ms/op
                 executeFilterQuery·p0.999:  55.509 ms/op
                 executeFilterQuery·p0.9999: 55.509 ms/op
                 executeFilterQuery·p1.00:   55.509 ms/op

Iteration   5: 42.161 ±(99.9%) 1.147 ms/op
                 executeFilterQuery·p0.00:   40.042 ms/op
                 executeFilterQuery·p0.50:   41.288 ms/op
                 executeFilterQuery·p0.90:   44.558 ms/op
                 executeFilterQuery·p0.95:   46.799 ms/op
                 executeFilterQuery·p0.99:   62.718 ms/op
                 executeFilterQuery·p0.999:  62.718 ms/op
                 executeFilterQuery·p0.9999: 62.718 ms/op
                 executeFilterQuery·p1.00:   62.718 ms/op


# Run progress: 80.00% complete, ETA 00:20:25
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

43.298 ±(99.9%) 8.880 ms/op
# Warmup Iteration   2: 42.906 ±(99.9%) 1.259 ms/op
# Warmup Iteration   3: 42.516 ±(99.9%) 1.115 ms/op
# Warmup Iteration   4: 42.377 ±(99.9%) 1.146 ms/op
# Warmup Iteration   5: 42.099 ±(99.9%) 1.088 ms/op
Iteration   1: 43.188 ±(99.9%) 2.100 ms/op
                 executeFilterQuery·p0.00:   40.632 ms/op
                 executeFilterQuery·p0.50:   42.205 ms/op
                 executeFilterQuery·p0.90:   43.804 ms/op
                 executeFilterQuery·p0.95:   46.852 ms/op
                 executeFilterQuery·p0.99:   78.250 ms/op
                 executeFilterQuery·p0.999:  78.250 ms/op
                 executeFilterQuery·p0.9999: 78.250 ms/op
                 executeFilterQuery·p1.00:   78.250 ms/op

Iteration   2: 42.614 ±(99.9%) 1.312 ms/op
                 executeFilterQuery·p0.00:   40.632 ms/op
                 executeFilterQuery·p0.50:   41.648 ms/op
                 executeFilterQuery·p0.90:   44.125 ms/op
                 executeFilterQuery·p0.95:   46.478 ms/op
                 executeFilterQuery·p0.99:   61.932 ms/op
                 executeFilterQuery·p0.999:  61.932 ms/op
                 executeFilterQuery·p0.9999: 61.932 ms/op
                 executeFilterQuery·p1.00:   61.932 ms/op

Iteration   3: 43.158 ±(99.9%) 1.931 ms/op
                 executeFilterQuery·p0.00:   40.632 ms/op
                 executeFilterQuery·p0.50:   41.484 ms/op
                 executeFilterQuery·p0.90:   45.928 ms/op
                 executeFilterQuery·p0.95:   59.677 ms/op
                 executeFilterQuery·p0.99:   64.029 ms/op
                 executeFilterQuery·p0.999:  64.029 ms/op
                 executeFilterQuery·p0.9999: 64.029 ms/op
                 executeFilterQuery·p1.00:   64.029 ms/op

Iteration   4: 42.136 ±(99.9%) 1.167 ms/op
                 executeFilterQuery·p0.00:   40.436 ms/op
                 executeFilterQuery·p0.50:   41.550 ms/op
                 executeFilterQuery·p0.90:   43.385 ms/op
                 executeFilterQuery·p0.95:   43.516 ms/op
                 executeFilterQuery·p0.99:   64.946 ms/op
                 executeFilterQuery·p0.999:  64.946 ms/op
                 executeFilterQuery·p0.9999: 64.946 ms/op
                 executeFilterQuery·p1.00:   64.946 ms/op

Iteration   5: 41.761 ±(99.9%) 0.280 ms/op
                 executeFilterQuery·p0.00:   40.763 ms/op
                 executeFilterQuery·p0.50:   41.583 ms/op
                 executeFilterQuery·p0.90:   42.716 ms/op
                 executeFilterQuery·p0.95:   43.552 ms/op
                 executeFilterQuery·p0.99:   44.433 ms/op
                 executeFilterQuery·p0.999:  44.433 ms/op
                 executeFilterQuery·p0.9999: 44.433 ms/op
                 executeFilterQuery·p1.00:   44.433 ms/op


# Run progress: 81.67% complete, ETA 00:18:43
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

43.824 ±(99.9%) 5.774 ms/op
# Warmup Iteration   2: 42.413 ±(99.9%) 1.495 ms/op
# Warmup Iteration   3: 41.457 ±(99.9%) 0.504 ms/op
# Warmup Iteration   4: 43.076 ±(99.9%) 0.943 ms/op
# Warmup Iteration   5: 41.619 ±(99.9%) 0.343 ms/op
Iteration   1: 41.114 ±(99.9%) 0.455 ms/op
                 executeFilterQuery·p0.00:   39.846 ms/op
                 executeFilterQuery·p0.50:   40.632 ms/op
                 executeFilterQuery·p0.90:   42.651 ms/op
                 executeFilterQuery·p0.95:   43.817 ms/op
                 executeFilterQuery·p0.99:   47.579 ms/op
                 executeFilterQuery·p0.999:  47.579 ms/op
                 executeFilterQuery·p0.9999: 47.579 ms/op
                 executeFilterQuery·p1.00:   47.579 ms/op

Iteration   2: 40.815 ±(99.9%) 0.141 ms/op
                 executeFilterQuery·p0.00:   40.370 ms/op
                 executeFilterQuery·p0.50:   40.698 ms/op
                 executeFilterQuery·p0.90:   41.091 ms/op
                 executeFilterQuery·p0.95:   41.933 ms/op
                 executeFilterQuery·p0.99:   42.402 ms/op
                 executeFilterQuery·p0.999:  42.402 ms/op
                 executeFilterQuery·p0.9999: 42.402 ms/op
                 executeFilterQuery·p1.00:   42.402 ms/op

Iteration   3: 41.495 ±(99.9%) 0.557 ms/op
                 executeFilterQuery·p0.00:   40.370 ms/op
                 executeFilterQuery·p0.50:   41.222 ms/op
                 executeFilterQuery·p0.90:   42.330 ms/op
                 executeFilterQuery·p0.95:   42.792 ms/op
                 executeFilterQuery·p0.99:   52.625 ms/op
                 executeFilterQuery·p0.999:  52.625 ms/op
                 executeFilterQuery·p0.9999: 52.625 ms/op
                 executeFilterQuery·p1.00:   52.625 ms/op

Iteration   4: 41.967 ±(99.9%) 0.367 ms/op
                 executeFilterQuery·p0.00:   40.632 ms/op
                 executeFilterQuery·p0.50:   41.812 ms/op
                 executeFilterQuery·p0.90:   42.795 ms/op
                 executeFilterQuery·p0.95:   43.254 ms/op
                 executeFilterQuery·p0.99:   47.186 ms/op
                 executeFilterQuery·p0.999:  47.186 ms/op
                 executeFilterQuery·p0.9999: 47.186 ms/op
                 executeFilterQuery·p1.00:   47.186 ms/op

Iteration   5: 42.792 ±(99.9%) 1.440 ms/op
                 executeFilterQuery·p0.00:   40.239 ms/op
                 executeFilterQuery·p0.50:   41.746 ms/op
                 executeFilterQuery·p0.90:   45.888 ms/op
                 executeFilterQuery·p0.95:   50.679 ms/op
                 executeFilterQuery·p0.99:   60.555 ms/op
                 executeFilterQuery·p0.999:  60.555 ms/op
                 executeFilterQuery·p0.9999: 60.555 ms/op
                 executeFilterQuery·p1.00:   60.555 ms/op



Result "benchmarks.filter_query.VectorisedSimd.executeFilterQuery":
  N = 1949
  mean =     42.420 ±(99.9%) 0.271 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 4 
    [40.000, 45.000) = 1818 
    [45.000, 50.000) = 59 
    [50.000, 55.000) = 17 
    [55.000, 60.000) = 15 
    [60.000, 65.000) = 32 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     39.780 ms/op
     p(50.0000) =     41.615 ms/op
     p(90.0000) =     43.647 ms/op
     p(95.0000) =     46.170 ms/op
     p(99.0000) =     62.423 ms/op
     p(99.9000) =     72.896 ms/op
     p(99.9900) =     78.250 ms/op
     p(99.9990) =     78.250 ms/op
     p(99.9999) =     78.250 ms/op
    p(100.0000) =     78.250 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 83.33% complete, ETA 00:17:01
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

42.721 ±(99.9%) 5.782 ms/op
# Warmup Iteration   2: 41.997 ±(99.9%) 1.734 ms/op
# Warmup Iteration   3: 40.712 ±(99.9%) 0.200 ms/op
# Warmup Iteration   4: 42.621 ±(99.9%) 0.800 ms/op
# Warmup Iteration   5: 41.578 ±(99.9%) 0.342 ms/op
Iteration   1: 42.526 ±(99.9%) 1.915 ms/op
                 executeFilterQuery·p0.00:   40.501 ms/op
                 executeFilterQuery·p0.50:   41.026 ms/op
                 executeFilterQuery·p0.90:   45.246 ms/op
                 executeFilterQuery·p0.95:   60.889 ms/op
                 executeFilterQuery·p0.99:   64.684 ms/op
                 executeFilterQuery·p0.999:  64.684 ms/op
                 executeFilterQuery·p0.9999: 64.684 ms/op
                 executeFilterQuery·p1.00:   64.684 ms/op

Iteration   2: 40.656 ±(99.9%) 0.047 ms/op
                 executeFilterQuery·p0.00:   40.174 ms/op
                 executeFilterQuery·p0.50:   40.698 ms/op
                 executeFilterQuery·p0.90:   40.763 ms/op
                 executeFilterQuery·p0.95:   40.829 ms/op
                 executeFilterQuery·p0.99:   40.960 ms/op
                 executeFilterQuery·p0.999:  40.960 ms/op
                 executeFilterQuery·p0.9999: 40.960 ms/op
                 executeFilterQuery·p1.00:   40.960 ms/op

Iteration   3: 40.595 ±(99.9%) 0.059 ms/op
                 executeFilterQuery·p0.00:   40.305 ms/op
                 executeFilterQuery·p0.50:   40.632 ms/op
                 executeFilterQuery·p0.90:   40.763 ms/op
                 executeFilterQuery·p0.95:   40.829 ms/op
                 executeFilterQuery·p0.99:   40.960 ms/op
                 executeFilterQuery·p0.999:  40.960 ms/op
                 executeFilterQuery·p0.9999: 40.960 ms/op
                 executeFilterQuery·p1.00:   40.960 ms/op

Iteration   4: 40.642 ±(99.9%) 0.074 ms/op
                 executeFilterQuery·p0.00:   40.239 ms/op
                 executeFilterQuery·p0.50:   40.632 ms/op
                 executeFilterQuery·p0.90:   40.881 ms/op
                 executeFilterQuery·p0.95:   40.953 ms/op
                 executeFilterQuery·p0.99:   41.550 ms/op
                 executeFilterQuery·p0.999:  41.550 ms/op
                 executeFilterQuery·p0.9999: 41.550 ms/op
                 executeFilterQuery·p1.00:   41.550 ms/op

Iteration   5: 40.541 ±(99.9%) 0.087 ms/op
                 executeFilterQuery·p0.00:   40.042 ms/op
                 executeFilterQuery·p0.50:   40.501 ms/op
                 executeFilterQuery·p0.90:   40.685 ms/op
                 executeFilterQuery·p0.95:   41.150 ms/op
                 executeFilterQuery·p0.99:   41.615 ms/op
                 executeFilterQuery·p0.999:  41.615 ms/op
                 executeFilterQuery·p0.9999: 41.615 ms/op
                 executeFilterQuery·p1.00:   41.615 ms/op


# Run progress: 85.00% complete, ETA 00:15:19
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

41.914 ±(99.9%) 5.546 ms/op
# Warmup Iteration   2: 40.520 ±(99.9%) 0.120 ms/op
# Warmup Iteration   3: 40.632 ±(99.9%) 0.094 ms/op
# Warmup Iteration   4: 40.445 ±(99.9%) 0.064 ms/op
# Warmup Iteration   5: 40.435 ±(99.9%) 0.064 ms/op
Iteration   1: 40.471 ±(99.9%) 0.046 ms/op
                 executeFilterQuery·p0.00:   39.977 ms/op
                 executeFilterQuery·p0.50:   40.501 ms/op
                 executeFilterQuery·p0.90:   40.613 ms/op
                 executeFilterQuery·p0.95:   40.632 ms/op
                 executeFilterQuery·p0.99:   40.829 ms/op
                 executeFilterQuery·p0.999:  40.829 ms/op
                 executeFilterQuery·p0.9999: 40.829 ms/op
                 executeFilterQuery·p1.00:   40.829 ms/op

Iteration   2: 40.596 ±(99.9%) 0.051 ms/op
                 executeFilterQuery·p0.00:   40.305 ms/op
                 executeFilterQuery·p0.50:   40.632 ms/op
                 executeFilterQuery·p0.90:   40.763 ms/op
                 executeFilterQuery·p0.95:   40.763 ms/op
                 executeFilterQuery·p0.99:   40.960 ms/op
                 executeFilterQuery·p0.999:  40.960 ms/op
                 executeFilterQuery·p0.9999: 40.960 ms/op
                 executeFilterQuery·p1.00:   40.960 ms/op

Iteration   3: 40.614 ±(99.9%) 0.051 ms/op
                 executeFilterQuery·p0.00:   40.239 ms/op
                 executeFilterQuery·p0.50:   40.632 ms/op
                 executeFilterQuery·p0.90:   40.763 ms/op
                 executeFilterQuery·p0.95:   40.822 ms/op
                 executeFilterQuery·p0.99:   40.894 ms/op
                 executeFilterQuery·p0.999:  40.894 ms/op
                 executeFilterQuery·p0.9999: 40.894 ms/op
                 executeFilterQuery·p1.00:   40.894 ms/op

Iteration   4: 40.610 ±(99.9%) 0.079 ms/op
                 executeFilterQuery·p0.00:   40.174 ms/op
                 executeFilterQuery·p0.50:   40.632 ms/op
                 executeFilterQuery·p0.90:   40.750 ms/op
                 executeFilterQuery·p0.95:   40.763 ms/op
                 executeFilterQuery·p0.99:   42.009 ms/op
                 executeFilterQuery·p0.999:  42.009 ms/op
                 executeFilterQuery·p0.9999: 42.009 ms/op
                 executeFilterQuery·p1.00:   42.009 ms/op

Iteration   5: 40.660 ±(99.9%) 0.079 ms/op
                 executeFilterQuery·p0.00:   40.174 ms/op
                 executeFilterQuery·p0.50:   40.632 ms/op
                 executeFilterQuery·p0.90:   40.763 ms/op
                 executeFilterQuery·p0.95:   40.888 ms/op
                 executeFilterQuery·p0.99:   42.009 ms/op
                 executeFilterQuery·p0.999:  42.009 ms/op
                 executeFilterQuery·p0.9999: 42.009 ms/op
                 executeFilterQuery·p1.00:   42.009 ms/op


# Run progress: 86.67% complete, ETA 00:13:37
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

41.020 ±(99.9%) 5.478 ms/op
# Warmup Iteration   2: 40.297 ±(99.9%) 0.089 ms/op
# Warmup Iteration   3: 40.267 ±(99.9%) 0.056 ms/op
# Warmup Iteration   4: 40.206 ±(99.9%) 0.058 ms/op
# Warmup Iteration   5: 40.248 ±(99.9%) 0.065 ms/op
Iteration   1: 40.232 ±(99.9%) 0.063 ms/op
                 executeFilterQuery·p0.00:   39.911 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.416 ms/op
                 executeFilterQuery·p0.95:   40.491 ms/op
                 executeFilterQuery·p0.99:   40.567 ms/op
                 executeFilterQuery·p0.999:  40.567 ms/op
                 executeFilterQuery·p0.9999: 40.567 ms/op
                 executeFilterQuery·p1.00:   40.567 ms/op

Iteration   2: 40.278 ±(99.9%) 0.076 ms/op
                 executeFilterQuery·p0.00:   39.911 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.370 ms/op
                 executeFilterQuery·p0.95:   40.501 ms/op
                 executeFilterQuery·p0.99:   41.484 ms/op
                 executeFilterQuery·p0.999:  41.484 ms/op
                 executeFilterQuery·p0.9999: 41.484 ms/op
                 executeFilterQuery·p1.00:   41.484 ms/op

Iteration   3: 40.253 ±(99.9%) 0.077 ms/op
                 executeFilterQuery·p0.00:   39.911 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.370 ms/op
                 executeFilterQuery·p0.95:   40.436 ms/op
                 executeFilterQuery·p0.99:   41.222 ms/op
                 executeFilterQuery·p0.999:  41.222 ms/op
                 executeFilterQuery·p0.9999: 41.222 ms/op
                 executeFilterQuery·p1.00:   41.222 ms/op

Iteration   4: 40.452 ±(99.9%) 0.235 ms/op
                 executeFilterQuery·p0.00:   39.911 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   41.707 ms/op
                 executeFilterQuery·p0.95:   42.330 ms/op
                 executeFilterQuery·p0.99:   42.664 ms/op
                 executeFilterQuery·p0.999:  42.664 ms/op
                 executeFilterQuery·p0.9999: 42.664 ms/op
                 executeFilterQuery·p1.00:   42.664 ms/op

Iteration   5: 40.297 ±(99.9%) 0.150 ms/op
                 executeFilterQuery·p0.00:   39.649 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.554 ms/op
                 executeFilterQuery·p0.95:   40.685 ms/op
                 executeFilterQuery·p0.99:   42.467 ms/op
                 executeFilterQuery·p0.999:  42.467 ms/op
                 executeFilterQuery·p0.9999: 42.467 ms/op
                 executeFilterQuery·p1.00:   42.467 ms/op


# Run progress: 88.33% complete, ETA 00:11:55
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

41.878 ±(99.9%) 5.912 ms/op
# Warmup Iteration   2: 41.124 ±(99.9%) 0.160 ms/op
# Warmup Iteration   3: 41.144 ±(99.9%) 0.163 ms/op
# Warmup Iteration   4: 40.771 ±(99.9%) 0.205 ms/op
# Warmup Iteration   5: 40.840 ±(99.9%) 0.265 ms/op
Iteration   1: 41.697 ±(99.9%) 0.257 ms/op
                 executeFilterQuery·p0.00:   40.108 ms/op
                 executeFilterQuery·p0.50:   41.681 ms/op
                 executeFilterQuery·p0.90:   42.736 ms/op
                 executeFilterQuery·p0.95:   42.992 ms/op
                 executeFilterQuery·p0.99:   43.581 ms/op
                 executeFilterQuery·p0.999:  43.581 ms/op
                 executeFilterQuery·p0.9999: 43.581 ms/op
                 executeFilterQuery·p1.00:   43.581 ms/op

Iteration   2: 40.397 ±(99.9%) 0.417 ms/op
                 executeFilterQuery·p0.00:   39.911 ms/op
                 executeFilterQuery·p0.50:   40.239 ms/op
                 executeFilterQuery·p0.90:   40.482 ms/op
                 executeFilterQuery·p0.95:   40.557 ms/op
                 executeFilterQuery·p0.99:   50.201 ms/op
                 executeFilterQuery·p0.999:  50.201 ms/op
                 executeFilterQuery·p0.9999: 50.201 ms/op
                 executeFilterQuery·p1.00:   50.201 ms/op

Iteration   3: 40.361 ±(99.9%) 0.121 ms/op
                 executeFilterQuery·p0.00:   39.977 ms/op
                 executeFilterQuery·p0.50:   40.370 ms/op
                 executeFilterQuery·p0.90:   40.436 ms/op
                 executeFilterQuery·p0.95:   40.557 ms/op
                 executeFilterQuery·p0.99:   42.926 ms/op
                 executeFilterQuery·p0.999:  42.926 ms/op
                 executeFilterQuery·p0.9999: 42.926 ms/op
                 executeFilterQuery·p1.00:   42.926 ms/op

Iteration   4: 40.224 ±(99.9%) 0.063 ms/op
                 executeFilterQuery·p0.00:   39.846 ms/op
                 executeFilterQuery·p0.50:   40.239 ms/op
                 executeFilterQuery·p0.90:   40.436 ms/op
                 executeFilterQuery·p0.95:   40.488 ms/op
                 executeFilterQuery·p0.99:   40.632 ms/op
                 executeFilterQuery·p0.999:  40.632 ms/op
                 executeFilterQuery·p0.9999: 40.632 ms/op
                 executeFilterQuery·p1.00:   40.632 ms/op

Iteration   5: 40.329 ±(99.9%) 0.048 ms/op
                 executeFilterQuery·p0.00:   39.977 ms/op
                 executeFilterQuery·p0.50:   40.370 ms/op
                 executeFilterQuery·p0.90:   40.436 ms/op
                 executeFilterQuery·p0.95:   40.501 ms/op
                 executeFilterQuery·p0.99:   40.632 ms/op
                 executeFilterQuery·p0.999:  40.632 ms/op
                 executeFilterQuery·p0.9999: 40.632 ms/op
                 executeFilterQuery·p1.00:   40.632 ms/op


# Run progress: 90.00% complete, ETA 00:10:12
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

41.352 ±(99.9%) 5.490 ms/op
# Warmup Iteration   2: 41.902 ±(99.9%) 0.445 ms/op
# Warmup Iteration   3: 44.443 ±(99.9%) 1.973 ms/op
# Warmup Iteration   4: 41.556 ±(99.9%) 0.287 ms/op
# Warmup Iteration   5: 41.085 ±(99.9%) 0.235 ms/op
Iteration   1: 41.711 ±(99.9%) 0.262 ms/op
                 executeFilterQuery·p0.00:   40.370 ms/op
                 executeFilterQuery·p0.50:   41.681 ms/op
                 executeFilterQuery·p0.90:   42.631 ms/op
                 executeFilterQuery·p0.95:   43.254 ms/op
                 executeFilterQuery·p0.99:   43.319 ms/op
                 executeFilterQuery·p0.999:  43.319 ms/op
                 executeFilterQuery·p0.9999: 43.319 ms/op
                 executeFilterQuery·p1.00:   43.319 ms/op

Iteration   2: 41.949 ±(99.9%) 0.275 ms/op
                 executeFilterQuery·p0.00:   41.288 ms/op
                 executeFilterQuery·p0.50:   41.746 ms/op
                 executeFilterQuery·p0.90:   42.867 ms/op
                 executeFilterQuery·p0.95:   43.385 ms/op
                 executeFilterQuery·p0.99:   45.089 ms/op
                 executeFilterQuery·p0.999:  45.089 ms/op
                 executeFilterQuery·p0.9999: 45.089 ms/op
                 executeFilterQuery·p1.00:   45.089 ms/op

Iteration   3: 41.789 ±(99.9%) 0.163 ms/op
                 executeFilterQuery·p0.00:   41.288 ms/op
                 executeFilterQuery·p0.50:   41.681 ms/op
                 executeFilterQuery·p0.90:   42.402 ms/op
                 executeFilterQuery·p0.95:   42.861 ms/op
                 executeFilterQuery·p0.99:   43.581 ms/op
                 executeFilterQuery·p0.999:  43.581 ms/op
                 executeFilterQuery·p0.9999: 43.581 ms/op
                 executeFilterQuery·p1.00:   43.581 ms/op

Iteration   4: 41.814 ±(99.9%) 0.184 ms/op
                 executeFilterQuery·p0.00:   41.091 ms/op
                 executeFilterQuery·p0.50:   41.746 ms/op
                 executeFilterQuery·p0.90:   42.598 ms/op
                 executeFilterQuery·p0.95:   42.864 ms/op
                 executeFilterQuery·p0.99:   43.254 ms/op
                 executeFilterQuery·p0.999:  43.254 ms/op
                 executeFilterQuery·p0.9999: 43.254 ms/op
                 executeFilterQuery·p1.00:   43.254 ms/op

Iteration   5: 41.387 ±(99.9%) 0.051 ms/op
                 executeFilterQuery·p0.00:   41.091 ms/op
                 executeFilterQuery·p0.50:   41.353 ms/op
                 executeFilterQuery·p0.90:   41.484 ms/op
                 executeFilterQuery·p0.95:   41.615 ms/op
                 executeFilterQuery·p0.99:   42.009 ms/op
                 executeFilterQuery·p0.999:  42.009 ms/op
                 executeFilterQuery·p0.9999: 42.009 ms/op
                 executeFilterQuery·p1.00:   42.009 ms/op



Result "benchmarks.filter_query.VectorisedSimd.executeFilterQuery":
  N = 2015
  mean =     40.831 ±(99.9%) 0.090 ms/op

  Histogram, ms/op:
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 
    [37.500, 40.000) = 50 
    [40.000, 42.500) = 1905 
    [42.500, 45.000) = 50 
    [45.000, 47.500) = 4 
    [47.500, 50.000) = 1 
    [50.000, 52.500) = 1 
    [52.500, 55.000) = 0 
    [55.000, 57.500) = 0 
    [57.500, 60.000) = 0 
    [60.000, 62.500) = 2 
    [62.500, 65.000) = 2 
    [65.000, 67.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     39.649 ms/op
     p(50.0000) =     40.567 ms/op
     p(90.0000) =     41.746 ms/op
     p(95.0000) =     42.140 ms/op
     p(99.0000) =     43.254 ms/op
     p(99.9000) =     62.580 ms/op
     p(99.9900) =     64.684 ms/op
     p(99.9990) =     64.684 ms/op
     p(99.9999) =     64.684 ms/op
    p(100.0000) =     64.684 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 91.67% complete, ETA 00:08:30
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

41.011 ±(99.9%) 5.247 ms/op
# Warmup Iteration   2: 40.511 ±(99.9%) 0.121 ms/op
# Warmup Iteration   3: 40.884 ±(99.9%) 0.269 ms/op
# Warmup Iteration   4: 40.995 ±(99.9%) 0.259 ms/op
# Warmup Iteration   5: 41.509 ±(99.9%) 0.214 ms/op
Iteration   1: 40.972 ±(99.9%) 0.201 ms/op
                 executeFilterQuery·p0.00:   39.846 ms/op
                 executeFilterQuery·p0.50:   41.091 ms/op
                 executeFilterQuery·p0.90:   41.681 ms/op
                 executeFilterQuery·p0.95:   41.878 ms/op
                 executeFilterQuery·p0.99:   42.402 ms/op
                 executeFilterQuery·p0.999:  42.402 ms/op
                 executeFilterQuery·p0.9999: 42.402 ms/op
                 executeFilterQuery·p1.00:   42.402 ms/op

Iteration   2: 40.367 ±(99.9%) 0.136 ms/op
                 executeFilterQuery·p0.00:   39.846 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.632 ms/op
                 executeFilterQuery·p0.95:   41.261 ms/op
                 executeFilterQuery·p0.99:   42.336 ms/op
                 executeFilterQuery·p0.999:  42.336 ms/op
                 executeFilterQuery·p0.9999: 42.336 ms/op
                 executeFilterQuery·p1.00:   42.336 ms/op

Iteration   3: 40.741 ±(99.9%) 0.215 ms/op
                 executeFilterQuery·p0.00:   40.042 ms/op
                 executeFilterQuery·p0.50:   40.567 ms/op
                 executeFilterQuery·p0.90:   41.746 ms/op
                 executeFilterQuery·p0.95:   42.074 ms/op
                 executeFilterQuery·p0.99:   42.533 ms/op
                 executeFilterQuery·p0.999:  42.533 ms/op
                 executeFilterQuery·p0.9999: 42.533 ms/op
                 executeFilterQuery·p1.00:   42.533 ms/op

Iteration   4: 40.829 ±(99.9%) 0.197 ms/op
                 executeFilterQuery·p0.00:   39.911 ms/op
                 executeFilterQuery·p0.50:   40.829 ms/op
                 executeFilterQuery·p0.90:   41.216 ms/op
                 executeFilterQuery·p0.95:   41.995 ms/op
                 executeFilterQuery·p0.99:   42.992 ms/op
                 executeFilterQuery·p0.999:  42.992 ms/op
                 executeFilterQuery·p0.9999: 42.992 ms/op
                 executeFilterQuery·p1.00:   42.992 ms/op

Iteration   5: 40.940 ±(99.9%) 0.052 ms/op
                 executeFilterQuery·p0.00:   40.698 ms/op
                 executeFilterQuery·p0.50:   40.960 ms/op
                 executeFilterQuery·p0.90:   41.091 ms/op
                 executeFilterQuery·p0.95:   41.153 ms/op
                 executeFilterQuery·p0.99:   41.353 ms/op
                 executeFilterQuery·p0.999:  41.353 ms/op
                 executeFilterQuery·p0.9999: 41.353 ms/op
                 executeFilterQuery·p1.00:   41.353 ms/op


# Run progress: 93.33% complete, ETA 00:06:48
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

41.203 ±(99.9%) 5.197 ms/op
# Warmup Iteration   2: 41.617 ±(99.9%) 0.681 ms/op
# Warmup Iteration   3: 41.047 ±(99.9%) 0.317 ms/op
# Warmup Iteration   4: 42.403 ±(99.9%) 1.719 ms/op
# Warmup Iteration   5: 40.446 ±(99.9%) 0.076 ms/op
Iteration   1: 41.525 ±(99.9%) 0.527 ms/op
                 executeFilterQuery·p0.00:   40.370 ms/op
                 executeFilterQuery·p0.50:   41.058 ms/op
                 executeFilterQuery·p0.90:   43.365 ms/op
                 executeFilterQuery·p0.95:   44.256 ms/op
                 executeFilterQuery·p0.99:   48.955 ms/op
                 executeFilterQuery·p0.999:  48.955 ms/op
                 executeFilterQuery·p0.9999: 48.955 ms/op
                 executeFilterQuery·p1.00:   48.955 ms/op

Iteration   2: 43.053 ±(99.9%) 1.121 ms/op
                 executeFilterQuery·p0.00:   40.763 ms/op
                 executeFilterQuery·p0.50:   42.435 ms/op
                 executeFilterQuery·p0.90:   45.652 ms/op
                 executeFilterQuery·p0.95:   47.156 ms/op
                 executeFilterQuery·p0.99:   62.849 ms/op
                 executeFilterQuery·p0.999:  62.849 ms/op
                 executeFilterQuery·p0.9999: 62.849 ms/op
                 executeFilterQuery·p1.00:   62.849 ms/op

Iteration   3: 42.424 ±(99.9%) 0.894 ms/op
                 executeFilterQuery·p0.00:   40.632 ms/op
                 executeFilterQuery·p0.50:   42.041 ms/op
                 executeFilterQuery·p0.90:   43.254 ms/op
                 executeFilterQuery·p0.95:   46.747 ms/op
                 executeFilterQuery·p0.99:   58.720 ms/op
                 executeFilterQuery·p0.999:  58.720 ms/op
                 executeFilterQuery·p0.9999: 58.720 ms/op
                 executeFilterQuery·p1.00:   58.720 ms/op

Iteration   4: 42.595 ±(99.9%) 1.072 ms/op
                 executeFilterQuery·p0.00:   40.436 ms/op
                 executeFilterQuery·p0.50:   41.845 ms/op
                 executeFilterQuery·p0.90:   44.296 ms/op
                 executeFilterQuery·p0.95:   50.345 ms/op
                 executeFilterQuery·p0.99:   57.016 ms/op
                 executeFilterQuery·p0.999:  57.016 ms/op
                 executeFilterQuery·p0.9999: 57.016 ms/op
                 executeFilterQuery·p1.00:   57.016 ms/op

Iteration   5: 42.199 ±(99.9%) 1.243 ms/op
                 executeFilterQuery·p0.00:   40.370 ms/op
                 executeFilterQuery·p0.50:   41.484 ms/op
                 executeFilterQuery·p0.90:   42.926 ms/op
                 executeFilterQuery·p0.95:   47.206 ms/op
                 executeFilterQuery·p0.99:   61.276 ms/op
                 executeFilterQuery·p0.999:  61.276 ms/op
                 executeFilterQuery·p0.9999: 61.276 ms/op
                 executeFilterQuery·p1.00:   61.276 ms/op


# Run progress: 95.00% complete, ETA 00:05:06
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.432 ±(99.9%) 6.269 ms/op
# Warmup Iteration   2: 42.831 ±(99.9%) 0.986 ms/op
# Warmup Iteration   3: 43.132 ±(99.9%) 1.503 ms/op
# Warmup Iteration   4: 42.658 ±(99.9%) 1.462 ms/op
# Warmup Iteration   5: 42.293 ±(99.9%) 0.884 ms/op
Iteration   1: 42.221 ±(99.9%) 0.792 ms/op
                 executeFilterQuery·p0.00:   40.174 ms/op
                 executeFilterQuery·p0.50:   41.746 ms/op
                 executeFilterQuery·p0.90:   43.332 ms/op
                 executeFilterQuery·p0.95:   44.597 ms/op
                 executeFilterQuery·p0.99:   52.625 ms/op
                 executeFilterQuery·p0.999:  52.625 ms/op
                 executeFilterQuery·p0.9999: 52.625 ms/op
                 executeFilterQuery·p1.00:   52.625 ms/op

Iteration   2: 42.850 ±(99.9%) 1.171 ms/op
                 executeFilterQuery·p0.00:   40.305 ms/op
                 executeFilterQuery·p0.50:   42.041 ms/op
                 executeFilterQuery·p0.90:   45.646 ms/op
                 executeFilterQuery·p0.95:   46.711 ms/op
                 executeFilterQuery·p0.99:   62.915 ms/op
                 executeFilterQuery·p0.999:  62.915 ms/op
                 executeFilterQuery·p0.9999: 62.915 ms/op
                 executeFilterQuery·p1.00:   62.915 ms/op

Iteration   3: 43.013 ±(99.9%) 1.741 ms/op
                 executeFilterQuery·p0.00:   40.501 ms/op
                 executeFilterQuery·p0.50:   41.812 ms/op
                 executeFilterQuery·p0.90:   46.282 ms/op
                 executeFilterQuery·p0.95:   49.493 ms/op
                 executeFilterQuery·p0.99:   71.172 ms/op
                 executeFilterQuery·p0.999:  71.172 ms/op
                 executeFilterQuery·p0.9999: 71.172 ms/op
                 executeFilterQuery·p1.00:   71.172 ms/op

Iteration   4: 43.567 ±(99.9%) 2.033 ms/op
                 executeFilterQuery·p0.00:   40.501 ms/op
                 executeFilterQuery·p0.50:   41.681 ms/op
                 executeFilterQuery·p0.90:   53.622 ms/op
                 executeFilterQuery·p0.95:   58.969 ms/op
                 executeFilterQuery·p0.99:   62.259 ms/op
                 executeFilterQuery·p0.999:  62.259 ms/op
                 executeFilterQuery·p0.9999: 62.259 ms/op
                 executeFilterQuery·p1.00:   62.259 ms/op

Iteration   5: 42.925 ±(99.9%) 2.046 ms/op
                 executeFilterQuery·p0.00:   39.911 ms/op
                 executeFilterQuery·p0.50:   41.091 ms/op
                 executeFilterQuery·p0.90:   47.160 ms/op
                 executeFilterQuery·p0.95:   59.179 ms/op
                 executeFilterQuery·p0.99:   64.618 ms/op
                 executeFilterQuery·p0.999:  64.618 ms/op
                 executeFilterQuery·p0.9999: 64.618 ms/op
                 executeFilterQuery·p1.00:   64.618 ms/op


# Run progress: 96.67% complete, ETA 00:03:24
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

43.808 ±(99.9%) 6.149 ms/op
# Warmup Iteration   2: 42.647 ±(99.9%) 1.422 ms/op
# Warmup Iteration   3: 41.571 ±(99.9%) 1.016 ms/op
# Warmup Iteration   4: 42.685 ±(99.9%) 1.919 ms/op
# Warmup Iteration   5: 42.573 ±(99.9%) 1.878 ms/op
Iteration   1: 40.765 ±(99.9%) 0.178 ms/op
                 executeFilterQuery·p0.00:   39.977 ms/op
                 executeFilterQuery·p0.50:   40.632 ms/op
                 executeFilterQuery·p0.90:   41.543 ms/op
                 executeFilterQuery·p0.95:   41.678 ms/op
                 executeFilterQuery·p0.99:   42.140 ms/op
                 executeFilterQuery·p0.999:  42.140 ms/op
                 executeFilterQuery·p0.9999: 42.140 ms/op
                 executeFilterQuery·p1.00:   42.140 ms/op

Iteration   2: 41.604 ±(99.9%) 0.984 ms/op
                 executeFilterQuery·p0.00:   40.239 ms/op
                 executeFilterQuery·p0.50:   41.288 ms/op
                 executeFilterQuery·p0.90:   42.284 ms/op
                 executeFilterQuery·p0.95:   43.529 ms/op
                 executeFilterQuery·p0.99:   62.783 ms/op
                 executeFilterQuery·p0.999:  62.783 ms/op
                 executeFilterQuery·p0.9999: 62.783 ms/op
                 executeFilterQuery·p1.00:   62.783 ms/op

Iteration   3: 40.317 ±(99.9%) 0.068 ms/op
                 executeFilterQuery·p0.00:   39.977 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.488 ms/op
                 executeFilterQuery·p0.95:   40.626 ms/op
                 executeFilterQuery·p0.99:   41.222 ms/op
                 executeFilterQuery·p0.999:  41.222 ms/op
                 executeFilterQuery·p0.9999: 41.222 ms/op
                 executeFilterQuery·p1.00:   41.222 ms/op

Iteration   4: 41.640 ±(99.9%) 1.385 ms/op
                 executeFilterQuery·p0.00:   39.453 ms/op
                 executeFilterQuery·p0.50:   40.567 ms/op
                 executeFilterQuery·p0.90:   42.815 ms/op
                 executeFilterQuery·p0.95:   44.325 ms/op
                 executeFilterQuery·p0.99:   62.390 ms/op
                 executeFilterQuery·p0.999:  62.390 ms/op
                 executeFilterQuery·p0.9999: 62.390 ms/op
                 executeFilterQuery·p1.00:   62.390 ms/op

Iteration   5: 43.466 ±(99.9%) 1.736 ms/op
                 executeFilterQuery·p0.00:   40.894 ms/op
                 executeFilterQuery·p0.50:   42.074 ms/op
                 executeFilterQuery·p0.90:   46.085 ms/op
                 executeFilterQuery·p0.95:   59.264 ms/op
                 executeFilterQuery·p0.99:   60.817 ms/op
                 executeFilterQuery·p0.999:  60.817 ms/op
                 executeFilterQuery·p0.9999: 60.817 ms/op
                 executeFilterQuery·p1.00:   60.817 ms/op


# Run progress: 98.33% complete, ETA 00:01:42
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

43.169 ±(99.9%) 6.648 ms/op
# Warmup Iteration   2: 41.034 ±(99.9%) 0.227 ms/op
# Warmup Iteration   3: 42.018 ±(99.9%) 0.771 ms/op
# Warmup Iteration   4: 40.704 ±(99.9%) 0.502 ms/op
# Warmup Iteration   5: 41.620 ±(99.9%) 0.944 ms/op
Iteration   1: 42.444 ±(99.9%) 0.781 ms/op
                 executeFilterQuery·p0.00:   41.091 ms/op
                 executeFilterQuery·p0.50:   42.205 ms/op
                 executeFilterQuery·p0.90:   42.952 ms/op
                 executeFilterQuery·p0.95:   43.752 ms/op
                 executeFilterQuery·p0.99:   58.327 ms/op
                 executeFilterQuery·p0.999:  58.327 ms/op
                 executeFilterQuery·p0.9999: 58.327 ms/op
                 executeFilterQuery·p1.00:   58.327 ms/op

Iteration   2: 41.766 ±(99.9%) 0.773 ms/op
                 executeFilterQuery·p0.00:   40.370 ms/op
                 executeFilterQuery·p0.50:   41.484 ms/op
                 executeFilterQuery·p0.90:   42.362 ms/op
                 executeFilterQuery·p0.95:   43.123 ms/op
                 executeFilterQuery·p0.99:   53.412 ms/op
                 executeFilterQuery·p0.999:  53.412 ms/op
                 executeFilterQuery·p0.9999: 53.412 ms/op
                 executeFilterQuery·p1.00:   53.412 ms/op

Iteration   3: 40.690 ±(99.9%) 0.223 ms/op
                 executeFilterQuery·p0.00:   40.042 ms/op
                 executeFilterQuery·p0.50:   40.501 ms/op
                 executeFilterQuery·p0.90:   41.465 ms/op
                 executeFilterQuery·p0.95:   41.674 ms/op
                 executeFilterQuery·p0.99:   43.975 ms/op
                 executeFilterQuery·p0.999:  43.975 ms/op
                 executeFilterQuery·p0.9999: 43.975 ms/op
                 executeFilterQuery·p1.00:   43.975 ms/op

Iteration   4: 41.300 ±(99.9%) 0.956 ms/op
                 executeFilterQuery·p0.00:   39.846 ms/op
                 executeFilterQuery·p0.50:   40.829 ms/op
                 executeFilterQuery·p0.90:   41.878 ms/op
                 executeFilterQuery·p0.95:   42.670 ms/op
                 executeFilterQuery·p0.99:   59.376 ms/op
                 executeFilterQuery·p0.999:  59.376 ms/op
                 executeFilterQuery·p0.9999: 59.376 ms/op
                 executeFilterQuery·p1.00:   59.376 ms/op

Iteration   5: 41.411 ±(99.9%) 0.265 ms/op
                 executeFilterQuery·p0.00:   40.370 ms/op
                 executeFilterQuery·p0.50:   41.222 ms/op
                 executeFilterQuery·p0.90:   42.402 ms/op
                 executeFilterQuery·p0.95:   42.605 ms/op
                 executeFilterQuery·p0.99:   43.319 ms/op
                 executeFilterQuery·p0.999:  43.319 ms/op
                 executeFilterQuery·p0.9999: 43.319 ms/op
                 executeFilterQuery·p1.00:   43.319 ms/op



Result "benchmarks.filter_query.VectorisedSimd.executeFilterQuery":
  N = 1936
  mean =     41.798 ±(99.9%) 0.206 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 17 
    [40.000, 45.000) = 1832 
    [45.000, 50.000) = 43 
    [50.000, 55.000) = 16 
    [55.000, 60.000) = 15 
    [60.000, 65.000) = 12 
    [65.000, 70.000) = 0 
    [70.000, 75.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     39.453 ms/op
     p(50.0000) =     41.157 ms/op
     p(90.0000) =     42.992 ms/op
     p(95.0000) =     44.433 ms/op
     p(99.0000) =     59.196 ms/op
     p(99.9000) =     65.031 ms/op
     p(99.9900) =     71.172 ms/op
     p(99.9990) =     71.172 ms/op
     p(99.9999) =     71.172 ms/op
    p(100.0000) =     71.172 ms/op


# Run complete. Total time: 01:42:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                    (tableFilePath)    Mode   Cnt    Score   Error  Units
NonVectorisedNonSimd.executeFilterQuery                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample  1883   44.071 ± 0.151  ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         41.157          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         43.516          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         45.744          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         46.727          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         55.092          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         59.061          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999  /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         60.162          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         60.162          ms/op
NonVectorisedNonSimd.executeFilterQuery                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample  1775   51.077 ± 0.107  ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         47.514          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         51.053          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         52.691          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         53.412          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         54.623          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         61.317          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999  /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         63.046          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         63.046          ms/op
NonVectorisedNonSimd.executeFilterQuery                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample  1870   47.289 ± 0.093  ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         46.006          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         46.793          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         48.955          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         49.283          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         50.959          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         56.519          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999  /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         58.917          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         58.917          ms/op
NonVectorisedSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample  1593   73.814 ± 0.131  ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         72.614          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         73.138          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         75.891          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         76.848          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         79.692          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         88.767          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         91.881          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         91.881          ms/op
NonVectorisedSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample  1567   73.794 ± 0.131  ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         72.483          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         73.269          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         75.891          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         76.808          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         79.120          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         92.515          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         98.173          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         98.173          ms/op
NonVectorisedSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample  1573   73.616 ± 0.122  ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         72.614          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         73.007          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         75.497          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         76.415          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         79.202          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         89.860          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         93.848          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         93.848          ms/op
VectorisedNonSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample  2282   25.624 ± 0.058  ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         24.314          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         25.297          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         26.640          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         27.099          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         27.886          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         32.919          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         34.931          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         34.931          ms/op
VectorisedNonSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample  1801   53.167 ± 0.257  ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         51.577          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         52.298          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         55.234          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         56.623          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         74.431          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         83.178          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         83.493          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         83.493          ms/op
VectorisedNonSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample  1419   90.146 ± 0.626  ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         86.508          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         88.343          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         91.488          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         98.435          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        132.278          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        140.677          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        141.558          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        141.558          ms/op
VectorisedSimd.executeFilterQuery                                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample  1949   42.420 ± 0.271  ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         39.780          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         41.615          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         43.647          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         46.170          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         62.423          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         72.896          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999        /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         78.250          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample         78.250          ms/op
VectorisedSimd.executeFilterQuery                                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample  2015   40.831 ± 0.090  ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         39.649          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         40.567          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         41.746          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         42.140          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         43.254          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         62.580          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999        /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         64.684          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample         64.684          ms/op
VectorisedSimd.executeFilterQuery                                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample  1936   41.798 ± 0.206  ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         39.453          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         41.157          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         42.992          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         44.433          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         59.196          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         65.031          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999        /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         71.172          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample         71.172          ms/op

Benchmark result is saved to jmh-result.csv

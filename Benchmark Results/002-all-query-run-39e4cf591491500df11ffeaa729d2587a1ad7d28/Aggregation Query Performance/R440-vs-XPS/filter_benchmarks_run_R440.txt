# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 0.00% complete, ETA 01:40:00
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.841 ±(99.9%) 4.941 ms/op
# Warmup Iteration   2: 46.241 ±(99.9%) 0.084 ms/op
# Warmup Iteration   3: 46.229 ±(99.9%) 0.063 ms/op
# Warmup Iteration   4: 46.235 ±(99.9%) 0.067 ms/op
# Warmup Iteration   5: 46.227 ±(99.9%) 0.074 ms/op
Iteration   1: 46.185 ±(99.9%) 0.059 ms/op
                 executeFilterQuery·p0.00:   45.875 ms/op
                 executeFilterQuery·p0.50:   46.137 ms/op
                 executeFilterQuery·p0.90:   46.399 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   46.465 ms/op
                 executeFilterQuery·p0.999:  46.465 ms/op
                 executeFilterQuery·p0.9999: 46.465 ms/op
                 executeFilterQuery·p1.00:   46.465 ms/op

Iteration   2: 46.218 ±(99.9%) 0.052 ms/op
                 executeFilterQuery·p0.00:   46.006 ms/op
                 executeFilterQuery·p0.50:   46.203 ms/op
                 executeFilterQuery·p0.90:   46.399 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   46.596 ms/op
                 executeFilterQuery·p0.999:  46.596 ms/op
                 executeFilterQuery·p0.9999: 46.596 ms/op
                 executeFilterQuery·p1.00:   46.596 ms/op

Iteration   3: 46.245 ±(99.9%) 0.066 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   46.203 ms/op
                 executeFilterQuery·p0.90:   46.465 ms/op
                 executeFilterQuery·p0.95:   46.570 ms/op
                 executeFilterQuery·p0.99:   46.662 ms/op
                 executeFilterQuery·p0.999:  46.662 ms/op
                 executeFilterQuery·p0.9999: 46.662 ms/op
                 executeFilterQuery·p1.00:   46.662 ms/op

Iteration   4: 46.237 ±(99.9%) 0.060 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   46.203 ms/op
                 executeFilterQuery·p0.90:   46.413 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   46.662 ms/op
                 executeFilterQuery·p0.999:  46.662 ms/op
                 executeFilterQuery·p0.9999: 46.662 ms/op
                 executeFilterQuery·p1.00:   46.662 ms/op

Iteration   5: 46.194 ±(99.9%) 0.068 ms/op
                 executeFilterQuery·p0.00:   45.875 ms/op
                 executeFilterQuery·p0.50:   46.203 ms/op
                 executeFilterQuery·p0.90:   46.399 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   46.793 ms/op
                 executeFilterQuery·p0.999:  46.793 ms/op
                 executeFilterQuery·p0.9999: 46.793 ms/op
                 executeFilterQuery·p1.00:   46.793 ms/op


# Run progress: 1.67% complete, ETA 01:40:57
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

49.008 ±(99.9%) 4.116 ms/op
# Warmup Iteration   2: 46.870 ±(99.9%) 0.054 ms/op
# Warmup Iteration   3: 46.611 ±(99.9%) 0.258 ms/op
# Warmup Iteration   4: 46.209 ±(99.9%) 0.171 ms/op
# Warmup Iteration   5: 45.852 ±(99.9%) 0.150 ms/op
Iteration   1: 45.948 ±(99.9%) 0.173 ms/op
                 executeFilterQuery·p0.00:   45.482 ms/op
                 executeFilterQuery·p0.50:   45.744 ms/op
                 executeFilterQuery·p0.90:   46.596 ms/op
                 executeFilterQuery·p0.95:   46.727 ms/op
                 executeFilterQuery·p0.99:   46.858 ms/op
                 executeFilterQuery·p0.999:  46.858 ms/op
                 executeFilterQuery·p0.9999: 46.858 ms/op
                 executeFilterQuery·p1.00:   46.858 ms/op

Iteration   2: 46.687 ±(99.9%) 0.070 ms/op
                 executeFilterQuery·p0.00:   46.072 ms/op
                 executeFilterQuery·p0.50:   46.727 ms/op
                 executeFilterQuery·p0.90:   46.858 ms/op
                 executeFilterQuery·p0.95:   46.966 ms/op
                 executeFilterQuery·p0.99:   47.055 ms/op
                 executeFilterQuery·p0.999:  47.055 ms/op
                 executeFilterQuery·p0.9999: 47.055 ms/op
                 executeFilterQuery·p1.00:   47.055 ms/op

Iteration   3: 46.653 ±(99.9%) 0.058 ms/op
                 executeFilterQuery·p0.00:   46.334 ms/op
                 executeFilterQuery·p0.50:   46.662 ms/op
                 executeFilterQuery·p0.90:   46.793 ms/op
                 executeFilterQuery·p0.95:   46.901 ms/op
                 executeFilterQuery·p0.99:   46.989 ms/op
                 executeFilterQuery·p0.999:  46.989 ms/op
                 executeFilterQuery·p0.9999: 46.989 ms/op
                 executeFilterQuery·p1.00:   46.989 ms/op

Iteration   4: 46.665 ±(99.9%) 0.063 ms/op
                 executeFilterQuery·p0.00:   46.399 ms/op
                 executeFilterQuery·p0.50:   46.662 ms/op
                 executeFilterQuery·p0.90:   46.924 ms/op
                 executeFilterQuery·p0.95:   46.966 ms/op
                 executeFilterQuery·p0.99:   47.055 ms/op
                 executeFilterQuery·p0.999:  47.055 ms/op
                 executeFilterQuery·p0.9999: 47.055 ms/op
                 executeFilterQuery·p1.00:   47.055 ms/op

Iteration   5: 46.694 ±(99.9%) 0.058 ms/op
                 executeFilterQuery·p0.00:   46.399 ms/op
                 executeFilterQuery·p0.50:   46.662 ms/op
                 executeFilterQuery·p0.90:   46.858 ms/op
                 executeFilterQuery·p0.95:   46.966 ms/op
                 executeFilterQuery·p0.99:   47.055 ms/op
                 executeFilterQuery·p0.999:  47.055 ms/op
                 executeFilterQuery·p0.9999: 47.055 ms/op
                 executeFilterQuery·p1.00:   47.055 ms/op


# Run progress: 3.33% complete, ETA 01:39:09
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.118 ±(99.9%) 3.656 ms/op
# Warmup Iteration   2: 46.211 ±(99.9%) 0.116 ms/op
# Warmup Iteration   3: 46.147 ±(99.9%) 0.107 ms/op
# Warmup Iteration   4: 46.118 ±(99.9%) 0.099 ms/op
# Warmup Iteration   5: 46.184 ±(99.9%) 0.066 ms/op
Iteration   1: 46.221 ±(99.9%) 0.054 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   46.203 ms/op
                 executeFilterQuery·p0.90:   46.413 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   46.531 ms/op
                 executeFilterQuery·p0.999:  46.531 ms/op
                 executeFilterQuery·p0.9999: 46.531 ms/op
                 executeFilterQuery·p1.00:   46.531 ms/op

Iteration   2: 46.217 ±(99.9%) 0.065 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   46.203 ms/op
                 executeFilterQuery·p0.90:   46.399 ms/op
                 executeFilterQuery·p0.95:   46.504 ms/op
                 executeFilterQuery·p0.99:   46.662 ms/op
                 executeFilterQuery·p0.999:  46.662 ms/op
                 executeFilterQuery·p0.9999: 46.662 ms/op
                 executeFilterQuery·p1.00:   46.662 ms/op

Iteration   3: 46.188 ±(99.9%) 0.055 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   46.203 ms/op
                 executeFilterQuery·p0.90:   46.399 ms/op
                 executeFilterQuery·p0.95:   46.399 ms/op
                 executeFilterQuery·p0.99:   46.465 ms/op
                 executeFilterQuery·p0.999:  46.465 ms/op
                 executeFilterQuery·p0.9999: 46.465 ms/op
                 executeFilterQuery·p1.00:   46.465 ms/op

Iteration   4: 46.178 ±(99.9%) 0.054 ms/op
                 executeFilterQuery·p0.00:   45.875 ms/op
                 executeFilterQuery·p0.50:   46.137 ms/op
                 executeFilterQuery·p0.90:   46.347 ms/op
                 executeFilterQuery·p0.95:   46.399 ms/op
                 executeFilterQuery·p0.99:   46.465 ms/op
                 executeFilterQuery·p0.999:  46.465 ms/op
                 executeFilterQuery·p0.9999: 46.465 ms/op
                 executeFilterQuery·p1.00:   46.465 ms/op

Iteration   5: 46.220 ±(99.9%) 0.060 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   46.203 ms/op
                 executeFilterQuery·p0.90:   46.399 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   46.662 ms/op
                 executeFilterQuery·p0.999:  46.662 ms/op
                 executeFilterQuery·p0.9999: 46.662 ms/op
                 executeFilterQuery·p1.00:   46.662 ms/op


# Run progress: 5.00% complete, ETA 01:37:29
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.785 ±(99.9%) 4.113 ms/op
# Warmup Iteration   2: 46.610 ±(99.9%) 0.061 ms/op
# Warmup Iteration   3: 46.644 ±(99.9%) 0.073 ms/op
# Warmup Iteration   4: 46.595 ±(99.9%) 0.087 ms/op
# Warmup Iteration   5: 46.625 ±(99.9%) 0.068 ms/op
Iteration   1: 46.567 ±(99.9%) 0.077 ms/op
                 executeFilterQuery·p0.00:   45.744 ms/op
                 executeFilterQuery·p0.50:   46.563 ms/op
                 executeFilterQuery·p0.90:   46.727 ms/op
                 executeFilterQuery·p0.95:   46.793 ms/op
                 executeFilterQuery·p0.99:   46.989 ms/op
                 executeFilterQuery·p0.999:  46.989 ms/op
                 executeFilterQuery·p0.9999: 46.989 ms/op
                 executeFilterQuery·p1.00:   46.989 ms/op

Iteration   2: 46.588 ±(99.9%) 0.081 ms/op
                 executeFilterQuery·p0.00:   45.875 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.812 ms/op
                 executeFilterQuery·p0.95:   46.901 ms/op
                 executeFilterQuery·p0.99:   47.120 ms/op
                 executeFilterQuery·p0.999:  47.120 ms/op
                 executeFilterQuery·p0.9999: 47.120 ms/op
                 executeFilterQuery·p1.00:   47.120 ms/op

Iteration   3: 46.577 ±(99.9%) 0.061 ms/op
                 executeFilterQuery·p0.00:   46.334 ms/op
                 executeFilterQuery·p0.50:   46.531 ms/op
                 executeFilterQuery·p0.90:   46.812 ms/op
                 executeFilterQuery·p0.95:   46.858 ms/op
                 executeFilterQuery·p0.99:   46.924 ms/op
                 executeFilterQuery·p0.999:  46.924 ms/op
                 executeFilterQuery·p0.9999: 46.924 ms/op
                 executeFilterQuery·p1.00:   46.924 ms/op

Iteration   4: 46.578 ±(99.9%) 0.058 ms/op
                 executeFilterQuery·p0.00:   46.268 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.727 ms/op
                 executeFilterQuery·p0.95:   46.793 ms/op
                 executeFilterQuery·p0.99:   46.924 ms/op
                 executeFilterQuery·p0.999:  46.924 ms/op
                 executeFilterQuery·p0.9999: 46.924 ms/op
                 executeFilterQuery·p1.00:   46.924 ms/op

Iteration   5: 46.618 ±(99.9%) 0.070 ms/op
                 executeFilterQuery·p0.00:   46.268 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.858 ms/op
                 executeFilterQuery·p0.95:   46.924 ms/op
                 executeFilterQuery·p0.99:   47.055 ms/op
                 executeFilterQuery·p0.999:  47.055 ms/op
                 executeFilterQuery·p0.9999: 47.055 ms/op
                 executeFilterQuery·p1.00:   47.055 ms/op


# Run progress: 6.67% complete, ETA 01:35:41
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.544 ±(99.9%) 4.310 ms/op
# Warmup Iteration   2: 46.275 ±(99.9%) 0.077 ms/op
# Warmup Iteration   3: 46.313 ±(99.9%) 0.067 ms/op
# Warmup Iteration   4: 46.318 ±(99.9%) 0.071 ms/op
# Warmup Iteration   5: 46.298 ±(99.9%) 0.060 ms/op
Iteration   1: 46.288 ±(99.9%) 0.050 ms/op
                 executeFilterQuery·p0.00:   46.072 ms/op
                 executeFilterQuery·p0.50:   46.268 ms/op
                 executeFilterQuery·p0.90:   46.465 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   46.596 ms/op
                 executeFilterQuery·p0.999:  46.596 ms/op
                 executeFilterQuery·p0.9999: 46.596 ms/op
                 executeFilterQuery·p1.00:   46.596 ms/op

Iteration   2: 46.275 ±(99.9%) 0.054 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   46.268 ms/op
                 executeFilterQuery·p0.90:   46.465 ms/op
                 executeFilterQuery·p0.95:   46.570 ms/op
                 executeFilterQuery·p0.99:   46.596 ms/op
                 executeFilterQuery·p0.999:  46.596 ms/op
                 executeFilterQuery·p0.9999: 46.596 ms/op
                 executeFilterQuery·p1.00:   46.596 ms/op

Iteration   3: 46.266 ±(99.9%) 0.054 ms/op
                 executeFilterQuery·p0.00:   46.006 ms/op
                 executeFilterQuery·p0.50:   46.268 ms/op
                 executeFilterQuery·p0.90:   46.413 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   46.662 ms/op
                 executeFilterQuery·p0.999:  46.662 ms/op
                 executeFilterQuery·p0.9999: 46.662 ms/op
                 executeFilterQuery·p1.00:   46.662 ms/op

Iteration   4: 46.257 ±(99.9%) 0.065 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   46.268 ms/op
                 executeFilterQuery·p0.90:   46.465 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   46.793 ms/op
                 executeFilterQuery·p0.999:  46.793 ms/op
                 executeFilterQuery·p0.9999: 46.793 ms/op
                 executeFilterQuery·p1.00:   46.793 ms/op

Iteration   5: 46.237 ±(99.9%) 0.059 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   46.268 ms/op
                 executeFilterQuery·p0.90:   46.413 ms/op
                 executeFilterQuery·p0.95:   46.465 ms/op
                 executeFilterQuery·p0.99:   46.662 ms/op
                 executeFilterQuery·p0.999:  46.662 ms/op
                 executeFilterQuery·p0.9999: 46.662 ms/op
                 executeFilterQuery·p1.00:   46.662 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1666
  mean =     46.359 ±(99.9%) 0.021 ms/op

  Histogram, ms/op:
    [45.000, 45.250) = 0 
    [45.250, 45.500) = 1 
    [45.500, 45.750) = 40 
    [45.750, 46.000) = 35 
    [46.000, 46.250) = 504 
    [46.250, 46.500) = 578 
    [46.500, 46.750) = 394 
    [46.750, 47.000) = 106 
    [47.000, 47.250) = 8 
    [47.250, 47.500) = 0 
    [47.500, 47.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     45.482 ms/op
     p(50.0000) =     46.334 ms/op
     p(90.0000) =     46.727 ms/op
     p(95.0000) =     46.793 ms/op
     p(99.0000) =     46.924 ms/op
     p(99.9000) =     47.077 ms/op
     p(99.9900) =     47.120 ms/op
     p(99.9990) =     47.120 ms/op
     p(99.9999) =     47.120 ms/op
    p(100.0000) =     47.120 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 8.33% complete, ETA 01:34:02
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

55.102 ±(99.9%) 5.837 ms/op
# Warmup Iteration   2: 51.991 ±(99.9%) 0.087 ms/op
# Warmup Iteration   3: 52.027 ±(99.9%) 0.105 ms/op
# Warmup Iteration   4: 51.974 ±(99.9%) 0.093 ms/op
# Warmup Iteration   5: 52.047 ±(99.9%) 0.109 ms/op
Iteration   1: 51.966 ±(99.9%) 0.078 ms/op
                 executeFilterQuery·p0.00:   51.642 ms/op
                 executeFilterQuery·p0.50:   51.970 ms/op
                 executeFilterQuery·p0.90:   52.232 ms/op
                 executeFilterQuery·p0.95:   52.298 ms/op
                 executeFilterQuery·p0.99:   52.363 ms/op
                 executeFilterQuery·p0.999:  52.363 ms/op
                 executeFilterQuery·p0.9999: 52.363 ms/op
                 executeFilterQuery·p1.00:   52.363 ms/op

Iteration   2: 52.009 ±(99.9%) 0.077 ms/op
                 executeFilterQuery·p0.00:   51.708 ms/op
                 executeFilterQuery·p0.50:   52.036 ms/op
                 executeFilterQuery·p0.90:   52.232 ms/op
                 executeFilterQuery·p0.95:   52.298 ms/op
                 executeFilterQuery·p0.99:   52.560 ms/op
                 executeFilterQuery·p0.999:  52.560 ms/op
                 executeFilterQuery·p0.9999: 52.560 ms/op
                 executeFilterQuery·p1.00:   52.560 ms/op

Iteration   3: 52.014 ±(99.9%) 0.073 ms/op
                 executeFilterQuery·p0.00:   51.642 ms/op
                 executeFilterQuery·p0.50:   52.036 ms/op
                 executeFilterQuery·p0.90:   52.258 ms/op
                 executeFilterQuery·p0.95:   52.298 ms/op
                 executeFilterQuery·p0.99:   52.494 ms/op
                 executeFilterQuery·p0.999:  52.494 ms/op
                 executeFilterQuery·p0.9999: 52.494 ms/op
                 executeFilterQuery·p1.00:   52.494 ms/op

Iteration   4: 52.070 ±(99.9%) 0.077 ms/op
                 executeFilterQuery·p0.00:   51.773 ms/op
                 executeFilterQuery·p0.50:   52.036 ms/op
                 executeFilterQuery·p0.90:   52.298 ms/op
                 executeFilterQuery·p0.95:   52.429 ms/op
                 executeFilterQuery·p0.99:   52.691 ms/op
                 executeFilterQuery·p0.999:  52.691 ms/op
                 executeFilterQuery·p0.9999: 52.691 ms/op
                 executeFilterQuery·p1.00:   52.691 ms/op

Iteration   5: 52.113 ±(99.9%) 0.084 ms/op
                 executeFilterQuery·p0.00:   51.773 ms/op
                 executeFilterQuery·p0.50:   52.101 ms/op
                 executeFilterQuery·p0.90:   52.363 ms/op
                 executeFilterQuery·p0.95:   52.478 ms/op
                 executeFilterQuery·p0.99:   52.756 ms/op
                 executeFilterQuery·p0.999:  52.756 ms/op
                 executeFilterQuery·p0.9999: 52.756 ms/op
                 executeFilterQuery·p1.00:   52.756 ms/op


# Run progress: 10.00% complete, ETA 01:32:21
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

53.394 ±(99.9%) 4.471 ms/op
# Warmup Iteration   2: 51.204 ±(99.9%) 0.065 ms/op
# Warmup Iteration   3: 51.121 ±(99.9%) 0.095 ms/op
# Warmup Iteration   4: 51.248 ±(99.9%) 0.088 ms/op
# Warmup Iteration   5: 51.158 ±(99.9%) 0.065 ms/op
Iteration   1: 51.160 ±(99.9%) 0.056 ms/op
                 executeFilterQuery·p0.00:   50.921 ms/op
                 executeFilterQuery·p0.50:   51.118 ms/op
                 executeFilterQuery·p0.90:   51.380 ms/op
                 executeFilterQuery·p0.95:   51.380 ms/op
                 executeFilterQuery·p0.99:   51.380 ms/op
                 executeFilterQuery·p0.999:  51.380 ms/op
                 executeFilterQuery·p0.9999: 51.380 ms/op
                 executeFilterQuery·p1.00:   51.380 ms/op

Iteration   2: 51.146 ±(99.9%) 0.064 ms/op
                 executeFilterQuery·p0.00:   50.856 ms/op
                 executeFilterQuery·p0.50:   51.118 ms/op
                 executeFilterQuery·p0.90:   51.341 ms/op
                 executeFilterQuery·p0.95:   51.446 ms/op
                 executeFilterQuery·p0.99:   51.708 ms/op
                 executeFilterQuery·p0.999:  51.708 ms/op
                 executeFilterQuery·p0.9999: 51.708 ms/op
                 executeFilterQuery·p1.00:   51.708 ms/op

Iteration   3: 51.236 ±(99.9%) 0.072 ms/op
                 executeFilterQuery·p0.00:   50.921 ms/op
                 executeFilterQuery·p0.50:   51.249 ms/op
                 executeFilterQuery·p0.90:   51.511 ms/op
                 executeFilterQuery·p0.95:   51.557 ms/op
                 executeFilterQuery·p0.99:   51.642 ms/op
                 executeFilterQuery·p0.999:  51.642 ms/op
                 executeFilterQuery·p0.9999: 51.642 ms/op
                 executeFilterQuery·p1.00:   51.642 ms/op

Iteration   4: 51.115 ±(99.9%) 0.059 ms/op
                 executeFilterQuery·p0.00:   50.921 ms/op
                 executeFilterQuery·p0.50:   51.118 ms/op
                 executeFilterQuery·p0.90:   51.275 ms/op
                 executeFilterQuery·p0.95:   51.380 ms/op
                 executeFilterQuery·p0.99:   51.577 ms/op
                 executeFilterQuery·p0.999:  51.577 ms/op
                 executeFilterQuery·p0.9999: 51.577 ms/op
                 executeFilterQuery·p1.00:   51.577 ms/op

Iteration   5: 51.190 ±(99.9%) 0.056 ms/op
                 executeFilterQuery·p0.00:   50.856 ms/op
                 executeFilterQuery·p0.50:   51.184 ms/op
                 executeFilterQuery·p0.90:   51.315 ms/op
                 executeFilterQuery·p0.95:   51.380 ms/op
                 executeFilterQuery·p0.99:   51.511 ms/op
                 executeFilterQuery·p0.999:  51.511 ms/op
                 executeFilterQuery·p0.9999: 51.511 ms/op
                 executeFilterQuery·p1.00:   51.511 ms/op


# Run progress: 11.67% complete, ETA 01:30:39
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

55.378 ±(99.9%) 5.392 ms/op
# Warmup Iteration   2: 52.579 ±(99.9%) 0.114 ms/op
# Warmup Iteration   3: 52.606 ±(99.9%) 0.076 ms/op
# Warmup Iteration   4: 52.600 ±(99.9%) 0.079 ms/op
# Warmup Iteration   5: 52.623 ±(99.9%) 0.095 ms/op
Iteration   1: 52.574 ±(99.9%) 0.078 ms/op
                 executeFilterQuery·p0.00:   52.232 ms/op
                 executeFilterQuery·p0.50:   52.560 ms/op
                 executeFilterQuery·p0.90:   52.822 ms/op
                 executeFilterQuery·p0.95:   52.937 ms/op
                 executeFilterQuery·p0.99:   52.953 ms/op
                 executeFilterQuery·p0.999:  52.953 ms/op
                 executeFilterQuery·p0.9999: 52.953 ms/op
                 executeFilterQuery·p1.00:   52.953 ms/op

Iteration   2: 52.596 ±(99.9%) 0.104 ms/op
                 executeFilterQuery·p0.00:   51.773 ms/op
                 executeFilterQuery·p0.50:   52.560 ms/op
                 executeFilterQuery·p0.90:   52.920 ms/op
                 executeFilterQuery·p0.95:   53.002 ms/op
                 executeFilterQuery·p0.99:   53.150 ms/op
                 executeFilterQuery·p0.999:  53.150 ms/op
                 executeFilterQuery·p0.9999: 53.150 ms/op
                 executeFilterQuery·p1.00:   53.150 ms/op

Iteration   3: 52.590 ±(99.9%) 0.087 ms/op
                 executeFilterQuery·p0.00:   52.167 ms/op
                 executeFilterQuery·p0.50:   52.560 ms/op
                 executeFilterQuery·p0.90:   52.888 ms/op
                 executeFilterQuery·p0.95:   52.953 ms/op
                 executeFilterQuery·p0.99:   53.019 ms/op
                 executeFilterQuery·p0.999:  53.019 ms/op
                 executeFilterQuery·p0.9999: 53.019 ms/op
                 executeFilterQuery·p1.00:   53.019 ms/op

Iteration   4: 52.636 ±(99.9%) 0.081 ms/op
                 executeFilterQuery·p0.00:   52.298 ms/op
                 executeFilterQuery·p0.50:   52.625 ms/op
                 executeFilterQuery·p0.90:   52.953 ms/op
                 executeFilterQuery·p0.95:   52.953 ms/op
                 executeFilterQuery·p0.99:   53.084 ms/op
                 executeFilterQuery·p0.999:  53.084 ms/op
                 executeFilterQuery·p0.9999: 53.084 ms/op
                 executeFilterQuery·p1.00:   53.084 ms/op

Iteration   5: 52.591 ±(99.9%) 0.076 ms/op
                 executeFilterQuery·p0.00:   52.298 ms/op
                 executeFilterQuery·p0.50:   52.560 ms/op
                 executeFilterQuery·p0.90:   52.855 ms/op
                 executeFilterQuery·p0.95:   52.937 ms/op
                 executeFilterQuery·p0.99:   53.019 ms/op
                 executeFilterQuery·p0.999:  53.019 ms/op
                 executeFilterQuery·p0.9999: 53.019 ms/op
                 executeFilterQuery·p1.00:   53.019 ms/op


# Run progress: 13.33% complete, ETA 01:28:55
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

55.648 ±(99.9%) 5.191 ms/op
# Warmup Iteration   2: 52.988 ±(99.9%) 0.103 ms/op
# Warmup Iteration   3: 52.921 ±(99.9%) 0.103 ms/op
# Warmup Iteration   4: 52.974 ±(99.9%) 0.122 ms/op
# Warmup Iteration   5: 52.898 ±(99.9%) 0.087 ms/op
Iteration   1: 52.855 ±(99.9%) 0.071 ms/op
                 executeFilterQuery·p0.00:   52.560 ms/op
                 executeFilterQuery·p0.50:   52.822 ms/op
                 executeFilterQuery·p0.90:   53.084 ms/op
                 executeFilterQuery·p0.95:   53.150 ms/op
                 executeFilterQuery·p0.99:   53.215 ms/op
                 executeFilterQuery·p0.999:  53.215 ms/op
                 executeFilterQuery·p0.9999: 53.215 ms/op
                 executeFilterQuery·p1.00:   53.215 ms/op

Iteration   2: 52.884 ±(99.9%) 0.110 ms/op
                 executeFilterQuery·p0.00:   52.429 ms/op
                 executeFilterQuery·p0.50:   52.888 ms/op
                 executeFilterQuery·p0.90:   53.182 ms/op
                 executeFilterQuery·p0.95:   53.445 ms/op
                 executeFilterQuery·p0.99:   53.674 ms/op
                 executeFilterQuery·p0.999:  53.674 ms/op
                 executeFilterQuery·p0.9999: 53.674 ms/op
                 executeFilterQuery·p1.00:   53.674 ms/op

Iteration   3: 52.912 ±(99.9%) 0.081 ms/op
                 executeFilterQuery·p0.00:   52.494 ms/op
                 executeFilterQuery·p0.50:   52.888 ms/op
                 executeFilterQuery·p0.90:   53.150 ms/op
                 executeFilterQuery·p0.95:   53.264 ms/op
                 executeFilterQuery·p0.99:   53.346 ms/op
                 executeFilterQuery·p0.999:  53.346 ms/op
                 executeFilterQuery·p0.9999: 53.346 ms/op
                 executeFilterQuery·p1.00:   53.346 ms/op

Iteration   4: 52.957 ±(99.9%) 0.088 ms/op
                 executeFilterQuery·p0.00:   52.560 ms/op
                 executeFilterQuery·p0.50:   52.953 ms/op
                 executeFilterQuery·p0.90:   53.215 ms/op
                 executeFilterQuery·p0.95:   53.330 ms/op
                 executeFilterQuery·p0.99:   53.477 ms/op
                 executeFilterQuery·p0.999:  53.477 ms/op
                 executeFilterQuery·p0.9999: 53.477 ms/op
                 executeFilterQuery·p1.00:   53.477 ms/op

Iteration   5: 52.887 ±(99.9%) 0.069 ms/op
                 executeFilterQuery·p0.00:   52.625 ms/op
                 executeFilterQuery·p0.50:   52.888 ms/op
                 executeFilterQuery·p0.90:   53.117 ms/op
                 executeFilterQuery·p0.95:   53.215 ms/op
                 executeFilterQuery·p0.99:   53.281 ms/op
                 executeFilterQuery·p0.999:  53.281 ms/op
                 executeFilterQuery·p0.9999: 53.281 ms/op
                 executeFilterQuery·p1.00:   53.281 ms/op


# Run progress: 15.00% complete, ETA 01:27:12
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

55.180 ±(99.9%) 5.760 ms/op
# Warmup Iteration   2: 52.104 ±(99.9%) 0.104 ms/op
# Warmup Iteration   3: 52.050 ±(99.9%) 0.124 ms/op
# Warmup Iteration   4: 52.085 ±(99.9%) 0.108 ms/op
# Warmup Iteration   5: 52.174 ±(99.9%) 0.078 ms/op
Iteration   1: 52.109 ±(99.9%) 0.079 ms/op
                 executeFilterQuery·p0.00:   51.839 ms/op
                 executeFilterQuery·p0.50:   52.101 ms/op
                 executeFilterQuery·p0.90:   52.363 ms/op
                 executeFilterQuery·p0.95:   52.363 ms/op
                 executeFilterQuery·p0.99:   52.888 ms/op
                 executeFilterQuery·p0.999:  52.888 ms/op
                 executeFilterQuery·p0.9999: 52.888 ms/op
                 executeFilterQuery·p1.00:   52.888 ms/op

Iteration   2: 52.090 ±(99.9%) 0.154 ms/op
                 executeFilterQuery·p0.00:   51.184 ms/op
                 executeFilterQuery·p0.50:   52.101 ms/op
                 executeFilterQuery·p0.90:   52.363 ms/op
                 executeFilterQuery·p0.95:   52.429 ms/op
                 executeFilterQuery·p0.99:   54.198 ms/op
                 executeFilterQuery·p0.999:  54.198 ms/op
                 executeFilterQuery·p0.9999: 54.198 ms/op
                 executeFilterQuery·p1.00:   54.198 ms/op

Iteration   3: 52.085 ±(99.9%) 0.068 ms/op
                 executeFilterQuery·p0.00:   51.773 ms/op
                 executeFilterQuery·p0.50:   52.036 ms/op
                 executeFilterQuery·p0.90:   52.298 ms/op
                 executeFilterQuery·p0.95:   52.363 ms/op
                 executeFilterQuery·p0.99:   52.560 ms/op
                 executeFilterQuery·p0.999:  52.560 ms/op
                 executeFilterQuery·p0.9999: 52.560 ms/op
                 executeFilterQuery·p1.00:   52.560 ms/op

Iteration   4: 52.096 ±(99.9%) 0.081 ms/op
                 executeFilterQuery·p0.00:   51.708 ms/op
                 executeFilterQuery·p0.50:   52.101 ms/op
                 executeFilterQuery·p0.90:   52.330 ms/op
                 executeFilterQuery·p0.95:   52.478 ms/op
                 executeFilterQuery·p0.99:   52.625 ms/op
                 executeFilterQuery·p0.999:  52.625 ms/op
                 executeFilterQuery·p0.9999: 52.625 ms/op
                 executeFilterQuery·p1.00:   52.625 ms/op

Iteration   5: 52.099 ±(99.9%) 0.064 ms/op
                 executeFilterQuery·p0.00:   51.708 ms/op
                 executeFilterQuery·p0.50:   52.101 ms/op
                 executeFilterQuery·p0.90:   52.265 ms/op
                 executeFilterQuery·p0.95:   52.363 ms/op
                 executeFilterQuery·p0.99:   52.560 ms/op
                 executeFilterQuery·p0.999:  52.560 ms/op
                 executeFilterQuery·p0.9999: 52.560 ms/op
                 executeFilterQuery·p1.00:   52.560 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1608
  mean =     52.156 ±(99.9%) 0.051 ms/op

  Histogram, ms/op:
    [50.000, 50.500) = 0 
    [50.500, 51.000) = 51 
    [51.000, 51.500) = 265 
    [51.500, 52.000) = 257 
    [52.000, 52.500) = 513 
    [52.500, 53.000) = 412 
    [53.000, 53.500) = 107 
    [53.500, 54.000) = 2 
    [54.000, 54.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     50.856 ms/op
     p(50.0000) =     52.167 ms/op
     p(90.0000) =     52.953 ms/op
     p(95.0000) =     53.019 ms/op
     p(99.0000) =     53.215 ms/op
     p(99.9000) =     53.879 ms/op
     p(99.9900) =     54.198 ms/op
     p(99.9990) =     54.198 ms/op
     p(99.9999) =     54.198 ms/op
    p(100.0000) =     54.198 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 16.67% complete, ETA 01:25:30
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

49.948 ±(99.9%) 6.255 ms/op
# Warmup Iteration   2: 46.647 ±(99.9%) 0.049 ms/op
# Warmup Iteration   3: 46.646 ±(99.9%) 0.070 ms/op
# Warmup Iteration   4: 46.735 ±(99.9%) 0.524 ms/op
# Warmup Iteration   5: 46.864 ±(99.9%) 0.624 ms/op
Iteration   1: 46.623 ±(99.9%) 0.040 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.727 ms/op
                 executeFilterQuery·p0.95:   46.793 ms/op
                 executeFilterQuery·p0.99:   46.989 ms/op
                 executeFilterQuery·p0.999:  46.989 ms/op
                 executeFilterQuery·p0.9999: 46.989 ms/op
                 executeFilterQuery·p1.00:   46.989 ms/op

Iteration   2: 46.631 ±(99.9%) 0.088 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.727 ms/op
                 executeFilterQuery·p0.95:   46.832 ms/op
                 executeFilterQuery·p0.99:   48.038 ms/op
                 executeFilterQuery·p0.999:  48.038 ms/op
                 executeFilterQuery·p0.9999: 48.038 ms/op
                 executeFilterQuery·p1.00:   48.038 ms/op

Iteration   3: 46.594 ±(99.9%) 0.035 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.727 ms/op
                 executeFilterQuery·p0.95:   46.727 ms/op
                 executeFilterQuery·p0.99:   46.793 ms/op
                 executeFilterQuery·p0.999:  46.793 ms/op
                 executeFilterQuery·p0.9999: 46.793 ms/op
                 executeFilterQuery·p1.00:   46.793 ms/op

Iteration   4: 46.610 ±(99.9%) 0.046 ms/op
                 executeFilterQuery·p0.00:   46.399 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.793 ms/op
                 executeFilterQuery·p0.95:   46.832 ms/op
                 executeFilterQuery·p0.99:   46.924 ms/op
                 executeFilterQuery·p0.999:  46.924 ms/op
                 executeFilterQuery·p0.9999: 46.924 ms/op
                 executeFilterQuery·p1.00:   46.924 ms/op

Iteration   5: 46.656 ±(99.9%) 0.039 ms/op
                 executeFilterQuery·p0.00:   46.531 ms/op
                 executeFilterQuery·p0.50:   46.662 ms/op
                 executeFilterQuery·p0.90:   46.793 ms/op
                 executeFilterQuery·p0.95:   46.832 ms/op
                 executeFilterQuery·p0.99:   46.924 ms/op
                 executeFilterQuery·p0.999:  46.924 ms/op
                 executeFilterQuery·p0.9999: 46.924 ms/op
                 executeFilterQuery·p1.00:   46.924 ms/op


# Run progress: 18.33% complete, ETA 01:23:47
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

49.441 ±(99.9%) 5.094 ms/op
# Warmup Iteration   2: 46.904 ±(99.9%) 0.466 ms/op
# Warmup Iteration   3: 46.760 ±(99.9%) 0.057 ms/op
# Warmup Iteration   4: 46.764 ±(99.9%) 0.061 ms/op
# Warmup Iteration   5: 46.756 ±(99.9%) 0.059 ms/op
Iteration   1: 46.713 ±(99.9%) 0.050 ms/op
                 executeFilterQuery·p0.00:   46.531 ms/op
                 executeFilterQuery·p0.50:   46.727 ms/op
                 executeFilterQuery·p0.90:   46.858 ms/op
                 executeFilterQuery·p0.95:   46.924 ms/op
                 executeFilterQuery·p0.99:   47.120 ms/op
                 executeFilterQuery·p0.999:  47.120 ms/op
                 executeFilterQuery·p0.9999: 47.120 ms/op
                 executeFilterQuery·p1.00:   47.120 ms/op

Iteration   2: 46.745 ±(99.9%) 0.050 ms/op
                 executeFilterQuery·p0.00:   46.531 ms/op
                 executeFilterQuery·p0.50:   46.727 ms/op
                 executeFilterQuery·p0.90:   46.871 ms/op
                 executeFilterQuery·p0.95:   46.989 ms/op
                 executeFilterQuery·p0.99:   47.186 ms/op
                 executeFilterQuery·p0.999:  47.186 ms/op
                 executeFilterQuery·p0.9999: 47.186 ms/op
                 executeFilterQuery·p1.00:   47.186 ms/op

Iteration   3: 46.751 ±(99.9%) 0.060 ms/op
                 executeFilterQuery·p0.00:   46.531 ms/op
                 executeFilterQuery·p0.50:   46.727 ms/op
                 executeFilterQuery·p0.90:   46.871 ms/op
                 executeFilterQuery·p0.95:   47.002 ms/op
                 executeFilterQuery·p0.99:   47.383 ms/op
                 executeFilterQuery·p0.999:  47.383 ms/op
                 executeFilterQuery·p0.9999: 47.383 ms/op
                 executeFilterQuery·p1.00:   47.383 ms/op

Iteration   4: 46.760 ±(99.9%) 0.064 ms/op
                 executeFilterQuery·p0.00:   46.531 ms/op
                 executeFilterQuery·p0.50:   46.727 ms/op
                 executeFilterQuery·p0.90:   46.924 ms/op
                 executeFilterQuery·p0.95:   47.055 ms/op
                 executeFilterQuery·p0.99:   47.383 ms/op
                 executeFilterQuery·p0.999:  47.383 ms/op
                 executeFilterQuery·p0.9999: 47.383 ms/op
                 executeFilterQuery·p1.00:   47.383 ms/op

Iteration   5: 46.726 ±(99.9%) 0.055 ms/op
                 executeFilterQuery·p0.00:   46.531 ms/op
                 executeFilterQuery·p0.50:   46.727 ms/op
                 executeFilterQuery·p0.90:   46.924 ms/op
                 executeFilterQuery·p0.95:   46.989 ms/op
                 executeFilterQuery·p0.99:   47.251 ms/op
                 executeFilterQuery·p0.999:  47.251 ms/op
                 executeFilterQuery·p0.9999: 47.251 ms/op
                 executeFilterQuery·p1.00:   47.251 ms/op


# Run progress: 20.00% complete, ETA 01:22:05
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

50.061 ±(99.9%) 5.104 ms/op
# Warmup Iteration   2: 47.386 ±(99.9%) 0.078 ms/op
# Warmup Iteration   3: 47.355 ±(99.9%) 0.044 ms/op
# Warmup Iteration   4: 47.393 ±(99.9%) 0.080 ms/op
# Warmup Iteration   5: 47.348 ±(99.9%) 0.041 ms/op
Iteration   1: 47.331 ±(99.9%) 0.052 ms/op
                 executeFilterQuery·p0.00:   47.186 ms/op
                 executeFilterQuery·p0.50:   47.317 ms/op
                 executeFilterQuery·p0.90:   47.448 ms/op
                 executeFilterQuery·p0.95:   47.514 ms/op
                 executeFilterQuery·p0.99:   48.103 ms/op
                 executeFilterQuery·p0.999:  48.103 ms/op
                 executeFilterQuery·p0.9999: 48.103 ms/op
                 executeFilterQuery·p1.00:   48.103 ms/op

Iteration   2: 47.356 ±(99.9%) 0.131 ms/op
                 executeFilterQuery·p0.00:   47.186 ms/op
                 executeFilterQuery·p0.50:   47.317 ms/op
                 executeFilterQuery·p0.90:   47.448 ms/op
                 executeFilterQuery·p0.95:   47.579 ms/op
                 executeFilterQuery·p0.99:   49.742 ms/op
                 executeFilterQuery·p0.999:  49.742 ms/op
                 executeFilterQuery·p0.9999: 49.742 ms/op
                 executeFilterQuery·p1.00:   49.742 ms/op

Iteration   3: 47.404 ±(99.9%) 0.040 ms/op
                 executeFilterQuery·p0.00:   47.251 ms/op
                 executeFilterQuery·p0.50:   47.383 ms/op
                 executeFilterQuery·p0.90:   47.514 ms/op
                 executeFilterQuery·p0.95:   47.579 ms/op
                 executeFilterQuery·p0.99:   47.710 ms/op
                 executeFilterQuery·p0.999:  47.710 ms/op
                 executeFilterQuery·p0.9999: 47.710 ms/op
                 executeFilterQuery·p1.00:   47.710 ms/op

Iteration   4: 47.411 ±(99.9%) 0.048 ms/op
                 executeFilterQuery·p0.00:   47.186 ms/op
                 executeFilterQuery·p0.50:   47.383 ms/op
                 executeFilterQuery·p0.90:   47.579 ms/op
                 executeFilterQuery·p0.95:   47.645 ms/op
                 executeFilterQuery·p0.99:   47.776 ms/op
                 executeFilterQuery·p0.999:  47.776 ms/op
                 executeFilterQuery·p0.9999: 47.776 ms/op
                 executeFilterQuery·p1.00:   47.776 ms/op

Iteration   5: 47.385 ±(99.9%) 0.056 ms/op
                 executeFilterQuery·p0.00:   47.186 ms/op
                 executeFilterQuery·p0.50:   47.383 ms/op
                 executeFilterQuery·p0.90:   47.514 ms/op
                 executeFilterQuery·p0.95:   47.553 ms/op
                 executeFilterQuery·p0.99:   48.103 ms/op
                 executeFilterQuery·p0.999:  48.103 ms/op
                 executeFilterQuery·p0.9999: 48.103 ms/op
                 executeFilterQuery·p1.00:   48.103 ms/op


# Run progress: 21.67% complete, ETA 01:20:22
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

50.275 ±(99.9%) 6.986 ms/op
# Warmup Iteration   2: 46.638 ±(99.9%) 0.063 ms/op
# Warmup Iteration   3: 46.675 ±(99.9%) 0.121 ms/op
# Warmup Iteration   4: 46.639 ±(99.9%) 0.053 ms/op
# Warmup Iteration   5: 46.630 ±(99.9%) 0.063 ms/op
Iteration   1: 46.642 ±(99.9%) 0.041 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.793 ms/op
                 executeFilterQuery·p0.95:   46.858 ms/op
                 executeFilterQuery·p0.99:   46.858 ms/op
                 executeFilterQuery·p0.999:  46.858 ms/op
                 executeFilterQuery·p0.9999: 46.858 ms/op
                 executeFilterQuery·p1.00:   46.858 ms/op

Iteration   2: 46.634 ±(99.9%) 0.066 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.740 ms/op
                 executeFilterQuery·p0.95:   46.858 ms/op
                 executeFilterQuery·p0.99:   47.645 ms/op
                 executeFilterQuery·p0.999:  47.645 ms/op
                 executeFilterQuery·p0.9999: 47.645 ms/op
                 executeFilterQuery·p1.00:   47.645 ms/op

Iteration   3: 46.631 ±(99.9%) 0.039 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.793 ms/op
                 executeFilterQuery·p0.95:   46.793 ms/op
                 executeFilterQuery·p0.99:   46.924 ms/op
                 executeFilterQuery·p0.999:  46.924 ms/op
                 executeFilterQuery·p0.9999: 46.924 ms/op
                 executeFilterQuery·p1.00:   46.924 ms/op

Iteration   4: 46.584 ±(99.9%) 0.035 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.727 ms/op
                 executeFilterQuery·p0.95:   46.727 ms/op
                 executeFilterQuery·p0.99:   46.858 ms/op
                 executeFilterQuery·p0.999:  46.858 ms/op
                 executeFilterQuery·p0.9999: 46.858 ms/op
                 executeFilterQuery·p1.00:   46.858 ms/op

Iteration   5: 46.621 ±(99.9%) 0.051 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   46.727 ms/op
                 executeFilterQuery·p0.95:   46.871 ms/op
                 executeFilterQuery·p0.99:   47.186 ms/op
                 executeFilterQuery·p0.999:  47.186 ms/op
                 executeFilterQuery·p0.9999: 47.186 ms/op
                 executeFilterQuery·p1.00:   47.186 ms/op


# Run progress: 23.33% complete, ETA 01:18:39
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

49.995 ±(99.9%) 5.992 ms/op
# Warmup Iteration   2: 46.933 ±(99.9%) 0.130 ms/op
# Warmup Iteration   3: 46.929 ±(99.9%) 0.075 ms/op
# Warmup Iteration   4: 46.899 ±(99.9%) 0.050 ms/op
# Warmup Iteration   5: 46.903 ±(99.9%) 0.068 ms/op
Iteration   1: 46.896 ±(99.9%) 0.064 ms/op
                 executeFilterQuery·p0.00:   46.727 ms/op
                 executeFilterQuery·p0.50:   46.858 ms/op
                 executeFilterQuery·p0.90:   46.996 ms/op
                 executeFilterQuery·p0.95:   47.120 ms/op
                 executeFilterQuery·p0.99:   47.645 ms/op
                 executeFilterQuery·p0.999:  47.645 ms/op
                 executeFilterQuery·p0.9999: 47.645 ms/op
                 executeFilterQuery·p1.00:   47.645 ms/op

Iteration   2: 46.866 ±(99.9%) 0.044 ms/op
                 executeFilterQuery·p0.00:   46.727 ms/op
                 executeFilterQuery·p0.50:   46.858 ms/op
                 executeFilterQuery·p0.90:   46.989 ms/op
                 executeFilterQuery·p0.95:   47.120 ms/op
                 executeFilterQuery·p0.99:   47.251 ms/op
                 executeFilterQuery·p0.999:  47.251 ms/op
                 executeFilterQuery·p0.9999: 47.251 ms/op
                 executeFilterQuery·p1.00:   47.251 ms/op

Iteration   3: 46.926 ±(99.9%) 0.090 ms/op
                 executeFilterQuery·p0.00:   46.727 ms/op
                 executeFilterQuery·p0.50:   46.924 ms/op
                 executeFilterQuery·p0.90:   47.055 ms/op
                 executeFilterQuery·p0.95:   47.127 ms/op
                 executeFilterQuery·p0.99:   48.103 ms/op
                 executeFilterQuery·p0.999:  48.103 ms/op
                 executeFilterQuery·p0.9999: 48.103 ms/op
                 executeFilterQuery·p1.00:   48.103 ms/op

Iteration   4: 46.876 ±(99.9%) 0.041 ms/op
                 executeFilterQuery·p0.00:   46.727 ms/op
                 executeFilterQuery·p0.50:   46.858 ms/op
                 executeFilterQuery·p0.90:   46.989 ms/op
                 executeFilterQuery·p0.95:   47.055 ms/op
                 executeFilterQuery·p0.99:   47.317 ms/op
                 executeFilterQuery·p0.999:  47.317 ms/op
                 executeFilterQuery·p0.9999: 47.317 ms/op
                 executeFilterQuery·p1.00:   47.317 ms/op

Iteration   5: 46.900 ±(99.9%) 0.063 ms/op
                 executeFilterQuery·p0.00:   46.727 ms/op
                 executeFilterQuery·p0.50:   46.858 ms/op
                 executeFilterQuery·p0.90:   47.055 ms/op
                 executeFilterQuery·p0.95:   47.222 ms/op
                 executeFilterQuery·p0.99:   47.710 ms/op
                 executeFilterQuery·p0.999:  47.710 ms/op
                 executeFilterQuery·p0.9999: 47.710 ms/op
                 executeFilterQuery·p1.00:   47.710 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1680
  mean =     46.851 ±(99.9%) 0.025 ms/op

  Histogram, ms/op:
    [46.000, 46.250) = 0 
    [46.250, 46.500) = 39 
    [46.500, 46.750) = 802 
    [46.750, 47.000) = 457 
    [47.000, 47.250) = 44 
    [47.250, 47.500) = 288 
    [47.500, 47.750) = 42 
    [47.750, 48.000) = 3 
    [48.000, 48.250) = 4 
    [48.250, 48.500) = 0 
    [48.500, 48.750) = 0 
    [48.750, 49.000) = 0 
    [49.000, 49.250) = 0 
    [49.250, 49.500) = 0 
    [49.500, 49.750) = 1 

  Percentiles, ms/op:
      p(0.0000) =     46.399 ms/op
     p(50.0000) =     46.727 ms/op
     p(90.0000) =     47.383 ms/op
     p(95.0000) =     47.448 ms/op
     p(99.0000) =     47.645 ms/op
     p(99.9000) =     48.626 ms/op
     p(99.9900) =     49.742 ms/op
     p(99.9990) =     49.742 ms/op
     p(99.9999) =     49.742 ms/op
    p(100.0000) =     49.742 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 25.00% complete, ETA 01:16:58
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.470 ±(99.9%) 10.018 ms/op
# Warmup Iteration   2: 39.919 ±(99.9%) 0.146 ms/op
# Warmup Iteration   3: 39.604 ±(99.9%) 0.115 ms/op
# Warmup Iteration   4: 39.755 ±(99.9%) 0.136 ms/op
# Warmup Iteration   5: 39.894 ±(99.9%) 0.167 ms/op
Iteration   1: 39.840 ±(99.9%) 0.135 ms/op
                 executeFilterQuery·p0.00:   39.125 ms/op
                 executeFilterQuery·p0.50:   39.879 ms/op
                 executeFilterQuery·p0.90:   40.233 ms/op
                 executeFilterQuery·p0.95:   40.334 ms/op
                 executeFilterQuery·p0.99:   40.567 ms/op
                 executeFilterQuery·p0.999:  40.567 ms/op
                 executeFilterQuery·p0.9999: 40.567 ms/op
                 executeFilterQuery·p1.00:   40.567 ms/op

Iteration   2: 39.719 ±(99.9%) 0.157 ms/op
                 executeFilterQuery·p0.00:   39.059 ms/op
                 executeFilterQuery·p0.50:   39.715 ms/op
                 executeFilterQuery·p0.90:   40.298 ms/op
                 executeFilterQuery·p0.95:   40.334 ms/op
                 executeFilterQuery·p0.99:   40.567 ms/op
                 executeFilterQuery·p0.999:  40.567 ms/op
                 executeFilterQuery·p0.9999: 40.567 ms/op
                 executeFilterQuery·p1.00:   40.567 ms/op

Iteration   3: 39.738 ±(99.9%) 0.197 ms/op
                 executeFilterQuery·p0.00:   39.059 ms/op
                 executeFilterQuery·p0.50:   39.715 ms/op
                 executeFilterQuery·p0.90:   40.174 ms/op
                 executeFilterQuery·p0.95:   40.364 ms/op
                 executeFilterQuery·p0.99:   42.533 ms/op
                 executeFilterQuery·p0.999:  42.533 ms/op
                 executeFilterQuery·p0.9999: 42.533 ms/op
                 executeFilterQuery·p1.00:   42.533 ms/op

Iteration   4: 39.761 ±(99.9%) 0.148 ms/op
                 executeFilterQuery·p0.00:   39.059 ms/op
                 executeFilterQuery·p0.50:   39.780 ms/op
                 executeFilterQuery·p0.90:   40.239 ms/op
                 executeFilterQuery·p0.95:   40.305 ms/op
                 executeFilterQuery·p0.99:   40.567 ms/op
                 executeFilterQuery·p0.999:  40.567 ms/op
                 executeFilterQuery·p0.9999: 40.567 ms/op
                 executeFilterQuery·p1.00:   40.567 ms/op

Iteration   5: 39.615 ±(99.9%) 0.143 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.042 ms/op
                 executeFilterQuery·p0.95:   40.197 ms/op
                 executeFilterQuery·p0.99:   40.567 ms/op
                 executeFilterQuery·p0.999:  40.567 ms/op
                 executeFilterQuery·p0.9999: 40.567 ms/op
                 executeFilterQuery·p1.00:   40.567 ms/op


# Run progress: 26.67% complete, ETA 01:15:16
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.704 ±(99.9%) 10.714 ms/op
# Warmup Iteration   2: 39.641 ±(99.9%) 0.148 ms/op
# Warmup Iteration   3: 39.796 ±(99.9%) 0.134 ms/op
# Warmup Iteration   4: 39.603 ±(99.9%) 0.156 ms/op
# Warmup Iteration   5: 39.742 ±(99.9%) 0.128 ms/op
Iteration   1: 39.633 ±(99.9%) 0.134 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.108 ms/op
                 executeFilterQuery·p0.95:   40.174 ms/op
                 executeFilterQuery·p0.99:   40.698 ms/op
                 executeFilterQuery·p0.999:  40.698 ms/op
                 executeFilterQuery·p0.9999: 40.698 ms/op
                 executeFilterQuery·p1.00:   40.698 ms/op

Iteration   2: 39.696 ±(99.9%) 0.131 ms/op
                 executeFilterQuery·p0.00:   39.059 ms/op
                 executeFilterQuery·p0.50:   39.649 ms/op
                 executeFilterQuery·p0.90:   40.174 ms/op
                 executeFilterQuery·p0.95:   40.272 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   3: 39.698 ±(99.9%) 0.150 ms/op
                 executeFilterQuery·p0.00:   38.797 ms/op
                 executeFilterQuery·p0.50:   39.780 ms/op
                 executeFilterQuery·p0.90:   40.174 ms/op
                 executeFilterQuery·p0.95:   40.206 ms/op
                 executeFilterQuery·p0.99:   40.305 ms/op
                 executeFilterQuery·p0.999:  40.305 ms/op
                 executeFilterQuery·p0.9999: 40.305 ms/op
                 executeFilterQuery·p1.00:   40.305 ms/op

Iteration   4: 39.636 ±(99.9%) 0.153 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.239 ms/op
                 executeFilterQuery·p0.95:   40.337 ms/op
                 executeFilterQuery·p0.99:   40.501 ms/op
                 executeFilterQuery·p0.999:  40.501 ms/op
                 executeFilterQuery·p0.9999: 40.501 ms/op
                 executeFilterQuery·p1.00:   40.501 ms/op

Iteration   5: 39.698 ±(99.9%) 0.140 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.649 ms/op
                 executeFilterQuery·p0.90:   40.239 ms/op
                 executeFilterQuery·p0.95:   40.239 ms/op
                 executeFilterQuery·p0.99:   40.436 ms/op
                 executeFilterQuery·p0.999:  40.436 ms/op
                 executeFilterQuery·p0.9999: 40.436 ms/op
                 executeFilterQuery·p1.00:   40.436 ms/op


# Run progress: 28.33% complete, ETA 01:13:34
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.239 ±(99.9%) 9.427 ms/op
# Warmup Iteration   2: 39.722 ±(99.9%) 0.158 ms/op
# Warmup Iteration   3: 39.701 ±(99.9%) 0.138 ms/op
# Warmup Iteration   4: 39.823 ±(99.9%) 0.235 ms/op
# Warmup Iteration   5: 40.040 ±(99.9%) 0.142 ms/op
Iteration   1: 39.832 ±(99.9%) 0.119 ms/op
                 executeFilterQuery·p0.00:   39.256 ms/op
                 executeFilterQuery·p0.50:   39.780 ms/op
                 executeFilterQuery·p0.90:   40.239 ms/op
                 executeFilterQuery·p0.95:   40.370 ms/op
                 executeFilterQuery·p0.99:   40.501 ms/op
                 executeFilterQuery·p0.999:  40.501 ms/op
                 executeFilterQuery·p0.9999: 40.501 ms/op
                 executeFilterQuery·p1.00:   40.501 ms/op

Iteration   2: 39.923 ±(99.9%) 0.130 ms/op
                 executeFilterQuery·p0.00:   39.322 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   40.370 ms/op
                 executeFilterQuery·p0.95:   40.632 ms/op
                 executeFilterQuery·p0.99:   40.632 ms/op
                 executeFilterQuery·p0.999:  40.632 ms/op
                 executeFilterQuery·p0.9999: 40.632 ms/op
                 executeFilterQuery·p1.00:   40.632 ms/op

Iteration   3: 39.828 ±(99.9%) 0.128 ms/op
                 executeFilterQuery·p0.00:   39.322 ms/op
                 executeFilterQuery·p0.50:   39.780 ms/op
                 executeFilterQuery·p0.90:   40.305 ms/op
                 executeFilterQuery·p0.95:   40.567 ms/op
                 executeFilterQuery·p0.99:   40.567 ms/op
                 executeFilterQuery·p0.999:  40.567 ms/op
                 executeFilterQuery·p0.9999: 40.567 ms/op
                 executeFilterQuery·p1.00:   40.567 ms/op

Iteration   4: 39.830 ±(99.9%) 0.121 ms/op
                 executeFilterQuery·p0.00:   39.125 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   40.226 ms/op
                 executeFilterQuery·p0.95:   40.436 ms/op
                 executeFilterQuery·p0.99:   40.829 ms/op
                 executeFilterQuery·p0.999:  40.829 ms/op
                 executeFilterQuery·p0.9999: 40.829 ms/op
                 executeFilterQuery·p1.00:   40.829 ms/op

Iteration   5: 39.700 ±(99.9%) 0.102 ms/op
                 executeFilterQuery·p0.00:   39.191 ms/op
                 executeFilterQuery·p0.50:   39.715 ms/op
                 executeFilterQuery·p0.90:   39.964 ms/op
                 executeFilterQuery·p0.95:   40.200 ms/op
                 executeFilterQuery·p0.99:   40.501 ms/op
                 executeFilterQuery·p0.999:  40.501 ms/op
                 executeFilterQuery·p0.9999: 40.501 ms/op
                 executeFilterQuery·p1.00:   40.501 ms/op


# Run progress: 30.00% complete, ETA 01:11:52
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.494 ±(99.9%) 9.957 ms/op
# Warmup Iteration   2: 39.587 ±(99.9%) 0.139 ms/op
# Warmup Iteration   3: 39.599 ±(99.9%) 0.168 ms/op
# Warmup Iteration   4: 39.463 ±(99.9%) 0.146 ms/op
# Warmup Iteration   5: 39.622 ±(99.9%) 0.139 ms/op
Iteration   1: 39.559 ±(99.9%) 0.111 ms/op
                 executeFilterQuery·p0.00:   38.994 ms/op
                 executeFilterQuery·p0.50:   39.518 ms/op
                 executeFilterQuery·p0.90:   39.911 ms/op
                 executeFilterQuery·p0.95:   40.042 ms/op
                 executeFilterQuery·p0.99:   40.436 ms/op
                 executeFilterQuery·p0.999:  40.436 ms/op
                 executeFilterQuery·p0.9999: 40.436 ms/op
                 executeFilterQuery·p1.00:   40.436 ms/op

Iteration   2: 39.393 ±(99.9%) 0.125 ms/op
                 executeFilterQuery·p0.00:   38.863 ms/op
                 executeFilterQuery·p0.50:   39.354 ms/op
                 executeFilterQuery·p0.90:   39.872 ms/op
                 executeFilterQuery·p0.95:   40.042 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   3: 39.576 ±(99.9%) 0.574 ms/op
                 executeFilterQuery·p0.00:   38.404 ms/op
                 executeFilterQuery·p0.50:   39.387 ms/op
                 executeFilterQuery·p0.90:   39.780 ms/op
                 executeFilterQuery·p0.95:   39.938 ms/op
                 executeFilterQuery·p0.99:   50.528 ms/op
                 executeFilterQuery·p0.999:  50.528 ms/op
                 executeFilterQuery·p0.9999: 50.528 ms/op
                 executeFilterQuery·p1.00:   50.528 ms/op

Iteration   4: 39.402 ±(99.9%) 0.132 ms/op
                 executeFilterQuery·p0.00:   38.863 ms/op
                 executeFilterQuery·p0.50:   39.387 ms/op
                 executeFilterQuery·p0.90:   39.780 ms/op
                 executeFilterQuery·p0.95:   40.069 ms/op
                 executeFilterQuery·p0.99:   40.763 ms/op
                 executeFilterQuery·p0.999:  40.763 ms/op
                 executeFilterQuery·p0.9999: 40.763 ms/op
                 executeFilterQuery·p1.00:   40.763 ms/op

Iteration   5: 39.641 ±(99.9%) 0.138 ms/op
                 executeFilterQuery·p0.00:   38.797 ms/op
                 executeFilterQuery·p0.50:   39.649 ms/op
                 executeFilterQuery·p0.90:   40.160 ms/op
                 executeFilterQuery·p0.95:   40.239 ms/op
                 executeFilterQuery·p0.99:   40.305 ms/op
                 executeFilterQuery·p0.999:  40.305 ms/op
                 executeFilterQuery·p0.9999: 40.305 ms/op
                 executeFilterQuery·p1.00:   40.305 ms/op


# Run progress: 31.67% complete, ETA 01:10:08
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.871 ±(99.9%) 10.709 ms/op
# Warmup Iteration   2: 39.513 ±(99.9%) 0.171 ms/op
# Warmup Iteration   3: 39.434 ±(99.9%) 0.167 ms/op
# Warmup Iteration   4: 39.644 ±(99.9%) 0.176 ms/op
# Warmup Iteration   5: 39.587 ±(99.9%) 0.156 ms/op
Iteration   1: 39.598 ±(99.9%) 0.160 ms/op
                 executeFilterQuery·p0.00:   38.863 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.233 ms/op
                 executeFilterQuery·p0.95:   40.370 ms/op
                 executeFilterQuery·p0.99:   40.763 ms/op
                 executeFilterQuery·p0.999:  40.763 ms/op
                 executeFilterQuery·p0.9999: 40.763 ms/op
                 executeFilterQuery·p1.00:   40.763 ms/op

Iteration   2: 39.789 ±(99.9%) 0.237 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.715 ms/op
                 executeFilterQuery·p0.90:   40.298 ms/op
                 executeFilterQuery·p0.95:   40.370 ms/op
                 executeFilterQuery·p0.99:   43.516 ms/op
                 executeFilterQuery·p0.999:  43.516 ms/op
                 executeFilterQuery·p0.9999: 43.516 ms/op
                 executeFilterQuery·p1.00:   43.516 ms/op

Iteration   3: 39.844 ±(99.9%) 0.141 ms/op
                 executeFilterQuery·p0.00:   39.125 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   40.298 ms/op
                 executeFilterQuery·p0.95:   40.400 ms/op
                 executeFilterQuery·p0.99:   40.436 ms/op
                 executeFilterQuery·p0.999:  40.436 ms/op
                 executeFilterQuery·p0.9999: 40.436 ms/op
                 executeFilterQuery·p1.00:   40.436 ms/op

Iteration   4: 39.889 ±(99.9%) 0.148 ms/op
                 executeFilterQuery·p0.00:   39.125 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   40.370 ms/op
                 executeFilterQuery·p0.95:   40.436 ms/op
                 executeFilterQuery·p0.99:   40.567 ms/op
                 executeFilterQuery·p0.999:  40.567 ms/op
                 executeFilterQuery·p0.9999: 40.567 ms/op
                 executeFilterQuery·p1.00:   40.567 ms/op

Iteration   5: 39.796 ±(99.9%) 0.100 ms/op
                 executeFilterQuery·p0.00:   39.191 ms/op
                 executeFilterQuery·p0.50:   39.780 ms/op
                 executeFilterQuery·p0.90:   40.108 ms/op
                 executeFilterQuery·p0.95:   40.141 ms/op
                 executeFilterQuery·p0.99:   40.632 ms/op
                 executeFilterQuery·p0.999:  40.632 ms/op
                 executeFilterQuery·p0.9999: 40.632 ms/op
                 executeFilterQuery·p1.00:   40.632 ms/op



Result "benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery":
  N = 1754
  mean =     39.705 ±(99.9%) 0.036 ms/op

  Histogram, ms/op:
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 
    [37.500, 40.000) = 1402 
    [40.000, 42.500) = 348 
    [42.500, 45.000) = 3 
    [45.000, 47.500) = 0 
    [47.500, 50.000) = 0 
    [50.000, 52.500) = 1 
    [52.500, 55.000) = 0 
    [55.000, 57.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     38.404 ms/op
     p(50.0000) =     39.649 ms/op
     p(90.0000) =     40.174 ms/op
     p(95.0000) =     40.305 ms/op
     p(99.0000) =     40.567 ms/op
     p(99.9000) =     45.234 ms/op
     p(99.9900) =     50.528 ms/op
     p(99.9990) =     50.528 ms/op
     p(99.9999) =     50.528 ms/op
    p(100.0000) =     50.528 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 33.33% complete, ETA 01:08:25
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.686 ±(99.9%) 10.643 ms/op
# Warmup Iteration   2: 39.541 ±(99.9%) 0.136 ms/op
# Warmup Iteration   3: 39.786 ±(99.9%) 0.133 ms/op
# Warmup Iteration   4: 39.769 ±(99.9%) 0.279 ms/op
# Warmup Iteration   5: 39.659 ±(99.9%) 0.115 ms/op
Iteration   1: 39.464 ±(99.9%) 0.092 ms/op
                 executeFilterQuery·p0.00:   38.994 ms/op
                 executeFilterQuery·p0.50:   39.453 ms/op
                 executeFilterQuery·p0.90:   39.715 ms/op
                 executeFilterQuery·p0.95:   39.846 ms/op
                 executeFilterQuery·p0.99:   40.436 ms/op
                 executeFilterQuery·p0.999:  40.436 ms/op
                 executeFilterQuery·p0.9999: 40.436 ms/op
                 executeFilterQuery·p1.00:   40.436 ms/op

Iteration   2: 39.556 ±(99.9%) 0.180 ms/op
                 executeFilterQuery·p0.00:   38.732 ms/op
                 executeFilterQuery·p0.50:   39.518 ms/op
                 executeFilterQuery·p0.90:   40.088 ms/op
                 executeFilterQuery·p0.95:   40.197 ms/op
                 executeFilterQuery·p0.99:   42.009 ms/op
                 executeFilterQuery·p0.999:  42.009 ms/op
                 executeFilterQuery·p0.9999: 42.009 ms/op
                 executeFilterQuery·p1.00:   42.009 ms/op

Iteration   3: 39.608 ±(99.9%) 0.122 ms/op
                 executeFilterQuery·p0.00:   39.059 ms/op
                 executeFilterQuery·p0.50:   39.551 ms/op
                 executeFilterQuery·p0.90:   40.108 ms/op
                 executeFilterQuery·p0.95:   40.262 ms/op
                 executeFilterQuery·p0.99:   40.567 ms/op
                 executeFilterQuery·p0.999:  40.567 ms/op
                 executeFilterQuery·p0.9999: 40.567 ms/op
                 executeFilterQuery·p1.00:   40.567 ms/op

Iteration   4: 39.607 ±(99.9%) 0.151 ms/op
                 executeFilterQuery·p0.00:   39.059 ms/op
                 executeFilterQuery·p0.50:   39.485 ms/op
                 executeFilterQuery·p0.90:   40.174 ms/op
                 executeFilterQuery·p0.95:   40.370 ms/op
                 executeFilterQuery·p0.99:   40.567 ms/op
                 executeFilterQuery·p0.999:  40.567 ms/op
                 executeFilterQuery·p0.9999: 40.567 ms/op
                 executeFilterQuery·p1.00:   40.567 ms/op

Iteration   5: 39.617 ±(99.9%) 0.121 ms/op
                 executeFilterQuery·p0.00:   39.059 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.088 ms/op
                 executeFilterQuery·p0.95:   40.305 ms/op
                 executeFilterQuery·p0.99:   40.436 ms/op
                 executeFilterQuery·p0.999:  40.436 ms/op
                 executeFilterQuery·p0.9999: 40.436 ms/op
                 executeFilterQuery·p1.00:   40.436 ms/op


# Run progress: 35.00% complete, ETA 01:06:43
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.393 ±(99.9%) 9.944 ms/op
# Warmup Iteration   2: 39.753 ±(99.9%) 0.141 ms/op
# Warmup Iteration   3: 39.622 ±(99.9%) 0.148 ms/op
# Warmup Iteration   4: 39.710 ±(99.9%) 0.141 ms/op
# Warmup Iteration   5: 39.631 ±(99.9%) 0.170 ms/op
Iteration   1: 39.613 ±(99.9%) 0.142 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   39.957 ms/op
                 executeFilterQuery·p0.95:   40.246 ms/op
                 executeFilterQuery·p0.99:   40.960 ms/op
                 executeFilterQuery·p0.999:  40.960 ms/op
                 executeFilterQuery·p0.9999: 40.960 ms/op
                 executeFilterQuery·p1.00:   40.960 ms/op

Iteration   2: 39.632 ±(99.9%) 0.145 ms/op
                 executeFilterQuery·p0.00:   38.863 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.108 ms/op
                 executeFilterQuery·p0.95:   40.239 ms/op
                 executeFilterQuery·p0.99:   40.632 ms/op
                 executeFilterQuery·p0.999:  40.632 ms/op
                 executeFilterQuery·p0.9999: 40.632 ms/op
                 executeFilterQuery·p1.00:   40.632 ms/op

Iteration   3: 39.507 ±(99.9%) 0.134 ms/op
                 executeFilterQuery·p0.00:   38.994 ms/op
                 executeFilterQuery·p0.50:   39.453 ms/op
                 executeFilterQuery·p0.90:   39.977 ms/op
                 executeFilterQuery·p0.95:   40.305 ms/op
                 executeFilterQuery·p0.99:   40.501 ms/op
                 executeFilterQuery·p0.999:  40.501 ms/op
                 executeFilterQuery·p0.9999: 40.501 ms/op
                 executeFilterQuery·p1.00:   40.501 ms/op

Iteration   4: 39.403 ±(99.9%) 0.133 ms/op
                 executeFilterQuery·p0.00:   38.797 ms/op
                 executeFilterQuery·p0.50:   39.387 ms/op
                 executeFilterQuery·p0.90:   39.898 ms/op
                 executeFilterQuery·p0.95:   40.000 ms/op
                 executeFilterQuery·p0.99:   40.501 ms/op
                 executeFilterQuery·p0.999:  40.501 ms/op
                 executeFilterQuery·p0.9999: 40.501 ms/op
                 executeFilterQuery·p1.00:   40.501 ms/op

Iteration   5: 39.298 ±(99.9%) 0.094 ms/op
                 executeFilterQuery·p0.00:   38.797 ms/op
                 executeFilterQuery·p0.50:   39.322 ms/op
                 executeFilterQuery·p0.90:   39.584 ms/op
                 executeFilterQuery·p0.95:   39.672 ms/op
                 executeFilterQuery·p0.99:   39.911 ms/op
                 executeFilterQuery·p0.999:  39.911 ms/op
                 executeFilterQuery·p0.9999: 39.911 ms/op
                 executeFilterQuery·p1.00:   39.911 ms/op


# Run progress: 36.67% complete, ETA 01:05:00
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.543 ±(99.9%) 9.560 ms/op
# Warmup Iteration   2: 39.711 ±(99.9%) 0.215 ms/op
# Warmup Iteration   3: 39.451 ±(99.9%) 0.135 ms/op
# Warmup Iteration   4: 39.582 ±(99.9%) 0.107 ms/op
# Warmup Iteration   5: 39.452 ±(99.9%) 0.088 ms/op
Iteration   1: 39.471 ±(99.9%) 0.126 ms/op
                 executeFilterQuery·p0.00:   38.863 ms/op
                 executeFilterQuery·p0.50:   39.518 ms/op
                 executeFilterQuery·p0.90:   39.839 ms/op
                 executeFilterQuery·p0.95:   39.941 ms/op
                 executeFilterQuery·p0.99:   40.305 ms/op
                 executeFilterQuery·p0.999:  40.305 ms/op
                 executeFilterQuery·p0.9999: 40.305 ms/op
                 executeFilterQuery·p1.00:   40.305 ms/op

Iteration   2: 39.147 ±(99.9%) 0.168 ms/op
                 executeFilterQuery·p0.00:   38.470 ms/op
                 executeFilterQuery·p0.50:   39.125 ms/op
                 executeFilterQuery·p0.90:   39.715 ms/op
                 executeFilterQuery·p0.95:   39.810 ms/op
                 executeFilterQuery·p0.99:   40.042 ms/op
                 executeFilterQuery·p0.999:  40.042 ms/op
                 executeFilterQuery·p0.9999: 40.042 ms/op
                 executeFilterQuery·p1.00:   40.042 ms/op

Iteration   3: 39.686 ±(99.9%) 0.155 ms/op
                 executeFilterQuery·p0.00:   38.863 ms/op
                 executeFilterQuery·p0.50:   39.649 ms/op
                 executeFilterQuery·p0.90:   40.239 ms/op
                 executeFilterQuery·p0.95:   40.305 ms/op
                 executeFilterQuery·p0.99:   40.763 ms/op
                 executeFilterQuery·p0.999:  40.763 ms/op
                 executeFilterQuery·p0.9999: 40.763 ms/op
                 executeFilterQuery·p1.00:   40.763 ms/op

Iteration   4: 39.526 ±(99.9%) 0.185 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.453 ms/op
                 executeFilterQuery·p0.90:   39.780 ms/op
                 executeFilterQuery·p0.95:   40.042 ms/op
                 executeFilterQuery·p0.99:   42.402 ms/op
                 executeFilterQuery·p0.999:  42.402 ms/op
                 executeFilterQuery·p0.9999: 42.402 ms/op
                 executeFilterQuery·p1.00:   42.402 ms/op

Iteration   5: 39.558 ±(99.9%) 0.128 ms/op
                 executeFilterQuery·p0.00:   38.863 ms/op
                 executeFilterQuery·p0.50:   39.518 ms/op
                 executeFilterQuery·p0.90:   40.036 ms/op
                 executeFilterQuery·p0.95:   40.203 ms/op
                 executeFilterQuery·p0.99:   40.305 ms/op
                 executeFilterQuery·p0.999:  40.305 ms/op
                 executeFilterQuery·p0.9999: 40.305 ms/op
                 executeFilterQuery·p1.00:   40.305 ms/op


# Run progress: 38.33% complete, ETA 01:03:17
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.813 ±(99.9%) 10.872 ms/op
# Warmup Iteration   2: 39.615 ±(99.9%) 0.113 ms/op
# Warmup Iteration   3: 39.654 ±(99.9%) 0.131 ms/op
# Warmup Iteration   4: 39.703 ±(99.9%) 0.154 ms/op
# Warmup Iteration   5: 39.682 ±(99.9%) 0.128 ms/op
Iteration   1: 39.576 ±(99.9%) 0.128 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.042 ms/op
                 executeFilterQuery·p0.95:   40.197 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   2: 39.628 ±(99.9%) 0.116 ms/op
                 executeFilterQuery·p0.00:   38.994 ms/op
                 executeFilterQuery·p0.50:   39.617 ms/op
                 executeFilterQuery·p0.90:   40.023 ms/op
                 executeFilterQuery·p0.95:   40.108 ms/op
                 executeFilterQuery·p0.99:   40.174 ms/op
                 executeFilterQuery·p0.999:  40.174 ms/op
                 executeFilterQuery·p0.9999: 40.174 ms/op
                 executeFilterQuery·p1.00:   40.174 ms/op

Iteration   3: 39.531 ±(99.9%) 0.102 ms/op
                 executeFilterQuery·p0.00:   38.994 ms/op
                 executeFilterQuery·p0.50:   39.518 ms/op
                 executeFilterQuery·p0.90:   39.846 ms/op
                 executeFilterQuery·p0.95:   39.977 ms/op
                 executeFilterQuery·p0.99:   40.042 ms/op
                 executeFilterQuery·p0.999:  40.042 ms/op
                 executeFilterQuery·p0.9999: 40.042 ms/op
                 executeFilterQuery·p1.00:   40.042 ms/op

Iteration   4: 39.634 ±(99.9%) 0.110 ms/op
                 executeFilterQuery·p0.00:   39.059 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.042 ms/op
                 executeFilterQuery·p0.95:   40.042 ms/op
                 executeFilterQuery·p0.99:   40.108 ms/op
                 executeFilterQuery·p0.999:  40.108 ms/op
                 executeFilterQuery·p0.9999: 40.108 ms/op
                 executeFilterQuery·p1.00:   40.108 ms/op

Iteration   5: 39.592 ±(99.9%) 0.111 ms/op
                 executeFilterQuery·p0.00:   38.994 ms/op
                 executeFilterQuery·p0.50:   39.649 ms/op
                 executeFilterQuery·p0.90:   39.892 ms/op
                 executeFilterQuery·p0.95:   40.131 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op


# Run progress: 40.00% complete, ETA 01:01:35
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.577 ±(99.9%) 10.009 ms/op
# Warmup Iteration   2: 39.653 ±(99.9%) 0.145 ms/op
# Warmup Iteration   3: 39.847 ±(99.9%) 0.201 ms/op
# Warmup Iteration   4: 39.690 ±(99.9%) 0.155 ms/op
# Warmup Iteration   5: 39.663 ±(99.9%) 0.113 ms/op
Iteration   1: 39.862 ±(99.9%) 0.150 ms/op
                 executeFilterQuery·p0.00:   39.191 ms/op
                 executeFilterQuery·p0.50:   39.780 ms/op
                 executeFilterQuery·p0.90:   40.436 ms/op
                 executeFilterQuery·p0.95:   40.527 ms/op
                 executeFilterQuery·p0.99:   40.632 ms/op
                 executeFilterQuery·p0.999:  40.632 ms/op
                 executeFilterQuery·p0.9999: 40.632 ms/op
                 executeFilterQuery·p1.00:   40.632 ms/op

Iteration   2: 39.677 ±(99.9%) 0.125 ms/op
                 executeFilterQuery·p0.00:   38.994 ms/op
                 executeFilterQuery·p0.50:   39.715 ms/op
                 executeFilterQuery·p0.90:   40.088 ms/op
                 executeFilterQuery·p0.95:   40.305 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   3: 39.625 ±(99.9%) 0.197 ms/op
                 executeFilterQuery·p0.00:   38.863 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.134 ms/op
                 executeFilterQuery·p0.95:   40.197 ms/op
                 executeFilterQuery·p0.99:   42.664 ms/op
                 executeFilterQuery·p0.999:  42.664 ms/op
                 executeFilterQuery·p0.9999: 42.664 ms/op
                 executeFilterQuery·p1.00:   42.664 ms/op

Iteration   4: 39.628 ±(99.9%) 0.135 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.174 ms/op
                 executeFilterQuery·p0.95:   40.197 ms/op
                 executeFilterQuery·p0.99:   40.436 ms/op
                 executeFilterQuery·p0.999:  40.436 ms/op
                 executeFilterQuery·p0.9999: 40.436 ms/op
                 executeFilterQuery·p1.00:   40.436 ms/op

Iteration   5: 39.581 ±(99.9%) 0.185 ms/op
                 executeFilterQuery·p0.00:   38.994 ms/op
                 executeFilterQuery·p0.50:   39.518 ms/op
                 executeFilterQuery·p0.90:   39.957 ms/op
                 executeFilterQuery·p0.95:   40.154 ms/op
                 executeFilterQuery·p0.99:   42.664 ms/op
                 executeFilterQuery·p0.999:  42.664 ms/op
                 executeFilterQuery·p0.9999: 42.664 ms/op
                 executeFilterQuery·p1.00:   42.664 ms/op



Result "benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery":
  N = 1789
  mean =     39.561 ±(99.9%) 0.029 ms/op

  Histogram, ms/op:
    [38.000, 38.500) = 2 
    [38.500, 39.000) = 86 
    [39.000, 39.500) = 688 
    [39.500, 40.000) = 834 
    [40.000, 40.500) = 159 
    [40.500, 41.000) = 16 
    [41.000, 41.500) = 0 
    [41.500, 42.000) = 0 
    [42.000, 42.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =     38.470 ms/op
     p(50.0000) =     39.518 ms/op
     p(90.0000) =     40.042 ms/op
     p(95.0000) =     40.174 ms/op
     p(99.0000) =     40.501 ms/op
     p(99.9000) =     42.664 ms/op
     p(99.9900) =     42.664 ms/op
     p(99.9990) =     42.664 ms/op
     p(99.9999) =     42.664 ms/op
    p(100.0000) =     42.664 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 41.67% complete, ETA 00:59:52
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.812 ±(99.9%) 10.496 ms/op
# Warmup Iteration   2: 39.657 ±(99.9%) 0.135 ms/op
# Warmup Iteration   3: 39.737 ±(99.9%) 0.123 ms/op
# Warmup Iteration   4: 39.887 ±(99.9%) 0.338 ms/op
# Warmup Iteration   5: 39.880 ±(99.9%) 0.105 ms/op
Iteration   1: 39.754 ±(99.9%) 0.131 ms/op
                 executeFilterQuery·p0.00:   39.191 ms/op
                 executeFilterQuery·p0.50:   39.649 ms/op
                 executeFilterQuery·p0.90:   40.219 ms/op
                 executeFilterQuery·p0.95:   40.370 ms/op
                 executeFilterQuery·p0.99:   40.501 ms/op
                 executeFilterQuery·p0.999:  40.501 ms/op
                 executeFilterQuery·p0.9999: 40.501 ms/op
                 executeFilterQuery·p1.00:   40.501 ms/op

Iteration   2: 39.698 ±(99.9%) 0.111 ms/op
                 executeFilterQuery·p0.00:   39.125 ms/op
                 executeFilterQuery·p0.50:   39.715 ms/op
                 executeFilterQuery·p0.90:   40.108 ms/op
                 executeFilterQuery·p0.95:   40.262 ms/op
                 executeFilterQuery·p0.99:   40.436 ms/op
                 executeFilterQuery·p0.999:  40.436 ms/op
                 executeFilterQuery·p0.9999: 40.436 ms/op
                 executeFilterQuery·p1.00:   40.436 ms/op

Iteration   3: 39.708 ±(99.9%) 0.127 ms/op
                 executeFilterQuery·p0.00:   39.059 ms/op
                 executeFilterQuery·p0.50:   39.682 ms/op
                 executeFilterQuery·p0.90:   40.174 ms/op
                 executeFilterQuery·p0.95:   40.239 ms/op
                 executeFilterQuery·p0.99:   40.436 ms/op
                 executeFilterQuery·p0.999:  40.436 ms/op
                 executeFilterQuery·p0.9999: 40.436 ms/op
                 executeFilterQuery·p1.00:   40.436 ms/op

Iteration   4: 39.784 ±(99.9%) 0.201 ms/op
                 executeFilterQuery·p0.00:   39.059 ms/op
                 executeFilterQuery·p0.50:   39.748 ms/op
                 executeFilterQuery·p0.90:   40.285 ms/op
                 executeFilterQuery·p0.95:   40.328 ms/op
                 executeFilterQuery·p0.99:   42.861 ms/op
                 executeFilterQuery·p0.999:  42.861 ms/op
                 executeFilterQuery·p0.9999: 42.861 ms/op
                 executeFilterQuery·p1.00:   42.861 ms/op

Iteration   5: 39.611 ±(99.9%) 0.104 ms/op
                 executeFilterQuery·p0.00:   39.125 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.003 ms/op
                 executeFilterQuery·p0.95:   40.197 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op


# Run progress: 43.33% complete, ETA 00:58:10
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.486 ±(99.9%) 9.787 ms/op
# Warmup Iteration   2: 39.544 ±(99.9%) 0.168 ms/op
# Warmup Iteration   3: 39.385 ±(99.9%) 0.174 ms/op
# Warmup Iteration   4: 39.537 ±(99.9%) 0.137 ms/op
# Warmup Iteration   5: 39.589 ±(99.9%) 0.146 ms/op
Iteration   1: 39.668 ±(99.9%) 0.167 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.305 ms/op
                 executeFilterQuery·p0.95:   40.465 ms/op
                 executeFilterQuery·p0.99:   40.501 ms/op
                 executeFilterQuery·p0.999:  40.501 ms/op
                 executeFilterQuery·p0.9999: 40.501 ms/op
                 executeFilterQuery·p1.00:   40.501 ms/op

Iteration   2: 39.661 ±(99.9%) 0.168 ms/op
                 executeFilterQuery·p0.00:   38.535 ms/op
                 executeFilterQuery·p0.50:   39.649 ms/op
                 executeFilterQuery·p0.90:   40.174 ms/op
                 executeFilterQuery·p0.95:   40.305 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   3: 39.732 ±(99.9%) 0.122 ms/op
                 executeFilterQuery·p0.00:   39.125 ms/op
                 executeFilterQuery·p0.50:   39.780 ms/op
                 executeFilterQuery·p0.90:   40.101 ms/op
                 executeFilterQuery·p0.95:   40.269 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   4: 39.704 ±(99.9%) 0.148 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.305 ms/op
                 executeFilterQuery·p0.95:   40.436 ms/op
                 executeFilterQuery·p0.99:   40.501 ms/op
                 executeFilterQuery·p0.999:  40.501 ms/op
                 executeFilterQuery·p0.9999: 40.501 ms/op
                 executeFilterQuery·p1.00:   40.501 ms/op

Iteration   5: 39.681 ±(99.9%) 0.124 ms/op
                 executeFilterQuery·p0.00:   39.125 ms/op
                 executeFilterQuery·p0.50:   39.682 ms/op
                 executeFilterQuery·p0.90:   40.101 ms/op
                 executeFilterQuery·p0.95:   40.233 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op


# Run progress: 45.00% complete, ETA 00:56:27
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.934 ±(99.9%) 10.693 ms/op
# Warmup Iteration   2: 39.723 ±(99.9%) 0.156 ms/op
# Warmup Iteration   3: 39.550 ±(99.9%) 0.124 ms/op
# Warmup Iteration   4: 39.657 ±(99.9%) 0.131 ms/op
# Warmup Iteration   5: 39.688 ±(99.9%) 0.143 ms/op
Iteration   1: 39.669 ±(99.9%) 0.105 ms/op
                 executeFilterQuery·p0.00:   39.191 ms/op
                 executeFilterQuery·p0.50:   39.617 ms/op
                 executeFilterQuery·p0.90:   40.042 ms/op
                 executeFilterQuery·p0.95:   40.197 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   2: 39.738 ±(99.9%) 0.116 ms/op
                 executeFilterQuery·p0.00:   39.256 ms/op
                 executeFilterQuery·p0.50:   39.682 ms/op
                 executeFilterQuery·p0.90:   40.174 ms/op
                 executeFilterQuery·p0.95:   40.262 ms/op
                 executeFilterQuery·p0.99:   40.632 ms/op
                 executeFilterQuery·p0.999:  40.632 ms/op
                 executeFilterQuery·p0.9999: 40.632 ms/op
                 executeFilterQuery·p1.00:   40.632 ms/op

Iteration   3: 39.633 ±(99.9%) 0.130 ms/op
                 executeFilterQuery·p0.00:   38.994 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   40.154 ms/op
                 executeFilterQuery·p0.95:   40.262 ms/op
                 executeFilterQuery·p0.99:   40.436 ms/op
                 executeFilterQuery·p0.999:  40.436 ms/op
                 executeFilterQuery·p0.9999: 40.436 ms/op
                 executeFilterQuery·p1.00:   40.436 ms/op

Iteration   4: 39.643 ±(99.9%) 0.125 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.649 ms/op
                 executeFilterQuery·p0.90:   40.108 ms/op
                 executeFilterQuery·p0.95:   40.239 ms/op
                 executeFilterQuery·p0.99:   40.436 ms/op
                 executeFilterQuery·p0.999:  40.436 ms/op
                 executeFilterQuery·p0.9999: 40.436 ms/op
                 executeFilterQuery·p1.00:   40.436 ms/op

Iteration   5: 39.636 ±(99.9%) 0.145 ms/op
                 executeFilterQuery·p0.00:   38.994 ms/op
                 executeFilterQuery·p0.50:   39.617 ms/op
                 executeFilterQuery·p0.90:   40.154 ms/op
                 executeFilterQuery·p0.95:   40.370 ms/op
                 executeFilterQuery·p0.99:   40.436 ms/op
                 executeFilterQuery·p0.999:  40.436 ms/op
                 executeFilterQuery·p0.9999: 40.436 ms/op
                 executeFilterQuery·p1.00:   40.436 ms/op


# Run progress: 46.67% complete, ETA 00:54:45
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.344 ±(99.9%) 10.039 ms/op
# Warmup Iteration   2: 39.610 ±(99.9%) 0.169 ms/op
# Warmup Iteration   3: 39.627 ±(99.9%) 0.139 ms/op
# Warmup Iteration   4: 39.778 ±(99.9%) 0.176 ms/op
# Warmup Iteration   5: 39.769 ±(99.9%) 0.138 ms/op
Iteration   1: 39.689 ±(99.9%) 0.116 ms/op
                 executeFilterQuery·p0.00:   38.994 ms/op
                 executeFilterQuery·p0.50:   39.715 ms/op
                 executeFilterQuery·p0.90:   40.023 ms/op
                 executeFilterQuery·p0.95:   40.265 ms/op
                 executeFilterQuery·p0.99:   40.567 ms/op
                 executeFilterQuery·p0.999:  40.567 ms/op
                 executeFilterQuery·p0.9999: 40.567 ms/op
                 executeFilterQuery·p1.00:   40.567 ms/op

Iteration   2: 39.517 ±(99.9%) 0.123 ms/op
                 executeFilterQuery·p0.00:   38.928 ms/op
                 executeFilterQuery·p0.50:   39.584 ms/op
                 executeFilterQuery·p0.90:   39.846 ms/op
                 executeFilterQuery·p0.95:   40.000 ms/op
                 executeFilterQuery·p0.99:   40.239 ms/op
                 executeFilterQuery·p0.999:  40.239 ms/op
                 executeFilterQuery·p0.9999: 40.239 ms/op
                 executeFilterQuery·p1.00:   40.239 ms/op

Iteration   3: 39.870 ±(99.9%) 0.121 ms/op
                 executeFilterQuery·p0.00:   39.322 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   40.305 ms/op
                 executeFilterQuery·p0.95:   40.459 ms/op
                 executeFilterQuery·p0.99:   40.632 ms/op
                 executeFilterQuery·p0.999:  40.632 ms/op
                 executeFilterQuery·p0.9999: 40.632 ms/op
                 executeFilterQuery·p1.00:   40.632 ms/op

Iteration   4: 39.743 ±(99.9%) 0.105 ms/op
                 executeFilterQuery·p0.00:   39.387 ms/op
                 executeFilterQuery·p0.50:   39.682 ms/op
                 executeFilterQuery·p0.90:   40.108 ms/op
                 executeFilterQuery·p0.95:   40.197 ms/op
                 executeFilterQuery·p0.99:   40.632 ms/op
                 executeFilterQuery·p0.999:  40.632 ms/op
                 executeFilterQuery·p0.9999: 40.632 ms/op
                 executeFilterQuery·p1.00:   40.632 ms/op

Iteration   5: 39.762 ±(99.9%) 0.126 ms/op
                 executeFilterQuery·p0.00:   39.256 ms/op
                 executeFilterQuery·p0.50:   39.649 ms/op
                 executeFilterQuery·p0.90:   40.239 ms/op
                 executeFilterQuery·p0.95:   40.436 ms/op
                 executeFilterQuery·p0.99:   40.567 ms/op
                 executeFilterQuery·p0.999:  40.567 ms/op
                 executeFilterQuery·p0.9999: 40.567 ms/op
                 executeFilterQuery·p1.00:   40.567 ms/op


# Run progress: 48.33% complete, ETA 00:53:02
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 8;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.279 ±(99.9%) 9.809 ms/op
# Warmup Iteration   2: 39.710 ±(99.9%) 0.147 ms/op
# Warmup Iteration   3: 39.576 ±(99.9%) 0.124 ms/op
# Warmup Iteration   4: 39.741 ±(99.9%) 0.167 ms/op
# Warmup Iteration   5: 39.651 ±(99.9%) 0.123 ms/op
Iteration   1: 39.497 ±(99.9%) 0.146 ms/op
                 executeFilterQuery·p0.00:   38.797 ms/op
                 executeFilterQuery·p0.50:   39.420 ms/op
                 executeFilterQuery·p0.90:   39.977 ms/op
                 executeFilterQuery·p0.95:   40.065 ms/op
                 executeFilterQuery·p0.99:   40.239 ms/op
                 executeFilterQuery·p0.999:  40.239 ms/op
                 executeFilterQuery·p0.9999: 40.239 ms/op
                 executeFilterQuery·p1.00:   40.239 ms/op

Iteration   2: 39.508 ±(99.9%) 0.164 ms/op
                 executeFilterQuery·p0.00:   38.732 ms/op
                 executeFilterQuery·p0.50:   39.420 ms/op
                 executeFilterQuery·p0.90:   40.042 ms/op
                 executeFilterQuery·p0.95:   40.197 ms/op
                 executeFilterQuery·p0.99:   41.091 ms/op
                 executeFilterQuery·p0.999:  41.091 ms/op
                 executeFilterQuery·p0.9999: 41.091 ms/op
                 executeFilterQuery·p1.00:   41.091 ms/op

Iteration   3: 39.515 ±(99.9%) 0.207 ms/op
                 executeFilterQuery·p0.00:   38.797 ms/op
                 executeFilterQuery·p0.50:   39.453 ms/op
                 executeFilterQuery·p0.90:   40.042 ms/op
                 executeFilterQuery·p0.95:   40.239 ms/op
                 executeFilterQuery·p0.99:   42.598 ms/op
                 executeFilterQuery·p0.999:  42.598 ms/op
                 executeFilterQuery·p0.9999: 42.598 ms/op
                 executeFilterQuery·p1.00:   42.598 ms/op

Iteration   4: 39.464 ±(99.9%) 0.140 ms/op
                 executeFilterQuery·p0.00:   38.601 ms/op
                 executeFilterQuery·p0.50:   39.485 ms/op
                 executeFilterQuery·p0.90:   39.911 ms/op
                 executeFilterQuery·p0.95:   40.065 ms/op
                 executeFilterQuery·p0.99:   40.239 ms/op
                 executeFilterQuery·p0.999:  40.239 ms/op
                 executeFilterQuery·p0.9999: 40.239 ms/op
                 executeFilterQuery·p1.00:   40.239 ms/op

Iteration   5: 39.348 ±(99.9%) 0.123 ms/op
                 executeFilterQuery·p0.00:   38.666 ms/op
                 executeFilterQuery·p0.50:   39.322 ms/op
                 executeFilterQuery·p0.90:   39.780 ms/op
                 executeFilterQuery·p0.95:   39.911 ms/op
                 executeFilterQuery·p0.99:   40.174 ms/op
                 executeFilterQuery·p0.999:  40.174 ms/op
                 executeFilterQuery·p0.9999: 40.174 ms/op
                 executeFilterQuery·p1.00:   40.174 ms/op



Result "benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery":
  N = 1790
  mean =     39.649 ±(99.9%) 0.028 ms/op

  Histogram, ms/op:
    [38.000, 38.500) = 0 
    [38.500, 39.000) = 56 
    [39.000, 39.500) = 529 
    [39.500, 40.000) = 930 
    [40.000, 40.500) = 258 
    [40.500, 41.000) = 14 
    [41.000, 41.500) = 1 
    [41.500, 42.000) = 0 
    [42.000, 42.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     38.535 ms/op
     p(50.0000) =     39.649 ms/op
     p(90.0000) =     40.108 ms/op
     p(95.0000) =     40.239 ms/op
     p(99.0000) =     40.442 ms/op
     p(99.9000) =     42.653 ms/op
     p(99.9900) =     42.861 ms/op
     p(99.9990) =     42.861 ms/op
     p(99.9999) =     42.861 ms/op
    p(100.0000) =     42.861 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 50.00% complete, ETA 00:51:19
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

30.803 ±(99.9%) 1.544 ms/op
# Warmup Iteration   2: 30.281 ±(99.9%) 0.473 ms/op
# Warmup Iteration   3: 30.505 ±(99.9%) 0.700 ms/op
# Warmup Iteration   4: 30.740 ±(99.9%) 0.852 ms/op
# Warmup Iteration   5: 30.384 ±(99.9%) 0.598 ms/op
Iteration   1: 30.714 ±(99.9%) 0.857 ms/op
                 executeFilterQuery·p0.00:   29.950 ms/op
                 executeFilterQuery·p0.50:   30.081 ms/op
                 executeFilterQuery·p0.90:   30.297 ms/op
                 executeFilterQuery·p0.95:   38.076 ms/op
                 executeFilterQuery·p0.99:   38.207 ms/op
                 executeFilterQuery·p0.999:  38.207 ms/op
                 executeFilterQuery·p0.9999: 38.207 ms/op
                 executeFilterQuery·p1.00:   38.207 ms/op

Iteration   2: 30.365 ±(99.9%) 0.607 ms/op
                 executeFilterQuery·p0.00:   29.950 ms/op
                 executeFilterQuery·p0.50:   30.048 ms/op
                 executeFilterQuery·p0.90:   30.153 ms/op
                 executeFilterQuery·p0.95:   31.044 ms/op
                 executeFilterQuery·p0.99:   38.142 ms/op
                 executeFilterQuery·p0.999:  38.142 ms/op
                 executeFilterQuery·p0.9999: 38.142 ms/op
                 executeFilterQuery·p1.00:   38.142 ms/op

Iteration   3: 30.500 ±(99.9%) 0.708 ms/op
                 executeFilterQuery·p0.00:   29.950 ms/op
                 executeFilterQuery·p0.50:   30.081 ms/op
                 executeFilterQuery·p0.90:   30.212 ms/op
                 executeFilterQuery·p0.95:   38.021 ms/op
                 executeFilterQuery·p0.99:   38.207 ms/op
                 executeFilterQuery·p0.999:  38.207 ms/op
                 executeFilterQuery·p0.9999: 38.207 ms/op
                 executeFilterQuery·p1.00:   38.207 ms/op

Iteration   4: 30.278 ±(99.9%) 0.499 ms/op
                 executeFilterQuery·p0.00:   29.950 ms/op
                 executeFilterQuery·p0.50:   30.048 ms/op
                 executeFilterQuery·p0.90:   30.179 ms/op
                 executeFilterQuery·p0.95:   30.415 ms/op
                 executeFilterQuery·p0.99:   38.076 ms/op
                 executeFilterQuery·p0.999:  38.076 ms/op
                 executeFilterQuery·p0.9999: 38.076 ms/op
                 executeFilterQuery·p1.00:   38.076 ms/op

Iteration   5: 30.802 ±(99.9%) 0.911 ms/op
                 executeFilterQuery·p0.00:   29.884 ms/op
                 executeFilterQuery·p0.50:   30.081 ms/op
                 executeFilterQuery·p0.90:   32.552 ms/op
                 executeFilterQuery·p0.95:   38.011 ms/op
                 executeFilterQuery·p0.99:   38.076 ms/op
                 executeFilterQuery·p0.999:  38.076 ms/op
                 executeFilterQuery·p0.9999: 38.076 ms/op
                 executeFilterQuery·p1.00:   38.076 ms/op


# Run progress: 51.67% complete, ETA 00:49:36
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

31.090 ±(99.9%) 1.609 ms/op
# Warmup Iteration   2: 30.486 ±(99.9%) 0.628 ms/op
# Warmup Iteration   3: 30.372 ±(99.9%) 0.508 ms/op
# Warmup Iteration   4: 30.797 ±(99.9%) 0.851 ms/op
# Warmup Iteration   5: 30.562 ±(99.9%) 0.707 ms/op
Iteration   1: 30.674 ±(99.9%) 0.942 ms/op
                 executeFilterQuery·p0.00:   29.983 ms/op
                 executeFilterQuery·p0.50:   30.147 ms/op
                 executeFilterQuery·p0.90:   30.278 ms/op
                 executeFilterQuery·p0.95:   38.152 ms/op
                 executeFilterQuery·p0.99:   46.203 ms/op
                 executeFilterQuery·p0.999:  46.203 ms/op
                 executeFilterQuery·p0.9999: 46.203 ms/op
                 executeFilterQuery·p1.00:   46.203 ms/op

Iteration   2: 30.348 ±(99.9%) 0.507 ms/op
                 executeFilterQuery·p0.00:   30.015 ms/op
                 executeFilterQuery·p0.50:   30.147 ms/op
                 executeFilterQuery·p0.90:   30.245 ms/op
                 executeFilterQuery·p0.95:   30.315 ms/op
                 executeFilterQuery·p0.99:   38.142 ms/op
                 executeFilterQuery·p0.999:  38.142 ms/op
                 executeFilterQuery·p0.9999: 38.142 ms/op
                 executeFilterQuery·p1.00:   38.142 ms/op

Iteration   3: 30.779 ±(99.9%) 0.852 ms/op
                 executeFilterQuery·p0.00:   30.048 ms/op
                 executeFilterQuery·p0.50:   30.147 ms/op
                 executeFilterQuery·p0.90:   30.487 ms/op
                 executeFilterQuery·p0.95:   38.086 ms/op
                 executeFilterQuery·p0.99:   38.273 ms/op
                 executeFilterQuery·p0.999:  38.273 ms/op
                 executeFilterQuery·p0.9999: 38.273 ms/op
                 executeFilterQuery·p1.00:   38.273 ms/op

Iteration   4: 30.454 ±(99.9%) 0.614 ms/op
                 executeFilterQuery·p0.00:   30.015 ms/op
                 executeFilterQuery·p0.50:   30.114 ms/op
                 executeFilterQuery·p0.90:   30.284 ms/op
                 executeFilterQuery·p0.95:   31.688 ms/op
                 executeFilterQuery·p0.99:   38.142 ms/op
                 executeFilterQuery·p0.999:  38.142 ms/op
                 executeFilterQuery·p0.9999: 38.142 ms/op
                 executeFilterQuery·p1.00:   38.142 ms/op

Iteration   5: 30.457 ±(99.9%) 0.622 ms/op
                 executeFilterQuery·p0.00:   29.983 ms/op
                 executeFilterQuery·p0.50:   30.114 ms/op
                 executeFilterQuery·p0.90:   30.245 ms/op
                 executeFilterQuery·p0.95:   31.810 ms/op
                 executeFilterQuery·p0.99:   38.404 ms/op
                 executeFilterQuery·p0.999:  38.404 ms/op
                 executeFilterQuery·p0.9999: 38.404 ms/op
                 executeFilterQuery·p1.00:   38.404 ms/op


# Run progress: 53.33% complete, ETA 00:47:53
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

30.597 ±(99.9%) 1.441 ms/op
# Warmup Iteration   2: 30.347 ±(99.9%) 0.689 ms/op
# Warmup Iteration   3: 30.125 ±(99.9%) 0.496 ms/op
# Warmup Iteration   4: 30.369 ±(99.9%) 0.696 ms/op
# Warmup Iteration   5: 30.330 ±(99.9%) 0.696 ms/op
Iteration   1: 30.218 ±(99.9%) 0.601 ms/op
                 executeFilterQuery·p0.00:   29.786 ms/op
                 executeFilterQuery·p0.50:   29.917 ms/op
                 executeFilterQuery·p0.90:   29.983 ms/op
                 executeFilterQuery·p0.95:   30.913 ms/op
                 executeFilterQuery·p0.99:   37.814 ms/op
                 executeFilterQuery·p0.999:  37.814 ms/op
                 executeFilterQuery·p0.9999: 37.814 ms/op
                 executeFilterQuery·p1.00:   37.814 ms/op

Iteration   2: 30.240 ±(99.9%) 0.322 ms/op
                 executeFilterQuery·p0.00:   29.786 ms/op
                 executeFilterQuery·p0.50:   30.114 ms/op
                 executeFilterQuery·p0.90:   30.212 ms/op
                 executeFilterQuery·p0.95:   30.368 ms/op
                 executeFilterQuery·p0.99:   36.897 ms/op
                 executeFilterQuery·p0.999:  36.897 ms/op
                 executeFilterQuery·p0.9999: 36.897 ms/op
                 executeFilterQuery·p1.00:   36.897 ms/op

Iteration   3: 30.550 ±(99.9%) 0.714 ms/op
                 executeFilterQuery·p0.00:   30.015 ms/op
                 executeFilterQuery·p0.50:   30.114 ms/op
                 executeFilterQuery·p0.90:   30.287 ms/op
                 executeFilterQuery·p0.95:   38.142 ms/op
                 executeFilterQuery·p0.99:   38.339 ms/op
                 executeFilterQuery·p0.999:  38.339 ms/op
                 executeFilterQuery·p0.9999: 38.339 ms/op
                 executeFilterQuery·p1.00:   38.339 ms/op

Iteration   4: 30.550 ±(99.9%) 0.711 ms/op
                 executeFilterQuery·p0.00:   30.015 ms/op
                 executeFilterQuery·p0.50:   30.114 ms/op
                 executeFilterQuery·p0.90:   30.212 ms/op
                 executeFilterQuery·p0.95:   38.142 ms/op
                 executeFilterQuery·p0.99:   38.207 ms/op
                 executeFilterQuery·p0.999:  38.207 ms/op
                 executeFilterQuery·p0.9999: 38.207 ms/op
                 executeFilterQuery·p1.00:   38.207 ms/op

Iteration   5: 30.217 ±(99.9%) 0.363 ms/op
                 executeFilterQuery·p0.00:   29.983 ms/op
                 executeFilterQuery·p0.50:   30.114 ms/op
                 executeFilterQuery·p0.90:   30.212 ms/op
                 executeFilterQuery·p0.95:   30.278 ms/op
                 executeFilterQuery·p0.99:   38.142 ms/op
                 executeFilterQuery·p0.999:  38.142 ms/op
                 executeFilterQuery·p0.9999: 38.142 ms/op
                 executeFilterQuery·p1.00:   38.142 ms/op


# Run progress: 55.00% complete, ETA 00:46:11
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

30.841 ±(99.9%) 1.653 ms/op
# Warmup Iteration   2: 30.127 ±(99.9%) 0.043 ms/op
# Warmup Iteration   3: 30.041 ±(99.9%) 0.062 ms/op
# Warmup Iteration   4: 30.034 ±(99.9%) 0.074 ms/op
# Warmup Iteration   5: 29.993 ±(99.9%) 0.059 ms/op
Iteration   1: 30.126 ±(99.9%) 0.371 ms/op
                 executeFilterQuery·p0.00:   29.721 ms/op
                 executeFilterQuery·p0.50:   30.048 ms/op
                 executeFilterQuery·p0.90:   30.232 ms/op
                 executeFilterQuery·p0.95:   30.446 ms/op
                 executeFilterQuery·p0.99:   38.076 ms/op
                 executeFilterQuery·p0.999:  38.076 ms/op
                 executeFilterQuery·p0.9999: 38.076 ms/op
                 executeFilterQuery·p1.00:   38.076 ms/op

Iteration   2: 30.127 ±(99.9%) 0.410 ms/op
                 executeFilterQuery·p0.00:   29.655 ms/op
                 executeFilterQuery·p0.50:   29.917 ms/op
                 executeFilterQuery·p0.90:   30.222 ms/op
                 executeFilterQuery·p0.95:   30.310 ms/op
                 executeFilterQuery·p0.99:   38.142 ms/op
                 executeFilterQuery·p0.999:  38.142 ms/op
                 executeFilterQuery·p0.9999: 38.142 ms/op
                 executeFilterQuery·p1.00:   38.142 ms/op

Iteration   3: 30.047 ±(99.9%) 0.056 ms/op
                 executeFilterQuery·p0.00:   29.753 ms/op
                 executeFilterQuery·p0.50:   30.114 ms/op
                 executeFilterQuery·p0.90:   30.212 ms/op
                 executeFilterQuery·p0.95:   30.217 ms/op
                 executeFilterQuery·p0.99:   30.343 ms/op
                 executeFilterQuery·p0.999:  30.343 ms/op
                 executeFilterQuery·p0.9999: 30.343 ms/op
                 executeFilterQuery·p1.00:   30.343 ms/op

Iteration   4: 30.122 ±(99.9%) 0.366 ms/op
                 executeFilterQuery·p0.00:   29.753 ms/op
                 executeFilterQuery·p0.50:   30.048 ms/op
                 executeFilterQuery·p0.90:   30.245 ms/op
                 executeFilterQuery·p0.95:   30.245 ms/op
                 executeFilterQuery·p0.99:   38.011 ms/op
                 executeFilterQuery·p0.999:  38.011 ms/op
                 executeFilterQuery·p0.9999: 38.011 ms/op
                 executeFilterQuery·p1.00:   38.011 ms/op

Iteration   5: 30.019 ±(99.9%) 0.063 ms/op
                 executeFilterQuery·p0.00:   29.688 ms/op
                 executeFilterQuery·p0.50:   30.081 ms/op
                 executeFilterQuery·p0.90:   30.212 ms/op
                 executeFilterQuery·p0.95:   30.217 ms/op
                 executeFilterQuery·p0.99:   30.376 ms/op
                 executeFilterQuery·p0.999:  30.376 ms/op
                 executeFilterQuery·p0.9999: 30.376 ms/op
                 executeFilterQuery·p1.00:   30.376 ms/op


# Run progress: 56.67% complete, ETA 00:44:28
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

31.007 ±(99.9%) 1.589 ms/op
# Warmup Iteration   2: 30.038 ±(99.9%) 0.063 ms/op
# Warmup Iteration   3: 30.193 ±(99.9%) 0.070 ms/op
# Warmup Iteration   4: 30.382 ±(99.9%) 0.518 ms/op
# Warmup Iteration   5: 30.134 ±(99.9%) 0.024 ms/op
Iteration   1: 30.168 ±(99.9%) 0.050 ms/op
                 executeFilterQuery·p0.00:   30.048 ms/op
                 executeFilterQuery·p0.50:   30.147 ms/op
                 executeFilterQuery·p0.90:   30.245 ms/op
                 executeFilterQuery·p0.95:   30.292 ms/op
                 executeFilterQuery·p0.99:   31.031 ms/op
                 executeFilterQuery·p0.999:  31.031 ms/op
                 executeFilterQuery·p0.9999: 31.031 ms/op
                 executeFilterQuery·p1.00:   31.031 ms/op

Iteration   2: 30.147 ±(99.9%) 0.036 ms/op
                 executeFilterQuery·p0.00:   29.819 ms/op
                 executeFilterQuery·p0.50:   30.147 ms/op
                 executeFilterQuery·p0.90:   30.255 ms/op
                 executeFilterQuery·p0.95:   30.315 ms/op
                 executeFilterQuery·p0.99:   30.343 ms/op
                 executeFilterQuery·p0.999:  30.343 ms/op
                 executeFilterQuery·p0.9999: 30.343 ms/op
                 executeFilterQuery·p1.00:   30.343 ms/op

Iteration   3: 30.138 ±(99.9%) 0.026 ms/op
                 executeFilterQuery·p0.00:   29.983 ms/op
                 executeFilterQuery·p0.50:   30.114 ms/op
                 executeFilterQuery·p0.90:   30.212 ms/op
                 executeFilterQuery·p0.95:   30.310 ms/op
                 executeFilterQuery·p0.99:   30.310 ms/op
                 executeFilterQuery·p0.999:  30.310 ms/op
                 executeFilterQuery·p0.9999: 30.310 ms/op
                 executeFilterQuery·p1.00:   30.310 ms/op

Iteration   4: 30.366 ±(99.9%) 0.507 ms/op
                 executeFilterQuery·p0.00:   30.015 ms/op
                 executeFilterQuery·p0.50:   30.147 ms/op
                 executeFilterQuery·p0.90:   30.278 ms/op
                 executeFilterQuery·p0.95:   30.415 ms/op
                 executeFilterQuery·p0.99:   38.207 ms/op
                 executeFilterQuery·p0.999:  38.207 ms/op
                 executeFilterQuery·p0.9999: 38.207 ms/op
                 executeFilterQuery·p1.00:   38.207 ms/op

Iteration   5: 30.141 ±(99.9%) 0.022 ms/op
                 executeFilterQuery·p0.00:   29.983 ms/op
                 executeFilterQuery·p0.50:   30.147 ms/op
                 executeFilterQuery·p0.90:   30.212 ms/op
                 executeFilterQuery·p0.95:   30.245 ms/op
                 executeFilterQuery·p0.99:   30.278 ms/op
                 executeFilterQuery·p0.999:  30.278 ms/op
                 executeFilterQuery·p0.9999: 30.278 ms/op
                 executeFilterQuery·p1.00:   30.278 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1903
  mean =     30.342 ±(99.9%) 0.107 ms/op

  Histogram, ms/op:
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 302 
    [30.000, 32.500) = 1542 
    [32.500, 35.000) = 1 
    [35.000, 37.500) = 1 
    [37.500, 40.000) = 56 
    [40.000, 42.500) = 0 
    [42.500, 45.000) = 0 
    [45.000, 47.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     29.655 ms/op
     p(50.0000) =     30.114 ms/op
     p(90.0000) =     30.212 ms/op
     p(95.0000) =     30.343 ms/op
     p(99.0000) =     38.142 ms/op
     p(99.9000) =     39.153 ms/op
     p(99.9900) =     46.203 ms/op
     p(99.9990) =     46.203 ms/op
     p(99.9999) =     46.203 ms/op
    p(100.0000) =     46.203 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 58.33% complete, ETA 00:42:45
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

55.617 ±(99.9%) 1.919 ms/op
# Warmup Iteration   2: 55.270 ±(99.9%) 0.600 ms/op
# Warmup Iteration   3: 55.087 ±(99.9%) 0.071 ms/op
# Warmup Iteration   4: 55.208 ±(99.9%) 0.435 ms/op
# Warmup Iteration   5: 55.263 ±(99.9%) 0.473 ms/op
Iteration   1: 55.070 ±(99.9%) 0.066 ms/op
                 executeFilterQuery·p0.00:   54.854 ms/op
                 executeFilterQuery·p0.50:   55.050 ms/op
                 executeFilterQuery·p0.90:   55.208 ms/op
                 executeFilterQuery·p0.95:   55.443 ms/op
                 executeFilterQuery·p0.99:   55.706 ms/op
                 executeFilterQuery·p0.999:  55.706 ms/op
                 executeFilterQuery·p0.9999: 55.706 ms/op
                 executeFilterQuery·p1.00:   55.706 ms/op

Iteration   2: 55.092 ±(99.9%) 0.240 ms/op
                 executeFilterQuery·p0.00:   54.723 ms/op
                 executeFilterQuery·p0.50:   55.050 ms/op
                 executeFilterQuery·p0.90:   55.181 ms/op
                 executeFilterQuery·p0.95:   55.273 ms/op
                 executeFilterQuery·p0.99:   59.441 ms/op
                 executeFilterQuery·p0.999:  59.441 ms/op
                 executeFilterQuery·p0.9999: 59.441 ms/op
                 executeFilterQuery·p1.00:   59.441 ms/op

Iteration   3: 55.152 ±(99.9%) 0.435 ms/op
                 executeFilterQuery·p0.00:   54.854 ms/op
                 executeFilterQuery·p0.50:   54.985 ms/op
                 executeFilterQuery·p0.90:   55.181 ms/op
                 executeFilterQuery·p0.95:   55.247 ms/op
                 executeFilterQuery·p0.99:   63.177 ms/op
                 executeFilterQuery·p0.999:  63.177 ms/op
                 executeFilterQuery·p0.9999: 63.177 ms/op
                 executeFilterQuery·p1.00:   63.177 ms/op

Iteration   4: 55.091 ±(99.9%) 0.069 ms/op
                 executeFilterQuery·p0.00:   54.854 ms/op
                 executeFilterQuery·p0.50:   55.050 ms/op
                 executeFilterQuery·p0.90:   55.312 ms/op
                 executeFilterQuery·p0.95:   55.424 ms/op
                 executeFilterQuery·p0.99:   55.640 ms/op
                 executeFilterQuery·p0.999:  55.640 ms/op
                 executeFilterQuery·p0.9999: 55.640 ms/op
                 executeFilterQuery·p1.00:   55.640 ms/op

Iteration   5: 55.030 ±(99.9%) 0.048 ms/op
                 executeFilterQuery·p0.00:   54.788 ms/op
                 executeFilterQuery·p0.50:   55.050 ms/op
                 executeFilterQuery·p0.90:   55.181 ms/op
                 executeFilterQuery·p0.95:   55.247 ms/op
                 executeFilterQuery·p0.99:   55.509 ms/op
                 executeFilterQuery·p0.999:  55.509 ms/op
                 executeFilterQuery·p0.9999: 55.509 ms/op
                 executeFilterQuery·p1.00:   55.509 ms/op


# Run progress: 60.00% complete, ETA 00:41:03
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

55.749 ±(99.9%) 1.864 ms/op
# Warmup Iteration   2: 55.085 ±(99.9%) 0.070 ms/op
# Warmup Iteration   3: 55.160 ±(99.9%) 0.449 ms/op
# Warmup Iteration   4: 55.086 ±(99.9%) 0.121 ms/op
# Warmup Iteration   5: 55.064 ±(99.9%) 0.055 ms/op
Iteration   1: 55.038 ±(99.9%) 0.045 ms/op
                 executeFilterQuery·p0.00:   54.854 ms/op
                 executeFilterQuery·p0.50:   55.050 ms/op
                 executeFilterQuery·p0.90:   55.181 ms/op
                 executeFilterQuery·p0.95:   55.181 ms/op
                 executeFilterQuery·p0.99:   55.378 ms/op
                 executeFilterQuery·p0.999:  55.378 ms/op
                 executeFilterQuery·p0.9999: 55.378 ms/op
                 executeFilterQuery·p1.00:   55.378 ms/op

Iteration   2: 55.055 ±(99.9%) 0.052 ms/op
                 executeFilterQuery·p0.00:   54.788 ms/op
                 executeFilterQuery·p0.50:   55.050 ms/op
                 executeFilterQuery·p0.90:   55.181 ms/op
                 executeFilterQuery·p0.95:   55.293 ms/op
                 executeFilterQuery·p0.99:   55.443 ms/op
                 executeFilterQuery·p0.999:  55.443 ms/op
                 executeFilterQuery·p0.9999: 55.443 ms/op
                 executeFilterQuery·p1.00:   55.443 ms/op

Iteration   3: 55.070 ±(99.9%) 0.045 ms/op
                 executeFilterQuery·p0.00:   54.854 ms/op
                 executeFilterQuery·p0.50:   55.050 ms/op
                 executeFilterQuery·p0.90:   55.247 ms/op
                 executeFilterQuery·p0.95:   55.247 ms/op
                 executeFilterQuery·p0.99:   55.443 ms/op
                 executeFilterQuery·p0.999:  55.443 ms/op
                 executeFilterQuery·p0.9999: 55.443 ms/op
                 executeFilterQuery·p1.00:   55.443 ms/op

Iteration   4: 55.064 ±(99.9%) 0.054 ms/op
                 executeFilterQuery·p0.00:   54.854 ms/op
                 executeFilterQuery·p0.50:   55.050 ms/op
                 executeFilterQuery·p0.90:   55.247 ms/op
                 executeFilterQuery·p0.95:   55.293 ms/op
                 executeFilterQuery·p0.99:   55.509 ms/op
                 executeFilterQuery·p0.999:  55.509 ms/op
                 executeFilterQuery·p0.9999: 55.509 ms/op
                 executeFilterQuery·p1.00:   55.509 ms/op

Iteration   5: 55.179 ±(99.9%) 0.423 ms/op
                 executeFilterQuery·p0.00:   54.788 ms/op
                 executeFilterQuery·p0.50:   55.050 ms/op
                 executeFilterQuery·p0.90:   55.208 ms/op
                 executeFilterQuery·p0.95:   55.358 ms/op
                 executeFilterQuery·p0.99:   62.980 ms/op
                 executeFilterQuery·p0.999:  62.980 ms/op
                 executeFilterQuery·p0.9999: 62.980 ms/op
                 executeFilterQuery·p1.00:   62.980 ms/op


# Run progress: 61.67% complete, ETA 00:39:20
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

55.493 ±(99.9%) 1.936 ms/op
# Warmup Iteration   2: 54.940 ±(99.9%) 0.118 ms/op
# Warmup Iteration   3: 54.906 ±(99.9%) 0.050 ms/op
# Warmup Iteration   4: 54.975 ±(99.9%) 0.211 ms/op
# Warmup Iteration   5: 54.989 ±(99.9%) 0.324 ms/op
Iteration   1: 54.923 ±(99.9%) 0.063 ms/op
                 executeFilterQuery·p0.00:   54.723 ms/op
                 executeFilterQuery·p0.50:   54.919 ms/op
                 executeFilterQuery·p0.90:   55.076 ms/op
                 executeFilterQuery·p0.95:   55.162 ms/op
                 executeFilterQuery·p0.99:   55.640 ms/op
                 executeFilterQuery·p0.999:  55.640 ms/op
                 executeFilterQuery·p0.9999: 55.640 ms/op
                 executeFilterQuery·p1.00:   55.640 ms/op

Iteration   2: 54.886 ±(99.9%) 0.038 ms/op
                 executeFilterQuery·p0.00:   54.723 ms/op
                 executeFilterQuery·p0.50:   54.854 ms/op
                 executeFilterQuery·p0.90:   54.985 ms/op
                 executeFilterQuery·p0.95:   55.050 ms/op
                 executeFilterQuery·p0.99:   55.116 ms/op
                 executeFilterQuery·p0.999:  55.116 ms/op
                 executeFilterQuery·p0.9999: 55.116 ms/op
                 executeFilterQuery·p1.00:   55.116 ms/op

Iteration   3: 54.888 ±(99.9%) 0.053 ms/op
                 executeFilterQuery·p0.00:   54.657 ms/op
                 executeFilterQuery·p0.50:   54.919 ms/op
                 executeFilterQuery·p0.90:   54.985 ms/op
                 executeFilterQuery·p0.95:   55.181 ms/op
                 executeFilterQuery·p0.99:   55.312 ms/op
                 executeFilterQuery·p0.999:  55.312 ms/op
                 executeFilterQuery·p0.9999: 55.312 ms/op
                 executeFilterQuery·p1.00:   55.312 ms/op

Iteration   4: 54.888 ±(99.9%) 0.049 ms/op
                 executeFilterQuery·p0.00:   54.657 ms/op
                 executeFilterQuery·p0.50:   54.919 ms/op
                 executeFilterQuery·p0.90:   55.011 ms/op
                 executeFilterQuery·p0.95:   55.050 ms/op
                 executeFilterQuery·p0.99:   55.378 ms/op
                 executeFilterQuery·p0.999:  55.378 ms/op
                 executeFilterQuery·p0.9999: 55.378 ms/op
                 executeFilterQuery·p1.00:   55.378 ms/op

Iteration   5: 54.880 ±(99.9%) 0.055 ms/op
                 executeFilterQuery·p0.00:   54.657 ms/op
                 executeFilterQuery·p0.50:   54.854 ms/op
                 executeFilterQuery·p0.90:   55.050 ms/op
                 executeFilterQuery·p0.95:   55.116 ms/op
                 executeFilterQuery·p0.99:   55.247 ms/op
                 executeFilterQuery·p0.999:  55.247 ms/op
                 executeFilterQuery·p0.9999: 55.247 ms/op
                 executeFilterQuery·p1.00:   55.247 ms/op


# Run progress: 63.33% complete, ETA 00:37:37
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

55.701 ±(99.9%) 1.817 ms/op
# Warmup Iteration   2: 55.182 ±(99.9%) 0.108 ms/op
# Warmup Iteration   3: 55.152 ±(99.9%) 0.072 ms/op
# Warmup Iteration   4: 55.234 ±(99.9%) 0.445 ms/op
# Warmup Iteration   5: 55.107 ±(99.9%) 0.049 ms/op
Iteration   1: 55.110 ±(99.9%) 0.052 ms/op
                 executeFilterQuery·p0.00:   54.919 ms/op
                 executeFilterQuery·p0.50:   55.116 ms/op
                 executeFilterQuery·p0.90:   55.312 ms/op
                 executeFilterQuery·p0.95:   55.378 ms/op
                 executeFilterQuery·p0.99:   55.443 ms/op
                 executeFilterQuery·p0.999:  55.443 ms/op
                 executeFilterQuery·p0.9999: 55.443 ms/op
                 executeFilterQuery·p1.00:   55.443 ms/op

Iteration   2: 55.099 ±(99.9%) 0.064 ms/op
                 executeFilterQuery·p0.00:   54.854 ms/op
                 executeFilterQuery·p0.50:   55.083 ms/op
                 executeFilterQuery·p0.90:   55.312 ms/op
                 executeFilterQuery·p0.95:   55.378 ms/op
                 executeFilterQuery·p0.99:   55.706 ms/op
                 executeFilterQuery·p0.999:  55.706 ms/op
                 executeFilterQuery·p0.9999: 55.706 ms/op
                 executeFilterQuery·p1.00:   55.706 ms/op

Iteration   3: 55.102 ±(99.9%) 0.059 ms/op
                 executeFilterQuery·p0.00:   54.854 ms/op
                 executeFilterQuery·p0.50:   55.116 ms/op
                 executeFilterQuery·p0.90:   55.312 ms/op
                 executeFilterQuery·p0.95:   55.378 ms/op
                 executeFilterQuery·p0.99:   55.509 ms/op
                 executeFilterQuery·p0.999:  55.509 ms/op
                 executeFilterQuery·p0.9999: 55.509 ms/op
                 executeFilterQuery·p1.00:   55.509 ms/op

Iteration   4: 55.095 ±(99.9%) 0.047 ms/op
                 executeFilterQuery·p0.00:   54.919 ms/op
                 executeFilterQuery·p0.50:   55.050 ms/op
                 executeFilterQuery·p0.90:   55.247 ms/op
                 executeFilterQuery·p0.95:   55.247 ms/op
                 executeFilterQuery·p0.99:   55.509 ms/op
                 executeFilterQuery·p0.999:  55.509 ms/op
                 executeFilterQuery·p0.9999: 55.509 ms/op
                 executeFilterQuery·p1.00:   55.509 ms/op

Iteration   5: 55.124 ±(99.9%) 0.060 ms/op
                 executeFilterQuery·p0.00:   54.919 ms/op
                 executeFilterQuery·p0.50:   55.116 ms/op
                 executeFilterQuery·p0.90:   55.312 ms/op
                 executeFilterQuery·p0.95:   55.427 ms/op
                 executeFilterQuery·p0.99:   55.509 ms/op
                 executeFilterQuery·p0.999:  55.509 ms/op
                 executeFilterQuery·p0.9999: 55.509 ms/op
                 executeFilterQuery·p1.00:   55.509 ms/op


# Run progress: 65.00% complete, ETA 00:35:55
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

55.666 ±(99.9%) 1.846 ms/op
# Warmup Iteration   2: 55.226 ±(99.9%) 0.059 ms/op
# Warmup Iteration   3: 55.265 ±(99.9%) 0.086 ms/op
# Warmup Iteration   4: 55.521 ±(99.9%) 0.601 ms/op
# Warmup Iteration   5: 55.212 ±(99.9%) 0.049 ms/op
Iteration   1: 55.371 ±(99.9%) 0.417 ms/op
                 executeFilterQuery·p0.00:   55.050 ms/op
                 executeFilterQuery·p0.50:   55.247 ms/op
                 executeFilterQuery·p0.90:   55.378 ms/op
                 executeFilterQuery·p0.95:   55.581 ms/op
                 executeFilterQuery·p0.99:   63.046 ms/op
                 executeFilterQuery·p0.999:  63.046 ms/op
                 executeFilterQuery·p0.9999: 63.046 ms/op
                 executeFilterQuery·p1.00:   63.046 ms/op

Iteration   2: 55.238 ±(99.9%) 0.061 ms/op
                 executeFilterQuery·p0.00:   54.985 ms/op
                 executeFilterQuery·p0.50:   55.181 ms/op
                 executeFilterQuery·p0.90:   55.443 ms/op
                 executeFilterQuery·p0.95:   55.443 ms/op
                 executeFilterQuery·p0.99:   55.706 ms/op
                 executeFilterQuery·p0.999:  55.706 ms/op
                 executeFilterQuery·p0.9999: 55.706 ms/op
                 executeFilterQuery·p1.00:   55.706 ms/op

Iteration   3: 55.234 ±(99.9%) 0.055 ms/op
                 executeFilterQuery·p0.00:   55.050 ms/op
                 executeFilterQuery·p0.50:   55.247 ms/op
                 executeFilterQuery·p0.90:   55.378 ms/op
                 executeFilterQuery·p0.95:   55.443 ms/op
                 executeFilterQuery·p0.99:   55.640 ms/op
                 executeFilterQuery·p0.999:  55.640 ms/op
                 executeFilterQuery·p0.9999: 55.640 ms/op
                 executeFilterQuery·p1.00:   55.640 ms/op

Iteration   4: 55.387 ±(99.9%) 0.417 ms/op
                 executeFilterQuery·p0.00:   54.985 ms/op
                 executeFilterQuery·p0.50:   55.247 ms/op
                 executeFilterQuery·p0.90:   55.509 ms/op
                 executeFilterQuery·p0.95:   55.509 ms/op
                 executeFilterQuery·p0.99:   63.046 ms/op
                 executeFilterQuery·p0.999:  63.046 ms/op
                 executeFilterQuery·p0.9999: 63.046 ms/op
                 executeFilterQuery·p1.00:   63.046 ms/op

Iteration   5: 55.302 ±(99.9%) 0.071 ms/op
                 executeFilterQuery·p0.00:   55.050 ms/op
                 executeFilterQuery·p0.50:   55.247 ms/op
                 executeFilterQuery·p0.90:   55.575 ms/op
                 executeFilterQuery·p0.95:   55.686 ms/op
                 executeFilterQuery·p0.99:   55.706 ms/op
                 executeFilterQuery·p0.999:  55.706 ms/op
                 executeFilterQuery·p0.9999: 55.706 ms/op
                 executeFilterQuery·p1.00:   55.706 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1620
  mean =     55.095 ±(99.9%) 0.037 ms/op

  Histogram, ms/op:
    [54.000, 55.000) = 637 
    [55.000, 56.000) = 978 
    [56.000, 57.000) = 0 
    [57.000, 58.000) = 0 
    [58.000, 59.000) = 0 
    [59.000, 60.000) = 1 
    [60.000, 61.000) = 0 
    [61.000, 62.000) = 0 
    [62.000, 63.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     54.657 ms/op
     p(50.0000) =     55.050 ms/op
     p(90.0000) =     55.312 ms/op
     p(95.0000) =     55.378 ms/op
     p(99.0000) =     55.640 ms/op
     p(99.9000) =     63.095 ms/op
     p(99.9900) =     63.177 ms/op
     p(99.9990) =     63.177 ms/op
     p(99.9999) =     63.177 ms/op
    p(100.0000) =     63.177 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 66.67% complete, ETA 00:34:12
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

88.607 ±(99.9%) 2.520 ms/op
# Warmup Iteration   2: 88.305 ±(99.9%) 0.227 ms/op
# Warmup Iteration   3: 88.427 ±(99.9%) 0.104 ms/op
# Warmup Iteration   4: 88.362 ±(99.9%) 0.080 ms/op
# Warmup Iteration   5: 88.483 ±(99.9%) 0.157 ms/op
Iteration   1: 88.427 ±(99.9%) 0.111 ms/op
                 executeFilterQuery·p0.00:   88.080 ms/op
                 executeFilterQuery·p0.50:   88.343 ms/op
                 executeFilterQuery·p0.90:   88.814 ms/op
                 executeFilterQuery·p0.95:   88.867 ms/op
                 executeFilterQuery·p0.99:   89.260 ms/op
                 executeFilterQuery·p0.999:  89.260 ms/op
                 executeFilterQuery·p0.9999: 89.260 ms/op
                 executeFilterQuery·p1.00:   89.260 ms/op

Iteration   2: 88.377 ±(99.9%) 0.089 ms/op
                 executeFilterQuery·p0.00:   88.080 ms/op
                 executeFilterQuery·p0.50:   88.343 ms/op
                 executeFilterQuery·p0.90:   88.605 ms/op
                 executeFilterQuery·p0.95:   88.775 ms/op
                 executeFilterQuery·p0.99:   88.867 ms/op
                 executeFilterQuery·p0.999:  88.867 ms/op
                 executeFilterQuery·p0.9999: 88.867 ms/op
                 executeFilterQuery·p1.00:   88.867 ms/op

Iteration   3: 88.407 ±(99.9%) 0.152 ms/op
                 executeFilterQuery·p0.00:   88.080 ms/op
                 executeFilterQuery·p0.50:   88.343 ms/op
                 executeFilterQuery·p0.90:   88.605 ms/op
                 executeFilterQuery·p0.95:   88.605 ms/op
                 executeFilterQuery·p0.99:   90.440 ms/op
                 executeFilterQuery·p0.999:  90.440 ms/op
                 executeFilterQuery·p0.9999: 90.440 ms/op
                 executeFilterQuery·p1.00:   90.440 ms/op

Iteration   4: 88.419 ±(99.9%) 0.114 ms/op
                 executeFilterQuery·p0.00:   88.080 ms/op
                 executeFilterQuery·p0.50:   88.343 ms/op
                 executeFilterQuery·p0.90:   88.736 ms/op
                 executeFilterQuery·p0.95:   88.906 ms/op
                 executeFilterQuery·p0.99:   89.129 ms/op
                 executeFilterQuery·p0.999:  89.129 ms/op
                 executeFilterQuery·p0.9999: 89.129 ms/op
                 executeFilterQuery·p1.00:   89.129 ms/op

Iteration   5: 88.392 ±(99.9%) 0.093 ms/op
                 executeFilterQuery·p0.00:   87.949 ms/op
                 executeFilterQuery·p0.50:   88.343 ms/op
                 executeFilterQuery·p0.90:   88.605 ms/op
                 executeFilterQuery·p0.95:   88.736 ms/op
                 executeFilterQuery·p0.99:   88.736 ms/op
                 executeFilterQuery·p0.999:  88.736 ms/op
                 executeFilterQuery·p0.9999: 88.736 ms/op
                 executeFilterQuery·p1.00:   88.736 ms/op


# Run progress: 68.33% complete, ETA 00:32:29
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

88.524 ±(99.9%) 2.554 ms/op
# Warmup Iteration   2: 87.390 ±(99.9%) 1.075 ms/op
# Warmup Iteration   3: 87.061 ±(99.9%) 0.215 ms/op
# Warmup Iteration   4: 86.918 ±(99.9%) 0.190 ms/op
# Warmup Iteration   5: 87.010 ±(99.9%) 0.210 ms/op
Iteration   1: 87.005 ±(99.9%) 0.195 ms/op
                 executeFilterQuery·p0.00:   86.245 ms/op
                 executeFilterQuery·p0.50:   87.032 ms/op
                 executeFilterQuery·p0.90:   87.556 ms/op
                 executeFilterQuery·p0.95:   87.720 ms/op
                 executeFilterQuery·p0.99:   87.949 ms/op
                 executeFilterQuery·p0.999:  87.949 ms/op
                 executeFilterQuery·p0.9999: 87.949 ms/op
                 executeFilterQuery·p1.00:   87.949 ms/op

Iteration   2: 87.020 ±(99.9%) 0.236 ms/op
                 executeFilterQuery·p0.00:   86.376 ms/op
                 executeFilterQuery·p0.50:   86.901 ms/op
                 executeFilterQuery·p0.90:   87.622 ms/op
                 executeFilterQuery·p0.95:   87.720 ms/op
                 executeFilterQuery·p0.99:   89.129 ms/op
                 executeFilterQuery·p0.999:  89.129 ms/op
                 executeFilterQuery·p0.9999: 89.129 ms/op
                 executeFilterQuery·p1.00:   89.129 ms/op

Iteration   3: 87.012 ±(99.9%) 0.180 ms/op
                 executeFilterQuery·p0.00:   86.245 ms/op
                 executeFilterQuery·p0.50:   86.966 ms/op
                 executeFilterQuery·p0.90:   87.556 ms/op
                 executeFilterQuery·p0.95:   87.556 ms/op
                 executeFilterQuery·p0.99:   87.949 ms/op
                 executeFilterQuery·p0.999:  87.949 ms/op
                 executeFilterQuery·p0.9999: 87.949 ms/op
                 executeFilterQuery·p1.00:   87.949 ms/op

Iteration   4: 86.971 ±(99.9%) 0.189 ms/op
                 executeFilterQuery·p0.00:   86.376 ms/op
                 executeFilterQuery·p0.50:   86.901 ms/op
                 executeFilterQuery·p0.90:   87.425 ms/op
                 executeFilterQuery·p0.95:   87.720 ms/op
                 executeFilterQuery·p0.99:   88.343 ms/op
                 executeFilterQuery·p0.999:  88.343 ms/op
                 executeFilterQuery·p0.9999: 88.343 ms/op
                 executeFilterQuery·p1.00:   88.343 ms/op

Iteration   5: 87.037 ±(99.9%) 0.199 ms/op
                 executeFilterQuery·p0.00:   86.376 ms/op
                 executeFilterQuery·p0.50:   87.032 ms/op
                 executeFilterQuery·p0.90:   87.622 ms/op
                 executeFilterQuery·p0.95:   87.851 ms/op
                 executeFilterQuery·p0.99:   87.949 ms/op
                 executeFilterQuery·p0.999:  87.949 ms/op
                 executeFilterQuery·p0.9999: 87.949 ms/op
                 executeFilterQuery·p1.00:   87.949 ms/op


# Run progress: 70.00% complete, ETA 00:30:47
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

88.385 ±(99.9%) 2.148 ms/op
# Warmup Iteration   2: 87.243 ±(99.9%) 0.205 ms/op
# Warmup Iteration   3: 87.355 ±(99.9%) 0.248 ms/op
# Warmup Iteration   4: 87.238 ±(99.9%) 0.185 ms/op
# Warmup Iteration   5: 87.236 ±(99.9%) 0.227 ms/op
Iteration   1: 87.221 ±(99.9%) 0.178 ms/op
                 executeFilterQuery·p0.00:   86.508 ms/op
                 executeFilterQuery·p0.50:   87.163 ms/op
                 executeFilterQuery·p0.90:   87.753 ms/op
                 executeFilterQuery·p0.95:   87.818 ms/op
                 executeFilterQuery·p0.99:   88.080 ms/op
                 executeFilterQuery·p0.999:  88.080 ms/op
                 executeFilterQuery·p0.9999: 88.080 ms/op
                 executeFilterQuery·p1.00:   88.080 ms/op

Iteration   2: 87.170 ±(99.9%) 0.179 ms/op
                 executeFilterQuery·p0.00:   86.639 ms/op
                 executeFilterQuery·p0.50:   87.163 ms/op
                 executeFilterQuery·p0.90:   87.884 ms/op
                 executeFilterQuery·p0.95:   87.949 ms/op
                 executeFilterQuery·p0.99:   87.949 ms/op
                 executeFilterQuery·p0.999:  87.949 ms/op
                 executeFilterQuery·p0.9999: 87.949 ms/op
                 executeFilterQuery·p1.00:   87.949 ms/op

Iteration   3: 87.153 ±(99.9%) 0.189 ms/op
                 executeFilterQuery·p0.00:   86.508 ms/op
                 executeFilterQuery·p0.50:   87.163 ms/op
                 executeFilterQuery·p0.90:   87.818 ms/op
                 executeFilterQuery·p0.95:   87.949 ms/op
                 executeFilterQuery·p0.99:   87.949 ms/op
                 executeFilterQuery·p0.999:  87.949 ms/op
                 executeFilterQuery·p0.9999: 87.949 ms/op
                 executeFilterQuery·p1.00:   87.949 ms/op

Iteration   4: 87.160 ±(99.9%) 0.192 ms/op
                 executeFilterQuery·p0.00:   86.508 ms/op
                 executeFilterQuery·p0.50:   87.032 ms/op
                 executeFilterQuery·p0.90:   87.687 ms/op
                 executeFilterQuery·p0.95:   87.982 ms/op
                 executeFilterQuery·p0.99:   88.080 ms/op
                 executeFilterQuery·p0.999:  88.080 ms/op
                 executeFilterQuery·p0.9999: 88.080 ms/op
                 executeFilterQuery·p1.00:   88.080 ms/op

Iteration   5: 87.299 ±(99.9%) 0.219 ms/op
                 executeFilterQuery·p0.00:   86.639 ms/op
                 executeFilterQuery·p0.50:   87.163 ms/op
                 executeFilterQuery·p0.90:   87.687 ms/op
                 executeFilterQuery·p0.95:   88.343 ms/op
                 executeFilterQuery·p0.99:   88.998 ms/op
                 executeFilterQuery·p0.999:  88.998 ms/op
                 executeFilterQuery·p0.9999: 88.998 ms/op
                 executeFilterQuery·p1.00:   88.998 ms/op


# Run progress: 71.67% complete, ETA 00:29:04
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

88.411 ±(99.9%) 2.246 ms/op
# Warmup Iteration   2: 86.942 ±(99.9%) 0.188 ms/op
# Warmup Iteration   3: 86.998 ±(99.9%) 0.205 ms/op
# Warmup Iteration   4: 86.869 ±(99.9%) 0.142 ms/op
# Warmup Iteration   5: 86.957 ±(99.9%) 0.180 ms/op
Iteration   1: 86.993 ±(99.9%) 0.145 ms/op
                 executeFilterQuery·p0.00:   86.376 ms/op
                 executeFilterQuery·p0.50:   86.901 ms/op
                 executeFilterQuery·p0.90:   87.359 ms/op
                 executeFilterQuery·p0.95:   87.556 ms/op
                 executeFilterQuery·p0.99:   87.818 ms/op
                 executeFilterQuery·p0.999:  87.818 ms/op
                 executeFilterQuery·p0.9999: 87.818 ms/op
                 executeFilterQuery·p1.00:   87.818 ms/op

Iteration   2: 86.983 ±(99.9%) 0.150 ms/op
                 executeFilterQuery·p0.00:   86.376 ms/op
                 executeFilterQuery·p0.50:   86.901 ms/op
                 executeFilterQuery·p0.90:   87.425 ms/op
                 executeFilterQuery·p0.95:   87.687 ms/op
                 executeFilterQuery·p0.99:   87.818 ms/op
                 executeFilterQuery·p0.999:  87.818 ms/op
                 executeFilterQuery·p0.9999: 87.818 ms/op
                 executeFilterQuery·p1.00:   87.818 ms/op

Iteration   3: 86.976 ±(99.9%) 0.164 ms/op
                 executeFilterQuery·p0.00:   86.376 ms/op
                 executeFilterQuery·p0.50:   86.901 ms/op
                 executeFilterQuery·p0.90:   87.491 ms/op
                 executeFilterQuery·p0.95:   87.589 ms/op
                 executeFilterQuery·p0.99:   88.080 ms/op
                 executeFilterQuery·p0.999:  88.080 ms/op
                 executeFilterQuery·p0.9999: 88.080 ms/op
                 executeFilterQuery·p1.00:   88.080 ms/op

Iteration   4: 86.991 ±(99.9%) 0.161 ms/op
                 executeFilterQuery·p0.00:   86.376 ms/op
                 executeFilterQuery·p0.50:   86.901 ms/op
                 executeFilterQuery·p0.90:   87.491 ms/op
                 executeFilterQuery·p0.95:   87.622 ms/op
                 executeFilterQuery·p0.99:   87.949 ms/op
                 executeFilterQuery·p0.999:  87.949 ms/op
                 executeFilterQuery·p0.9999: 87.949 ms/op
                 executeFilterQuery·p1.00:   87.949 ms/op

Iteration   5: 86.995 ±(99.9%) 0.137 ms/op
                 executeFilterQuery·p0.00:   86.376 ms/op
                 executeFilterQuery·p0.50:   87.032 ms/op
                 executeFilterQuery·p0.90:   87.359 ms/op
                 executeFilterQuery·p0.95:   87.425 ms/op
                 executeFilterQuery·p0.99:   87.687 ms/op
                 executeFilterQuery·p0.999:  87.687 ms/op
                 executeFilterQuery·p0.9999: 87.687 ms/op
                 executeFilterQuery·p1.00:   87.687 ms/op


# Run progress: 73.33% complete, ETA 00:27:21
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

88.615 ±(99.9%) 2.282 ms/op
# Warmup Iteration   2: 89.495 ±(99.9%) 0.358 ms/op
# Warmup Iteration   3: 89.750 ±(99.9%) 0.092 ms/op
# Warmup Iteration   4: 89.755 ±(99.9%) 0.112 ms/op
# Warmup Iteration   5: 89.782 ±(99.9%) 0.122 ms/op
Iteration   1: 89.724 ±(99.9%) 0.082 ms/op
                 executeFilterQuery·p0.00:   89.391 ms/op
                 executeFilterQuery·p0.50:   89.653 ms/op
                 executeFilterQuery·p0.90:   89.915 ms/op
                 executeFilterQuery·p0.95:   90.178 ms/op
                 executeFilterQuery·p0.99:   90.178 ms/op
                 executeFilterQuery·p0.999:  90.178 ms/op
                 executeFilterQuery·p0.9999: 90.178 ms/op
                 executeFilterQuery·p1.00:   90.178 ms/op

Iteration   2: 89.707 ±(99.9%) 0.087 ms/op
                 executeFilterQuery·p0.00:   89.391 ms/op
                 executeFilterQuery·p0.50:   89.653 ms/op
                 executeFilterQuery·p0.90:   89.915 ms/op
                 executeFilterQuery·p0.95:   90.079 ms/op
                 executeFilterQuery·p0.99:   90.440 ms/op
                 executeFilterQuery·p0.999:  90.440 ms/op
                 executeFilterQuery·p0.9999: 90.440 ms/op
                 executeFilterQuery·p1.00:   90.440 ms/op

Iteration   3: 89.782 ±(99.9%) 0.112 ms/op
                 executeFilterQuery·p0.00:   89.391 ms/op
                 executeFilterQuery·p0.50:   89.784 ms/op
                 executeFilterQuery·p0.90:   90.046 ms/op
                 executeFilterQuery·p0.95:   90.440 ms/op
                 executeFilterQuery·p0.99:   90.571 ms/op
                 executeFilterQuery·p0.999:  90.571 ms/op
                 executeFilterQuery·p0.9999: 90.571 ms/op
                 executeFilterQuery·p1.00:   90.571 ms/op

Iteration   4: 89.682 ±(99.9%) 0.079 ms/op
                 executeFilterQuery·p0.00:   89.391 ms/op
                 executeFilterQuery·p0.50:   89.653 ms/op
                 executeFilterQuery·p0.90:   89.915 ms/op
                 executeFilterQuery·p0.95:   90.046 ms/op
                 executeFilterQuery·p0.99:   90.046 ms/op
                 executeFilterQuery·p0.999:  90.046 ms/op
                 executeFilterQuery·p0.9999: 90.046 ms/op
                 executeFilterQuery·p1.00:   90.046 ms/op

Iteration   5: 89.765 ±(99.9%) 0.095 ms/op
                 executeFilterQuery·p0.00:   89.522 ms/op
                 executeFilterQuery·p0.50:   89.784 ms/op
                 executeFilterQuery·p0.90:   90.112 ms/op
                 executeFilterQuery·p0.95:   90.178 ms/op
                 executeFilterQuery·p0.99:   90.309 ms/op
                 executeFilterQuery·p0.999:  90.309 ms/op
                 executeFilterQuery·p0.9999: 90.309 ms/op
                 executeFilterQuery·p1.00:   90.309 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1345
  mean =     87.865 ±(99.9%) 0.101 ms/op

  Histogram, ms/op:
    [86.000, 86.500) = 27 
    [86.500, 87.000) = 329 
    [87.000, 87.500) = 338 
    [87.500, 88.000) = 107 
    [88.000, 88.500) = 213 
    [88.500, 89.000) = 57 
    [89.000, 89.500) = 9 
    [89.500, 90.000) = 239 
    [90.000, 90.500) = 25 

  Percentiles, ms/op:
      p(0.0000) =     86.245 ms/op
     p(50.0000) =     87.425 ms/op
     p(90.0000) =     89.653 ms/op
     p(95.0000) =     89.784 ms/op
     p(99.0000) =     90.178 ms/op
     p(99.9000) =     90.525 ms/op
     p(99.9900) =     90.571 ms/op
     p(99.9990) =     90.571 ms/op
     p(99.9999) =     90.571 ms/op
    p(100.0000) =     90.571 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 75.00% complete, ETA 00:25:39
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.983 ±(99.9%) 9.902 ms/op
# Warmup Iteration   2: 48.443 ±(99.9%) 0.087 ms/op
# Warmup Iteration   3: 48.469 ±(99.9%) 0.114 ms/op
# Warmup Iteration   4: 48.510 ±(99.9%) 0.094 ms/op
# Warmup Iteration   5: 48.197 ±(99.9%) 0.131 ms/op
Iteration   1: 48.118 ±(99.9%) 0.064 ms/op
                 executeFilterQuery·p0.00:   47.907 ms/op
                 executeFilterQuery·p0.50:   48.103 ms/op
                 executeFilterQuery·p0.90:   48.307 ms/op
                 executeFilterQuery·p0.95:   48.402 ms/op
                 executeFilterQuery·p0.99:   48.497 ms/op
                 executeFilterQuery·p0.999:  48.497 ms/op
                 executeFilterQuery·p0.9999: 48.497 ms/op
                 executeFilterQuery·p1.00:   48.497 ms/op

Iteration   2: 48.091 ±(99.9%) 0.071 ms/op
                 executeFilterQuery·p0.00:   47.514 ms/op
                 executeFilterQuery·p0.50:   48.103 ms/op
                 executeFilterQuery·p0.90:   48.307 ms/op
                 executeFilterQuery·p0.95:   48.366 ms/op
                 executeFilterQuery·p0.99:   48.431 ms/op
                 executeFilterQuery·p0.999:  48.431 ms/op
                 executeFilterQuery·p0.9999: 48.431 ms/op
                 executeFilterQuery·p1.00:   48.431 ms/op

Iteration   3: 48.132 ±(99.9%) 0.065 ms/op
                 executeFilterQuery·p0.00:   47.907 ms/op
                 executeFilterQuery·p0.50:   48.103 ms/op
                 executeFilterQuery·p0.90:   48.307 ms/op
                 executeFilterQuery·p0.95:   48.402 ms/op
                 executeFilterQuery·p0.99:   48.628 ms/op
                 executeFilterQuery·p0.999:  48.628 ms/op
                 executeFilterQuery·p0.9999: 48.628 ms/op
                 executeFilterQuery·p1.00:   48.628 ms/op

Iteration   4: 48.117 ±(99.9%) 0.065 ms/op
                 executeFilterQuery·p0.00:   47.907 ms/op
                 executeFilterQuery·p0.50:   48.103 ms/op
                 executeFilterQuery·p0.90:   48.366 ms/op
                 executeFilterQuery·p0.95:   48.431 ms/op
                 executeFilterQuery·p0.99:   48.628 ms/op
                 executeFilterQuery·p0.999:  48.628 ms/op
                 executeFilterQuery·p0.9999: 48.628 ms/op
                 executeFilterQuery·p1.00:   48.628 ms/op

Iteration   5: 48.121 ±(99.9%) 0.068 ms/op
                 executeFilterQuery·p0.00:   47.907 ms/op
                 executeFilterQuery·p0.50:   48.103 ms/op
                 executeFilterQuery·p0.90:   48.307 ms/op
                 executeFilterQuery·p0.95:   48.402 ms/op
                 executeFilterQuery·p0.99:   48.759 ms/op
                 executeFilterQuery·p0.999:  48.759 ms/op
                 executeFilterQuery·p0.9999: 48.759 ms/op
                 executeFilterQuery·p1.00:   48.759 ms/op


# Run progress: 76.67% complete, ETA 00:23:56
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.662 ±(99.9%) 9.332 ms/op
# Warmup Iteration   2: 48.624 ±(99.9%) 0.107 ms/op
# Warmup Iteration   3: 48.672 ±(99.9%) 0.132 ms/op
# Warmup Iteration   4: 48.711 ±(99.9%) 0.093 ms/op
# Warmup Iteration   5: 48.639 ±(99.9%) 0.076 ms/op
Iteration   1: 48.679 ±(99.9%) 0.068 ms/op
                 executeFilterQuery·p0.00:   48.366 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   48.890 ms/op
                 executeFilterQuery·p0.95:   48.929 ms/op
                 executeFilterQuery·p0.99:   49.021 ms/op
                 executeFilterQuery·p0.999:  49.021 ms/op
                 executeFilterQuery·p0.9999: 49.021 ms/op
                 executeFilterQuery·p1.00:   49.021 ms/op

Iteration   2: 48.706 ±(99.9%) 0.063 ms/op
                 executeFilterQuery·p0.00:   48.431 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   48.890 ms/op
                 executeFilterQuery·p0.95:   48.995 ms/op
                 executeFilterQuery·p0.99:   49.086 ms/op
                 executeFilterQuery·p0.999:  49.086 ms/op
                 executeFilterQuery·p0.9999: 49.086 ms/op
                 executeFilterQuery·p1.00:   49.086 ms/op

Iteration   3: 48.691 ±(99.9%) 0.068 ms/op
                 executeFilterQuery·p0.00:   48.431 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   48.903 ms/op
                 executeFilterQuery·p0.95:   48.955 ms/op
                 executeFilterQuery·p0.99:   49.086 ms/op
                 executeFilterQuery·p0.999:  49.086 ms/op
                 executeFilterQuery·p0.9999: 49.086 ms/op
                 executeFilterQuery·p1.00:   49.086 ms/op

Iteration   4: 48.704 ±(99.9%) 0.074 ms/op
                 executeFilterQuery·p0.00:   48.497 ms/op
                 executeFilterQuery·p0.50:   48.628 ms/op
                 executeFilterQuery·p0.90:   48.955 ms/op
                 executeFilterQuery·p0.95:   49.021 ms/op
                 executeFilterQuery·p0.99:   49.349 ms/op
                 executeFilterQuery·p0.999:  49.349 ms/op
                 executeFilterQuery·p0.9999: 49.349 ms/op
                 executeFilterQuery·p1.00:   49.349 ms/op

Iteration   5: 48.708 ±(99.9%) 0.101 ms/op
                 executeFilterQuery·p0.00:   48.366 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   48.955 ms/op
                 executeFilterQuery·p0.95:   49.060 ms/op
                 executeFilterQuery·p0.99:   49.742 ms/op
                 executeFilterQuery·p0.999:  49.742 ms/op
                 executeFilterQuery·p0.9999: 49.742 ms/op
                 executeFilterQuery·p1.00:   49.742 ms/op


# Run progress: 78.33% complete, ETA 00:22:14
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.787 ±(99.9%) 9.348 ms/op
# Warmup Iteration   2: 48.357 ±(99.9%) 0.096 ms/op
# Warmup Iteration   3: 48.354 ±(99.9%) 0.079 ms/op
# Warmup Iteration   4: 48.382 ±(99.9%) 0.090 ms/op
# Warmup Iteration   5: 48.340 ±(99.9%) 0.078 ms/op
Iteration   1: 48.391 ±(99.9%) 0.244 ms/op
                 executeFilterQuery·p0.00:   48.103 ms/op
                 executeFilterQuery·p0.50:   48.300 ms/op
                 executeFilterQuery·p0.90:   48.562 ms/op
                 executeFilterQuery·p0.95:   48.601 ms/op
                 executeFilterQuery·p0.99:   52.888 ms/op
                 executeFilterQuery·p0.999:  52.888 ms/op
                 executeFilterQuery·p0.9999: 52.888 ms/op
                 executeFilterQuery·p1.00:   52.888 ms/op

Iteration   2: 48.294 ±(99.9%) 0.079 ms/op
                 executeFilterQuery·p0.00:   47.972 ms/op
                 executeFilterQuery·p0.50:   48.300 ms/op
                 executeFilterQuery·p0.90:   48.562 ms/op
                 executeFilterQuery·p0.95:   48.628 ms/op
                 executeFilterQuery·p0.99:   48.693 ms/op
                 executeFilterQuery·p0.999:  48.693 ms/op
                 executeFilterQuery·p0.9999: 48.693 ms/op
                 executeFilterQuery·p1.00:   48.693 ms/op

Iteration   3: 47.990 ±(99.9%) 0.065 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   47.972 ms/op
                 executeFilterQuery·p0.90:   48.234 ms/op
                 executeFilterQuery·p0.95:   48.234 ms/op
                 executeFilterQuery·p0.99:   48.300 ms/op
                 executeFilterQuery·p0.999:  48.300 ms/op
                 executeFilterQuery·p0.9999: 48.300 ms/op
                 executeFilterQuery·p1.00:   48.300 ms/op

Iteration   4: 48.002 ±(99.9%) 0.075 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   47.972 ms/op
                 executeFilterQuery·p0.90:   48.234 ms/op
                 executeFilterQuery·p0.95:   48.300 ms/op
                 executeFilterQuery·p0.99:   48.497 ms/op
                 executeFilterQuery·p0.999:  48.497 ms/op
                 executeFilterQuery·p0.9999: 48.497 ms/op
                 executeFilterQuery·p1.00:   48.497 ms/op

Iteration   5: 48.028 ±(99.9%) 0.085 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   47.940 ms/op
                 executeFilterQuery·p0.90:   48.248 ms/op
                 executeFilterQuery·p0.95:   48.402 ms/op
                 executeFilterQuery·p0.99:   48.759 ms/op
                 executeFilterQuery·p0.999:  48.759 ms/op
                 executeFilterQuery·p0.9999: 48.759 ms/op
                 executeFilterQuery·p1.00:   48.759 ms/op


# Run progress: 80.00% complete, ETA 00:20:31
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.580 ±(99.9%) 9.040 ms/op
# Warmup Iteration   2: 48.307 ±(99.9%) 0.090 ms/op
# Warmup Iteration   3: 48.313 ±(99.9%) 0.087 ms/op
# Warmup Iteration   4: 48.341 ±(99.9%) 0.093 ms/op
# Warmup Iteration   5: 48.253 ±(99.9%) 0.081 ms/op
Iteration   1: 48.325 ±(99.9%) 0.071 ms/op
                 executeFilterQuery·p0.00:   48.038 ms/op
                 executeFilterQuery·p0.50:   48.300 ms/op
                 executeFilterQuery·p0.90:   48.562 ms/op
                 executeFilterQuery·p0.95:   48.601 ms/op
                 executeFilterQuery·p0.99:   48.693 ms/op
                 executeFilterQuery·p0.999:  48.693 ms/op
                 executeFilterQuery·p0.9999: 48.693 ms/op
                 executeFilterQuery·p1.00:   48.693 ms/op

Iteration   2: 48.313 ±(99.9%) 0.090 ms/op
                 executeFilterQuery·p0.00:   47.645 ms/op
                 executeFilterQuery·p0.50:   48.234 ms/op
                 executeFilterQuery·p0.90:   48.575 ms/op
                 executeFilterQuery·p0.95:   48.628 ms/op
                 executeFilterQuery·p0.99:   49.021 ms/op
                 executeFilterQuery·p0.999:  49.021 ms/op
                 executeFilterQuery·p0.9999: 49.021 ms/op
                 executeFilterQuery·p1.00:   49.021 ms/op

Iteration   3: 48.327 ±(99.9%) 0.078 ms/op
                 executeFilterQuery·p0.00:   48.038 ms/op
                 executeFilterQuery·p0.50:   48.300 ms/op
                 executeFilterQuery·p0.90:   48.628 ms/op
                 executeFilterQuery·p0.95:   48.628 ms/op
                 executeFilterQuery·p0.99:   48.693 ms/op
                 executeFilterQuery·p0.999:  48.693 ms/op
                 executeFilterQuery·p0.9999: 48.693 ms/op
                 executeFilterQuery·p1.00:   48.693 ms/op

Iteration   4: 48.298 ±(99.9%) 0.070 ms/op
                 executeFilterQuery·p0.00:   48.038 ms/op
                 executeFilterQuery·p0.50:   48.234 ms/op
                 executeFilterQuery·p0.90:   48.562 ms/op
                 executeFilterQuery·p0.95:   48.601 ms/op
                 executeFilterQuery·p0.99:   48.628 ms/op
                 executeFilterQuery·p0.999:  48.628 ms/op
                 executeFilterQuery·p0.9999: 48.628 ms/op
                 executeFilterQuery·p1.00:   48.628 ms/op

Iteration   5: 48.345 ±(99.9%) 0.088 ms/op
                 executeFilterQuery·p0.00:   48.103 ms/op
                 executeFilterQuery·p0.50:   48.366 ms/op
                 executeFilterQuery·p0.90:   48.562 ms/op
                 executeFilterQuery·p0.95:   48.733 ms/op
                 executeFilterQuery·p0.99:   48.955 ms/op
                 executeFilterQuery·p0.999:  48.955 ms/op
                 executeFilterQuery·p0.9999: 48.955 ms/op
                 executeFilterQuery·p1.00:   48.955 ms/op


# Run progress: 81.67% complete, ETA 00:18:48
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.705 ±(99.9%) 8.882 ms/op
# Warmup Iteration   2: 48.929 ±(99.9%) 0.188 ms/op
# Warmup Iteration   3: 49.023 ±(99.9%) 0.136 ms/op
# Warmup Iteration   4: 48.953 ±(99.9%) 0.138 ms/op
# Warmup Iteration   5: 48.688 ±(99.9%) 0.196 ms/op
Iteration   1: 48.802 ±(99.9%) 0.203 ms/op
                 executeFilterQuery·p0.00:   48.103 ms/op
                 executeFilterQuery·p0.50:   48.824 ms/op
                 executeFilterQuery·p0.90:   49.178 ms/op
                 executeFilterQuery·p0.95:   49.322 ms/op
                 executeFilterQuery·p0.99:   50.790 ms/op
                 executeFilterQuery·p0.999:  50.790 ms/op
                 executeFilterQuery·p0.9999: 50.790 ms/op
                 executeFilterQuery·p1.00:   50.790 ms/op

Iteration   2: 48.624 ±(99.9%) 0.167 ms/op
                 executeFilterQuery·p0.00:   48.103 ms/op
                 executeFilterQuery·p0.50:   48.497 ms/op
                 executeFilterQuery·p0.90:   49.034 ms/op
                 executeFilterQuery·p0.95:   49.191 ms/op
                 executeFilterQuery·p0.99:   50.135 ms/op
                 executeFilterQuery·p0.999:  50.135 ms/op
                 executeFilterQuery·p0.9999: 50.135 ms/op
                 executeFilterQuery·p1.00:   50.135 ms/op

Iteration   3: 48.721 ±(99.9%) 0.141 ms/op
                 executeFilterQuery·p0.00:   48.038 ms/op
                 executeFilterQuery·p0.50:   48.824 ms/op
                 executeFilterQuery·p0.90:   49.100 ms/op
                 executeFilterQuery·p0.95:   49.218 ms/op
                 executeFilterQuery·p0.99:   49.349 ms/op
                 executeFilterQuery·p0.999:  49.349 ms/op
                 executeFilterQuery·p0.9999: 49.349 ms/op
                 executeFilterQuery·p1.00:   49.349 ms/op

Iteration   4: 48.592 ±(99.9%) 0.226 ms/op
                 executeFilterQuery·p0.00:   47.972 ms/op
                 executeFilterQuery·p0.50:   48.431 ms/op
                 executeFilterQuery·p0.90:   49.034 ms/op
                 executeFilterQuery·p0.95:   49.257 ms/op
                 executeFilterQuery·p0.99:   50.987 ms/op
                 executeFilterQuery·p0.999:  50.987 ms/op
                 executeFilterQuery·p0.9999: 50.987 ms/op
                 executeFilterQuery·p1.00:   50.987 ms/op

Iteration   5: 48.816 ±(99.9%) 0.197 ms/op
                 executeFilterQuery·p0.00:   48.038 ms/op
                 executeFilterQuery·p0.50:   48.890 ms/op
                 executeFilterQuery·p0.90:   49.152 ms/op
                 executeFilterQuery·p0.95:   49.349 ms/op
                 executeFilterQuery·p0.99:   50.921 ms/op
                 executeFilterQuery·p0.999:  50.921 ms/op
                 executeFilterQuery·p0.9999: 50.921 ms/op
                 executeFilterQuery·p1.00:   50.921 ms/op



Result "benchmarks.filter_query.VectorisedSimd.executeFilterQuery":
  N = 1683
  mean =     48.396 ±(99.9%) 0.031 ms/op

  Histogram, ms/op:
    [47.000, 47.500) = 0 
    [47.500, 48.000) = 218 
    [48.000, 48.500) = 905 
    [48.500, 49.000) = 466 
    [49.000, 49.500) = 85 
    [49.500, 50.000) = 1 
    [50.000, 50.500) = 3 
    [50.500, 51.000) = 4 
    [51.000, 51.500) = 0 
    [51.500, 52.000) = 0 
    [52.000, 52.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     47.514 ms/op
     p(50.0000) =     48.300 ms/op
     p(90.0000) =     48.890 ms/op
     p(95.0000) =     49.021 ms/op
     p(99.0000) =     49.294 ms/op
     p(99.9000) =     51.588 ms/op
     p(99.9900) =     52.888 ms/op
     p(99.9990) =     52.888 ms/op
     p(99.9999) =     52.888 ms/op
    p(100.0000) =     52.888 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 83.33% complete, ETA 00:17:06
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.398 ±(99.9%) 9.252 ms/op
# Warmup Iteration   2: 48.519 ±(99.9%) 0.124 ms/op
# Warmup Iteration   3: 48.497 ±(99.9%) 0.082 ms/op
# Warmup Iteration   4: 48.528 ±(99.9%) 0.142 ms/op
# Warmup Iteration   5: 48.697 ±(99.9%) 0.090 ms/op
Iteration   1: 48.732 ±(99.9%) 0.086 ms/op
                 executeFilterQuery·p0.00:   48.497 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   48.955 ms/op
                 executeFilterQuery·p0.95:   48.995 ms/op
                 executeFilterQuery·p0.99:   49.807 ms/op
                 executeFilterQuery·p0.999:  49.807 ms/op
                 executeFilterQuery·p0.9999: 49.807 ms/op
                 executeFilterQuery·p1.00:   49.807 ms/op

Iteration   2: 48.687 ±(99.9%) 0.089 ms/op
                 executeFilterQuery·p0.00:   47.907 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   48.955 ms/op
                 executeFilterQuery·p0.95:   49.021 ms/op
                 executeFilterQuery·p0.99:   49.086 ms/op
                 executeFilterQuery·p0.999:  49.086 ms/op
                 executeFilterQuery·p0.9999: 49.086 ms/op
                 executeFilterQuery·p1.00:   49.086 ms/op

Iteration   3: 48.738 ±(99.9%) 0.066 ms/op
                 executeFilterQuery·p0.00:   48.497 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   48.955 ms/op
                 executeFilterQuery·p0.95:   48.995 ms/op
                 executeFilterQuery·p0.99:   49.021 ms/op
                 executeFilterQuery·p0.999:  49.021 ms/op
                 executeFilterQuery·p0.9999: 49.021 ms/op
                 executeFilterQuery·p1.00:   49.021 ms/op

Iteration   4: 48.711 ±(99.9%) 0.067 ms/op
                 executeFilterQuery·p0.00:   48.431 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   48.955 ms/op
                 executeFilterQuery·p0.95:   48.991 ms/op
                 executeFilterQuery·p0.99:   49.021 ms/op
                 executeFilterQuery·p0.999:  49.021 ms/op
                 executeFilterQuery·p0.9999: 49.021 ms/op
                 executeFilterQuery·p1.00:   49.021 ms/op

Iteration   5: 48.687 ±(99.9%) 0.064 ms/op
                 executeFilterQuery·p0.00:   48.366 ms/op
                 executeFilterQuery·p0.50:   48.660 ms/op
                 executeFilterQuery·p0.90:   48.890 ms/op
                 executeFilterQuery·p0.95:   48.926 ms/op
                 executeFilterQuery·p0.99:   49.021 ms/op
                 executeFilterQuery·p0.999:  49.021 ms/op
                 executeFilterQuery·p0.9999: 49.021 ms/op
                 executeFilterQuery·p1.00:   49.021 ms/op


# Run progress: 85.00% complete, ETA 00:15:23
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.878 ±(99.9%) 9.078 ms/op
# Warmup Iteration   2: 48.492 ±(99.9%) 0.104 ms/op
# Warmup Iteration   3: 48.342 ±(99.9%) 0.105 ms/op
# Warmup Iteration   4: 48.610 ±(99.9%) 0.092 ms/op
# Warmup Iteration   5: 48.614 ±(99.9%) 0.120 ms/op
Iteration   1: 48.529 ±(99.9%) 0.075 ms/op
                 executeFilterQuery·p0.00:   48.234 ms/op
                 executeFilterQuery·p0.50:   48.497 ms/op
                 executeFilterQuery·p0.90:   48.772 ms/op
                 executeFilterQuery·p0.95:   48.824 ms/op
                 executeFilterQuery·p0.99:   49.086 ms/op
                 executeFilterQuery·p0.999:  49.086 ms/op
                 executeFilterQuery·p0.9999: 49.086 ms/op
                 executeFilterQuery·p1.00:   49.086 ms/op

Iteration   2: 48.596 ±(99.9%) 0.069 ms/op
                 executeFilterQuery·p0.00:   48.366 ms/op
                 executeFilterQuery·p0.50:   48.562 ms/op
                 executeFilterQuery·p0.90:   48.824 ms/op
                 executeFilterQuery·p0.95:   48.864 ms/op
                 executeFilterQuery·p0.99:   49.152 ms/op
                 executeFilterQuery·p0.999:  49.152 ms/op
                 executeFilterQuery·p0.9999: 49.152 ms/op
                 executeFilterQuery·p1.00:   49.152 ms/op

Iteration   3: 48.521 ±(99.9%) 0.386 ms/op
                 executeFilterQuery·p0.00:   47.972 ms/op
                 executeFilterQuery·p0.50:   48.431 ms/op
                 executeFilterQuery·p0.90:   48.706 ms/op
                 executeFilterQuery·p0.95:   48.837 ms/op
                 executeFilterQuery·p0.99:   55.443 ms/op
                 executeFilterQuery·p0.999:  55.443 ms/op
                 executeFilterQuery·p0.9999: 55.443 ms/op
                 executeFilterQuery·p1.00:   55.443 ms/op

Iteration   4: 48.260 ±(99.9%) 0.153 ms/op
                 executeFilterQuery·p0.00:   47.972 ms/op
                 executeFilterQuery·p0.50:   48.234 ms/op
                 executeFilterQuery·p0.90:   48.503 ms/op
                 executeFilterQuery·p0.95:   48.598 ms/op
                 executeFilterQuery·p0.99:   50.790 ms/op
                 executeFilterQuery·p0.999:  50.790 ms/op
                 executeFilterQuery·p0.9999: 50.790 ms/op
                 executeFilterQuery·p1.00:   50.790 ms/op

Iteration   5: 48.384 ±(99.9%) 0.082 ms/op
                 executeFilterQuery·p0.00:   47.972 ms/op
                 executeFilterQuery·p0.50:   48.366 ms/op
                 executeFilterQuery·p0.90:   48.628 ms/op
                 executeFilterQuery·p0.95:   48.733 ms/op
                 executeFilterQuery·p0.99:   48.824 ms/op
                 executeFilterQuery·p0.999:  48.824 ms/op
                 executeFilterQuery·p0.9999: 48.824 ms/op
                 executeFilterQuery·p1.00:   48.824 ms/op


# Run progress: 86.67% complete, ETA 00:13:40
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.416 ±(99.9%) 8.997 ms/op
# Warmup Iteration   2: 48.093 ±(99.9%) 0.131 ms/op
# Warmup Iteration   3: 48.053 ±(99.9%) 0.076 ms/op
# Warmup Iteration   4: 48.102 ±(99.9%) 0.088 ms/op
# Warmup Iteration   5: 48.055 ±(99.9%) 0.077 ms/op
Iteration   1: 48.069 ±(99.9%) 0.091 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   48.038 ms/op
                 executeFilterQuery·p0.90:   48.300 ms/op
                 executeFilterQuery·p0.95:   48.300 ms/op
                 executeFilterQuery·p0.99:   49.218 ms/op
                 executeFilterQuery·p0.999:  49.218 ms/op
                 executeFilterQuery·p0.9999: 49.218 ms/op
                 executeFilterQuery·p1.00:   49.218 ms/op

Iteration   2: 48.060 ±(99.9%) 0.118 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   48.038 ms/op
                 executeFilterQuery·p0.90:   48.300 ms/op
                 executeFilterQuery·p0.95:   48.402 ms/op
                 executeFilterQuery·p0.99:   49.938 ms/op
                 executeFilterQuery·p0.999:  49.938 ms/op
                 executeFilterQuery·p0.9999: 49.938 ms/op
                 executeFilterQuery·p1.00:   49.938 ms/op

Iteration   3: 48.028 ±(99.9%) 0.092 ms/op
                 executeFilterQuery·p0.00:   47.579 ms/op
                 executeFilterQuery·p0.50:   48.005 ms/op
                 executeFilterQuery·p0.90:   48.300 ms/op
                 executeFilterQuery·p0.95:   48.438 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op

Iteration   4: 48.036 ±(99.9%) 0.063 ms/op
                 executeFilterQuery·p0.00:   47.841 ms/op
                 executeFilterQuery·p0.50:   47.972 ms/op
                 executeFilterQuery·p0.90:   48.300 ms/op
                 executeFilterQuery·p0.95:   48.300 ms/op
                 executeFilterQuery·p0.99:   48.366 ms/op
                 executeFilterQuery·p0.999:  48.366 ms/op
                 executeFilterQuery·p0.9999: 48.366 ms/op
                 executeFilterQuery·p1.00:   48.366 ms/op

Iteration   5: 48.062 ±(99.9%) 0.070 ms/op
                 executeFilterQuery·p0.00:   47.841 ms/op
                 executeFilterQuery·p0.50:   48.038 ms/op
                 executeFilterQuery·p0.90:   48.241 ms/op
                 executeFilterQuery·p0.95:   48.366 ms/op
                 executeFilterQuery·p0.99:   48.628 ms/op
                 executeFilterQuery·p0.999:  48.628 ms/op
                 executeFilterQuery·p0.9999: 48.628 ms/op
                 executeFilterQuery·p1.00:   48.628 ms/op


# Run progress: 88.33% complete, ETA 00:11:58
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.781 ±(99.9%) 9.819 ms/op
# Warmup Iteration   2: 48.503 ±(99.9%) 0.094 ms/op
# Warmup Iteration   3: 48.489 ±(99.9%) 0.088 ms/op
# Warmup Iteration   4: 48.601 ±(99.9%) 0.113 ms/op
# Warmup Iteration   5: 48.504 ±(99.9%) 0.064 ms/op
Iteration   1: 48.494 ±(99.9%) 0.066 ms/op
                 executeFilterQuery·p0.00:   48.234 ms/op
                 executeFilterQuery·p0.50:   48.497 ms/op
                 executeFilterQuery·p0.90:   48.693 ms/op
                 executeFilterQuery·p0.95:   48.798 ms/op
                 executeFilterQuery·p0.99:   48.955 ms/op
                 executeFilterQuery·p0.999:  48.955 ms/op
                 executeFilterQuery·p0.9999: 48.955 ms/op
                 executeFilterQuery·p1.00:   48.955 ms/op

Iteration   2: 48.494 ±(99.9%) 0.082 ms/op
                 executeFilterQuery·p0.00:   47.710 ms/op
                 executeFilterQuery·p0.50:   48.497 ms/op
                 executeFilterQuery·p0.90:   48.759 ms/op
                 executeFilterQuery·p0.95:   48.864 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op

Iteration   3: 48.500 ±(99.9%) 0.056 ms/op
                 executeFilterQuery·p0.00:   48.300 ms/op
                 executeFilterQuery·p0.50:   48.497 ms/op
                 executeFilterQuery·p0.90:   48.641 ms/op
                 executeFilterQuery·p0.95:   48.733 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op

Iteration   4: 48.495 ±(99.9%) 0.062 ms/op
                 executeFilterQuery·p0.00:   48.300 ms/op
                 executeFilterQuery·p0.50:   48.497 ms/op
                 executeFilterQuery·p0.90:   48.693 ms/op
                 executeFilterQuery·p0.95:   48.733 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op

Iteration   5: 48.503 ±(99.9%) 0.075 ms/op
                 executeFilterQuery·p0.00:   48.169 ms/op
                 executeFilterQuery·p0.50:   48.497 ms/op
                 executeFilterQuery·p0.90:   48.706 ms/op
                 executeFilterQuery·p0.95:   48.798 ms/op
                 executeFilterQuery·p0.99:   49.218 ms/op
                 executeFilterQuery·p0.999:  49.218 ms/op
                 executeFilterQuery·p0.9999: 49.218 ms/op
                 executeFilterQuery·p1.00:   49.218 ms/op


# Run progress: 90.00% complete, ETA 00:10:15
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.644 ±(99.9%) 8.282 ms/op
# Warmup Iteration   2: 48.788 ±(99.9%) 0.137 ms/op
# Warmup Iteration   3: 48.772 ±(99.9%) 0.142 ms/op
# Warmup Iteration   4: 48.756 ±(99.9%) 0.143 ms/op
# Warmup Iteration   5: 48.755 ±(99.9%) 0.136 ms/op
Iteration   1: 48.739 ±(99.9%) 0.126 ms/op
                 executeFilterQuery·p0.00:   48.431 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   48.890 ms/op
                 executeFilterQuery·p0.95:   48.968 ms/op
                 executeFilterQuery·p0.99:   50.528 ms/op
                 executeFilterQuery·p0.999:  50.528 ms/op
                 executeFilterQuery·p0.9999: 50.528 ms/op
                 executeFilterQuery·p1.00:   50.528 ms/op

Iteration   2: 48.687 ±(99.9%) 0.058 ms/op
                 executeFilterQuery·p0.00:   48.431 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   48.890 ms/op
                 executeFilterQuery·p0.95:   48.929 ms/op
                 executeFilterQuery·p0.99:   49.086 ms/op
                 executeFilterQuery·p0.999:  49.086 ms/op
                 executeFilterQuery·p0.9999: 49.086 ms/op
                 executeFilterQuery·p1.00:   49.086 ms/op

Iteration   3: 48.778 ±(99.9%) 0.166 ms/op
                 executeFilterQuery·p0.00:   48.497 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   48.903 ms/op
                 executeFilterQuery·p0.95:   49.060 ms/op
                 executeFilterQuery·p0.99:   50.921 ms/op
                 executeFilterQuery·p0.999:  50.921 ms/op
                 executeFilterQuery·p0.9999: 50.921 ms/op
                 executeFilterQuery·p1.00:   50.921 ms/op

Iteration   4: 48.511 ±(99.9%) 0.187 ms/op
                 executeFilterQuery·p0.00:   48.103 ms/op
                 executeFilterQuery·p0.50:   48.366 ms/op
                 executeFilterQuery·p0.90:   48.824 ms/op
                 executeFilterQuery·p0.95:   50.004 ms/op
                 executeFilterQuery·p0.99:   50.397 ms/op
                 executeFilterQuery·p0.999:  50.397 ms/op
                 executeFilterQuery·p0.9999: 50.397 ms/op
                 executeFilterQuery·p1.00:   50.397 ms/op

Iteration   5: 48.416 ±(99.9%) 0.107 ms/op
                 executeFilterQuery·p0.00:   48.103 ms/op
                 executeFilterQuery·p0.50:   48.366 ms/op
                 executeFilterQuery·p0.90:   48.628 ms/op
                 executeFilterQuery·p0.95:   48.693 ms/op
                 executeFilterQuery·p0.99:   50.135 ms/op
                 executeFilterQuery·p0.999:  50.135 ms/op
                 executeFilterQuery·p0.9999: 50.135 ms/op
                 executeFilterQuery·p1.00:   50.135 ms/op



Result "benchmarks.filter_query.VectorisedSimd.executeFilterQuery":
  N = 1685
  mean =     48.468 ±(99.9%) 0.030 ms/op

  Histogram, ms/op:
    [47.000, 47.500) = 0 
    [47.500, 48.000) = 176 
    [48.000, 48.500) = 747 
    [48.500, 49.000) = 726 
    [49.000, 49.500) = 22 
    [49.500, 50.000) = 2 
    [50.000, 50.500) = 7 
    [50.500, 51.000) = 4 
    [51.000, 51.500) = 0 
    [51.500, 52.000) = 0 
    [52.000, 52.500) = 0 
    [52.500, 53.000) = 0 
    [53.000, 53.500) = 0 
    [53.500, 54.000) = 0 
    [54.000, 54.500) = 0 
    [54.500, 55.000) = 0 
    [55.000, 55.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     47.579 ms/op
     p(50.0000) =     48.497 ms/op
     p(90.0000) =     48.824 ms/op
     p(95.0000) =     48.890 ms/op
     p(99.0000) =     49.161 ms/op
     p(99.9000) =     52.341 ms/op
     p(99.9900) =     55.443 ms/op
     p(99.9990) =     55.443 ms/op
     p(99.9999) =     55.443 ms/op
    p(100.0000) =     55.443 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 91.67% complete, ETA 00:08:32
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.288 ±(99.9%) 8.178 ms/op
# Warmup Iteration   2: 48.104 ±(99.9%) 0.155 ms/op
# Warmup Iteration   3: 48.083 ±(99.9%) 0.224 ms/op
# Warmup Iteration   4: 48.100 ±(99.9%) 0.203 ms/op
# Warmup Iteration   5: 48.009 ±(99.9%) 0.118 ms/op
Iteration   1: 47.999 ±(99.9%) 0.086 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   47.972 ms/op
                 executeFilterQuery·p0.90:   48.169 ms/op
                 executeFilterQuery·p0.95:   48.234 ms/op
                 executeFilterQuery·p0.99:   49.283 ms/op
                 executeFilterQuery·p0.999:  49.283 ms/op
                 executeFilterQuery·p0.9999: 49.283 ms/op
                 executeFilterQuery·p1.00:   49.283 ms/op

Iteration   2: 47.998 ±(99.9%) 0.143 ms/op
                 executeFilterQuery·p0.00:   47.055 ms/op
                 executeFilterQuery·p0.50:   47.972 ms/op
                 executeFilterQuery·p0.90:   48.234 ms/op
                 executeFilterQuery·p0.95:   48.366 ms/op
                 executeFilterQuery·p0.99:   50.070 ms/op
                 executeFilterQuery·p0.999:  50.070 ms/op
                 executeFilterQuery·p0.9999: 50.070 ms/op
                 executeFilterQuery·p1.00:   50.070 ms/op

Iteration   3: 47.996 ±(99.9%) 0.062 ms/op
                 executeFilterQuery·p0.00:   47.710 ms/op
                 executeFilterQuery·p0.50:   47.972 ms/op
                 executeFilterQuery·p0.90:   48.234 ms/op
                 executeFilterQuery·p0.95:   48.234 ms/op
                 executeFilterQuery·p0.99:   48.234 ms/op
                 executeFilterQuery·p0.999:  48.234 ms/op
                 executeFilterQuery·p0.9999: 48.234 ms/op
                 executeFilterQuery·p1.00:   48.234 ms/op

Iteration   4: 48.110 ±(99.9%) 0.310 ms/op
                 executeFilterQuery·p0.00:   47.645 ms/op
                 executeFilterQuery·p0.50:   47.972 ms/op
                 executeFilterQuery·p0.90:   48.234 ms/op
                 executeFilterQuery·p0.95:   48.333 ms/op
                 executeFilterQuery·p0.99:   53.805 ms/op
                 executeFilterQuery·p0.999:  53.805 ms/op
                 executeFilterQuery·p0.9999: 53.805 ms/op
                 executeFilterQuery·p1.00:   53.805 ms/op

Iteration   5: 48.134 ±(99.9%) 0.337 ms/op
                 executeFilterQuery·p0.00:   47.710 ms/op
                 executeFilterQuery·p0.50:   48.038 ms/op
                 executeFilterQuery·p0.90:   48.234 ms/op
                 executeFilterQuery·p0.95:   48.595 ms/op
                 executeFilterQuery·p0.99:   54.395 ms/op
                 executeFilterQuery·p0.999:  54.395 ms/op
                 executeFilterQuery·p0.9999: 54.395 ms/op
                 executeFilterQuery·p1.00:   54.395 ms/op


# Run progress: 93.33% complete, ETA 00:06:50
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.682 ±(99.9%) 9.503 ms/op
# Warmup Iteration   2: 48.331 ±(99.9%) 0.073 ms/op
# Warmup Iteration   3: 48.343 ±(99.9%) 0.065 ms/op
# Warmup Iteration   4: 48.271 ±(99.9%) 0.101 ms/op
# Warmup Iteration   5: 48.345 ±(99.9%) 0.078 ms/op
Iteration   1: 48.320 ±(99.9%) 0.069 ms/op
                 executeFilterQuery·p0.00:   47.972 ms/op
                 executeFilterQuery·p0.50:   48.300 ms/op
                 executeFilterQuery·p0.90:   48.562 ms/op
                 executeFilterQuery·p0.95:   48.562 ms/op
                 executeFilterQuery·p0.99:   48.628 ms/op
                 executeFilterQuery·p0.999:  48.628 ms/op
                 executeFilterQuery·p0.9999: 48.628 ms/op
                 executeFilterQuery·p1.00:   48.628 ms/op

Iteration   2: 48.416 ±(99.9%) 0.052 ms/op
                 executeFilterQuery·p0.00:   48.103 ms/op
                 executeFilterQuery·p0.50:   48.431 ms/op
                 executeFilterQuery·p0.90:   48.569 ms/op
                 executeFilterQuery·p0.95:   48.664 ms/op
                 executeFilterQuery·p0.99:   48.759 ms/op
                 executeFilterQuery·p0.999:  48.759 ms/op
                 executeFilterQuery·p0.9999: 48.759 ms/op
                 executeFilterQuery·p1.00:   48.759 ms/op

Iteration   3: 48.469 ±(99.9%) 0.197 ms/op
                 executeFilterQuery·p0.00:   48.169 ms/op
                 executeFilterQuery·p0.50:   48.398 ms/op
                 executeFilterQuery·p0.90:   48.628 ms/op
                 executeFilterQuery·p0.95:   48.628 ms/op
                 executeFilterQuery·p0.99:   52.167 ms/op
                 executeFilterQuery·p0.999:  52.167 ms/op
                 executeFilterQuery·p0.9999: 52.167 ms/op
                 executeFilterQuery·p1.00:   52.167 ms/op

Iteration   4: 48.414 ±(99.9%) 0.077 ms/op
                 executeFilterQuery·p0.00:   48.103 ms/op
                 executeFilterQuery·p0.50:   48.366 ms/op
                 executeFilterQuery·p0.90:   48.562 ms/op
                 executeFilterQuery·p0.95:   48.664 ms/op
                 executeFilterQuery·p0.99:   49.480 ms/op
                 executeFilterQuery·p0.999:  49.480 ms/op
                 executeFilterQuery·p0.9999: 49.480 ms/op
                 executeFilterQuery·p1.00:   49.480 ms/op

Iteration   5: 48.433 ±(99.9%) 0.062 ms/op
                 executeFilterQuery·p0.00:   48.169 ms/op
                 executeFilterQuery·p0.50:   48.431 ms/op
                 executeFilterQuery·p0.90:   48.628 ms/op
                 executeFilterQuery·p0.95:   48.664 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op


# Run progress: 95.00% complete, ETA 00:05:07
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.431 ±(99.9%) 8.255 ms/op
# Warmup Iteration   2: 48.416 ±(99.9%) 0.077 ms/op
# Warmup Iteration   3: 48.407 ±(99.9%) 0.070 ms/op
# Warmup Iteration   4: 48.436 ±(99.9%) 0.081 ms/op
# Warmup Iteration   5: 48.452 ±(99.9%) 0.063 ms/op
Iteration   1: 48.463 ±(99.9%) 0.058 ms/op
                 executeFilterQuery·p0.00:   48.234 ms/op
                 executeFilterQuery·p0.50:   48.431 ms/op
                 executeFilterQuery·p0.90:   48.693 ms/op
                 executeFilterQuery·p0.95:   48.693 ms/op
                 executeFilterQuery·p0.99:   48.824 ms/op
                 executeFilterQuery·p0.999:  48.824 ms/op
                 executeFilterQuery·p0.9999: 48.824 ms/op
                 executeFilterQuery·p1.00:   48.824 ms/op

Iteration   2: 48.420 ±(99.9%) 0.089 ms/op
                 executeFilterQuery·p0.00:   47.579 ms/op
                 executeFilterQuery·p0.50:   48.431 ms/op
                 executeFilterQuery·p0.90:   48.628 ms/op
                 executeFilterQuery·p0.95:   48.628 ms/op
                 executeFilterQuery·p0.99:   49.349 ms/op
                 executeFilterQuery·p0.999:  49.349 ms/op
                 executeFilterQuery·p0.9999: 49.349 ms/op
                 executeFilterQuery·p1.00:   49.349 ms/op

Iteration   3: 48.406 ±(99.9%) 0.070 ms/op
                 executeFilterQuery·p0.00:   48.038 ms/op
                 executeFilterQuery·p0.50:   48.431 ms/op
                 executeFilterQuery·p0.90:   48.693 ms/op
                 executeFilterQuery·p0.95:   48.693 ms/op
                 executeFilterQuery·p0.99:   48.759 ms/op
                 executeFilterQuery·p0.999:  48.759 ms/op
                 executeFilterQuery·p0.9999: 48.759 ms/op
                 executeFilterQuery·p1.00:   48.759 ms/op

Iteration   4: 48.441 ±(99.9%) 0.066 ms/op
                 executeFilterQuery·p0.00:   48.234 ms/op
                 executeFilterQuery·p0.50:   48.431 ms/op
                 executeFilterQuery·p0.90:   48.634 ms/op
                 executeFilterQuery·p0.95:   48.765 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op

Iteration   5: 48.434 ±(99.9%) 0.077 ms/op
                 executeFilterQuery·p0.00:   48.169 ms/op
                 executeFilterQuery·p0.50:   48.398 ms/op
                 executeFilterQuery·p0.90:   48.693 ms/op
                 executeFilterQuery·p0.95:   48.759 ms/op
                 executeFilterQuery·p0.99:   49.021 ms/op
                 executeFilterQuery·p0.999:  49.021 ms/op
                 executeFilterQuery·p0.9999: 49.021 ms/op
                 executeFilterQuery·p1.00:   49.021 ms/op


# Run progress: 96.67% complete, ETA 00:03:25
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.455 ±(99.9%) 9.136 ms/op
# Warmup Iteration   2: 48.199 ±(99.9%) 0.090 ms/op
# Warmup Iteration   3: 48.135 ±(99.9%) 0.108 ms/op
# Warmup Iteration   4: 48.216 ±(99.9%) 0.101 ms/op
# Warmup Iteration   5: 48.161 ±(99.9%) 0.070 ms/op
Iteration   1: 48.110 ±(99.9%) 0.090 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   48.103 ms/op
                 executeFilterQuery·p0.90:   48.307 ms/op
                 executeFilterQuery·p0.95:   48.533 ms/op
                 executeFilterQuery·p0.99:   49.021 ms/op
                 executeFilterQuery·p0.999:  49.021 ms/op
                 executeFilterQuery·p0.9999: 49.021 ms/op
                 executeFilterQuery·p1.00:   49.021 ms/op

Iteration   2: 48.185 ±(99.9%) 0.064 ms/op
                 executeFilterQuery·p0.00:   47.907 ms/op
                 executeFilterQuery·p0.50:   48.202 ms/op
                 executeFilterQuery·p0.90:   48.366 ms/op
                 executeFilterQuery·p0.95:   48.431 ms/op
                 executeFilterQuery·p0.99:   48.562 ms/op
                 executeFilterQuery·p0.999:  48.562 ms/op
                 executeFilterQuery·p0.9999: 48.562 ms/op
                 executeFilterQuery·p1.00:   48.562 ms/op

Iteration   3: 48.197 ±(99.9%) 0.064 ms/op
                 executeFilterQuery·p0.00:   47.907 ms/op
                 executeFilterQuery·p0.50:   48.234 ms/op
                 executeFilterQuery·p0.90:   48.366 ms/op
                 executeFilterQuery·p0.95:   48.431 ms/op
                 executeFilterQuery·p0.99:   48.693 ms/op
                 executeFilterQuery·p0.999:  48.693 ms/op
                 executeFilterQuery·p0.9999: 48.693 ms/op
                 executeFilterQuery·p1.00:   48.693 ms/op

Iteration   4: 48.204 ±(99.9%) 0.102 ms/op
                 executeFilterQuery·p0.00:   47.972 ms/op
                 executeFilterQuery·p0.50:   48.169 ms/op
                 executeFilterQuery·p0.90:   48.366 ms/op
                 executeFilterQuery·p0.95:   48.431 ms/op
                 executeFilterQuery·p0.99:   49.938 ms/op
                 executeFilterQuery·p0.999:  49.938 ms/op
                 executeFilterQuery·p0.9999: 49.938 ms/op
                 executeFilterQuery·p1.00:   49.938 ms/op

Iteration   5: 48.197 ±(99.9%) 0.073 ms/op
                 executeFilterQuery·p0.00:   47.907 ms/op
                 executeFilterQuery·p0.50:   48.234 ms/op
                 executeFilterQuery·p0.90:   48.366 ms/op
                 executeFilterQuery·p0.95:   48.497 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op


# Run progress: 98.33% complete, ETA 00:01:42
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

49.379 ±(99.9%) 11.111 ms/op
# Warmup Iteration   2: 48.225 ±(99.9%) 0.110 ms/op
# Warmup Iteration   3: 48.125 ±(99.9%) 0.078 ms/op
# Warmup Iteration   4: 48.193 ±(99.9%) 0.110 ms/op
# Warmup Iteration   5: 48.170 ±(99.9%) 0.063 ms/op
Iteration   1: 48.170 ±(99.9%) 0.077 ms/op
                 executeFilterQuery·p0.00:   47.972 ms/op
                 executeFilterQuery·p0.50:   48.103 ms/op
                 executeFilterQuery·p0.90:   48.431 ms/op
                 executeFilterQuery·p0.95:   48.497 ms/op
                 executeFilterQuery·p0.99:   48.955 ms/op
                 executeFilterQuery·p0.999:  48.955 ms/op
                 executeFilterQuery·p0.9999: 48.955 ms/op
                 executeFilterQuery·p1.00:   48.955 ms/op

Iteration   2: 48.395 ±(99.9%) 0.114 ms/op
                 executeFilterQuery·p0.00:   47.841 ms/op
                 executeFilterQuery·p0.50:   48.366 ms/op
                 executeFilterQuery·p0.90:   48.693 ms/op
                 executeFilterQuery·p0.95:   48.759 ms/op
                 executeFilterQuery·p0.99:   49.218 ms/op
                 executeFilterQuery·p0.999:  49.218 ms/op
                 executeFilterQuery·p0.9999: 49.218 ms/op
                 executeFilterQuery·p1.00:   49.218 ms/op

Iteration   3: 48.516 ±(99.9%) 0.078 ms/op
                 executeFilterQuery·p0.00:   48.234 ms/op
                 executeFilterQuery·p0.50:   48.464 ms/op
                 executeFilterQuery·p0.90:   48.759 ms/op
                 executeFilterQuery·p0.95:   48.824 ms/op
                 executeFilterQuery·p0.99:   49.218 ms/op
                 executeFilterQuery·p0.999:  49.218 ms/op
                 executeFilterQuery·p0.9999: 49.218 ms/op
                 executeFilterQuery·p1.00:   49.218 ms/op

Iteration   4: 48.508 ±(99.9%) 0.074 ms/op
                 executeFilterQuery·p0.00:   48.234 ms/op
                 executeFilterQuery·p0.50:   48.431 ms/op
                 executeFilterQuery·p0.90:   48.759 ms/op
                 executeFilterQuery·p0.95:   48.896 ms/op
                 executeFilterQuery·p0.99:   48.955 ms/op
                 executeFilterQuery·p0.999:  48.955 ms/op
                 executeFilterQuery·p0.9999: 48.955 ms/op
                 executeFilterQuery·p1.00:   48.955 ms/op

Iteration   5: 48.519 ±(99.9%) 0.101 ms/op
                 executeFilterQuery·p0.00:   48.234 ms/op
                 executeFilterQuery·p0.50:   48.497 ms/op
                 executeFilterQuery·p0.90:   48.759 ms/op
                 executeFilterQuery·p0.95:   48.795 ms/op
                 executeFilterQuery·p0.99:   50.004 ms/op
                 executeFilterQuery·p0.999:  50.004 ms/op
                 executeFilterQuery·p0.9999: 50.004 ms/op
                 executeFilterQuery·p1.00:   50.004 ms/op



Result "benchmarks.filter_query.VectorisedSimd.executeFilterQuery":
  N = 1708
  mean =     48.297 ±(99.9%) 0.028 ms/op

  Histogram, ms/op:
    [47.000, 47.500) = 3 
    [47.500, 48.000) = 268 
    [48.000, 48.500) = 1159 
    [48.500, 49.000) = 262 
    [49.000, 49.500) = 8 
    [49.500, 50.000) = 3 
    [50.000, 50.500) = 2 
    [50.500, 51.000) = 0 
    [51.000, 51.500) = 0 
    [51.500, 52.000) = 0 
    [52.000, 52.500) = 1 
    [52.500, 53.000) = 0 
    [53.000, 53.500) = 0 
    [53.500, 54.000) = 1 
    [54.000, 54.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     47.055 ms/op
     p(50.0000) =     48.300 ms/op
     p(90.0000) =     48.628 ms/op
     p(95.0000) =     48.693 ms/op
     p(99.0000) =     48.955 ms/op
     p(99.9000) =     53.977 ms/op
     p(99.9900) =     54.395 ms/op
     p(99.9990) =     54.395 ms/op
     p(99.9999) =     54.395 ms/op
    p(100.0000) =     54.395 ms/op


# Run complete. Total time: 01:42:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                    (tableFilePath)    Mode   Cnt   Score   Error  Units
NonVectorisedNonSimd.executeFilterQuery                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample  1666  46.359 ± 0.021  ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        45.482          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        46.334          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        46.727          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        46.793          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        46.924          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        47.077          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999  /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        47.120          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        47.120          ms/op
NonVectorisedNonSimd.executeFilterQuery                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample  1608  52.156 ± 0.051  ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        50.856          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        52.167          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        52.953          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        53.019          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        53.215          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        53.879          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999  /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        54.198          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        54.198          ms/op
NonVectorisedNonSimd.executeFilterQuery                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample  1680  46.851 ± 0.025  ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        46.399          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        46.727          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        47.383          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        47.448          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        47.645          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        48.626          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999  /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        49.742          ms/op
NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        49.742          ms/op
NonVectorisedSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample  1754  39.705 ± 0.036  ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        38.404          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        39.649          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        40.174          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        40.305          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        40.567          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        45.234          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        50.528          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        50.528          ms/op
NonVectorisedSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample  1789  39.561 ± 0.029  ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        38.470          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        39.518          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        40.042          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        40.174          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        40.501          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        42.664          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        42.664          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        42.664          ms/op
NonVectorisedSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample  1790  39.649 ± 0.028  ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        38.535          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        39.649          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        40.108          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        40.239          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        40.442          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        42.653          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        42.861          ms/op
NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        42.861          ms/op
VectorisedNonSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample  1903  30.342 ± 0.107  ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        29.655          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        30.114          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        30.212          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        30.343          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        38.142          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        39.153          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        46.203          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        46.203          ms/op
VectorisedNonSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample  1620  55.095 ± 0.037  ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        54.657          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        55.050          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        55.312          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        55.378          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        55.640          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        63.095          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        63.177          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        63.177          ms/op
VectorisedNonSimd.executeFilterQuery                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample  1345  87.865 ± 0.101  ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        86.245          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        87.425          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        89.653          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        89.784          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        90.178          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        90.525          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999     /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        90.571          ms/op
VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00       /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        90.571          ms/op
VectorisedSimd.executeFilterQuery                                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample  1683  48.396 ± 0.031  ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        47.514          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        48.300          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        48.890          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        49.021          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        49.294          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        51.588          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999        /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        52.888          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample        52.888          ms/op
VectorisedSimd.executeFilterQuery                                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample  1685  48.468 ± 0.030  ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        47.579          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        48.497          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        48.824          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        48.890          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        49.161          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        52.341          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999        /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        55.443          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample        55.443          ms/op
VectorisedSimd.executeFilterQuery                                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample  1708  48.297 ± 0.028  ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        47.055          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        48.300          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        48.628          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        48.693          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        48.955          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        53.977          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999        /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        54.395          ms/op
VectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00          /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample        54.395          ms/op

Benchmark result is saved to jmh-result.csv

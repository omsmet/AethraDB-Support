# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 0.00% complete, ETA 05:00:00
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_424860664 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_424860664() {
        this(4);
    }
    public KeyValueMap_424860664(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_424860664 aggregation_state_map = new KeyValueMap_424860664();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

334.548 ±(99.9%) 17.910 ms/op
# Warmup Iteration   2: 328.999 ±(99.9%) 2.347 ms/op
# Warmup Iteration   3: 326.023 ±(99.9%) 1.153 ms/op
# Warmup Iteration   4: 330.809 ±(99.9%) 7.151 ms/op
# Warmup Iteration   5: 329.270 ±(99.9%) 5.055 ms/op
Iteration   1: 329.050 ±(99.9%) 1.933 ms/op
                 executeQuery·p0.00:   326.631 ms/op
                 executeQuery·p0.50:   328.204 ms/op
                 executeQuery·p0.90:   335.964 ms/op
                 executeQuery·p0.95:   337.222 ms/op
                 executeQuery·p0.99:   338.166 ms/op
                 executeQuery·p0.999:  338.166 ms/op
                 executeQuery·p0.9999: 338.166 ms/op
                 executeQuery·p1.00:   338.166 ms/op

Iteration   2: 330.166 ±(99.9%) 4.441 ms/op
                 executeQuery·p0.00:   327.156 ms/op
                 executeQuery·p0.50:   328.204 ms/op
                 executeQuery·p0.90:   337.432 ms/op
                 executeQuery·p0.95:   348.966 ms/op
                 executeQuery·p0.99:   362.807 ms/op
                 executeQuery·p0.999:  362.807 ms/op
                 executeQuery·p0.9999: 362.807 ms/op
                 executeQuery·p1.00:   362.807 ms/op

Iteration   3: 328.390 ±(99.9%) 2.383 ms/op
                 executeQuery·p0.00:   326.631 ms/op
                 executeQuery·p0.50:   327.156 ms/op
                 executeQuery·p0.90:   336.698 ms/op
                 executeQuery·p0.95:   338.900 ms/op
                 executeQuery·p0.99:   339.214 ms/op
                 executeQuery·p0.999:  339.214 ms/op
                 executeQuery·p0.9999: 339.214 ms/op
                 executeQuery·p1.00:   339.214 ms/op

Iteration   4: 328.948 ±(99.9%) 4.183 ms/op
                 executeQuery·p0.00:   326.107 ms/op
                 executeQuery·p0.50:   327.156 ms/op
                 executeQuery·p0.90:   335.544 ms/op
                 executeQuery·p0.95:   346.974 ms/op
                 executeQuery·p0.99:   360.186 ms/op
                 executeQuery·p0.999:  360.186 ms/op
                 executeQuery·p0.9999: 360.186 ms/op
                 executeQuery·p1.00:   360.186 ms/op

Iteration   5: 328.238 ±(99.9%) 1.686 ms/op
                 executeQuery·p0.00:   326.107 ms/op
                 executeQuery·p0.50:   327.680 ms/op
                 executeQuery·p0.90:   333.447 ms/op
                 executeQuery·p0.95:   335.439 ms/op
                 executeQuery·p0.99:   336.069 ms/op
                 executeQuery·p0.999:  336.069 ms/op
                 executeQuery·p0.9999: 336.069 ms/op
                 executeQuery·p1.00:   336.069 ms/op


# Run progress: 0.56% complete, ETA 05:08:56
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

323.274 ±(99.9%) 16.309 ms/op
# Warmup Iteration   2: 327.934 ±(99.9%) 2.189 ms/op
# Warmup Iteration   3: 326.784 ±(99.9%) 0.408 ms/op
# Warmup Iteration   4: 325.904 ±(99.9%) 0.898 ms/op
# Warmup Iteration   5: 327.917 ±(99.9%) 0.573 ms/op
Iteration   1: 327.426 ±(99.9%) 0.493 ms/op
                 executeQuery·p0.00:   326.107 ms/op
                 executeQuery·p0.50:   327.680 ms/op
                 executeQuery·p0.90:   328.624 ms/op
                 executeQuery·p0.95:   328.729 ms/op
                 executeQuery·p0.99:   328.729 ms/op
                 executeQuery·p0.999:  328.729 ms/op
                 executeQuery·p0.9999: 328.729 ms/op
                 executeQuery·p1.00:   328.729 ms/op

Iteration   2: 327.003 ±(99.9%) 1.569 ms/op
                 executeQuery·p0.00:   326.107 ms/op
                 executeQuery·p0.50:   326.631 ms/op
                 executeQuery·p0.90:   327.051 ms/op
                 executeQuery·p0.95:   332.818 ms/op
                 executeQuery·p0.99:   339.739 ms/op
                 executeQuery·p0.999:  339.739 ms/op
                 executeQuery·p0.9999: 339.739 ms/op
                 executeQuery·p1.00:   339.739 ms/op

Iteration   3: 327.781 ±(99.9%) 2.194 ms/op
                 executeQuery·p0.00:   326.107 ms/op
                 executeQuery·p0.50:   326.631 ms/op
                 executeQuery·p0.90:   334.915 ms/op
                 executeQuery·p0.95:   337.851 ms/op
                 executeQuery·p0.99:   339.739 ms/op
                 executeQuery·p0.999:  339.739 ms/op
                 executeQuery·p0.9999: 339.739 ms/op
                 executeQuery·p1.00:   339.739 ms/op

Iteration   4: 326.784 ±(99.9%) 0.832 ms/op
                 executeQuery·p0.00:   326.107 ms/op
                 executeQuery·p0.50:   326.631 ms/op
                 executeQuery·p0.90:   327.156 ms/op
                 executeQuery·p0.95:   329.672 ms/op
                 executeQuery·p0.99:   333.447 ms/op
                 executeQuery·p0.999:  333.447 ms/op
                 executeQuery·p0.9999: 333.447 ms/op
                 executeQuery·p1.00:   333.447 ms/op

Iteration   5: 326.817 ±(99.9%) 0.906 ms/op
                 executeQuery·p0.00:   326.107 ms/op
                 executeQuery·p0.50:   326.631 ms/op
                 executeQuery·p0.90:   327.051 ms/op
                 executeQuery·p0.95:   330.511 ms/op
                 executeQuery·p0.99:   333.971 ms/op
                 executeQuery·p0.999:  333.971 ms/op
                 executeQuery·p0.9999: 333.971 ms/op
                 executeQuery·p1.00:   333.971 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 310
  mean =    328.061 ±(99.9%) 0.715 ms/op

  Histogram, ms/op:
    [320.000, 325.000) = 0 
    [325.000, 330.000) = 284 
    [330.000, 335.000) = 6 
    [335.000, 340.000) = 18 
    [340.000, 345.000) = 0 
    [345.000, 350.000) = 0 
    [350.000, 355.000) = 0 
    [355.000, 360.000) = 0 
    [360.000, 365.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    326.107 ms/op
     p(50.0000) =    327.156 ms/op
     p(90.0000) =    329.200 ms/op
     p(95.0000) =    336.593 ms/op
     p(99.0000) =    339.739 ms/op
     p(99.9000) =    362.807 ms/op
     p(99.9900) =    362.807 ms/op
     p(99.9990) =    362.807 ms/op
     p(99.9999) =    362.807 ms/op
    p(100.0000) =    362.807 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 1.11% complete, ETA 05:06:16
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

453.213 ±(99.9%) 3.114 ms/op
# Warmup Iteration   2: 452.734 ±(99.9%) 2.197 ms/op
# Warmup Iteration   3: 452.119 ±(99.9%) 0.997 ms/op
# Warmup Iteration   4: 452.597 ±(99.9%) 1.270 ms/op
# Warmup Iteration   5: 452.962 ±(99.9%) 0.948 ms/op
Iteration   1: 451.936 ±(99.9%) 0.984 ms/op
                 executeQuery·p0.00:   450.363 ms/op
                 executeQuery·p0.50:   451.412 ms/op
                 executeQuery·p0.90:   453.824 ms/op
                 executeQuery·p0.95:   454.872 ms/op
                 executeQuery·p0.99:   455.082 ms/op
                 executeQuery·p0.999:  455.082 ms/op
                 executeQuery·p0.9999: 455.082 ms/op
                 executeQuery·p1.00:   455.082 ms/op

Iteration   2: 451.138 ±(99.9%) 1.007 ms/op
                 executeQuery·p0.00:   448.791 ms/op
                 executeQuery·p0.50:   450.888 ms/op
                 executeQuery·p0.90:   452.461 ms/op
                 executeQuery·p0.95:   454.138 ms/op
                 executeQuery·p0.99:   454.558 ms/op
                 executeQuery·p0.999:  454.558 ms/op
                 executeQuery·p0.9999: 454.558 ms/op
                 executeQuery·p1.00:   454.558 ms/op

Iteration   3: 451.549 ±(99.9%) 1.120 ms/op
                 executeQuery·p0.00:   449.315 ms/op
                 executeQuery·p0.50:   451.936 ms/op
                 executeQuery·p0.90:   453.509 ms/op
                 executeQuery·p0.95:   453.509 ms/op
                 executeQuery·p0.99:   453.509 ms/op
                 executeQuery·p0.999:  453.509 ms/op
                 executeQuery·p0.9999: 453.509 ms/op
                 executeQuery·p1.00:   453.509 ms/op

Iteration   4: 451.412 ±(99.9%) 1.199 ms/op
                 executeQuery·p0.00:   449.315 ms/op
                 executeQuery·p0.50:   451.936 ms/op
                 executeQuery·p0.90:   453.509 ms/op
                 executeQuery·p0.95:   453.509 ms/op
                 executeQuery·p0.99:   453.509 ms/op
                 executeQuery·p0.999:  453.509 ms/op
                 executeQuery·p0.9999: 453.509 ms/op
                 executeQuery·p1.00:   453.509 ms/op

Iteration   5: 452.278 ±(99.9%) 2.123 ms/op
                 executeQuery·p0.00:   449.315 ms/op
                 executeQuery·p0.50:   451.936 ms/op
                 executeQuery·p0.90:   454.033 ms/op
                 executeQuery·p0.95:   461.164 ms/op
                 executeQuery·p0.99:   462.946 ms/op
                 executeQuery·p0.999:  462.946 ms/op
                 executeQuery·p0.9999: 462.946 ms/op
                 executeQuery·p1.00:   462.946 ms/op


# Run progress: 1.67% complete, ETA 05:06:54
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

449.634 ±(99.9%) 6.670 ms/op
# Warmup Iteration   2: 448.471 ±(99.9%) 0.982 ms/op
# Warmup Iteration   3: 449.862 ±(99.9%) 3.401 ms/op
# Warmup Iteration   4: 448.699 ±(99.9%) 1.087 ms/op
# Warmup Iteration   5: 451.458 ±(99.9%) 2.345 ms/op
Iteration   1: 452.073 ±(99.9%) 2.085 ms/op
                 executeQuery·p0.00:   445.121 ms/op
                 executeQuery·p0.50:   452.461 ms/op
                 executeQuery·p0.90:   455.921 ms/op
                 executeQuery·p0.95:   457.808 ms/op
                 executeQuery·p0.99:   458.228 ms/op
                 executeQuery·p0.999:  458.228 ms/op
                 executeQuery·p0.9999: 458.228 ms/op
                 executeQuery·p1.00:   458.228 ms/op

Iteration   2: 451.549 ±(99.9%) 1.300 ms/op
                 executeQuery·p0.00:   448.266 ms/op
                 executeQuery·p0.50:   451.412 ms/op
                 executeQuery·p0.90:   454.767 ms/op
                 executeQuery·p0.95:   456.026 ms/op
                 executeQuery·p0.99:   456.131 ms/op
                 executeQuery·p0.999:  456.131 ms/op
                 executeQuery·p0.9999: 456.131 ms/op
                 executeQuery·p1.00:   456.131 ms/op

Iteration   3: 451.640 ±(99.9%) 0.959 ms/op
                 executeQuery·p0.00:   449.315 ms/op
                 executeQuery·p0.50:   451.412 ms/op
                 executeQuery·p0.90:   452.880 ms/op
                 executeQuery·p0.95:   455.606 ms/op
                 executeQuery·p0.99:   456.131 ms/op
                 executeQuery·p0.999:  456.131 ms/op
                 executeQuery·p0.9999: 456.131 ms/op
                 executeQuery·p1.00:   456.131 ms/op

Iteration   4: 451.799 ±(99.9%) 1.194 ms/op
                 executeQuery·p0.00:   449.315 ms/op
                 executeQuery·p0.50:   451.412 ms/op
                 executeQuery·p0.90:   454.558 ms/op
                 executeQuery·p0.95:   455.397 ms/op
                 executeQuery·p0.99:   455.606 ms/op
                 executeQuery·p0.999:  455.606 ms/op
                 executeQuery·p0.9999: 455.606 ms/op
                 executeQuery·p1.00:   455.606 ms/op

Iteration   5: 452.711 ±(99.9%) 1.457 ms/op
                 executeQuery·p0.00:   449.315 ms/op
                 executeQuery·p0.50:   451.936 ms/op
                 executeQuery·p0.90:   455.187 ms/op
                 executeQuery·p0.95:   456.865 ms/op
                 executeQuery·p0.99:   457.179 ms/op
                 executeQuery·p0.999:  457.179 ms/op
                 executeQuery·p0.9999: 457.179 ms/op
                 executeQuery·p1.00:   457.179 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 230
  mean =    451.809 ±(99.9%) 0.394 ms/op

  Histogram, ms/op:
    [440.000, 442.500) = 0 
    [442.500, 445.000) = 0 
    [445.000, 447.500) = 1 
    [447.500, 450.000) = 29 
    [450.000, 452.500) = 150 
    [452.500, 455.000) = 39 
    [455.000, 457.500) = 9 
    [457.500, 460.000) = 1 
    [460.000, 462.500) = 0 
    [462.500, 465.000) = 1 
    [465.000, 467.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    445.121 ms/op
     p(50.0000) =    451.412 ms/op
     p(90.0000) =    453.981 ms/op
     p(95.0000) =    454.794 ms/op
     p(99.0000) =    457.903 ms/op
     p(99.9000) =    462.946 ms/op
     p(99.9900) =    462.946 ms/op
     p(99.9990) =    462.946 ms/op
     p(99.9999) =    462.946 ms/op
    p(100.0000) =    462.946 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 2.22% complete, ETA 05:06:04
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

659.554 ±(99.9%) 20.596 ms/op
# Warmup Iteration   2: 645.464 ±(99.9%) 7.251 ms/op
# Warmup Iteration   3: 646.382 ±(99.9%) 6.763 ms/op
# Warmup Iteration   4: 638.583 ±(99.9%) 3.957 ms/op
# Warmup Iteration   5: 639.435 ±(99.9%) 4.682 ms/op
Iteration   1: 638.321 ±(99.9%) 5.179 ms/op
                 executeQuery·p0.00:   632.291 ms/op
                 executeQuery·p0.50:   638.583 ms/op
                 executeQuery·p0.90:   645.818 ms/op
                 executeQuery·p0.95:   648.020 ms/op
                 executeQuery·p0.99:   648.020 ms/op
                 executeQuery·p0.999:  648.020 ms/op
                 executeQuery·p0.9999: 648.020 ms/op
                 executeQuery·p1.00:   648.020 ms/op

Iteration   2: 642.449 ±(99.9%) 5.857 ms/op
                 executeQuery·p0.00:   628.097 ms/op
                 executeQuery·p0.50:   643.826 ms/op
                 executeQuery·p0.90:   649.069 ms/op
                 executeQuery·p0.95:   649.069 ms/op
                 executeQuery·p0.99:   649.069 ms/op
                 executeQuery·p0.999:  649.069 ms/op
                 executeQuery·p0.9999: 649.069 ms/op
                 executeQuery·p1.00:   649.069 ms/op

Iteration   3: 639.762 ±(99.9%) 5.846 ms/op
                 executeQuery·p0.00:   631.243 ms/op
                 executeQuery·p0.50:   638.583 ms/op
                 executeQuery·p0.90:   648.649 ms/op
                 executeQuery·p0.95:   650.117 ms/op
                 executeQuery·p0.99:   650.117 ms/op
                 executeQuery·p0.999:  650.117 ms/op
                 executeQuery·p0.9999: 650.117 ms/op
                 executeQuery·p1.00:   650.117 ms/op

Iteration   4: 648.544 ±(99.9%) 4.993 ms/op
                 executeQuery·p0.00:   642.777 ms/op
                 executeQuery·p0.50:   648.544 ms/op
                 executeQuery·p0.90:   656.933 ms/op
                 executeQuery·p0.95:   660.603 ms/op
                 executeQuery·p0.99:   660.603 ms/op
                 executeQuery·p0.999:  660.603 ms/op
                 executeQuery·p0.9999: 660.603 ms/op
                 executeQuery·p1.00:   660.603 ms/op

Iteration   5: 651.100 ±(99.9%) 4.845 ms/op
                 executeQuery·p0.00:   642.777 ms/op
                 executeQuery·p0.50:   651.166 ms/op
                 executeQuery·p0.90:   658.296 ms/op
                 executeQuery·p0.95:   662.700 ms/op
                 executeQuery·p0.99:   662.700 ms/op
                 executeQuery·p0.999:  662.700 ms/op
                 executeQuery·p0.9999: 662.700 ms/op
                 executeQuery·p1.00:   662.700 ms/op


# Run progress: 2.78% complete, ETA 05:05:00
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

616.169 ±(99.9%) 15.773 ms/op
# Warmup Iteration   2: 608.297 ±(99.9%) 4.664 ms/op
# Warmup Iteration   3: 616.104 ±(99.9%) 8.665 ms/op
# Warmup Iteration   4: 613.109 ±(99.9%) 5.907 ms/op
# Warmup Iteration   5: 608.791 ±(99.9%) 6.170 ms/op
Iteration   1: 618.922 ±(99.9%) 5.710 ms/op
                 executeQuery·p0.00:   612.368 ms/op
                 executeQuery·p0.50:   618.136 ms/op
                 executeQuery·p0.90:   626.524 ms/op
                 executeQuery·p0.95:   630.194 ms/op
                 executeQuery·p0.99:   630.194 ms/op
                 executeQuery·p0.999:  630.194 ms/op
                 executeQuery·p0.9999: 630.194 ms/op
                 executeQuery·p1.00:   630.194 ms/op

Iteration   2: 630.784 ±(99.9%) 7.241 ms/op
                 executeQuery·p0.00:   622.854 ms/op
                 executeQuery·p0.50:   628.097 ms/op
                 executeQuery·p0.90:   645.084 ms/op
                 executeQuery·p0.95:   648.020 ms/op
                 executeQuery·p0.99:   648.020 ms/op
                 executeQuery·p0.999:  648.020 ms/op
                 executeQuery·p0.9999: 648.020 ms/op
                 executeQuery·p1.00:   648.020 ms/op

Iteration   3: 621.216 ±(99.9%) 9.059 ms/op
                 executeQuery·p0.00:   606.077 ms/op
                 executeQuery·p0.50:   622.854 ms/op
                 executeQuery·p0.90:   632.082 ms/op
                 executeQuery·p0.95:   643.826 ms/op
                 executeQuery·p0.99:   643.826 ms/op
                 executeQuery·p0.999:  643.826 ms/op
                 executeQuery·p0.9999: 643.826 ms/op
                 executeQuery·p1.00:   643.826 ms/op

Iteration   4: 610.210 ±(99.9%) 6.864 ms/op
                 executeQuery·p0.00:   603.980 ms/op
                 executeQuery·p0.50:   606.077 ms/op
                 executeQuery·p0.90:   621.176 ms/op
                 executeQuery·p0.95:   622.854 ms/op
                 executeQuery·p0.99:   622.854 ms/op
                 executeQuery·p0.999:  622.854 ms/op
                 executeQuery·p0.9999: 622.854 ms/op
                 executeQuery·p1.00:   622.854 ms/op

Iteration   5: 613.417 ±(99.9%) 5.685 ms/op
                 executeQuery·p0.00:   605.028 ms/op
                 executeQuery·p0.50:   612.368 ms/op
                 executeQuery·p0.90:   621.806 ms/op
                 executeQuery·p0.95:   621.806 ms/op
                 executeQuery·p0.99:   621.806 ms/op
                 executeQuery·p0.999:  621.806 ms/op
                 executeQuery·p0.9999: 621.806 ms/op
                 executeQuery·p1.00:   621.806 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 162
  mean =    631.230 ±(99.9%) 4.039 ms/op

  Histogram, ms/op:
    [600.000, 605.000) = 1 
    [605.000, 610.000) = 18 
    [610.000, 615.000) = 13 
    [615.000, 620.000) = 8 
    [620.000, 625.000) = 24 
    [625.000, 630.000) = 11 
    [630.000, 635.000) = 16 
    [635.000, 640.000) = 11 
    [640.000, 645.000) = 25 
    [645.000, 650.000) = 15 
    [650.000, 655.000) = 15 
    [655.000, 660.000) = 3 
    [660.000, 665.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    603.980 ms/op
     p(50.0000) =    632.816 ms/op
     p(90.0000) =    650.117 ms/op
     p(95.0000) =    652.214 ms/op
     p(99.0000) =    661.379 ms/op
     p(99.9000) =    662.700 ms/op
     p(99.9900) =    662.700 ms/op
     p(99.9990) =    662.700 ms/op
     p(99.9999) =    662.700 ms/op
    p(100.0000) =    662.700 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 3.33% complete, ETA 05:03:15
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

1017.119 ms/op
# Warmup Iteration   2: 891.814 ms/op
# Warmup Iteration   3: 835.191 ms/op
# Warmup Iteration   4: 808.976 ms/op
# Warmup Iteration   5: 885.522 ms/op
Iteration   1: 883.950 ms/op
                 executeQuery·p0.00:   866.124 ms/op
                 executeQuery·p0.50:   883.950 ms/op
                 executeQuery·p0.90:   901.775 ms/op
                 executeQuery·p0.95:   901.775 ms/op
                 executeQuery·p0.99:   901.775 ms/op
                 executeQuery·p0.999:  901.775 ms/op
                 executeQuery·p0.9999: 901.775 ms/op
                 executeQuery·p1.00:   901.775 ms/op

Iteration   2: 924.320 ms/op
                 executeQuery·p0.00:   907.018 ms/op
                 executeQuery·p0.50:   924.320 ms/op
                 executeQuery·p0.90:   941.621 ms/op
                 executeQuery·p0.95:   941.621 ms/op
                 executeQuery·p0.99:   941.621 ms/op
                 executeQuery·p0.999:  941.621 ms/op
                 executeQuery·p0.9999: 941.621 ms/op
                 executeQuery·p1.00:   941.621 ms/op

Iteration   3: 945.291 ms/op
                 executeQuery·p0.00:   923.795 ms/op
                 executeQuery·p0.50:   945.291 ms/op
                 executeQuery·p0.90:   966.787 ms/op
                 executeQuery·p0.95:   966.787 ms/op
                 executeQuery·p0.99:   966.787 ms/op
                 executeQuery·p0.999:  966.787 ms/op
                 executeQuery·p0.9999: 966.787 ms/op
                 executeQuery·p1.00:   966.787 ms/op

Iteration   4: 896.532 ms/op
                 executeQuery·p0.00:   870.318 ms/op
                 executeQuery·p0.50:   896.532 ms/op
                 executeQuery·p0.90:   922.747 ms/op
                 executeQuery·p0.95:   922.747 ms/op
                 executeQuery·p0.99:   922.747 ms/op
                 executeQuery·p0.999:  922.747 ms/op
                 executeQuery·p0.9999: 922.747 ms/op
                 executeQuery·p1.00:   922.747 ms/op

Iteration   5: 786.432 ms/op
                 executeQuery·p0.00:   711.983 ms/op
                 executeQuery·p0.50:   786.432 ms/op
                 executeQuery·p0.90:   860.881 ms/op
                 executeQuery·p0.95:   860.881 ms/op
                 executeQuery·p0.99:   860.881 ms/op
                 executeQuery·p0.999:  860.881 ms/op
                 executeQuery·p0.9999: 860.881 ms/op
                 executeQuery·p1.00:   860.881 ms/op


# Run progress: 3.89% complete, ETA 05:28:51
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

1051.197 ms/op
# Warmup Iteration   2: 897.057 ms/op
# Warmup Iteration   3: 840.958 ms/op
# Warmup Iteration   4: 879.231 ms/op
# Warmup Iteration   5: 910.688 ms/op
Iteration   1: 818.938 ms/op
                 executeQuery·p0.00:   742.392 ms/op
                 executeQuery·p0.50:   818.938 ms/op
                 executeQuery·p0.90:   895.484 ms/op
                 executeQuery·p0.95:   895.484 ms/op
                 executeQuery·p0.99:   895.484 ms/op
                 executeQuery·p0.999:  895.484 ms/op
                 executeQuery·p0.9999: 895.484 ms/op
                 executeQuery·p1.00:   895.484 ms/op

Iteration   2: 810.025 ms/op
                 executeQuery·p0.00:   723.517 ms/op
                 executeQuery·p0.50:   810.025 ms/op
                 executeQuery·p0.90:   896.532 ms/op
                 executeQuery·p0.95:   896.532 ms/op
                 executeQuery·p0.99:   896.532 ms/op
                 executeQuery·p0.999:  896.532 ms/op
                 executeQuery·p0.9999: 896.532 ms/op
                 executeQuery·p1.00:   896.532 ms/op

Iteration   3: 796.918 ms/op
                 executeQuery·p0.00:   727.712 ms/op
                 executeQuery·p0.50:   796.918 ms/op
                 executeQuery·p0.90:   866.124 ms/op
                 executeQuery·p0.95:   866.124 ms/op
                 executeQuery·p0.99:   866.124 ms/op
                 executeQuery·p0.999:  866.124 ms/op
                 executeQuery·p0.9999: 866.124 ms/op
                 executeQuery·p1.00:   866.124 ms/op

Iteration   4: 802.161 ms/op
                 executeQuery·p0.00:   711.983 ms/op
                 executeQuery·p0.50:   802.161 ms/op
                 executeQuery·p0.90:   892.338 ms/op
                 executeQuery·p0.95:   892.338 ms/op
                 executeQuery·p0.99:   892.338 ms/op
                 executeQuery·p0.999:  892.338 ms/op
                 executeQuery·p0.9999: 892.338 ms/op
                 executeQuery·p1.00:   892.338 ms/op

Iteration   5: 786.956 ms/op
                 executeQuery·p0.00:   710.935 ms/op
                 executeQuery·p0.50:   786.956 ms/op
                 executeQuery·p0.90:   862.978 ms/op
                 executeQuery·p0.95:   862.978 ms/op
                 executeQuery·p0.99:   862.978 ms/op
                 executeQuery·p0.999:  862.978 ms/op
                 executeQuery·p0.9999: 862.978 ms/op
                 executeQuery·p1.00:   862.978 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =    845.152 ±(99.9%) 75.976 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 4 
    [ 725.000,  750.000) = 2 
    [ 750.000,  775.000) = 0 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 5 
    [ 875.000,  900.000) = 3 
    [ 900.000,  925.000) = 4 
    [ 925.000,  950.000) = 1 
    [ 950.000,  975.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    710.935 ms/op
     p(50.0000) =    868.221 ms/op
     p(90.0000) =    939.839 ms/op
     p(95.0000) =    965.529 ms/op
     p(99.0000) =    966.787 ms/op
     p(99.9000) =    966.787 ms/op
     p(99.9900) =    966.787 ms/op
     p(99.9990) =    966.787 ms/op
     p(99.9999) =    966.787 ms/op
    p(100.0000) =    966.787 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 4.44% complete, ETA 05:45:12
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2663.383 ms/op
# Warmup Iteration   2: 2524.971 ms/op
# Warmup Iteration   3: 2566.914 ms/op
# Warmup Iteration   4: 2483.028 ms/op
# Warmup Iteration   5: 2441.085 ms/op
Iteration   1: 2470.445 ms/op
                 executeQuery·p0.00:   2470.445 ms/op
                 executeQuery·p0.50:   2470.445 ms/op
                 executeQuery·p0.90:   2470.445 ms/op
                 executeQuery·p0.95:   2470.445 ms/op
                 executeQuery·p0.99:   2470.445 ms/op
                 executeQuery·p0.999:  2470.445 ms/op
                 executeQuery·p0.9999: 2470.445 ms/op
                 executeQuery·p1.00:   2470.445 ms/op

Iteration   2: 2575.303 ms/op
                 executeQuery·p0.00:   2575.303 ms/op
                 executeQuery·p0.50:   2575.303 ms/op
                 executeQuery·p0.90:   2575.303 ms/op
                 executeQuery·p0.95:   2575.303 ms/op
                 executeQuery·p0.99:   2575.303 ms/op
                 executeQuery·p0.999:  2575.303 ms/op
                 executeQuery·p0.9999: 2575.303 ms/op
                 executeQuery·p1.00:   2575.303 ms/op

Iteration   3: 2436.891 ms/op
                 executeQuery·p0.00:   2436.891 ms/op
                 executeQuery·p0.50:   2436.891 ms/op
                 executeQuery·p0.90:   2436.891 ms/op
                 executeQuery·p0.95:   2436.891 ms/op
                 executeQuery·p0.99:   2436.891 ms/op
                 executeQuery·p0.999:  2436.891 ms/op
                 executeQuery·p0.9999: 2436.891 ms/op
                 executeQuery·p1.00:   2436.891 ms/op

Iteration   4: 2524.971 ms/op
                 executeQuery·p0.00:   2524.971 ms/op
                 executeQuery·p0.50:   2524.971 ms/op
                 executeQuery·p0.90:   2524.971 ms/op
                 executeQuery·p0.95:   2524.971 ms/op
                 executeQuery·p0.99:   2524.971 ms/op
                 executeQuery·p0.999:  2524.971 ms/op
                 executeQuery·p0.9999: 2524.971 ms/op
                 executeQuery·p1.00:   2524.971 ms/op

Iteration   5: 2378.170 ms/op
                 executeQuery·p0.00:   2378.170 ms/op
                 executeQuery·p0.50:   2378.170 ms/op
                 executeQuery·p0.90:   2378.170 ms/op
                 executeQuery·p0.95:   2378.170 ms/op
                 executeQuery·p0.99:   2378.170 ms/op
                 executeQuery·p0.999:  2378.170 ms/op
                 executeQuery·p0.9999: 2378.170 ms/op
                 executeQuery·p1.00:   2378.170 ms/op


# Run progress: 5.00% complete, ETA 06:47:43
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2503.999 ms/op
# Warmup Iteration   2: 2483.028 ms/op
# Warmup Iteration   3: 2508.194 ms/op
# Warmup Iteration   4: 2361.393 ms/op
# Warmup Iteration   5: 2436.891 ms/op
Iteration   1: 2357.199 ms/op
                 executeQuery·p0.00:   2357.199 ms/op
                 executeQuery·p0.50:   2357.199 ms/op
                 executeQuery·p0.90:   2357.199 ms/op
                 executeQuery·p0.95:   2357.199 ms/op
                 executeQuery·p0.99:   2357.199 ms/op
                 executeQuery·p0.999:  2357.199 ms/op
                 executeQuery·p0.9999: 2357.199 ms/op
                 executeQuery·p1.00:   2357.199 ms/op

Iteration   2: 2411.725 ms/op
                 executeQuery·p0.00:   2411.725 ms/op
                 executeQuery·p0.50:   2411.725 ms/op
                 executeQuery·p0.90:   2411.725 ms/op
                 executeQuery·p0.95:   2411.725 ms/op
                 executeQuery·p0.99:   2411.725 ms/op
                 executeQuery·p0.999:  2411.725 ms/op
                 executeQuery·p0.9999: 2411.725 ms/op
                 executeQuery·p1.00:   2411.725 ms/op

Iteration   3: 2415.919 ms/op
                 executeQuery·p0.00:   2415.919 ms/op
                 executeQuery·p0.50:   2415.919 ms/op
                 executeQuery·p0.90:   2415.919 ms/op
                 executeQuery·p0.95:   2415.919 ms/op
                 executeQuery·p0.99:   2415.919 ms/op
                 executeQuery·p0.999:  2415.919 ms/op
                 executeQuery·p0.9999: 2415.919 ms/op
                 executeQuery·p1.00:   2415.919 ms/op

Iteration   4: 2386.559 ms/op
                 executeQuery·p0.00:   2386.559 ms/op
                 executeQuery·p0.50:   2386.559 ms/op
                 executeQuery·p0.90:   2386.559 ms/op
                 executeQuery·p0.95:   2386.559 ms/op
                 executeQuery·p0.99:   2386.559 ms/op
                 executeQuery·p0.999:  2386.559 ms/op
                 executeQuery·p0.9999: 2386.559 ms/op
                 executeQuery·p1.00:   2386.559 ms/op

Iteration   5: 2483.028 ms/op
                 executeQuery·p0.00:   2483.028 ms/op
                 executeQuery·p0.50:   2483.028 ms/op
                 executeQuery·p0.90:   2483.028 ms/op
                 executeQuery·p0.95:   2483.028 ms/op
                 executeQuery·p0.99:   2483.028 ms/op
                 executeQuery·p0.999:  2483.028 ms/op
                 executeQuery·p0.9999: 2483.028 ms/op
                 executeQuery·p1.00:   2483.028 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   2444.021 ±(99.9%) 104.584 ms/op

  Histogram, ms/op:
    [2300.000, 2325.000) = 0 
    [2325.000, 2350.000) = 0 
    [2350.000, 2375.000) = 1 
    [2375.000, 2400.000) = 2 
    [2400.000, 2425.000) = 2 
    [2425.000, 2450.000) = 1 
    [2450.000, 2475.000) = 1 
    [2475.000, 2500.000) = 1 
    [2500.000, 2525.000) = 1 
    [2525.000, 2550.000) = 0 
    [2550.000, 2575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2357.199 ms/op
     p(50.0000) =   2426.405 ms/op
     p(90.0000) =   2570.269 ms/op
     p(95.0000) =   2575.303 ms/op
     p(99.0000) =   2575.303 ms/op
     p(99.9000) =   2575.303 ms/op
     p(99.9900) =   2575.303 ms/op
     p(99.9990) =   2575.303 ms/op
     p(99.9999) =   2575.303 ms/op
    p(100.0000) =   2575.303 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 5.56% complete, ETA 07:34:58
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3370.822 ±(99.9%) 6698.135 ms/op
# Warmup Iteration   2: 3224.371 ±(99.9%) 160.156 ms/op
# Warmup Iteration   3: 3251.634 ±(99.9%) 181.648 ms/op
# Warmup Iteration   4: 3253.731 ±(99.9%) 258.433 ms/op
# Warmup Iteration   5: 3244.294 ±(99.9%) 100.198 ms/op
Iteration   1: 3274.703 ±(99.9%) 493.044 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3238.003 ms/op
                 executeQuery·p0.90:   3388.998 ms/op
                 executeQuery·p0.95:   3388.998 ms/op
                 executeQuery·p0.99:   3388.998 ms/op
                 executeQuery·p0.999:  3388.998 ms/op
                 executeQuery·p0.9999: 3388.998 ms/op
                 executeQuery·p1.00:   3388.998 ms/op

Iteration   2: 3235.906 ±(99.9%) 27.104 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3233.808 ms/op
                 executeQuery·p0.90:   3242.197 ms/op
                 executeQuery·p0.95:   3242.197 ms/op
                 executeQuery·p0.99:   3242.197 ms/op
                 executeQuery·p0.999:  3242.197 ms/op
                 executeQuery·p0.9999: 3242.197 ms/op
                 executeQuery·p1.00:   3242.197 ms/op

Iteration   3: 3236.954 ±(99.9%) 25.950 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3235.906 ms/op
                 executeQuery·p0.90:   3242.197 ms/op
                 executeQuery·p0.95:   3242.197 ms/op
                 executeQuery·p0.99:   3242.197 ms/op
                 executeQuery·p0.999:  3242.197 ms/op
                 executeQuery·p0.9999: 3242.197 ms/op
                 executeQuery·p1.00:   3242.197 ms/op

Iteration   4: 3273.654 ±(99.9%) 479.511 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3238.003 ms/op
                 executeQuery·p0.90:   3384.803 ms/op
                 executeQuery·p0.95:   3384.803 ms/op
                 executeQuery·p0.99:   3384.803 ms/op
                 executeQuery·p0.999:  3384.803 ms/op
                 executeQuery·p0.9999: 3384.803 ms/op
                 executeQuery·p1.00:   3384.803 ms/op

Iteration   5: 3235.906 ±(99.9%) 34.991 ms/op
                 executeQuery·p0.00:   3229.614 ms/op
                 executeQuery·p0.50:   3235.906 ms/op
                 executeQuery·p0.90:   3242.197 ms/op
                 executeQuery·p0.95:   3242.197 ms/op
                 executeQuery·p0.99:   3242.197 ms/op
                 executeQuery·p0.999:  3242.197 ms/op
                 executeQuery·p0.9999: 3242.197 ms/op
                 executeQuery·p1.00:   3242.197 ms/op


# Run progress: 6.11% complete, ETA 07:24:06
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2810.184 ±(99.9%) 5319.895 ms/op
# Warmup Iteration   2: 3421.154 ±(99.9%) 5853.800 ms/op
# Warmup Iteration   3: 3249.537 ±(99.9%) 153.919 ms/op
# Warmup Iteration   4: 3235.906 ±(99.9%) 15.648 ms/op
# Warmup Iteration   5: 3250.586 ±(99.9%) 216.828 ms/op
Iteration   1: 3232.760 ±(99.9%) 13.552 ms/op
                 executeQuery·p0.00:   3229.614 ms/op
                 executeQuery·p0.50:   3233.808 ms/op
                 executeQuery·p0.90:   3233.808 ms/op
                 executeQuery·p0.95:   3233.808 ms/op
                 executeQuery·p0.99:   3233.808 ms/op
                 executeQuery·p0.999:  3233.808 ms/op
                 executeQuery·p0.9999: 3233.808 ms/op
                 executeQuery·p1.00:   3233.808 ms/op

Iteration   2: 3241.148 ±(99.9%) 94.862 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3233.808 ms/op
                 executeQuery·p0.90:   3263.169 ms/op
                 executeQuery·p0.95:   3263.169 ms/op
                 executeQuery·p0.99:   3263.169 ms/op
                 executeQuery·p0.999:  3263.169 ms/op
                 executeQuery·p0.9999: 3263.169 ms/op
                 executeQuery·p1.00:   3263.169 ms/op

Iteration   3: 3233.808 ±(99.9%) 22.130 ms/op
                 executeQuery·p0.00:   3229.614 ms/op
                 executeQuery·p0.50:   3233.808 ms/op
                 executeQuery·p0.90:   3238.003 ms/op
                 executeQuery·p0.95:   3238.003 ms/op
                 executeQuery·p0.99:   3238.003 ms/op
                 executeQuery·p0.999:  3238.003 ms/op
                 executeQuery·p0.9999: 3238.003 ms/op
                 executeQuery·p1.00:   3238.003 ms/op

Iteration   4: 3232.760 ±(99.9%) 25.950 ms/op
                 executeQuery·p0.00:   3229.614 ms/op
                 executeQuery·p0.50:   3231.711 ms/op
                 executeQuery·p0.90:   3238.003 ms/op
                 executeQuery·p0.95:   3238.003 ms/op
                 executeQuery·p0.99:   3238.003 ms/op
                 executeQuery·p0.999:  3238.003 ms/op
                 executeQuery·p0.9999: 3238.003 ms/op
                 executeQuery·p1.00:   3238.003 ms/op

Iteration   5: 3239.051 ±(99.9%) 71.281 ms/op
                 executeQuery·p0.00:   3229.614 ms/op
                 executeQuery·p0.50:   3235.906 ms/op
                 executeQuery·p0.90:   3254.780 ms/op
                 executeQuery·p0.95:   3254.780 ms/op
                 executeQuery·p0.99:   3254.780 ms/op
                 executeQuery·p0.999:  3254.780 ms/op
                 executeQuery·p0.9999: 3254.780 ms/op
                 executeQuery·p1.00:   3254.780 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 40
  mean =   3243.665 ±(99.9%) 19.077 ms/op

  Histogram, ms/op:
    [3200.000, 3212.500) = 0 
    [3212.500, 3225.000) = 0 
    [3225.000, 3237.500) = 26 
    [3237.500, 3250.000) = 10 
    [3250.000, 3262.500) = 1 
    [3262.500, 3275.000) = 1 
    [3275.000, 3287.500) = 0 
    [3287.500, 3300.000) = 0 
    [3300.000, 3312.500) = 0 
    [3312.500, 3325.000) = 0 
    [3325.000, 3337.500) = 0 
    [3337.500, 3350.000) = 0 
    [3350.000, 3362.500) = 0 
    [3362.500, 3375.000) = 0 
    [3375.000, 3387.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3229.614 ms/op
     p(50.0000) =   3233.808 ms/op
     p(90.0000) =   3253.522 ms/op
     p(95.0000) =   3378.722 ms/op
     p(99.0000) =   3388.998 ms/op
     p(99.9000) =   3388.998 ms/op
     p(99.9900) =   3388.998 ms/op
     p(99.9990) =   3388.998 ms/op
     p(99.9999) =   3388.998 ms/op
    p(100.0000) =   3388.998 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 6.67% complete, ETA 07:14:14
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4135.584 ±(99.9%) 6907.150 ms/op
# Warmup Iteration   2: 4240.441 ±(99.9%) 1922.153 ms/op
# Warmup Iteration   3: 4202.693 ±(99.9%) 862.333 ms/op
# Warmup Iteration   4: 4212.479 ±(99.9%) 345.047 ms/op
# Warmup Iteration   5: 4260.015 ±(99.9%) 542.877 ms/op
Iteration   1: 4152.361 ±(99.9%) 2195.196 ms/op
                 executeQuery·p0.00:   4013.949 ms/op
                 executeQuery·p0.50:   4211.081 ms/op
                 executeQuery·p0.90:   4232.053 ms/op
                 executeQuery·p0.95:   4232.053 ms/op
                 executeQuery·p0.99:   4232.053 ms/op
                 executeQuery·p0.999:  4232.053 ms/op
                 executeQuery·p0.9999: 4232.053 ms/op
                 executeQuery·p1.00:   4232.053 ms/op

Iteration   2: 3562.362 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   3556.770 ms/op
                 executeQuery·p0.50:   3565.158 ms/op
                 executeQuery·p0.90:   3565.158 ms/op
                 executeQuery·p0.95:   3565.158 ms/op
                 executeQuery·p0.99:   3565.158 ms/op
                 executeQuery·p0.999:  3565.158 ms/op
                 executeQuery·p0.9999: 3565.158 ms/op
                 executeQuery·p1.00:   3565.158 ms/op

Iteration   3: 3608.500 ±(99.9%) 1237.003 ms/op
                 executeQuery·p0.00:   3569.353 ms/op
                 executeQuery·p0.50:   3569.353 ms/op
                 executeQuery·p0.90:   3686.793 ms/op
                 executeQuery·p0.95:   3686.793 ms/op
                 executeQuery·p0.99:   3686.793 ms/op
                 executeQuery·p0.999:  3686.793 ms/op
                 executeQuery·p0.9999: 3686.793 ms/op
                 executeQuery·p1.00:   3686.793 ms/op

Iteration   4: 3724.542 ±(99.9%) 5036.370 ms/op
                 executeQuery·p0.00:   3565.158 ms/op
                 executeQuery·p0.50:   3565.158 ms/op
                 executeQuery·p0.90:   4043.309 ms/op
                 executeQuery·p0.95:   4043.309 ms/op
                 executeQuery·p0.99:   4043.309 ms/op
                 executeQuery·p0.999:  4043.309 ms/op
                 executeQuery·p0.9999: 4043.309 ms/op
                 executeQuery·p1.00:   4043.309 ms/op

Iteration   5: 4185.915 ±(99.9%) 597.638 ms/op
                 executeQuery·p0.00:   4164.944 ms/op
                 executeQuery·p0.50:   4169.138 ms/op
                 executeQuery·p0.90:   4223.664 ms/op
                 executeQuery·p0.95:   4223.664 ms/op
                 executeQuery·p0.99:   4223.664 ms/op
                 executeQuery·p0.999:  4223.664 ms/op
                 executeQuery·p0.9999: 4223.664 ms/op
                 executeQuery·p1.00:   4223.664 ms/op


# Run progress: 7.22% complete, ETA 07:04:40
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4279.588 ±(99.9%) 12162.143 ms/op
# Warmup Iteration   2: 4243.238 ±(99.9%) 594.363 ms/op
# Warmup Iteration   3: 4255.820 ±(99.9%) 245.976 ms/op
# Warmup Iteration   4: 4204.091 ±(99.9%) 842.876 ms/op
# Warmup Iteration   5: 4222.266 ±(99.9%) 825.326 ms/op
Iteration   1: 4240.441 ±(99.9%) 350.657 ms/op
                 executeQuery·p0.00:   4219.470 ms/op
                 executeQuery·p0.50:   4244.636 ms/op
                 executeQuery·p0.90:   4257.219 ms/op
                 executeQuery·p0.95:   4257.219 ms/op
                 executeQuery·p0.99:   4257.219 ms/op
                 executeQuery·p0.999:  4257.219 ms/op
                 executeQuery·p0.9999: 4257.219 ms/op
                 executeQuery·p1.00:   4257.219 ms/op

Iteration   2: 4202.693 ±(99.9%) 535.638 ms/op
                 executeQuery·p0.00:   4181.721 ms/op
                 executeQuery·p0.50:   4190.110 ms/op
                 executeQuery·p0.90:   4236.247 ms/op
                 executeQuery·p0.95:   4236.247 ms/op
                 executeQuery·p0.99:   4236.247 ms/op
                 executeQuery·p0.999:  4236.247 ms/op
                 executeQuery·p0.9999: 4236.247 ms/op
                 executeQuery·p1.00:   4236.247 ms/op

Iteration   3: 4188.712 ±(99.9%) 289.699 ms/op
                 executeQuery·p0.00:   4177.527 ms/op
                 executeQuery·p0.50:   4181.721 ms/op
                 executeQuery·p0.90:   4206.887 ms/op
                 executeQuery·p0.95:   4206.887 ms/op
                 executeQuery·p0.99:   4206.887 ms/op
                 executeQuery·p0.999:  4206.887 ms/op
                 executeQuery·p0.9999: 4206.887 ms/op
                 executeQuery·p1.00:   4206.887 ms/op

Iteration   4: 4239.043 ±(99.9%) 421.438 ms/op
                 executeQuery·p0.00:   4223.664 ms/op
                 executeQuery·p0.50:   4227.858 ms/op
                 executeQuery·p0.90:   4265.607 ms/op
                 executeQuery·p0.95:   4265.607 ms/op
                 executeQuery·p0.99:   4265.607 ms/op
                 executeQuery·p0.999:  4265.607 ms/op
                 executeQuery·p0.9999: 4265.607 ms/op
                 executeQuery·p1.00:   4265.607 ms/op

Iteration   5: 4211.081 ±(99.9%) 501.773 ms/op
                 executeQuery·p0.00:   4181.721 ms/op
                 executeQuery·p0.50:   4215.276 ms/op
                 executeQuery·p0.90:   4236.247 ms/op
                 executeQuery·p0.95:   4236.247 ms/op
                 executeQuery·p0.99:   4236.247 ms/op
                 executeQuery·p0.999:  4236.247 ms/op
                 executeQuery·p0.9999: 4236.247 ms/op
                 executeQuery·p1.00:   4236.247 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   4031.565 ±(99.9%) 188.661 ms/op

  Histogram, ms/op:
    [3500.000, 3550.000) = 0 
    [3550.000, 3600.000) = 7 
    [3600.000, 3650.000) = 0 
    [3650.000, 3700.000) = 1 
    [3700.000, 3750.000) = 0 
    [3750.000, 3800.000) = 0 
    [3800.000, 3850.000) = 0 
    [3850.000, 3900.000) = 0 
    [3900.000, 3950.000) = 0 
    [3950.000, 4000.000) = 0 
    [4000.000, 4050.000) = 2 
    [4050.000, 4100.000) = 0 
    [4100.000, 4150.000) = 0 
    [4150.000, 4200.000) = 7 
    [4200.000, 4250.000) = 11 

  Percentiles, ms/op:
      p(0.0000) =   3556.770 ms/op
     p(50.0000) =   4181.721 ms/op
     p(90.0000) =   4243.797 ms/op
     p(95.0000) =   4260.993 ms/op
     p(99.0000) =   4265.607 ms/op
     p(99.9000) =   4265.607 ms/op
     p(99.9900) =   4265.607 ms/op
     p(99.9990) =   4265.607 ms/op
     p(99.9999) =   4265.607 ms/op
    p(100.0000) =   4265.607 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 7.78% complete, ETA 06:57:20
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6048.186 ms/op
# Warmup Iteration   2: 6283.067 ms/op
# Warmup Iteration   3: 6568.280 ms/op
# Warmup Iteration   4: 6429.868 ms/op
# Warmup Iteration   5: 6530.531 ms/op
Iteration   1: 6463.422 ms/op
                 executeQuery·p0.00:   6316.622 ms/op
                 executeQuery·p0.50:   6463.422 ms/op
                 executeQuery·p0.90:   6610.223 ms/op
                 executeQuery·p0.95:   6610.223 ms/op
                 executeQuery·p0.99:   6610.223 ms/op
                 executeQuery·p0.999:  6610.223 ms/op
                 executeQuery·p0.9999: 6610.223 ms/op
                 executeQuery·p1.00:   6610.223 ms/op

Iteration   2: 6496.977 ms/op
                 executeQuery·p0.00:   6048.186 ms/op
                 executeQuery·p0.50:   6496.977 ms/op
                 executeQuery·p0.90:   6945.767 ms/op
                 executeQuery·p0.95:   6945.767 ms/op
                 executeQuery·p0.99:   6945.767 ms/op
                 executeQuery·p0.999:  6945.767 ms/op
                 executeQuery·p0.9999: 6945.767 ms/op
                 executeQuery·p1.00:   6945.767 ms/op

Iteration   3: 6832.521 ms/op
                 executeQuery·p0.00:   6618.612 ms/op
                 executeQuery·p0.50:   6832.521 ms/op
                 executeQuery·p0.90:   7046.431 ms/op
                 executeQuery·p0.95:   7046.431 ms/op
                 executeQuery·p0.99:   7046.431 ms/op
                 executeQuery·p0.999:  7046.431 ms/op
                 executeQuery·p0.9999: 7046.431 ms/op
                 executeQuery·p1.00:   7046.431 ms/op

Iteration   4: 6559.891 ms/op
                 executeQuery·p0.00:   6517.948 ms/op
                 executeQuery·p0.50:   6559.891 ms/op
                 executeQuery·p0.90:   6601.834 ms/op
                 executeQuery·p0.95:   6601.834 ms/op
                 executeQuery·p0.99:   6601.834 ms/op
                 executeQuery·p0.999:  6601.834 ms/op
                 executeQuery·p0.9999: 6601.834 ms/op
                 executeQuery·p1.00:   6601.834 ms/op

Iteration   5: 6840.910 ms/op
                 executeQuery·p0.00:   6803.161 ms/op
                 executeQuery·p0.50:   6840.910 ms/op
                 executeQuery·p0.90:   6878.659 ms/op
                 executeQuery·p0.95:   6878.659 ms/op
                 executeQuery·p0.99:   6878.659 ms/op
                 executeQuery·p0.999:  6878.659 ms/op
                 executeQuery·p0.9999: 6878.659 ms/op
                 executeQuery·p1.00:   6878.659 ms/op


# Run progress: 8.33% complete, ETA 06:51:21
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5993.660 ms/op
# Warmup Iteration   2: 6023.021 ms/op
# Warmup Iteration   3: 5951.717 ms/op
# Warmup Iteration   4: 6127.878 ms/op
# Warmup Iteration   5: 6039.798 ms/op
Iteration   1: 5976.883 ms/op
                 executeQuery·p0.00:   5972.689 ms/op
                 executeQuery·p0.50:   5976.883 ms/op
                 executeQuery·p0.90:   5981.078 ms/op
                 executeQuery·p0.95:   5981.078 ms/op
                 executeQuery·p0.99:   5981.078 ms/op
                 executeQuery·p0.999:  5981.078 ms/op
                 executeQuery·p0.9999: 5981.078 ms/op
                 executeQuery·p1.00:   5981.078 ms/op

Iteration   2: 5985.272 ms/op
                 executeQuery·p0.00:   5972.689 ms/op
                 executeQuery·p0.50:   5985.272 ms/op
                 executeQuery·p0.90:   5997.855 ms/op
                 executeQuery·p0.95:   5997.855 ms/op
                 executeQuery·p0.99:   5997.855 ms/op
                 executeQuery·p0.999:  5997.855 ms/op
                 executeQuery·p0.9999: 5997.855 ms/op
                 executeQuery·p1.00:   5997.855 ms/op

Iteration   3: 5968.495 ms/op
                 executeQuery·p0.00:   5922.357 ms/op
                 executeQuery·p0.50:   5968.495 ms/op
                 executeQuery·p0.90:   6014.632 ms/op
                 executeQuery·p0.95:   6014.632 ms/op
                 executeQuery·p0.99:   6014.632 ms/op
                 executeQuery·p0.999:  6014.632 ms/op
                 executeQuery·p0.9999: 6014.632 ms/op
                 executeQuery·p1.00:   6014.632 ms/op

Iteration   4: 5939.134 ms/op
                 executeQuery·p0.00:   5930.746 ms/op
                 executeQuery·p0.50:   5939.134 ms/op
                 executeQuery·p0.90:   5947.523 ms/op
                 executeQuery·p0.95:   5947.523 ms/op
                 executeQuery·p0.99:   5947.523 ms/op
                 executeQuery·p0.999:  5947.523 ms/op
                 executeQuery·p0.9999: 5947.523 ms/op
                 executeQuery·p1.00:   5947.523 ms/op

Iteration   5: 6035.603 ms/op
                 executeQuery·p0.00:   6031.409 ms/op
                 executeQuery·p0.50:   6035.603 ms/op
                 executeQuery·p0.90:   6039.798 ms/op
                 executeQuery·p0.95:   6039.798 ms/op
                 executeQuery·p0.99:   6039.798 ms/op
                 executeQuery·p0.999:  6039.798 ms/op
                 executeQuery·p0.9999: 6039.798 ms/op
                 executeQuery·p1.00:   6039.798 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   6309.911 ±(99.9%) 344.591 ms/op

  Histogram, ms/op:
    [5000.000, 5250.000) = 0 
    [5250.000, 5500.000) = 0 
    [5500.000, 5750.000) = 0 
    [5750.000, 6000.000) = 7 
    [6000.000, 6250.000) = 4 
    [6250.000, 6500.000) = 1 
    [6500.000, 6750.000) = 4 
    [6750.000, 7000.000) = 3 
    [7000.000, 7250.000) = 1 
    [7250.000, 7500.000) = 0 
    [7500.000, 7750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   5922.357 ms/op
     p(50.0000) =   6043.992 ms/op
     p(90.0000) =   6939.057 ms/op
     p(95.0000) =   7041.398 ms/op
     p(99.0000) =   7046.431 ms/op
     p(99.9000) =   7046.431 ms/op
     p(99.9900) =   7046.431 ms/op
     p(99.9990) =   7046.431 ms/op
     p(99.9999) =   7046.431 ms/op
    p(100.0000) =   7046.431 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 8.89% complete, ETA 06:44:05
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

9797.894 ms/op
# Warmup Iteration   2: 14210.302 ms/op
# Warmup Iteration   3: 13807.649 ms/op
# Warmup Iteration   4: 12666.798 ms/op
# Warmup Iteration   5: 14814.282 ms/op
Iteration   1: 8975.811 ms/op
                 executeQuery·p0.00:   8975.811 ms/op
                 executeQuery·p0.50:   8975.811 ms/op
                 executeQuery·p0.90:   8975.811 ms/op
                 executeQuery·p0.95:   8975.811 ms/op
                 executeQuery·p0.99:   8975.811 ms/op
                 executeQuery·p0.999:  8975.811 ms/op
                 executeQuery·p0.9999: 8975.811 ms/op
                 executeQuery·p1.00:   8975.811 ms/op

Iteration   2: 8422.162 ms/op
                 executeQuery·p0.00:   8422.162 ms/op
                 executeQuery·p0.50:   8422.162 ms/op
                 executeQuery·p0.90:   8422.162 ms/op
                 executeQuery·p0.95:   8422.162 ms/op
                 executeQuery·p0.99:   8422.162 ms/op
                 executeQuery·p0.999:  8422.162 ms/op
                 executeQuery·p0.9999: 8422.162 ms/op
                 executeQuery·p1.00:   8422.162 ms/op

Iteration   3: 7935.623 ms/op
                 executeQuery·p0.00:   7935.623 ms/op
                 executeQuery·p0.50:   7935.623 ms/op
                 executeQuery·p0.90:   7935.623 ms/op
                 executeQuery·p0.95:   7935.623 ms/op
                 executeQuery·p0.99:   7935.623 ms/op
                 executeQuery·p0.999:  7935.623 ms/op
                 executeQuery·p0.9999: 7935.623 ms/op
                 executeQuery·p1.00:   7935.623 ms/op

Iteration   4: 13052.674 ms/op
                 executeQuery·p0.00:   13052.674 ms/op
                 executeQuery·p0.50:   13052.674 ms/op
                 executeQuery·p0.90:   13052.674 ms/op
                 executeQuery·p0.95:   13052.674 ms/op
                 executeQuery·p0.99:   13052.674 ms/op
                 executeQuery·p0.999:  13052.674 ms/op
                 executeQuery·p0.9999: 13052.674 ms/op
                 executeQuery·p1.00:   13052.674 ms/op

Iteration   5: 12700.353 ms/op
                 executeQuery·p0.00:   12700.353 ms/op
                 executeQuery·p0.50:   12700.353 ms/op
                 executeQuery·p0.90:   12700.353 ms/op
                 executeQuery·p0.95:   12700.353 ms/op
                 executeQuery·p0.99:   12700.353 ms/op
                 executeQuery·p0.999:  12700.353 ms/op
                 executeQuery·p0.9999: 12700.353 ms/op
                 executeQuery·p1.00:   12700.353 ms/op


# Run progress: 9.44% complete, ETA 06:48:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

8657.043 ms/op
# Warmup Iteration   2: 14193.525 ms/op
# Warmup Iteration   3: 9093.251 ms/op
# Warmup Iteration   4: 9059.697 ms/op
# Warmup Iteration   5: 15216.935 ms/op
Iteration   1: 7449.084 ms/op
                 executeQuery·p0.00:   7449.084 ms/op
                 executeQuery·p0.50:   7449.084 ms/op
                 executeQuery·p0.90:   7449.084 ms/op
                 executeQuery·p0.95:   7449.084 ms/op
                 executeQuery·p0.99:   7449.084 ms/op
                 executeQuery·p0.999:  7449.084 ms/op
                 executeQuery·p0.9999: 7449.084 ms/op
                 executeQuery·p1.00:   7449.084 ms/op

Iteration   2: 8891.924 ms/op
                 executeQuery·p0.00:   8891.924 ms/op
                 executeQuery·p0.50:   8891.924 ms/op
                 executeQuery·p0.90:   8891.924 ms/op
                 executeQuery·p0.95:   8891.924 ms/op
                 executeQuery·p0.99:   8891.924 ms/op
                 executeQuery·p0.999:  8891.924 ms/op
                 executeQuery·p0.9999: 8891.924 ms/op
                 executeQuery·p1.00:   8891.924 ms/op

Iteration   3: 9110.028 ms/op
                 executeQuery·p0.00:   9110.028 ms/op
                 executeQuery·p0.50:   9110.028 ms/op
                 executeQuery·p0.90:   9110.028 ms/op
                 executeQuery·p0.95:   9110.028 ms/op
                 executeQuery·p0.99:   9110.028 ms/op
                 executeQuery·p0.999:  9110.028 ms/op
                 executeQuery·p0.9999: 9110.028 ms/op
                 executeQuery·p1.00:   9110.028 ms/op

Iteration   4: 8824.816 ms/op
                 executeQuery·p0.00:   8824.816 ms/op
                 executeQuery·p0.50:   8824.816 ms/op
                 executeQuery·p0.90:   8824.816 ms/op
                 executeQuery·p0.95:   8824.816 ms/op
                 executeQuery·p0.99:   8824.816 ms/op
                 executeQuery·p0.999:  8824.816 ms/op
                 executeQuery·p0.9999: 8824.816 ms/op
                 executeQuery·p1.00:   8824.816 ms/op

Iteration   5: 8824.816 ms/op
                 executeQuery·p0.00:   8824.816 ms/op
                 executeQuery·p0.50:   8824.816 ms/op
                 executeQuery·p0.90:   8824.816 ms/op
                 executeQuery·p0.95:   8824.816 ms/op
                 executeQuery·p0.99:   8824.816 ms/op
                 executeQuery·p0.999:  8824.816 ms/op
                 executeQuery·p0.9999: 8824.816 ms/op
                 executeQuery·p1.00:   8824.816 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   9418.729 ±(99.9%) 2865.063 ms/op

  Histogram, ms/op:
    [ 7000.000,  7500.000) = 1 
    [ 7500.000,  8000.000) = 1 
    [ 8000.000,  8500.000) = 1 
    [ 8500.000,  9000.000) = 4 
    [ 9000.000,  9500.000) = 1 
    [ 9500.000, 10000.000) = 0 
    [10000.000, 10500.000) = 0 
    [10500.000, 11000.000) = 0 
    [11000.000, 11500.000) = 0 
    [11500.000, 12000.000) = 0 
    [12000.000, 12500.000) = 0 
    [12500.000, 13000.000) = 1 
    [13000.000, 13500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   7449.084 ms/op
     p(50.0000) =   8858.370 ms/op
     p(90.0000) =  13017.442 ms/op
     p(95.0000) =  13052.674 ms/op
     p(99.0000) =  13052.674 ms/op
     p(99.9000) =  13052.674 ms/op
     p(99.9900) =  13052.674 ms/op
     p(99.9990) =  13052.674 ms/op
     p(99.9999) =  13052.674 ms/op
    p(100.0000) =  13052.674 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 10.00% complete, ETA 06:50:22
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

26742.882 ms/op
# Warmup Iteration   2: 39996.883 ms/op
# Warmup Iteration   3: 39929.774 ms/op
# Warmup Iteration   4: 39728.447 ms/op
# Warmup Iteration   5: 25534.923 ms/op
Iteration   1: 28152.168 ms/op
                 executeQuery·p0.00:   28152.168 ms/op
                 executeQuery·p0.50:   28152.168 ms/op
                 executeQuery·p0.90:   28152.168 ms/op
                 executeQuery·p0.95:   28152.168 ms/op
                 executeQuery·p0.99:   28152.168 ms/op
                 executeQuery·p0.999:  28152.168 ms/op
                 executeQuery·p0.9999: 28152.168 ms/op
                 executeQuery·p1.00:   28152.168 ms/op

Iteration   2: 37312.528 ms/op
                 executeQuery·p0.00:   37312.528 ms/op
                 executeQuery·p0.50:   37312.528 ms/op
                 executeQuery·p0.90:   37312.528 ms/op
                 executeQuery·p0.95:   37312.528 ms/op
                 executeQuery·p0.99:   37312.528 ms/op
                 executeQuery·p0.999:  37312.528 ms/op
                 executeQuery·p0.9999: 37312.528 ms/op
                 executeQuery·p1.00:   37312.528 ms/op

Iteration   3: 40131.101 ms/op
                 executeQuery·p0.00:   40131.101 ms/op
                 executeQuery·p0.50:   40131.101 ms/op
                 executeQuery·p0.90:   40131.101 ms/op
                 executeQuery·p0.95:   40131.101 ms/op
                 executeQuery·p0.99:   40131.101 ms/op
                 executeQuery·p0.999:  40131.101 ms/op
                 executeQuery·p0.9999: 40131.101 ms/op
                 executeQuery·p1.00:   40131.101 ms/op

Iteration   4: 40600.863 ms/op
                 executeQuery·p0.00:   40600.863 ms/op
                 executeQuery·p0.50:   40600.863 ms/op
                 executeQuery·p0.90:   40600.863 ms/op
                 executeQuery·p0.95:   40600.863 ms/op
                 executeQuery·p0.99:   40600.863 ms/op
                 executeQuery·p0.999:  40600.863 ms/op
                 executeQuery·p0.9999: 40600.863 ms/op
                 executeQuery·p1.00:   40600.863 ms/op

Iteration   5: 24964.497 ms/op
                 executeQuery·p0.00:   24964.497 ms/op
                 executeQuery·p0.50:   24964.497 ms/op
                 executeQuery·p0.90:   24964.497 ms/op
                 executeQuery·p0.95:   24964.497 ms/op
                 executeQuery·p0.99:   24964.497 ms/op
                 executeQuery·p0.999:  24964.497 ms/op
                 executeQuery·p0.9999: 24964.497 ms/op
                 executeQuery·p1.00:   24964.497 ms/op


# Run progress: 10.56% complete, ETA 07:57:51
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

24528.290 ms/op
# Warmup Iteration   2: 23957.864 ms/op
# Warmup Iteration   3: 39527.121 ms/op
# Warmup Iteration   4: 38386.270 ms/op
# Warmup Iteration   5: 23957.864 ms/op
Iteration   1: 24461.181 ms/op
                 executeQuery·p0.00:   24461.181 ms/op
                 executeQuery·p0.50:   24461.181 ms/op
                 executeQuery·p0.90:   24461.181 ms/op
                 executeQuery·p0.95:   24461.181 ms/op
                 executeQuery·p0.99:   24461.181 ms/op
                 executeQuery·p0.999:  24461.181 ms/op
                 executeQuery·p0.9999: 24461.181 ms/op
                 executeQuery·p1.00:   24461.181 ms/op

Iteration   2: 26071.794 ms/op
                 executeQuery·p0.00:   26071.794 ms/op
                 executeQuery·p0.50:   26071.794 ms/op
                 executeQuery·p0.90:   26071.794 ms/op
                 executeQuery·p0.95:   26071.794 ms/op
                 executeQuery·p0.99:   26071.794 ms/op
                 executeQuery·p0.999:  26071.794 ms/op
                 executeQuery·p0.9999: 26071.794 ms/op
                 executeQuery·p1.00:   26071.794 ms/op

Iteration   3: 24528.290 ms/op
                 executeQuery·p0.00:   24528.290 ms/op
                 executeQuery·p0.50:   24528.290 ms/op
                 executeQuery·p0.90:   24528.290 ms/op
                 executeQuery·p0.95:   24528.290 ms/op
                 executeQuery·p0.99:   24528.290 ms/op
                 executeQuery·p0.999:  24528.290 ms/op
                 executeQuery·p0.9999: 24528.290 ms/op
                 executeQuery·p1.00:   24528.290 ms/op

Iteration   4: 29293.019 ms/op
                 executeQuery·p0.00:   29293.019 ms/op
                 executeQuery·p0.50:   29293.019 ms/op
                 executeQuery·p0.90:   29293.019 ms/op
                 executeQuery·p0.95:   29293.019 ms/op
                 executeQuery·p0.99:   29293.019 ms/op
                 executeQuery·p0.999:  29293.019 ms/op
                 executeQuery·p0.9999: 29293.019 ms/op
                 executeQuery·p1.00:   29293.019 ms/op

Iteration   5: 23689.429 ms/op
                 executeQuery·p0.00:   23689.429 ms/op
                 executeQuery·p0.50:   23689.429 ms/op
                 executeQuery·p0.90:   23689.429 ms/op
                 executeQuery·p0.95:   23689.429 ms/op
                 executeQuery·p0.99:   23689.429 ms/op
                 executeQuery·p0.999:  23689.429 ms/op
                 executeQuery·p0.9999: 23689.429 ms/op
                 executeQuery·p1.00:   23689.429 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  29920.487 ±(99.9%) 10248.591 ms/op

  Histogram, ms/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 4 
    [25000.000, 27500.000) = 1 
    [27500.000, 30000.000) = 2 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 1 
    [37500.000, 40000.000) = 0 
    [40000.000, 42500.000) = 2 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  23689.429 ms/op
     p(50.0000) =  27111.981 ms/op
     p(90.0000) =  40553.887 ms/op
     p(95.0000) =  40600.863 ms/op
     p(99.0000) =  40600.863 ms/op
     p(99.9000) =  40600.863 ms/op
     p(99.9900) =  40600.863 ms/op
     p(99.9990) =  40600.863 ms/op
     p(99.9999) =  40600.863 ms/op
    p(100.0000) =  40600.863 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 11.11% complete, ETA 08:48:13
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7172.260 ms/op
# Warmup Iteration   2: 6257.902 ms/op
# Warmup Iteration   3: 6064.964 ms/op
# Warmup Iteration   4: 6064.964 ms/op
# Warmup Iteration   5: 6064.964 ms/op
Iteration   1: 6069.158 ms/op
                 executeQuery·p0.00:   6064.964 ms/op
                 executeQuery·p0.50:   6069.158 ms/op
                 executeQuery·p0.90:   6073.352 ms/op
                 executeQuery·p0.95:   6073.352 ms/op
                 executeQuery·p0.99:   6073.352 ms/op
                 executeQuery·p0.999:  6073.352 ms/op
                 executeQuery·p0.9999: 6073.352 ms/op
                 executeQuery·p1.00:   6073.352 ms/op

Iteration   2: 6098.518 ms/op
                 executeQuery·p0.00:   6064.964 ms/op
                 executeQuery·p0.50:   6098.518 ms/op
                 executeQuery·p0.90:   6132.072 ms/op
                 executeQuery·p0.95:   6132.072 ms/op
                 executeQuery·p0.99:   6132.072 ms/op
                 executeQuery·p0.999:  6132.072 ms/op
                 executeQuery·p0.9999: 6132.072 ms/op
                 executeQuery·p1.00:   6132.072 ms/op

Iteration   3: 6069.158 ms/op
                 executeQuery·p0.00:   6064.964 ms/op
                 executeQuery·p0.50:   6069.158 ms/op
                 executeQuery·p0.90:   6073.352 ms/op
                 executeQuery·p0.95:   6073.352 ms/op
                 executeQuery·p0.99:   6073.352 ms/op
                 executeQuery·p0.999:  6073.352 ms/op
                 executeQuery·p0.9999: 6073.352 ms/op
                 executeQuery·p1.00:   6073.352 ms/op

Iteration   4: 6132.072 ms/op
                 executeQuery·p0.00:   6073.352 ms/op
                 executeQuery·p0.50:   6132.072 ms/op
                 executeQuery·p0.90:   6190.793 ms/op
                 executeQuery·p0.95:   6190.793 ms/op
                 executeQuery·p0.99:   6190.793 ms/op
                 executeQuery·p0.999:  6190.793 ms/op
                 executeQuery·p0.9999: 6190.793 ms/op
                 executeQuery·p1.00:   6190.793 ms/op

Iteration   5: 6199.181 ms/op
                 executeQuery·p0.00:   6056.575 ms/op
                 executeQuery·p0.50:   6199.181 ms/op
                 executeQuery·p0.90:   6341.788 ms/op
                 executeQuery·p0.95:   6341.788 ms/op
                 executeQuery·p0.99:   6341.788 ms/op
                 executeQuery·p0.999:  6341.788 ms/op
                 executeQuery·p0.9999: 6341.788 ms/op
                 executeQuery·p1.00:   6341.788 ms/op


# Run progress: 11.67% complete, ETA 08:35:49
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1359045240 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1359045240() {
        this(4);
    }
    public KeyValueMap_1359045240(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1359045240 aggregation_state_map = new KeyValueMap_1359045240();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5263.852 ±(99.9%) 33105.105 ms/op
# Warmup Iteration   2: 6325.010 ms/op
# Warmup Iteration   3: 6060.769 ms/op
# Warmup Iteration   4: 6064.964 ms/op
# Warmup Iteration   5: 6090.129 ms/op
Iteration   1: 6144.655 ms/op
                 executeQuery·p0.00:   6123.684 ms/op
                 executeQuery·p0.50:   6144.655 ms/op
                 executeQuery·p0.90:   6165.627 ms/op
                 executeQuery·p0.95:   6165.627 ms/op
                 executeQuery·p0.99:   6165.627 ms/op
                 executeQuery·p0.999:  6165.627 ms/op
                 executeQuery·p0.9999: 6165.627 ms/op
                 executeQuery·p1.00:   6165.627 ms/op

Iteration   2: 6056.575 ms/op
                 executeQuery·p0.00:   6048.186 ms/op
                 executeQuery·p0.50:   6056.575 ms/op
                 executeQuery·p0.90:   6064.964 ms/op
                 executeQuery·p0.95:   6064.964 ms/op
                 executeQuery·p0.99:   6064.964 ms/op
                 executeQuery·p0.999:  6064.964 ms/op
                 executeQuery·p0.9999: 6064.964 ms/op
                 executeQuery·p1.00:   6064.964 ms/op

Iteration   3: 6060.769 ms/op
                 executeQuery·p0.00:   6056.575 ms/op
                 executeQuery·p0.50:   6060.769 ms/op
                 executeQuery·p0.90:   6064.964 ms/op
                 executeQuery·p0.95:   6064.964 ms/op
                 executeQuery·p0.99:   6064.964 ms/op
                 executeQuery·p0.999:  6064.964 ms/op
                 executeQuery·p0.9999: 6064.964 ms/op
                 executeQuery·p1.00:   6064.964 ms/op

Iteration   4: 6060.769 ms/op
                 executeQuery·p0.00:   6056.575 ms/op
                 executeQuery·p0.50:   6060.769 ms/op
                 executeQuery·p0.90:   6064.964 ms/op
                 executeQuery·p0.95:   6064.964 ms/op
                 executeQuery·p0.99:   6064.964 ms/op
                 executeQuery·p0.999:  6064.964 ms/op
                 executeQuery·p0.9999: 6064.964 ms/op
                 executeQuery·p1.00:   6064.964 ms/op

Iteration   5: 6060.769 ms/op
                 executeQuery·p0.00:   6056.575 ms/op
                 executeQuery·p0.50:   6060.769 ms/op
                 executeQuery·p0.90:   6064.964 ms/op
                 executeQuery·p0.95:   6064.964 ms/op
                 executeQuery·p0.99:   6064.964 ms/op
                 executeQuery·p0.999:  6064.964 ms/op
                 executeQuery·p0.9999: 6064.964 ms/op
                 executeQuery·p1.00:   6064.964 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   6095.163 ±(99.9%) 60.780 ms/op

  Histogram, ms/op:
    [6000.000, 6025.000) = 0 
    [6025.000, 6050.000) = 1 
    [6050.000, 6075.000) = 14 
    [6075.000, 6100.000) = 0 
    [6100.000, 6125.000) = 1 
    [6125.000, 6150.000) = 1 
    [6150.000, 6175.000) = 1 
    [6175.000, 6200.000) = 1 
    [6200.000, 6225.000) = 0 
    [6225.000, 6250.000) = 0 
    [6250.000, 6275.000) = 0 
    [6275.000, 6300.000) = 0 
    [6300.000, 6325.000) = 0 
    [6325.000, 6350.000) = 1 
    [6350.000, 6375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   6048.186 ms/op
     p(50.0000) =   6064.964 ms/op
     p(90.0000) =   6188.276 ms/op
     p(95.0000) =   6334.238 ms/op
     p(99.0000) =   6341.788 ms/op
     p(99.9000) =   6341.788 ms/op
     p(99.9900) =   6341.788 ms/op
     p(99.9990) =   6341.788 ms/op
     p(99.9999) =   6341.788 ms/op
    p(100.0000) =   6341.788 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 12.22% complete, ETA 08:24:30
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_424860664 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_424860664() {
        this(4);
    }
    public KeyValueMap_424860664(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_424860664 aggregation_state_map = new KeyValueMap_424860664();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

10057.941 ms/op
# Warmup Iteration   2: 10468.983 ms/op
# Warmup Iteration   3: 10385.097 ms/op
# Warmup Iteration   4: 10905.190 ms/op
# Warmup Iteration   5: 10586.423 ms/op
Iteration   1: 10653.532 ms/op
                 executeQuery·p0.00:   10653.532 ms/op
                 executeQuery·p0.50:   10653.532 ms/op
                 executeQuery·p0.90:   10653.532 ms/op
                 executeQuery·p0.95:   10653.532 ms/op
                 executeQuery·p0.99:   10653.532 ms/op
                 executeQuery·p0.999:  10653.532 ms/op
                 executeQuery·p0.9999: 10653.532 ms/op
                 executeQuery·p1.00:   10653.532 ms/op

Iteration   2: 10468.983 ms/op
                 executeQuery·p0.00:   10468.983 ms/op
                 executeQuery·p0.50:   10468.983 ms/op
                 executeQuery·p0.90:   10468.983 ms/op
                 executeQuery·p0.95:   10468.983 ms/op
                 executeQuery·p0.99:   10468.983 ms/op
                 executeQuery·p0.999:  10468.983 ms/op
                 executeQuery·p0.9999: 10468.983 ms/op
                 executeQuery·p1.00:   10468.983 ms/op

Iteration   3: 10485.760 ms/op
                 executeQuery·p0.00:   10485.760 ms/op
                 executeQuery·p0.50:   10485.760 ms/op
                 executeQuery·p0.90:   10485.760 ms/op
                 executeQuery·p0.95:   10485.760 ms/op
                 executeQuery·p0.99:   10485.760 ms/op
                 executeQuery·p0.999:  10485.760 ms/op
                 executeQuery·p0.9999: 10485.760 ms/op
                 executeQuery·p1.00:   10485.760 ms/op

Iteration   4: 10552.869 ms/op
                 executeQuery·p0.00:   10552.869 ms/op
                 executeQuery·p0.50:   10552.869 ms/op
                 executeQuery·p0.90:   10552.869 ms/op
                 executeQuery·p0.95:   10552.869 ms/op
                 executeQuery·p0.99:   10552.869 ms/op
                 executeQuery·p0.999:  10552.869 ms/op
                 executeQuery·p0.9999: 10552.869 ms/op
                 executeQuery·p1.00:   10552.869 ms/op

Iteration   5: 10485.760 ms/op
                 executeQuery·p0.00:   10485.760 ms/op
                 executeQuery·p0.50:   10485.760 ms/op
                 executeQuery·p0.90:   10485.760 ms/op
                 executeQuery·p0.95:   10485.760 ms/op
                 executeQuery·p0.99:   10485.760 ms/op
                 executeQuery·p0.999:  10485.760 ms/op
                 executeQuery·p0.9999: 10485.760 ms/op
                 executeQuery·p1.00:   10485.760 ms/op


# Run progress: 12.78% complete, ETA 08:12:47
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_424860664 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_424860664() {
        this(4);
    }
    public KeyValueMap_424860664(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_424860664 aggregation_state_map = new KeyValueMap_424860664();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

9865.003 ms/op
# Warmup Iteration   2: 10502.537 ms/op
# Warmup Iteration   3: 10502.537 ms/op
# Warmup Iteration   4: 10351.542 ms/op
# Warmup Iteration   5: 10301.211 ms/op
Iteration   1: 10334.765 ms/op
                 executeQuery·p0.00:   10334.765 ms/op
                 executeQuery·p0.50:   10334.765 ms/op
                 executeQuery·p0.90:   10334.765 ms/op
                 executeQuery·p0.95:   10334.765 ms/op
                 executeQuery·p0.99:   10334.765 ms/op
                 executeQuery·p0.999:  10334.765 ms/op
                 executeQuery·p0.9999: 10334.765 ms/op
                 executeQuery·p1.00:   10334.765 ms/op

Iteration   2: 10485.760 ms/op
                 executeQuery·p0.00:   10485.760 ms/op
                 executeQuery·p0.50:   10485.760 ms/op
                 executeQuery·p0.90:   10485.760 ms/op
                 executeQuery·p0.95:   10485.760 ms/op
                 executeQuery·p0.99:   10485.760 ms/op
                 executeQuery·p0.999:  10485.760 ms/op
                 executeQuery·p0.9999: 10485.760 ms/op
                 executeQuery·p1.00:   10485.760 ms/op

Iteration   3: 10301.211 ms/op
                 executeQuery·p0.00:   10301.211 ms/op
                 executeQuery·p0.50:   10301.211 ms/op
                 executeQuery·p0.90:   10301.211 ms/op
                 executeQuery·p0.95:   10301.211 ms/op
                 executeQuery·p0.99:   10301.211 ms/op
                 executeQuery·p0.999:  10301.211 ms/op
                 executeQuery·p0.9999: 10301.211 ms/op
                 executeQuery·p1.00:   10301.211 ms/op

Iteration   4: 10385.097 ms/op
                 executeQuery·p0.00:   10385.097 ms/op
                 executeQuery·p0.50:   10385.097 ms/op
                 executeQuery·p0.90:   10385.097 ms/op
                 executeQuery·p0.95:   10385.097 ms/op
                 executeQuery·p0.99:   10385.097 ms/op
                 executeQuery·p0.999:  10385.097 ms/op
                 executeQuery·p0.9999: 10385.097 ms/op
                 executeQuery·p1.00:   10385.097 ms/op

Iteration   5: 10301.211 ms/op
                 executeQuery·p0.00:   10301.211 ms/op
                 executeQuery·p0.50:   10301.211 ms/op
                 executeQuery·p0.90:   10301.211 ms/op
                 executeQuery·p0.95:   10301.211 ms/op
                 executeQuery·p0.99:   10301.211 ms/op
                 executeQuery·p0.999:  10301.211 ms/op
                 executeQuery·p0.9999: 10301.211 ms/op
                 executeQuery·p1.00:   10301.211 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  10445.495 ±(99.9%) 172.944 ms/op

  Histogram, ms/op:
    [10300.000, 10325.000) = 2 
    [10325.000, 10350.000) = 1 
    [10350.000, 10375.000) = 0 
    [10375.000, 10400.000) = 1 
    [10400.000, 10425.000) = 0 
    [10425.000, 10450.000) = 0 
    [10450.000, 10475.000) = 1 
    [10475.000, 10500.000) = 3 
    [10500.000, 10525.000) = 0 
    [10525.000, 10550.000) = 0 
    [10550.000, 10575.000) = 1 
    [10575.000, 10600.000) = 0 
    [10600.000, 10625.000) = 0 
    [10625.000, 10650.000) = 0 
    [10650.000, 10675.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  10301.211 ms/op
     p(50.0000) =  10477.371 ms/op
     p(90.0000) =  10643.466 ms/op
     p(95.0000) =  10653.532 ms/op
     p(99.0000) =  10653.532 ms/op
     p(99.9000) =  10653.532 ms/op
     p(99.9900) =  10653.532 ms/op
     p(99.9990) =  10653.532 ms/op
     p(99.9999) =  10653.532 ms/op
    p(100.0000) =  10653.532 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 13.33% complete, ETA 08:01:41
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

12415.140 ms/op
# Warmup Iteration   2: 11827.937 ms/op
# Warmup Iteration   3: 12566.135 ms/op
# Warmup Iteration   4: 12247.368 ms/op
# Warmup Iteration   5: 10502.537 ms/op
Iteration   1: 10502.537 ms/op
                 executeQuery·p0.00:   10502.537 ms/op
                 executeQuery·p0.50:   10502.537 ms/op
                 executeQuery·p0.90:   10502.537 ms/op
                 executeQuery·p0.95:   10502.537 ms/op
                 executeQuery·p0.99:   10502.537 ms/op
                 executeQuery·p0.999:  10502.537 ms/op
                 executeQuery·p0.9999: 10502.537 ms/op
                 executeQuery·p1.00:   10502.537 ms/op

Iteration   2: 12683.575 ms/op
                 executeQuery·p0.00:   12683.575 ms/op
                 executeQuery·p0.50:   12683.575 ms/op
                 executeQuery·p0.90:   12683.575 ms/op
                 executeQuery·p0.95:   12683.575 ms/op
                 executeQuery·p0.99:   12683.575 ms/op
                 executeQuery·p0.999:  12683.575 ms/op
                 executeQuery·p0.9999: 12683.575 ms/op
                 executeQuery·p1.00:   12683.575 ms/op

Iteration   3: 12851.347 ms/op
                 executeQuery·p0.00:   12851.347 ms/op
                 executeQuery·p0.50:   12851.347 ms/op
                 executeQuery·p0.90:   12851.347 ms/op
                 executeQuery·p0.95:   12851.347 ms/op
                 executeQuery·p0.99:   12851.347 ms/op
                 executeQuery·p0.999:  12851.347 ms/op
                 executeQuery·p0.9999: 12851.347 ms/op
                 executeQuery·p1.00:   12851.347 ms/op

Iteration   4: 12297.699 ms/op
                 executeQuery·p0.00:   12297.699 ms/op
                 executeQuery·p0.50:   12297.699 ms/op
                 executeQuery·p0.90:   12297.699 ms/op
                 executeQuery·p0.95:   12297.699 ms/op
                 executeQuery·p0.99:   12297.699 ms/op
                 executeQuery·p0.999:  12297.699 ms/op
                 executeQuery·p0.9999: 12297.699 ms/op
                 executeQuery·p1.00:   12297.699 ms/op

Iteration   5: 12012.487 ms/op
                 executeQuery·p0.00:   12012.487 ms/op
                 executeQuery·p0.50:   12012.487 ms/op
                 executeQuery·p0.90:   12012.487 ms/op
                 executeQuery·p0.95:   12012.487 ms/op
                 executeQuery·p0.99:   12012.487 ms/op
                 executeQuery·p0.999:  12012.487 ms/op
                 executeQuery·p0.9999: 12012.487 ms/op
                 executeQuery·p1.00:   12012.487 ms/op


# Run progress: 13.89% complete, ETA 07:52:01
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

12817.793 ms/op
# Warmup Iteration   2: 12650.021 ms/op
# Warmup Iteration   3: 12180.259 ms/op
# Warmup Iteration   4: 12415.140 ms/op
# Warmup Iteration   5: 12566.135 ms/op
Iteration   1: 12582.912 ms/op
                 executeQuery·p0.00:   12582.912 ms/op
                 executeQuery·p0.50:   12582.912 ms/op
                 executeQuery·p0.90:   12582.912 ms/op
                 executeQuery·p0.95:   12582.912 ms/op
                 executeQuery·p0.99:   12582.912 ms/op
                 executeQuery·p0.999:  12582.912 ms/op
                 executeQuery·p0.9999: 12582.912 ms/op
                 executeQuery·p1.00:   12582.912 ms/op

Iteration   2: 12515.803 ms/op
                 executeQuery·p0.00:   12515.803 ms/op
                 executeQuery·p0.50:   12515.803 ms/op
                 executeQuery·p0.90:   12515.803 ms/op
                 executeQuery·p0.95:   12515.803 ms/op
                 executeQuery·p0.99:   12515.803 ms/op
                 executeQuery·p0.999:  12515.803 ms/op
                 executeQuery·p0.9999: 12515.803 ms/op
                 executeQuery·p1.00:   12515.803 ms/op

Iteration   3: 13103.006 ms/op
                 executeQuery·p0.00:   13103.006 ms/op
                 executeQuery·p0.50:   13103.006 ms/op
                 executeQuery·p0.90:   13103.006 ms/op
                 executeQuery·p0.95:   13103.006 ms/op
                 executeQuery·p0.99:   13103.006 ms/op
                 executeQuery·p0.999:  13103.006 ms/op
                 executeQuery·p0.9999: 13103.006 ms/op
                 executeQuery·p1.00:   13103.006 ms/op

Iteration   4: 12935.234 ms/op
                 executeQuery·p0.00:   12935.234 ms/op
                 executeQuery·p0.50:   12935.234 ms/op
                 executeQuery·p0.90:   12935.234 ms/op
                 executeQuery·p0.95:   12935.234 ms/op
                 executeQuery·p0.99:   12935.234 ms/op
                 executeQuery·p0.999:  12935.234 ms/op
                 executeQuery·p0.9999: 12935.234 ms/op
                 executeQuery·p1.00:   12935.234 ms/op

Iteration   5: 12868.125 ms/op
                 executeQuery·p0.00:   12868.125 ms/op
                 executeQuery·p0.50:   12868.125 ms/op
                 executeQuery·p0.90:   12868.125 ms/op
                 executeQuery·p0.95:   12868.125 ms/op
                 executeQuery·p0.99:   12868.125 ms/op
                 executeQuery·p0.999:  12868.125 ms/op
                 executeQuery·p0.9999: 12868.125 ms/op
                 executeQuery·p1.00:   12868.125 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  12435.272 ±(99.9%) 1135.782 ms/op

  Histogram, ms/op:
    [10000.000, 10250.000) = 0 
    [10250.000, 10500.000) = 0 
    [10500.000, 10750.000) = 1 
    [10750.000, 11000.000) = 0 
    [11000.000, 11250.000) = 0 
    [11250.000, 11500.000) = 0 
    [11500.000, 11750.000) = 0 
    [11750.000, 12000.000) = 0 
    [12000.000, 12250.000) = 1 
    [12250.000, 12500.000) = 1 
    [12500.000, 12750.000) = 3 
    [12750.000, 13000.000) = 3 
    [13000.000, 13250.000) = 1 
    [13250.000, 13500.000) = 0 
    [13500.000, 13750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  10502.537 ms/op
     p(50.0000) =  12633.244 ms/op
     p(90.0000) =  13086.228 ms/op
     p(95.0000) =  13103.006 ms/op
     p(99.0000) =  13103.006 ms/op
     p(99.9000) =  13103.006 ms/op
     p(99.9900) =  13103.006 ms/op
     p(99.9990) =  13103.006 ms/op
     p(99.9999) =  13103.006 ms/op
    p(100.0000) =  13103.006 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 14.44% complete, ETA 07:43:37
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_424860664 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_424860664() {
        this(4);
    }
    public KeyValueMap_424860664(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_424860664 aggregation_state_map = new KeyValueMap_424860664();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

18421.383 ms/op
# Warmup Iteration   2: 25333.596 ms/op
# Warmup Iteration   3: 26944.209 ms/op
# Warmup Iteration   4: 18354.274 ms/op
# Warmup Iteration   5: 17985.176 ms/op
Iteration   1: 28185.723 ms/op
                 executeQuery·p0.00:   28185.723 ms/op
                 executeQuery·p0.50:   28185.723 ms/op
                 executeQuery·p0.90:   28185.723 ms/op
                 executeQuery·p0.95:   28185.723 ms/op
                 executeQuery·p0.99:   28185.723 ms/op
                 executeQuery·p0.999:  28185.723 ms/op
                 executeQuery·p0.9999: 28185.723 ms/op
                 executeQuery·p1.00:   28185.723 ms/op

Iteration   2: 19025.363 ms/op
                 executeQuery·p0.00:   19025.363 ms/op
                 executeQuery·p0.50:   19025.363 ms/op
                 executeQuery·p0.90:   19025.363 ms/op
                 executeQuery·p0.95:   19025.363 ms/op
                 executeQuery·p0.99:   19025.363 ms/op
                 executeQuery·p0.999:  19025.363 ms/op
                 executeQuery·p0.9999: 19025.363 ms/op
                 executeQuery·p1.00:   19025.363 ms/op

Iteration   3: 17347.641 ms/op
                 executeQuery·p0.00:   17347.641 ms/op
                 executeQuery·p0.50:   17347.641 ms/op
                 executeQuery·p0.90:   17347.641 ms/op
                 executeQuery·p0.95:   17347.641 ms/op
                 executeQuery·p0.99:   17347.641 ms/op
                 executeQuery·p0.999:  17347.641 ms/op
                 executeQuery·p0.9999: 17347.641 ms/op
                 executeQuery·p1.00:   17347.641 ms/op

Iteration   4: 26809.991 ms/op
                 executeQuery·p0.00:   26809.991 ms/op
                 executeQuery·p0.50:   26809.991 ms/op
                 executeQuery·p0.90:   26809.991 ms/op
                 executeQuery·p0.95:   26809.991 ms/op
                 executeQuery·p0.99:   26809.991 ms/op
                 executeQuery·p0.999:  26809.991 ms/op
                 executeQuery·p0.9999: 26809.991 ms/op
                 executeQuery·p1.00:   26809.991 ms/op

Iteration   5: 26508.001 ms/op
                 executeQuery·p0.00:   26508.001 ms/op
                 executeQuery·p0.50:   26508.001 ms/op
                 executeQuery·p0.90:   26508.001 ms/op
                 executeQuery·p0.95:   26508.001 ms/op
                 executeQuery·p0.99:   26508.001 ms/op
                 executeQuery·p0.999:  26508.001 ms/op
                 executeQuery·p0.9999: 26508.001 ms/op
                 executeQuery·p1.00:   26508.001 ms/op


# Run progress: 15.00% complete, ETA 07:51:43
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

17179.869 ms/op
# Warmup Iteration   2: 17884.512 ms/op
# Warmup Iteration   3: 24159.191 ms/op
# Warmup Iteration   4: 18991.809 ms/op
# Warmup Iteration   5: 17951.621 ms/op
Iteration   1: 17918.067 ms/op
                 executeQuery·p0.00:   17918.067 ms/op
                 executeQuery·p0.50:   17918.067 ms/op
                 executeQuery·p0.90:   17918.067 ms/op
                 executeQuery·p0.95:   17918.067 ms/op
                 executeQuery·p0.99:   17918.067 ms/op
                 executeQuery·p0.999:  17918.067 ms/op
                 executeQuery·p0.9999: 17918.067 ms/op
                 executeQuery·p1.00:   17918.067 ms/op

Iteration   2: 17951.621 ms/op
                 executeQuery·p0.00:   17951.621 ms/op
                 executeQuery·p0.50:   17951.621 ms/op
                 executeQuery·p0.90:   17951.621 ms/op
                 executeQuery·p0.95:   17951.621 ms/op
                 executeQuery·p0.99:   17951.621 ms/op
                 executeQuery·p0.999:  17951.621 ms/op
                 executeQuery·p0.9999: 17951.621 ms/op
                 executeQuery·p1.00:   17951.621 ms/op

Iteration   3: 18018.730 ms/op
                 executeQuery·p0.00:   18018.730 ms/op
                 executeQuery·p0.50:   18018.730 ms/op
                 executeQuery·p0.90:   18018.730 ms/op
                 executeQuery·p0.95:   18018.730 ms/op
                 executeQuery·p0.99:   18018.730 ms/op
                 executeQuery·p0.999:  18018.730 ms/op
                 executeQuery·p0.9999: 18018.730 ms/op
                 executeQuery·p1.00:   18018.730 ms/op

Iteration   4: 17850.958 ms/op
                 executeQuery·p0.00:   17850.958 ms/op
                 executeQuery·p0.50:   17850.958 ms/op
                 executeQuery·p0.90:   17850.958 ms/op
                 executeQuery·p0.95:   17850.958 ms/op
                 executeQuery·p0.99:   17850.958 ms/op
                 executeQuery·p0.999:  17850.958 ms/op
                 executeQuery·p0.9999: 17850.958 ms/op
                 executeQuery·p1.00:   17850.958 ms/op

Iteration   5: 19126.026 ms/op
                 executeQuery·p0.00:   19126.026 ms/op
                 executeQuery·p0.50:   19126.026 ms/op
                 executeQuery·p0.90:   19126.026 ms/op
                 executeQuery·p0.95:   19126.026 ms/op
                 executeQuery·p0.99:   19126.026 ms/op
                 executeQuery·p0.999:  19126.026 ms/op
                 executeQuery·p0.9999: 19126.026 ms/op
                 executeQuery·p1.00:   19126.026 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  20874.212 ±(99.9%) 6645.994 ms/op

  Histogram, ms/op:
    [10000.000, 11250.000) = 0 
    [11250.000, 12500.000) = 0 
    [12500.000, 13750.000) = 0 
    [13750.000, 15000.000) = 0 
    [15000.000, 16250.000) = 0 
    [16250.000, 17500.000) = 1 
    [17500.000, 18750.000) = 4 
    [18750.000, 20000.000) = 2 
    [20000.000, 21250.000) = 0 
    [21250.000, 22500.000) = 0 
    [22500.000, 23750.000) = 0 
    [23750.000, 25000.000) = 0 
    [25000.000, 26250.000) = 0 
    [26250.000, 27500.000) = 2 
    [27500.000, 28750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  17347.641 ms/op
     p(50.0000) =  18522.046 ms/op
     p(90.0000) =  28048.150 ms/op
     p(95.0000) =  28185.723 ms/op
     p(99.0000) =  28185.723 ms/op
     p(99.9000) =  28185.723 ms/op
     p(99.9900) =  28185.723 ms/op
     p(99.9990) =  28185.723 ms/op
     p(99.9999) =  28185.723 ms/op
    p(100.0000) =  28185.723 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 15.56% complete, ETA 07:55:32
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

48653.926 ms/op
# Warmup Iteration   2: 79054.242 ms/op
# Warmup Iteration   3: 77712.065 ms/op
# Warmup Iteration   4: 47647.293 ms/op
# Warmup Iteration   5: 64894.271 ms/op
Iteration   1: 77443.629 ms/op
                 executeQuery·p0.00:   77443.629 ms/op
                 executeQuery·p0.50:   77443.629 ms/op
                 executeQuery·p0.90:   77443.629 ms/op
                 executeQuery·p0.95:   77443.629 ms/op
                 executeQuery·p0.99:   77443.629 ms/op
                 executeQuery·p0.999:  77443.629 ms/op
                 executeQuery·p0.9999: 77443.629 ms/op
                 executeQuery·p1.00:   77443.629 ms/op

Iteration   2: 49459.233 ms/op
                 executeQuery·p0.00:   49459.233 ms/op
                 executeQuery·p0.50:   49459.233 ms/op
                 executeQuery·p0.90:   49459.233 ms/op
                 executeQuery·p0.95:   49459.233 ms/op
                 executeQuery·p0.99:   49459.233 ms/op
                 executeQuery·p0.999:  49459.233 ms/op
                 executeQuery·p0.9999: 49459.233 ms/op
                 executeQuery·p1.00:   49459.233 ms/op

Iteration   3: 76772.540 ms/op
                 executeQuery·p0.00:   76772.540 ms/op
                 executeQuery·p0.50:   76772.540 ms/op
                 executeQuery·p0.90:   76772.540 ms/op
                 executeQuery·p0.95:   76772.540 ms/op
                 executeQuery·p0.99:   76772.540 ms/op
                 executeQuery·p0.999:  76772.540 ms/op
                 executeQuery·p0.9999: 76772.540 ms/op
                 executeQuery·p1.00:   76772.540 ms/op

Iteration   4: 78517.371 ms/op
                 executeQuery·p0.00:   78517.371 ms/op
                 executeQuery·p0.50:   78517.371 ms/op
                 executeQuery·p0.90:   78517.371 ms/op
                 executeQuery·p0.95:   78517.371 ms/op
                 executeQuery·p0.99:   78517.371 ms/op
                 executeQuery·p0.999:  78517.371 ms/op
                 executeQuery·p0.9999: 78517.371 ms/op
                 executeQuery·p1.00:   78517.371 ms/op

Iteration   5: 48989.471 ms/op
                 executeQuery·p0.00:   48989.471 ms/op
                 executeQuery·p0.50:   48989.471 ms/op
                 executeQuery·p0.90:   48989.471 ms/op
                 executeQuery·p0.95:   48989.471 ms/op
                 executeQuery·p0.99:   48989.471 ms/op
                 executeQuery·p0.999:  48989.471 ms/op
                 executeQuery·p0.9999: 48989.471 ms/op
                 executeQuery·p1.00:   48989.471 ms/op


# Run progress: 16.11% complete, ETA 08:58:12
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_468423630 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_468423630() {
        this(4);
    }
    public KeyValueMap_468423630(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_468423630 aggregation_state_map = new KeyValueMap_468423630();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

46103.790 ms/op
# Warmup Iteration   2: 45768.245 ms/op
# Warmup Iteration   3: 58116.276 ms/op
# Warmup Iteration   4: 52277.805 ms/op
# Warmup Iteration   5: 50465.866 ms/op
Iteration   1: 49928.995 ms/op
                 executeQuery·p0.00:   49928.995 ms/op
                 executeQuery·p0.50:   49928.995 ms/op
                 executeQuery·p0.90:   49928.995 ms/op
                 executeQuery·p0.95:   49928.995 ms/op
                 executeQuery·p0.99:   49928.995 ms/op
                 executeQuery·p0.999:  49928.995 ms/op
                 executeQuery·p0.9999: 49928.995 ms/op
                 executeQuery·p1.00:   49928.995 ms/op

Iteration   2: 49660.559 ms/op
                 executeQuery·p0.00:   49660.559 ms/op
                 executeQuery·p0.50:   49660.559 ms/op
                 executeQuery·p0.90:   49660.559 ms/op
                 executeQuery·p0.95:   49660.559 ms/op
                 executeQuery·p0.99:   49660.559 ms/op
                 executeQuery·p0.999:  49660.559 ms/op
                 executeQuery·p0.9999: 49660.559 ms/op
                 executeQuery·p1.00:   49660.559 ms/op

Iteration   3: 46372.225 ms/op
                 executeQuery·p0.00:   46372.225 ms/op
                 executeQuery·p0.50:   46372.225 ms/op
                 executeQuery·p0.90:   46372.225 ms/op
                 executeQuery·p0.95:   46372.225 ms/op
                 executeQuery·p0.99:   46372.225 ms/op
                 executeQuery·p0.999:  46372.225 ms/op
                 executeQuery·p0.9999: 46372.225 ms/op
                 executeQuery·p1.00:   46372.225 ms/op

Iteration   4: 48721.035 ms/op
                 executeQuery·p0.00:   48721.035 ms/op
                 executeQuery·p0.50:   48721.035 ms/op
                 executeQuery·p0.90:   48721.035 ms/op
                 executeQuery·p0.95:   48721.035 ms/op
                 executeQuery·p0.99:   48721.035 ms/op
                 executeQuery·p0.999:  48721.035 ms/op
                 executeQuery·p0.9999: 48721.035 ms/op
                 executeQuery·p1.00:   48721.035 ms/op

Iteration   5: 49794.777 ms/op
                 executeQuery·p0.00:   49794.777 ms/op
                 executeQuery·p0.50:   49794.777 ms/op
                 executeQuery·p0.90:   49794.777 ms/op
                 executeQuery·p0.95:   49794.777 ms/op
                 executeQuery·p0.99:   49794.777 ms/op
                 executeQuery·p0.999:  49794.777 ms/op
                 executeQuery·p0.9999: 49794.777 ms/op
                 executeQuery·p1.00:   49794.777 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  57565.984 ±(99.9%) 20942.808 ms/op

  Histogram, ms/op:
    [40000.000, 42500.000) = 0 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 1 
    [47500.000, 50000.000) = 6 
    [50000.000, 52500.000) = 0 
    [52500.000, 55000.000) = 0 
    [55000.000, 57500.000) = 0 
    [57500.000, 60000.000) = 0 
    [60000.000, 62500.000) = 0 
    [62500.000, 65000.000) = 0 
    [65000.000, 67500.000) = 0 
    [67500.000, 70000.000) = 0 
    [70000.000, 72500.000) = 0 
    [72500.000, 75000.000) = 0 
    [75000.000, 77500.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  46372.225 ms/op
     p(50.0000) =  49727.668 ms/op
     p(90.0000) =  78409.997 ms/op
     p(95.0000) =  78517.371 ms/op
     p(99.0000) =  78517.371 ms/op
     p(99.9000) =  78517.371 ms/op
     p(99.9900) =  78517.371 ms/op
     p(99.9990) =  78517.371 ms/op
     p(99.9999) =  78517.371 ms/op
    p(100.0000) =  78517.371 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 16.67% complete, ETA 09:43:36
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

360.654 ±(99.9%) 17.917 ms/op
# Warmup Iteration   2: 352.828 ±(99.9%) 4.866 ms/op
# Warmup Iteration   3: 353.424 ±(99.9%) 3.346 ms/op
# Warmup Iteration   4: 356.190 ±(99.9%) 6.113 ms/op
# Warmup Iteration   5: 359.961 ±(99.9%) 4.267 ms/op
Iteration   1: 359.474 ±(99.9%) 4.734 ms/op
                 executeQuery·p0.00:   353.370 ms/op
                 executeQuery·p0.50:   357.564 ms/op
                 executeQuery·p0.90:   367.159 ms/op
                 executeQuery·p0.95:   380.502 ms/op
                 executeQuery·p0.99:   386.400 ms/op
                 executeQuery·p0.999:  386.400 ms/op
                 executeQuery·p0.9999: 386.400 ms/op
                 executeQuery·p1.00:   386.400 ms/op

Iteration   2: 359.081 ±(99.9%) 5.042 ms/op
                 executeQuery·p0.00:   352.846 ms/op
                 executeQuery·p0.50:   357.564 ms/op
                 executeQuery·p0.90:   367.526 ms/op
                 executeQuery·p0.95:   381.472 ms/op
                 executeQuery·p0.99:   389.022 ms/op
                 executeQuery·p0.999:  389.022 ms/op
                 executeQuery·p0.9999: 389.022 ms/op
                 executeQuery·p1.00:   389.022 ms/op

Iteration   3: 358.950 ±(99.9%) 4.199 ms/op
                 executeQuery·p0.00:   353.894 ms/op
                 executeQuery·p0.50:   357.564 ms/op
                 executeQuery·p0.90:   366.425 ms/op
                 executeQuery·p0.95:   377.592 ms/op
                 executeQuery·p0.99:   383.255 ms/op
                 executeQuery·p0.999:  383.255 ms/op
                 executeQuery·p0.9999: 383.255 ms/op
                 executeQuery·p1.00:   383.255 ms/op

Iteration   4: 359.886 ±(99.9%) 5.145 ms/op
                 executeQuery·p0.00:   353.370 ms/op
                 executeQuery·p0.50:   357.564 ms/op
                 executeQuery·p0.90:   369.938 ms/op
                 executeQuery·p0.95:   382.678 ms/op
                 executeQuery·p0.99:   386.925 ms/op
                 executeQuery·p0.999:  386.925 ms/op
                 executeQuery·p0.9999: 386.925 ms/op
                 executeQuery·p1.00:   386.925 ms/op

Iteration   5: 359.362 ±(99.9%) 3.777 ms/op
                 executeQuery·p0.00:   353.894 ms/op
                 executeQuery·p0.50:   357.564 ms/op
                 executeQuery·p0.90:   365.743 ms/op
                 executeQuery·p0.95:   376.753 ms/op
                 executeQuery·p0.99:   379.585 ms/op
                 executeQuery·p0.999:  379.585 ms/op
                 executeQuery·p0.9999: 379.585 ms/op
                 executeQuery·p1.00:   379.585 ms/op


# Run progress: 17.22% complete, ETA 09:29:16
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1882384904 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1882384904() {
        this(4);
    }
    public KeyValueMap_1882384904(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1882384904 aggregation_state_map = new KeyValueMap_1882384904();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

349.872 ±(99.9%) 21.298 ms/op
# Warmup Iteration   2: 349.827 ±(99.9%) 1.467 ms/op
# Warmup Iteration   3: 350.242 ±(99.9%) 1.654 ms/op
# Warmup Iteration   4: 352.990 ±(99.9%) 3.762 ms/op
# Warmup Iteration   5: 356.208 ±(99.9%) 3.457 ms/op
Iteration   1: 355.250 ±(99.9%) 1.125 ms/op
                 executeQuery·p0.00:   351.273 ms/op
                 executeQuery·p0.50:   355.467 ms/op
                 executeQuery·p0.90:   356.516 ms/op
                 executeQuery·p0.95:   358.613 ms/op
                 executeQuery·p0.99:   360.186 ms/op
                 executeQuery·p0.999:  360.186 ms/op
                 executeQuery·p0.9999: 360.186 ms/op
                 executeQuery·p1.00:   360.186 ms/op

Iteration   2: 354.997 ±(99.9%) 4.096 ms/op
                 executeQuery·p0.00:   350.224 ms/op
                 executeQuery·p0.50:   354.419 ms/op
                 executeQuery·p0.90:   355.992 ms/op
                 executeQuery·p0.95:   370.934 ms/op
                 executeQuery·p0.99:   384.827 ms/op
                 executeQuery·p0.999:  384.827 ms/op
                 executeQuery·p0.9999: 384.827 ms/op
                 executeQuery·p1.00:   384.827 ms/op

Iteration   3: 353.894 ±(99.9%) 1.228 ms/op
                 executeQuery·p0.00:   349.700 ms/op
                 executeQuery·p0.50:   354.419 ms/op
                 executeQuery·p0.90:   355.467 ms/op
                 executeQuery·p0.95:   356.778 ms/op
                 executeQuery·p0.99:   358.089 ms/op
                 executeQuery·p0.999:  358.089 ms/op
                 executeQuery·p0.9999: 358.089 ms/op
                 executeQuery·p1.00:   358.089 ms/op

Iteration   4: 353.967 ±(99.9%) 3.859 ms/op
                 executeQuery·p0.00:   347.079 ms/op
                 executeQuery·p0.50:   352.846 ms/op
                 executeQuery·p0.90:   362.283 ms/op
                 executeQuery·p0.95:   370.934 ms/op
                 executeQuery·p0.99:   374.342 ms/op
                 executeQuery·p0.999:  374.342 ms/op
                 executeQuery·p0.9999: 374.342 ms/op
                 executeQuery·p1.00:   374.342 ms/op

Iteration   5: 354.708 ±(99.9%) 5.544 ms/op
                 executeQuery·p0.00:   350.224 ms/op
                 executeQuery·p0.50:   353.370 ms/op
                 executeQuery·p0.90:   355.467 ms/op
                 executeQuery·p0.95:   383.517 ms/op
                 executeQuery·p0.99:   384.303 ms/op
                 executeQuery·p0.999:  384.303 ms/op
                 executeQuery·p0.9999: 384.303 ms/op
                 executeQuery·p1.00:   384.303 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 285
  mean =    356.915 ±(99.9%) 1.254 ms/op

  Histogram, ms/op:
    [340.000, 345.000) = 0 
    [345.000, 350.000) = 5 
    [350.000, 355.000) = 123 
    [355.000, 360.000) = 122 
    [360.000, 365.000) = 13 
    [365.000, 370.000) = 8 
    [370.000, 375.000) = 5 
    [375.000, 380.000) = 2 
    [380.000, 385.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    347.079 ms/op
     p(50.0000) =    355.467 ms/op
     p(90.0000) =    362.912 ms/op
     p(95.0000) =    370.200 ms/op
     p(99.0000) =    386.474 ms/op
     p(99.9000) =    389.022 ms/op
     p(99.9900) =    389.022 ms/op
     p(99.9990) =    389.022 ms/op
     p(99.9999) =    389.022 ms/op
    p(100.0000) =    389.022 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 17.78% complete, ETA 09:15:48
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

445.850 ±(99.9%) 17.186 ms/op
# Warmup Iteration   2: 436.116 ±(99.9%) 1.594 ms/op
# Warmup Iteration   3: 436.869 ±(99.9%) 3.721 ms/op
# Warmup Iteration   4: 436.048 ±(99.9%) 4.352 ms/op
# Warmup Iteration   5: 409.469 ±(99.9%) 23.904 ms/op
Iteration   1: 368.537 ±(99.9%) 2.706 ms/op
                 executeQuery·p0.00:   367.002 ms/op
                 executeQuery·p0.50:   367.526 ms/op
                 executeQuery·p0.90:   369.833 ms/op
                 executeQuery·p0.95:   382.311 ms/op
                 executeQuery·p0.99:   383.255 ms/op
                 executeQuery·p0.999:  383.255 ms/op
                 executeQuery·p0.9999: 383.255 ms/op
                 executeQuery·p1.00:   383.255 ms/op

Iteration   2: 371.138 ±(99.9%) 2.774 ms/op
                 executeQuery·p0.00:   369.623 ms/op
                 executeQuery·p0.50:   370.147 ms/op
                 executeQuery·p0.90:   373.293 ms/op
                 executeQuery·p0.95:   384.723 ms/op
                 executeQuery·p0.99:   385.352 ms/op
                 executeQuery·p0.999:  385.352 ms/op
                 executeQuery·p0.9999: 385.352 ms/op
                 executeQuery·p1.00:   385.352 ms/op

Iteration   3: 371.118 ±(99.9%) 2.836 ms/op
                 executeQuery·p0.00:   369.623 ms/op
                 executeQuery·p0.50:   370.147 ms/op
                 executeQuery·p0.90:   373.293 ms/op
                 executeQuery·p0.95:   385.037 ms/op
                 executeQuery·p0.99:   385.876 ms/op
                 executeQuery·p0.999:  385.876 ms/op
                 executeQuery·p0.9999: 385.876 ms/op
                 executeQuery·p1.00:   385.876 ms/op

Iteration   4: 371.118 ±(99.9%) 2.834 ms/op
                 executeQuery·p0.00:   369.623 ms/op
                 executeQuery·p0.50:   370.147 ms/op
                 executeQuery·p0.90:   373.293 ms/op
                 executeQuery·p0.95:   385.037 ms/op
                 executeQuery·p0.99:   385.876 ms/op
                 executeQuery·p0.999:  385.876 ms/op
                 executeQuery·p0.9999: 385.876 ms/op
                 executeQuery·p1.00:   385.876 ms/op

Iteration   5: 438.647 ±(99.9%) 13.132 ms/op
                 executeQuery·p0.00:   370.147 ms/op
                 executeQuery·p0.50:   441.975 ms/op
                 executeQuery·p0.90:   453.195 ms/op
                 executeQuery·p0.95:   462.003 ms/op
                 executeQuery·p0.99:   462.946 ms/op
                 executeQuery·p0.999:  462.946 ms/op
                 executeQuery·p0.9999: 462.946 ms/op
                 executeQuery·p1.00:   462.946 ms/op


# Run progress: 18.33% complete, ETA 09:02:56
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

444.984 ±(99.9%) 18.545 ms/op
# Warmup Iteration   2: 433.324 ±(99.9%) 3.958 ms/op
# Warmup Iteration   3: 434.361 ±(99.9%) 5.096 ms/op
# Warmup Iteration   4: 433.674 ±(99.9%) 4.439 ms/op
# Warmup Iteration   5: 435.957 ±(99.9%) 2.789 ms/op
Iteration   1: 436.891 ±(99.9%) 4.409 ms/op
                 executeQuery·p0.00:   429.392 ms/op
                 executeQuery·p0.50:   435.159 ms/op
                 executeQuery·p0.90:   444.282 ms/op
                 executeQuery·p0.95:   454.558 ms/op
                 executeQuery·p0.99:   456.655 ms/op
                 executeQuery·p0.999:  456.655 ms/op
                 executeQuery·p0.9999: 456.655 ms/op
                 executeQuery·p1.00:   456.655 ms/op

Iteration   2: 437.439 ±(99.9%) 3.910 ms/op
                 executeQuery·p0.00:   431.489 ms/op
                 executeQuery·p0.50:   436.208 ms/op
                 executeQuery·p0.90:   447.008 ms/op
                 executeQuery·p0.95:   451.622 ms/op
                 executeQuery·p0.99:   451.936 ms/op
                 executeQuery·p0.999:  451.936 ms/op
                 executeQuery·p0.9999: 451.936 ms/op
                 executeQuery·p1.00:   451.936 ms/op

Iteration   3: 428.081 ±(99.9%) 18.075 ms/op
                 executeQuery·p0.00:   369.099 ms/op
                 executeQuery·p0.50:   434.373 ms/op
                 executeQuery·p0.90:   441.450 ms/op
                 executeQuery·p0.95:   456.393 ms/op
                 executeQuery·p0.99:   461.373 ms/op
                 executeQuery·p0.999:  461.373 ms/op
                 executeQuery·p0.9999: 461.373 ms/op
                 executeQuery·p1.00:   461.373 ms/op

Iteration   4: 371.351 ±(99.9%) 3.442 ms/op
                 executeQuery·p0.00:   368.574 ms/op
                 executeQuery·p0.50:   370.147 ms/op
                 executeQuery·p0.90:   373.398 ms/op
                 executeQuery·p0.95:   387.449 ms/op
                 executeQuery·p0.99:   393.740 ms/op
                 executeQuery·p0.999:  393.740 ms/op
                 executeQuery·p0.9999: 393.740 ms/op
                 executeQuery·p1.00:   393.740 ms/op

Iteration   5: 370.788 ±(99.9%) 3.259 ms/op
                 executeQuery·p0.00:   368.574 ms/op
                 executeQuery·p0.50:   369.623 ms/op
                 executeQuery·p0.90:   372.035 ms/op
                 executeQuery·p0.95:   385.771 ms/op
                 executeQuery·p0.99:   392.692 ms/op
                 executeQuery·p0.999:  392.692 ms/op
                 executeQuery·p0.9999: 392.692 ms/op
                 executeQuery·p1.00:   392.692 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 256
  mean =    394.103 ±(99.9%) 6.785 ms/op

  Histogram, ms/op:
    [360.000, 370.000) = 81 
    [370.000, 380.000) = 76 
    [380.000, 390.000) = 8 
    [390.000, 400.000) = 2 
    [400.000, 410.000) = 0 
    [410.000, 420.000) = 0 
    [420.000, 430.000) = 3 
    [430.000, 440.000) = 62 
    [440.000, 450.000) = 18 
    [450.000, 460.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    367.002 ms/op
     p(50.0000) =    370.147 ms/op
     p(90.0000) =    439.511 ms/op
     p(95.0000) =    443.023 ms/op
     p(99.0000) =    459.580 ms/op
     p(99.9000) =    462.946 ms/op
     p(99.9900) =    462.946 ms/op
     p(99.9990) =    462.946 ms/op
     p(99.9999) =    462.946 ms/op
    p(100.0000) =    462.946 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 18.89% complete, ETA 08:50:46
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

659.904 ±(99.9%) 46.392 ms/op
# Warmup Iteration   2: 625.148 ±(99.9%) 8.570 ms/op
# Warmup Iteration   3: 611.443 ±(99.9%) 5.741 ms/op
# Warmup Iteration   4: 612.245 ±(99.9%) 3.165 ms/op
# Warmup Iteration   5: 617.808 ±(99.9%) 5.071 ms/op
Iteration   1: 616.038 ±(99.9%) 4.271 ms/op
                 executeQuery·p0.00:   608.174 ms/op
                 executeQuery·p0.50:   617.087 ms/op
                 executeQuery·p0.90:   621.072 ms/op
                 executeQuery·p0.95:   621.806 ms/op
                 executeQuery·p0.99:   621.806 ms/op
                 executeQuery·p0.999:  621.806 ms/op
                 executeQuery·p0.9999: 621.806 ms/op
                 executeQuery·p1.00:   621.806 ms/op

Iteration   2: 613.109 ±(99.9%) 2.622 ms/op
                 executeQuery·p0.00:   610.271 ms/op
                 executeQuery·p0.50:   613.417 ms/op
                 executeQuery·p0.90:   617.402 ms/op
                 executeQuery·p0.95:   620.757 ms/op
                 executeQuery·p0.99:   620.757 ms/op
                 executeQuery·p0.999:  620.757 ms/op
                 executeQuery·p0.9999: 620.757 ms/op
                 executeQuery·p1.00:   620.757 ms/op

Iteration   3: 619.839 ±(99.9%) 5.807 ms/op
                 executeQuery·p0.00:   614.466 ms/op
                 executeQuery·p0.50:   617.611 ms/op
                 executeQuery·p0.90:   629.984 ms/op
                 executeQuery·p0.95:   634.388 ms/op
                 executeQuery·p0.99:   634.388 ms/op
                 executeQuery·p0.999:  634.388 ms/op
                 executeQuery·p0.9999: 634.388 ms/op
                 executeQuery·p1.00:   634.388 ms/op

Iteration   4: 626.459 ±(99.9%) 3.044 ms/op
                 executeQuery·p0.00:   622.854 ms/op
                 executeQuery·p0.50:   625.476 ms/op
                 executeQuery·p0.90:   631.243 ms/op
                 executeQuery·p0.95:   631.243 ms/op
                 executeQuery·p0.99:   631.243 ms/op
                 executeQuery·p0.999:  631.243 ms/op
                 executeQuery·p0.9999: 631.243 ms/op
                 executeQuery·p1.00:   631.243 ms/op

Iteration   5: 626.590 ±(99.9%) 4.125 ms/op
                 executeQuery·p0.00:   622.854 ms/op
                 executeQuery·p0.50:   625.476 ms/op
                 executeQuery·p0.90:   633.445 ms/op
                 executeQuery·p0.95:   638.583 ms/op
                 executeQuery·p0.99:   638.583 ms/op
                 executeQuery·p0.999:  638.583 ms/op
                 executeQuery·p0.9999: 638.583 ms/op
                 executeQuery·p1.00:   638.583 ms/op


# Run progress: 19.44% complete, ETA 08:39:14
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1882384904 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1882384904() {
        this(4);
    }
    public KeyValueMap_1882384904(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1882384904 aggregation_state_map = new KeyValueMap_1882384904();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

617.644 ±(99.9%) 69.013 ms/op
# Warmup Iteration   2: 528.206 ±(99.9%) 5.185 ms/op
# Warmup Iteration   3: 596.393 ±(99.9%) 46.763 ms/op
# Warmup Iteration   4: 607.804 ±(99.9%) 41.814 ms/op
# Warmup Iteration   5: 549.221 ±(99.9%) 2.460 ms/op
Iteration   1: 554.930 ±(99.9%) 24.841 ms/op
                 executeQuery·p0.00:   540.017 ms/op
                 executeQuery·p0.50:   546.308 ms/op
                 executeQuery·p0.90:   623.798 ms/op
                 executeQuery·p0.95:   632.291 ms/op
                 executeQuery·p0.99:   632.291 ms/op
                 executeQuery·p0.999:  632.291 ms/op
                 executeQuery·p0.9999: 632.291 ms/op
                 executeQuery·p1.00:   632.291 ms/op

Iteration   2: 622.461 ±(99.9%) 5.344 ms/op
                 executeQuery·p0.00:   611.320 ms/op
                 executeQuery·p0.50:   623.903 ms/op
                 executeQuery·p0.90:   628.516 ms/op
                 executeQuery·p0.95:   634.388 ms/op
                 executeQuery·p0.99:   634.388 ms/op
                 executeQuery·p0.999:  634.388 ms/op
                 executeQuery·p0.9999: 634.388 ms/op
                 executeQuery·p1.00:   634.388 ms/op

Iteration   3: 568.386 ±(99.9%) 34.470 ms/op
                 executeQuery·p0.00:   545.260 ms/op
                 executeQuery·p0.50:   545.260 ms/op
                 executeQuery·p0.90:   627.573 ms/op
                 executeQuery·p0.95:   632.291 ms/op
                 executeQuery·p0.99:   632.291 ms/op
                 executeQuery·p0.999:  632.291 ms/op
                 executeQuery·p0.9999: 632.291 ms/op
                 executeQuery·p1.00:   632.291 ms/op

Iteration   4: 543.714 ±(99.9%) 3.591 ms/op
                 executeQuery·p0.00:   536.871 ms/op
                 executeQuery·p0.50:   543.162 ms/op
                 executeQuery·p0.90:   545.260 ms/op
                 executeQuery·p0.95:   558.891 ms/op
                 executeQuery·p0.99:   558.891 ms/op
                 executeQuery·p0.999:  558.891 ms/op
                 executeQuery·p0.9999: 558.891 ms/op
                 executeQuery·p1.00:   558.891 ms/op

Iteration   5: 544.211 ±(99.9%) 2.456 ms/op
                 executeQuery·p0.00:   542.114 ms/op
                 executeQuery·p0.50:   543.162 ms/op
                 executeQuery·p0.90:   550.502 ms/op
                 executeQuery·p0.95:   552.600 ms/op
                 executeQuery·p0.99:   552.600 ms/op
                 executeQuery·p0.999:  552.600 ms/op
                 executeQuery·p0.9999: 552.600 ms/op
                 executeQuery·p1.00:   552.600 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 171
  mean =    591.201 ±(99.9%) 9.657 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 1 
    [537.500, 550.000) = 62 
    [550.000, 562.500) = 4 
    [562.500, 575.000) = 0 
    [575.000, 587.500) = 0 
    [587.500, 600.000) = 0 
    [600.000, 612.500) = 13 
    [612.500, 625.000) = 66 
    [625.000, 637.500) = 24 
    [637.500, 650.000) = 1 
    [650.000, 662.500) = 0 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    536.871 ms/op
     p(50.0000) =    614.466 ms/op
     p(90.0000) =    626.839 ms/op
     p(95.0000) =    630.614 ms/op
     p(99.0000) =    635.563 ms/op
     p(99.9000) =    638.583 ms/op
     p(99.9900) =    638.583 ms/op
     p(99.9990) =    638.583 ms/op
     p(99.9999) =    638.583 ms/op
    p(100.0000) =    638.583 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 20.00% complete, ETA 08:28:16
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1882384904 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1882384904() {
        this(4);
    }
    public KeyValueMap_1882384904(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1882384904 aggregation_state_map = new KeyValueMap_1882384904();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

1129.316 ms/op
# Warmup Iteration   2: 1029.702 ms/op
# Warmup Iteration   3: 944.767 ms/op
# Warmup Iteration   4: 947.388 ms/op
# Warmup Iteration   5: 950.010 ms/op
Iteration   1: 933.233 ms/op
                 executeQuery·p0.00:   919.601 ms/op
                 executeQuery·p0.50:   933.233 ms/op
                 executeQuery·p0.90:   946.864 ms/op
                 executeQuery·p0.95:   946.864 ms/op
                 executeQuery·p0.99:   946.864 ms/op
                 executeQuery·p0.999:  946.864 ms/op
                 executeQuery·p0.9999: 946.864 ms/op
                 executeQuery·p1.00:   946.864 ms/op

Iteration   2: 894.960 ms/op
                 executeQuery·p0.00:   884.998 ms/op
                 executeQuery·p0.50:   894.960 ms/op
                 executeQuery·p0.90:   904.921 ms/op
                 executeQuery·p0.95:   904.921 ms/op
                 executeQuery·p0.99:   904.921 ms/op
                 executeQuery·p0.999:  904.921 ms/op
                 executeQuery·p0.9999: 904.921 ms/op
                 executeQuery·p1.00:   904.921 ms/op

Iteration   3: 839.385 ms/op
                 executeQuery·p0.00:   737.149 ms/op
                 executeQuery·p0.50:   839.385 ms/op
                 executeQuery·p0.90:   941.621 ms/op
                 executeQuery·p0.95:   941.621 ms/op
                 executeQuery·p0.99:   941.621 ms/op
                 executeQuery·p0.999:  941.621 ms/op
                 executeQuery·p0.9999: 941.621 ms/op
                 executeQuery·p1.00:   941.621 ms/op

Iteration   4: 880.280 ms/op
                 executeQuery·p0.00:   784.335 ms/op
                 executeQuery·p0.50:   880.280 ms/op
                 executeQuery·p0.90:   976.224 ms/op
                 executeQuery·p0.95:   976.224 ms/op
                 executeQuery·p0.99:   976.224 ms/op
                 executeQuery·p0.999:  976.224 ms/op
                 executeQuery·p0.9999: 976.224 ms/op
                 executeQuery·p1.00:   976.224 ms/op

Iteration   5: 862.978 ms/op
                 executeQuery·p0.00:   774.898 ms/op
                 executeQuery·p0.50:   862.978 ms/op
                 executeQuery·p0.90:   951.058 ms/op
                 executeQuery·p0.95:   951.058 ms/op
                 executeQuery·p0.99:   951.058 ms/op
                 executeQuery·p0.999:  951.058 ms/op
                 executeQuery·p0.9999: 951.058 ms/op
                 executeQuery·p1.00:   951.058 ms/op


# Run progress: 20.56% complete, ETA 08:22:11
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

1023.410 ms/op
# Warmup Iteration   2: 983.040 ms/op
# Warmup Iteration   3: 825.229 ms/op
# Warmup Iteration   4: 878.182 ms/op
# Warmup Iteration   5: 888.668 ms/op
Iteration   1: 889.717 ms/op
                 executeQuery·p0.00:   881.852 ms/op
                 executeQuery·p0.50:   889.717 ms/op
                 executeQuery·p0.90:   897.581 ms/op
                 executeQuery·p0.95:   897.581 ms/op
                 executeQuery·p0.99:   897.581 ms/op
                 executeQuery·p0.999:  897.581 ms/op
                 executeQuery·p0.9999: 897.581 ms/op
                 executeQuery·p1.00:   897.581 ms/op

Iteration   2: 890.765 ms/op
                 executeQuery·p0.00:   880.804 ms/op
                 executeQuery·p0.50:   890.765 ms/op
                 executeQuery·p0.90:   900.727 ms/op
                 executeQuery·p0.95:   900.727 ms/op
                 executeQuery·p0.99:   900.727 ms/op
                 executeQuery·p0.999:  900.727 ms/op
                 executeQuery·p0.9999: 900.727 ms/op
                 executeQuery·p1.00:   900.727 ms/op

Iteration   3: 887.620 ms/op
                 executeQuery·p0.00:   881.852 ms/op
                 executeQuery·p0.50:   887.620 ms/op
                 executeQuery·p0.90:   893.387 ms/op
                 executeQuery·p0.95:   893.387 ms/op
                 executeQuery·p0.99:   893.387 ms/op
                 executeQuery·p0.999:  893.387 ms/op
                 executeQuery·p0.9999: 893.387 ms/op
                 executeQuery·p1.00:   893.387 ms/op

Iteration   4: 891.814 ms/op
                 executeQuery·p0.00:   881.852 ms/op
                 executeQuery·p0.50:   891.814 ms/op
                 executeQuery·p0.90:   901.775 ms/op
                 executeQuery·p0.95:   901.775 ms/op
                 executeQuery·p0.99:   901.775 ms/op
                 executeQuery·p0.999:  901.775 ms/op
                 executeQuery·p0.9999: 901.775 ms/op
                 executeQuery·p1.00:   901.775 ms/op

Iteration   5: 903.873 ms/op
                 executeQuery·p0.00:   888.144 ms/op
                 executeQuery·p0.50:   903.873 ms/op
                 executeQuery·p0.90:   919.601 ms/op
                 executeQuery·p0.95:   919.601 ms/op
                 executeQuery·p0.99:   919.601 ms/op
                 executeQuery·p0.999:  919.601 ms/op
                 executeQuery·p0.9999: 919.601 ms/op
                 executeQuery·p1.00:   919.601 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =    887.462 ±(99.9%) 51.688 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 1 
    [ 750.000,  775.000) = 1 
    [ 775.000,  800.000) = 1 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 8 
    [ 900.000,  925.000) = 5 
    [ 925.000,  950.000) = 2 
    [ 950.000,  975.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    737.149 ms/op
     p(50.0000) =    895.484 ms/op
     p(90.0000) =    950.639 ms/op
     p(95.0000) =    974.966 ms/op
     p(99.0000) =    976.224 ms/op
     p(99.9000) =    976.224 ms/op
     p(99.9900) =    976.224 ms/op
     p(99.9990) =    976.224 ms/op
     p(99.9999) =    976.224 ms/op
    p(100.0000) =    976.224 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 21.11% complete, ETA 08:16:35
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1882384904 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1882384904() {
        this(4);
    }
    public KeyValueMap_1882384904(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1882384904 aggregation_state_map = new KeyValueMap_1882384904();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2852.127 ms/op
# Warmup Iteration   2: 2709.520 ms/op
# Warmup Iteration   3: 2411.725 ms/op
# Warmup Iteration   4: 2919.236 ms/op
# Warmup Iteration   5: 2394.948 ms/op
Iteration   1: 2575.303 ms/op
                 executeQuery·p0.00:   2575.303 ms/op
                 executeQuery·p0.50:   2575.303 ms/op
                 executeQuery·p0.90:   2575.303 ms/op
                 executeQuery·p0.95:   2575.303 ms/op
                 executeQuery·p0.99:   2575.303 ms/op
                 executeQuery·p0.999:  2575.303 ms/op
                 executeQuery·p0.9999: 2575.303 ms/op
                 executeQuery·p1.00:   2575.303 ms/op

Iteration   2: 2445.279 ms/op
                 executeQuery·p0.00:   2445.279 ms/op
                 executeQuery·p0.50:   2445.279 ms/op
                 executeQuery·p0.90:   2445.279 ms/op
                 executeQuery·p0.95:   2445.279 ms/op
                 executeQuery·p0.99:   2445.279 ms/op
                 executeQuery·p0.999:  2445.279 ms/op
                 executeQuery·p0.9999: 2445.279 ms/op
                 executeQuery·p1.00:   2445.279 ms/op

Iteration   3: 2470.445 ms/op
                 executeQuery·p0.00:   2470.445 ms/op
                 executeQuery·p0.50:   2470.445 ms/op
                 executeQuery·p0.90:   2470.445 ms/op
                 executeQuery·p0.95:   2470.445 ms/op
                 executeQuery·p0.99:   2470.445 ms/op
                 executeQuery·p0.999:  2470.445 ms/op
                 executeQuery·p0.9999: 2470.445 ms/op
                 executeQuery·p1.00:   2470.445 ms/op

Iteration   4: 2537.554 ms/op
                 executeQuery·p0.00:   2537.554 ms/op
                 executeQuery·p0.50:   2537.554 ms/op
                 executeQuery·p0.90:   2537.554 ms/op
                 executeQuery·p0.95:   2537.554 ms/op
                 executeQuery·p0.99:   2537.554 ms/op
                 executeQuery·p0.999:  2537.554 ms/op
                 executeQuery·p0.9999: 2537.554 ms/op
                 executeQuery·p1.00:   2537.554 ms/op

Iteration   5: 2508.194 ms/op
                 executeQuery·p0.00:   2508.194 ms/op
                 executeQuery·p0.50:   2508.194 ms/op
                 executeQuery·p0.90:   2508.194 ms/op
                 executeQuery·p0.95:   2508.194 ms/op
                 executeQuery·p0.99:   2508.194 ms/op
                 executeQuery·p0.999:  2508.194 ms/op
                 executeQuery·p0.9999: 2508.194 ms/op
                 executeQuery·p1.00:   2508.194 ms/op


# Run progress: 21.67% complete, ETA 08:20:02
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2621.440 ms/op
# Warmup Iteration   2: 2524.971 ms/op
# Warmup Iteration   3: 2462.056 ms/op
# Warmup Iteration   4: 2675.966 ms/op
# Warmup Iteration   5: 2441.085 ms/op
Iteration   1: 2617.246 ms/op
                 executeQuery·p0.00:   2617.246 ms/op
                 executeQuery·p0.50:   2617.246 ms/op
                 executeQuery·p0.90:   2617.246 ms/op
                 executeQuery·p0.95:   2617.246 ms/op
                 executeQuery·p0.99:   2617.246 ms/op
                 executeQuery·p0.999:  2617.246 ms/op
                 executeQuery·p0.9999: 2617.246 ms/op
                 executeQuery·p1.00:   2617.246 ms/op

Iteration   2: 2604.663 ms/op
                 executeQuery·p0.00:   2604.663 ms/op
                 executeQuery·p0.50:   2604.663 ms/op
                 executeQuery·p0.90:   2604.663 ms/op
                 executeQuery·p0.95:   2604.663 ms/op
                 executeQuery·p0.99:   2604.663 ms/op
                 executeQuery·p0.999:  2604.663 ms/op
                 executeQuery·p0.9999: 2604.663 ms/op
                 executeQuery·p1.00:   2604.663 ms/op

Iteration   3: 2466.251 ms/op
                 executeQuery·p0.00:   2466.251 ms/op
                 executeQuery·p0.50:   2466.251 ms/op
                 executeQuery·p0.90:   2466.251 ms/op
                 executeQuery·p0.95:   2466.251 ms/op
                 executeQuery·p0.99:   2466.251 ms/op
                 executeQuery·p0.999:  2466.251 ms/op
                 executeQuery·p0.9999: 2466.251 ms/op
                 executeQuery·p1.00:   2466.251 ms/op

Iteration   4: 2587.886 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2587.886 ms/op
                 executeQuery·p0.90:   2587.886 ms/op
                 executeQuery·p0.95:   2587.886 ms/op
                 executeQuery·p0.99:   2587.886 ms/op
                 executeQuery·p0.999:  2587.886 ms/op
                 executeQuery·p0.9999: 2587.886 ms/op
                 executeQuery·p1.00:   2587.886 ms/op

Iteration   5: 2415.919 ms/op
                 executeQuery·p0.00:   2415.919 ms/op
                 executeQuery·p0.50:   2415.919 ms/op
                 executeQuery·p0.90:   2415.919 ms/op
                 executeQuery·p0.95:   2415.919 ms/op
                 executeQuery·p0.99:   2415.919 ms/op
                 executeQuery·p0.999:  2415.919 ms/op
                 executeQuery·p0.9999: 2415.919 ms/op
                 executeQuery·p1.00:   2415.919 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   2522.874 ±(99.9%) 108.575 ms/op

  Histogram, ms/op:
    [2400.000, 2425.000) = 1 
    [2425.000, 2450.000) = 1 
    [2450.000, 2475.000) = 2 
    [2475.000, 2500.000) = 0 
    [2500.000, 2525.000) = 1 
    [2525.000, 2550.000) = 1 
    [2550.000, 2575.000) = 0 
    [2575.000, 2600.000) = 2 
    [2600.000, 2625.000) = 2 
    [2625.000, 2650.000) = 0 
    [2650.000, 2675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2415.919 ms/op
     p(50.0000) =   2522.874 ms/op
     p(90.0000) =   2615.987 ms/op
     p(95.0000) =   2617.246 ms/op
     p(99.0000) =   2617.246 ms/op
     p(99.9000) =   2617.246 ms/op
     p(99.9900) =   2617.246 ms/op
     p(99.9990) =   2617.246 ms/op
     p(99.9999) =   2617.246 ms/op
    p(100.0000) =   2617.246 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 22.22% complete, ETA 08:22:51
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1882384904 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1882384904() {
        this(4);
    }
    public KeyValueMap_1882384904(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1882384904 aggregation_state_map = new KeyValueMap_1882384904();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3660.229 ±(99.9%) 4464.670 ms/op
# Warmup Iteration   2: 3621.082 ±(99.9%) 3823.179 ms/op
# Warmup Iteration   3: 3523.215 ±(99.9%) 753.632 ms/op
# Warmup Iteration   4: 3495.253 ±(99.9%) 44.179 ms/op
# Warmup Iteration   5: 3495.253 ±(99.9%) 44.179 ms/op
Iteration   1: 3496.651 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3493.855 ms/op
                 executeQuery·p0.50:   3498.050 ms/op
                 executeQuery·p0.90:   3498.050 ms/op
                 executeQuery·p0.95:   3498.050 ms/op
                 executeQuery·p0.99:   3498.050 ms/op
                 executeQuery·p0.999:  3498.050 ms/op
                 executeQuery·p0.9999: 3498.050 ms/op
                 executeQuery·p1.00:   3498.050 ms/op

Iteration   2: 3510.632 ±(99.9%) 153.039 ms/op
                 executeQuery·p0.00:   3502.244 ms/op
                 executeQuery·p0.50:   3510.632 ms/op
                 executeQuery·p0.90:   3519.021 ms/op
                 executeQuery·p0.95:   3519.021 ms/op
                 executeQuery·p0.99:   3519.021 ms/op
                 executeQuery·p0.999:  3519.021 ms/op
                 executeQuery·p0.9999: 3519.021 ms/op
                 executeQuery·p1.00:   3519.021 ms/op

Iteration   3: 3498.050 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   3498.050 ms/op
                 executeQuery·p0.50:   3498.050 ms/op
                 executeQuery·p0.90:   3498.050 ms/op
                 executeQuery·p0.95:   3498.050 ms/op
                 executeQuery·p0.99:   3498.050 ms/op
                 executeQuery·p0.999:  3498.050 ms/op
                 executeQuery·p0.9999: 3498.050 ms/op
                 executeQuery·p1.00:   3498.050 ms/op

Iteration   4: 3500.846 ±(99.9%) 159.288 ms/op
                 executeQuery·p0.00:   3493.855 ms/op
                 executeQuery·p0.50:   3498.050 ms/op
                 executeQuery·p0.90:   3510.632 ms/op
                 executeQuery·p0.95:   3510.632 ms/op
                 executeQuery·p0.99:   3510.632 ms/op
                 executeQuery·p0.999:  3510.632 ms/op
                 executeQuery·p0.9999: 3510.632 ms/op
                 executeQuery·p1.00:   3510.632 ms/op

Iteration   5: 3496.651 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3493.855 ms/op
                 executeQuery·p0.50:   3498.050 ms/op
                 executeQuery·p0.90:   3498.050 ms/op
                 executeQuery·p0.95:   3498.050 ms/op
                 executeQuery·p0.99:   3498.050 ms/op
                 executeQuery·p0.999:  3498.050 ms/op
                 executeQuery·p0.9999: 3498.050 ms/op
                 executeQuery·p1.00:   3498.050 ms/op


# Run progress: 22.78% complete, ETA 08:13:09
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1882384904 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1882384904() {
        this(4);
    }
    public KeyValueMap_1882384904(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1882384904 aggregation_state_map = new KeyValueMap_1882384904();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3235.906 ±(99.9%) 6649.803 ms/op
# Warmup Iteration   2: 3563.760 ±(99.9%) 2010.494 ms/op
# Warmup Iteration   3: 3496.651 ±(99.9%) 44.179 ms/op
# Warmup Iteration   4: 3496.651 ±(99.9%) 116.886 ms/op
# Warmup Iteration   5: 3491.059 ±(99.9%) 44.179 ms/op
Iteration   1: 3050.308 ±(99.9%) 1657.883 ms/op
                 executeQuery·p0.00:   2919.236 ms/op
                 executeQuery·p0.50:   2923.430 ms/op
                 executeQuery·p0.90:   3435.135 ms/op
                 executeQuery·p0.95:   3435.135 ms/op
                 executeQuery·p0.99:   3435.135 ms/op
                 executeQuery·p0.999:  3435.135 ms/op
                 executeQuery·p0.9999: 3435.135 ms/op
                 executeQuery·p1.00:   3435.135 ms/op

Iteration   2: 2931.818 ±(99.9%) 38.330 ms/op
                 executeQuery·p0.00:   2927.624 ms/op
                 executeQuery·p0.50:   2929.721 ms/op
                 executeQuery·p0.90:   2940.207 ms/op
                 executeQuery·p0.95:   2940.207 ms/op
                 executeQuery·p0.99:   2940.207 ms/op
                 executeQuery·p0.999:  2940.207 ms/op
                 executeQuery·p0.9999: 2940.207 ms/op
                 executeQuery·p1.00:   2940.207 ms/op

Iteration   3: 3419.756 ±(99.9%) 2341.470 ms/op
                 executeQuery·p0.00:   3271.557 ms/op
                 executeQuery·p0.50:   3493.855 ms/op
                 executeQuery·p0.90:   3493.855 ms/op
                 executeQuery·p0.95:   3493.855 ms/op
                 executeQuery·p0.99:   3493.855 ms/op
                 executeQuery·p0.999:  3493.855 ms/op
                 executeQuery·p0.9999: 3493.855 ms/op
                 executeQuery·p1.00:   3493.855 ms/op

Iteration   4: 3492.457 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3489.661 ms/op
                 executeQuery·p0.50:   3493.855 ms/op
                 executeQuery·p0.90:   3493.855 ms/op
                 executeQuery·p0.95:   3493.855 ms/op
                 executeQuery·p0.99:   3493.855 ms/op
                 executeQuery·p0.999:  3493.855 ms/op
                 executeQuery·p0.9999: 3493.855 ms/op
                 executeQuery·p1.00:   3493.855 ms/op

Iteration   5: 3491.059 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3489.661 ms/op
                 executeQuery·p0.50:   3489.661 ms/op
                 executeQuery·p0.90:   3493.855 ms/op
                 executeQuery·p0.95:   3493.855 ms/op
                 executeQuery·p0.99:   3493.855 ms/op
                 executeQuery·p0.999:  3493.855 ms/op
                 executeQuery·p0.9999: 3493.855 ms/op
                 executeQuery·p1.00:   3493.855 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 32
  mean =   3363.963 ±(99.9%) 153.003 ms/op

  Histogram, ms/op:
    [2900.000, 2950.000) = 7 
    [2950.000, 3000.000) = 0 
    [3000.000, 3050.000) = 0 
    [3050.000, 3100.000) = 0 
    [3100.000, 3150.000) = 0 
    [3150.000, 3200.000) = 0 
    [3200.000, 3250.000) = 0 
    [3250.000, 3300.000) = 1 
    [3300.000, 3350.000) = 0 
    [3350.000, 3400.000) = 0 
    [3400.000, 3450.000) = 1 
    [3450.000, 3500.000) = 19 
    [3500.000, 3550.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =   2919.236 ms/op
     p(50.0000) =   3493.855 ms/op
     p(90.0000) =   3508.116 ms/op
     p(95.0000) =   3513.568 ms/op
     p(99.0000) =   3519.021 ms/op
     p(99.9000) =   3519.021 ms/op
     p(99.9900) =   3519.021 ms/op
     p(99.9990) =   3519.021 ms/op
     p(99.9999) =   3519.021 ms/op
    p(100.0000) =   3519.021 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 23.33% complete, ETA 08:04:04
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_638744781 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_638744781() {
        this(4);
    }
    public KeyValueMap_638744781(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_638744781 aggregation_state_map = new KeyValueMap_638744781();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4341.105 ±(99.9%) 2334.792 ms/op
# Warmup Iteration   2: 4005.560 ±(99.9%) 9082.668 ms/op
# Warmup Iteration   3: 4325.726 ±(99.9%) 1663.021 ms/op
# Warmup Iteration   4: 4322.929 ±(99.9%) 1446.472 ms/op
# Warmup Iteration   5: 4261.413 ±(99.9%) 76.520 ms/op
Iteration   1: 4265.607 ±(99.9%) 229.559 ms/op
                 executeQuery·p0.00:   4253.024 ms/op
                 executeQuery·p0.50:   4265.607 ms/op
                 executeQuery·p0.90:   4278.190 ms/op
                 executeQuery·p0.95:   4278.190 ms/op
                 executeQuery·p0.99:   4278.190 ms/op
                 executeQuery·p0.999:  4278.190 ms/op
                 executeQuery·p0.9999: 4278.190 ms/op
                 executeQuery·p1.00:   4278.190 ms/op

Iteration   2: 4248.830 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   4244.636 ms/op
                 executeQuery·p0.50:   4248.830 ms/op
                 executeQuery·p0.90:   4253.024 ms/op
                 executeQuery·p0.95:   4253.024 ms/op
                 executeQuery·p0.99:   4253.024 ms/op
                 executeQuery·p0.999:  4253.024 ms/op
                 executeQuery·p0.9999: 4253.024 ms/op
                 executeQuery·p1.00:   4253.024 ms/op

Iteration   3: 4251.626 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   4248.830 ms/op
                 executeQuery·p0.50:   4253.024 ms/op
                 executeQuery·p0.90:   4253.024 ms/op
                 executeQuery·p0.95:   4253.024 ms/op
                 executeQuery·p0.99:   4253.024 ms/op
                 executeQuery·p0.999:  4253.024 ms/op
                 executeQuery·p0.9999: 4253.024 ms/op
                 executeQuery·p1.00:   4253.024 ms/op

Iteration   4: 4254.422 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   4253.024 ms/op
                 executeQuery·p0.50:   4253.024 ms/op
                 executeQuery·p0.90:   4257.219 ms/op
                 executeQuery·p0.95:   4257.219 ms/op
                 executeQuery·p0.99:   4257.219 ms/op
                 executeQuery·p0.999:  4257.219 ms/op
                 executeQuery·p0.9999: 4257.219 ms/op
                 executeQuery·p1.00:   4257.219 ms/op

Iteration   5: 4282.384 ±(99.9%) 1127.206 ms/op
                 executeQuery·p0.00:   4244.636 ms/op
                 executeQuery·p0.50:   4248.830 ms/op
                 executeQuery·p0.90:   4353.688 ms/op
                 executeQuery·p0.95:   4353.688 ms/op
                 executeQuery·p0.99:   4353.688 ms/op
                 executeQuery·p0.999:  4353.688 ms/op
                 executeQuery·p0.9999: 4353.688 ms/op
                 executeQuery·p1.00:   4353.688 ms/op


# Run progress: 23.89% complete, ETA 07:56:15
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4250.228 ±(99.9%) 5648.655 ms/op
# Warmup Iteration   2: 4324.327 ±(99.9%) 2719.412 ms/op
# Warmup Iteration   3: 3800.039 ±(99.9%) 5303.650 ms/op
# Warmup Iteration   4: 3653.239 ±(99.9%) 927.752 ms/op
# Warmup Iteration   5: 3699.376 ±(99.9%) 2001.250 ms/op
Iteration   1: 4486.507 ±(99.9%) 4595.220 ms/op
                 executeQuery·p0.00:   4273.996 ms/op
                 executeQuery·p0.50:   4420.796 ms/op
                 executeQuery·p0.90:   4764.729 ms/op
                 executeQuery·p0.95:   4764.729 ms/op
                 executeQuery·p0.99:   4764.729 ms/op
                 executeQuery·p0.999:  4764.729 ms/op
                 executeQuery·p0.9999: 4764.729 ms/op
                 executeQuery·p1.00:   4764.729 ms/op

Iteration   2: 4271.200 ±(99.9%) 289.699 ms/op
                 executeQuery·p0.00:   4253.024 ms/op
                 executeQuery·p0.50:   4278.190 ms/op
                 executeQuery·p0.90:   4282.384 ms/op
                 executeQuery·p0.95:   4282.384 ms/op
                 executeQuery·p0.99:   4282.384 ms/op
                 executeQuery·p0.999:  4282.384 ms/op
                 executeQuery·p0.9999: 4282.384 ms/op
                 executeQuery·p1.00:   4282.384 ms/op

Iteration   3: 4932.502 ±(99.9%) 21338.303 ms/op
                 executeQuery·p0.00:   4257.219 ms/op
                 executeQuery·p0.50:   4257.219 ms/op
                 executeQuery·p0.90:   6283.067 ms/op
                 executeQuery·p0.95:   6283.067 ms/op
                 executeQuery·p0.99:   6283.067 ms/op
                 executeQuery·p0.999:  6283.067 ms/op
                 executeQuery·p0.9999: 6283.067 ms/op
                 executeQuery·p1.00:   6283.067 ms/op

Iteration   4: 4327.124 ±(99.9%) 2675.274 ms/op
                 executeQuery·p0.00:   4236.247 ms/op
                 executeQuery·p0.50:   4248.830 ms/op
                 executeQuery·p0.90:   4496.294 ms/op
                 executeQuery·p0.95:   4496.294 ms/op
                 executeQuery·p0.99:   4496.294 ms/op
                 executeQuery·p0.999:  4496.294 ms/op
                 executeQuery·p0.9999: 4496.294 ms/op
                 executeQuery·p1.00:   4496.294 ms/op

Iteration   5: 4287.977 ±(99.9%) 361.618 ms/op
                 executeQuery·p0.00:   4265.607 ms/op
                 executeQuery·p0.50:   4294.967 ms/op
                 executeQuery·p0.90:   4303.356 ms/op
                 executeQuery·p0.95:   4303.356 ms/op
                 executeQuery·p0.99:   4303.356 ms/op
                 executeQuery·p0.999:  4303.356 ms/op
                 executeQuery·p0.9999: 4303.356 ms/op
                 executeQuery·p1.00:   4303.356 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   4360.818 ±(99.9%) 252.421 ms/op

  Histogram, ms/op:
    [4000.000, 4250.000) = 7 
    [4250.000, 4500.000) = 21 
    [4500.000, 4750.000) = 0 
    [4750.000, 5000.000) = 1 
    [5000.000, 5250.000) = 0 
    [5250.000, 5500.000) = 0 
    [5500.000, 5750.000) = 0 
    [5750.000, 6000.000) = 0 
    [6000.000, 6250.000) = 0 
    [6250.000, 6500.000) = 1 
    [6500.000, 6750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4236.247 ms/op
     p(50.0000) =   4257.219 ms/op
     p(90.0000) =   4488.744 ms/op
     p(95.0000) =   5447.981 ms/op
     p(99.0000) =   6283.067 ms/op
     p(99.9000) =   6283.067 ms/op
     p(99.9900) =   6283.067 ms/op
     p(99.9990) =   6283.067 ms/op
     p(99.9999) =   6283.067 ms/op
    p(100.0000) =   6283.067 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 24.44% complete, ETA 07:48:36
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6790.578 ms/op
# Warmup Iteration   2: 6996.099 ms/op
# Warmup Iteration   3: 7088.374 ms/op
# Warmup Iteration   4: 6547.309 ms/op
# Warmup Iteration   5: 6593.446 ms/op
Iteration   1: 6685.721 ms/op
                 executeQuery·p0.00:   6241.124 ms/op
                 executeQuery·p0.50:   6685.721 ms/op
                 executeQuery·p0.90:   7130.317 ms/op
                 executeQuery·p0.95:   7130.317 ms/op
                 executeQuery·p0.99:   7130.317 ms/op
                 executeQuery·p0.999:  7130.317 ms/op
                 executeQuery·p0.9999: 7130.317 ms/op
                 executeQuery·p1.00:   7130.317 ms/op

Iteration   2: 7386.169 ms/op
                 executeQuery·p0.00:   7155.483 ms/op
                 executeQuery·p0.50:   7386.169 ms/op
                 executeQuery·p0.90:   7616.856 ms/op
                 executeQuery·p0.95:   7616.856 ms/op
                 executeQuery·p0.99:   7616.856 ms/op
                 executeQuery·p0.999:  7616.856 ms/op
                 executeQuery·p0.9999: 7616.856 ms/op
                 executeQuery·p1.00:   7616.856 ms/op

Iteration   3: 7348.421 ms/op
                 executeQuery·p0.00:   7340.032 ms/op
                 executeQuery·p0.50:   7348.421 ms/op
                 executeQuery·p0.90:   7356.809 ms/op
                 executeQuery·p0.95:   7356.809 ms/op
                 executeQuery·p0.99:   7356.809 ms/op
                 executeQuery·p0.999:  7356.809 ms/op
                 executeQuery·p0.9999: 7356.809 ms/op
                 executeQuery·p1.00:   7356.809 ms/op

Iteration   4: 7583.302 ms/op
                 executeQuery·p0.00:   7331.643 ms/op
                 executeQuery·p0.50:   7583.302 ms/op
                 executeQuery·p0.90:   7834.960 ms/op
                 executeQuery·p0.95:   7834.960 ms/op
                 executeQuery·p0.99:   7834.960 ms/op
                 executeQuery·p0.999:  7834.960 ms/op
                 executeQuery·p0.9999: 7834.960 ms/op
                 executeQuery·p1.00:   7834.960 ms/op

Iteration   5: 6870.270 ms/op
                 executeQuery·p0.00:   6761.218 ms/op
                 executeQuery·p0.50:   6870.270 ms/op
                 executeQuery·p0.90:   6979.322 ms/op
                 executeQuery·p0.95:   6979.322 ms/op
                 executeQuery·p0.99:   6979.322 ms/op
                 executeQuery·p0.999:  6979.322 ms/op
                 executeQuery·p0.9999: 6979.322 ms/op
                 executeQuery·p1.00:   6979.322 ms/op


# Run progress: 25.00% complete, ETA 07:41:54
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6677.332 ms/op
# Warmup Iteration   2: 6840.910 ms/op
# Warmup Iteration   3: 6887.047 ms/op
# Warmup Iteration   4: 6572.474 ms/op
# Warmup Iteration   5: 7075.791 ms/op
Iteration   1: 7277.117 ms/op
                 executeQuery·p0.00:   7079.985 ms/op
                 executeQuery·p0.50:   7277.117 ms/op
                 executeQuery·p0.90:   7474.250 ms/op
                 executeQuery·p0.95:   7474.250 ms/op
                 executeQuery·p0.99:   7474.250 ms/op
                 executeQuery·p0.999:  7474.250 ms/op
                 executeQuery·p0.9999: 7474.250 ms/op
                 executeQuery·p1.00:   7474.250 ms/op

Iteration   2: 5670.699 ms/op
                 executeQuery·p0.00:   5670.699 ms/op
                 executeQuery·p0.50:   5670.699 ms/op
                 executeQuery·p0.90:   5670.699 ms/op
                 executeQuery·p0.95:   5670.699 ms/op
                 executeQuery·p0.99:   5670.699 ms/op
                 executeQuery·p0.999:  5670.699 ms/op
                 executeQuery·p0.9999: 5670.699 ms/op
                 executeQuery·p1.00:   5670.699 ms/op

Iteration   3: 6241.124 ms/op
                 executeQuery·p0.00:   5955.912 ms/op
                 executeQuery·p0.50:   6241.124 ms/op
                 executeQuery·p0.90:   6526.337 ms/op
                 executeQuery·p0.95:   6526.337 ms/op
                 executeQuery·p0.99:   6526.337 ms/op
                 executeQuery·p0.999:  6526.337 ms/op
                 executeQuery·p0.9999: 6526.337 ms/op
                 executeQuery·p1.00:   6526.337 ms/op

Iteration   4: 7323.255 ms/op
                 executeQuery·p0.00:   7105.151 ms/op
                 executeQuery·p0.50:   7323.255 ms/op
                 executeQuery·p0.90:   7541.359 ms/op
                 executeQuery·p0.95:   7541.359 ms/op
                 executeQuery·p0.99:   7541.359 ms/op
                 executeQuery·p0.999:  7541.359 ms/op
                 executeQuery·p0.9999: 7541.359 ms/op
                 executeQuery·p1.00:   7541.359 ms/op

Iteration   5: 7788.823 ms/op
                 executeQuery·p0.00:   7079.985 ms/op
                 executeQuery·p0.50:   7788.823 ms/op
                 executeQuery·p0.90:   8497.660 ms/op
                 executeQuery·p0.95:   8497.660 ms/op
                 executeQuery·p0.99:   8497.660 ms/op
                 executeQuery·p0.999:  8497.660 ms/op
                 executeQuery·p0.9999: 8497.660 ms/op
                 executeQuery·p1.00:   8497.660 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   7017.490 ±(99.9%) 621.484 ms/op

  Histogram, ms/op:
    [5000.000, 5250.000) = 0 
    [5250.000, 5500.000) = 0 
    [5500.000, 5750.000) = 2 
    [5750.000, 6000.000) = 1 
    [6000.000, 6250.000) = 1 
    [6250.000, 6500.000) = 0 
    [6500.000, 6750.000) = 1 
    [6750.000, 7000.000) = 2 
    [7000.000, 7250.000) = 5 
    [7250.000, 7500.000) = 4 
    [7500.000, 7750.000) = 2 
    [7750.000, 8000.000) = 1 
    [8000.000, 8250.000) = 0 
    [8250.000, 8500.000) = 1 
    [8500.000, 8750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   5670.699 ms/op
     p(50.0000) =   7117.734 ms/op
     p(90.0000) =   7813.149 ms/op
     p(95.0000) =   8464.525 ms/op
     p(99.0000) =   8497.660 ms/op
     p(99.9000) =   8497.660 ms/op
     p(99.9900) =   8497.660 ms/op
     p(99.9990) =   8497.660 ms/op
     p(99.9999) =   8497.660 ms/op
    p(100.0000) =   8497.660 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 25.56% complete, ETA 07:35:14
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

10536.092 ms/op
# Warmup Iteration   2: 9932.112 ms/op
# Warmup Iteration   3: 8011.121 ms/op
# Warmup Iteration   4: 9579.790 ms/op
# Warmup Iteration   5: 9361.687 ms/op
Iteration   1: 9042.919 ms/op
                 executeQuery·p0.00:   9042.919 ms/op
                 executeQuery·p0.50:   9042.919 ms/op
                 executeQuery·p0.90:   9042.919 ms/op
                 executeQuery·p0.95:   9042.919 ms/op
                 executeQuery·p0.99:   9042.919 ms/op
                 executeQuery·p0.999:  9042.919 ms/op
                 executeQuery·p0.9999: 9042.919 ms/op
                 executeQuery·p1.00:   9042.919 ms/op

Iteration   2: 8539.603 ms/op
                 executeQuery·p0.00:   8539.603 ms/op
                 executeQuery·p0.50:   8539.603 ms/op
                 executeQuery·p0.90:   8539.603 ms/op
                 executeQuery·p0.95:   8539.603 ms/op
                 executeQuery·p0.99:   8539.603 ms/op
                 executeQuery·p0.999:  8539.603 ms/op
                 executeQuery·p0.9999: 8539.603 ms/op
                 executeQuery·p1.00:   8539.603 ms/op

Iteration   3: 8547.992 ms/op
                 executeQuery·p0.00:   8547.992 ms/op
                 executeQuery·p0.50:   8547.992 ms/op
                 executeQuery·p0.90:   8547.992 ms/op
                 executeQuery·p0.95:   8547.992 ms/op
                 executeQuery·p0.99:   8547.992 ms/op
                 executeQuery·p0.999:  8547.992 ms/op
                 executeQuery·p0.9999: 8547.992 ms/op
                 executeQuery·p1.00:   8547.992 ms/op

Iteration   4: 9965.666 ms/op
                 executeQuery·p0.00:   9965.666 ms/op
                 executeQuery·p0.50:   9965.666 ms/op
                 executeQuery·p0.90:   9965.666 ms/op
                 executeQuery·p0.95:   9965.666 ms/op
                 executeQuery·p0.99:   9965.666 ms/op
                 executeQuery·p0.999:  9965.666 ms/op
                 executeQuery·p0.9999: 9965.666 ms/op
                 executeQuery·p1.00:   9965.666 ms/op

Iteration   5: 8707.375 ms/op
                 executeQuery·p0.00:   8707.375 ms/op
                 executeQuery·p0.50:   8707.375 ms/op
                 executeQuery·p0.90:   8707.375 ms/op
                 executeQuery·p0.95:   8707.375 ms/op
                 executeQuery·p0.99:   8707.375 ms/op
                 executeQuery·p0.999:  8707.375 ms/op
                 executeQuery·p0.9999: 8707.375 ms/op
                 executeQuery·p1.00:   8707.375 ms/op


# Run progress: 26.11% complete, ETA 07:30:10
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1882384904 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1882384904() {
        this(4);
    }
    public KeyValueMap_1882384904(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1882384904 aggregation_state_map = new KeyValueMap_1882384904();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

9764.340 ms/op
# Warmup Iteration   2: 9227.469 ms/op
# Warmup Iteration   3: 8329.888 ms/op
# Warmup Iteration   4: 9848.226 ms/op
# Warmup Iteration   5: 9294.578 ms/op
Iteration   1: 9277.800 ms/op
                 executeQuery·p0.00:   9277.800 ms/op
                 executeQuery·p0.50:   9277.800 ms/op
                 executeQuery·p0.90:   9277.800 ms/op
                 executeQuery·p0.95:   9277.800 ms/op
                 executeQuery·p0.99:   9277.800 ms/op
                 executeQuery·p0.999:  9277.800 ms/op
                 executeQuery·p0.9999: 9277.800 ms/op
                 executeQuery·p1.00:   9277.800 ms/op

Iteration   2: 9378.464 ms/op
                 executeQuery·p0.00:   9378.464 ms/op
                 executeQuery·p0.50:   9378.464 ms/op
                 executeQuery·p0.90:   9378.464 ms/op
                 executeQuery·p0.95:   9378.464 ms/op
                 executeQuery·p0.99:   9378.464 ms/op
                 executeQuery·p0.999:  9378.464 ms/op
                 executeQuery·p0.9999: 9378.464 ms/op
                 executeQuery·p1.00:   9378.464 ms/op

Iteration   3: 9059.697 ms/op
                 executeQuery·p0.00:   9059.697 ms/op
                 executeQuery·p0.50:   9059.697 ms/op
                 executeQuery·p0.90:   9059.697 ms/op
                 executeQuery·p0.95:   9059.697 ms/op
                 executeQuery·p0.99:   9059.697 ms/op
                 executeQuery·p0.999:  9059.697 ms/op
                 executeQuery·p0.9999: 9059.697 ms/op
                 executeQuery·p1.00:   9059.697 ms/op

Iteration   4: 9143.583 ms/op
                 executeQuery·p0.00:   9143.583 ms/op
                 executeQuery·p0.50:   9143.583 ms/op
                 executeQuery·p0.90:   9143.583 ms/op
                 executeQuery·p0.95:   9143.583 ms/op
                 executeQuery·p0.99:   9143.583 ms/op
                 executeQuery·p0.999:  9143.583 ms/op
                 executeQuery·p0.9999: 9143.583 ms/op
                 executeQuery·p1.00:   9143.583 ms/op

Iteration   5: 9076.474 ms/op
                 executeQuery·p0.00:   9076.474 ms/op
                 executeQuery·p0.50:   9076.474 ms/op
                 executeQuery·p0.90:   9076.474 ms/op
                 executeQuery·p0.95:   9076.474 ms/op
                 executeQuery·p0.99:   9076.474 ms/op
                 executeQuery·p0.999:  9076.474 ms/op
                 executeQuery·p0.9999: 9076.474 ms/op
                 executeQuery·p1.00:   9076.474 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   9073.957 ±(99.9%) 643.798 ms/op

  Histogram, ms/op:
    [ 8000.000,  8125.000) = 0 
    [ 8125.000,  8250.000) = 0 
    [ 8250.000,  8375.000) = 0 
    [ 8375.000,  8500.000) = 0 
    [ 8500.000,  8625.000) = 2 
    [ 8625.000,  8750.000) = 1 
    [ 8750.000,  8875.000) = 0 
    [ 8875.000,  9000.000) = 0 
    [ 9000.000,  9125.000) = 3 
    [ 9125.000,  9250.000) = 1 
    [ 9250.000,  9375.000) = 1 
    [ 9375.000,  9500.000) = 1 
    [ 9500.000,  9625.000) = 0 
    [ 9625.000,  9750.000) = 0 
    [ 9750.000,  9875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   8539.603 ms/op
     p(50.0000) =   9068.085 ms/op
     p(90.0000) =   9906.946 ms/op
     p(95.0000) =   9965.666 ms/op
     p(99.0000) =   9965.666 ms/op
     p(99.9000) =   9965.666 ms/op
     p(99.9900) =   9965.666 ms/op
     p(99.9990) =   9965.666 ms/op
     p(99.9999) =   9965.666 ms/op
    p(100.0000) =   9965.666 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 26.67% complete, ETA 07:25:13
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1882384904 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1882384904() {
        this(4);
    }
    public KeyValueMap_1882384904(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1882384904 aggregation_state_map = new KeyValueMap_1882384904();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

26273.120 ms/op
# Warmup Iteration   2: 41070.625 ms/op
# Warmup Iteration   3: 34024.194 ms/op
# Warmup Iteration   4: 41943.040 ms/op
# Warmup Iteration   5: 25669.140 ms/op
Iteration   1: 24964.497 ms/op
                 executeQuery·p0.00:   24964.497 ms/op
                 executeQuery·p0.50:   24964.497 ms/op
                 executeQuery·p0.90:   24964.497 ms/op
                 executeQuery·p0.95:   24964.497 ms/op
                 executeQuery·p0.99:   24964.497 ms/op
                 executeQuery·p0.999:  24964.497 ms/op
                 executeQuery·p0.9999: 24964.497 ms/op
                 executeQuery·p1.00:   24964.497 ms/op

Iteration   2: 25602.032 ms/op
                 executeQuery·p0.00:   25602.032 ms/op
                 executeQuery·p0.50:   25602.032 ms/op
                 executeQuery·p0.90:   25602.032 ms/op
                 executeQuery·p0.95:   25602.032 ms/op
                 executeQuery·p0.99:   25602.032 ms/op
                 executeQuery·p0.999:  25602.032 ms/op
                 executeQuery·p0.9999: 25602.032 ms/op
                 executeQuery·p1.00:   25602.032 ms/op

Iteration   3: 41607.496 ms/op
                 executeQuery·p0.00:   41607.496 ms/op
                 executeQuery·p0.50:   41607.496 ms/op
                 executeQuery·p0.90:   41607.496 ms/op
                 executeQuery·p0.95:   41607.496 ms/op
                 executeQuery·p0.99:   41607.496 ms/op
                 executeQuery·p0.999:  41607.496 ms/op
                 executeQuery·p0.9999: 41607.496 ms/op
                 executeQuery·p1.00:   41607.496 ms/op

Iteration   4: 31809.602 ms/op
                 executeQuery·p0.00:   31809.602 ms/op
                 executeQuery·p0.50:   31809.602 ms/op
                 executeQuery·p0.90:   31809.602 ms/op
                 executeQuery·p0.95:   31809.602 ms/op
                 executeQuery·p0.99:   31809.602 ms/op
                 executeQuery·p0.999:  31809.602 ms/op
                 executeQuery·p0.9999: 31809.602 ms/op
                 executeQuery·p1.00:   31809.602 ms/op

Iteration   5: 23857.201 ms/op
                 executeQuery·p0.00:   23857.201 ms/op
                 executeQuery·p0.50:   23857.201 ms/op
                 executeQuery·p0.90:   23857.201 ms/op
                 executeQuery·p0.95:   23857.201 ms/op
                 executeQuery·p0.99:   23857.201 ms/op
                 executeQuery·p0.999:  23857.201 ms/op
                 executeQuery·p0.9999: 23857.201 ms/op
                 executeQuery·p1.00:   23857.201 ms/op


# Run progress: 27.22% complete, ETA 07:39:26
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_638744781 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_638744781() {
        this(4);
    }
    public KeyValueMap_638744781(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_638744781 aggregation_state_map = new KeyValueMap_638744781();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

27581.743 ms/op
# Warmup Iteration   2: 24494.735 ms/op
# Warmup Iteration   3: 25333.596 ms/op
# Warmup Iteration   4: 41540.387 ms/op
# Warmup Iteration   5: 24326.963 ms/op
Iteration   1: 27145.535 ms/op
                 executeQuery·p0.00:   27145.535 ms/op
                 executeQuery·p0.50:   27145.535 ms/op
                 executeQuery·p0.90:   27145.535 ms/op
                 executeQuery·p0.95:   27145.535 ms/op
                 executeQuery·p0.99:   27145.535 ms/op
                 executeQuery·p0.999:  27145.535 ms/op
                 executeQuery·p0.9999: 27145.535 ms/op
                 executeQuery·p1.00:   27145.535 ms/op

Iteration   2: 26340.229 ms/op
                 executeQuery·p0.00:   26340.229 ms/op
                 executeQuery·p0.50:   26340.229 ms/op
                 executeQuery·p0.90:   26340.229 ms/op
                 executeQuery·p0.95:   26340.229 ms/op
                 executeQuery·p0.99:   26340.229 ms/op
                 executeQuery·p0.999:  26340.229 ms/op
                 executeQuery·p0.9999: 26340.229 ms/op
                 executeQuery·p1.00:   26340.229 ms/op

Iteration   3: 24058.528 ms/op
                 executeQuery·p0.00:   24058.528 ms/op
                 executeQuery·p0.50:   24058.528 ms/op
                 executeQuery·p0.90:   24058.528 ms/op
                 executeQuery·p0.95:   24058.528 ms/op
                 executeQuery·p0.99:   24058.528 ms/op
                 executeQuery·p0.999:  24058.528 ms/op
                 executeQuery·p0.9999: 24058.528 ms/op
                 executeQuery·p1.00:   24058.528 ms/op

Iteration   4: 30970.741 ms/op
                 executeQuery·p0.00:   30970.741 ms/op
                 executeQuery·p0.50:   30970.741 ms/op
                 executeQuery·p0.90:   30970.741 ms/op
                 executeQuery·p0.95:   30970.741 ms/op
                 executeQuery·p0.99:   30970.741 ms/op
                 executeQuery·p0.999:  30970.741 ms/op
                 executeQuery·p0.9999: 30970.741 ms/op
                 executeQuery·p1.00:   30970.741 ms/op

Iteration   5: 25165.824 ms/op
                 executeQuery·p0.00:   25165.824 ms/op
                 executeQuery·p0.50:   25165.824 ms/op
                 executeQuery·p0.90:   25165.824 ms/op
                 executeQuery·p0.95:   25165.824 ms/op
                 executeQuery·p0.99:   25165.824 ms/op
                 executeQuery·p0.999:  25165.824 ms/op
                 executeQuery·p0.9999: 25165.824 ms/op
                 executeQuery·p1.00:   25165.824 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  28152.168 ±(99.9%) 8241.599 ms/op

  Histogram, ms/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 3 
    [25000.000, 27500.000) = 4 
    [27500.000, 30000.000) = 0 
    [30000.000, 32500.000) = 2 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 
    [37500.000, 40000.000) = 0 
    [40000.000, 42500.000) = 1 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  23857.201 ms/op
     p(50.0000) =  25971.130 ms/op
     p(90.0000) =  40627.706 ms/op
     p(95.0000) =  41607.496 ms/op
     p(99.0000) =  41607.496 ms/op
     p(99.9000) =  41607.496 ms/op
     p(99.9900) =  41607.496 ms/op
     p(99.9990) =  41607.496 ms/op
     p(99.9999) =  41607.496 ms/op
    p(100.0000) =  41607.496 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 27.78% complete, ETA 07:51:30
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7327.449 ms/op
# Warmup Iteration   2: 6618.612 ms/op
# Warmup Iteration   3: 5746.196 ms/op
# Warmup Iteration   4: 6769.607 ms/op
# Warmup Iteration   5: 6765.412 ms/op
Iteration   1: 6765.412 ms/op
                 executeQuery·p0.00:   6761.218 ms/op
                 executeQuery·p0.50:   6765.412 ms/op
                 executeQuery·p0.90:   6769.607 ms/op
                 executeQuery·p0.95:   6769.607 ms/op
                 executeQuery·p0.99:   6769.607 ms/op
                 executeQuery·p0.999:  6769.607 ms/op
                 executeQuery·p0.9999: 6769.607 ms/op
                 executeQuery·p1.00:   6769.607 ms/op

Iteration   2: 6765.412 ms/op
                 executeQuery·p0.00:   6761.218 ms/op
                 executeQuery·p0.50:   6765.412 ms/op
                 executeQuery·p0.90:   6769.607 ms/op
                 executeQuery·p0.95:   6769.607 ms/op
                 executeQuery·p0.99:   6769.607 ms/op
                 executeQuery·p0.999:  6769.607 ms/op
                 executeQuery·p0.9999: 6769.607 ms/op
                 executeQuery·p1.00:   6769.607 ms/op

Iteration   3: 6769.607 ms/op
                 executeQuery·p0.00:   6752.829 ms/op
                 executeQuery·p0.50:   6769.607 ms/op
                 executeQuery·p0.90:   6786.384 ms/op
                 executeQuery·p0.95:   6786.384 ms/op
                 executeQuery·p0.99:   6786.384 ms/op
                 executeQuery·p0.999:  6786.384 ms/op
                 executeQuery·p0.9999: 6786.384 ms/op
                 executeQuery·p1.00:   6786.384 ms/op

Iteration   4: 6761.218 ms/op
                 executeQuery·p0.00:   6761.218 ms/op
                 executeQuery·p0.50:   6761.218 ms/op
                 executeQuery·p0.90:   6761.218 ms/op
                 executeQuery·p0.95:   6761.218 ms/op
                 executeQuery·p0.99:   6761.218 ms/op
                 executeQuery·p0.999:  6761.218 ms/op
                 executeQuery·p0.9999: 6761.218 ms/op
                 executeQuery·p1.00:   6761.218 ms/op

Iteration   5: 6803.161 ms/op
                 executeQuery·p0.00:   6752.829 ms/op
                 executeQuery·p0.50:   6803.161 ms/op
                 executeQuery·p0.90:   6853.493 ms/op
                 executeQuery·p0.95:   6853.493 ms/op
                 executeQuery·p0.99:   6853.493 ms/op
                 executeQuery·p0.999:  6853.493 ms/op
                 executeQuery·p0.9999: 6853.493 ms/op
                 executeQuery·p1.00:   6853.493 ms/op


# Run progress: 28.33% complete, ETA 07:44:26
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5968.495 ms/op
# Warmup Iteration   2: 7105.151 ms/op
# Warmup Iteration   3: 6731.858 ms/op
# Warmup Iteration   4: 6740.247 ms/op
# Warmup Iteration   5: 6731.858 ms/op
Iteration   1: 6736.052 ms/op
                 executeQuery·p0.00:   6736.052 ms/op
                 executeQuery·p0.50:   6736.052 ms/op
                 executeQuery·p0.90:   6736.052 ms/op
                 executeQuery·p0.95:   6736.052 ms/op
                 executeQuery·p0.99:   6736.052 ms/op
                 executeQuery·p0.999:  6736.052 ms/op
                 executeQuery·p0.9999: 6736.052 ms/op
                 executeQuery·p1.00:   6736.052 ms/op

Iteration   2: 6727.664 ms/op
                 executeQuery·p0.00:   6727.664 ms/op
                 executeQuery·p0.50:   6727.664 ms/op
                 executeQuery·p0.90:   6727.664 ms/op
                 executeQuery·p0.95:   6727.664 ms/op
                 executeQuery·p0.99:   6727.664 ms/op
                 executeQuery·p0.999:  6727.664 ms/op
                 executeQuery·p0.9999: 6727.664 ms/op
                 executeQuery·p1.00:   6727.664 ms/op

Iteration   3: 6736.052 ms/op
                 executeQuery·p0.00:   6736.052 ms/op
                 executeQuery·p0.50:   6736.052 ms/op
                 executeQuery·p0.90:   6736.052 ms/op
                 executeQuery·p0.95:   6736.052 ms/op
                 executeQuery·p0.99:   6736.052 ms/op
                 executeQuery·p0.999:  6736.052 ms/op
                 executeQuery·p0.9999: 6736.052 ms/op
                 executeQuery·p1.00:   6736.052 ms/op

Iteration   4: 6740.247 ms/op
                 executeQuery·p0.00:   6736.052 ms/op
                 executeQuery·p0.50:   6740.247 ms/op
                 executeQuery·p0.90:   6744.441 ms/op
                 executeQuery·p0.95:   6744.441 ms/op
                 executeQuery·p0.99:   6744.441 ms/op
                 executeQuery·p0.999:  6744.441 ms/op
                 executeQuery·p0.9999: 6744.441 ms/op
                 executeQuery·p1.00:   6744.441 ms/op

Iteration   5: 6761.218 ms/op
                 executeQuery·p0.00:   6752.829 ms/op
                 executeQuery·p0.50:   6761.218 ms/op
                 executeQuery·p0.90:   6769.607 ms/op
                 executeQuery·p0.95:   6769.607 ms/op
                 executeQuery·p0.99:   6769.607 ms/op
                 executeQuery·p0.999:  6769.607 ms/op
                 executeQuery·p0.9999: 6769.607 ms/op
                 executeQuery·p1.00:   6769.607 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   6756.604 ±(99.9%) 24.272 ms/op

  Histogram, ms/op:
    [6700.000, 6712.500) = 0 
    [6712.500, 6725.000) = 0 
    [6725.000, 6737.500) = 7 
    [6737.500, 6750.000) = 1 
    [6750.000, 6762.500) = 7 
    [6762.500, 6775.000) = 3 
    [6775.000, 6787.500) = 1 
    [6787.500, 6800.000) = 0 
    [6800.000, 6812.500) = 0 
    [6812.500, 6825.000) = 0 
    [6825.000, 6837.500) = 0 
    [6837.500, 6850.000) = 0 
    [6850.000, 6862.500) = 1 
    [6862.500, 6875.000) = 0 
    [6875.000, 6887.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   6727.664 ms/op
     p(50.0000) =   6752.829 ms/op
     p(90.0000) =   6784.706 ms/op
     p(95.0000) =   6850.137 ms/op
     p(99.0000) =   6853.493 ms/op
     p(99.9000) =   6853.493 ms/op
     p(99.9900) =   6853.493 ms/op
     p(99.9990) =   6853.493 ms/op
     p(99.9999) =   6853.493 ms/op
    p(100.0000) =   6853.493 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 28.89% complete, ETA 07:37:32
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

10099.884 ms/op
# Warmup Iteration   2: 10351.542 ms/op
# Warmup Iteration   3: 9999.221 ms/op
# Warmup Iteration   4: 10015.998 ms/op
# Warmup Iteration   5: 9974.055 ms/op
Iteration   1: 10150.216 ms/op
                 executeQuery·p0.00:   10150.216 ms/op
                 executeQuery·p0.50:   10150.216 ms/op
                 executeQuery·p0.90:   10150.216 ms/op
                 executeQuery·p0.95:   10150.216 ms/op
                 executeQuery·p0.99:   10150.216 ms/op
                 executeQuery·p0.999:  10150.216 ms/op
                 executeQuery·p0.9999: 10150.216 ms/op
                 executeQuery·p1.00:   10150.216 ms/op

Iteration   2: 10217.325 ms/op
                 executeQuery·p0.00:   10217.325 ms/op
                 executeQuery·p0.50:   10217.325 ms/op
                 executeQuery·p0.90:   10217.325 ms/op
                 executeQuery·p0.95:   10217.325 ms/op
                 executeQuery·p0.99:   10217.325 ms/op
                 executeQuery·p0.999:  10217.325 ms/op
                 executeQuery·p0.9999: 10217.325 ms/op
                 executeQuery·p1.00:   10217.325 ms/op

Iteration   3: 9999.221 ms/op
                 executeQuery·p0.00:   9999.221 ms/op
                 executeQuery·p0.50:   9999.221 ms/op
                 executeQuery·p0.90:   9999.221 ms/op
                 executeQuery·p0.95:   9999.221 ms/op
                 executeQuery·p0.99:   9999.221 ms/op
                 executeQuery·p0.999:  9999.221 ms/op
                 executeQuery·p0.9999: 9999.221 ms/op
                 executeQuery·p1.00:   9999.221 ms/op

Iteration   4: 9957.278 ms/op
                 executeQuery·p0.00:   9948.889 ms/op
                 executeQuery·p0.50:   9957.278 ms/op
                 executeQuery·p0.90:   9965.666 ms/op
                 executeQuery·p0.95:   9965.666 ms/op
                 executeQuery·p0.99:   9965.666 ms/op
                 executeQuery·p0.999:  9965.666 ms/op
                 executeQuery·p0.9999: 9965.666 ms/op
                 executeQuery·p1.00:   9965.666 ms/op

Iteration   5: 10032.775 ms/op
                 executeQuery·p0.00:   10032.775 ms/op
                 executeQuery·p0.50:   10032.775 ms/op
                 executeQuery·p0.90:   10032.775 ms/op
                 executeQuery·p0.95:   10032.775 ms/op
                 executeQuery·p0.99:   10032.775 ms/op
                 executeQuery·p0.999:  10032.775 ms/op
                 executeQuery·p0.9999: 10032.775 ms/op
                 executeQuery·p1.00:   10032.775 ms/op


# Run progress: 29.44% complete, ETA 07:31:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1882384904 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1882384904() {
        this(4);
    }
    public KeyValueMap_1882384904(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1882384904 aggregation_state_map = new KeyValueMap_1882384904();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

9932.112 ms/op
# Warmup Iteration   2: 10200.547 ms/op
# Warmup Iteration   3: 10670.309 ms/op
# Warmup Iteration   4: 8732.541 ms/op
# Warmup Iteration   5: 8724.152 ms/op
Iteration   1: 10099.884 ms/op
                 executeQuery·p0.00:   10099.884 ms/op
                 executeQuery·p0.50:   10099.884 ms/op
                 executeQuery·p0.90:   10099.884 ms/op
                 executeQuery·p0.95:   10099.884 ms/op
                 executeQuery·p0.99:   10099.884 ms/op
                 executeQuery·p0.999:  10099.884 ms/op
                 executeQuery·p0.9999: 10099.884 ms/op
                 executeQuery·p1.00:   10099.884 ms/op

Iteration   2: 10133.438 ms/op
                 executeQuery·p0.00:   10133.438 ms/op
                 executeQuery·p0.50:   10133.438 ms/op
                 executeQuery·p0.90:   10133.438 ms/op
                 executeQuery·p0.95:   10133.438 ms/op
                 executeQuery·p0.99:   10133.438 ms/op
                 executeQuery·p0.999:  10133.438 ms/op
                 executeQuery·p0.9999: 10133.438 ms/op
                 executeQuery·p1.00:   10133.438 ms/op

Iteration   3: 10317.988 ms/op
                 executeQuery·p0.00:   10317.988 ms/op
                 executeQuery·p0.50:   10317.988 ms/op
                 executeQuery·p0.90:   10317.988 ms/op
                 executeQuery·p0.95:   10317.988 ms/op
                 executeQuery·p0.99:   10317.988 ms/op
                 executeQuery·p0.999:  10317.988 ms/op
                 executeQuery·p0.9999: 10317.988 ms/op
                 executeQuery·p1.00:   10317.988 ms/op

Iteration   4: 10166.993 ms/op
                 executeQuery·p0.00:   10166.993 ms/op
                 executeQuery·p0.50:   10166.993 ms/op
                 executeQuery·p0.90:   10166.993 ms/op
                 executeQuery·p0.95:   10166.993 ms/op
                 executeQuery·p0.99:   10166.993 ms/op
                 executeQuery·p0.999:  10166.993 ms/op
                 executeQuery·p0.9999: 10166.993 ms/op
                 executeQuery·p1.00:   10166.993 ms/op

Iteration   5: 10183.770 ms/op
                 executeQuery·p0.00:   10183.770 ms/op
                 executeQuery·p0.50:   10183.770 ms/op
                 executeQuery·p0.90:   10183.770 ms/op
                 executeQuery·p0.95:   10183.770 ms/op
                 executeQuery·p0.99:   10183.770 ms/op
                 executeQuery·p0.999:  10183.770 ms/op
                 executeQuery·p0.9999: 10183.770 ms/op
                 executeQuery·p1.00:   10183.770 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 11
  mean =  10110.560 ±(99.9%) 158.145 ms/op

  Histogram, ms/op:
    [ 9900.000,  9950.000) = 1 
    [ 9950.000, 10000.000) = 2 
    [10000.000, 10050.000) = 1 
    [10050.000, 10100.000) = 1 
    [10100.000, 10150.000) = 1 
    [10150.000, 10200.000) = 3 
    [10200.000, 10250.000) = 1 
    [10250.000, 10300.000) = 0 
    [10300.000, 10350.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   9948.889 ms/op
     p(50.0000) =  10133.438 ms/op
     p(90.0000) =  10297.855 ms/op
     p(95.0000) =  10317.988 ms/op
     p(99.0000) =  10317.988 ms/op
     p(99.9000) =  10317.988 ms/op
     p(99.9900) =  10317.988 ms/op
     p(99.9990) =  10317.988 ms/op
     p(99.9999) =  10317.988 ms/op
    p(100.0000) =  10317.988 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 30.00% complete, ETA 07:24:38
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

13321.110 ms/op
# Warmup Iteration   2: 15552.479 ms/op
# Warmup Iteration   3: 14394.851 ms/op
# Warmup Iteration   4: 14847.836 ms/op
# Warmup Iteration   5: 13035.897 ms/op
Iteration   1: 14361.297 ms/op
                 executeQuery·p0.00:   14361.297 ms/op
                 executeQuery·p0.50:   14361.297 ms/op
                 executeQuery·p0.90:   14361.297 ms/op
                 executeQuery·p0.95:   14361.297 ms/op
                 executeQuery·p0.99:   14361.297 ms/op
                 executeQuery·p0.999:  14361.297 ms/op
                 executeQuery·p0.9999: 14361.297 ms/op
                 executeQuery·p1.00:   14361.297 ms/op

Iteration   2: 14042.530 ms/op
                 executeQuery·p0.00:   14042.530 ms/op
                 executeQuery·p0.50:   14042.530 ms/op
                 executeQuery·p0.90:   14042.530 ms/op
                 executeQuery·p0.95:   14042.530 ms/op
                 executeQuery·p0.99:   14042.530 ms/op
                 executeQuery·p0.999:  14042.530 ms/op
                 executeQuery·p0.9999: 14042.530 ms/op
                 executeQuery·p1.00:   14042.530 ms/op

Iteration   3: 13958.644 ms/op
                 executeQuery·p0.00:   13958.644 ms/op
                 executeQuery·p0.50:   13958.644 ms/op
                 executeQuery·p0.90:   13958.644 ms/op
                 executeQuery·p0.95:   13958.644 ms/op
                 executeQuery·p0.99:   13958.644 ms/op
                 executeQuery·p0.999:  13958.644 ms/op
                 executeQuery·p0.9999: 13958.644 ms/op
                 executeQuery·p1.00:   13958.644 ms/op

Iteration   4: 12616.466 ms/op
                 executeQuery·p0.00:   12616.466 ms/op
                 executeQuery·p0.50:   12616.466 ms/op
                 executeQuery·p0.90:   12616.466 ms/op
                 executeQuery·p0.95:   12616.466 ms/op
                 executeQuery·p0.99:   12616.466 ms/op
                 executeQuery·p0.999:  12616.466 ms/op
                 executeQuery·p0.9999: 12616.466 ms/op
                 executeQuery·p1.00:   12616.466 ms/op

Iteration   5: 12599.689 ms/op
                 executeQuery·p0.00:   12599.689 ms/op
                 executeQuery·p0.50:   12599.689 ms/op
                 executeQuery·p0.90:   12599.689 ms/op
                 executeQuery·p0.95:   12599.689 ms/op
                 executeQuery·p0.99:   12599.689 ms/op
                 executeQuery·p0.999:  12599.689 ms/op
                 executeQuery·p0.9999: 12599.689 ms/op
                 executeQuery·p1.00:   12599.689 ms/op


# Run progress: 30.56% complete, ETA 07:18:24
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_638744781 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_638744781() {
        this(4);
    }
    public KeyValueMap_638744781(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_638744781 aggregation_state_map = new KeyValueMap_638744781();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

13287.555 ms/op
# Warmup Iteration   2: 13623.099 ms/op
# Warmup Iteration   3: 12616.466 ms/op
# Warmup Iteration   4: 14193.525 ms/op
# Warmup Iteration   5: 12582.912 ms/op
Iteration   1: 12616.466 ms/op
                 executeQuery·p0.00:   12616.466 ms/op
                 executeQuery·p0.50:   12616.466 ms/op
                 executeQuery·p0.90:   12616.466 ms/op
                 executeQuery·p0.95:   12616.466 ms/op
                 executeQuery·p0.99:   12616.466 ms/op
                 executeQuery·p0.999:  12616.466 ms/op
                 executeQuery·p0.9999: 12616.466 ms/op
                 executeQuery·p1.00:   12616.466 ms/op

Iteration   2: 13002.342 ms/op
                 executeQuery·p0.00:   13002.342 ms/op
                 executeQuery·p0.50:   13002.342 ms/op
                 executeQuery·p0.90:   13002.342 ms/op
                 executeQuery·p0.95:   13002.342 ms/op
                 executeQuery·p0.99:   13002.342 ms/op
                 executeQuery·p0.999:  13002.342 ms/op
                 executeQuery·p0.9999: 13002.342 ms/op
                 executeQuery·p1.00:   13002.342 ms/op

Iteration   3: 13203.669 ms/op
                 executeQuery·p0.00:   13203.669 ms/op
                 executeQuery·p0.50:   13203.669 ms/op
                 executeQuery·p0.90:   13203.669 ms/op
                 executeQuery·p0.95:   13203.669 ms/op
                 executeQuery·p0.99:   13203.669 ms/op
                 executeQuery·p0.999:  13203.669 ms/op
                 executeQuery·p0.9999: 13203.669 ms/op
                 executeQuery·p1.00:   13203.669 ms/op

Iteration   4: 12616.466 ms/op
                 executeQuery·p0.00:   12616.466 ms/op
                 executeQuery·p0.50:   12616.466 ms/op
                 executeQuery·p0.90:   12616.466 ms/op
                 executeQuery·p0.95:   12616.466 ms/op
                 executeQuery·p0.99:   12616.466 ms/op
                 executeQuery·p0.999:  12616.466 ms/op
                 executeQuery·p0.9999: 12616.466 ms/op
                 executeQuery·p1.00:   12616.466 ms/op

Iteration   5: 12918.456 ms/op
                 executeQuery·p0.00:   12918.456 ms/op
                 executeQuery·p0.50:   12918.456 ms/op
                 executeQuery·p0.90:   12918.456 ms/op
                 executeQuery·p0.95:   12918.456 ms/op
                 executeQuery·p0.99:   12918.456 ms/op
                 executeQuery·p0.999:  12918.456 ms/op
                 executeQuery·p0.9999: 12918.456 ms/op
                 executeQuery·p1.00:   12918.456 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  13193.603 ±(99.9%) 1024.630 ms/op

  Histogram, ms/op:
    [12000.000, 12250.000) = 0 
    [12250.000, 12500.000) = 0 
    [12500.000, 12750.000) = 4 
    [12750.000, 13000.000) = 1 
    [13000.000, 13250.000) = 2 
    [13250.000, 13500.000) = 0 
    [13500.000, 13750.000) = 0 
    [13750.000, 14000.000) = 1 
    [14000.000, 14250.000) = 1 
    [14250.000, 14500.000) = 1 
    [14500.000, 14750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12599.689 ms/op
     p(50.0000) =  12960.399 ms/op
     p(90.0000) =  14329.420 ms/op
     p(95.0000) =  14361.297 ms/op
     p(99.0000) =  14361.297 ms/op
     p(99.9000) =  14361.297 ms/op
     p(99.9900) =  14361.297 ms/op
     p(99.9990) =  14361.297 ms/op
     p(99.9999) =  14361.297 ms/op
    p(100.0000) =  14361.297 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 31.11% complete, ETA 07:12:01
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1882384904 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1882384904() {
        this(4);
    }
    public KeyValueMap_1882384904(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1882384904 aggregation_state_map = new KeyValueMap_1882384904();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

19428.016 ms/op
# Warmup Iteration   2: 31776.047 ms/op
# Warmup Iteration   3: 58787.365 ms/op
# Warmup Iteration   4: 18421.383 ms/op
# Warmup Iteration   5: 19025.363 ms/op
Iteration   1: 29729.227 ms/op
                 executeQuery·p0.00:   29729.227 ms/op
                 executeQuery·p0.50:   29729.227 ms/op
                 executeQuery·p0.90:   29729.227 ms/op
                 executeQuery·p0.95:   29729.227 ms/op
                 executeQuery·p0.99:   29729.227 ms/op
                 executeQuery·p0.999:  29729.227 ms/op
                 executeQuery·p0.9999: 29729.227 ms/op
                 executeQuery·p1.00:   29729.227 ms/op

Iteration   2: 18421.383 ms/op
                 executeQuery·p0.00:   18421.383 ms/op
                 executeQuery·p0.50:   18421.383 ms/op
                 executeQuery·p0.90:   18421.383 ms/op
                 executeQuery·p0.95:   18421.383 ms/op
                 executeQuery·p0.99:   18421.383 ms/op
                 executeQuery·p0.999:  18421.383 ms/op
                 executeQuery·p0.9999: 18421.383 ms/op
                 executeQuery·p1.00:   18421.383 ms/op

Iteration   3: 26809.991 ms/op
                 executeQuery·p0.00:   26809.991 ms/op
                 executeQuery·p0.50:   26809.991 ms/op
                 executeQuery·p0.90:   26809.991 ms/op
                 executeQuery·p0.95:   26809.991 ms/op
                 executeQuery·p0.99:   26809.991 ms/op
                 executeQuery·p0.999:  26809.991 ms/op
                 executeQuery·p0.9999: 26809.991 ms/op
                 executeQuery·p1.00:   26809.991 ms/op

Iteration   4: 30467.424 ms/op
                 executeQuery·p0.00:   30467.424 ms/op
                 executeQuery·p0.50:   30467.424 ms/op
                 executeQuery·p0.90:   30467.424 ms/op
                 executeQuery·p0.95:   30467.424 ms/op
                 executeQuery·p0.99:   30467.424 ms/op
                 executeQuery·p0.999:  30467.424 ms/op
                 executeQuery·p0.9999: 30467.424 ms/op
                 executeQuery·p1.00:   30467.424 ms/op

Iteration   5: 28118.614 ms/op
                 executeQuery·p0.00:   28118.614 ms/op
                 executeQuery·p0.50:   28118.614 ms/op
                 executeQuery·p0.90:   28118.614 ms/op
                 executeQuery·p0.95:   28118.614 ms/op
                 executeQuery·p0.99:   28118.614 ms/op
                 executeQuery·p0.999:  28118.614 ms/op
                 executeQuery·p0.9999: 28118.614 ms/op
                 executeQuery·p1.00:   28118.614 ms/op


# Run progress: 31.67% complete, ETA 07:13:50
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

19562.234 ms/op
# Warmup Iteration   2: 31272.731 ms/op
# Warmup Iteration   3: 29427.237 ms/op
# Warmup Iteration   4: 18555.601 ms/op
# Warmup Iteration   5: 16676.553 ms/op
Iteration   1: 17314.087 ms/op
                 executeQuery·p0.00:   17314.087 ms/op
                 executeQuery·p0.50:   17314.087 ms/op
                 executeQuery·p0.90:   17314.087 ms/op
                 executeQuery·p0.95:   17314.087 ms/op
                 executeQuery·p0.99:   17314.087 ms/op
                 executeQuery·p0.999:  17314.087 ms/op
                 executeQuery·p0.9999: 17314.087 ms/op
                 executeQuery·p1.00:   17314.087 ms/op

Iteration   2: 20367.540 ms/op
                 executeQuery·p0.00:   20367.540 ms/op
                 executeQuery·p0.50:   20367.540 ms/op
                 executeQuery·p0.90:   20367.540 ms/op
                 executeQuery·p0.95:   20367.540 ms/op
                 executeQuery·p0.99:   20367.540 ms/op
                 executeQuery·p0.999:  20367.540 ms/op
                 executeQuery·p0.9999: 20367.540 ms/op
                 executeQuery·p1.00:   20367.540 ms/op

Iteration   3: 17448.305 ms/op
                 executeQuery·p0.00:   17448.305 ms/op
                 executeQuery·p0.50:   17448.305 ms/op
                 executeQuery·p0.90:   17448.305 ms/op
                 executeQuery·p0.95:   17448.305 ms/op
                 executeQuery·p0.99:   17448.305 ms/op
                 executeQuery·p0.999:  17448.305 ms/op
                 executeQuery·p0.9999: 17448.305 ms/op
                 executeQuery·p1.00:   17448.305 ms/op

Iteration   4: 17616.077 ms/op
                 executeQuery·p0.00:   17616.077 ms/op
                 executeQuery·p0.50:   17616.077 ms/op
                 executeQuery·p0.90:   17616.077 ms/op
                 executeQuery·p0.95:   17616.077 ms/op
                 executeQuery·p0.99:   17616.077 ms/op
                 executeQuery·p0.999:  17616.077 ms/op
                 executeQuery·p0.9999: 17616.077 ms/op
                 executeQuery·p1.00:   17616.077 ms/op

Iteration   5: 26742.882 ms/op
                 executeQuery·p0.00:   26742.882 ms/op
                 executeQuery·p0.50:   26742.882 ms/op
                 executeQuery·p0.90:   26742.882 ms/op
                 executeQuery·p0.95:   26742.882 ms/op
                 executeQuery·p0.99:   26742.882 ms/op
                 executeQuery·p0.999:  26742.882 ms/op
                 executeQuery·p0.9999: 26742.882 ms/op
                 executeQuery·p1.00:   26742.882 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  23303.553 ±(99.9%) 8355.282 ms/op

  Histogram, ms/op:
    [10000.000, 12500.000) = 0 
    [12500.000, 15000.000) = 0 
    [15000.000, 17500.000) = 2 
    [17500.000, 20000.000) = 2 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 2 
    [27500.000, 30000.000) = 2 
    [30000.000, 32500.000) = 1 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  17314.087 ms/op
     p(50.0000) =  23555.211 ms/op
     p(90.0000) =  30393.605 ms/op
     p(95.0000) =  30467.424 ms/op
     p(99.0000) =  30467.424 ms/op
     p(99.9000) =  30467.424 ms/op
     p(99.9900) =  30467.424 ms/op
     p(99.9990) =  30467.424 ms/op
     p(99.9999) =  30467.424 ms/op
    p(100.0000) =  30467.424 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 32.22% complete, ETA 07:13:04
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_99212464 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_99212464() {
        this(4);
    }
    public KeyValueMap_99212464(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_99212464 aggregation_state_map = new KeyValueMap_99212464();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

50465.866 ms/op
# Warmup Iteration   2: 85228.257 ms/op
# Warmup Iteration   3: 59525.562 ms/op
# Warmup Iteration   4: 53016.003 ms/op
# Warmup Iteration   5: 82141.250 ms/op
Iteration   1: 81604.379 ms/op
                 executeQuery·p0.00:   81604.379 ms/op
                 executeQuery·p0.50:   81604.379 ms/op
                 executeQuery·p0.90:   81604.379 ms/op
                 executeQuery·p0.95:   81604.379 ms/op
                 executeQuery·p0.99:   81604.379 ms/op
                 executeQuery·p0.999:  81604.379 ms/op
                 executeQuery·p0.9999: 81604.379 ms/op
                 executeQuery·p1.00:   81604.379 ms/op

Iteration   2: 51539.608 ms/op
                 executeQuery·p0.00:   51539.608 ms/op
                 executeQuery·p0.50:   51539.608 ms/op
                 executeQuery·p0.90:   51539.608 ms/op
                 executeQuery·p0.95:   51539.608 ms/op
                 executeQuery·p0.99:   51539.608 ms/op
                 executeQuery·p0.999:  51539.608 ms/op
                 executeQuery·p0.9999: 51539.608 ms/op
                 executeQuery·p1.00:   51539.608 ms/op

Iteration   3: 67914.170 ms/op
                 executeQuery·p0.00:   67914.170 ms/op
                 executeQuery·p0.50:   67914.170 ms/op
                 executeQuery·p0.90:   67914.170 ms/op
                 executeQuery·p0.95:   67914.170 ms/op
                 executeQuery·p0.99:   67914.170 ms/op
                 executeQuery·p0.999:  67914.170 ms/op
                 executeQuery·p0.9999: 67914.170 ms/op
                 executeQuery·p1.00:   67914.170 ms/op

Iteration   4: 83214.991 ms/op
                 executeQuery·p0.00:   83214.991 ms/op
                 executeQuery·p0.50:   83214.991 ms/op
                 executeQuery·p0.90:   83214.991 ms/op
                 executeQuery·p0.95:   83214.991 ms/op
                 executeQuery·p0.99:   83214.991 ms/op
                 executeQuery·p0.999:  83214.991 ms/op
                 executeQuery·p0.9999: 83214.991 ms/op
                 executeQuery·p1.00:   83214.991 ms/op

Iteration   5: 57109.643 ms/op
                 executeQuery·p0.00:   57109.643 ms/op
                 executeQuery·p0.50:   57109.643 ms/op
                 executeQuery·p0.90:   57109.643 ms/op
                 executeQuery·p0.95:   57109.643 ms/op
                 executeQuery·p0.99:   57109.643 ms/op
                 executeQuery·p0.999:  57109.643 ms/op
                 executeQuery·p0.9999: 57109.643 ms/op
                 executeQuery·p1.00:   57109.643 ms/op


# Run progress: 32.78% complete, ETA 07:35:21
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_638744781 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_638744781() {
        this(4);
    }
    public KeyValueMap_638744781(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_638744781 aggregation_state_map = new KeyValueMap_638744781();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

53687.091 ms/op
# Warmup Iteration   2: 81470.161 ms/op
# Warmup Iteration   3: 49459.233 ms/op
# Warmup Iteration   4: 50264.539 ms/op
# Warmup Iteration   5: 49996.104 ms/op
Iteration   1: 50398.757 ms/op
                 executeQuery·p0.00:   50398.757 ms/op
                 executeQuery·p0.50:   50398.757 ms/op
                 executeQuery·p0.90:   50398.757 ms/op
                 executeQuery·p0.95:   50398.757 ms/op
                 executeQuery·p0.99:   50398.757 ms/op
                 executeQuery·p0.999:  50398.757 ms/op
                 executeQuery·p0.9999: 50398.757 ms/op
                 executeQuery·p1.00:   50398.757 ms/op

Iteration   2: 48184.164 ms/op
                 executeQuery·p0.00:   48184.164 ms/op
                 executeQuery·p0.50:   48184.164 ms/op
                 executeQuery·p0.90:   48184.164 ms/op
                 executeQuery·p0.95:   48184.164 ms/op
                 executeQuery·p0.99:   48184.164 ms/op
                 executeQuery·p0.999:  48184.164 ms/op
                 executeQuery·p0.9999: 48184.164 ms/op
                 executeQuery·p1.00:   48184.164 ms/op

Iteration   3: 52009.370 ms/op
                 executeQuery·p0.00:   52009.370 ms/op
                 executeQuery·p0.50:   52009.370 ms/op
                 executeQuery·p0.90:   52009.370 ms/op
                 executeQuery·p0.95:   52009.370 ms/op
                 executeQuery·p0.99:   52009.370 ms/op
                 executeQuery·p0.999:  52009.370 ms/op
                 executeQuery·p0.9999: 52009.370 ms/op
                 executeQuery·p1.00:   52009.370 ms/op

Iteration   4: 48922.362 ms/op
                 executeQuery·p0.00:   48922.362 ms/op
                 executeQuery·p0.50:   48922.362 ms/op
                 executeQuery·p0.90:   48922.362 ms/op
                 executeQuery·p0.95:   48922.362 ms/op
                 executeQuery·p0.99:   48922.362 ms/op
                 executeQuery·p0.999:  48922.362 ms/op
                 executeQuery·p0.9999: 48922.362 ms/op
                 executeQuery·p1.00:   48922.362 ms/op

Iteration   5: 49123.688 ms/op
                 executeQuery·p0.00:   49123.688 ms/op
                 executeQuery·p0.50:   49123.688 ms/op
                 executeQuery·p0.90:   49123.688 ms/op
                 executeQuery·p0.95:   49123.688 ms/op
                 executeQuery·p0.99:   49123.688 ms/op
                 executeQuery·p0.999:  49123.688 ms/op
                 executeQuery·p0.9999: 49123.688 ms/op
                 executeQuery·p1.00:   49123.688 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  59002.113 ±(99.9%) 20624.834 ms/op

  Histogram, ms/op:
    [40000.000, 45000.000) = 0 
    [45000.000, 50000.000) = 3 
    [50000.000, 55000.000) = 3 
    [55000.000, 60000.000) = 1 
    [60000.000, 65000.000) = 0 
    [65000.000, 70000.000) = 1 
    [70000.000, 75000.000) = 0 
    [75000.000, 80000.000) = 0 
    [80000.000, 85000.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  48184.164 ms/op
     p(50.0000) =  51774.489 ms/op
     p(90.0000) =  83053.930 ms/op
     p(95.0000) =  83214.991 ms/op
     p(99.0000) =  83214.991 ms/op
     p(99.9000) =  83214.991 ms/op
     p(99.9900) =  83214.991 ms/op
     p(99.9990) =  83214.991 ms/op
     p(99.9999) =  83214.991 ms/op
    p(100.0000) =  83214.991 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 33.33% complete, ETA 07:51:05
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

49.699 ±(99.9%) 4.635 ms/op
# Warmup Iteration   2: 50.442 ±(99.9%) 0.224 ms/op
# Warmup Iteration   3: 50.201 ±(99.9%) 0.277 ms/op
# Warmup Iteration   4: 48.265 ±(99.9%) 0.305 ms/op
# Warmup Iteration   5: 48.558 ±(99.9%) 0.323 ms/op
Iteration   1: 47.945 ±(99.9%) 0.283 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   47.645 ms/op
                 executeFilterQuery·p0.90:   49.296 ms/op
                 executeFilterQuery·p0.95:   50.515 ms/op
                 executeFilterQuery·p0.99:   52.030 ms/op
                 executeFilterQuery·p0.999:  53.608 ms/op
                 executeFilterQuery·p0.9999: 53.608 ms/op
                 executeFilterQuery·p1.00:   53.608 ms/op

Iteration   2: 47.469 ±(99.9%) 0.258 ms/op
                 executeFilterQuery·p0.00:   45.875 ms/op
                 executeFilterQuery·p0.50:   47.448 ms/op
                 executeFilterQuery·p0.90:   48.759 ms/op
                 executeFilterQuery·p0.95:   50.037 ms/op
                 executeFilterQuery·p0.99:   50.948 ms/op
                 executeFilterQuery·p0.999:  51.380 ms/op
                 executeFilterQuery·p0.9999: 51.380 ms/op
                 executeFilterQuery·p1.00:   51.380 ms/op

Iteration   3: 48.136 ±(99.9%) 0.336 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   47.743 ms/op
                 executeFilterQuery·p0.90:   50.417 ms/op
                 executeFilterQuery·p0.95:   51.161 ms/op
                 executeFilterQuery·p0.99:   51.708 ms/op
                 executeFilterQuery·p0.999:  51.708 ms/op
                 executeFilterQuery·p0.9999: 51.708 ms/op
                 executeFilterQuery·p1.00:   51.708 ms/op

Iteration   4: 47.420 ±(99.9%) 0.220 ms/op
                 executeFilterQuery·p0.00:   45.875 ms/op
                 executeFilterQuery·p0.50:   47.383 ms/op
                 executeFilterQuery·p0.90:   48.497 ms/op
                 executeFilterQuery·p0.95:   49.414 ms/op
                 executeFilterQuery·p0.99:   50.587 ms/op
                 executeFilterQuery·p0.999:  51.708 ms/op
                 executeFilterQuery·p0.9999: 51.708 ms/op
                 executeFilterQuery·p1.00:   51.708 ms/op

Iteration   5: 47.343 ±(99.9%) 0.107 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   47.448 ms/op
                 executeFilterQuery·p0.90:   47.841 ms/op
                 executeFilterQuery·p0.95:   47.972 ms/op
                 executeFilterQuery·p0.99:   48.234 ms/op
                 executeFilterQuery·p0.999:  48.234 ms/op
                 executeFilterQuery·p0.9999: 48.234 ms/op
                 executeFilterQuery·p1.00:   48.234 ms/op


# Run progress: 33.89% complete, ETA 07:42:49
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

49.068 ±(99.9%) 1.363 ms/op
# Warmup Iteration   2: 48.962 ±(99.9%) 0.118 ms/op
# Warmup Iteration   3: 49.240 ±(99.9%) 0.301 ms/op
# Warmup Iteration   4: 49.474 ±(99.9%) 0.329 ms/op
# Warmup Iteration   5: 48.727 ±(99.9%) 0.182 ms/op
Iteration   1: 48.728 ±(99.9%) 0.258 ms/op
                 executeFilterQuery·p0.00:   46.989 ms/op
                 executeFilterQuery·p0.50:   48.759 ms/op
                 executeFilterQuery·p0.90:   50.954 ms/op
                 executeFilterQuery·p0.95:   51.118 ms/op
                 executeFilterQuery·p0.99:   51.315 ms/op
                 executeFilterQuery·p0.999:  51.315 ms/op
                 executeFilterQuery·p0.9999: 51.315 ms/op
                 executeFilterQuery·p1.00:   51.315 ms/op

Iteration   2: 47.655 ±(99.9%) 0.166 ms/op
                 executeFilterQuery·p0.00:   46.793 ms/op
                 executeFilterQuery·p0.50:   47.514 ms/op
                 executeFilterQuery·p0.90:   48.169 ms/op
                 executeFilterQuery·p0.95:   49.611 ms/op
                 executeFilterQuery·p0.99:   50.489 ms/op
                 executeFilterQuery·p0.999:  52.560 ms/op
                 executeFilterQuery·p0.9999: 52.560 ms/op
                 executeFilterQuery·p1.00:   52.560 ms/op

Iteration   3: 48.195 ±(99.9%) 0.229 ms/op
                 executeFilterQuery·p0.00:   46.858 ms/op
                 executeFilterQuery·p0.50:   47.710 ms/op
                 executeFilterQuery·p0.90:   49.873 ms/op
                 executeFilterQuery·p0.95:   49.938 ms/op
                 executeFilterQuery·p0.99:   50.262 ms/op
                 executeFilterQuery·p0.999:  50.856 ms/op
                 executeFilterQuery·p0.9999: 50.856 ms/op
                 executeFilterQuery·p1.00:   50.856 ms/op

Iteration   4: 48.128 ±(99.9%) 0.240 ms/op
                 executeFilterQuery·p0.00:   46.793 ms/op
                 executeFilterQuery·p0.50:   47.710 ms/op
                 executeFilterQuery·p0.90:   49.952 ms/op
                 executeFilterQuery·p0.95:   50.437 ms/op
                 executeFilterQuery·p0.99:   51.354 ms/op
                 executeFilterQuery·p0.999:  52.036 ms/op
                 executeFilterQuery·p0.9999: 52.036 ms/op
                 executeFilterQuery·p1.00:   52.036 ms/op

Iteration   5: 48.206 ±(99.9%) 0.162 ms/op
                 executeFilterQuery·p0.00:   46.858 ms/op
                 executeFilterQuery·p0.50:   48.366 ms/op
                 executeFilterQuery·p0.90:   49.021 ms/op
                 executeFilterQuery·p0.95:   49.414 ms/op
                 executeFilterQuery·p0.99:   49.803 ms/op
                 executeFilterQuery·p0.999:  50.004 ms/op
                 executeFilterQuery·p0.9999: 50.004 ms/op
                 executeFilterQuery·p1.00:   50.004 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 2074
  mean =     47.919 ±(99.9%) 0.079 ms/op

  Histogram, ms/op:
    [45.000, 45.500) = 0 
    [45.500, 46.000) = 13 
    [46.000, 46.500) = 91 
    [46.500, 47.000) = 222 
    [47.000, 47.500) = 422 
    [47.500, 48.000) = 634 
    [48.000, 48.500) = 211 
    [48.500, 49.000) = 202 
    [49.000, 49.500) = 72 
    [49.500, 50.000) = 80 
    [50.000, 50.500) = 58 
    [50.500, 51.000) = 25 
    [51.000, 51.500) = 29 
    [51.500, 52.000) = 11 
    [52.000, 52.500) = 2 
    [52.500, 53.000) = 1 
    [53.000, 53.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     45.875 ms/op
     p(50.0000) =     47.645 ms/op
     p(90.0000) =     49.512 ms/op
     p(95.0000) =     50.135 ms/op
     p(99.0000) =     51.331 ms/op
     p(99.9000) =     52.521 ms/op
     p(99.9900) =     53.608 ms/op
     p(99.9990) =     53.608 ms/op
     p(99.9999) =     53.608 ms/op
    p(100.0000) =     53.608 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 34.44% complete, ETA 07:34:45
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

51.938 ±(99.9%) 4.999 ms/op
# Warmup Iteration   2: 50.957 ±(99.9%) 0.104 ms/op
# Warmup Iteration   3: 50.710 ±(99.9%) 0.133 ms/op
# Warmup Iteration   4: 50.330 ±(99.9%) 0.233 ms/op
# Warmup Iteration   5: 49.998 ±(99.9%) 0.196 ms/op
Iteration   1: 49.109 ±(99.9%) 0.277 ms/op
                 executeFilterQuery·p0.00:   47.579 ms/op
                 executeFilterQuery·p0.50:   48.759 ms/op
                 executeFilterQuery·p0.90:   51.184 ms/op
                 executeFilterQuery·p0.95:   51.511 ms/op
                 executeFilterQuery·p0.99:   53.976 ms/op
                 executeFilterQuery·p0.999:  54.395 ms/op
                 executeFilterQuery·p0.9999: 54.395 ms/op
                 executeFilterQuery·p1.00:   54.395 ms/op

Iteration   2: 49.862 ±(99.9%) 0.207 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   49.938 ms/op
                 executeFilterQuery·p0.90:   50.725 ms/op
                 executeFilterQuery·p0.95:   50.918 ms/op
                 executeFilterQuery·p0.99:   52.363 ms/op
                 executeFilterQuery·p0.999:  52.625 ms/op
                 executeFilterQuery·p0.9999: 52.625 ms/op
                 executeFilterQuery·p1.00:   52.625 ms/op

Iteration   3: 49.288 ±(99.9%) 0.216 ms/op
                 executeFilterQuery·p0.00:   47.645 ms/op
                 executeFilterQuery·p0.50:   49.218 ms/op
                 executeFilterQuery·p0.90:   50.659 ms/op
                 executeFilterQuery·p0.95:   50.846 ms/op
                 executeFilterQuery·p0.99:   50.985 ms/op
                 executeFilterQuery·p0.999:  52.429 ms/op
                 executeFilterQuery·p0.9999: 52.429 ms/op
                 executeFilterQuery·p1.00:   52.429 ms/op

Iteration   4: 49.456 ±(99.9%) 0.223 ms/op
                 executeFilterQuery·p0.00:   47.645 ms/op
                 executeFilterQuery·p0.50:   49.480 ms/op
                 executeFilterQuery·p0.90:   50.135 ms/op
                 executeFilterQuery·p0.95:   50.391 ms/op
                 executeFilterQuery·p0.99:   52.098 ms/op
                 executeFilterQuery·p0.999:  58.065 ms/op
                 executeFilterQuery·p0.9999: 58.065 ms/op
                 executeFilterQuery·p1.00:   58.065 ms/op

Iteration   5: 49.377 ±(99.9%) 0.157 ms/op
                 executeFilterQuery·p0.00:   48.169 ms/op
                 executeFilterQuery·p0.50:   49.349 ms/op
                 executeFilterQuery·p0.90:   49.853 ms/op
                 executeFilterQuery·p0.95:   49.938 ms/op
                 executeFilterQuery·p0.99:   54.219 ms/op
                 executeFilterQuery·p0.999:  54.395 ms/op
                 executeFilterQuery·p0.9999: 54.395 ms/op
                 executeFilterQuery·p1.00:   54.395 ms/op


# Run progress: 35.00% complete, ETA 07:26:53
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

51.380 ±(99.9%) 1.630 ms/op
# Warmup Iteration   2: 50.298 ±(99.9%) 0.151 ms/op
# Warmup Iteration   3: 49.866 ±(99.9%) 0.111 ms/op
# Warmup Iteration   4: 49.672 ±(99.9%) 0.273 ms/op
# Warmup Iteration   5: 49.540 ±(99.9%) 0.231 ms/op
Iteration   1: 49.185 ±(99.9%) 0.245 ms/op
                 executeFilterQuery·p0.00:   47.579 ms/op
                 executeFilterQuery·p0.50:   48.759 ms/op
                 executeFilterQuery·p0.90:   50.856 ms/op
                 executeFilterQuery·p0.95:   51.118 ms/op
                 executeFilterQuery·p0.99:   52.028 ms/op
                 executeFilterQuery·p0.999:  54.657 ms/op
                 executeFilterQuery·p0.9999: 54.657 ms/op
                 executeFilterQuery·p1.00:   54.657 ms/op

Iteration   2: 49.204 ±(99.9%) 0.260 ms/op
                 executeFilterQuery·p0.00:   47.579 ms/op
                 executeFilterQuery·p0.50:   49.152 ms/op
                 executeFilterQuery·p0.90:   50.266 ms/op
                 executeFilterQuery·p0.95:   50.584 ms/op
                 executeFilterQuery·p0.99:   53.269 ms/op
                 executeFilterQuery·p0.999:  57.999 ms/op
                 executeFilterQuery·p0.9999: 57.999 ms/op
                 executeFilterQuery·p1.00:   57.999 ms/op

Iteration   3: 49.930 ±(99.9%) 0.263 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   49.742 ms/op
                 executeFilterQuery·p0.90:   51.839 ms/op
                 executeFilterQuery·p0.95:   52.167 ms/op
                 executeFilterQuery·p0.99:   52.560 ms/op
                 executeFilterQuery·p0.999:  52.822 ms/op
                 executeFilterQuery·p0.9999: 52.822 ms/op
                 executeFilterQuery·p1.00:   52.822 ms/op

Iteration   4: 50.011 ±(99.9%) 0.295 ms/op
                 executeFilterQuery·p0.00:   48.234 ms/op
                 executeFilterQuery·p0.50:   49.676 ms/op
                 executeFilterQuery·p0.90:   51.773 ms/op
                 executeFilterQuery·p0.95:   52.167 ms/op
                 executeFilterQuery·p0.99:   55.443 ms/op
                 executeFilterQuery·p0.999:  58.393 ms/op
                 executeFilterQuery·p0.9999: 58.393 ms/op
                 executeFilterQuery·p1.00:   58.393 ms/op

Iteration   5: 48.781 ±(99.9%) 0.216 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   48.562 ms/op
                 executeFilterQuery·p0.90:   49.545 ms/op
                 executeFilterQuery·p0.95:   50.299 ms/op
                 executeFilterQuery·p0.99:   51.174 ms/op
                 executeFilterQuery·p0.999:  58.917 ms/op
                 executeFilterQuery·p0.9999: 58.917 ms/op
                 executeFilterQuery·p1.00:   58.917 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 2013
  mean =     49.418 ±(99.9%) 0.079 ms/op

  Histogram, ms/op:
    [40.000, 41.250) = 0 
    [41.250, 42.500) = 0 
    [42.500, 43.750) = 0 
    [43.750, 45.000) = 0 
    [45.000, 46.250) = 0 
    [46.250, 47.500) = 0 
    [47.500, 48.750) = 592 
    [48.750, 50.000) = 950 
    [50.000, 51.250) = 363 
    [51.250, 52.500) = 89 
    [52.500, 53.750) = 8 
    [53.750, 55.000) = 6 
    [55.000, 56.250) = 1 
    [56.250, 57.500) = 0 
    [57.500, 58.750) = 3 

  Percentiles, ms/op:
      p(0.0000) =     47.579 ms/op
     p(50.0000) =     49.283 ms/op
     p(90.0000) =     50.659 ms/op
     p(95.0000) =     51.380 ms/op
     p(99.0000) =     52.494 ms/op
     p(99.9000) =     58.388 ms/op
     p(99.9900) =     58.917 ms/op
     p(99.9990) =     58.917 ms/op
     p(99.9999) =     58.917 ms/op
    p(100.0000) =     58.917 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 35.56% complete, ETA 07:19:13
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

52.174 ±(99.9%) 4.949 ms/op
# Warmup Iteration   2: 51.471 ±(99.9%) 0.225 ms/op
# Warmup Iteration   3: 51.639 ±(99.9%) 0.188 ms/op
# Warmup Iteration   4: 50.481 ±(99.9%) 0.432 ms/op
# Warmup Iteration   5: 50.033 ±(99.9%) 0.231 ms/op
Iteration   1: 50.357 ±(99.9%) 0.216 ms/op
                 executeFilterQuery·p0.00:   47.907 ms/op
                 executeFilterQuery·p0.50:   50.594 ms/op
                 executeFilterQuery·p0.90:   51.380 ms/op
                 executeFilterQuery·p0.95:   51.577 ms/op
                 executeFilterQuery·p0.99:   52.237 ms/op
                 executeFilterQuery·p0.999:  52.494 ms/op
                 executeFilterQuery·p0.9999: 52.494 ms/op
                 executeFilterQuery·p1.00:   52.494 ms/op

Iteration   2: 49.733 ±(99.9%) 0.330 ms/op
                 executeFilterQuery·p0.00:   47.710 ms/op
                 executeFilterQuery·p0.50:   49.545 ms/op
                 executeFilterQuery·p0.90:   51.708 ms/op
                 executeFilterQuery·p0.95:   52.494 ms/op
                 executeFilterQuery·p0.99:   54.393 ms/op
                 executeFilterQuery·p0.999:  55.116 ms/op
                 executeFilterQuery·p0.9999: 55.116 ms/op
                 executeFilterQuery·p1.00:   55.116 ms/op

Iteration   3: 49.164 ±(99.9%) 0.177 ms/op
                 executeFilterQuery·p0.00:   47.645 ms/op
                 executeFilterQuery·p0.50:   49.349 ms/op
                 executeFilterQuery·p0.90:   50.312 ms/op
                 executeFilterQuery·p0.95:   50.528 ms/op
                 executeFilterQuery·p0.99:   50.786 ms/op
                 executeFilterQuery·p0.999:  50.856 ms/op
                 executeFilterQuery·p0.9999: 50.856 ms/op
                 executeFilterQuery·p1.00:   50.856 ms/op

Iteration   4: 49.562 ±(99.9%) 0.256 ms/op
                 executeFilterQuery·p0.00:   47.710 ms/op
                 executeFilterQuery·p0.50:   49.611 ms/op
                 executeFilterQuery·p0.90:   50.594 ms/op
                 executeFilterQuery·p0.95:   50.856 ms/op
                 executeFilterQuery·p0.99:   53.536 ms/op
                 executeFilterQuery·p0.999:  53.608 ms/op
                 executeFilterQuery·p0.9999: 53.608 ms/op
                 executeFilterQuery·p1.00:   53.608 ms/op

Iteration   5: 50.170 ±(99.9%) 0.140 ms/op
                 executeFilterQuery·p0.00:   48.497 ms/op
                 executeFilterQuery·p0.50:   50.201 ms/op
                 executeFilterQuery·p0.90:   50.659 ms/op
                 executeFilterQuery·p0.95:   50.790 ms/op
                 executeFilterQuery·p0.99:   53.218 ms/op
                 executeFilterQuery·p0.999:  53.477 ms/op
                 executeFilterQuery·p0.9999: 53.477 ms/op
                 executeFilterQuery·p1.00:   53.477 ms/op


# Run progress: 36.11% complete, ETA 07:11:44
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

50.684 ±(99.9%) 1.655 ms/op
# Warmup Iteration   2: 50.373 ±(99.9%) 0.204 ms/op
# Warmup Iteration   3: 49.897 ±(99.9%) 0.179 ms/op
# Warmup Iteration   4: 50.054 ±(99.9%) 0.176 ms/op
# Warmup Iteration   5: 49.394 ±(99.9%) 0.101 ms/op
Iteration   1: 49.800 ±(99.9%) 0.256 ms/op
                 executeFilterQuery·p0.00:   47.907 ms/op
                 executeFilterQuery·p0.50:   49.480 ms/op
                 executeFilterQuery·p0.90:   51.839 ms/op
                 executeFilterQuery·p0.95:   52.167 ms/op
                 executeFilterQuery·p0.99:   52.888 ms/op
                 executeFilterQuery·p0.999:  54.854 ms/op
                 executeFilterQuery·p0.9999: 54.854 ms/op
                 executeFilterQuery·p1.00:   54.854 ms/op

Iteration   2: 49.198 ±(99.9%) 0.322 ms/op
                 executeFilterQuery·p0.00:   47.514 ms/op
                 executeFilterQuery·p0.50:   48.890 ms/op
                 executeFilterQuery·p0.90:   51.118 ms/op
                 executeFilterQuery·p0.95:   51.970 ms/op
                 executeFilterQuery·p0.99:   53.523 ms/op
                 executeFilterQuery·p0.999:  54.591 ms/op
                 executeFilterQuery·p0.9999: 54.591 ms/op
                 executeFilterQuery·p1.00:   54.591 ms/op

Iteration   3: 48.776 ±(99.9%) 0.151 ms/op
                 executeFilterQuery·p0.00:   47.645 ms/op
                 executeFilterQuery·p0.50:   48.824 ms/op
                 executeFilterQuery·p0.90:   49.480 ms/op
                 executeFilterQuery·p0.95:   49.922 ms/op
                 executeFilterQuery·p0.99:   50.515 ms/op
                 executeFilterQuery·p0.999:  50.987 ms/op
                 executeFilterQuery·p0.9999: 50.987 ms/op
                 executeFilterQuery·p1.00:   50.987 ms/op

Iteration   4: 48.534 ±(99.9%) 0.185 ms/op
                 executeFilterQuery·p0.00:   47.579 ms/op
                 executeFilterQuery·p0.50:   48.300 ms/op
                 executeFilterQuery·p0.90:   49.414 ms/op
                 executeFilterQuery·p0.95:   50.004 ms/op
                 executeFilterQuery·p0.99:   52.081 ms/op
                 executeFilterQuery·p0.999:  54.067 ms/op
                 executeFilterQuery·p0.9999: 54.067 ms/op
                 executeFilterQuery·p1.00:   54.067 ms/op

Iteration   5: 48.495 ±(99.9%) 0.171 ms/op
                 executeFilterQuery·p0.00:   47.448 ms/op
                 executeFilterQuery·p0.50:   48.234 ms/op
                 executeFilterQuery·p0.90:   49.899 ms/op
                 executeFilterQuery·p0.95:   50.070 ms/op
                 executeFilterQuery·p0.99:   50.262 ms/op
                 executeFilterQuery·p0.999:  50.594 ms/op
                 executeFilterQuery·p0.9999: 50.594 ms/op
                 executeFilterQuery·p1.00:   50.594 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 2013
  mean =     49.371 ±(99.9%) 0.085 ms/op

  Histogram, ms/op:
    [47.000, 47.500) = 1 
    [47.500, 48.000) = 231 
    [48.000, 48.500) = 327 
    [48.500, 49.000) = 298 
    [49.000, 49.500) = 289 
    [49.500, 50.000) = 280 
    [50.000, 50.500) = 271 
    [50.500, 51.000) = 181 
    [51.000, 51.500) = 48 
    [51.500, 52.000) = 31 
    [52.000, 52.500) = 30 
    [52.500, 53.000) = 8 
    [53.000, 53.500) = 7 
    [53.500, 54.000) = 4 
    [54.000, 54.500) = 4 
    [54.500, 55.000) = 2 
    [55.000, 55.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     47.448 ms/op
     p(50.0000) =     49.283 ms/op
     p(90.0000) =     50.725 ms/op
     p(95.0000) =     51.315 ms/op
     p(99.0000) =     52.878 ms/op
     p(99.9000) =     54.850 ms/op
     p(99.9900) =     55.116 ms/op
     p(99.9990) =     55.116 ms/op
     p(99.9999) =     55.116 ms/op
    p(100.0000) =     55.116 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 36.67% complete, ETA 07:04:25
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

571.066 ±(99.9%) 460.963 ms/op
# Warmup Iteration   2: 450.272 ±(99.9%) 7.405 ms/op
# Warmup Iteration   3: 449.292 ±(99.9%) 7.159 ms/op
# Warmup Iteration   4: 454.224 ±(99.9%) 4.744 ms/op
# Warmup Iteration   5: 476.103 ±(99.9%) 6.841 ms/op
Iteration   1: 464.662 ±(99.9%) 9.026 ms/op
                 executeFilterQuery·p0.00:   433.586 ms/op
                 executeFilterQuery·p0.50:   467.665 ms/op
                 executeFilterQuery·p0.90:   473.117 ms/op
                 executeFilterQuery·p0.95:   473.432 ms/op
                 executeFilterQuery·p0.99:   473.432 ms/op
                 executeFilterQuery·p0.999:  473.432 ms/op
                 executeFilterQuery·p0.9999: 473.432 ms/op
                 executeFilterQuery·p1.00:   473.432 ms/op

Iteration   2: 440.789 ±(99.9%) 4.773 ms/op
                 executeFilterQuery·p0.00:   432.013 ms/op
                 executeFilterQuery·p0.50:   439.878 ms/op
                 executeFilterQuery·p0.90:   450.888 ms/op
                 executeFilterQuery·p0.95:   451.307 ms/op
                 executeFilterQuery·p0.99:   451.412 ms/op
                 executeFilterQuery·p0.999:  451.412 ms/op
                 executeFilterQuery·p0.9999: 451.412 ms/op
                 executeFilterQuery·p1.00:   451.412 ms/op

Iteration   3: 442.704 ±(99.9%) 5.756 ms/op
                 executeFilterQuery·p0.00:   434.110 ms/op
                 executeFilterQuery·p0.50:   442.499 ms/op
                 executeFilterQuery·p0.90:   457.179 ms/op
                 executeFilterQuery·p0.95:   459.067 ms/op
                 executeFilterQuery·p0.99:   459.276 ms/op
                 executeFilterQuery·p0.999:  459.276 ms/op
                 executeFilterQuery·p0.9999: 459.276 ms/op
                 executeFilterQuery·p1.00:   459.276 ms/op

Iteration   4: 448.107 ±(99.9%) 4.575 ms/op
                 executeFilterQuery·p0.00:   437.256 ms/op
                 executeFilterQuery·p0.50:   449.315 ms/op
                 executeFilterQuery·p0.90:   456.655 ms/op
                 executeFilterQuery·p0.95:   459.591 ms/op
                 executeFilterQuery·p0.99:   460.325 ms/op
                 executeFilterQuery·p0.999:  460.325 ms/op
                 executeFilterQuery·p0.9999: 460.325 ms/op
                 executeFilterQuery·p1.00:   460.325 ms/op

Iteration   5: 451.138 ±(99.9%) 4.423 ms/op
                 executeFilterQuery·p0.00:   439.878 ms/op
                 executeFilterQuery·p0.50:   450.888 ms/op
                 executeFilterQuery·p0.90:   458.542 ms/op
                 executeFilterQuery·p0.95:   461.688 ms/op
                 executeFilterQuery·p0.99:   462.422 ms/op
                 executeFilterQuery·p0.999:  462.422 ms/op
                 executeFilterQuery·p0.9999: 462.422 ms/op
                 executeFilterQuery·p1.00:   462.422 ms/op


# Run progress: 37.22% complete, ETA 06:57:20
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

457.918 ±(99.9%) 32.913 ms/op
# Warmup Iteration   2: 447.354 ±(99.9%) 5.365 ms/op
# Warmup Iteration   3: 447.902 ±(99.9%) 4.247 ms/op
# Warmup Iteration   4: 450.044 ±(99.9%) 7.926 ms/op
# Warmup Iteration   5: 458.657 ±(99.9%) 8.638 ms/op
Iteration   1: 461.826 ±(99.9%) 11.081 ms/op
                 executeFilterQuery·p0.00:   437.780 ms/op
                 executeFilterQuery·p0.50:   462.684 ms/op
                 executeFilterQuery·p0.90:   479.094 ms/op
                 executeFilterQuery·p0.95:   489.528 ms/op
                 executeFilterQuery·p0.99:   491.258 ms/op
                 executeFilterQuery·p0.999:  491.258 ms/op
                 executeFilterQuery·p0.9999: 491.258 ms/op
                 executeFilterQuery·p1.00:   491.258 ms/op

Iteration   2: 450.569 ±(99.9%) 5.805 ms/op
                 executeFilterQuery·p0.00:   439.878 ms/op
                 executeFilterQuery·p0.50:   449.839 ms/op
                 executeFilterQuery·p0.90:   460.115 ms/op
                 executeFilterQuery·p0.95:   460.744 ms/op
                 executeFilterQuery·p0.99:   460.849 ms/op
                 executeFilterQuery·p0.999:  460.849 ms/op
                 executeFilterQuery·p0.9999: 460.849 ms/op
                 executeFilterQuery·p1.00:   460.849 ms/op

Iteration   3: 449.155 ±(99.9%) 4.876 ms/op
                 executeFilterQuery·p0.00:   438.305 ms/op
                 executeFilterQuery·p0.50:   449.839 ms/op
                 executeFilterQuery·p0.90:   458.542 ms/op
                 executeFilterQuery·p0.95:   460.010 ms/op
                 executeFilterQuery·p0.99:   460.325 ms/op
                 executeFilterQuery·p0.999:  460.325 ms/op
                 executeFilterQuery·p0.9999: 460.325 ms/op
                 executeFilterQuery·p1.00:   460.325 ms/op

Iteration   4: 448.129 ±(99.9%) 3.221 ms/op
                 executeFilterQuery·p0.00:   440.402 ms/op
                 executeFilterQuery·p0.50:   448.266 ms/op
                 executeFilterQuery·p0.90:   453.509 ms/op
                 executeFilterQuery·p0.95:   457.703 ms/op
                 executeFilterQuery·p0.99:   458.228 ms/op
                 executeFilterQuery·p0.999:  458.228 ms/op
                 executeFilterQuery·p0.9999: 458.228 ms/op
                 executeFilterQuery·p1.00:   458.228 ms/op

Iteration   5: 449.976 ±(99.9%) 3.792 ms/op
                 executeFilterQuery·p0.00:   441.450 ms/op
                 executeFilterQuery·p0.50:   450.363 ms/op
                 executeFilterQuery·p0.90:   455.606 ms/op
                 executeFilterQuery·p0.95:   459.801 ms/op
                 executeFilterQuery·p0.99:   460.849 ms/op
                 executeFilterQuery·p0.999:  460.849 ms/op
                 executeFilterQuery·p0.9999: 460.849 ms/op
                 executeFilterQuery·p1.00:   460.849 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 228
  mean =    450.596 ±(99.9%) 2.264 ms/op

  Histogram, ms/op:
    [430.000, 435.000) = 10 
    [435.000, 440.000) = 20 
    [440.000, 445.000) = 40 
    [445.000, 450.000) = 58 
    [450.000, 455.000) = 35 
    [455.000, 460.000) = 28 
    [460.000, 465.000) = 11 
    [465.000, 470.000) = 8 
    [470.000, 475.000) = 15 
    [475.000, 480.000) = 2 
    [480.000, 485.000) = 0 
    [485.000, 490.000) = 0 
    [490.000, 495.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    432.013 ms/op
     p(50.0000) =    449.839 ms/op
     p(90.0000) =    465.568 ms/op
     p(95.0000) =    471.859 ms/op
     p(99.0000) =    479.115 ms/op
     p(99.9000) =    491.258 ms/op
     p(99.9900) =    491.258 ms/op
     p(99.9990) =    491.258 ms/op
     p(99.9999) =    491.258 ms/op
    p(100.0000) =    491.258 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 37.78% complete, ETA 06:50:26
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

680.701 ±(99.9%) 838.686 ms/op
# Warmup Iteration   2: 454.510 ±(99.9%) 7.446 ms/op
# Warmup Iteration   3: 454.439 ±(99.9%) 3.382 ms/op
# Warmup Iteration   4: 453.199 ±(99.9%) 5.695 ms/op
# Warmup Iteration   5: 475.454 ±(99.9%) 8.174 ms/op
Iteration   1: 481.122 ±(99.9%) 11.619 ms/op
                 executeFilterQuery·p0.00:   439.878 ms/op
                 executeFilterQuery·p0.50:   482.869 ms/op
                 executeFilterQuery·p0.90:   494.718 ms/op
                 executeFilterQuery·p0.95:   496.815 ms/op
                 executeFilterQuery·p0.99:   497.025 ms/op
                 executeFilterQuery·p0.999:  497.025 ms/op
                 executeFilterQuery·p0.9999: 497.025 ms/op
                 executeFilterQuery·p1.00:   497.025 ms/op

Iteration   2: 456.655 ±(99.9%) 5.229 ms/op
                 executeFilterQuery·p0.00:   446.693 ms/op
                 executeFilterQuery·p0.50:   455.868 ms/op
                 executeFilterQuery·p0.90:   460.849 ms/op
                 executeFilterQuery·p0.95:   476.001 ms/op
                 executeFilterQuery·p0.99:   478.675 ms/op
                 executeFilterQuery·p0.999:  478.675 ms/op
                 executeFilterQuery·p0.9999: 478.675 ms/op
                 executeFilterQuery·p1.00:   478.675 ms/op

Iteration   3: 459.681 ±(99.9%) 6.649 ms/op
                 executeFilterQuery·p0.00:   449.315 ms/op
                 executeFilterQuery·p0.50:   459.538 ms/op
                 executeFilterQuery·p0.90:   467.141 ms/op
                 executeFilterQuery·p0.95:   486.094 ms/op
                 executeFilterQuery·p0.99:   489.161 ms/op
                 executeFilterQuery·p0.999:  489.161 ms/op
                 executeFilterQuery·p0.9999: 489.161 ms/op
                 executeFilterQuery·p1.00:   489.161 ms/op

Iteration   4: 456.345 ±(99.9%) 3.956 ms/op
                 executeFilterQuery·p0.00:   449.315 ms/op
                 executeFilterQuery·p0.50:   455.344 ms/op
                 executeFilterQuery·p0.90:   463.890 ms/op
                 executeFilterQuery·p0.95:   465.856 ms/op
                 executeFilterQuery·p0.99:   466.092 ms/op
                 executeFilterQuery·p0.999:  466.092 ms/op
                 executeFilterQuery·p0.9999: 466.092 ms/op
                 executeFilterQuery·p1.00:   466.092 ms/op

Iteration   5: 456.059 ±(99.9%) 3.271 ms/op
                 executeFilterQuery·p0.00:   448.791 ms/op
                 executeFilterQuery·p0.50:   456.131 ms/op
                 executeFilterQuery·p0.90:   462.107 ms/op
                 executeFilterQuery·p0.95:   463.313 ms/op
                 executeFilterQuery·p0.99:   463.471 ms/op
                 executeFilterQuery·p0.999:  463.471 ms/op
                 executeFilterQuery·p0.9999: 463.471 ms/op
                 executeFilterQuery·p1.00:   463.471 ms/op


# Run progress: 38.33% complete, ETA 06:43:37
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

488.137 ±(99.9%) 69.765 ms/op
# Warmup Iteration   2: 452.005 ±(99.9%) 7.857 ms/op
# Warmup Iteration   3: 454.153 ±(99.9%) 6.858 ms/op
# Warmup Iteration   4: 460.825 ±(99.9%) 5.878 ms/op
# Warmup Iteration   5: 469.071 ±(99.9%) 7.196 ms/op
Iteration   1: 478.350 ±(99.9%) 11.596 ms/op
                 executeFilterQuery·p0.00:   452.461 ms/op
                 executeFilterQuery·p0.50:   480.772 ms/op
                 executeFilterQuery·p0.90:   495.872 ms/op
                 executeFilterQuery·p0.95:   497.392 ms/op
                 executeFilterQuery·p0.99:   497.549 ms/op
                 executeFilterQuery·p0.999:  497.549 ms/op
                 executeFilterQuery·p0.9999: 497.549 ms/op
                 executeFilterQuery·p1.00:   497.549 ms/op

Iteration   2: 462.708 ±(99.9%) 2.614 ms/op
                 executeFilterQuery·p0.00:   457.703 ms/op
                 executeFilterQuery·p0.50:   462.160 ms/op
                 executeFilterQuery·p0.90:   467.508 ms/op
                 executeFilterQuery·p0.95:   467.665 ms/op
                 executeFilterQuery·p0.99:   467.665 ms/op
                 executeFilterQuery·p0.999:  467.665 ms/op
                 executeFilterQuery·p0.9999: 467.665 ms/op
                 executeFilterQuery·p1.00:   467.665 ms/op

Iteration   3: 460.039 ±(99.9%) 4.980 ms/op
                 executeFilterQuery·p0.00:   451.412 ms/op
                 executeFilterQuery·p0.50:   461.111 ms/op
                 executeFilterQuery·p0.90:   465.935 ms/op
                 executeFilterQuery·p0.95:   475.005 ms/op
                 executeFilterQuery·p0.99:   476.578 ms/op
                 executeFilterQuery·p0.999:  476.578 ms/op
                 executeFilterQuery·p0.9999: 476.578 ms/op
                 executeFilterQuery·p1.00:   476.578 ms/op

Iteration   4: 465.115 ±(99.9%) 4.559 ms/op
                 executeFilterQuery·p0.00:   452.461 ms/op
                 executeFilterQuery·p0.50:   463.733 ms/op
                 executeFilterQuery·p0.90:   471.859 ms/op
                 executeFilterQuery·p0.95:   473.642 ms/op
                 executeFilterQuery·p0.99:   473.956 ms/op
                 executeFilterQuery·p0.999:  473.956 ms/op
                 executeFilterQuery·p0.9999: 473.956 ms/op
                 executeFilterQuery·p1.00:   473.956 ms/op

Iteration   5: 458.633 ±(99.9%) 7.027 ms/op
                 executeFilterQuery·p0.00:   447.742 ms/op
                 executeFilterQuery·p0.50:   457.441 ms/op
                 executeFilterQuery·p0.90:   470.863 ms/op
                 executeFilterQuery·p0.95:   474.900 ms/op
                 executeFilterQuery·p0.99:   475.529 ms/op
                 executeFilterQuery·p0.999:  475.529 ms/op
                 executeFilterQuery·p0.9999: 475.529 ms/op
                 executeFilterQuery·p1.00:   475.529 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 218
  mean =    463.321 ±(99.9%) 2.641 ms/op

  Histogram, ms/op:
    [430.000, 435.000) = 0 
    [435.000, 440.000) = 1 
    [440.000, 445.000) = 0 
    [445.000, 450.000) = 13 
    [450.000, 455.000) = 35 
    [455.000, 460.000) = 50 
    [460.000, 465.000) = 55 
    [465.000, 470.000) = 21 
    [470.000, 475.000) = 9 
    [475.000, 480.000) = 7 
    [480.000, 485.000) = 8 
    [485.000, 490.000) = 8 
    [490.000, 495.000) = 7 

  Percentiles, ms/op:
      p(0.0000) =    439.878 ms/op
     p(50.0000) =    460.849 ms/op
     p(90.0000) =    482.869 ms/op
     p(95.0000) =    490.734 ms/op
     p(99.0000) =    496.826 ms/op
     p(99.9000) =    497.549 ms/op
     p(99.9900) =    497.549 ms/op
     p(99.9990) =    497.549 ms/op
     p(99.9999) =    497.549 ms/op
    p(100.0000) =    497.549 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 38.89% complete, ETA 06:36:59
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

732.318 ±(99.9%) 889.295 ms/op
# Warmup Iteration   2: 485.466 ±(99.9%) 8.936 ms/op
# Warmup Iteration   3: 488.986 ±(99.9%) 7.152 ms/op
# Warmup Iteration   4: 492.356 ±(99.9%) 4.199 ms/op
# Warmup Iteration   5: 488.212 ±(99.9%) 6.781 ms/op
Iteration   1: 490.559 ±(99.9%) 6.585 ms/op
                 executeFilterQuery·p0.00:   467.665 ms/op
                 executeFilterQuery·p0.50:   491.258 ms/op
                 executeFilterQuery·p0.90:   499.751 ms/op
                 executeFilterQuery·p0.95:   507.773 ms/op
                 executeFilterQuery·p0.99:   508.559 ms/op
                 executeFilterQuery·p0.999:  508.559 ms/op
                 executeFilterQuery·p0.9999: 508.559 ms/op
                 executeFilterQuery·p1.00:   508.559 ms/op

Iteration   2: 471.955 ±(99.9%) 15.715 ms/op
                 executeFilterQuery·p0.00:   460.325 ms/op
                 executeFilterQuery·p0.50:   466.092 ms/op
                 executeFilterQuery·p0.90:   483.970 ms/op
                 executeFilterQuery·p0.95:   541.485 ms/op
                 executeFilterQuery·p0.99:   551.551 ms/op
                 executeFilterQuery·p0.999:  551.551 ms/op
                 executeFilterQuery·p0.9999: 551.551 ms/op
                 executeFilterQuery·p1.00:   551.551 ms/op

Iteration   3: 463.447 ±(99.9%) 1.589 ms/op
                 executeFilterQuery·p0.00:   459.276 ms/op
                 executeFilterQuery·p0.50:   463.471 ms/op
                 executeFilterQuery·p0.90:   466.302 ms/op
                 executeFilterQuery·p0.95:   467.508 ms/op
                 executeFilterQuery·p0.99:   467.665 ms/op
                 executeFilterQuery·p0.999:  467.665 ms/op
                 executeFilterQuery·p0.9999: 467.665 ms/op
                 executeFilterQuery·p1.00:   467.665 ms/op

Iteration   4: 470.787 ±(99.9%) 14.078 ms/op
                 executeFilterQuery·p0.00:   457.703 ms/op
                 executeFilterQuery·p0.50:   466.616 ms/op
                 executeFilterQuery·p0.90:   481.716 ms/op
                 executeFilterQuery·p0.95:   534.931 ms/op
                 executeFilterQuery·p0.99:   544.211 ms/op
                 executeFilterQuery·p0.999:  544.211 ms/op
                 executeFilterQuery·p0.9999: 544.211 ms/op
                 executeFilterQuery·p1.00:   544.211 ms/op

Iteration   5: 478.800 ±(99.9%) 10.347 ms/op
                 executeFilterQuery·p0.00:   461.898 ms/op
                 executeFilterQuery·p0.50:   481.821 ms/op
                 executeFilterQuery·p0.90:   492.936 ms/op
                 executeFilterQuery·p0.95:   496.186 ms/op
                 executeFilterQuery·p0.99:   496.501 ms/op
                 executeFilterQuery·p0.999:  496.501 ms/op
                 executeFilterQuery·p0.9999: 496.501 ms/op
                 executeFilterQuery·p1.00:   496.501 ms/op


# Run progress: 39.44% complete, ETA 06:30:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

539.548 ±(99.9%) 104.703 ms/op
# Warmup Iteration   2: 495.627 ±(99.9%) 9.165 ms/op
# Warmup Iteration   3: 501.403 ±(99.9%) 1.870 ms/op
# Warmup Iteration   4: 499.017 ±(99.9%) 3.104 ms/op
# Warmup Iteration   5: 499.096 ±(99.9%) 4.723 ms/op
Iteration   1: 489.685 ±(99.9%) 8.285 ms/op
                 executeFilterQuery·p0.00:   467.141 ms/op
                 executeFilterQuery·p0.50:   491.782 ms/op
                 executeFilterQuery·p0.90:   499.017 ms/op
                 executeFilterQuery·p0.95:   501.481 ms/op
                 executeFilterQuery·p0.99:   501.744 ms/op
                 executeFilterQuery·p0.999:  501.744 ms/op
                 executeFilterQuery·p0.9999: 501.744 ms/op
                 executeFilterQuery·p1.00:   501.744 ms/op

Iteration   2: 487.288 ±(99.9%) 8.453 ms/op
                 executeFilterQuery·p0.00:   462.946 ms/op
                 executeFilterQuery·p0.50:   491.258 ms/op
                 executeFilterQuery·p0.90:   497.025 ms/op
                 executeFilterQuery·p0.95:   498.912 ms/op
                 executeFilterQuery·p0.99:   499.122 ms/op
                 executeFilterQuery·p0.999:  499.122 ms/op
                 executeFilterQuery·p0.9999: 499.122 ms/op
                 executeFilterQuery·p1.00:   499.122 ms/op

Iteration   3: 491.333 ±(99.9%) 5.104 ms/op
                 executeFilterQuery·p0.00:   472.908 ms/op
                 executeFilterQuery·p0.50:   492.306 ms/op
                 executeFilterQuery·p0.90:   496.815 ms/op
                 executeFilterQuery·p0.95:   498.912 ms/op
                 executeFilterQuery·p0.99:   499.122 ms/op
                 executeFilterQuery·p0.999:  499.122 ms/op
                 executeFilterQuery·p0.9999: 499.122 ms/op
                 executeFilterQuery·p1.00:   499.122 ms/op

Iteration   4: 492.981 ±(99.9%) 3.033 ms/op
                 executeFilterQuery·p0.00:   483.918 ms/op
                 executeFilterQuery·p0.50:   493.879 ms/op
                 executeFilterQuery·p0.90:   496.396 ms/op
                 executeFilterQuery·p0.95:   499.804 ms/op
                 executeFilterQuery·p0.99:   500.171 ms/op
                 executeFilterQuery·p0.999:  500.171 ms/op
                 executeFilterQuery·p0.9999: 500.171 ms/op
                 executeFilterQuery·p1.00:   500.171 ms/op

Iteration   5: 491.857 ±(99.9%) 3.261 ms/op
                 executeFilterQuery·p0.00:   478.151 ms/op
                 executeFilterQuery·p0.50:   493.355 ms/op
                 executeFilterQuery·p0.90:   493.879 ms/op
                 executeFilterQuery·p0.95:   494.351 ms/op
                 executeFilterQuery·p0.99:   494.404 ms/op
                 executeFilterQuery·p0.999:  494.404 ms/op
                 executeFilterQuery·p0.9999: 494.404 ms/op
                 executeFilterQuery·p1.00:   494.404 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 213
  mean =    482.670 ±(99.9%) 3.374 ms/op

  Histogram, ms/op:
    [450.000, 460.000) = 2 
    [460.000, 470.000) = 64 
    [470.000, 480.000) = 16 
    [480.000, 490.000) = 35 
    [490.000, 500.000) = 90 
    [500.000, 510.000) = 4 
    [510.000, 520.000) = 0 
    [520.000, 530.000) = 0 
    [530.000, 540.000) = 0 
    [540.000, 550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    457.703 ms/op
     p(50.0000) =    488.636 ms/op
     p(90.0000) =    495.976 ms/op
     p(95.0000) =    498.231 ms/op
     p(99.0000) =    539.220 ms/op
     p(99.9000) =    551.551 ms/op
     p(99.9900) =    551.551 ms/op
     p(99.9990) =    551.551 ms/op
     p(99.9999) =    551.551 ms/op
    p(100.0000) =    551.551 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 40.00% complete, ETA 06:24:08
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1533.468 ±(99.9%) 3660.503 ms/op
# Warmup Iteration   2: 884.736 ±(99.9%) 16.179 ms/op
# Warmup Iteration   3: 937.904 ±(99.9%) 38.572 ms/op
# Warmup Iteration   4: 947.722 ±(99.9%) 15.817 ms/op
# Warmup Iteration   5: 936.378 ±(99.9%) 16.278 ms/op
Iteration   1: 923.891 ±(99.9%) 41.902 ms/op
                 executeFilterQuery·p0.00:   860.881 ms/op
                 executeFilterQuery·p0.50:   929.038 ms/op
                 executeFilterQuery·p0.90:   958.189 ms/op
                 executeFilterQuery·p0.95:   959.447 ms/op
                 executeFilterQuery·p0.99:   959.447 ms/op
                 executeFilterQuery·p0.999:  959.447 ms/op
                 executeFilterQuery·p0.9999: 959.447 ms/op
                 executeFilterQuery·p1.00:   959.447 ms/op

Iteration   2: 881.153 ±(99.9%) 16.581 ms/op
                 executeFilterQuery·p0.00:   860.881 ms/op
                 executeFilterQuery·p0.50:   879.231 ms/op
                 executeFilterQuery·p0.90:   903.873 ms/op
                 executeFilterQuery·p0.95:   903.873 ms/op
                 executeFilterQuery·p0.99:   903.873 ms/op
                 executeFilterQuery·p0.999:  903.873 ms/op
                 executeFilterQuery·p0.9999: 903.873 ms/op
                 executeFilterQuery·p1.00:   903.873 ms/op

Iteration   3: 879.843 ±(99.9%) 15.297 ms/op
                 executeFilterQuery·p0.00:   862.978 ms/op
                 executeFilterQuery·p0.50:   878.182 ms/op
                 executeFilterQuery·p0.90:   895.903 ms/op
                 executeFilterQuery·p0.95:   896.532 ms/op
                 executeFilterQuery·p0.99:   896.532 ms/op
                 executeFilterQuery·p0.999:  896.532 ms/op
                 executeFilterQuery·p0.9999: 896.532 ms/op
                 executeFilterQuery·p1.00:   896.532 ms/op

Iteration   4: 870.405 ±(99.9%) 10.888 ms/op
                 executeFilterQuery·p0.00:   858.784 ms/op
                 executeFilterQuery·p0.50:   870.318 ms/op
                 executeFilterQuery·p0.90:   885.313 ms/op
                 executeFilterQuery·p0.95:   888.144 ms/op
                 executeFilterQuery·p0.99:   888.144 ms/op
                 executeFilterQuery·p0.999:  888.144 ms/op
                 executeFilterQuery·p0.9999: 888.144 ms/op
                 executeFilterQuery·p1.00:   888.144 ms/op

Iteration   5: 884.736 ±(99.9%) 19.472 ms/op
                 executeFilterQuery·p0.00:   864.027 ms/op
                 executeFilterQuery·p0.50:   887.620 ms/op
                 executeFilterQuery·p0.90:   901.146 ms/op
                 executeFilterQuery·p0.95:   901.775 ms/op
                 executeFilterQuery·p0.99:   901.775 ms/op
                 executeFilterQuery·p0.999:  901.775 ms/op
                 executeFilterQuery·p0.9999: 901.775 ms/op
                 executeFilterQuery·p1.00:   901.775 ms/op


# Run progress: 40.56% complete, ETA 06:17:59
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

912.738 ±(99.9%) 68.489 ms/op
# Warmup Iteration   2: 887.969 ±(99.9%) 25.495 ms/op
# Warmup Iteration   3: 908.925 ±(99.9%) 25.647 ms/op
# Warmup Iteration   4: 920.459 ±(99.9%) 22.201 ms/op
# Warmup Iteration   5: 922.175 ±(99.9%) 21.949 ms/op
Iteration   1: 947.817 ±(99.9%) 46.782 ms/op
                 executeFilterQuery·p0.00:   886.047 ms/op
                 executeFilterQuery·p0.50:   959.447 ms/op
                 executeFilterQuery·p0.90:   978.321 ms/op
                 executeFilterQuery·p0.95:   978.321 ms/op
                 executeFilterQuery·p0.99:   978.321 ms/op
                 executeFilterQuery·p0.999:  978.321 ms/op
                 executeFilterQuery·p0.9999: 978.321 ms/op
                 executeFilterQuery·p1.00:   978.321 ms/op

Iteration   2: 904.659 ±(99.9%) 17.229 ms/op
                 executeFilterQuery·p0.00:   882.901 ms/op
                 executeFilterQuery·p0.50:   904.921 ms/op
                 executeFilterQuery·p0.90:   920.440 ms/op
                 executeFilterQuery·p0.95:   921.698 ms/op
                 executeFilterQuery·p0.99:   921.698 ms/op
                 executeFilterQuery·p0.999:  921.698 ms/op
                 executeFilterQuery·p0.9999: 921.698 ms/op
                 executeFilterQuery·p1.00:   921.698 ms/op

Iteration   3: 912.642 ±(99.9%) 9.691 ms/op
                 executeFilterQuery·p0.00:   896.532 ms/op
                 executeFilterQuery·p0.50:   916.455 ms/op
                 executeFilterQuery·p0.90:   919.391 ms/op
                 executeFilterQuery·p0.95:   919.601 ms/op
                 executeFilterQuery·p0.99:   919.601 ms/op
                 executeFilterQuery·p0.999:  919.601 ms/op
                 executeFilterQuery·p0.9999: 919.601 ms/op
                 executeFilterQuery·p1.00:   919.601 ms/op

Iteration   4: 912.166 ±(99.9%) 13.267 ms/op
                 executeFilterQuery·p0.00:   888.144 ms/op
                 executeFilterQuery·p0.50:   916.455 ms/op
                 executeFilterQuery·p0.90:   921.698 ms/op
                 executeFilterQuery·p0.95:   922.747 ms/op
                 executeFilterQuery·p0.99:   922.747 ms/op
                 executeFilterQuery·p0.999:  922.747 ms/op
                 executeFilterQuery·p0.9999: 922.747 ms/op
                 executeFilterQuery·p1.00:   922.747 ms/op

Iteration   5: 916.741 ±(99.9%) 6.488 ms/op
                 executeFilterQuery·p0.00:   909.115 ms/op
                 executeFilterQuery·p0.50:   916.455 ms/op
                 executeFilterQuery·p0.90:   925.893 ms/op
                 executeFilterQuery·p0.95:   926.941 ms/op
                 executeFilterQuery·p0.99:   926.941 ms/op
                 executeFilterQuery·p0.999:  926.941 ms/op
                 executeFilterQuery·p0.9999: 926.941 ms/op
                 executeFilterQuery·p1.00:   926.941 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 115
  mean =    902.569 ±(99.9%) 8.892 ms/op

  Histogram, ms/op:
    [ 800.000,  812.500) = 0 
    [ 812.500,  825.000) = 0 
    [ 825.000,  837.500) = 0 
    [ 837.500,  850.000) = 0 
    [ 850.000,  862.500) = 4 
    [ 862.500,  875.000) = 17 
    [ 875.000,  887.500) = 18 
    [ 887.500,  900.000) = 15 
    [ 900.000,  912.500) = 17 
    [ 912.500,  925.000) = 28 
    [ 925.000,  937.500) = 5 
    [ 937.500,  950.000) = 1 
    [ 950.000,  962.500) = 6 
    [ 962.500,  975.000) = 1 
    [ 975.000,  987.500) = 3 

  Percentiles, ms/op:
      p(0.0000) =    858.784 ms/op
     p(50.0000) =    901.775 ms/op
     p(90.0000) =    940.782 ms/op
     p(95.0000) =    959.866 ms/op
     p(99.0000) =    978.321 ms/op
     p(99.9000) =    978.321 ms/op
     p(99.9900) =    978.321 ms/op
     p(99.9990) =    978.321 ms/op
     p(99.9999) =    978.321 ms/op
    p(100.0000) =    978.321 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 41.11% complete, ETA 06:11:52
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1703.936 ±(99.9%) 4425.359 ms/op
# Warmup Iteration   2: 912.547 ±(99.9%) 21.734 ms/op
# Warmup Iteration   3: 932.470 ±(99.9%) 48.727 ms/op
# Warmup Iteration   4: 953.156 ±(99.9%) 25.599 ms/op
# Warmup Iteration   5: 953.156 ±(99.9%) 27.978 ms/op
Iteration   1: 955.634 ±(99.9%) 18.278 ms/op
                 executeFilterQuery·p0.00:   925.893 ms/op
                 executeFilterQuery·p0.50:   961.544 ms/op
                 executeFilterQuery·p0.90:   971.820 ms/op
                 executeFilterQuery·p0.95:   973.079 ms/op
                 executeFilterQuery·p0.99:   973.079 ms/op
                 executeFilterQuery·p0.999:  973.079 ms/op
                 executeFilterQuery·p0.9999: 973.079 ms/op
                 executeFilterQuery·p1.00:   973.079 ms/op

Iteration   2: 936.760 ±(99.9%) 44.340 ms/op
                 executeFilterQuery·p0.00:   907.018 ms/op
                 executeFilterQuery·p0.50:   918.553 ms/op
                 executeFilterQuery·p0.90:   982.725 ms/op
                 executeFilterQuery·p0.95:   983.564 ms/op
                 executeFilterQuery·p0.99:   983.564 ms/op
                 executeFilterQuery·p0.999:  983.564 ms/op
                 executeFilterQuery·p0.9999: 983.564 ms/op
                 executeFilterQuery·p1.00:   983.564 ms/op

Iteration   3: 915.312 ±(99.9%) 11.628 ms/op
                 executeFilterQuery·p0.00:   892.338 ms/op
                 executeFilterQuery·p0.50:   918.553 ms/op
                 executeFilterQuery·p0.90:   920.440 ms/op
                 executeFilterQuery·p0.95:   920.650 ms/op
                 executeFilterQuery·p0.99:   920.650 ms/op
                 executeFilterQuery·p0.999:  920.650 ms/op
                 executeFilterQuery·p0.9999: 920.650 ms/op
                 executeFilterQuery·p1.00:   920.650 ms/op

Iteration   4: 906.057 ±(99.9%) 11.126 ms/op
                 executeFilterQuery·p0.00:   892.338 ms/op
                 executeFilterQuery·p0.50:   907.543 ms/op
                 executeFilterQuery·p0.90:   918.238 ms/op
                 executeFilterQuery·p0.95:   918.553 ms/op
                 executeFilterQuery·p0.99:   918.553 ms/op
                 executeFilterQuery·p0.999:  918.553 ms/op
                 executeFilterQuery·p0.9999: 918.553 ms/op
                 executeFilterQuery·p1.00:   918.553 ms/op

Iteration   5: 917.599 ±(99.9%) 8.138 ms/op
                 executeFilterQuery·p0.00:   907.018 ms/op
                 executeFilterQuery·p0.50:   919.601 ms/op
                 executeFilterQuery·p0.90:   923.586 ms/op
                 executeFilterQuery·p0.95:   923.795 ms/op
                 executeFilterQuery·p0.99:   923.795 ms/op
                 executeFilterQuery·p0.999:  923.795 ms/op
                 executeFilterQuery·p0.9999: 923.795 ms/op
                 executeFilterQuery·p1.00:   923.795 ms/op


# Run progress: 41.67% complete, ETA 06:05:54
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1023.305 ±(99.9%) 290.847 ms/op
# Warmup Iteration   2: 895.047 ±(99.9%) 25.844 ms/op
# Warmup Iteration   3: 900.989 ±(99.9%) 13.698 ms/op
# Warmup Iteration   4: 926.941 ±(99.9%) 24.092 ms/op
# Warmup Iteration   5: 935.425 ±(99.9%) 24.971 ms/op
Iteration   1: 939.619 ±(99.9%) 58.201 ms/op
                 executeFilterQuery·p0.00:   884.998 ms/op
                 executeFilterQuery·p0.50:   942.670 ms/op
                 executeFilterQuery·p0.90:   992.582 ms/op
                 executeFilterQuery·p0.95:   993.001 ms/op
                 executeFilterQuery·p0.99:   993.001 ms/op
                 executeFilterQuery·p0.999:  993.001 ms/op
                 executeFilterQuery·p0.9999: 993.001 ms/op
                 executeFilterQuery·p1.00:   993.001 ms/op

Iteration   2: 895.309 ±(99.9%) 12.803 ms/op
                 executeFilterQuery·p0.00:   884.998 ms/op
                 executeFilterQuery·p0.50:   894.960 ms/op
                 executeFilterQuery·p0.90:   912.366 ms/op
                 executeFilterQuery·p0.95:   916.455 ms/op
                 executeFilterQuery·p0.99:   916.455 ms/op
                 executeFilterQuery·p0.999:  916.455 ms/op
                 executeFilterQuery·p0.9999: 916.455 ms/op
                 executeFilterQuery·p1.00:   916.455 ms/op

Iteration   3: 902.737 ±(99.9%) 15.254 ms/op
                 executeFilterQuery·p0.00:   887.095 ms/op
                 executeFilterQuery·p0.50:   907.018 ms/op
                 executeFilterQuery·p0.90:   916.246 ms/op
                 executeFilterQuery·p0.95:   917.504 ms/op
                 executeFilterQuery·p0.99:   917.504 ms/op
                 executeFilterQuery·p0.999:  917.504 ms/op
                 executeFilterQuery·p0.9999: 917.504 ms/op
                 executeFilterQuery·p1.00:   917.504 ms/op

Iteration   4: 913.310 ±(99.9%) 15.551 ms/op
                 executeFilterQuery·p0.00:   886.047 ms/op
                 executeFilterQuery·p0.50:   917.504 ms/op
                 executeFilterQuery·p0.90:   926.522 ms/op
                 executeFilterQuery·p0.95:   927.990 ms/op
                 executeFilterQuery·p0.99:   927.990 ms/op
                 executeFilterQuery·p0.999:  927.990 ms/op
                 executeFilterQuery·p0.9999: 927.990 ms/op
                 executeFilterQuery·p1.00:   927.990 ms/op

Iteration   5: 913.691 ±(99.9%) 16.627 ms/op
                 executeFilterQuery·p0.00:   886.047 ms/op
                 executeFilterQuery·p0.50:   917.504 ms/op
                 executeFilterQuery·p0.90:   925.893 ms/op
                 executeFilterQuery·p0.95:   925.893 ms/op
                 executeFilterQuery·p0.99:   925.893 ms/op
                 executeFilterQuery·p0.999:  925.893 ms/op
                 executeFilterQuery·p0.9999: 925.893 ms/op
                 executeFilterQuery·p1.00:   925.893 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 113
  mean =    919.119 ±(99.9%) 8.097 ms/op

  Histogram, ms/op:
    [ 800.000,  812.500) = 0 
    [ 812.500,  825.000) = 0 
    [ 825.000,  837.500) = 0 
    [ 837.500,  850.000) = 0 
    [ 850.000,  862.500) = 0 
    [ 862.500,  875.000) = 0 
    [ 875.000,  887.500) = 11 
    [ 887.500,  900.000) = 10 
    [ 900.000,  912.500) = 29 
    [ 912.500,  925.000) = 38 
    [ 925.000,  937.500) = 4 
    [ 937.500,  950.000) = 5 
    [ 950.000,  962.500) = 4 
    [ 962.500,  975.000) = 6 
    [ 975.000,  987.500) = 4 

  Percentiles, ms/op:
      p(0.0000) =    884.998 ms/op
     p(50.0000) =    915.407 ms/op
     p(90.0000) =    963.222 ms/op
     p(95.0000) =    978.636 ms/op
     p(99.0000) =    992.708 ms/op
     p(99.9000) =    993.001 ms/op
     p(99.9900) =    993.001 ms/op
     p(99.9990) =    993.001 ms/op
     p(99.9999) =    993.001 ms/op
    p(100.0000) =    993.001 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 42.22% complete, ETA 06:00:04
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2060.662 ±(99.9%) 6955.665 ms/op
# Warmup Iteration   2: 925.511 ±(99.9%) 16.940 ms/op
# Warmup Iteration   3: 948.866 ±(99.9%) 12.262 ms/op
# Warmup Iteration   4: 931.803 ±(99.9%) 23.858 ms/op
# Warmup Iteration   5: 926.369 ±(99.9%) 11.626 ms/op
Iteration   1: 929.896 ±(99.9%) 19.850 ms/op
                 executeFilterQuery·p0.00:   918.553 ms/op
                 executeFilterQuery·p0.50:   923.795 ms/op
                 executeFilterQuery·p0.90:   961.754 ms/op
                 executeFilterQuery·p0.95:   966.787 ms/op
                 executeFilterQuery·p0.99:   966.787 ms/op
                 executeFilterQuery·p0.999:  966.787 ms/op
                 executeFilterQuery·p0.9999: 966.787 ms/op
                 executeFilterQuery·p1.00:   966.787 ms/op

Iteration   2: 944.767 ±(99.9%) 26.095 ms/op
                 executeFilterQuery·p0.00:   925.893 ms/op
                 executeFilterQuery·p0.50:   941.621 ms/op
                 executeFilterQuery·p0.90:   982.725 ms/op
                 executeFilterQuery·p0.95:   984.613 ms/op
                 executeFilterQuery·p0.99:   984.613 ms/op
                 executeFilterQuery·p0.999:  984.613 ms/op
                 executeFilterQuery·p0.9999: 984.613 ms/op
                 executeFilterQuery·p1.00:   984.613 ms/op

Iteration   3: 960.019 ±(99.9%) 21.049 ms/op
                 executeFilterQuery·p0.00:   930.087 ms/op
                 executeFilterQuery·p0.50:   963.641 ms/op
                 executeFilterQuery·p0.90:   979.580 ms/op
                 executeFilterQuery·p0.95:   980.419 ms/op
                 executeFilterQuery·p0.99:   980.419 ms/op
                 executeFilterQuery·p0.999:  980.419 ms/op
                 executeFilterQuery·p0.9999: 980.419 ms/op
                 executeFilterQuery·p1.00:   980.419 ms/op

Iteration   4: 967.931 ±(99.9%) 12.516 ms/op
                 executeFilterQuery·p0.00:   950.010 ms/op
                 executeFilterQuery·p0.50:   967.836 ms/op
                 executeFilterQuery·p0.90:   979.160 ms/op
                 executeFilterQuery·p0.95:   979.370 ms/op
                 executeFilterQuery·p0.99:   979.370 ms/op
                 executeFilterQuery·p0.999:  979.370 ms/op
                 executeFilterQuery·p0.9999: 979.370 ms/op
                 executeFilterQuery·p1.00:   979.370 ms/op

Iteration   5: 943.909 ±(99.9%) 32.902 ms/op
                 executeFilterQuery·p0.00:   919.601 ms/op
                 executeFilterQuery·p0.50:   937.427 ms/op
                 executeFilterQuery·p0.90:   984.823 ms/op
                 executeFilterQuery·p0.95:   985.661 ms/op
                 executeFilterQuery·p0.99:   985.661 ms/op
                 executeFilterQuery·p0.999:  985.661 ms/op
                 executeFilterQuery·p0.9999: 985.661 ms/op
                 executeFilterQuery·p1.00:   985.661 ms/op


# Run progress: 42.78% complete, ETA 05:54:20
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1171.958 ±(99.9%) 496.145 ms/op
# Warmup Iteration   2: 967.073 ±(99.9%) 32.363 ms/op
# Warmup Iteration   3: 980.991 ±(99.9%) 17.753 ms/op
# Warmup Iteration   4: 980.037 ±(99.9%) 22.262 ms/op
# Warmup Iteration   5: 989.379 ±(99.9%) 6.333 ms/op
Iteration   1: 958.494 ±(99.9%) 42.914 ms/op
                 executeFilterQuery·p0.00:   910.164 ms/op
                 executeFilterQuery·p0.50:   974.127 ms/op
                 executeFilterQuery·p0.90:   988.178 ms/op
                 executeFilterQuery·p0.95:   988.807 ms/op
                 executeFilterQuery·p0.99:   988.807 ms/op
                 executeFilterQuery·p0.999:  988.807 ms/op
                 executeFilterQuery·p0.9999: 988.807 ms/op
                 executeFilterQuery·p1.00:   988.807 ms/op

Iteration   2: 956.492 ±(99.9%) 21.537 ms/op
                 executeFilterQuery·p0.00:   930.087 ms/op
                 executeFilterQuery·p0.50:   955.253 ms/op
                 executeFilterQuery·p0.90:   978.321 ms/op
                 executeFilterQuery·p0.95:   979.370 ms/op
                 executeFilterQuery·p0.99:   979.370 ms/op
                 executeFilterQuery·p0.999:  979.370 ms/op
                 executeFilterQuery·p0.9999: 979.370 ms/op
                 executeFilterQuery·p1.00:   979.370 ms/op

Iteration   3: 950.010 ±(99.9%) 25.582 ms/op
                 executeFilterQuery·p0.00:   918.553 ms/op
                 executeFilterQuery·p0.50:   952.107 ms/op
                 executeFilterQuery·p0.90:   974.756 ms/op
                 executeFilterQuery·p0.95:   976.224 ms/op
                 executeFilterQuery·p0.99:   976.224 ms/op
                 executeFilterQuery·p0.999:  976.224 ms/op
                 executeFilterQuery·p0.9999: 976.224 ms/op
                 executeFilterQuery·p1.00:   976.224 ms/op

Iteration   4: 950.677 ±(99.9%) 20.756 ms/op
                 executeFilterQuery·p0.00:   927.990 ms/op
                 executeFilterQuery·p0.50:   950.010 ms/op
                 executeFilterQuery·p0.90:   974.547 ms/op
                 executeFilterQuery·p0.95:   976.224 ms/op
                 executeFilterQuery·p0.99:   976.224 ms/op
                 executeFilterQuery·p0.999:  976.224 ms/op
                 executeFilterQuery·p0.9999: 976.224 ms/op
                 executeFilterQuery·p1.00:   976.224 ms/op

Iteration   5: 949.724 ±(99.9%) 30.954 ms/op
                 executeFilterQuery·p0.00:   920.650 ms/op
                 executeFilterQuery·p0.50:   953.156 ms/op
                 executeFilterQuery·p0.90:   979.160 ms/op
                 executeFilterQuery·p0.95:   979.370 ms/op
                 executeFilterQuery·p0.99:   979.370 ms/op
                 executeFilterQuery·p0.999:  979.370 ms/op
                 executeFilterQuery·p0.9999: 979.370 ms/op
                 executeFilterQuery·p1.00:   979.370 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 110
  mean =    951.192 ±(99.9%) 6.771 ms/op

  Histogram, ms/op:
    [910.000, 915.000) = 2 
    [915.000, 920.000) = 5 
    [920.000, 925.000) = 11 
    [925.000, 930.000) = 6 
    [930.000, 935.000) = 5 
    [935.000, 940.000) = 8 
    [940.000, 945.000) = 8 
    [945.000, 950.000) = 5 
    [950.000, 955.000) = 10 
    [955.000, 960.000) = 5 
    [960.000, 965.000) = 13 
    [965.000, 970.000) = 7 
    [970.000, 975.000) = 6 
    [975.000, 980.000) = 10 
    [980.000, 985.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    910.164 ms/op
     p(50.0000) =    952.107 ms/op
     p(90.0000) =    979.370 ms/op
     p(95.0000) =    985.085 ms/op
     p(99.0000) =    988.461 ms/op
     p(99.9000) =    988.807 ms/op
     p(99.9900) =    988.807 ms/op
     p(99.9990) =    988.807 ms/op
     p(99.9999) =    988.807 ms/op
    p(100.0000) =    988.807 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 43.33% complete, ETA 05:48:44
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

49.649 ±(99.9%) 1.328 ms/op
# Warmup Iteration   2: 49.908 ±(99.9%) 0.131 ms/op
# Warmup Iteration   3: 50.144 ±(99.9%) 0.135 ms/op
# Warmup Iteration   4: 49.105 ±(99.9%) 0.247 ms/op
# Warmup Iteration   5: 49.063 ±(99.9%) 0.143 ms/op
Iteration   1: 49.116 ±(99.9%) 0.234 ms/op
                 executeFilterQuery·p0.00:   47.251 ms/op
                 executeFilterQuery·p0.50:   48.824 ms/op
                 executeFilterQuery·p0.90:   50.921 ms/op
                 executeFilterQuery·p0.95:   51.053 ms/op
                 executeFilterQuery·p0.99:   51.903 ms/op
                 executeFilterQuery·p0.999:  53.608 ms/op
                 executeFilterQuery·p0.9999: 53.608 ms/op
                 executeFilterQuery·p1.00:   53.608 ms/op

Iteration   2: 49.363 ±(99.9%) 0.259 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   49.021 ms/op
                 executeFilterQuery·p0.90:   51.053 ms/op
                 executeFilterQuery·p0.95:   51.636 ms/op
                 executeFilterQuery·p0.99:   51.839 ms/op
                 executeFilterQuery·p0.999:  51.839 ms/op
                 executeFilterQuery·p0.9999: 51.839 ms/op
                 executeFilterQuery·p1.00:   51.839 ms/op

Iteration   3: 49.772 ±(99.9%) 0.324 ms/op
                 executeFilterQuery·p0.00:   47.514 ms/op
                 executeFilterQuery·p0.50:   49.480 ms/op
                 executeFilterQuery·p0.90:   51.773 ms/op
                 executeFilterQuery·p0.95:   51.839 ms/op
                 executeFilterQuery·p0.99:   52.886 ms/op
                 executeFilterQuery·p0.999:  54.198 ms/op
                 executeFilterQuery·p0.9999: 54.198 ms/op
                 executeFilterQuery·p1.00:   54.198 ms/op

Iteration   4: 48.696 ±(99.9%) 0.155 ms/op
                 executeFilterQuery·p0.00:   47.645 ms/op
                 executeFilterQuery·p0.50:   48.562 ms/op
                 executeFilterQuery·p0.90:   49.381 ms/op
                 executeFilterQuery·p0.95:   49.545 ms/op
                 executeFilterQuery·p0.99:   50.515 ms/op
                 executeFilterQuery·p0.999:  53.674 ms/op
                 executeFilterQuery·p0.9999: 53.674 ms/op
                 executeFilterQuery·p1.00:   53.674 ms/op

Iteration   5: 48.312 ±(99.9%) 0.081 ms/op
                 executeFilterQuery·p0.00:   47.186 ms/op
                 executeFilterQuery·p0.50:   48.431 ms/op
                 executeFilterQuery·p0.90:   48.628 ms/op
                 executeFilterQuery·p0.95:   48.628 ms/op
                 executeFilterQuery·p0.99:   48.942 ms/op
                 executeFilterQuery·p0.999:  49.218 ms/op
                 executeFilterQuery·p0.9999: 49.218 ms/op
                 executeFilterQuery·p1.00:   49.218 ms/op


# Run progress: 43.89% complete, ETA 05:43:07
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

49.265 ±(99.9%) 1.458 ms/op
# Warmup Iteration   2: 49.270 ±(99.9%) 0.199 ms/op
# Warmup Iteration   3: 49.610 ±(99.9%) 0.108 ms/op
# Warmup Iteration   4: 49.397 ±(99.9%) 0.233 ms/op
# Warmup Iteration   5: 48.952 ±(99.9%) 0.205 ms/op
Iteration   1: 49.080 ±(99.9%) 0.228 ms/op
                 executeFilterQuery·p0.00:   47.317 ms/op
                 executeFilterQuery·p0.50:   48.824 ms/op
                 executeFilterQuery·p0.90:   50.902 ms/op
                 executeFilterQuery·p0.95:   51.053 ms/op
                 executeFilterQuery·p0.99:   51.247 ms/op
                 executeFilterQuery·p0.999:  52.036 ms/op
                 executeFilterQuery·p0.9999: 52.036 ms/op
                 executeFilterQuery·p1.00:   52.036 ms/op

Iteration   2: 48.464 ±(99.9%) 0.166 ms/op
                 executeFilterQuery·p0.00:   46.727 ms/op
                 executeFilterQuery·p0.50:   48.366 ms/op
                 executeFilterQuery·p0.90:   48.982 ms/op
                 executeFilterQuery·p0.95:   49.703 ms/op
                 executeFilterQuery·p0.99:   51.861 ms/op
                 executeFilterQuery·p0.999:  52.756 ms/op
                 executeFilterQuery·p0.9999: 52.756 ms/op
                 executeFilterQuery·p1.00:   52.756 ms/op

Iteration   3: 48.822 ±(99.9%) 0.246 ms/op
                 executeFilterQuery·p0.00:   47.120 ms/op
                 executeFilterQuery·p0.50:   48.431 ms/op
                 executeFilterQuery·p0.90:   50.659 ms/op
                 executeFilterQuery·p0.95:   50.840 ms/op
                 executeFilterQuery·p0.99:   51.249 ms/op
                 executeFilterQuery·p0.999:  52.756 ms/op
                 executeFilterQuery·p0.9999: 52.756 ms/op
                 executeFilterQuery·p1.00:   52.756 ms/op

Iteration   4: 47.886 ±(99.9%) 0.190 ms/op
                 executeFilterQuery·p0.00:   46.334 ms/op
                 executeFilterQuery·p0.50:   47.776 ms/op
                 executeFilterQuery·p0.90:   48.955 ms/op
                 executeFilterQuery·p0.95:   49.450 ms/op
                 executeFilterQuery·p0.99:   51.077 ms/op
                 executeFilterQuery·p0.999:  51.446 ms/op
                 executeFilterQuery·p0.9999: 51.446 ms/op
                 executeFilterQuery·p1.00:   51.446 ms/op

Iteration   5: 47.759 ±(99.9%) 0.158 ms/op
                 executeFilterQuery·p0.00:   46.531 ms/op
                 executeFilterQuery·p0.50:   47.710 ms/op
                 executeFilterQuery·p0.90:   48.300 ms/op
                 executeFilterQuery·p0.95:   49.349 ms/op
                 executeFilterQuery·p0.99:   50.260 ms/op
                 executeFilterQuery·p0.999:  50.594 ms/op
                 executeFilterQuery·p0.9999: 50.594 ms/op
                 executeFilterQuery·p1.00:   50.594 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 2040
  mean =     48.719 ±(99.9%) 0.080 ms/op

  Histogram, ms/op:
    [46.000, 46.500) = 2 
    [46.500, 47.000) = 26 
    [47.000, 47.500) = 159 
    [47.500, 48.000) = 252 
    [48.000, 48.500) = 678 
    [48.500, 49.000) = 344 
    [49.000, 49.500) = 250 
    [49.500, 50.000) = 54 
    [50.000, 50.500) = 68 
    [50.500, 51.000) = 103 
    [51.000, 51.500) = 43 
    [51.500, 52.000) = 52 
    [52.000, 52.500) = 2 
    [52.500, 53.000) = 4 
    [53.000, 53.500) = 0 
    [53.500, 54.000) = 2 
    [54.000, 54.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     46.334 ms/op
     p(50.0000) =     48.431 ms/op
     p(90.0000) =     50.528 ms/op
     p(95.0000) =     51.053 ms/op
     p(99.0000) =     51.839 ms/op
     p(99.9000) =     53.671 ms/op
     p(99.9900) =     54.198 ms/op
     p(99.9990) =     54.198 ms/op
     p(99.9999) =     54.198 ms/op
    p(100.0000) =     54.198 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 44.44% complete, ETA 05:37:35
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

57.621 ±(99.9%) 2.098 ms/op
# Warmup Iteration   2: 59.362 ±(99.9%) 0.408 ms/op
# Warmup Iteration   3: 59.892 ±(99.9%) 0.202 ms/op
# Warmup Iteration   4: 59.959 ±(99.9%) 0.173 ms/op
# Warmup Iteration   5: 57.991 ±(99.9%) 0.634 ms/op
Iteration   1: 57.618 ±(99.9%) 0.507 ms/op
                 executeFilterQuery·p0.00:   54.919 ms/op
                 executeFilterQuery·p0.50:   57.475 ms/op
                 executeFilterQuery·p0.90:   60.044 ms/op
                 executeFilterQuery·p0.95:   60.464 ms/op
                 executeFilterQuery·p0.99:   62.067 ms/op
                 executeFilterQuery·p0.999:  63.570 ms/op
                 executeFilterQuery·p0.9999: 63.570 ms/op
                 executeFilterQuery·p1.00:   63.570 ms/op

Iteration   2: 55.967 ±(99.9%) 0.173 ms/op
                 executeFilterQuery·p0.00:   54.985 ms/op
                 executeFilterQuery·p0.50:   55.902 ms/op
                 executeFilterQuery·p0.90:   56.623 ms/op
                 executeFilterQuery·p0.95:   57.488 ms/op
                 executeFilterQuery·p0.99:   58.982 ms/op
                 executeFilterQuery·p0.999:  58.982 ms/op
                 executeFilterQuery·p0.9999: 58.982 ms/op
                 executeFilterQuery·p1.00:   58.982 ms/op

Iteration   3: 56.074 ±(99.9%) 0.192 ms/op
                 executeFilterQuery·p0.00:   55.116 ms/op
                 executeFilterQuery·p0.50:   55.902 ms/op
                 executeFilterQuery·p0.90:   57.213 ms/op
                 executeFilterQuery·p0.95:   58.203 ms/op
                 executeFilterQuery·p0.99:   59.149 ms/op
                 executeFilterQuery·p0.999:  59.507 ms/op
                 executeFilterQuery·p0.9999: 59.507 ms/op
                 executeFilterQuery·p1.00:   59.507 ms/op

Iteration   4: 56.244 ±(99.9%) 0.268 ms/op
                 executeFilterQuery·p0.00:   54.919 ms/op
                 executeFilterQuery·p0.50:   55.968 ms/op
                 executeFilterQuery·p0.90:   57.672 ms/op
                 executeFilterQuery·p0.95:   58.825 ms/op
                 executeFilterQuery·p0.99:   61.326 ms/op
                 executeFilterQuery·p0.999:  61.735 ms/op
                 executeFilterQuery·p0.9999: 61.735 ms/op
                 executeFilterQuery·p1.00:   61.735 ms/op

Iteration   5: 56.295 ±(99.9%) 0.467 ms/op
                 executeFilterQuery·p0.00:   54.591 ms/op
                 executeFilterQuery·p0.50:   55.575 ms/op
                 executeFilterQuery·p0.90:   59.703 ms/op
                 executeFilterQuery·p0.95:   60.555 ms/op
                 executeFilterQuery·p0.99:   61.985 ms/op
                 executeFilterQuery·p0.999:  64.356 ms/op
                 executeFilterQuery·p0.9999: 64.356 ms/op
                 executeFilterQuery·p1.00:   64.356 ms/op


# Run progress: 45.00% complete, ETA 05:32:09
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

57.101 ±(99.9%) 1.504 ms/op
# Warmup Iteration   2: 57.359 ±(99.9%) 0.278 ms/op
# Warmup Iteration   3: 58.557 ±(99.9%) 0.371 ms/op
# Warmup Iteration   4: 58.664 ±(99.9%) 0.629 ms/op
# Warmup Iteration   5: 57.674 ±(99.9%) 0.565 ms/op
Iteration   1: 59.026 ±(99.9%) 0.518 ms/op
                 executeFilterQuery·p0.00:   55.116 ms/op
                 executeFilterQuery·p0.50:   60.031 ms/op
                 executeFilterQuery·p0.90:   60.686 ms/op
                 executeFilterQuery·p0.95:   60.817 ms/op
                 executeFilterQuery·p0.99:   60.883 ms/op
                 executeFilterQuery·p0.999:  60.883 ms/op
                 executeFilterQuery·p0.9999: 60.883 ms/op
                 executeFilterQuery·p1.00:   60.883 ms/op

Iteration   2: 56.564 ±(99.9%) 0.505 ms/op
                 executeFilterQuery·p0.00:   54.460 ms/op
                 executeFilterQuery·p0.50:   55.443 ms/op
                 executeFilterQuery·p0.90:   59.638 ms/op
                 executeFilterQuery·p0.95:   59.965 ms/op
                 executeFilterQuery·p0.99:   61.682 ms/op
                 executeFilterQuery·p0.999:  63.701 ms/op
                 executeFilterQuery·p0.9999: 63.701 ms/op
                 executeFilterQuery·p1.00:   63.701 ms/op

Iteration   3: 57.879 ±(99.9%) 0.663 ms/op
                 executeFilterQuery·p0.00:   54.854 ms/op
                 executeFilterQuery·p0.50:   57.868 ms/op
                 executeFilterQuery·p0.90:   60.411 ms/op
                 executeFilterQuery·p0.95:   61.040 ms/op
                 executeFilterQuery·p0.99:   65.982 ms/op
                 executeFilterQuery·p0.999:  73.531 ms/op
                 executeFilterQuery·p0.9999: 73.531 ms/op
                 executeFilterQuery·p1.00:   73.531 ms/op

Iteration   4: 56.793 ±(99.9%) 0.491 ms/op
                 executeFilterQuery·p0.00:   54.919 ms/op
                 executeFilterQuery·p0.50:   55.771 ms/op
                 executeFilterQuery·p0.90:   60.319 ms/op
                 executeFilterQuery·p0.95:   60.424 ms/op
                 executeFilterQuery·p0.99:   62.144 ms/op
                 executeFilterQuery·p0.999:  63.439 ms/op
                 executeFilterQuery·p0.9999: 63.439 ms/op
                 executeFilterQuery·p1.00:   63.439 ms/op

Iteration   5: 55.947 ±(99.9%) 0.376 ms/op
                 executeFilterQuery·p0.00:   54.919 ms/op
                 executeFilterQuery·p0.50:   55.640 ms/op
                 executeFilterQuery·p0.90:   56.171 ms/op
                 executeFilterQuery·p0.95:   58.851 ms/op
                 executeFilterQuery·p0.99:   64.084 ms/op
                 executeFilterQuery·p0.999:  69.468 ms/op
                 executeFilterQuery·p0.9999: 69.468 ms/op
                 executeFilterQuery·p1.00:   69.468 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1749
  mean =     56.826 ±(99.9%) 0.156 ms/op

  Histogram, ms/op:
    [50.000, 52.500) = 0 
    [52.500, 55.000) = 48 
    [55.000, 57.500) = 1218 
    [57.500, 60.000) = 275 
    [60.000, 62.500) = 200 
    [62.500, 65.000) = 6 
    [65.000, 67.500) = 0 
    [67.500, 70.000) = 1 
    [70.000, 72.500) = 0 
    [72.500, 75.000) = 1 
    [75.000, 77.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     54.460 ms/op
     p(50.0000) =     55.837 ms/op
     p(90.0000) =     60.097 ms/op
     p(95.0000) =     60.490 ms/op
     p(99.0000) =     61.276 ms/op
     p(99.9000) =     70.484 ms/op
     p(99.9900) =     73.531 ms/op
     p(99.9990) =     73.531 ms/op
     p(99.9999) =     73.531 ms/op
    p(100.0000) =     73.531 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 45.56% complete, ETA 05:26:49
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

93.187 ±(99.9%) 2.454 ms/op
# Warmup Iteration   2: 100.060 ±(99.9%) 0.563 ms/op
# Warmup Iteration   3: 101.083 ±(99.9%) 0.547 ms/op
# Warmup Iteration   4: 101.645 ±(99.9%) 0.560 ms/op
# Warmup Iteration   5: 102.314 ±(99.9%) 0.382 ms/op
Iteration   1: 102.581 ±(99.9%) 0.381 ms/op
                 executeFilterQuery·p0.00:   99.090 ms/op
                 executeFilterQuery·p0.50:   102.760 ms/op
                 executeFilterQuery·p0.90:   103.809 ms/op
                 executeFilterQuery·p0.95:   103.940 ms/op
                 executeFilterQuery·p0.99:   104.333 ms/op
                 executeFilterQuery·p0.999:  104.333 ms/op
                 executeFilterQuery·p0.9999: 104.333 ms/op
                 executeFilterQuery·p1.00:   104.333 ms/op

Iteration   2: 100.071 ±(99.9%) 0.768 ms/op
                 executeFilterQuery·p0.00:   98.435 ms/op
                 executeFilterQuery·p0.50:   98.697 ms/op
                 executeFilterQuery·p0.90:   102.892 ms/op
                 executeFilterQuery·p0.95:   103.285 ms/op
                 executeFilterQuery·p0.99:   112.898 ms/op
                 executeFilterQuery·p0.999:  112.984 ms/op
                 executeFilterQuery·p0.9999: 112.984 ms/op
                 executeFilterQuery·p1.00:   112.984 ms/op

Iteration   3: 99.115 ±(99.9%) 0.394 ms/op
                 executeFilterQuery·p0.00:   98.304 ms/op
                 executeFilterQuery·p0.50:   98.566 ms/op
                 executeFilterQuery·p0.90:   101.004 ms/op
                 executeFilterQuery·p0.95:   101.843 ms/op
                 executeFilterQuery·p0.99:   103.662 ms/op
                 executeFilterQuery·p0.999:  103.678 ms/op
                 executeFilterQuery·p0.9999: 103.678 ms/op
                 executeFilterQuery·p1.00:   103.678 ms/op

Iteration   4: 99.397 ±(99.9%) 0.515 ms/op
                 executeFilterQuery·p0.00:   98.304 ms/op
                 executeFilterQuery·p0.50:   98.697 ms/op
                 executeFilterQuery·p0.90:   102.184 ms/op
                 executeFilterQuery·p0.95:   103.363 ms/op
                 executeFilterQuery·p0.99:   104.197 ms/op
                 executeFilterQuery·p0.999:  104.202 ms/op
                 executeFilterQuery·p0.9999: 104.202 ms/op
                 executeFilterQuery·p1.00:   104.202 ms/op

Iteration   5: 99.109 ±(99.9%) 0.396 ms/op
                 executeFilterQuery·p0.00:   98.304 ms/op
                 executeFilterQuery·p0.50:   98.566 ms/op
                 executeFilterQuery·p0.90:   101.292 ms/op
                 executeFilterQuery·p0.95:   102.341 ms/op
                 executeFilterQuery·p0.99:   102.627 ms/op
                 executeFilterQuery·p0.999:  102.629 ms/op
                 executeFilterQuery·p0.9999: 102.629 ms/op
                 executeFilterQuery·p1.00:   102.629 ms/op


# Run progress: 46.11% complete, ETA 05:21:34
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

92.897 ±(99.9%) 2.620 ms/op
# Warmup Iteration   2: 99.954 ±(99.9%) 0.687 ms/op
# Warmup Iteration   3: 101.550 ±(99.9%) 0.426 ms/op
# Warmup Iteration   4: 101.246 ±(99.9%) 0.536 ms/op
# Warmup Iteration   5: 99.697 ±(99.9%) 0.193 ms/op
Iteration   1: 99.668 ±(99.9%) 0.209 ms/op
                 executeFilterQuery·p0.00:   98.828 ms/op
                 executeFilterQuery·p0.50:   99.484 ms/op
                 executeFilterQuery·p0.90:   100.532 ms/op
                 executeFilterQuery·p0.95:   100.919 ms/op
                 executeFilterQuery·p0.99:   101.577 ms/op
                 executeFilterQuery·p0.999:  101.581 ms/op
                 executeFilterQuery·p0.9999: 101.581 ms/op
                 executeFilterQuery·p1.00:   101.581 ms/op

Iteration   2: 100.092 ±(99.9%) 0.650 ms/op
                 executeFilterQuery·p0.00:   98.828 ms/op
                 executeFilterQuery·p0.50:   99.090 ms/op
                 executeFilterQuery·p0.90:   103.285 ms/op
                 executeFilterQuery·p0.95:   103.540 ms/op
                 executeFilterQuery·p0.99:   110.815 ms/op
                 executeFilterQuery·p0.999:  110.887 ms/op
                 executeFilterQuery·p0.9999: 110.887 ms/op
                 executeFilterQuery·p1.00:   110.887 ms/op

Iteration   3: 102.132 ±(99.9%) 0.665 ms/op
                 executeFilterQuery·p0.00:   98.959 ms/op
                 executeFilterQuery·p0.50:   103.154 ms/op
                 executeFilterQuery·p0.90:   103.809 ms/op
                 executeFilterQuery·p0.95:   103.940 ms/op
                 executeFilterQuery·p0.99:   103.940 ms/op
                 executeFilterQuery·p0.999:  103.940 ms/op
                 executeFilterQuery·p0.9999: 103.940 ms/op
                 executeFilterQuery·p1.00:   103.940 ms/op

Iteration   4: 102.326 ±(99.9%) 0.666 ms/op
                 executeFilterQuery·p0.00:   98.828 ms/op
                 executeFilterQuery·p0.50:   103.547 ms/op
                 executeFilterQuery·p0.90:   103.822 ms/op
                 executeFilterQuery·p0.95:   103.940 ms/op
                 executeFilterQuery·p0.99:   104.464 ms/op
                 executeFilterQuery·p0.999:  104.464 ms/op
                 executeFilterQuery·p0.9999: 104.464 ms/op
                 executeFilterQuery·p1.00:   104.464 ms/op

Iteration   5: 99.179 ±(99.9%) 0.099 ms/op
                 executeFilterQuery·p0.00:   98.697 ms/op
                 executeFilterQuery·p0.50:   99.090 ms/op
                 executeFilterQuery·p0.90:   99.615 ms/op
                 executeFilterQuery·p0.95:   99.746 ms/op
                 executeFilterQuery·p0.99:   100.393 ms/op
                 executeFilterQuery·p0.999:  100.401 ms/op
                 executeFilterQuery·p0.9999: 100.401 ms/op
                 executeFilterQuery·p1.00:   100.401 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 997
  mean =    100.348 ±(99.9%) 0.211 ms/op

  Histogram, ms/op:
    [ 90.000,  92.500) = 0 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 
    [ 97.500, 100.000) = 602 
    [100.000, 102.500) = 165 
    [102.500, 105.000) = 228 
    [105.000, 107.500) = 0 
    [107.500, 110.000) = 0 
    [110.000, 112.500) = 1 
    [112.500, 115.000) = 1 
    [115.000, 117.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     98.304 ms/op
     p(50.0000) =     99.222 ms/op
     p(90.0000) =    103.547 ms/op
     p(95.0000) =    103.809 ms/op
     p(99.0000) =    103.940 ms/op
     p(99.9000) =    112.984 ms/op
     p(99.9900) =    112.984 ms/op
     p(99.9990) =    112.984 ms/op
     p(99.9999) =    112.984 ms/op
    p(100.0000) =    112.984 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 46.67% complete, ETA 05:16:24
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

457.465 ±(99.9%) 24.665 ms/op
# Warmup Iteration   2: 449.611 ±(99.9%) 5.837 ms/op
# Warmup Iteration   3: 456.297 ±(99.9%) 4.601 ms/op
# Warmup Iteration   4: 455.296 ±(99.9%) 4.193 ms/op
# Warmup Iteration   5: 455.368 ±(99.9%) 6.374 ms/op
Iteration   1: 458.895 ±(99.9%) 15.295 ms/op
                 executeFilterQuery·p0.00:   433.062 ms/op
                 executeFilterQuery·p0.50:   454.558 ms/op
                 executeFilterQuery·p0.90:   482.188 ms/op
                 executeFilterQuery·p0.95:   482.345 ms/op
                 executeFilterQuery·p0.99:   482.345 ms/op
                 executeFilterQuery·p0.999:  482.345 ms/op
                 executeFilterQuery·p0.9999: 482.345 ms/op
                 executeFilterQuery·p1.00:   482.345 ms/op

Iteration   2: 447.377 ±(99.9%) 5.380 ms/op
                 executeFilterQuery·p0.00:   434.635 ms/op
                 executeFilterQuery·p0.50:   449.315 ms/op
                 executeFilterQuery·p0.90:   455.187 ms/op
                 executeFilterQuery·p0.95:   456.026 ms/op
                 executeFilterQuery·p0.99:   456.131 ms/op
                 executeFilterQuery·p0.999:  456.131 ms/op
                 executeFilterQuery·p0.9999: 456.131 ms/op
                 executeFilterQuery·p1.00:   456.131 ms/op

Iteration   3: 445.782 ±(99.9%) 4.549 ms/op
                 executeFilterQuery·p0.00:   438.305 ms/op
                 executeFilterQuery·p0.50:   446.169 ms/op
                 executeFilterQuery·p0.90:   455.606 ms/op
                 executeFilterQuery·p0.95:   455.606 ms/op
                 executeFilterQuery·p0.99:   455.606 ms/op
                 executeFilterQuery·p0.999:  455.606 ms/op
                 executeFilterQuery·p0.9999: 455.606 ms/op
                 executeFilterQuery·p1.00:   455.606 ms/op

Iteration   4: 448.585 ±(99.9%) 4.406 ms/op
                 executeFilterQuery·p0.00:   440.926 ms/op
                 executeFilterQuery·p0.50:   447.742 ms/op
                 executeFilterQuery·p0.90:   456.969 ms/op
                 executeFilterQuery·p0.95:   457.599 ms/op
                 executeFilterQuery·p0.99:   457.703 ms/op
                 executeFilterQuery·p0.999:  457.703 ms/op
                 executeFilterQuery·p0.9999: 457.703 ms/op
                 executeFilterQuery·p1.00:   457.703 ms/op

Iteration   5: 450.523 ±(99.9%) 4.749 ms/op
                 executeFilterQuery·p0.00:   437.256 ms/op
                 executeFilterQuery·p0.50:   449.839 ms/op
                 executeFilterQuery·p0.90:   460.115 ms/op
                 executeFilterQuery·p0.95:   461.793 ms/op
                 executeFilterQuery·p0.99:   461.898 ms/op
                 executeFilterQuery·p0.999:  461.898 ms/op
                 executeFilterQuery·p0.9999: 461.898 ms/op
                 executeFilterQuery·p1.00:   461.898 ms/op


# Run progress: 47.22% complete, ETA 05:11:21
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

463.685 ±(99.9%) 28.401 ms/op
# Warmup Iteration   2: 456.655 ±(99.9%) 7.288 ms/op
# Warmup Iteration   3: 462.827 ±(99.9%) 5.819 ms/op
# Warmup Iteration   4: 457.131 ±(99.9%) 4.319 ms/op
# Warmup Iteration   5: 457.537 ±(99.9%) 7.964 ms/op
Iteration   1: 456.560 ±(99.9%) 14.885 ms/op
                 executeFilterQuery·p0.00:   434.635 ms/op
                 executeFilterQuery·p0.50:   446.693 ms/op
                 executeFilterQuery·p0.90:   479.986 ms/op
                 executeFilterQuery·p0.95:   484.783 ms/op
                 executeFilterQuery·p0.99:   485.491 ms/op
                 executeFilterQuery·p0.999:  485.491 ms/op
                 executeFilterQuery·p0.9999: 485.491 ms/op
                 executeFilterQuery·p1.00:   485.491 ms/op

Iteration   2: 445.508 ±(99.9%) 4.794 ms/op
                 executeFilterQuery·p0.00:   435.159 ms/op
                 executeFilterQuery·p0.50:   445.645 ms/op
                 executeFilterQuery·p0.90:   452.880 ms/op
                 executeFilterQuery·p0.95:   458.962 ms/op
                 executeFilterQuery·p0.99:   460.325 ms/op
                 executeFilterQuery·p0.999:  460.325 ms/op
                 executeFilterQuery·p0.9999: 460.325 ms/op
                 executeFilterQuery·p1.00:   460.325 ms/op

Iteration   3: 447.058 ±(99.9%) 5.838 ms/op
                 executeFilterQuery·p0.00:   437.780 ms/op
                 executeFilterQuery·p0.50:   445.121 ms/op
                 executeFilterQuery·p0.90:   459.591 ms/op
                 executeFilterQuery·p0.95:   463.575 ms/op
                 executeFilterQuery·p0.99:   464.519 ms/op
                 executeFilterQuery·p0.999:  464.519 ms/op
                 executeFilterQuery·p0.9999: 464.519 ms/op
                 executeFilterQuery·p1.00:   464.519 ms/op

Iteration   4: 444.118 ±(99.9%) 3.848 ms/op
                 executeFilterQuery·p0.00:   437.256 ms/op
                 executeFilterQuery·p0.50:   444.072 ms/op
                 executeFilterQuery·p0.90:   452.565 ms/op
                 executeFilterQuery·p0.95:   453.404 ms/op
                 executeFilterQuery·p0.99:   453.509 ms/op
                 executeFilterQuery·p0.999:  453.509 ms/op
                 executeFilterQuery·p0.9999: 453.509 ms/op
                 executeFilterQuery·p1.00:   453.509 ms/op

Iteration   5: 446.351 ±(99.9%) 3.263 ms/op
                 executeFilterQuery·p0.00:   436.732 ms/op
                 executeFilterQuery·p0.50:   446.169 ms/op
                 executeFilterQuery·p0.90:   452.461 ms/op
                 executeFilterQuery·p0.95:   453.719 ms/op
                 executeFilterQuery·p0.99:   454.033 ms/op
                 executeFilterQuery·p0.999:  454.033 ms/op
                 executeFilterQuery·p0.9999: 454.033 ms/op
                 executeFilterQuery·p1.00:   454.033 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 228
  mean =    449.000 ±(99.9%) 2.335 ms/op

  Histogram, ms/op:
    [430.000, 435.000) = 3 
    [435.000, 440.000) = 34 
    [440.000, 445.000) = 53 
    [445.000, 450.000) = 62 
    [450.000, 455.000) = 38 
    [455.000, 460.000) = 15 
    [460.000, 465.000) = 5 
    [465.000, 470.000) = 1 
    [470.000, 475.000) = 2 
    [475.000, 480.000) = 8 
    [480.000, 485.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =    433.062 ms/op
     p(50.0000) =    446.431 ms/op
     p(90.0000) =    460.430 ms/op
     p(95.0000) =    477.915 ms/op
     p(99.0000) =    482.345 ms/op
     p(99.9000) =    485.491 ms/op
     p(99.9900) =    485.491 ms/op
     p(99.9990) =    485.491 ms/op
     p(99.9999) =    485.491 ms/op
    p(100.0000) =    485.491 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 47.78% complete, ETA 05:06:22
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

551.303 ±(99.9%) 28.217 ms/op
# Warmup Iteration   2: 563.726 ±(99.9%) 6.579 ms/op
# Warmup Iteration   3: 569.959 ±(99.9%) 4.228 ms/op
# Warmup Iteration   4: 586.894 ±(99.9%) 6.771 ms/op
# Warmup Iteration   5: 582.950 ±(99.9%) 9.245 ms/op
Iteration   1: 577.125 ±(99.9%) 9.237 ms/op
                 executeFilterQuery·p0.00:   558.891 ms/op
                 executeFilterQuery·p0.50:   577.765 ms/op
                 executeFilterQuery·p0.90:   591.397 ms/op
                 executeFilterQuery·p0.95:   591.397 ms/op
                 executeFilterQuery·p0.99:   591.397 ms/op
                 executeFilterQuery·p0.999:  591.397 ms/op
                 executeFilterQuery·p0.9999: 591.397 ms/op
                 executeFilterQuery·p1.00:   591.397 ms/op

Iteration   2: 561.105 ±(99.9%) 10.792 ms/op
                 executeFilterQuery·p0.00:   549.454 ms/op
                 executeFilterQuery·p0.50:   556.794 ms/op
                 executeFilterQuery·p0.90:   577.346 ms/op
                 executeFilterQuery·p0.95:   592.445 ms/op
                 executeFilterQuery·p0.99:   592.445 ms/op
                 executeFilterQuery·p0.999:  592.445 ms/op
                 executeFilterQuery·p0.9999: 592.445 ms/op
                 executeFilterQuery·p1.00:   592.445 ms/op

Iteration   3: 562.328 ±(99.9%) 12.732 ms/op
                 executeFilterQuery·p0.00:   551.551 ms/op
                 executeFilterQuery·p0.50:   556.270 ms/op
                 executeFilterQuery·p0.90:   592.445 ms/op
                 executeFilterQuery·p0.95:   592.445 ms/op
                 executeFilterQuery·p0.99:   592.445 ms/op
                 executeFilterQuery·p0.999:  592.445 ms/op
                 executeFilterQuery·p0.9999: 592.445 ms/op
                 executeFilterQuery·p1.00:   592.445 ms/op

Iteration   4: 556.677 ±(99.9%) 8.556 ms/op
                 executeFilterQuery·p0.00:   550.502 ms/op
                 executeFilterQuery·p0.50:   554.697 ms/op
                 executeFilterQuery·p0.90:   569.586 ms/op
                 executeFilterQuery·p0.95:   590.348 ms/op
                 executeFilterQuery·p0.99:   590.348 ms/op
                 executeFilterQuery·p0.999:  590.348 ms/op
                 executeFilterQuery·p0.9999: 590.348 ms/op
                 executeFilterQuery·p1.00:   590.348 ms/op

Iteration   5: 561.163 ±(99.9%) 11.626 ms/op
                 executeFilterQuery·p0.00:   551.551 ms/op
                 executeFilterQuery·p0.50:   555.745 ms/op
                 executeFilterQuery·p0.90:   587.622 ms/op
                 executeFilterQuery·p0.95:   591.397 ms/op
                 executeFilterQuery·p0.99:   591.397 ms/op
                 executeFilterQuery·p0.999:  591.397 ms/op
                 executeFilterQuery·p0.9999: 591.397 ms/op
                 executeFilterQuery·p1.00:   591.397 ms/op


# Run progress: 48.33% complete, ETA 05:01:29
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

559.736 ±(99.9%) 25.268 ms/op
# Warmup Iteration   2: 570.891 ±(99.9%) 16.226 ms/op
# Warmup Iteration   3: 586.504 ±(99.9%) 9.013 ms/op
# Warmup Iteration   4: 578.872 ±(99.9%) 8.278 ms/op
# Warmup Iteration   5: 594.173 ±(99.9%) 21.606 ms/op
Iteration   1: 586.586 ±(99.9%) 5.697 ms/op
                 executeFilterQuery·p0.00:   570.425 ms/op
                 executeFilterQuery·p0.50:   587.203 ms/op
                 executeFilterQuery·p0.90:   593.494 ms/op
                 executeFilterQuery·p0.95:   593.494 ms/op
                 executeFilterQuery·p0.99:   593.494 ms/op
                 executeFilterQuery·p0.999:  593.494 ms/op
                 executeFilterQuery·p0.9999: 593.494 ms/op
                 executeFilterQuery·p1.00:   593.494 ms/op

Iteration   2: 575.959 ±(99.9%) 13.181 ms/op
                 executeFilterQuery·p0.00:   554.697 ms/op
                 executeFilterQuery·p0.50:   579.338 ms/op
                 executeFilterQuery·p0.90:   591.187 ms/op
                 executeFilterQuery·p0.95:   598.737 ms/op
                 executeFilterQuery·p0.99:   598.737 ms/op
                 executeFilterQuery·p0.999:  598.737 ms/op
                 executeFilterQuery·p0.9999: 598.737 ms/op
                 executeFilterQuery·p1.00:   598.737 ms/op

Iteration   3: 567.163 ±(99.9%) 8.880 ms/op
                 executeFilterQuery·p0.00:   555.745 ms/op
                 executeFilterQuery·p0.50:   566.755 ms/op
                 executeFilterQuery·p0.90:   583.742 ms/op
                 executeFilterQuery·p0.95:   590.348 ms/op
                 executeFilterQuery·p0.99:   590.348 ms/op
                 executeFilterQuery·p0.999:  590.348 ms/op
                 executeFilterQuery·p0.9999: 590.348 ms/op
                 executeFilterQuery·p1.00:   590.348 ms/op

Iteration   4: 570.018 ±(99.9%) 15.082 ms/op
                 executeFilterQuery·p0.00:   551.551 ms/op
                 executeFilterQuery·p0.50:   565.707 ms/op
                 executeFilterQuery·p0.90:   592.655 ms/op
                 executeFilterQuery·p0.95:   594.543 ms/op
                 executeFilterQuery·p0.99:   594.543 ms/op
                 executeFilterQuery·p0.999:  594.543 ms/op
                 executeFilterQuery·p0.9999: 594.543 ms/op
                 executeFilterQuery·p1.00:   594.543 ms/op

Iteration   5: 566.173 ±(99.9%) 11.704 ms/op
                 executeFilterQuery·p0.00:   553.648 ms/op
                 executeFilterQuery·p0.50:   565.707 ms/op
                 executeFilterQuery·p0.90:   587.412 ms/op
                 executeFilterQuery·p0.95:   589.300 ms/op
                 executeFilterQuery·p0.99:   589.300 ms/op
                 executeFilterQuery·p0.999:  589.300 ms/op
                 executeFilterQuery·p0.9999: 589.300 ms/op
                 executeFilterQuery·p1.00:   589.300 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 179
  mean =    568.328 ±(99.9%) 3.602 ms/op

  Histogram, ms/op:
    [540.000, 545.000) = 0 
    [545.000, 550.000) = 2 
    [550.000, 555.000) = 45 
    [555.000, 560.000) = 30 
    [560.000, 565.000) = 10 
    [565.000, 570.000) = 20 
    [570.000, 575.000) = 12 
    [575.000, 580.000) = 10 
    [580.000, 585.000) = 11 
    [585.000, 590.000) = 21 
    [590.000, 595.000) = 17 

  Percentiles, ms/op:
      p(0.0000) =    549.454 ms/op
     p(50.0000) =    565.182 ms/op
     p(90.0000) =    590.348 ms/op
     p(95.0000) =    592.445 ms/op
     p(99.0000) =    595.381 ms/op
     p(99.9000) =    598.737 ms/op
     p(99.9900) =    598.737 ms/op
     p(99.9990) =    598.737 ms/op
     p(99.9999) =    598.737 ms/op
    p(100.0000) =    598.737 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 48.89% complete, ETA 04:56:40
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

931.803 ±(99.9%) 108.390 ms/op
# Warmup Iteration   2: 993.764 ±(99.9%) 6.585 ms/op
# Warmup Iteration   3: 1000.866 ±(99.9%) 49.977 ms/op
# Warmup Iteration   4: 992.715 ±(99.9%) 2.758 ms/op
# Warmup Iteration   5: 1006.214 ±(99.9%) 9.429 ms/op
Iteration   1: 1007.577 ±(99.9%) 9.496 ms/op
                 executeFilterQuery·p0.00:   997.196 ms/op
                 executeFilterQuery·p0.50:   1006.633 ms/op
                 executeFilterQuery·p0.90:   1017.643 ms/op
                 executeFilterQuery·p0.95:   1018.167 ms/op
                 executeFilterQuery·p0.99:   1018.167 ms/op
                 executeFilterQuery·p0.999:  1018.167 ms/op
                 executeFilterQuery·p0.9999: 1018.167 ms/op
                 executeFilterQuery·p1.00:   1018.167 ms/op

Iteration   2: 1010.827 ±(99.9%) 9.061 ms/op
                 executeFilterQuery·p0.00:   1004.536 ms/op
                 executeFilterQuery·p0.50:   1009.779 ms/op
                 executeFilterQuery·p0.90:   1021.208 ms/op
                 executeFilterQuery·p0.95:   1021.313 ms/op
                 executeFilterQuery·p0.99:   1021.313 ms/op
                 executeFilterQuery·p0.999:  1021.313 ms/op
                 executeFilterQuery·p0.9999: 1021.313 ms/op
                 executeFilterQuery·p1.00:   1021.313 ms/op

Iteration   3: 1012.295 ±(99.9%) 5.242 ms/op
                 executeFilterQuery·p0.00:   1007.682 ms/op
                 executeFilterQuery·p0.50:   1012.400 ms/op
                 executeFilterQuery·p0.90:   1018.796 ms/op
                 executeFilterQuery·p0.95:   1019.216 ms/op
                 executeFilterQuery·p0.99:   1019.216 ms/op
                 executeFilterQuery·p0.999:  1019.216 ms/op
                 executeFilterQuery·p0.9999: 1019.216 ms/op
                 executeFilterQuery·p1.00:   1019.216 ms/op

Iteration   4: 1006.214 ±(99.9%) 13.120 ms/op
                 executeFilterQuery·p0.00:   988.807 ms/op
                 executeFilterQuery·p0.50:   1007.157 ms/op
                 executeFilterQuery·p0.90:   1016.804 ms/op
                 executeFilterQuery·p0.95:   1017.119 ms/op
                 executeFilterQuery·p0.99:   1017.119 ms/op
                 executeFilterQuery·p0.999:  1017.119 ms/op
                 executeFilterQuery·p0.9999: 1017.119 ms/op
                 executeFilterQuery·p1.00:   1017.119 ms/op

Iteration   5: 1010.722 ±(99.9%) 10.067 ms/op
                 executeFilterQuery·p0.00:   999.293 ms/op
                 executeFilterQuery·p0.50:   1010.827 ms/op
                 executeFilterQuery·p0.90:   1024.249 ms/op
                 executeFilterQuery·p0.95:   1025.507 ms/op
                 executeFilterQuery·p0.99:   1025.507 ms/op
                 executeFilterQuery·p0.999:  1025.507 ms/op
                 executeFilterQuery·p0.9999: 1025.507 ms/op
                 executeFilterQuery·p1.00:   1025.507 ms/op


# Run progress: 49.44% complete, ETA 04:51:55
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

913.405 ±(99.9%) 104.876 ms/op
# Warmup Iteration   2: 984.994 ±(99.9%) 6.462 ms/op
# Warmup Iteration   3: 997.672 ±(99.9%) 23.052 ms/op
# Warmup Iteration   4: 1005.689 ±(99.9%) 72.948 ms/op
# Warmup Iteration   5: 1017.958 ±(99.9%) 13.322 ms/op
Iteration   1: 1010.408 ±(99.9%) 11.412 ms/op
                 executeFilterQuery·p0.00:   994.050 ms/op
                 executeFilterQuery·p0.50:   1012.400 ms/op
                 executeFilterQuery·p0.90:   1018.062 ms/op
                 executeFilterQuery·p0.95:   1018.167 ms/op
                 executeFilterQuery·p0.99:   1018.167 ms/op
                 executeFilterQuery·p0.999:  1018.167 ms/op
                 executeFilterQuery·p0.9999: 1018.167 ms/op
                 executeFilterQuery·p1.00:   1018.167 ms/op

Iteration   2: 1006.318 ±(99.9%) 49.374 ms/op
                 executeFilterQuery·p0.00:   991.953 ms/op
                 executeFilterQuery·p0.50:   996.147 ms/op
                 executeFilterQuery·p0.90:   1089.156 ms/op
                 executeFilterQuery·p0.95:   1098.908 ms/op
                 executeFilterQuery·p0.99:   1098.908 ms/op
                 executeFilterQuery·p0.999:  1098.908 ms/op
                 executeFilterQuery·p0.9999: 1098.908 ms/op
                 executeFilterQuery·p1.00:   1098.908 ms/op

Iteration   3: 993.859 ±(99.9%) 4.531 ms/op
                 executeFilterQuery·p0.00:   986.710 ms/op
                 executeFilterQuery·p0.50:   994.050 ms/op
                 executeFilterQuery·p0.90:   998.035 ms/op
                 executeFilterQuery·p0.95:   998.244 ms/op
                 executeFilterQuery·p0.99:   998.244 ms/op
                 executeFilterQuery·p0.999:  998.244 ms/op
                 executeFilterQuery·p0.9999: 998.244 ms/op
                 executeFilterQuery·p1.00:   998.244 ms/op

Iteration   4: 1014.917 ±(99.9%) 44.353 ms/op
                 executeFilterQuery·p0.00:   989.856 ms/op
                 executeFilterQuery·p0.50:   1012.400 ms/op
                 executeFilterQuery·p0.90:   1085.276 ms/op
                 executeFilterQuery·p0.95:   1092.616 ms/op
                 executeFilterQuery·p0.99:   1092.616 ms/op
                 executeFilterQuery·p0.999:  1092.616 ms/op
                 executeFilterQuery·p0.9999: 1092.616 ms/op
                 executeFilterQuery·p1.00:   1092.616 ms/op

Iteration   5: 1013.973 ±(99.9%) 9.772 ms/op
                 executeFilterQuery·p0.00:   1002.439 ms/op
                 executeFilterQuery·p0.50:   1014.497 ms/op
                 executeFilterQuery·p0.90:   1023.934 ms/op
                 executeFilterQuery·p0.95:   1024.459 ms/op
                 executeFilterQuery·p0.99:   1024.459 ms/op
                 executeFilterQuery·p0.999:  1024.459 ms/op
                 executeFilterQuery·p0.9999: 1024.459 ms/op
                 executeFilterQuery·p1.00:   1024.459 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 101
  mean =   1008.564 ±(99.9%) 5.190 ms/op

  Histogram, ms/op:
    [ 900.000,  912.500) = 0 
    [ 912.500,  925.000) = 0 
    [ 925.000,  937.500) = 0 
    [ 937.500,  950.000) = 0 
    [ 950.000,  962.500) = 0 
    [ 962.500,  975.000) = 0 
    [ 975.000,  987.500) = 1 
    [ 987.500, 1000.000) = 27 
    [1000.000, 1012.500) = 39 
    [1012.500, 1025.000) = 31 
    [1025.000, 1037.500) = 1 
    [1037.500, 1050.000) = 0 
    [1050.000, 1062.500) = 0 
    [1062.500, 1075.000) = 0 
    [1075.000, 1087.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    986.710 ms/op
     p(50.0000) =   1009.779 ms/op
     p(90.0000) =   1018.167 ms/op
     p(95.0000) =   1021.208 ms/op
     p(99.0000) =   1098.782 ms/op
     p(99.9000) =   1098.908 ms/op
     p(99.9900) =   1098.908 ms/op
     p(99.9990) =   1098.908 ms/op
     p(99.9999) =   1098.908 ms/op
    p(100.0000) =   1098.908 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 50.00% complete, ETA 04:47:15
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

916.932 ±(99.9%) 67.950 ms/op
# Warmup Iteration   2: 902.649 ±(99.9%) 18.467 ms/op
# Warmup Iteration   3: 908.734 ±(99.9%) 16.865 ms/op
# Warmup Iteration   4: 910.164 ±(99.9%) 13.480 ms/op
# Warmup Iteration   5: 915.026 ±(99.9%) 15.810 ms/op
Iteration   1: 930.087 ±(99.9%) 45.964 ms/op
                 executeFilterQuery·p0.00:   875.561 ms/op
                 executeFilterQuery·p0.50:   929.038 ms/op
                 executeFilterQuery·p0.90:   970.981 ms/op
                 executeFilterQuery·p0.95:   970.981 ms/op
                 executeFilterQuery·p0.99:   970.981 ms/op
                 executeFilterQuery·p0.999:  970.981 ms/op
                 executeFilterQuery·p0.9999: 970.981 ms/op
                 executeFilterQuery·p1.00:   970.981 ms/op

Iteration   2: 890.765 ±(99.9%) 23.630 ms/op
                 executeFilterQuery·p0.00:   870.318 ms/op
                 executeFilterQuery·p0.50:   887.620 ms/op
                 executeFilterQuery·p0.90:   916.560 ms/op
                 executeFilterQuery·p0.95:   917.504 ms/op
                 executeFilterQuery·p0.99:   917.504 ms/op
                 executeFilterQuery·p0.999:  917.504 ms/op
                 executeFilterQuery·p0.9999: 917.504 ms/op
                 executeFilterQuery·p1.00:   917.504 ms/op

Iteration   3: 891.115 ±(99.9%) 14.096 ms/op
                 executeFilterQuery·p0.00:   877.658 ms/op
                 executeFilterQuery·p0.50:   890.241 ms/op
                 executeFilterQuery·p0.90:   907.228 ms/op
                 executeFilterQuery·p0.95:   909.115 ms/op
                 executeFilterQuery·p0.99:   909.115 ms/op
                 executeFilterQuery·p0.999:  909.115 ms/op
                 executeFilterQuery·p0.9999: 909.115 ms/op
                 executeFilterQuery·p1.00:   909.115 ms/op

Iteration   4: 887.707 ±(99.9%) 20.509 ms/op
                 executeFilterQuery·p0.00:   869.270 ms/op
                 executeFilterQuery·p0.50:   889.192 ms/op
                 executeFilterQuery·p0.90:   916.141 ms/op
                 executeFilterQuery·p0.95:   922.747 ms/op
                 executeFilterQuery·p0.99:   922.747 ms/op
                 executeFilterQuery·p0.999:  922.747 ms/op
                 executeFilterQuery·p0.9999: 922.747 ms/op
                 executeFilterQuery·p1.00:   922.747 ms/op

Iteration   5: 895.047 ±(99.9%) 19.834 ms/op
                 executeFilterQuery·p0.00:   872.415 ms/op
                 executeFilterQuery·p0.50:   900.727 ms/op
                 executeFilterQuery·p0.90:   915.197 ms/op
                 executeFilterQuery·p0.95:   916.455 ms/op
                 executeFilterQuery·p0.99:   916.455 ms/op
                 executeFilterQuery·p0.999:  916.455 ms/op
                 executeFilterQuery·p0.9999: 916.455 ms/op
                 executeFilterQuery·p1.00:   916.455 ms/op


# Run progress: 50.56% complete, ETA 04:42:39
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

927.513 ±(99.9%) 58.438 ms/op
# Warmup Iteration   2: 914.740 ±(99.9%) 18.944 ms/op
# Warmup Iteration   3: 894.086 ±(99.9%) 7.274 ms/op
# Warmup Iteration   4: 918.553 ±(99.9%) 14.646 ms/op
# Warmup Iteration   5: 926.465 ±(99.9%) 16.049 ms/op
Iteration   1: 920.364 ±(99.9%) 55.903 ms/op
                 executeFilterQuery·p0.00:   873.464 ms/op
                 executeFilterQuery·p0.50:   931.135 ms/op
                 executeFilterQuery·p0.90:   976.644 ms/op
                 executeFilterQuery·p0.95:   978.321 ms/op
                 executeFilterQuery·p0.99:   978.321 ms/op
                 executeFilterQuery·p0.999:  978.321 ms/op
                 executeFilterQuery·p0.9999: 978.321 ms/op
                 executeFilterQuery·p1.00:   978.321 ms/op

Iteration   2: 906.581 ±(99.9%) 17.868 ms/op
                 executeFilterQuery·p0.00:   873.464 ms/op
                 executeFilterQuery·p0.50:   911.213 ms/op
                 executeFilterQuery·p0.90:   922.013 ms/op
                 executeFilterQuery·p0.95:   924.844 ms/op
                 executeFilterQuery·p0.99:   924.844 ms/op
                 executeFilterQuery·p0.999:  924.844 ms/op
                 executeFilterQuery·p0.9999: 924.844 ms/op
                 executeFilterQuery·p1.00:   924.844 ms/op

Iteration   3: 898.105 ±(99.9%) 22.050 ms/op
                 executeFilterQuery·p0.00:   874.512 ms/op
                 executeFilterQuery·p0.50:   896.008 ms/op
                 executeFilterQuery·p0.90:   922.432 ms/op
                 executeFilterQuery·p0.95:   922.747 ms/op
                 executeFilterQuery·p0.99:   922.747 ms/op
                 executeFilterQuery·p0.999:  922.747 ms/op
                 executeFilterQuery·p0.9999: 922.747 ms/op
                 executeFilterQuery·p1.00:   922.747 ms/op

Iteration   4: 893.911 ±(99.9%) 17.366 ms/op
                 executeFilterQuery·p0.00:   873.464 ms/op
                 executeFilterQuery·p0.50:   897.057 ms/op
                 executeFilterQuery·p0.90:   910.898 ms/op
                 executeFilterQuery·p0.95:   911.213 ms/op
                 executeFilterQuery·p0.99:   911.213 ms/op
                 executeFilterQuery·p0.999:  911.213 ms/op
                 executeFilterQuery·p0.9999: 911.213 ms/op
                 executeFilterQuery·p1.00:   911.213 ms/op

Iteration   5: 909.973 ±(99.9%) 16.302 ms/op
                 executeFilterQuery·p0.00:   883.950 ms/op
                 executeFilterQuery·p0.50:   910.164 ms/op
                 executeFilterQuery·p0.90:   924.844 ms/op
                 executeFilterQuery·p0.95:   925.893 ms/op
                 executeFilterQuery·p0.99:   925.893 ms/op
                 executeFilterQuery·p0.999:  925.893 ms/op
                 executeFilterQuery·p0.9999: 925.893 ms/op
                 executeFilterQuery·p1.00:   925.893 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 117
  mean =    901.910 ±(99.9%) 7.502 ms/op

  Histogram, ms/op:
    [ 800.000,  812.500) = 0 
    [ 812.500,  825.000) = 0 
    [ 825.000,  837.500) = 0 
    [ 837.500,  850.000) = 0 
    [ 850.000,  862.500) = 0 
    [ 862.500,  875.000) = 15 
    [ 875.000,  887.500) = 22 
    [ 887.500,  900.000) = 21 
    [ 900.000,  912.500) = 30 
    [ 912.500,  925.000) = 16 
    [ 925.000,  937.500) = 6 
    [ 937.500,  950.000) = 0 
    [ 950.000,  962.500) = 1 
    [ 962.500,  975.000) = 5 
    [ 975.000,  987.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    869.270 ms/op
     p(50.0000) =    900.727 ms/op
     p(90.0000) =    929.458 ms/op
     p(95.0000) =    963.851 ms/op
     p(99.0000) =    977.000 ms/op
     p(99.9000) =    978.321 ms/op
     p(99.9900) =    978.321 ms/op
     p(99.9990) =    978.321 ms/op
     p(99.9999) =    978.321 ms/op
    p(100.0000) =    978.321 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 51.11% complete, ETA 04:38:07
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1114.217 ±(99.9%) 49.006 ms/op
# Warmup Iteration   2: 1138.987 ±(99.9%) 53.922 ms/op
# Warmup Iteration   3: 1155.531 ±(99.9%) 23.575 ms/op
# Warmup Iteration   4: 1166.716 ±(99.9%) 30.571 ms/op
# Warmup Iteration   5: 1167.648 ±(99.9%) 81.357 ms/op
Iteration   1: 1163.220 ±(99.9%) 38.444 ms/op
                 executeFilterQuery·p0.00:   1136.656 ms/op
                 executeFilterQuery·p0.50:   1159.725 ms/op
                 executeFilterQuery·p0.90:   1205.862 ms/op
                 executeFilterQuery·p0.95:   1205.862 ms/op
                 executeFilterQuery·p0.99:   1205.862 ms/op
                 executeFilterQuery·p0.999:  1205.862 ms/op
                 executeFilterQuery·p0.9999: 1205.862 ms/op
                 executeFilterQuery·p1.00:   1205.862 ms/op

Iteration   2: 1156.230 ±(99.9%) 43.054 ms/op
                 executeFilterQuery·p0.00:   1111.491 ms/op
                 executeFilterQuery·p0.50:   1153.434 ms/op
                 executeFilterQuery·p0.90:   1182.794 ms/op
                 executeFilterQuery·p0.95:   1182.794 ms/op
                 executeFilterQuery·p0.99:   1182.794 ms/op
                 executeFilterQuery·p0.999:  1182.794 ms/op
                 executeFilterQuery·p0.9999: 1182.794 ms/op
                 executeFilterQuery·p1.00:   1182.794 ms/op

Iteration   3: 1125.938 ±(99.9%) 31.246 ms/op
                 executeFilterQuery·p0.00:   1103.102 ms/op
                 executeFilterQuery·p0.50:   1126.171 ms/op
                 executeFilterQuery·p0.90:   1155.531 ms/op
                 executeFilterQuery·p0.95:   1155.531 ms/op
                 executeFilterQuery·p0.99:   1155.531 ms/op
                 executeFilterQuery·p0.999:  1155.531 ms/op
                 executeFilterQuery·p0.9999: 1155.531 ms/op
                 executeFilterQuery·p1.00:   1155.531 ms/op

Iteration   4: 1125.239 ±(99.9%) 35.378 ms/op
                 executeFilterQuery·p0.00:   1098.908 ms/op
                 executeFilterQuery·p0.50:   1119.879 ms/op
                 executeFilterQuery·p0.90:   1161.822 ms/op
                 executeFilterQuery·p0.95:   1161.822 ms/op
                 executeFilterQuery·p0.99:   1161.822 ms/op
                 executeFilterQuery·p0.999:  1161.822 ms/op
                 executeFilterQuery·p0.9999: 1161.822 ms/op
                 executeFilterQuery·p1.00:   1161.822 ms/op

Iteration   5: 1134.559 ±(99.9%) 49.180 ms/op
                 executeFilterQuery·p0.00:   1101.005 ms/op
                 executeFilterQuery·p0.50:   1134.559 ms/op
                 executeFilterQuery·p0.90:   1197.474 ms/op
                 executeFilterQuery·p0.95:   1197.474 ms/op
                 executeFilterQuery·p0.99:   1197.474 ms/op
                 executeFilterQuery·p0.999:  1197.474 ms/op
                 executeFilterQuery·p0.9999: 1197.474 ms/op
                 executeFilterQuery·p1.00:   1197.474 ms/op


# Run progress: 51.67% complete, ETA 04:33:39
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1125.239 ±(99.9%) 61.043 ms/op
# Warmup Iteration   2: 1124.306 ±(99.9%) 48.431 ms/op
# Warmup Iteration   3: 1159.725 ±(99.9%) 13.068 ms/op
# Warmup Iteration   4: 1159.958 ±(99.9%) 17.394 ms/op
# Warmup Iteration   5: 1156.696 ±(99.9%) 16.256 ms/op
Iteration   1: 1112.190 ±(99.9%) 29.485 ms/op
                 executeFilterQuery·p0.00:   1088.422 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1145.045 ms/op
                 executeFilterQuery·p0.95:   1145.045 ms/op
                 executeFilterQuery·p0.99:   1145.045 ms/op
                 executeFilterQuery·p0.999:  1145.045 ms/op
                 executeFilterQuery·p0.9999: 1145.045 ms/op
                 executeFilterQuery·p1.00:   1145.045 ms/op

Iteration   2: 1109.626 ±(99.9%) 20.956 ms/op
                 executeFilterQuery·p0.00:   1101.005 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1140.851 ms/op
                 executeFilterQuery·p0.95:   1140.851 ms/op
                 executeFilterQuery·p0.99:   1140.851 ms/op
                 executeFilterQuery·p0.999:  1140.851 ms/op
                 executeFilterQuery·p0.9999: 1140.851 ms/op
                 executeFilterQuery·p1.00:   1140.851 ms/op

Iteration   3: 1134.093 ±(99.9%) 83.373 ms/op
                 executeFilterQuery·p0.00:   1092.616 ms/op
                 executeFilterQuery·p0.50:   1111.491 ms/op
                 executeFilterQuery·p0.90:   1237.320 ms/op
                 executeFilterQuery·p0.95:   1237.320 ms/op
                 executeFilterQuery·p0.99:   1237.320 ms/op
                 executeFilterQuery·p0.999:  1237.320 ms/op
                 executeFilterQuery·p0.9999: 1237.320 ms/op
                 executeFilterQuery·p1.00:   1237.320 ms/op

Iteration   4: 1151.569 ±(99.9%) 39.497 ms/op
                 executeFilterQuery·p0.00:   1109.393 ms/op
                 executeFilterQuery·p0.50:   1161.822 ms/op
                 executeFilterQuery·p0.90:   1170.211 ms/op
                 executeFilterQuery·p0.95:   1170.211 ms/op
                 executeFilterQuery·p0.99:   1170.211 ms/op
                 executeFilterQuery·p0.999:  1170.211 ms/op
                 executeFilterQuery·p0.9999: 1170.211 ms/op
                 executeFilterQuery·p1.00:   1170.211 ms/op

Iteration   5: 1135.258 ±(99.9%) 48.449 ms/op
                 executeFilterQuery·p0.00:   1103.102 ms/op
                 executeFilterQuery·p0.50:   1142.948 ms/op
                 executeFilterQuery·p0.90:   1174.405 ms/op
                 executeFilterQuery·p0.95:   1174.405 ms/op
                 executeFilterQuery·p0.99:   1174.405 ms/op
                 executeFilterQuery·p0.999:  1174.405 ms/op
                 executeFilterQuery·p0.9999: 1174.405 ms/op
                 executeFilterQuery·p1.00:   1174.405 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 90
  mean =   1134.792 ±(99.9%) 10.945 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 0 
    [1075.000, 1100.000) = 7 
    [1100.000, 1125.000) = 33 
    [1125.000, 1150.000) = 22 
    [1150.000, 1175.000) = 20 
    [1175.000, 1200.000) = 6 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1088.422 ms/op
     p(50.0000) =   1132.462 ms/op
     p(90.0000) =   1174.405 ms/op
     p(95.0000) =   1181.640 ms/op
     p(99.0000) =   1237.320 ms/op
     p(99.9000) =   1237.320 ms/op
     p(99.9900) =   1237.320 ms/op
     p(99.9990) =   1237.320 ms/op
     p(99.9999) =   1237.320 ms/op
    p(100.0000) =   1237.320 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 52.22% complete, ETA 04:29:13
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1864.718 ±(99.9%) 497.273 ms/op
# Warmup Iteration   2: 1959.089 ±(99.9%) 61.725 ms/op
# Warmup Iteration   3: 2066.114 ±(99.9%) 454.286 ms/op
# Warmup Iteration   4: 2032.979 ±(99.9%) 45.179 ms/op
# Warmup Iteration   5: 2029.204 ±(99.9%) 348.675 ms/op
Iteration   1: 1965.730 ±(99.9%) 11.564 ms/op
                 executeFilterQuery·p0.00:   1960.837 ms/op
                 executeFilterQuery·p0.50:   1965.031 ms/op
                 executeFilterQuery·p0.90:   1971.323 ms/op
                 executeFilterQuery·p0.95:   1971.323 ms/op
                 executeFilterQuery·p0.99:   1971.323 ms/op
                 executeFilterQuery·p0.999:  1971.323 ms/op
                 executeFilterQuery·p0.9999: 1971.323 ms/op
                 executeFilterQuery·p1.00:   1971.323 ms/op

Iteration   2: 1966.080 ±(99.9%) 11.002 ms/op
                 executeFilterQuery·p0.00:   1958.740 ms/op
                 executeFilterQuery·p0.50:   1967.129 ms/op
                 executeFilterQuery·p0.90:   1969.226 ms/op
                 executeFilterQuery·p0.95:   1969.226 ms/op
                 executeFilterQuery·p0.99:   1969.226 ms/op
                 executeFilterQuery·p0.999:  1969.226 ms/op
                 executeFilterQuery·p0.9999: 1969.226 ms/op
                 executeFilterQuery·p1.00:   1969.226 ms/op

Iteration   3: 1999.285 ±(99.9%) 69.250 ms/op
                 executeFilterQuery·p0.00:   1977.614 ms/op
                 executeFilterQuery·p0.50:   1993.343 ms/op
                 executeFilterQuery·p0.90:   2044.723 ms/op
                 executeFilterQuery·p0.95:   2044.723 ms/op
                 executeFilterQuery·p0.99:   2044.723 ms/op
                 executeFilterQuery·p0.999:  2044.723 ms/op
                 executeFilterQuery·p0.9999: 2044.723 ms/op
                 executeFilterQuery·p1.00:   2044.723 ms/op

Iteration   4: 2056.467 ±(99.9%) 135.440 ms/op
                 executeFilterQuery·p0.00:   2032.140 ms/op
                 executeFilterQuery·p0.50:   2046.820 ms/op
                 executeFilterQuery·p0.90:   2118.124 ms/op
                 executeFilterQuery·p0.95:   2118.124 ms/op
                 executeFilterQuery·p0.99:   2118.124 ms/op
                 executeFilterQuery·p0.999:  2118.124 ms/op
                 executeFilterQuery·p0.9999: 2118.124 ms/op
                 executeFilterQuery·p1.00:   2118.124 ms/op

Iteration   5: 1945.108 ±(99.9%) 30.614 ms/op
                 executeFilterQuery·p0.00:   1937.768 ms/op
                 executeFilterQuery·p0.50:   1941.963 ms/op
                 executeFilterQuery·p0.90:   1967.129 ms/op
                 executeFilterQuery·p0.95:   1967.129 ms/op
                 executeFilterQuery·p0.99:   1967.129 ms/op
                 executeFilterQuery·p0.999:  1967.129 ms/op
                 executeFilterQuery·p0.9999: 1967.129 ms/op
                 executeFilterQuery·p1.00:   1967.129 ms/op


# Run progress: 52.78% complete, ETA 04:24:58
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1847.241 ±(99.9%) 393.327 ms/op
# Warmup Iteration   2: 1982.158 ±(99.9%) 148.001 ms/op
# Warmup Iteration   3: 1992.294 ±(99.9%) 169.465 ms/op
# Warmup Iteration   4: 1963.983 ±(99.9%) 30.839 ms/op
# Warmup Iteration   5: 2003.619 ±(99.9%) 79.451 ms/op
Iteration   1: 2028.365 ±(99.9%) 84.000 ms/op
                 executeFilterQuery·p0.00:   2004.877 ms/op
                 executeFilterQuery·p0.50:   2023.752 ms/op
                 executeFilterQuery·p0.90:   2061.500 ms/op
                 executeFilterQuery·p0.95:   2061.500 ms/op
                 executeFilterQuery·p0.99:   2061.500 ms/op
                 executeFilterQuery·p0.999:  2061.500 ms/op
                 executeFilterQuery·p0.9999: 2061.500 ms/op
                 executeFilterQuery·p1.00:   2061.500 ms/op

Iteration   2: 2020.396 ±(99.9%) 38.980 ms/op
                 executeFilterQuery·p0.00:   2011.169 ms/op
                 executeFilterQuery·p0.50:   2017.460 ms/op
                 executeFilterQuery·p0.90:   2032.140 ms/op
                 executeFilterQuery·p0.95:   2032.140 ms/op
                 executeFilterQuery·p0.99:   2032.140 ms/op
                 executeFilterQuery·p0.999:  2032.140 ms/op
                 executeFilterQuery·p0.9999: 2032.140 ms/op
                 executeFilterQuery·p1.00:   2032.140 ms/op

Iteration   3: 1983.906 ±(99.9%) 103.542 ms/op
                 executeFilterQuery·p0.00:   1956.643 ms/op
                 executeFilterQuery·p0.50:   1967.129 ms/op
                 executeFilterQuery·p0.90:   2055.209 ms/op
                 executeFilterQuery·p0.95:   2055.209 ms/op
                 executeFilterQuery·p0.99:   2055.209 ms/op
                 executeFilterQuery·p0.999:  2055.209 ms/op
                 executeFilterQuery·p0.9999: 2055.209 ms/op
                 executeFilterQuery·p1.00:   2055.209 ms/op

Iteration   4: 1999.844 ±(99.9%) 335.911 ms/op
                 executeFilterQuery·p0.00:   1958.740 ms/op
                 executeFilterQuery·p0.50:   1960.837 ms/op
                 executeFilterQuery·p0.90:   2155.872 ms/op
                 executeFilterQuery·p0.95:   2155.872 ms/op
                 executeFilterQuery·p0.99:   2155.872 ms/op
                 executeFilterQuery·p0.999:  2155.872 ms/op
                 executeFilterQuery·p0.9999: 2155.872 ms/op
                 executeFilterQuery·p1.00:   2155.872 ms/op

Iteration   5: 1998.166 ±(99.9%) 87.423 ms/op
                 executeFilterQuery·p0.00:   1962.934 ms/op
                 executeFilterQuery·p0.50:   2009.072 ms/op
                 executeFilterQuery·p0.90:   2017.460 ms/op
                 executeFilterQuery·p0.95:   2017.460 ms/op
                 executeFilterQuery·p0.99:   2017.460 ms/op
                 executeFilterQuery·p0.999:  2017.460 ms/op
                 executeFilterQuery·p0.9999: 2017.460 ms/op
                 executeFilterQuery·p1.00:   2017.460 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 55
  mean =   1994.125 ±(99.9%) 20.607 ms/op

  Histogram, ms/op:
    [1900.000, 1925.000) = 0 
    [1925.000, 1950.000) = 5 
    [1950.000, 1975.000) = 22 
    [1975.000, 2000.000) = 6 
    [2000.000, 2025.000) = 10 
    [2025.000, 2050.000) = 8 
    [2050.000, 2075.000) = 2 
    [2075.000, 2100.000) = 0 
    [2100.000, 2125.000) = 1 
    [2125.000, 2150.000) = 0 
    [2150.000, 2175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1937.768 ms/op
     p(50.0000) =   1977.614 ms/op
     p(90.0000) =   2047.659 ms/op
     p(95.0000) =   2072.825 ms/op
     p(99.0000) =   2155.872 ms/op
     p(99.9000) =   2155.872 ms/op
     p(99.9900) =   2155.872 ms/op
     p(99.9990) =   2155.872 ms/op
     p(99.9999) =   2155.872 ms/op
    p(100.0000) =   2155.872 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 53.33% complete, ETA 04:20:44
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_290261966 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_290261966() {
        this(4);
    }
    public KeyMultiRecordMap_290261966(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_290261966 join_map = new KeyMultiRecordMap_290261966();
private final class KeyMultiRecordMap_827612786 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_827612786() {
        this(4);
    }
    public KeyMultiRecordMap_827612786(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_827612786 join_map_0 = new KeyMultiRecordMap_827612786();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

3432.339 ±(99.9%) 1568.810 ms/op
# Warmup Iteration   2: 3338.666 ±(99.9%) 1259.674 ms/op
# Warmup Iteration   3: 3292.529 ±(99.9%) 574.953 ms/op
# Warmup Iteration   4: 3233.808 ±(99.9%) 512.823 ms/op
# Warmup Iteration   5: 3488.263 ±(99.9%) 2957.993 ms/op
Iteration   1: 4086.650 ±(99.9%) 3151.585 ms/op
                 executeQuery·p0.00:   3888.120 ms/op
                 executeQuery·p0.50:   4169.138 ms/op
                 executeQuery·p0.90:   4202.693 ms/op
                 executeQuery·p0.95:   4202.693 ms/op
                 executeQuery·p0.99:   4202.693 ms/op
                 executeQuery·p0.999:  4202.693 ms/op
                 executeQuery·p0.9999: 4202.693 ms/op
                 executeQuery·p1.00:   4202.693 ms/op

Iteration   2: 3288.334 ±(99.9%) 662.052 ms/op
                 executeQuery·p0.00:   3208.643 ms/op
                 executeQuery·p0.50:   3258.974 ms/op
                 executeQuery·p0.90:   3426.746 ms/op
                 executeQuery·p0.95:   3426.746 ms/op
                 executeQuery·p0.99:   3426.746 ms/op
                 executeQuery·p0.999:  3426.746 ms/op
                 executeQuery·p0.9999: 3426.746 ms/op
                 executeQuery·p1.00:   3426.746 ms/op

Iteration   3: 3749.708 ±(99.9%) 3345.058 ms/op
                 executeQuery·p0.00:   3577.741 ms/op
                 executeQuery·p0.50:   3728.736 ms/op
                 executeQuery·p0.90:   3942.646 ms/op
                 executeQuery·p0.95:   3942.646 ms/op
                 executeQuery·p0.99:   3942.646 ms/op
                 executeQuery·p0.999:  3942.646 ms/op
                 executeQuery·p0.9999: 3942.646 ms/op
                 executeQuery·p1.00:   3942.646 ms/op

Iteration   4: 3464.495 ±(99.9%) 5114.243 ms/op
                 executeQuery·p0.00:   3284.140 ms/op
                 executeQuery·p0.50:   3321.889 ms/op
                 executeQuery·p0.90:   3787.457 ms/op
                 executeQuery·p0.95:   3787.457 ms/op
                 executeQuery·p0.99:   3787.457 ms/op
                 executeQuery·p0.999:  3787.457 ms/op
                 executeQuery·p0.9999: 3787.457 ms/op
                 executeQuery·p1.00:   3787.457 ms/op

Iteration   5: 3427.795 ±(99.9%) 1946.603 ms/op
                 executeQuery·p0.00:   3225.420 ms/op
                 executeQuery·p0.50:   3309.306 ms/op
                 executeQuery·p0.90:   3867.148 ms/op
                 executeQuery·p0.95:   3867.148 ms/op
                 executeQuery·p0.99:   3867.148 ms/op
                 executeQuery·p0.999:  3867.148 ms/op
                 executeQuery·p0.9999: 3867.148 ms/op
                 executeQuery·p1.00:   3867.148 ms/op


# Run progress: 53.89% complete, ETA 04:16:40
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_290261966 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_290261966() {
        this(4);
    }
    public KeyMultiRecordMap_290261966(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_290261966 join_map = new KeyMultiRecordMap_290261966();
private final class KeyMultiRecordMap_827612786 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_827612786() {
        this(4);
    }
    public KeyMultiRecordMap_827612786(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_827612786 join_map_0 = new KeyMultiRecordMap_827612786();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

3451.912 ±(99.9%) 1127.206 ms/op
# Warmup Iteration   2: 3411.367 ±(99.9%) 623.217 ms/op
# Warmup Iteration   3: 3233.808 ±(99.9%) 444.256 ms/op
# Warmup Iteration   4: 3252.683 ±(99.9%) 1013.760 ms/op
# Warmup Iteration   5: 3222.274 ±(99.9%) 1093.895 ms/op
Iteration   1: 3155.165 ±(99.9%) 460.694 ms/op
                 executeQuery·p0.00:   3099.591 ms/op
                 executeQuery·p0.50:   3133.145 ms/op
                 executeQuery·p0.90:   3254.780 ms/op
                 executeQuery·p0.95:   3254.780 ms/op
                 executeQuery·p0.99:   3254.780 ms/op
                 executeQuery·p0.999:  3254.780 ms/op
                 executeQuery·p0.9999: 3254.780 ms/op
                 executeQuery·p1.00:   3254.780 ms/op

Iteration   2: 3201.303 ±(99.9%) 586.496 ms/op
                 executeQuery·p0.00:   3099.591 ms/op
                 executeQuery·p0.50:   3212.837 ms/op
                 executeQuery·p0.90:   3279.946 ms/op
                 executeQuery·p0.95:   3279.946 ms/op
                 executeQuery·p0.99:   3279.946 ms/op
                 executeQuery·p0.999:  3279.946 ms/op
                 executeQuery·p0.9999: 3279.946 ms/op
                 executeQuery·p1.00:   3279.946 ms/op

Iteration   3: 3207.594 ±(99.9%) 819.518 ms/op
                 executeQuery·p0.00:   3095.396 ms/op
                 executeQuery·p0.50:   3177.185 ms/op
                 executeQuery·p0.90:   3380.609 ms/op
                 executeQuery·p0.95:   3380.609 ms/op
                 executeQuery·p0.99:   3380.609 ms/op
                 executeQuery·p0.999:  3380.609 ms/op
                 executeQuery·p0.9999: 3380.609 ms/op
                 executeQuery·p1.00:   3380.609 ms/op

Iteration   4: 3249.537 ±(99.9%) 1019.510 ms/op
                 executeQuery·p0.00:   3091.202 ms/op
                 executeQuery·p0.50:   3235.906 ms/op
                 executeQuery·p0.90:   3435.135 ms/op
                 executeQuery·p0.95:   3435.135 ms/op
                 executeQuery·p0.99:   3435.135 ms/op
                 executeQuery·p0.999:  3435.135 ms/op
                 executeQuery·p0.9999: 3435.135 ms/op
                 executeQuery·p1.00:   3435.135 ms/op

Iteration   5: 3152.019 ±(99.9%) 624.559 ms/op
                 executeQuery·p0.00:   3099.591 ms/op
                 executeQuery·p0.50:   3105.882 ms/op
                 executeQuery·p0.90:   3296.723 ms/op
                 executeQuery·p0.95:   3296.723 ms/op
                 executeQuery·p0.99:   3296.723 ms/op
                 executeQuery·p0.999:  3296.723 ms/op
                 executeQuery·p0.9999: 3296.723 ms/op
                 executeQuery·p1.00:   3296.723 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 37
  mean =   3368.366 ±(99.9%) 182.855 ms/op

  Histogram, ms/op:
    [3000.000, 3125.000) = 8 
    [3125.000, 3250.000) = 9 
    [3250.000, 3375.000) = 8 
    [3375.000, 3500.000) = 4 
    [3500.000, 3625.000) = 1 
    [3625.000, 3750.000) = 1 
    [3750.000, 3875.000) = 2 
    [3875.000, 4000.000) = 2 
    [4000.000, 4125.000) = 0 
    [4125.000, 4250.000) = 2 
    [4250.000, 4375.000) = 0 
    [4375.000, 4500.000) = 0 
    [4500.000, 4625.000) = 0 
    [4625.000, 4750.000) = 0 
    [4750.000, 4875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3091.202 ms/op
     p(50.0000) =   3275.751 ms/op
     p(90.0000) =   3899.025 ms/op
     p(95.0000) =   4172.494 ms/op
     p(99.0000) =   4202.693 ms/op
     p(99.9000) =   4202.693 ms/op
     p(99.9900) =   4202.693 ms/op
     p(99.9990) =   4202.693 ms/op
     p(99.9999) =   4202.693 ms/op
    p(100.0000) =   4202.693 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 54.44% complete, ETA 04:12:44
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1010762841 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1010762841() {
        this(4);
    }
    public KeyMultiRecordMap_1010762841(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1010762841 join_map = new KeyMultiRecordMap_1010762841();
private final class KeyMultiRecordMap_819988167 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_819988167() {
        this(4);
    }
    public KeyMultiRecordMap_819988167(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_819988167 join_map_0 = new KeyMultiRecordMap_819988167();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

37513.855 ms/op
# Warmup Iteration   2: 38654.706 ms/op
# Warmup Iteration   3: 43889.197 ms/op
# Warmup Iteration   4: 39996.883 ms/op
# Warmup Iteration   5: 41271.951 ms/op
Iteration   1: 40063.992 ms/op
                 executeQuery·p0.00:   40063.992 ms/op
                 executeQuery·p0.50:   40063.992 ms/op
                 executeQuery·p0.90:   40063.992 ms/op
                 executeQuery·p0.95:   40063.992 ms/op
                 executeQuery·p0.99:   40063.992 ms/op
                 executeQuery·p0.999:  40063.992 ms/op
                 executeQuery·p0.9999: 40063.992 ms/op
                 executeQuery·p1.00:   40063.992 ms/op

Iteration   2: 38587.597 ms/op
                 executeQuery·p0.00:   38587.597 ms/op
                 executeQuery·p0.50:   38587.597 ms/op
                 executeQuery·p0.90:   38587.597 ms/op
                 executeQuery·p0.95:   38587.597 ms/op
                 executeQuery·p0.99:   38587.597 ms/op
                 executeQuery·p0.999:  38587.597 ms/op
                 executeQuery·p0.9999: 38587.597 ms/op
                 executeQuery·p1.00:   38587.597 ms/op

Iteration   3: 40667.972 ms/op
                 executeQuery·p0.00:   40667.972 ms/op
                 executeQuery·p0.50:   40667.972 ms/op
                 executeQuery·p0.90:   40667.972 ms/op
                 executeQuery·p0.95:   40667.972 ms/op
                 executeQuery·p0.99:   40667.972 ms/op
                 executeQuery·p0.999:  40667.972 ms/op
                 executeQuery·p0.9999: 40667.972 ms/op
                 executeQuery·p1.00:   40667.972 ms/op

Iteration   4: 39325.794 ms/op
                 executeQuery·p0.00:   39325.794 ms/op
                 executeQuery·p0.50:   39325.794 ms/op
                 executeQuery·p0.90:   39325.794 ms/op
                 executeQuery·p0.95:   39325.794 ms/op
                 executeQuery·p0.99:   39325.794 ms/op
                 executeQuery·p0.999:  39325.794 ms/op
                 executeQuery·p0.9999: 39325.794 ms/op
                 executeQuery·p1.00:   39325.794 ms/op

Iteration   5: 41070.625 ms/op
                 executeQuery·p0.00:   41070.625 ms/op
                 executeQuery·p0.50:   41070.625 ms/op
                 executeQuery·p0.90:   41070.625 ms/op
                 executeQuery·p0.95:   41070.625 ms/op
                 executeQuery·p0.99:   41070.625 ms/op
                 executeQuery·p0.999:  41070.625 ms/op
                 executeQuery·p0.9999: 41070.625 ms/op
                 executeQuery·p1.00:   41070.625 ms/op


# Run progress: 55.00% complete, ETA 04:12:38
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1010762841 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1010762841() {
        this(4);
    }
    public KeyMultiRecordMap_1010762841(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1010762841 join_map = new KeyMultiRecordMap_1010762841();
private final class KeyMultiRecordMap_819988167 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_819988167() {
        this(4);
    }
    public KeyMultiRecordMap_819988167(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_819988167 join_map_0 = new KeyMultiRecordMap_819988167();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

37446.746 ms/op
# Warmup Iteration   2: 35634.807 ms/op
# Warmup Iteration   3: 37513.855 ms/op
# Warmup Iteration   4: 36373.004 ms/op
# Warmup Iteration   5: 36641.440 ms/op
Iteration   1: 35701.916 ms/op
                 executeQuery·p0.00:   35701.916 ms/op
                 executeQuery·p0.50:   35701.916 ms/op
                 executeQuery·p0.90:   35701.916 ms/op
                 executeQuery·p0.95:   35701.916 ms/op
                 executeQuery·p0.99:   35701.916 ms/op
                 executeQuery·p0.999:  35701.916 ms/op
                 executeQuery·p0.9999: 35701.916 ms/op
                 executeQuery·p1.00:   35701.916 ms/op

Iteration   2: 37513.855 ms/op
                 executeQuery·p0.00:   37513.855 ms/op
                 executeQuery·p0.50:   37513.855 ms/op
                 executeQuery·p0.90:   37513.855 ms/op
                 executeQuery·p0.95:   37513.855 ms/op
                 executeQuery·p0.99:   37513.855 ms/op
                 executeQuery·p0.999:  37513.855 ms/op
                 executeQuery·p0.9999: 37513.855 ms/op
                 executeQuery·p1.00:   37513.855 ms/op

Iteration   3: 37513.855 ms/op
                 executeQuery·p0.00:   37513.855 ms/op
                 executeQuery·p0.50:   37513.855 ms/op
                 executeQuery·p0.90:   37513.855 ms/op
                 executeQuery·p0.95:   37513.855 ms/op
                 executeQuery·p0.99:   37513.855 ms/op
                 executeQuery·p0.999:  37513.855 ms/op
                 executeQuery·p0.9999: 37513.855 ms/op
                 executeQuery·p1.00:   37513.855 ms/op

Iteration   4: 37245.420 ms/op
                 executeQuery·p0.00:   37245.420 ms/op
                 executeQuery·p0.50:   37245.420 ms/op
                 executeQuery·p0.90:   37245.420 ms/op
                 executeQuery·p0.95:   37245.420 ms/op
                 executeQuery·p0.99:   37245.420 ms/op
                 executeQuery·p0.999:  37245.420 ms/op
                 executeQuery·p0.9999: 37245.420 ms/op
                 executeQuery·p1.00:   37245.420 ms/op

Iteration   5: 37245.420 ms/op
                 executeQuery·p0.00:   37245.420 ms/op
                 executeQuery·p0.50:   37245.420 ms/op
                 executeQuery·p0.90:   37245.420 ms/op
                 executeQuery·p0.95:   37245.420 ms/op
                 executeQuery·p0.99:   37245.420 ms/op
                 executeQuery·p0.999:  37245.420 ms/op
                 executeQuery·p0.9999: 37245.420 ms/op
                 executeQuery·p1.00:   37245.420 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  38493.644 ±(99.9%) 2636.287 ms/op

  Histogram, ms/op:
    [35000.000, 35500.000) = 0 
    [35500.000, 36000.000) = 1 
    [36000.000, 36500.000) = 0 
    [36500.000, 37000.000) = 0 
    [37000.000, 37500.000) = 2 
    [37500.000, 38000.000) = 2 
    [38000.000, 38500.000) = 0 
    [38500.000, 39000.000) = 1 
    [39000.000, 39500.000) = 1 
    [39500.000, 40000.000) = 0 
    [40000.000, 40500.000) = 1 
    [40500.000, 41000.000) = 1 
    [41000.000, 41500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  35701.916 ms/op
     p(50.0000) =  38050.726 ms/op
     p(90.0000) =  41030.359 ms/op
     p(95.0000) =  41070.625 ms/op
     p(99.0000) =  41070.625 ms/op
     p(99.9000) =  41070.625 ms/op
     p(99.9900) =  41070.625 ms/op
     p(99.9990) =  41070.625 ms/op
     p(99.9999) =  41070.625 ms/op
    p(100.0000) =  41070.625 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 55.56% complete, ETA 04:11:58
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_62273578 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_62273578() {
        this(4);
    }
    public KeyMultiRecordMap_62273578(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_62273578 join_map = new KeyMultiRecordMap_62273578();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1700013554 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1700013554() {
        this(4);
    }
    public KeyMultiRecordMap_1700013554(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1700013554 join_map_0 = new KeyMultiRecordMap_1700013554();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

3446.320 ±(99.9%) 1576.257 ms/op
# Warmup Iteration   2: 3605.703 ±(99.9%) 1685.751 ms/op
# Warmup Iteration   3: 3565.158 ±(99.9%) 1536.123 ms/op
# Warmup Iteration   4: 3520.419 ±(99.9%) 1294.820 ms/op
# Warmup Iteration   5: 3485.467 ±(99.9%) 3247.358 ms/op
Iteration   1: 3688.191 ±(99.9%) 3600.766 ms/op
                 executeQuery·p0.00:   3464.495 ms/op
                 executeQuery·p0.50:   3762.291 ms/op
                 executeQuery·p0.90:   3837.788 ms/op
                 executeQuery·p0.95:   3837.788 ms/op
                 executeQuery·p0.99:   3837.788 ms/op
                 executeQuery·p0.999:  3837.788 ms/op
                 executeQuery·p0.9999: 3837.788 ms/op
                 executeQuery·p1.00:   3837.788 ms/op

Iteration   2: 3569.353 ±(99.9%) 3297.458 ms/op
                 executeQuery·p0.00:   3435.135 ms/op
                 executeQuery·p0.50:   3498.050 ms/op
                 executeQuery·p0.90:   3774.874 ms/op
                 executeQuery·p0.95:   3774.874 ms/op
                 executeQuery·p0.99:   3774.874 ms/op
                 executeQuery·p0.999:  3774.874 ms/op
                 executeQuery·p0.9999: 3774.874 ms/op
                 executeQuery·p1.00:   3774.874 ms/op

Iteration   3: 3408.571 ±(99.9%) 1808.090 ms/op
                 executeQuery·p0.00:   3296.723 ms/op
                 executeQuery·p0.50:   3443.524 ms/op
                 executeQuery·p0.90:   3485.467 ms/op
                 executeQuery·p0.95:   3485.467 ms/op
                 executeQuery·p0.99:   3485.467 ms/op
                 executeQuery·p0.999:  3485.467 ms/op
                 executeQuery·p0.9999: 3485.467 ms/op
                 executeQuery·p1.00:   3485.467 ms/op

Iteration   4: 3533.002 ±(99.9%) 2972.802 ms/op
                 executeQuery·p0.00:   3393.192 ms/op
                 executeQuery·p0.50:   3493.855 ms/op
                 executeQuery·p0.90:   3711.959 ms/op
                 executeQuery·p0.95:   3711.959 ms/op
                 executeQuery·p0.99:   3711.959 ms/op
                 executeQuery·p0.999:  3711.959 ms/op
                 executeQuery·p0.9999: 3711.959 ms/op
                 executeQuery·p1.00:   3711.959 ms/op

Iteration   5: 3474.282 ±(99.9%) 441.787 ms/op
                 executeQuery·p0.00:   3460.301 ms/op
                 executeQuery·p0.50:   3460.301 ms/op
                 executeQuery·p0.90:   3502.244 ms/op
                 executeQuery·p0.95:   3502.244 ms/op
                 executeQuery·p0.99:   3502.244 ms/op
                 executeQuery·p0.999:  3502.244 ms/op
                 executeQuery·p0.9999: 3502.244 ms/op
                 executeQuery·p1.00:   3502.244 ms/op


# Run progress: 56.11% complete, ETA 04:07:45
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1000178618 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1000178618() {
        this(4);
    }
    public KeyMultiRecordMap_1000178618(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1000178618 join_map = new KeyMultiRecordMap_1000178618();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_2077080994 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_2077080994() {
        this(4);
    }
    public KeyMultiRecordMap_2077080994(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_2077080994 join_map_0 = new KeyMultiRecordMap_2077080994();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

3391.794 ±(99.9%) 2733.729 ms/op
# Warmup Iteration   2: 3499.448 ±(99.9%) 2290.911 ms/op
# Warmup Iteration   3: 3447.718 ±(99.9%) 1989.513 ms/op
# Warmup Iteration   4: 3415.562 ±(99.9%) 574.323 ms/op
# Warmup Iteration   5: 3465.893 ±(99.9%) 4328.834 ms/op
Iteration   1: 3560.964 ±(99.9%) 2833.297 ms/op
                 executeQuery·p0.00:   3430.941 ms/op
                 executeQuery·p0.50:   3519.021 ms/op
                 executeQuery·p0.90:   3732.931 ms/op
                 executeQuery·p0.95:   3732.931 ms/op
                 executeQuery·p0.99:   3732.931 ms/op
                 executeQuery·p0.999:  3732.931 ms/op
                 executeQuery·p0.9999: 3732.931 ms/op
                 executeQuery·p1.00:   3732.931 ms/op

Iteration   2: 3562.362 ±(99.9%) 2839.834 ms/op
                 executeQuery·p0.00:   3414.163 ms/op
                 executeQuery·p0.50:   3548.381 ms/op
                 executeQuery·p0.90:   3724.542 ms/op
                 executeQuery·p0.95:   3724.542 ms/op
                 executeQuery·p0.99:   3724.542 ms/op
                 executeQuery·p0.999:  3724.542 ms/op
                 executeQuery·p0.9999: 3724.542 ms/op
                 executeQuery·p1.00:   3724.542 ms/op

Iteration   3: 3411.367 ±(99.9%) 4092.434 ms/op
                 executeQuery·p0.00:   3242.197 ms/op
                 executeQuery·p0.50:   3326.083 ms/op
                 executeQuery·p0.90:   3665.822 ms/op
                 executeQuery·p0.95:   3665.822 ms/op
                 executeQuery·p0.99:   3665.822 ms/op
                 executeQuery·p0.999:  3665.822 ms/op
                 executeQuery·p0.9999: 3665.822 ms/op
                 executeQuery·p1.00:   3665.822 ms/op

Iteration   4: 3484.069 ±(99.9%) 1765.490 ms/op
                 executeQuery·p0.00:   3414.163 ms/op
                 executeQuery·p0.50:   3443.524 ms/op
                 executeQuery·p0.90:   3594.519 ms/op
                 executeQuery·p0.95:   3594.519 ms/op
                 executeQuery·p0.99:   3594.519 ms/op
                 executeQuery·p0.999:  3594.519 ms/op
                 executeQuery·p0.9999: 3594.519 ms/op
                 executeQuery·p1.00:   3594.519 ms/op

Iteration   5: 3474.282 ±(99.9%) 1540.563 ms/op
                 executeQuery·p0.00:   3384.803 ms/op
                 executeQuery·p0.50:   3485.467 ms/op
                 executeQuery·p0.90:   3552.575 ms/op
                 executeQuery·p0.95:   3552.575 ms/op
                 executeQuery·p0.99:   3552.575 ms/op
                 executeQuery·p0.999:  3552.575 ms/op
                 executeQuery·p0.9999: 3552.575 ms/op
                 executeQuery·p1.00:   3552.575 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   3516.644 ±(99.9%) 99.200 ms/op

  Histogram, ms/op:
    [3200.000, 3250.000) = 1 
    [3250.000, 3300.000) = 1 
    [3300.000, 3350.000) = 1 
    [3350.000, 3400.000) = 2 
    [3400.000, 3450.000) = 6 
    [3450.000, 3500.000) = 7 
    [3500.000, 3550.000) = 3 
    [3550.000, 3600.000) = 2 
    [3600.000, 3650.000) = 0 
    [3650.000, 3700.000) = 1 
    [3700.000, 3750.000) = 3 
    [3750.000, 3800.000) = 2 
    [3800.000, 3850.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3242.197 ms/op
     p(50.0000) =   3485.467 ms/op
     p(90.0000) =   3759.355 ms/op
     p(95.0000) =   3803.185 ms/op
     p(99.0000) =   3837.788 ms/op
     p(99.9000) =   3837.788 ms/op
     p(99.9900) =   3837.788 ms/op
     p(99.9990) =   3837.788 ms/op
     p(99.9999) =   3837.788 ms/op
    p(100.0000) =   3837.788 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 56.67% complete, ETA 04:03:34
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_59786220 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_59786220() {
        this(4);
    }
    public KeyMultiRecordMap_59786220(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_59786220 join_map = new KeyMultiRecordMap_59786220();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_2113474225 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_2113474225() {
        this(4);
    }
    public KeyMultiRecordMap_2113474225(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_2113474225 join_map_0 = new KeyMultiRecordMap_2113474225();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

36507.222 ms/op
# Warmup Iteration   2: 37312.528 ms/op
# Warmup Iteration   3: 35567.698 ms/op
# Warmup Iteration   4: 35030.827 ms/op
# Warmup Iteration   5: 37849.399 ms/op
Iteration   1: 36976.984 ms/op
                 executeQuery·p0.00:   36976.984 ms/op
                 executeQuery·p0.50:   36976.984 ms/op
                 executeQuery·p0.90:   36976.984 ms/op
                 executeQuery·p0.95:   36976.984 ms/op
                 executeQuery·p0.99:   36976.984 ms/op
                 executeQuery·p0.999:  36976.984 ms/op
                 executeQuery·p0.9999: 36976.984 ms/op
                 executeQuery·p1.00:   36976.984 ms/op

Iteration   2: 37983.617 ms/op
                 executeQuery·p0.00:   37983.617 ms/op
                 executeQuery·p0.50:   37983.617 ms/op
                 executeQuery·p0.90:   37983.617 ms/op
                 executeQuery·p0.95:   37983.617 ms/op
                 executeQuery·p0.99:   37983.617 ms/op
                 executeQuery·p0.999:  37983.617 ms/op
                 executeQuery·p0.9999: 37983.617 ms/op
                 executeQuery·p1.00:   37983.617 ms/op

Iteration   3: 38050.726 ms/op
                 executeQuery·p0.00:   38050.726 ms/op
                 executeQuery·p0.50:   38050.726 ms/op
                 executeQuery·p0.90:   38050.726 ms/op
                 executeQuery·p0.95:   38050.726 ms/op
                 executeQuery·p0.99:   38050.726 ms/op
                 executeQuery·p0.999:  38050.726 ms/op
                 executeQuery·p0.9999: 38050.726 ms/op
                 executeQuery·p1.00:   38050.726 ms/op

Iteration   4: 37513.855 ms/op
                 executeQuery·p0.00:   37513.855 ms/op
                 executeQuery·p0.50:   37513.855 ms/op
                 executeQuery·p0.90:   37513.855 ms/op
                 executeQuery·p0.95:   37513.855 ms/op
                 executeQuery·p0.99:   37513.855 ms/op
                 executeQuery·p0.999:  37513.855 ms/op
                 executeQuery·p0.9999: 37513.855 ms/op
                 executeQuery·p1.00:   37513.855 ms/op

Iteration   5: 36775.657 ms/op
                 executeQuery·p0.00:   36775.657 ms/op
                 executeQuery·p0.50:   36775.657 ms/op
                 executeQuery·p0.90:   36775.657 ms/op
                 executeQuery·p0.95:   36775.657 ms/op
                 executeQuery·p0.99:   36775.657 ms/op
                 executeQuery·p0.999:  36775.657 ms/op
                 executeQuery·p0.9999: 36775.657 ms/op
                 executeQuery·p1.00:   36775.657 ms/op


# Run progress: 57.22% complete, ETA 04:02:44
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1000178618 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1000178618() {
        this(4);
    }
    public KeyMultiRecordMap_1000178618(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1000178618 join_map = new KeyMultiRecordMap_1000178618();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_2077080994 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_2077080994() {
        this(4);
    }
    public KeyMultiRecordMap_2077080994(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_2077080994 join_map_0 = new KeyMultiRecordMap_2077080994();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

36440.113 ms/op
# Warmup Iteration   2: 37446.746 ms/op
# Warmup Iteration   3: 35030.827 ms/op
# Warmup Iteration   4: 37379.637 ms/op
# Warmup Iteration   5: 38520.488 ms/op
Iteration   1: 37513.855 ms/op
                 executeQuery·p0.00:   37513.855 ms/op
                 executeQuery·p0.50:   37513.855 ms/op
                 executeQuery·p0.90:   37513.855 ms/op
                 executeQuery·p0.95:   37513.855 ms/op
                 executeQuery·p0.99:   37513.855 ms/op
                 executeQuery·p0.999:  37513.855 ms/op
                 executeQuery·p0.9999: 37513.855 ms/op
                 executeQuery·p1.00:   37513.855 ms/op

Iteration   2: 37849.399 ms/op
                 executeQuery·p0.00:   37849.399 ms/op
                 executeQuery·p0.50:   37849.399 ms/op
                 executeQuery·p0.90:   37849.399 ms/op
                 executeQuery·p0.95:   37849.399 ms/op
                 executeQuery·p0.99:   37849.399 ms/op
                 executeQuery·p0.999:  37849.399 ms/op
                 executeQuery·p0.9999: 37849.399 ms/op
                 executeQuery·p1.00:   37849.399 ms/op

Iteration   3: 36104.569 ms/op
                 executeQuery·p0.00:   36104.569 ms/op
                 executeQuery·p0.50:   36104.569 ms/op
                 executeQuery·p0.90:   36104.569 ms/op
                 executeQuery·p0.95:   36104.569 ms/op
                 executeQuery·p0.99:   36104.569 ms/op
                 executeQuery·p0.999:  36104.569 ms/op
                 executeQuery·p0.9999: 36104.569 ms/op
                 executeQuery·p1.00:   36104.569 ms/op

Iteration   4: 37446.746 ms/op
                 executeQuery·p0.00:   37446.746 ms/op
                 executeQuery·p0.50:   37446.746 ms/op
                 executeQuery·p0.90:   37446.746 ms/op
                 executeQuery·p0.95:   37446.746 ms/op
                 executeQuery·p0.99:   37446.746 ms/op
                 executeQuery·p0.999:  37446.746 ms/op
                 executeQuery·p0.9999: 37446.746 ms/op
                 executeQuery·p1.00:   37446.746 ms/op

Iteration   5: 37715.182 ms/op
                 executeQuery·p0.00:   37715.182 ms/op
                 executeQuery·p0.50:   37715.182 ms/op
                 executeQuery·p0.90:   37715.182 ms/op
                 executeQuery·p0.95:   37715.182 ms/op
                 executeQuery·p0.99:   37715.182 ms/op
                 executeQuery·p0.999:  37715.182 ms/op
                 executeQuery·p0.9999: 37715.182 ms/op
                 executeQuery·p1.00:   37715.182 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  37393.059 ±(99.9%) 920.989 ms/op

  Histogram, ms/op:
    [36000.000, 36250.000) = 1 
    [36250.000, 36500.000) = 0 
    [36500.000, 36750.000) = 0 
    [36750.000, 37000.000) = 2 
    [37000.000, 37250.000) = 0 
    [37250.000, 37500.000) = 1 
    [37500.000, 37750.000) = 3 
    [37750.000, 38000.000) = 2 
    [38000.000, 38250.000) = 1 
    [38250.000, 38500.000) = 0 
    [38500.000, 38750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  36104.569 ms/op
     p(50.0000) =  37513.855 ms/op
     p(90.0000) =  38044.015 ms/op
     p(95.0000) =  38050.726 ms/op
     p(99.0000) =  38050.726 ms/op
     p(99.9000) =  38050.726 ms/op
     p(99.9900) =  38050.726 ms/op
     p(99.9990) =  38050.726 ms/op
     p(99.9999) =  38050.726 ms/op
    p(100.0000) =  38050.726 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 57.78% complete, ETA 04:01:49
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1505.456 ±(99.9%) 281.545 ms/op
# Warmup Iteration   2: 1486.581 ±(99.9%) 32.430 ms/op
# Warmup Iteration   3: 1474.597 ±(99.9%) 31.735 ms/op
# Warmup Iteration   4: 1479.391 ±(99.9%) 23.594 ms/op
# Warmup Iteration   5: 1563.876 ±(99.9%) 16.523 ms/op
Iteration   1: 1573.164 ±(99.9%) 15.043 ms/op
                 executeQuery·p0.00:   1566.573 ms/op
                 executeQuery·p0.50:   1570.767 ms/op
                 executeQuery·p0.90:   1583.350 ms/op
                 executeQuery·p0.95:   1583.350 ms/op
                 executeQuery·p0.99:   1583.350 ms/op
                 executeQuery·p0.999:  1583.350 ms/op
                 executeQuery·p0.9999: 1583.350 ms/op
                 executeQuery·p1.00:   1583.350 ms/op

Iteration   2: 1567.471 ±(99.9%) 4.609 ms/op
                 executeQuery·p0.00:   1564.475 ms/op
                 executeQuery·p0.50:   1566.573 ms/op
                 executeQuery·p0.90:   1570.767 ms/op
                 executeQuery·p0.95:   1570.767 ms/op
                 executeQuery·p0.99:   1570.767 ms/op
                 executeQuery·p0.999:  1570.767 ms/op
                 executeQuery·p0.9999: 1570.767 ms/op
                 executeQuery·p1.00:   1570.767 ms/op

Iteration   3: 1573.164 ±(99.9%) 9.993 ms/op
                 executeQuery·p0.00:   1566.573 ms/op
                 executeQuery·p0.50:   1572.864 ms/op
                 executeQuery·p0.90:   1579.155 ms/op
                 executeQuery·p0.95:   1579.155 ms/op
                 executeQuery·p0.99:   1579.155 ms/op
                 executeQuery·p0.999:  1579.155 ms/op
                 executeQuery·p0.9999: 1579.155 ms/op
                 executeQuery·p1.00:   1579.155 ms/op

Iteration   4: 1488.678 ±(99.9%) 126.163 ms/op
                 executeQuery·p0.00:   1444.938 ms/op
                 executeQuery·p0.50:   1478.492 ms/op
                 executeQuery·p0.90:   1610.613 ms/op
                 executeQuery·p0.95:   1610.613 ms/op
                 executeQuery·p0.99:   1610.613 ms/op
                 executeQuery·p0.999:  1610.613 ms/op
                 executeQuery·p0.9999: 1610.613 ms/op
                 executeQuery·p1.00:   1610.613 ms/op

Iteration   5: 1481.188 ±(99.9%) 8.926 ms/op
                 executeQuery·p0.00:   1476.395 ms/op
                 executeQuery·p0.50:   1480.589 ms/op
                 executeQuery·p0.90:   1488.978 ms/op
                 executeQuery·p0.95:   1488.978 ms/op
                 executeQuery·p0.99:   1488.978 ms/op
                 executeQuery·p0.999:  1488.978 ms/op
                 executeQuery·p0.9999: 1488.978 ms/op
                 executeQuery·p1.00:   1488.978 ms/op


# Run progress: 58.33% complete, ETA 03:57:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1563.277 ±(99.9%) 264.767 ms/op
# Warmup Iteration   2: 1536.613 ±(99.9%) 47.991 ms/op
# Warmup Iteration   3: 1547.998 ±(99.9%) 29.043 ms/op
# Warmup Iteration   4: 1541.706 ±(99.9%) 11.706 ms/op
# Warmup Iteration   5: 1547.399 ±(99.9%) 13.199 ms/op
Iteration   1: 1553.091 ±(99.9%) 15.631 ms/op
                 executeQuery·p0.00:   1541.407 ms/op
                 executeQuery·p0.50:   1556.087 ms/op
                 executeQuery·p0.90:   1560.281 ms/op
                 executeQuery·p0.95:   1560.281 ms/op
                 executeQuery·p0.99:   1560.281 ms/op
                 executeQuery·p0.999:  1560.281 ms/op
                 executeQuery·p0.9999: 1560.281 ms/op
                 executeQuery·p1.00:   1560.281 ms/op

Iteration   2: 1537.212 ±(99.9%) 16.133 ms/op
                 executeQuery·p0.00:   1530.921 ms/op
                 executeQuery·p0.50:   1535.115 ms/op
                 executeQuery·p0.90:   1547.698 ms/op
                 executeQuery·p0.95:   1547.698 ms/op
                 executeQuery·p0.99:   1547.698 ms/op
                 executeQuery·p0.999:  1547.698 ms/op
                 executeQuery·p0.9999: 1547.698 ms/op
                 executeQuery·p1.00:   1547.698 ms/op

Iteration   3: 1551.593 ±(99.9%) 40.303 ms/op
                 executeQuery·p0.00:   1539.310 ms/op
                 executeQuery·p0.50:   1541.407 ms/op
                 executeQuery·p0.90:   1587.544 ms/op
                 executeQuery·p0.95:   1587.544 ms/op
                 executeQuery·p0.99:   1587.544 ms/op
                 executeQuery·p0.999:  1587.544 ms/op
                 executeQuery·p0.9999: 1587.544 ms/op
                 executeQuery·p1.00:   1587.544 ms/op

Iteration   4: 1552.192 ±(99.9%) 36.119 ms/op
                 executeQuery·p0.00:   1537.212 ms/op
                 executeQuery·p0.50:   1547.698 ms/op
                 executeQuery·p0.90:   1585.447 ms/op
                 executeQuery·p0.95:   1585.447 ms/op
                 executeQuery·p0.99:   1585.447 ms/op
                 executeQuery·p0.999:  1585.447 ms/op
                 executeQuery·p0.9999: 1585.447 ms/op
                 executeQuery·p1.00:   1585.447 ms/op

Iteration   5: 1543.204 ±(99.9%) 4.250 ms/op
                 executeQuery·p0.00:   1541.407 ms/op
                 executeQuery·p0.50:   1543.504 ms/op
                 executeQuery·p0.90:   1545.601 ms/op
                 executeQuery·p0.95:   1545.601 ms/op
                 executeQuery·p0.99:   1545.601 ms/op
                 executeQuery·p0.999:  1545.601 ms/op
                 executeQuery·p0.9999: 1545.601 ms/op
                 executeQuery·p1.00:   1545.601 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 70
  mean =   1542.096 ±(99.9%) 14.816 ms/op

  Histogram, ms/op:
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 2 
    [1450.000, 1475.000) = 1 
    [1475.000, 1500.000) = 10 
    [1500.000, 1525.000) = 0 
    [1525.000, 1550.000) = 27 
    [1550.000, 1575.000) = 22 
    [1575.000, 1600.000) = 7 
    [1600.000, 1625.000) = 1 
    [1625.000, 1650.000) = 0 
    [1650.000, 1675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1444.938 ms/op
     p(50.0000) =   1547.698 ms/op
     p(90.0000) =   1577.058 ms/op
     p(95.0000) =   1584.293 ms/op
     p(99.0000) =   1610.613 ms/op
     p(99.9000) =   1610.613 ms/op
     p(99.9900) =   1610.613 ms/op
     p(99.9990) =   1610.613 ms/op
     p(99.9999) =   1610.613 ms/op
    p(100.0000) =   1610.613 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 58.89% complete, ETA 03:53:36
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
21105.738 ms/op
# Warmup Iteration   2: 23488.102 ms/op
# Warmup Iteration   3: 23018.340 ms/op
# Warmup Iteration   4: 18220.057 ms/op
# Warmup Iteration   5: 23588.766 ms/op
Iteration   1: 18253.611 ms/op
                 executeQuery·p0.00:   18253.611 ms/op
                 executeQuery·p0.50:   18253.611 ms/op
                 executeQuery·p0.90:   18253.611 ms/op
                 executeQuery·p0.95:   18253.611 ms/op
                 executeQuery·p0.99:   18253.611 ms/op
                 executeQuery·p0.999:  18253.611 ms/op
                 executeQuery·p0.9999: 18253.611 ms/op
                 executeQuery·p1.00:   18253.611 ms/op

Iteration   2: 18287.165 ms/op
                 executeQuery·p0.00:   18287.165 ms/op
                 executeQuery·p0.50:   18287.165 ms/op
                 executeQuery·p0.90:   18287.165 ms/op
                 executeQuery·p0.95:   18287.165 ms/op
                 executeQuery·p0.99:   18287.165 ms/op
                 executeQuery·p0.999:  18287.165 ms/op
                 executeQuery·p0.9999: 18287.165 ms/op
                 executeQuery·p1.00:   18287.165 ms/op

Iteration   3: 18320.720 ms/op
                 executeQuery·p0.00:   18320.720 ms/op
                 executeQuery·p0.50:   18320.720 ms/op
                 executeQuery·p0.90:   18320.720 ms/op
                 executeQuery·p0.95:   18320.720 ms/op
                 executeQuery·p0.99:   18320.720 ms/op
                 executeQuery·p0.999:  18320.720 ms/op
                 executeQuery·p0.9999: 18320.720 ms/op
                 executeQuery·p1.00:   18320.720 ms/op

Iteration   4: 18320.720 ms/op
                 executeQuery·p0.00:   18320.720 ms/op
                 executeQuery·p0.50:   18320.720 ms/op
                 executeQuery·p0.90:   18320.720 ms/op
                 executeQuery·p0.95:   18320.720 ms/op
                 executeQuery·p0.99:   18320.720 ms/op
                 executeQuery·p0.999:  18320.720 ms/op
                 executeQuery·p0.9999: 18320.720 ms/op
                 executeQuery·p1.00:   18320.720 ms/op

Iteration   5: 18320.720 ms/op
                 executeQuery·p0.00:   18320.720 ms/op
                 executeQuery·p0.50:   18320.720 ms/op
                 executeQuery·p0.90:   18320.720 ms/op
                 executeQuery·p0.95:   18320.720 ms/op
                 executeQuery·p0.99:   18320.720 ms/op
                 executeQuery·p0.999:  18320.720 ms/op
                 executeQuery·p0.9999: 18320.720 ms/op
                 executeQuery·p1.00:   18320.720 ms/op


# Run progress: 59.44% complete, ETA 03:50:44
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
22548.578 ms/op
# Warmup Iteration   2: 23488.102 ms/op
# Warmup Iteration   3: 22649.242 ms/op
# Warmup Iteration   4: 21206.401 ms/op
# Warmup Iteration   5: 21273.510 ms/op
Iteration   1: 21273.510 ms/op
                 executeQuery·p0.00:   21273.510 ms/op
                 executeQuery·p0.50:   21273.510 ms/op
                 executeQuery·p0.90:   21273.510 ms/op
                 executeQuery·p0.95:   21273.510 ms/op
                 executeQuery·p0.99:   21273.510 ms/op
                 executeQuery·p0.999:  21273.510 ms/op
                 executeQuery·p0.9999: 21273.510 ms/op
                 executeQuery·p1.00:   21273.510 ms/op

Iteration   2: 21038.629 ms/op
                 executeQuery·p0.00:   21038.629 ms/op
                 executeQuery·p0.50:   21038.629 ms/op
                 executeQuery·p0.90:   21038.629 ms/op
                 executeQuery·p0.95:   21038.629 ms/op
                 executeQuery·p0.99:   21038.629 ms/op
                 executeQuery·p0.999:  21038.629 ms/op
                 executeQuery·p0.9999: 21038.629 ms/op
                 executeQuery·p1.00:   21038.629 ms/op

Iteration   3: 21575.500 ms/op
                 executeQuery·p0.00:   21575.500 ms/op
                 executeQuery·p0.50:   21575.500 ms/op
                 executeQuery·p0.90:   21575.500 ms/op
                 executeQuery·p0.95:   21575.500 ms/op
                 executeQuery·p0.99:   21575.500 ms/op
                 executeQuery·p0.999:  21575.500 ms/op
                 executeQuery·p0.9999: 21575.500 ms/op
                 executeQuery·p1.00:   21575.500 ms/op

Iteration   4: 21038.629 ms/op
                 executeQuery·p0.00:   21038.629 ms/op
                 executeQuery·p0.50:   21038.629 ms/op
                 executeQuery·p0.90:   21038.629 ms/op
                 executeQuery·p0.95:   21038.629 ms/op
                 executeQuery·p0.99:   21038.629 ms/op
                 executeQuery·p0.999:  21038.629 ms/op
                 executeQuery·p0.9999: 21038.629 ms/op
                 executeQuery·p1.00:   21038.629 ms/op

Iteration   5: 21575.500 ms/op
                 executeQuery·p0.00:   21575.500 ms/op
                 executeQuery·p0.50:   21575.500 ms/op
                 executeQuery·p0.90:   21575.500 ms/op
                 executeQuery·p0.95:   21575.500 ms/op
                 executeQuery·p0.99:   21575.500 ms/op
                 executeQuery·p0.999:  21575.500 ms/op
                 executeQuery·p0.9999: 21575.500 ms/op
                 executeQuery·p1.00:   21575.500 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  19800.470 ±(99.9%) 2405.771 ms/op

  Histogram, ms/op:
    [18000.000, 18250.000) = 0 
    [18250.000, 18500.000) = 5 
    [18500.000, 18750.000) = 0 
    [18750.000, 19000.000) = 0 
    [19000.000, 19250.000) = 0 
    [19250.000, 19500.000) = 0 
    [19500.000, 19750.000) = 0 
    [19750.000, 20000.000) = 0 
    [20000.000, 20250.000) = 0 
    [20250.000, 20500.000) = 0 
    [20500.000, 20750.000) = 0 
    [20750.000, 21000.000) = 0 
    [21000.000, 21250.000) = 2 
    [21250.000, 21500.000) = 1 
    [21500.000, 21750.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  18253.611 ms/op
     p(50.0000) =  19679.674 ms/op
     p(90.0000) =  21575.500 ms/op
     p(95.0000) =  21575.500 ms/op
     p(99.0000) =  21575.500 ms/op
     p(99.9000) =  21575.500 ms/op
     p(99.9900) =  21575.500 ms/op
     p(99.9990) =  21575.500 ms/op
     p(99.9999) =  21575.500 ms/op
    p(100.0000) =  21575.500 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 60.00% complete, ETA 03:48:02
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1157.744 ±(99.9%) 129.779 ms/op
# Warmup Iteration   2: 1157.628 ±(99.9%) 91.678 ms/op
# Warmup Iteration   3: 1145.511 ±(99.9%) 3.425 ms/op
# Warmup Iteration   4: 1142.948 ±(99.9%) 5.844 ms/op
# Warmup Iteration   5: 1145.744 ±(99.9%) 3.940 ms/op
Iteration   1: 1147.608 ±(99.9%) 1.554 ms/op
                 executeQuery·p0.00:   1147.142 ms/op
                 executeQuery·p0.50:   1147.142 ms/op
                 executeQuery·p0.90:   1149.239 ms/op
                 executeQuery·p0.95:   1149.239 ms/op
                 executeQuery·p0.99:   1149.239 ms/op
                 executeQuery·p0.999:  1149.239 ms/op
                 executeQuery·p0.9999: 1149.239 ms/op
                 executeQuery·p1.00:   1149.239 ms/op

Iteration   2: 1158.560 ±(99.9%) 8.096 ms/op
                 executeQuery·p0.00:   1153.434 ms/op
                 executeQuery·p0.50:   1157.628 ms/op
                 executeQuery·p0.90:   1170.211 ms/op
                 executeQuery·p0.95:   1170.211 ms/op
                 executeQuery·p0.99:   1170.211 ms/op
                 executeQuery·p0.999:  1170.211 ms/op
                 executeQuery·p0.9999: 1170.211 ms/op
                 executeQuery·p1.00:   1170.211 ms/op

Iteration   3: 1156.929 ±(99.9%) 8.075 ms/op
                 executeQuery·p0.00:   1149.239 ms/op
                 executeQuery·p0.50:   1155.531 ms/op
                 executeQuery·p0.90:   1163.919 ms/op
                 executeQuery·p0.95:   1163.919 ms/op
                 executeQuery·p0.99:   1163.919 ms/op
                 executeQuery·p0.999:  1163.919 ms/op
                 executeQuery·p0.9999: 1163.919 ms/op
                 executeQuery·p1.00:   1163.919 ms/op

Iteration   4: 1157.861 ±(99.9%) 4.473 ms/op
                 executeQuery·p0.00:   1153.434 ms/op
                 executeQuery·p0.50:   1159.725 ms/op
                 executeQuery·p0.90:   1159.725 ms/op
                 executeQuery·p0.95:   1159.725 ms/op
                 executeQuery·p0.99:   1159.725 ms/op
                 executeQuery·p0.999:  1159.725 ms/op
                 executeQuery·p0.9999: 1159.725 ms/op
                 executeQuery·p1.00:   1159.725 ms/op

Iteration   5: 1163.803 ±(99.9%) 101.691 ms/op
                 executeQuery·p0.00:   1026.556 ms/op
                 executeQuery·p0.50:   1161.822 ms/op
                 executeQuery·p0.90:   1233.125 ms/op
                 executeQuery·p0.95:   1233.125 ms/op
                 executeQuery·p0.99:   1233.125 ms/op
                 executeQuery·p0.999:  1233.125 ms/op
                 executeQuery·p0.9999: 1233.125 ms/op
                 executeQuery·p1.00:   1233.125 ms/op


# Run progress: 60.56% complete, ETA 03:43:58
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1147.259 ±(99.9%) 125.207 ms/op
# Warmup Iteration   2: 1152.269 ±(99.9%) 90.658 ms/op
# Warmup Iteration   3: 1136.656 ±(99.9%) 6.104 ms/op
# Warmup Iteration   4: 1170.444 ±(99.9%) 24.317 ms/op
# Warmup Iteration   5: 1170.677 ±(99.9%) 13.277 ms/op
Iteration   1: 1174.638 ±(99.9%) 11.747 ms/op
                 executeQuery·p0.00:   1163.919 ms/op
                 executeQuery·p0.50:   1176.502 ms/op
                 executeQuery·p0.90:   1184.891 ms/op
                 executeQuery·p0.95:   1184.891 ms/op
                 executeQuery·p0.99:   1184.891 ms/op
                 executeQuery·p0.999:  1184.891 ms/op
                 executeQuery·p0.9999: 1184.891 ms/op
                 executeQuery·p1.00:   1184.891 ms/op

Iteration   2: 1187.221 ±(99.9%) 113.669 ms/op
                 executeQuery·p0.00:   1042.285 ms/op
                 executeQuery·p0.50:   1176.502 ms/op
                 executeQuery·p0.90:   1262.486 ms/op
                 executeQuery·p0.95:   1262.486 ms/op
                 executeQuery·p0.99:   1262.486 ms/op
                 executeQuery·p0.999:  1262.486 ms/op
                 executeQuery·p0.9999: 1262.486 ms/op
                 executeQuery·p1.00:   1262.486 ms/op

Iteration   3: 1067.346 ±(99.9%) 143.804 ms/op
                 executeQuery·p0.00:   1019.216 ms/op
                 executeQuery·p0.50:   1022.362 ms/op
                 executeQuery·p0.90:   1247.805 ms/op
                 executeQuery·p0.95:   1247.805 ms/op
                 executeQuery·p0.99:   1247.805 ms/op
                 executeQuery·p0.999:  1247.805 ms/op
                 executeQuery·p0.9999: 1247.805 ms/op
                 executeQuery·p1.00:   1247.805 ms/op

Iteration   4: 1021.732 ±(99.9%) 2.914 ms/op
                 executeQuery·p0.00:   1018.167 ms/op
                 executeQuery·p0.50:   1022.362 ms/op
                 executeQuery·p0.90:   1024.354 ms/op
                 executeQuery·p0.95:   1024.459 ms/op
                 executeQuery·p0.99:   1024.459 ms/op
                 executeQuery·p0.999:  1024.459 ms/op
                 executeQuery·p0.9999: 1024.459 ms/op
                 executeQuery·p1.00:   1024.459 ms/op

Iteration   5: 1027.290 ±(99.9%) 10.166 ms/op
                 executeQuery·p0.00:   1023.410 ms/op
                 executeQuery·p0.50:   1024.983 ms/op
                 executeQuery·p0.90:   1043.753 ms/op
                 executeQuery·p0.95:   1045.430 ms/op
                 executeQuery·p0.99:   1045.430 ms/op
                 executeQuery·p0.999:  1045.430 ms/op
                 executeQuery·p0.9999: 1045.430 ms/op
                 executeQuery·p1.00:   1045.430 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 93
  mean =   1123.476 ±(99.9%) 25.672 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 23 
    [1025.000, 1050.000) = 7 
    [1050.000, 1075.000) = 0 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 10 
    [1150.000, 1175.000) = 37 
    [1175.000, 1200.000) = 9 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 4 
    [1250.000, 1275.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   1018.167 ms/op
     p(50.0000) =   1155.531 ms/op
     p(90.0000) =   1184.052 ms/op
     p(95.0000) =   1247.805 ms/op
     p(99.0000) =   1262.486 ms/op
     p(99.9000) =   1262.486 ms/op
     p(99.9900) =   1262.486 ms/op
     p(99.9990) =   1262.486 ms/op
     p(99.9999) =   1262.486 ms/op
    p(100.0000) =   1262.486 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 61.11% complete, ETA 03:39:56
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
14596.178 ms/op
# Warmup Iteration   2: 14814.282 ms/op
# Warmup Iteration   3: 11962.155 ms/op
# Warmup Iteration   4: 14797.505 ms/op
# Warmup Iteration   5: 12297.699 ms/op
Iteration   1: 12297.699 ms/op
                 executeQuery·p0.00:   12297.699 ms/op
                 executeQuery·p0.50:   12297.699 ms/op
                 executeQuery·p0.90:   12297.699 ms/op
                 executeQuery·p0.95:   12297.699 ms/op
                 executeQuery·p0.99:   12297.699 ms/op
                 executeQuery·p0.999:  12297.699 ms/op
                 executeQuery·p0.9999: 12297.699 ms/op
                 executeQuery·p1.00:   12297.699 ms/op

Iteration   2: 11878.269 ms/op
                 executeQuery·p0.00:   11878.269 ms/op
                 executeQuery·p0.50:   11878.269 ms/op
                 executeQuery·p0.90:   11878.269 ms/op
                 executeQuery·p0.95:   11878.269 ms/op
                 executeQuery·p0.99:   11878.269 ms/op
                 executeQuery·p0.999:  11878.269 ms/op
                 executeQuery·p0.9999: 11878.269 ms/op
                 executeQuery·p1.00:   11878.269 ms/op

Iteration   3: 11861.492 ms/op
                 executeQuery·p0.00:   11861.492 ms/op
                 executeQuery·p0.50:   11861.492 ms/op
                 executeQuery·p0.90:   11861.492 ms/op
                 executeQuery·p0.95:   11861.492 ms/op
                 executeQuery·p0.99:   11861.492 ms/op
                 executeQuery·p0.999:  11861.492 ms/op
                 executeQuery·p0.9999: 11861.492 ms/op
                 executeQuery·p1.00:   11861.492 ms/op

Iteration   4: 11861.492 ms/op
                 executeQuery·p0.00:   11861.492 ms/op
                 executeQuery·p0.50:   11861.492 ms/op
                 executeQuery·p0.90:   11861.492 ms/op
                 executeQuery·p0.95:   11861.492 ms/op
                 executeQuery·p0.99:   11861.492 ms/op
                 executeQuery·p0.999:  11861.492 ms/op
                 executeQuery·p0.9999: 11861.492 ms/op
                 executeQuery·p1.00:   11861.492 ms/op

Iteration   5: 11827.937 ms/op
                 executeQuery·p0.00:   11827.937 ms/op
                 executeQuery·p0.50:   11827.937 ms/op
                 executeQuery·p0.90:   11827.937 ms/op
                 executeQuery·p0.95:   11827.937 ms/op
                 executeQuery·p0.99:   11827.937 ms/op
                 executeQuery·p0.999:  11827.937 ms/op
                 executeQuery·p0.9999: 11827.937 ms/op
                 executeQuery·p1.00:   11827.937 ms/op


# Run progress: 61.67% complete, ETA 03:36:13
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
14646.510 ms/op
# Warmup Iteration   2: 14814.282 ms/op
# Warmup Iteration   3: 12046.041 ms/op
# Warmup Iteration   4: 14814.282 ms/op
# Warmup Iteration   5: 12180.259 ms/op
Iteration   1: 12096.373 ms/op
                 executeQuery·p0.00:   12096.373 ms/op
                 executeQuery·p0.50:   12096.373 ms/op
                 executeQuery·p0.90:   12096.373 ms/op
                 executeQuery·p0.95:   12096.373 ms/op
                 executeQuery·p0.99:   12096.373 ms/op
                 executeQuery·p0.999:  12096.373 ms/op
                 executeQuery·p0.9999: 12096.373 ms/op
                 executeQuery·p1.00:   12096.373 ms/op

Iteration   2: 12096.373 ms/op
                 executeQuery·p0.00:   12096.373 ms/op
                 executeQuery·p0.50:   12096.373 ms/op
                 executeQuery·p0.90:   12096.373 ms/op
                 executeQuery·p0.95:   12096.373 ms/op
                 executeQuery·p0.99:   12096.373 ms/op
                 executeQuery·p0.999:  12096.373 ms/op
                 executeQuery·p0.9999: 12096.373 ms/op
                 executeQuery·p1.00:   12096.373 ms/op

Iteration   3: 12750.684 ms/op
                 executeQuery·p0.00:   12750.684 ms/op
                 executeQuery·p0.50:   12750.684 ms/op
                 executeQuery·p0.90:   12750.684 ms/op
                 executeQuery·p0.95:   12750.684 ms/op
                 executeQuery·p0.99:   12750.684 ms/op
                 executeQuery·p0.999:  12750.684 ms/op
                 executeQuery·p0.9999: 12750.684 ms/op
                 executeQuery·p1.00:   12750.684 ms/op

Iteration   4: 12801.016 ms/op
                 executeQuery·p0.00:   12801.016 ms/op
                 executeQuery·p0.50:   12801.016 ms/op
                 executeQuery·p0.90:   12801.016 ms/op
                 executeQuery·p0.95:   12801.016 ms/op
                 executeQuery·p0.99:   12801.016 ms/op
                 executeQuery·p0.999:  12801.016 ms/op
                 executeQuery·p0.9999: 12801.016 ms/op
                 executeQuery·p1.00:   12801.016 ms/op

Iteration   5: 12767.461 ms/op
                 executeQuery·p0.00:   12767.461 ms/op
                 executeQuery·p0.50:   12767.461 ms/op
                 executeQuery·p0.90:   12767.461 ms/op
                 executeQuery·p0.95:   12767.461 ms/op
                 executeQuery·p0.99:   12767.461 ms/op
                 executeQuery·p0.999:  12767.461 ms/op
                 executeQuery·p0.9999: 12767.461 ms/op
                 executeQuery·p1.00:   12767.461 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 10
  mean =  12223.880 ±(99.9%) 613.690 ms/op

  Histogram, ms/op:
    [11800.000, 11900.000) = 4 
    [11900.000, 12000.000) = 0 
    [12000.000, 12100.000) = 2 
    [12100.000, 12200.000) = 0 
    [12200.000, 12300.000) = 1 
    [12300.000, 12400.000) = 0 
    [12400.000, 12500.000) = 0 
    [12500.000, 12600.000) = 0 
    [12600.000, 12700.000) = 0 
    [12700.000, 12800.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  11827.937 ms/op
     p(50.0000) =  12096.373 ms/op
     p(90.0000) =  12797.660 ms/op
     p(95.0000) =  12801.016 ms/op
     p(99.0000) =  12801.016 ms/op
     p(99.9000) =  12801.016 ms/op
     p(99.9900) =  12801.016 ms/op
     p(99.9990) =  12801.016 ms/op
     p(99.9999) =  12801.016 ms/op
    p(100.0000) =  12801.016 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 62.22% complete, ETA 03:32:34
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1621.098 ±(99.9%) 80.295 ms/op
# Warmup Iteration   2: 1639.074 ±(99.9%) 42.497 ms/op
# Warmup Iteration   3: 1656.750 ±(99.9%) 28.326 ms/op
# Warmup Iteration   4: 1672.129 ±(99.9%) 44.269 ms/op
# Warmup Iteration   5: 1745.530 ±(99.9%) 60.623 ms/op
Iteration   1: 1657.449 ±(99.9%) 117.361 ms/op
                 executeQuery·p0.00:   1631.584 ms/op
                 executeQuery·p0.50:   1636.827 ms/op
                 executeQuery·p0.90:   1738.539 ms/op
                 executeQuery·p0.95:   1738.539 ms/op
                 executeQuery·p0.99:   1738.539 ms/op
                 executeQuery·p0.999:  1738.539 ms/op
                 executeQuery·p0.9999: 1738.539 ms/op
                 executeQuery·p1.00:   1738.539 ms/op

Iteration   2: 1631.584 ±(99.9%) 5.454 ms/op
                 executeQuery·p0.00:   1627.390 ms/op
                 executeQuery·p0.50:   1631.584 ms/op
                 executeQuery·p0.90:   1633.681 ms/op
                 executeQuery·p0.95:   1633.681 ms/op
                 executeQuery·p0.99:   1633.681 ms/op
                 executeQuery·p0.999:  1633.681 ms/op
                 executeQuery·p0.9999: 1633.681 ms/op
                 executeQuery·p1.00:   1633.681 ms/op

Iteration   3: 1631.884 ±(99.9%) 4.250 ms/op
                 executeQuery·p0.00:   1629.487 ms/op
                 executeQuery·p0.50:   1631.584 ms/op
                 executeQuery·p0.90:   1635.779 ms/op
                 executeQuery·p0.95:   1635.779 ms/op
                 executeQuery·p0.99:   1635.779 ms/op
                 executeQuery·p0.999:  1635.779 ms/op
                 executeQuery·p0.9999: 1635.779 ms/op
                 executeQuery·p1.00:   1635.779 ms/op

Iteration   4: 1637.576 ±(99.9%) 17.552 ms/op
                 executeQuery·p0.00:   1627.390 ms/op
                 executeQuery·p0.50:   1633.681 ms/op
                 executeQuery·p0.90:   1650.459 ms/op
                 executeQuery·p0.95:   1650.459 ms/op
                 executeQuery·p0.99:   1650.459 ms/op
                 executeQuery·p0.999:  1650.459 ms/op
                 executeQuery·p0.9999: 1650.459 ms/op
                 executeQuery·p1.00:   1650.459 ms/op

Iteration   5: 1646.614 ±(99.9%) 8.656 ms/op
                 executeQuery·p0.00:   1644.167 ms/op
                 executeQuery·p0.50:   1646.264 ms/op
                 executeQuery·p0.90:   1652.556 ms/op
                 executeQuery·p0.95:   1652.556 ms/op
                 executeQuery·p0.99:   1652.556 ms/op
                 executeQuery·p0.999:  1652.556 ms/op
                 executeQuery·p0.9999: 1652.556 ms/op
                 executeQuery·p1.00:   1652.556 ms/op


# Run progress: 62.78% complete, ETA 03:28:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1643.868 ±(99.9%) 108.855 ms/op
# Warmup Iteration   2: 1683.664 ±(99.9%) 49.541 ms/op
# Warmup Iteration   3: 1688.557 ±(99.9%) 8.656 ms/op
# Warmup Iteration   4: 1685.062 ±(99.9%) 18.874 ms/op
# Warmup Iteration   5: 1695.547 ±(99.9%) 13.281 ms/op
Iteration   1: 1697.295 ±(99.9%) 21.899 ms/op
                 executeQuery·p0.00:   1686.110 ms/op
                 executeQuery·p0.50:   1698.693 ms/op
                 executeQuery·p0.90:   1707.082 ms/op
                 executeQuery·p0.95:   1707.082 ms/op
                 executeQuery·p0.99:   1707.082 ms/op
                 executeQuery·p0.999:  1707.082 ms/op
                 executeQuery·p0.9999: 1707.082 ms/op
                 executeQuery·p1.00:   1707.082 ms/op

Iteration   2: 1689.605 ±(99.9%) 8.854 ms/op
                 executeQuery·p0.00:   1684.013 ms/op
                 executeQuery·p0.50:   1690.305 ms/op
                 executeQuery·p0.90:   1692.402 ms/op
                 executeQuery·p0.95:   1692.402 ms/op
                 executeQuery·p0.99:   1692.402 ms/op
                 executeQuery·p0.999:  1692.402 ms/op
                 executeQuery·p0.9999: 1692.402 ms/op
                 executeQuery·p1.00:   1692.402 ms/op

Iteration   3: 1701.489 ±(99.9%) 49.155 ms/op
                 executeQuery·p0.00:   1684.013 ms/op
                 executeQuery·p0.50:   1696.596 ms/op
                 executeQuery·p0.90:   1734.345 ms/op
                 executeQuery·p0.95:   1734.345 ms/op
                 executeQuery·p0.99:   1734.345 ms/op
                 executeQuery·p0.999:  1734.345 ms/op
                 executeQuery·p0.9999: 1734.345 ms/op
                 executeQuery·p1.00:   1734.345 ms/op

Iteration   4: 1699.043 ±(99.9%) 8.656 ms/op
                 executeQuery·p0.00:   1694.499 ms/op
                 executeQuery·p0.50:   1699.742 ms/op
                 executeQuery·p0.90:   1702.887 ms/op
                 executeQuery·p0.95:   1702.887 ms/op
                 executeQuery·p0.99:   1702.887 ms/op
                 executeQuery·p0.999:  1702.887 ms/op
                 executeQuery·p0.9999: 1702.887 ms/op
                 executeQuery·p1.00:   1702.887 ms/op

Iteration   5: 1763.705 ±(99.9%) 98.264 ms/op
                 executeQuery·p0.00:   1698.693 ms/op
                 executeQuery·p0.50:   1772.093 ms/op
                 executeQuery·p0.90:   1795.162 ms/op
                 executeQuery·p0.95:   1795.162 ms/op
                 executeQuery·p0.99:   1795.162 ms/op
                 executeQuery·p0.999:  1795.162 ms/op
                 executeQuery·p0.9999: 1795.162 ms/op
                 executeQuery·p1.00:   1795.162 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 63
  mean =   1673.627 ±(99.9%) 19.070 ms/op

  Histogram, ms/op:
    [1600.000, 1612.500) = 0 
    [1612.500, 1625.000) = 0 
    [1625.000, 1637.500) = 21 
    [1637.500, 1650.000) = 8 
    [1650.000, 1662.500) = 2 
    [1662.500, 1675.000) = 1 
    [1675.000, 1687.500) = 3 
    [1687.500, 1700.000) = 15 
    [1700.000, 1712.500) = 6 
    [1712.500, 1725.000) = 0 
    [1725.000, 1737.500) = 1 
    [1737.500, 1750.000) = 1 
    [1750.000, 1762.500) = 1 
    [1762.500, 1775.000) = 1 
    [1775.000, 1787.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1627.390 ms/op
     p(50.0000) =   1667.236 ms/op
     p(90.0000) =   1736.861 ms/op
     p(95.0000) =   1775.868 ms/op
     p(99.0000) =   1795.162 ms/op
     p(99.9000) =   1795.162 ms/op
     p(99.9900) =   1795.162 ms/op
     p(99.9990) =   1795.162 ms/op
     p(99.9999) =   1795.162 ms/op
    p(100.0000) =   1795.162 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 63.33% complete, ETA 03:24:48
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
18454.938 ms/op
# Warmup Iteration   2: 19528.679 ms/op
# Warmup Iteration   3: 19495.125 ms/op
# Warmup Iteration   4: 19696.452 ms/op
# Warmup Iteration   5: 18287.165 ms/op
Iteration   1: 18320.720 ms/op
                 executeQuery·p0.00:   18320.720 ms/op
                 executeQuery·p0.50:   18320.720 ms/op
                 executeQuery·p0.90:   18320.720 ms/op
                 executeQuery·p0.95:   18320.720 ms/op
                 executeQuery·p0.99:   18320.720 ms/op
                 executeQuery·p0.999:  18320.720 ms/op
                 executeQuery·p0.9999: 18320.720 ms/op
                 executeQuery·p1.00:   18320.720 ms/op

Iteration   2: 19428.016 ms/op
                 executeQuery·p0.00:   19428.016 ms/op
                 executeQuery·p0.50:   19428.016 ms/op
                 executeQuery·p0.90:   19428.016 ms/op
                 executeQuery·p0.95:   19428.016 ms/op
                 executeQuery·p0.99:   19428.016 ms/op
                 executeQuery·p0.999:  19428.016 ms/op
                 executeQuery·p0.9999: 19428.016 ms/op
                 executeQuery·p1.00:   19428.016 ms/op

Iteration   3: 19394.462 ms/op
                 executeQuery·p0.00:   19394.462 ms/op
                 executeQuery·p0.50:   19394.462 ms/op
                 executeQuery·p0.90:   19394.462 ms/op
                 executeQuery·p0.95:   19394.462 ms/op
                 executeQuery·p0.99:   19394.462 ms/op
                 executeQuery·p0.999:  19394.462 ms/op
                 executeQuery·p0.9999: 19394.462 ms/op
                 executeQuery·p1.00:   19394.462 ms/op

Iteration   4: 19327.353 ms/op
                 executeQuery·p0.00:   19327.353 ms/op
                 executeQuery·p0.50:   19327.353 ms/op
                 executeQuery·p0.90:   19327.353 ms/op
                 executeQuery·p0.95:   19327.353 ms/op
                 executeQuery·p0.99:   19327.353 ms/op
                 executeQuery·p0.999:  19327.353 ms/op
                 executeQuery·p0.9999: 19327.353 ms/op
                 executeQuery·p1.00:   19327.353 ms/op

Iteration   5: 19495.125 ms/op
                 executeQuery·p0.00:   19495.125 ms/op
                 executeQuery·p0.50:   19495.125 ms/op
                 executeQuery·p0.90:   19495.125 ms/op
                 executeQuery·p0.95:   19495.125 ms/op
                 executeQuery·p0.99:   19495.125 ms/op
                 executeQuery·p0.999:  19495.125 ms/op
                 executeQuery·p0.9999: 19495.125 ms/op
                 executeQuery·p1.00:   19495.125 ms/op


# Run progress: 63.89% complete, ETA 03:21:52
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
18387.829 ms/op
# Warmup Iteration   2: 19495.125 ms/op
# Warmup Iteration   3: 18421.383 ms/op
# Warmup Iteration   4: 18454.938 ms/op
# Warmup Iteration   5: 18488.492 ms/op
Iteration   1: 18454.938 ms/op
                 executeQuery·p0.00:   18454.938 ms/op
                 executeQuery·p0.50:   18454.938 ms/op
                 executeQuery·p0.90:   18454.938 ms/op
                 executeQuery·p0.95:   18454.938 ms/op
                 executeQuery·p0.99:   18454.938 ms/op
                 executeQuery·p0.999:  18454.938 ms/op
                 executeQuery·p0.9999: 18454.938 ms/op
                 executeQuery·p1.00:   18454.938 ms/op

Iteration   2: 18589.155 ms/op
                 executeQuery·p0.00:   18589.155 ms/op
                 executeQuery·p0.50:   18589.155 ms/op
                 executeQuery·p0.90:   18589.155 ms/op
                 executeQuery·p0.95:   18589.155 ms/op
                 executeQuery·p0.99:   18589.155 ms/op
                 executeQuery·p0.999:  18589.155 ms/op
                 executeQuery·p0.9999: 18589.155 ms/op
                 executeQuery·p1.00:   18589.155 ms/op

Iteration   3: 18555.601 ms/op
                 executeQuery·p0.00:   18555.601 ms/op
                 executeQuery·p0.50:   18555.601 ms/op
                 executeQuery·p0.90:   18555.601 ms/op
                 executeQuery·p0.95:   18555.601 ms/op
                 executeQuery·p0.99:   18555.601 ms/op
                 executeQuery·p0.999:  18555.601 ms/op
                 executeQuery·p0.9999: 18555.601 ms/op
                 executeQuery·p1.00:   18555.601 ms/op

Iteration   4: 18454.938 ms/op
                 executeQuery·p0.00:   18454.938 ms/op
                 executeQuery·p0.50:   18454.938 ms/op
                 executeQuery·p0.90:   18454.938 ms/op
                 executeQuery·p0.95:   18454.938 ms/op
                 executeQuery·p0.99:   18454.938 ms/op
                 executeQuery·p0.999:  18454.938 ms/op
                 executeQuery·p0.9999: 18454.938 ms/op
                 executeQuery·p1.00:   18454.938 ms/op

Iteration   5: 18555.601 ms/op
                 executeQuery·p0.00:   18555.601 ms/op
                 executeQuery·p0.50:   18555.601 ms/op
                 executeQuery·p0.90:   18555.601 ms/op
                 executeQuery·p0.95:   18555.601 ms/op
                 executeQuery·p0.99:   18555.601 ms/op
                 executeQuery·p0.999:  18555.601 ms/op
                 executeQuery·p0.9999: 18555.601 ms/op
                 executeQuery·p1.00:   18555.601 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  18857.591 ±(99.9%) 731.631 ms/op

  Histogram, ms/op:
    [18000.000, 18125.000) = 0 
    [18125.000, 18250.000) = 0 
    [18250.000, 18375.000) = 1 
    [18375.000, 18500.000) = 2 
    [18500.000, 18625.000) = 3 
    [18625.000, 18750.000) = 0 
    [18750.000, 18875.000) = 0 
    [18875.000, 19000.000) = 0 
    [19000.000, 19125.000) = 0 
    [19125.000, 19250.000) = 0 
    [19250.000, 19375.000) = 1 
    [19375.000, 19500.000) = 3 
    [19500.000, 19625.000) = 0 
    [19625.000, 19750.000) = 0 
    [19750.000, 19875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  18320.720 ms/op
     p(50.0000) =  18572.378 ms/op
     p(90.0000) =  19488.414 ms/op
     p(95.0000) =  19495.125 ms/op
     p(99.0000) =  19495.125 ms/op
     p(99.9000) =  19495.125 ms/op
     p(99.9900) =  19495.125 ms/op
     p(99.9990) =  19495.125 ms/op
     p(99.9999) =  19495.125 ms/op
    p(100.0000) =  19495.125 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 64.44% complete, ETA 03:18:53
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
968.598 ±(99.9%) 108.945 ms/op
# Warmup Iteration   2: 982.411 ±(99.9%) 13.018 ms/op
# Warmup Iteration   3: 988.702 ±(99.9%) 22.893 ms/op
# Warmup Iteration   4: 964.976 ±(99.9%) 3.616 ms/op
# Warmup Iteration   5: 959.352 ±(99.9%) 6.303 ms/op
Iteration   1: 958.494 ±(99.9%) 5.166 ms/op
                 executeQuery·p0.00:   952.107 ms/op
                 executeQuery·p0.50:   958.398 ms/op
                 executeQuery·p0.90:   963.432 ms/op
                 executeQuery·p0.95:   963.641 ms/op
                 executeQuery·p0.99:   963.641 ms/op
                 executeQuery·p0.999:  963.641 ms/op
                 executeQuery·p0.9999: 963.641 ms/op
                 executeQuery·p1.00:   963.641 ms/op

Iteration   2: 959.352 ±(99.9%) 5.001 ms/op
                 executeQuery·p0.00:   954.204 ms/op
                 executeQuery·p0.50:   960.496 ms/op
                 executeQuery·p0.90:   963.641 ms/op
                 executeQuery·p0.95:   963.641 ms/op
                 executeQuery·p0.99:   963.641 ms/op
                 executeQuery·p0.999:  963.641 ms/op
                 executeQuery·p0.9999: 963.641 ms/op
                 executeQuery·p1.00:   963.641 ms/op

Iteration   3: 963.451 ±(99.9%) 5.496 ms/op
                 executeQuery·p0.00:   955.253 ms/op
                 executeQuery·p0.50:   962.593 ms/op
                 executeQuery·p0.90:   969.933 ms/op
                 executeQuery·p0.95:   969.933 ms/op
                 executeQuery·p0.99:   969.933 ms/op
                 executeQuery·p0.999:  969.933 ms/op
                 executeQuery·p0.9999: 969.933 ms/op
                 executeQuery·p1.00:   969.933 ms/op

Iteration   4: 960.305 ±(99.9%) 9.029 ms/op
                 executeQuery·p0.00:   950.010 ms/op
                 executeQuery·p0.50:   959.447 ms/op
                 executeQuery·p0.90:   969.933 ms/op
                 executeQuery·p0.95:   969.933 ms/op
                 executeQuery·p0.99:   969.933 ms/op
                 executeQuery·p0.999:  969.933 ms/op
                 executeQuery·p0.9999: 969.933 ms/op
                 executeQuery·p1.00:   969.933 ms/op

Iteration   5: 958.017 ±(99.9%) 4.734 ms/op
                 executeQuery·p0.00:   953.156 ms/op
                 executeQuery·p0.50:   958.398 ms/op
                 executeQuery·p0.90:   964.061 ms/op
                 executeQuery·p0.95:   964.690 ms/op
                 executeQuery·p0.99:   964.690 ms/op
                 executeQuery·p0.999:  964.690 ms/op
                 executeQuery·p0.9999: 964.690 ms/op
                 executeQuery·p1.00:   964.690 ms/op


# Run progress: 65.00% complete, ETA 03:15:04
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
760.782 ±(99.9%) 80.340 ms/op
# Warmup Iteration   2: 734.153 ±(99.9%) 3.498 ms/op
# Warmup Iteration   3: 736.999 ±(99.9%) 3.619 ms/op
# Warmup Iteration   4: 736.700 ±(99.9%) 4.320 ms/op
# Warmup Iteration   5: 752.232 ±(99.9%) 9.828 ms/op
Iteration   1: 754.410 ±(99.9%) 5.970 ms/op
                 executeQuery·p0.00:   744.489 ms/op
                 executeQuery·p0.50:   754.975 ms/op
                 executeQuery·p0.90:   759.798 ms/op
                 executeQuery·p0.95:   760.218 ms/op
                 executeQuery·p0.99:   760.218 ms/op
                 executeQuery·p0.999:  760.218 ms/op
                 executeQuery·p0.9999: 760.218 ms/op
                 executeQuery·p1.00:   760.218 ms/op

Iteration   2: 736.700 ±(99.9%) 7.491 ms/op
                 executeQuery·p0.00:   730.857 ms/op
                 executeQuery·p0.50:   734.527 ms/op
                 executeQuery·p0.90:   749.208 ms/op
                 executeQuery·p0.95:   757.072 ms/op
                 executeQuery·p0.99:   757.072 ms/op
                 executeQuery·p0.999:  757.072 ms/op
                 executeQuery·p0.9999: 757.072 ms/op
                 executeQuery·p1.00:   757.072 ms/op

Iteration   3: 735.202 ±(99.9%) 4.373 ms/op
                 executeQuery·p0.00:   729.809 ms/op
                 executeQuery·p0.50:   735.052 ms/op
                 executeQuery·p0.90:   741.868 ms/op
                 executeQuery·p0.95:   743.440 ms/op
                 executeQuery·p0.99:   743.440 ms/op
                 executeQuery·p0.999:  743.440 ms/op
                 executeQuery·p0.9999: 743.440 ms/op
                 executeQuery·p1.00:   743.440 ms/op

Iteration   4: 734.602 ±(99.9%) 3.956 ms/op
                 executeQuery·p0.00:   730.857 ms/op
                 executeQuery·p0.50:   733.479 ms/op
                 executeQuery·p0.90:   740.295 ms/op
                 executeQuery·p0.95:   741.343 ms/op
                 executeQuery·p0.99:   741.343 ms/op
                 executeQuery·p0.999:  741.343 ms/op
                 executeQuery·p0.9999: 741.343 ms/op
                 executeQuery·p1.00:   741.343 ms/op

Iteration   5: 736.700 ±(99.9%) 3.790 ms/op
                 executeQuery·p0.00:   731.906 ms/op
                 executeQuery·p0.50:   736.625 ms/op
                 executeQuery·p0.90:   742.392 ms/op
                 executeQuery·p0.95:   743.440 ms/op
                 executeQuery·p0.99:   743.440 ms/op
                 executeQuery·p0.999:  743.440 ms/op
                 executeQuery·p0.9999: 743.440 ms/op
                 executeQuery·p1.00:   743.440 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 124
  mean =    837.161 ±(99.9%) 33.388 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 57 
    [ 750.000,  775.000) = 12 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 0 
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 55 

  Percentiles, ms/op:
      p(0.0000) =    729.809 ms/op
     p(50.0000) =    755.499 ms/op
     p(90.0000) =    963.117 ms/op
     p(95.0000) =    964.428 ms/op
     p(99.0000) =    969.933 ms/op
     p(99.9000) =    969.933 ms/op
     p(99.9900) =    969.933 ms/op
     p(99.9990) =    969.933 ms/op
     p(99.9999) =    969.933 ms/op
    p(100.0000) =    969.933 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 65.56% complete, ETA 03:11:16
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
10838.082 ms/op
# Warmup Iteration   2: 11039.408 ms/op
# Warmup Iteration   3: 10049.552 ms/op
# Warmup Iteration   4: 10066.330 ms/op
# Warmup Iteration   5: 10066.330 ms/op
Iteration   1: 10066.330 ms/op
                 executeQuery·p0.00:   10066.330 ms/op
                 executeQuery·p0.50:   10066.330 ms/op
                 executeQuery·p0.90:   10066.330 ms/op
                 executeQuery·p0.95:   10066.330 ms/op
                 executeQuery·p0.99:   10066.330 ms/op
                 executeQuery·p0.999:  10066.330 ms/op
                 executeQuery·p0.9999: 10066.330 ms/op
                 executeQuery·p1.00:   10066.330 ms/op

Iteration   2: 10049.552 ms/op
                 executeQuery·p0.00:   10049.552 ms/op
                 executeQuery·p0.50:   10049.552 ms/op
                 executeQuery·p0.90:   10049.552 ms/op
                 executeQuery·p0.95:   10049.552 ms/op
                 executeQuery·p0.99:   10049.552 ms/op
                 executeQuery·p0.999:  10049.552 ms/op
                 executeQuery·p0.9999: 10049.552 ms/op
                 executeQuery·p1.00:   10049.552 ms/op

Iteration   3: 10099.884 ms/op
                 executeQuery·p0.00:   10099.884 ms/op
                 executeQuery·p0.50:   10099.884 ms/op
                 executeQuery·p0.90:   10099.884 ms/op
                 executeQuery·p0.95:   10099.884 ms/op
                 executeQuery·p0.99:   10099.884 ms/op
                 executeQuery·p0.999:  10099.884 ms/op
                 executeQuery·p0.9999: 10099.884 ms/op
                 executeQuery·p1.00:   10099.884 ms/op

Iteration   4: 10083.107 ms/op
                 executeQuery·p0.00:   10083.107 ms/op
                 executeQuery·p0.50:   10083.107 ms/op
                 executeQuery·p0.90:   10083.107 ms/op
                 executeQuery·p0.95:   10083.107 ms/op
                 executeQuery·p0.99:   10083.107 ms/op
                 executeQuery·p0.999:  10083.107 ms/op
                 executeQuery·p0.9999: 10083.107 ms/op
                 executeQuery·p1.00:   10083.107 ms/op

Iteration   5: 10116.661 ms/op
                 executeQuery·p0.00:   10116.661 ms/op
                 executeQuery·p0.50:   10116.661 ms/op
                 executeQuery·p0.90:   10116.661 ms/op
                 executeQuery·p0.95:   10116.661 ms/op
                 executeQuery·p0.99:   10116.661 ms/op
                 executeQuery·p0.999:  10116.661 ms/op
                 executeQuery·p0.9999: 10116.661 ms/op
                 executeQuery·p1.00:   10116.661 ms/op


# Run progress: 66.11% complete, ETA 03:07:31
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
10284.433 ms/op
# Warmup Iteration   2: 10351.542 ms/op
# Warmup Iteration   3: 9873.392 ms/op
# Warmup Iteration   4: 9881.780 ms/op
# Warmup Iteration   5: 9865.003 ms/op
Iteration   1: 9865.003 ms/op
                 executeQuery·p0.00:   9865.003 ms/op
                 executeQuery·p0.50:   9865.003 ms/op
                 executeQuery·p0.90:   9865.003 ms/op
                 executeQuery·p0.95:   9865.003 ms/op
                 executeQuery·p0.99:   9865.003 ms/op
                 executeQuery·p0.999:  9865.003 ms/op
                 executeQuery·p0.9999: 9865.003 ms/op
                 executeQuery·p1.00:   9865.003 ms/op

Iteration   2: 9873.392 ms/op
                 executeQuery·p0.00:   9865.003 ms/op
                 executeQuery·p0.50:   9873.392 ms/op
                 executeQuery·p0.90:   9881.780 ms/op
                 executeQuery·p0.95:   9881.780 ms/op
                 executeQuery·p0.99:   9881.780 ms/op
                 executeQuery·p0.999:  9881.780 ms/op
                 executeQuery·p0.9999: 9881.780 ms/op
                 executeQuery·p1.00:   9881.780 ms/op

Iteration   3: 9881.780 ms/op
                 executeQuery·p0.00:   9881.780 ms/op
                 executeQuery·p0.50:   9881.780 ms/op
                 executeQuery·p0.90:   9881.780 ms/op
                 executeQuery·p0.95:   9881.780 ms/op
                 executeQuery·p0.99:   9881.780 ms/op
                 executeQuery·p0.999:  9881.780 ms/op
                 executeQuery·p0.9999: 9881.780 ms/op
                 executeQuery·p1.00:   9881.780 ms/op

Iteration   4: 9915.335 ms/op
                 executeQuery·p0.00:   9915.335 ms/op
                 executeQuery·p0.50:   9915.335 ms/op
                 executeQuery·p0.90:   9915.335 ms/op
                 executeQuery·p0.95:   9915.335 ms/op
                 executeQuery·p0.99:   9915.335 ms/op
                 executeQuery·p0.999:  9915.335 ms/op
                 executeQuery·p0.9999: 9915.335 ms/op
                 executeQuery·p1.00:   9915.335 ms/op

Iteration   5: 9932.112 ms/op
                 executeQuery·p0.00:   9932.112 ms/op
                 executeQuery·p0.50:   9932.112 ms/op
                 executeQuery·p0.90:   9932.112 ms/op
                 executeQuery·p0.95:   9932.112 ms/op
                 executeQuery·p0.99:   9932.112 ms/op
                 executeQuery·p0.999:  9932.112 ms/op
                 executeQuery·p0.9999: 9932.112 ms/op
                 executeQuery·p1.00:   9932.112 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 11
  mean =   9977.868 ±(99.9%) 143.817 ms/op

  Histogram, ms/op:
    [ 9800.000,  9825.000) = 0 
    [ 9825.000,  9850.000) = 0 
    [ 9850.000,  9875.000) = 2 
    [ 9875.000,  9900.000) = 2 
    [ 9900.000,  9925.000) = 1 
    [ 9925.000,  9950.000) = 1 
    [ 9950.000,  9975.000) = 0 
    [ 9975.000, 10000.000) = 0 
    [10000.000, 10025.000) = 0 
    [10025.000, 10050.000) = 1 
    [10050.000, 10075.000) = 1 
    [10075.000, 10100.000) = 2 
    [10100.000, 10125.000) = 1 
    [10125.000, 10150.000) = 0 
    [10150.000, 10175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   9865.003 ms/op
     p(50.0000) =   9932.112 ms/op
     p(90.0000) =  10113.306 ms/op
     p(95.0000) =  10116.661 ms/op
     p(99.0000) =  10116.661 ms/op
     p(99.9000) =  10116.661 ms/op
     p(99.9900) =  10116.661 ms/op
     p(99.9990) =  10116.661 ms/op
     p(99.9999) =  10116.661 ms/op
    p(100.0000) =  10116.661 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 66.67% complete, ETA 03:03:57
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
311.427 ±(99.9%) 101.547 ms/op
# Warmup Iteration   2: 290.081 ±(99.9%) 9.889 ms/op
# Warmup Iteration   3: 311.558 ±(99.9%) 14.421 ms/op
# Warmup Iteration   4: 292.328 ±(99.9%) 12.835 ms/op
# Warmup Iteration   5: 311.401 ±(99.9%) 4.864 ms/op
Iteration   1: 279.064 ±(99.9%) 11.664 ms/op
                 executeQuery·p0.00:   270.533 ms/op
                 executeQuery·p0.50:   276.300 ms/op
                 executeQuery·p0.90:   282.853 ms/op
                 executeQuery·p0.95:   332.661 ms/op
                 executeQuery·p0.99:   341.311 ms/op
                 executeQuery·p0.999:  341.311 ms/op
                 executeQuery·p0.9999: 341.311 ms/op
                 executeQuery·p1.00:   341.311 ms/op

Iteration   2: 280.661 ±(99.9%) 3.988 ms/op
                 executeQuery·p0.00:   275.251 ms/op
                 executeQuery·p0.50:   279.708 ms/op
                 executeQuery·p0.90:   285.947 ms/op
                 executeQuery·p0.95:   296.957 ms/op
                 executeQuery·p0.99:   298.844 ms/op
                 executeQuery·p0.999:  298.844 ms/op
                 executeQuery·p0.9999: 298.844 ms/op
                 executeQuery·p1.00:   298.844 ms/op

Iteration   3: 280.419 ±(99.9%) 3.152 ms/op
                 executeQuery·p0.00:   271.057 ms/op
                 executeQuery·p0.50:   281.018 ms/op
                 executeQuery·p0.90:   284.584 ms/op
                 executeQuery·p0.95:   286.104 ms/op
                 executeQuery·p0.99:   286.261 ms/op
                 executeQuery·p0.999:  286.261 ms/op
                 executeQuery·p0.9999: 286.261 ms/op
                 executeQuery·p1.00:   286.261 ms/op

Iteration   4: 281.418 ±(99.9%) 7.289 ms/op
                 executeQuery·p0.00:   270.008 ms/op
                 executeQuery·p0.50:   280.494 ms/op
                 executeQuery·p0.90:   287.624 ms/op
                 executeQuery·p0.95:   311.899 ms/op
                 executeQuery·p0.99:   314.573 ms/op
                 executeQuery·p0.999:  314.573 ms/op
                 executeQuery·p0.9999: 314.573 ms/op
                 executeQuery·p1.00:   314.573 ms/op

Iteration   5: 281.443 ±(99.9%) 3.353 ms/op
                 executeQuery·p0.00:   272.105 ms/op
                 executeQuery·p0.50:   282.067 ms/op
                 executeQuery·p0.90:   285.737 ms/op
                 executeQuery·p0.95:   286.209 ms/op
                 executeQuery·p0.99:   286.261 ms/op
                 executeQuery·p0.999:  286.261 ms/op
                 executeQuery·p0.9999: 286.261 ms/op
                 executeQuery·p1.00:   286.261 ms/op


# Run progress: 67.22% complete, ETA 03:00:14
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
319.800 ±(99.9%) 85.818 ms/op
# Warmup Iteration   2: 288.708 ±(99.9%) 12.295 ms/op
# Warmup Iteration   3: 310.641 ±(99.9%) 15.921 ms/op
# Warmup Iteration   4: 297.146 ±(99.9%) 8.577 ms/op
# Warmup Iteration   5: 309.618 ±(99.9%) 1.139 ms/op
Iteration   1: 287.782 ±(99.9%) 5.692 ms/op
                 executeQuery·p0.00:   279.970 ms/op
                 executeQuery·p0.50:   287.310 ms/op
                 executeQuery·p0.90:   300.469 ms/op
                 executeQuery·p0.95:   302.436 ms/op
                 executeQuery·p0.99:   302.514 ms/op
                 executeQuery·p0.999:  302.514 ms/op
                 executeQuery·p0.9999: 302.514 ms/op
                 executeQuery·p1.00:   302.514 ms/op

Iteration   2: 284.389 ±(99.9%) 4.716 ms/op
                 executeQuery·p0.00:   276.300 ms/op
                 executeQuery·p0.50:   284.164 ms/op
                 executeQuery·p0.90:   291.504 ms/op
                 executeQuery·p0.95:   297.638 ms/op
                 executeQuery·p0.99:   298.320 ms/op
                 executeQuery·p0.999:  298.320 ms/op
                 executeQuery·p0.9999: 298.320 ms/op
                 executeQuery·p1.00:   298.320 ms/op

Iteration   3: 281.643 ±(99.9%) 6.706 ms/op
                 executeQuery·p0.00:   273.678 ms/op
                 executeQuery·p0.50:   279.970 ms/op
                 executeQuery·p0.90:   293.496 ms/op
                 executeQuery·p0.95:   307.914 ms/op
                 executeQuery·p0.99:   309.330 ms/op
                 executeQuery·p0.999:  309.330 ms/op
                 executeQuery·p0.9999: 309.330 ms/op
                 executeQuery·p1.00:   309.330 ms/op

Iteration   4: 282.616 ±(99.9%) 4.982 ms/op
                 executeQuery·p0.00:   274.203 ms/op
                 executeQuery·p0.50:   281.018 ms/op
                 executeQuery·p0.90:   292.343 ms/op
                 executeQuery·p0.95:   297.796 ms/op
                 executeQuery·p0.99:   298.320 ms/op
                 executeQuery·p0.999:  298.320 ms/op
                 executeQuery·p0.9999: 298.320 ms/op
                 executeQuery·p1.00:   298.320 ms/op

Iteration   5: 289.257 ±(99.9%) 7.966 ms/op
                 executeQuery·p0.00:   273.154 ms/op
                 executeQuery·p0.50:   288.883 ms/op
                 executeQuery·p0.90:   301.990 ms/op
                 executeQuery·p0.95:   310.955 ms/op
                 executeQuery·p0.99:   311.951 ms/op
                 executeQuery·p0.999:  311.951 ms/op
                 executeQuery·p0.9999: 311.951 ms/op
                 executeQuery·p1.00:   311.951 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 211
  mean =    282.817 ±(99.9%) 1.889 ms/op

  Histogram, ms/op:
    [270.000, 275.000) = 19 
    [275.000, 280.000) = 68 
    [280.000, 285.000) = 67 
    [285.000, 290.000) = 32 
    [290.000, 295.000) = 8 
    [295.000, 300.000) = 9 
    [300.000, 305.000) = 4 
    [305.000, 310.000) = 1 
    [310.000, 315.000) = 2 
    [315.000, 320.000) = 0 
    [320.000, 325.000) = 0 
    [325.000, 330.000) = 0 
    [330.000, 335.000) = 0 
    [335.000, 340.000) = 0 
    [340.000, 345.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    270.008 ms/op
     p(50.0000) =    281.018 ms/op
     p(90.0000) =    291.504 ms/op
     p(95.0000) =    298.530 ms/op
     p(99.0000) =    314.258 ms/op
     p(99.9000) =    341.311 ms/op
     p(99.9900) =    341.311 ms/op
     p(99.9990) =    341.311 ms/op
     p(99.9999) =    341.311 ms/op
    p(100.0000) =    341.311 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 67.78% complete, ETA 02:56:32
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
10150.216 ms/op
# Warmup Iteration   2: 3657.433 ms/op
# Warmup Iteration   3: 3770.679 ms/op
# Warmup Iteration   4: 3602.907 ms/op
# Warmup Iteration   5: 3489.661 ms/op
Iteration   1: 3372.220 ms/op
                 executeQuery·p0.00:   3372.220 ms/op
                 executeQuery·p0.50:   3372.220 ms/op
                 executeQuery·p0.90:   3372.220 ms/op
                 executeQuery·p0.95:   3372.220 ms/op
                 executeQuery·p0.99:   3372.220 ms/op
                 executeQuery·p0.999:  3372.220 ms/op
                 executeQuery·p0.9999: 3372.220 ms/op
                 executeQuery·p1.00:   3372.220 ms/op

Iteration   2: 3535.798 ms/op
                 executeQuery·p0.00:   3535.798 ms/op
                 executeQuery·p0.50:   3535.798 ms/op
                 executeQuery·p0.90:   3535.798 ms/op
                 executeQuery·p0.95:   3535.798 ms/op
                 executeQuery·p0.99:   3535.798 ms/op
                 executeQuery·p0.999:  3535.798 ms/op
                 executeQuery·p0.9999: 3535.798 ms/op
                 executeQuery·p1.00:   3535.798 ms/op

Iteration   3: 3351.249 ms/op
                 executeQuery·p0.00:   3351.249 ms/op
                 executeQuery·p0.50:   3351.249 ms/op
                 executeQuery·p0.90:   3351.249 ms/op
                 executeQuery·p0.95:   3351.249 ms/op
                 executeQuery·p0.99:   3351.249 ms/op
                 executeQuery·p0.999:  3351.249 ms/op
                 executeQuery·p0.9999: 3351.249 ms/op
                 executeQuery·p1.00:   3351.249 ms/op

Iteration   4: 3510.632 ms/op
                 executeQuery·p0.00:   3510.632 ms/op
                 executeQuery·p0.50:   3510.632 ms/op
                 executeQuery·p0.90:   3510.632 ms/op
                 executeQuery·p0.95:   3510.632 ms/op
                 executeQuery·p0.99:   3510.632 ms/op
                 executeQuery·p0.999:  3510.632 ms/op
                 executeQuery·p0.9999: 3510.632 ms/op
                 executeQuery·p1.00:   3510.632 ms/op

Iteration   5: 3430.941 ms/op
                 executeQuery·p0.00:   3430.941 ms/op
                 executeQuery·p0.50:   3430.941 ms/op
                 executeQuery·p0.90:   3430.941 ms/op
                 executeQuery·p0.95:   3430.941 ms/op
                 executeQuery·p0.99:   3430.941 ms/op
                 executeQuery·p0.999:  3430.941 ms/op
                 executeQuery·p0.9999: 3430.941 ms/op
                 executeQuery·p1.00:   3430.941 ms/op


# Run progress: 68.33% complete, ETA 02:54:29
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5779.751 ms/op
# Warmup Iteration   2: 3695.182 ms/op
# Warmup Iteration   3: 3435.135 ms/op
# Warmup Iteration   4: 3552.575 ms/op
# Warmup Iteration   5: 3397.386 ms/op
Iteration   1: 3401.581 ms/op
                 executeQuery·p0.00:   3401.581 ms/op
                 executeQuery·p0.50:   3401.581 ms/op
                 executeQuery·p0.90:   3401.581 ms/op
                 executeQuery·p0.95:   3401.581 ms/op
                 executeQuery·p0.99:   3401.581 ms/op
                 executeQuery·p0.999:  3401.581 ms/op
                 executeQuery·p0.9999: 3401.581 ms/op
                 executeQuery·p1.00:   3401.581 ms/op

Iteration   2: 3523.215 ms/op
                 executeQuery·p0.00:   3523.215 ms/op
                 executeQuery·p0.50:   3523.215 ms/op
                 executeQuery·p0.90:   3523.215 ms/op
                 executeQuery·p0.95:   3523.215 ms/op
                 executeQuery·p0.99:   3523.215 ms/op
                 executeQuery·p0.999:  3523.215 ms/op
                 executeQuery·p0.9999: 3523.215 ms/op
                 executeQuery·p1.00:   3523.215 ms/op

Iteration   3: 3435.135 ms/op
                 executeQuery·p0.00:   3435.135 ms/op
                 executeQuery·p0.50:   3435.135 ms/op
                 executeQuery·p0.90:   3435.135 ms/op
                 executeQuery·p0.95:   3435.135 ms/op
                 executeQuery·p0.99:   3435.135 ms/op
                 executeQuery·p0.999:  3435.135 ms/op
                 executeQuery·p0.9999: 3435.135 ms/op
                 executeQuery·p1.00:   3435.135 ms/op

Iteration   4: 3527.410 ms/op
                 executeQuery·p0.00:   3527.410 ms/op
                 executeQuery·p0.50:   3527.410 ms/op
                 executeQuery·p0.90:   3527.410 ms/op
                 executeQuery·p0.95:   3527.410 ms/op
                 executeQuery·p0.99:   3527.410 ms/op
                 executeQuery·p0.999:  3527.410 ms/op
                 executeQuery·p0.9999: 3527.410 ms/op
                 executeQuery·p1.00:   3527.410 ms/op

Iteration   5: 3485.467 ms/op
                 executeQuery·p0.00:   3485.467 ms/op
                 executeQuery·p0.50:   3485.467 ms/op
                 executeQuery·p0.90:   3485.467 ms/op
                 executeQuery·p0.95:   3485.467 ms/op
                 executeQuery·p0.99:   3485.467 ms/op
                 executeQuery·p0.999:  3485.467 ms/op
                 executeQuery·p0.9999: 3485.467 ms/op
                 executeQuery·p1.00:   3485.467 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   3457.365 ±(99.9%) 103.078 ms/op

  Histogram, ms/op:
    [3300.000, 3325.000) = 0 
    [3325.000, 3350.000) = 0 
    [3350.000, 3375.000) = 2 
    [3375.000, 3400.000) = 0 
    [3400.000, 3425.000) = 1 
    [3425.000, 3450.000) = 2 
    [3450.000, 3475.000) = 0 
    [3475.000, 3500.000) = 1 
    [3500.000, 3525.000) = 2 
    [3525.000, 3550.000) = 2 
    [3550.000, 3575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3351.249 ms/op
     p(50.0000) =   3460.301 ms/op
     p(90.0000) =   3534.959 ms/op
     p(95.0000) =   3535.798 ms/op
     p(99.0000) =   3535.798 ms/op
     p(99.9000) =   3535.798 ms/op
     p(99.9900) =   3535.798 ms/op
     p(99.9990) =   3535.798 ms/op
     p(99.9999) =   3535.798 ms/op
    p(100.0000) =   3535.798 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 68.89% complete, ETA 02:52:22
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
280.155 ±(99.9%) 106.152 ms/op
# Warmup Iteration   2: 241.675 ±(99.9%) 7.367 ms/op
# Warmup Iteration   3: 245.137 ±(99.9%) 8.950 ms/op
# Warmup Iteration   4: 247.027 ±(99.9%) 5.929 ms/op
# Warmup Iteration   5: 248.957 ±(99.9%) 7.120 ms/op
Iteration   1: 246.187 ±(99.9%) 3.826 ms/op
                 executeQuery·p0.00:   239.600 ms/op
                 executeQuery·p0.50:   244.318 ms/op
                 executeQuery·p0.90:   253.860 ms/op
                 executeQuery·p0.95:   255.328 ms/op
                 executeQuery·p0.99:   255.590 ms/op
                 executeQuery·p0.999:  255.590 ms/op
                 executeQuery·p0.9999: 255.590 ms/op
                 executeQuery·p1.00:   255.590 ms/op

Iteration   2: 253.254 ±(99.9%) 4.451 ms/op
                 executeQuery·p0.00:   241.959 ms/op
                 executeQuery·p0.50:   253.493 ms/op
                 executeQuery·p0.90:   260.991 ms/op
                 executeQuery·p0.95:   261.305 ms/op
                 executeQuery·p0.99:   261.358 ms/op
                 executeQuery·p0.999:  261.358 ms/op
                 executeQuery·p0.9999: 261.358 ms/op
                 executeQuery·p1.00:   261.358 ms/op

Iteration   3: 247.749 ±(99.9%) 7.168 ms/op
                 executeQuery·p0.00:   236.454 ms/op
                 executeQuery·p0.50:   245.105 ms/op
                 executeQuery·p0.90:   259.680 ms/op
                 executeQuery·p0.95:   270.585 ms/op
                 executeQuery·p0.99:   273.154 ms/op
                 executeQuery·p0.999:  273.154 ms/op
                 executeQuery·p0.9999: 273.154 ms/op
                 executeQuery·p1.00:   273.154 ms/op

Iteration   4: 240.878 ±(99.9%) 5.705 ms/op
                 executeQuery·p0.00:   233.308 ms/op
                 executeQuery·p0.50:   239.862 ms/op
                 executeQuery·p0.90:   246.546 ms/op
                 executeQuery·p0.95:   265.028 ms/op
                 executeQuery·p0.99:   270.533 ms/op
                 executeQuery·p0.999:  270.533 ms/op
                 executeQuery·p0.9999: 270.533 ms/op
                 executeQuery·p1.00:   270.533 ms/op

Iteration   5: 241.129 ±(99.9%) 3.238 ms/op
                 executeQuery·p0.00:   232.784 ms/op
                 executeQuery·p0.50:   241.828 ms/op
                 executeQuery·p0.90:   247.333 ms/op
                 executeQuery·p0.95:   248.119 ms/op
                 executeQuery·p0.99:   248.250 ms/op
                 executeQuery·p0.999:  248.250 ms/op
                 executeQuery·p0.9999: 248.250 ms/op
                 executeQuery·p1.00:   248.250 ms/op


# Run progress: 69.44% complete, ETA 02:48:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
272.528 ±(99.9%) 83.950 ms/op
# Warmup Iteration   2: 235.307 ±(99.9%) 8.179 ms/op
# Warmup Iteration   3: 236.760 ±(99.9%) 7.726 ms/op
# Warmup Iteration   4: 240.845 ±(99.9%) 5.389 ms/op
# Warmup Iteration   5: 244.569 ±(99.9%) 7.287 ms/op
Iteration   1: 246.701 ±(99.9%) 4.584 ms/op
                 executeQuery·p0.00:   239.337 ms/op
                 executeQuery·p0.50:   245.236 ms/op
                 executeQuery·p0.90:   255.800 ms/op
                 executeQuery·p0.95:   261.240 ms/op
                 executeQuery·p0.99:   262.144 ms/op
                 executeQuery·p0.999:  262.144 ms/op
                 executeQuery·p0.9999: 262.144 ms/op
                 executeQuery·p1.00:   262.144 ms/op

Iteration   2: 254.610 ±(99.9%) 4.615 ms/op
                 executeQuery·p0.00:   240.386 ms/op
                 executeQuery·p0.50:   253.231 ms/op
                 executeQuery·p0.90:   263.297 ms/op
                 executeQuery·p0.95:   264.765 ms/op
                 executeQuery·p0.99:   264.765 ms/op
                 executeQuery·p0.999:  264.765 ms/op
                 executeQuery·p0.9999: 264.765 ms/op
                 executeQuery·p1.00:   264.765 ms/op

Iteration   3: 247.829 ±(99.9%) 6.153 ms/op
                 executeQuery·p0.00:   231.735 ms/op
                 executeQuery·p0.50:   246.678 ms/op
                 executeQuery·p0.90:   258.526 ms/op
                 executeQuery·p0.95:   259.156 ms/op
                 executeQuery·p0.99:   259.260 ms/op
                 executeQuery·p0.999:  259.260 ms/op
                 executeQuery·p0.9999: 259.260 ms/op
                 executeQuery·p1.00:   259.260 ms/op

Iteration   4: 241.799 ±(99.9%) 3.984 ms/op
                 executeQuery·p0.00:   230.687 ms/op
                 executeQuery·p0.50:   243.532 ms/op
                 executeQuery·p0.90:   246.887 ms/op
                 executeQuery·p0.95:   248.041 ms/op
                 executeQuery·p0.99:   248.250 ms/op
                 executeQuery·p0.999:  248.250 ms/op
                 executeQuery·p0.9999: 248.250 ms/op
                 executeQuery·p1.00:   248.250 ms/op

Iteration   5: 244.124 ±(99.9%) 4.150 ms/op
                 executeQuery·p0.00:   232.784 ms/op
                 executeQuery·p0.50:   244.580 ms/op
                 executeQuery·p0.90:   250.138 ms/op
                 executeQuery·p0.95:   250.348 ms/op
                 executeQuery·p0.99:   250.348 ms/op
                 executeQuery·p0.999:  250.348 ms/op
                 executeQuery·p0.9999: 250.348 ms/op
                 executeQuery·p1.00:   250.348 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 231
  mean =    246.378 ±(99.9%) 1.670 ms/op

  Histogram, ms/op:
    [230.000, 235.000) = 13 
    [235.000, 240.000) = 30 
    [240.000, 245.000) = 72 
    [245.000, 250.000) = 46 
    [250.000, 255.000) = 37 
    [255.000, 260.000) = 22 
    [260.000, 265.000) = 9 
    [265.000, 270.000) = 0 
    [270.000, 275.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    230.687 ms/op
     p(50.0000) =    245.105 ms/op
     p(90.0000) =    256.901 ms/op
     p(95.0000) =    259.837 ms/op
     p(99.0000) =    268.687 ms/op
     p(99.9000) =    273.154 ms/op
     p(99.9900) =    273.154 ms/op
     p(99.9990) =    273.154 ms/op
     p(99.9999) =    273.154 ms/op
    p(100.0000) =    273.154 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 70.00% complete, ETA 02:45:03
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5628.756 ms/op
# Warmup Iteration   2: 3263.169 ms/op
# Warmup Iteration   3: 3439.329 ms/op
# Warmup Iteration   4: 3313.500 ms/op
# Warmup Iteration   5: 3347.055 ms/op
Iteration   1: 3326.083 ms/op
                 executeQuery·p0.00:   3326.083 ms/op
                 executeQuery·p0.50:   3326.083 ms/op
                 executeQuery·p0.90:   3326.083 ms/op
                 executeQuery·p0.95:   3326.083 ms/op
                 executeQuery·p0.99:   3326.083 ms/op
                 executeQuery·p0.999:  3326.083 ms/op
                 executeQuery·p0.9999: 3326.083 ms/op
                 executeQuery·p1.00:   3326.083 ms/op

Iteration   2: 3242.197 ms/op
                 executeQuery·p0.00:   3242.197 ms/op
                 executeQuery·p0.50:   3242.197 ms/op
                 executeQuery·p0.90:   3242.197 ms/op
                 executeQuery·p0.95:   3242.197 ms/op
                 executeQuery·p0.99:   3242.197 ms/op
                 executeQuery·p0.999:  3242.197 ms/op
                 executeQuery·p0.9999: 3242.197 ms/op
                 executeQuery·p1.00:   3242.197 ms/op

Iteration   3: 3317.694 ms/op
                 executeQuery·p0.00:   3317.694 ms/op
                 executeQuery·p0.50:   3317.694 ms/op
                 executeQuery·p0.90:   3317.694 ms/op
                 executeQuery·p0.95:   3317.694 ms/op
                 executeQuery·p0.99:   3317.694 ms/op
                 executeQuery·p0.999:  3317.694 ms/op
                 executeQuery·p0.9999: 3317.694 ms/op
                 executeQuery·p1.00:   3317.694 ms/op

Iteration   4: 3426.746 ms/op
                 executeQuery·p0.00:   3426.746 ms/op
                 executeQuery·p0.50:   3426.746 ms/op
                 executeQuery·p0.90:   3426.746 ms/op
                 executeQuery·p0.95:   3426.746 ms/op
                 executeQuery·p0.99:   3426.746 ms/op
                 executeQuery·p0.999:  3426.746 ms/op
                 executeQuery·p0.9999: 3426.746 ms/op
                 executeQuery·p1.00:   3426.746 ms/op

Iteration   5: 3330.277 ms/op
                 executeQuery·p0.00:   3330.277 ms/op
                 executeQuery·p0.50:   3330.277 ms/op
                 executeQuery·p0.90:   3330.277 ms/op
                 executeQuery·p0.95:   3330.277 ms/op
                 executeQuery·p0.99:   3330.277 ms/op
                 executeQuery·p0.999:  3330.277 ms/op
                 executeQuery·p0.9999: 3330.277 ms/op
                 executeQuery·p1.00:   3330.277 ms/op


# Run progress: 70.56% complete, ETA 02:43:42
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5544.870 ms/op
# Warmup Iteration   2: 3296.723 ms/op
# Warmup Iteration   3: 3451.912 ms/op
# Warmup Iteration   4: 3258.974 ms/op
# Warmup Iteration   5: 3275.751 ms/op
Iteration   1: 3107.979 ms/op
                 executeQuery·p0.00:   3107.979 ms/op
                 executeQuery·p0.50:   3107.979 ms/op
                 executeQuery·p0.90:   3107.979 ms/op
                 executeQuery·p0.95:   3107.979 ms/op
                 executeQuery·p0.99:   3107.979 ms/op
                 executeQuery·p0.999:  3107.979 ms/op
                 executeQuery·p0.9999: 3107.979 ms/op
                 executeQuery·p1.00:   3107.979 ms/op

Iteration   2: 3225.420 ms/op
                 executeQuery·p0.00:   3225.420 ms/op
                 executeQuery·p0.50:   3225.420 ms/op
                 executeQuery·p0.90:   3225.420 ms/op
                 executeQuery·p0.95:   3225.420 ms/op
                 executeQuery·p0.99:   3225.420 ms/op
                 executeQuery·p0.999:  3225.420 ms/op
                 executeQuery·p0.9999: 3225.420 ms/op
                 executeQuery·p1.00:   3225.420 ms/op

Iteration   3: 3191.865 ms/op
                 executeQuery·p0.00:   3191.865 ms/op
                 executeQuery·p0.50:   3191.865 ms/op
                 executeQuery·p0.90:   3191.865 ms/op
                 executeQuery·p0.95:   3191.865 ms/op
                 executeQuery·p0.99:   3191.865 ms/op
                 executeQuery·p0.999:  3191.865 ms/op
                 executeQuery·p0.9999: 3191.865 ms/op
                 executeQuery·p1.00:   3191.865 ms/op

Iteration   4: 3204.448 ms/op
                 executeQuery·p0.00:   3204.448 ms/op
                 executeQuery·p0.50:   3204.448 ms/op
                 executeQuery·p0.90:   3204.448 ms/op
                 executeQuery·p0.95:   3204.448 ms/op
                 executeQuery·p0.99:   3204.448 ms/op
                 executeQuery·p0.999:  3204.448 ms/op
                 executeQuery·p0.9999: 3204.448 ms/op
                 executeQuery·p1.00:   3204.448 ms/op

Iteration   5: 3221.225 ms/op
                 executeQuery·p0.00:   3221.225 ms/op
                 executeQuery·p0.50:   3221.225 ms/op
                 executeQuery·p0.90:   3221.225 ms/op
                 executeQuery·p0.95:   3221.225 ms/op
                 executeQuery·p0.99:   3221.225 ms/op
                 executeQuery·p0.999:  3221.225 ms/op
                 executeQuery·p0.9999: 3221.225 ms/op
                 executeQuery·p1.00:   3221.225 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   3259.394 ±(99.9%) 137.358 ms/op

  Histogram, ms/op:
    [3100.000, 3125.000) = 1 
    [3125.000, 3150.000) = 0 
    [3150.000, 3175.000) = 0 
    [3175.000, 3200.000) = 1 
    [3200.000, 3225.000) = 2 
    [3225.000, 3250.000) = 2 
    [3250.000, 3275.000) = 0 
    [3275.000, 3300.000) = 0 
    [3300.000, 3325.000) = 1 
    [3325.000, 3350.000) = 2 
    [3350.000, 3375.000) = 0 
    [3375.000, 3400.000) = 0 
    [3400.000, 3425.000) = 0 
    [3425.000, 3450.000) = 1 
    [3450.000, 3475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3107.979 ms/op
     p(50.0000) =   3233.808 ms/op
     p(90.0000) =   3417.099 ms/op
     p(95.0000) =   3426.746 ms/op
     p(99.0000) =   3426.746 ms/op
     p(99.9000) =   3426.746 ms/op
     p(99.9900) =   3426.746 ms/op
     p(99.9990) =   3426.746 ms/op
     p(99.9999) =   3426.746 ms/op
    p(100.0000) =   3426.746 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 71.11% complete, ETA 02:42:17
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
316.228 ±(99.9%) 120.925 ms/op
# Warmup Iteration   2: 257.653 ±(99.9%) 9.173 ms/op
# Warmup Iteration   3: 253.013 ±(99.9%) 9.195 ms/op
# Warmup Iteration   4: 252.860 ±(99.9%) 8.393 ms/op
# Warmup Iteration   5: 258.428 ±(99.9%) 8.698 ms/op
Iteration   1: 246.000 ±(99.9%) 3.300 ms/op
                 executeQuery·p0.00:   240.386 ms/op
                 executeQuery·p0.50:   245.236 ms/op
                 executeQuery·p0.90:   251.658 ms/op
                 executeQuery·p0.95:   252.772 ms/op
                 executeQuery·p0.99:   252.969 ms/op
                 executeQuery·p0.999:  252.969 ms/op
                 executeQuery·p0.9999: 252.969 ms/op
                 executeQuery·p1.00:   252.969 ms/op

Iteration   2: 254.334 ±(99.9%) 3.716 ms/op
                 executeQuery·p0.00:   249.037 ms/op
                 executeQuery·p0.50:   252.838 ms/op
                 executeQuery·p0.90:   263.717 ms/op
                 executeQuery·p0.95:   267.452 ms/op
                 executeQuery·p0.99:   268.173 ms/op
                 executeQuery·p0.999:  268.173 ms/op
                 executeQuery·p0.9999: 268.173 ms/op
                 executeQuery·p1.00:   268.173 ms/op

Iteration   3: 253.897 ±(99.9%) 9.169 ms/op
                 executeQuery·p0.00:   239.337 ms/op
                 executeQuery·p0.50:   251.920 ms/op
                 executeQuery·p0.90:   267.518 ms/op
                 executeQuery·p0.95:   285.671 ms/op
                 executeQuery·p0.99:   291.504 ms/op
                 executeQuery·p0.999:  291.504 ms/op
                 executeQuery·p0.9999: 291.504 ms/op
                 executeQuery·p1.00:   291.504 ms/op

Iteration   4: 244.733 ±(99.9%) 3.164 ms/op
                 executeQuery·p0.00:   239.337 ms/op
                 executeQuery·p0.50:   243.139 ms/op
                 executeQuery·p0.90:   250.479 ms/op
                 executeQuery·p0.95:   251.199 ms/op
                 executeQuery·p0.99:   251.396 ms/op
                 executeQuery·p0.999:  251.396 ms/op
                 executeQuery·p0.9999: 251.396 ms/op
                 executeQuery·p1.00:   251.396 ms/op

Iteration   5: 249.725 ±(99.9%) 4.104 ms/op
                 executeQuery·p0.00:   240.648 ms/op
                 executeQuery·p0.50:   250.085 ms/op
                 executeQuery·p0.90:   257.819 ms/op
                 executeQuery·p0.95:   260.112 ms/op
                 executeQuery·p0.99:   260.571 ms/op
                 executeQuery·p0.999:  260.571 ms/op
                 executeQuery·p0.9999: 260.571 ms/op
                 executeQuery·p1.00:   260.571 ms/op


# Run progress: 71.67% complete, ETA 02:38:37
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
314.556 ±(99.9%) 120.963 ms/op
# Warmup Iteration   2: 259.963 ±(99.9%) 11.366 ms/op
# Warmup Iteration   3: 259.999 ±(99.9%) 10.522 ms/op
# Warmup Iteration   4: 261.763 ±(99.9%) 13.691 ms/op
# Warmup Iteration   5: 261.131 ±(99.9%) 9.168 ms/op
Iteration   1: 250.496 ±(99.9%) 5.307 ms/op
                 executeQuery·p0.00:   239.337 ms/op
                 executeQuery·p0.50:   251.658 ms/op
                 executeQuery·p0.90:   259.523 ms/op
                 executeQuery·p0.95:   263.088 ms/op
                 executeQuery·p0.99:   263.455 ms/op
                 executeQuery·p0.999:  263.455 ms/op
                 executeQuery·p0.9999: 263.455 ms/op
                 executeQuery·p1.00:   263.455 ms/op

Iteration   2: 257.676 ±(99.9%) 5.265 ms/op
                 executeQuery·p0.00:   238.813 ms/op
                 executeQuery·p0.50:   257.425 ms/op
                 executeQuery·p0.90:   265.762 ms/op
                 executeQuery·p0.95:   268.383 ms/op
                 executeQuery·p0.99:   268.960 ms/op
                 executeQuery·p0.999:  268.960 ms/op
                 executeQuery·p0.9999: 268.960 ms/op
                 executeQuery·p1.00:   268.960 ms/op

Iteration   3: 263.538 ±(99.9%) 4.694 ms/op
                 executeQuery·p0.00:   252.969 ms/op
                 executeQuery·p0.50:   264.241 ms/op
                 executeQuery·p0.90:   271.267 ms/op
                 executeQuery·p0.95:   274.701 ms/op
                 executeQuery·p0.99:   275.251 ms/op
                 executeQuery·p0.999:  275.251 ms/op
                 executeQuery·p0.9999: 275.251 ms/op
                 executeQuery·p1.00:   275.251 ms/op

Iteration   4: 260.607 ±(99.9%) 11.467 ms/op
                 executeQuery·p0.00:   239.600 ms/op
                 executeQuery·p0.50:   258.212 ms/op
                 executeQuery·p0.90:   288.621 ms/op
                 executeQuery·p0.95:   300.601 ms/op
                 executeQuery·p0.99:   301.466 ms/op
                 executeQuery·p0.999:  301.466 ms/op
                 executeQuery·p0.9999: 301.466 ms/op
                 executeQuery·p1.00:   301.466 ms/op

Iteration   5: 256.889 ±(99.9%) 4.879 ms/op
                 executeQuery·p0.00:   240.648 ms/op
                 executeQuery·p0.50:   257.950 ms/op
                 executeQuery·p0.90:   263.455 ms/op
                 executeQuery·p0.95:   264.241 ms/op
                 executeQuery·p0.99:   264.241 ms/op
                 executeQuery·p0.999:  264.241 ms/op
                 executeQuery·p0.9999: 264.241 ms/op
                 executeQuery·p1.00:   264.241 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 232
  mean =    253.618 ±(99.9%) 2.067 ms/op

  Histogram, ms/op:
    [230.000, 235.000) = 0 
    [235.000, 240.000) = 9 
    [240.000, 245.000) = 40 
    [245.000, 250.000) = 29 
    [250.000, 255.000) = 52 
    [255.000, 260.000) = 48 
    [260.000, 265.000) = 34 
    [265.000, 270.000) = 13 
    [270.000, 275.000) = 3 
    [275.000, 280.000) = 1 
    [280.000, 285.000) = 0 
    [285.000, 290.000) = 0 
    [290.000, 295.000) = 1 
    [295.000, 300.000) = 1 
    [300.000, 305.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    238.813 ms/op
     p(50.0000) =    253.231 ms/op
     p(90.0000) =    264.425 ms/op
     p(95.0000) =    268.173 ms/op
     p(99.0000) =    294.314 ms/op
     p(99.9000) =    301.466 ms/op
     p(99.9900) =    301.466 ms/op
     p(99.9990) =    301.466 ms/op
     p(99.9999) =    301.466 ms/op
    p(100.0000) =    301.466 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 72.22% complete, ETA 02:34:58
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5653.922 ms/op
# Warmup Iteration   2: 3359.638 ms/op
# Warmup Iteration   3: 3435.135 ms/op
# Warmup Iteration   4: 3166.700 ms/op
# Warmup Iteration   5: 3342.860 ms/op
Iteration   1: 3275.751 ms/op
                 executeQuery·p0.00:   3275.751 ms/op
                 executeQuery·p0.50:   3275.751 ms/op
                 executeQuery·p0.90:   3275.751 ms/op
                 executeQuery·p0.95:   3275.751 ms/op
                 executeQuery·p0.99:   3275.751 ms/op
                 executeQuery·p0.999:  3275.751 ms/op
                 executeQuery·p0.9999: 3275.751 ms/op
                 executeQuery·p1.00:   3275.751 ms/op

Iteration   2: 3330.277 ms/op
                 executeQuery·p0.00:   3330.277 ms/op
                 executeQuery·p0.50:   3330.277 ms/op
                 executeQuery·p0.90:   3330.277 ms/op
                 executeQuery·p0.95:   3330.277 ms/op
                 executeQuery·p0.99:   3330.277 ms/op
                 executeQuery·p0.999:  3330.277 ms/op
                 executeQuery·p0.9999: 3330.277 ms/op
                 executeQuery·p1.00:   3330.277 ms/op

Iteration   3: 3242.197 ms/op
                 executeQuery·p0.00:   3242.197 ms/op
                 executeQuery·p0.50:   3242.197 ms/op
                 executeQuery·p0.90:   3242.197 ms/op
                 executeQuery·p0.95:   3242.197 ms/op
                 executeQuery·p0.99:   3242.197 ms/op
                 executeQuery·p0.999:  3242.197 ms/op
                 executeQuery·p0.9999: 3242.197 ms/op
                 executeQuery·p1.00:   3242.197 ms/op

Iteration   4: 3439.329 ms/op
                 executeQuery·p0.00:   3439.329 ms/op
                 executeQuery·p0.50:   3439.329 ms/op
                 executeQuery·p0.90:   3439.329 ms/op
                 executeQuery·p0.95:   3439.329 ms/op
                 executeQuery·p0.99:   3439.329 ms/op
                 executeQuery·p0.999:  3439.329 ms/op
                 executeQuery·p0.9999: 3439.329 ms/op
                 executeQuery·p1.00:   3439.329 ms/op

Iteration   5: 3267.363 ms/op
                 executeQuery·p0.00:   3267.363 ms/op
                 executeQuery·p0.50:   3267.363 ms/op
                 executeQuery·p0.90:   3267.363 ms/op
                 executeQuery·p0.95:   3267.363 ms/op
                 executeQuery·p0.99:   3267.363 ms/op
                 executeQuery·p0.999:  3267.363 ms/op
                 executeQuery·p0.9999: 3267.363 ms/op
                 executeQuery·p1.00:   3267.363 ms/op


# Run progress: 72.78% complete, ETA 02:33:25
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5502.927 ms/op
# Warmup Iteration   2: 3284.140 ms/op
# Warmup Iteration   3: 3523.215 ms/op
# Warmup Iteration   4: 3242.197 ms/op
# Warmup Iteration   5: 3397.386 ms/op
Iteration   1: 3342.860 ms/op
                 executeQuery·p0.00:   3342.860 ms/op
                 executeQuery·p0.50:   3342.860 ms/op
                 executeQuery·p0.90:   3342.860 ms/op
                 executeQuery·p0.95:   3342.860 ms/op
                 executeQuery·p0.99:   3342.860 ms/op
                 executeQuery·p0.999:  3342.860 ms/op
                 executeQuery·p0.9999: 3342.860 ms/op
                 executeQuery·p1.00:   3342.860 ms/op

Iteration   2: 3326.083 ms/op
                 executeQuery·p0.00:   3326.083 ms/op
                 executeQuery·p0.50:   3326.083 ms/op
                 executeQuery·p0.90:   3326.083 ms/op
                 executeQuery·p0.95:   3326.083 ms/op
                 executeQuery·p0.99:   3326.083 ms/op
                 executeQuery·p0.999:  3326.083 ms/op
                 executeQuery·p0.9999: 3326.083 ms/op
                 executeQuery·p1.00:   3326.083 ms/op

Iteration   3: 3309.306 ms/op
                 executeQuery·p0.00:   3309.306 ms/op
                 executeQuery·p0.50:   3309.306 ms/op
                 executeQuery·p0.90:   3309.306 ms/op
                 executeQuery·p0.95:   3309.306 ms/op
                 executeQuery·p0.99:   3309.306 ms/op
                 executeQuery·p0.999:  3309.306 ms/op
                 executeQuery·p0.9999: 3309.306 ms/op
                 executeQuery·p1.00:   3309.306 ms/op

Iteration   4: 3221.225 ms/op
                 executeQuery·p0.00:   3221.225 ms/op
                 executeQuery·p0.50:   3221.225 ms/op
                 executeQuery·p0.90:   3221.225 ms/op
                 executeQuery·p0.95:   3221.225 ms/op
                 executeQuery·p0.99:   3221.225 ms/op
                 executeQuery·p0.999:  3221.225 ms/op
                 executeQuery·p0.9999: 3221.225 ms/op
                 executeQuery·p1.00:   3221.225 ms/op

Iteration   5: 3221.225 ms/op
                 executeQuery·p0.00:   3221.225 ms/op
                 executeQuery·p0.50:   3221.225 ms/op
                 executeQuery·p0.90:   3221.225 ms/op
                 executeQuery·p0.95:   3221.225 ms/op
                 executeQuery·p0.99:   3221.225 ms/op
                 executeQuery·p0.999:  3221.225 ms/op
                 executeQuery·p0.9999: 3221.225 ms/op
                 executeQuery·p1.00:   3221.225 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 10
  mean =   3297.562 ±(99.9%) 101.141 ms/op

  Histogram, ms/op:
    [3200.000, 3225.000) = 2 
    [3225.000, 3250.000) = 1 
    [3250.000, 3275.000) = 1 
    [3275.000, 3300.000) = 1 
    [3300.000, 3325.000) = 1 
    [3325.000, 3350.000) = 3 
    [3350.000, 3375.000) = 0 
    [3375.000, 3400.000) = 0 
    [3400.000, 3425.000) = 0 
    [3425.000, 3450.000) = 1 
    [3450.000, 3475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3221.225 ms/op
     p(50.0000) =   3292.529 ms/op
     p(90.0000) =   3429.682 ms/op
     p(95.0000) =   3439.329 ms/op
     p(99.0000) =   3439.329 ms/op
     p(99.9000) =   3439.329 ms/op
     p(99.9900) =   3439.329 ms/op
     p(99.9990) =   3439.329 ms/op
     p(99.9999) =   3439.329 ms/op
    p(100.0000) =   3439.329 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 73.33% complete, ETA 02:30:59
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
207.495 ±(99.9%) 7.750 ms/op
# Warmup Iteration   2: 209.169 ±(99.9%) 2.135 ms/op
# Warmup Iteration   3: 210.507 ±(99.9%) 2.244 ms/op
# Warmup Iteration   4: 207.254 ±(99.9%) 1.460 ms/op
# Warmup Iteration   5: 207.313 ±(99.9%) 1.446 ms/op
Iteration   1: 210.988 ±(99.9%) 2.191 ms/op
                 executeQuery·p0.00:   205.521 ms/op
                 executeQuery·p0.50:   213.910 ms/op
                 executeQuery·p0.90:   215.220 ms/op
                 executeQuery·p0.95:   215.482 ms/op
                 executeQuery·p0.99:   216.793 ms/op
                 executeQuery·p0.999:  216.793 ms/op
                 executeQuery·p0.9999: 216.793 ms/op
                 executeQuery·p1.00:   216.793 ms/op

Iteration   2: 215.878 ±(99.9%) 4.793 ms/op
                 executeQuery·p0.00:   213.647 ms/op
                 executeQuery·p0.50:   214.434 ms/op
                 executeQuery·p0.90:   215.482 ms/op
                 executeQuery·p0.95:   217.317 ms/op
                 executeQuery·p0.99:   278.397 ms/op
                 executeQuery·p0.999:  278.397 ms/op
                 executeQuery·p0.9999: 278.397 ms/op
                 executeQuery·p1.00:   278.397 ms/op

Iteration   3: 215.862 ±(99.9%) 4.623 ms/op
                 executeQuery·p0.00:   212.074 ms/op
                 executeQuery·p0.50:   214.434 ms/op
                 executeQuery·p0.90:   215.587 ms/op
                 executeQuery·p0.95:   218.995 ms/op
                 executeQuery·p0.99:   275.775 ms/op
                 executeQuery·p0.999:  275.775 ms/op
                 executeQuery·p0.9999: 275.775 ms/op
                 executeQuery·p1.00:   275.775 ms/op

Iteration   4: 215.443 ±(99.9%) 4.242 ms/op
                 executeQuery·p0.00:   205.783 ms/op
                 executeQuery·p0.50:   214.958 ms/op
                 executeQuery·p0.90:   215.797 ms/op
                 executeQuery·p0.95:   216.321 ms/op
                 executeQuery·p0.99:   268.960 ms/op
                 executeQuery·p0.999:  268.960 ms/op
                 executeQuery·p0.9999: 268.960 ms/op
                 executeQuery·p1.00:   268.960 ms/op

Iteration   5: 207.479 ±(99.9%) 1.464 ms/op
                 executeQuery·p0.00:   205.521 ms/op
                 executeQuery·p0.50:   206.045 ms/op
                 executeQuery·p0.90:   213.910 ms/op
                 executeQuery·p0.95:   214.041 ms/op
                 executeQuery·p0.99:   214.958 ms/op
                 executeQuery·p0.999:  214.958 ms/op
                 executeQuery·p0.9999: 214.958 ms/op
                 executeQuery·p1.00:   214.958 ms/op


# Run progress: 73.89% complete, ETA 02:27:19
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
203.921 ±(99.9%) 6.614 ms/op
# Warmup Iteration   2: 215.733 ±(99.9%) 0.760 ms/op
# Warmup Iteration   3: 215.270 ±(99.9%) 0.371 ms/op
# Warmup Iteration   4: 215.215 ±(99.9%) 0.434 ms/op
# Warmup Iteration   5: 215.270 ±(99.9%) 0.277 ms/op
Iteration   1: 215.298 ±(99.9%) 0.384 ms/op
                 executeQuery·p0.00:   213.910 ms/op
                 executeQuery·p0.50:   215.220 ms/op
                 executeQuery·p0.90:   216.112 ms/op
                 executeQuery·p0.95:   216.793 ms/op
                 executeQuery·p0.99:   218.104 ms/op
                 executeQuery·p0.999:  218.104 ms/op
                 executeQuery·p0.9999: 218.104 ms/op
                 executeQuery·p1.00:   218.104 ms/op

Iteration   2: 215.622 ±(99.9%) 1.775 ms/op
                 executeQuery·p0.00:   207.094 ms/op
                 executeQuery·p0.50:   215.482 ms/op
                 executeQuery·p0.90:   216.269 ms/op
                 executeQuery·p0.95:   217.003 ms/op
                 executeQuery·p0.99:   236.978 ms/op
                 executeQuery·p0.999:  236.978 ms/op
                 executeQuery·p0.9999: 236.978 ms/op
                 executeQuery·p1.00:   236.978 ms/op

Iteration   3: 216.343 ±(99.9%) 2.300 ms/op
                 executeQuery·p0.00:   214.172 ms/op
                 executeQuery·p0.50:   215.745 ms/op
                 executeQuery·p0.90:   216.688 ms/op
                 executeQuery·p0.95:   219.952 ms/op
                 executeQuery·p0.99:   244.842 ms/op
                 executeQuery·p0.999:  244.842 ms/op
                 executeQuery·p0.9999: 244.842 ms/op
                 executeQuery·p1.00:   244.842 ms/op

Iteration   4: 214.886 ±(99.9%) 1.049 ms/op
                 executeQuery·p0.00:   206.832 ms/op
                 executeQuery·p0.50:   215.220 ms/op
                 executeQuery·p0.90:   216.269 ms/op
                 executeQuery·p0.95:   216.688 ms/op
                 executeQuery·p0.99:   217.055 ms/op
                 executeQuery·p0.999:  217.055 ms/op
                 executeQuery·p0.9999: 217.055 ms/op
                 executeQuery·p1.00:   217.055 ms/op

Iteration   5: 211.337 ±(99.9%) 2.133 ms/op
                 executeQuery·p0.00:   206.307 ms/op
                 executeQuery·p0.50:   214.565 ms/op
                 executeQuery·p0.90:   215.745 ms/op
                 executeQuery·p0.95:   216.007 ms/op
                 executeQuery·p0.99:   216.531 ms/op
                 executeQuery·p0.999:  216.531 ms/op
                 executeQuery·p0.9999: 216.531 ms/op
                 executeQuery·p1.00:   216.531 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 473
  mean =    213.870 ±(99.9%) 0.952 ms/op

  Histogram, ms/op:
    [200.000, 205.000) = 0 
    [205.000, 210.000) = 90 
    [210.000, 215.000) = 203 
    [215.000, 220.000) = 173 
    [220.000, 225.000) = 2 
    [225.000, 230.000) = 0 
    [230.000, 235.000) = 0 
    [235.000, 240.000) = 1 
    [240.000, 245.000) = 1 
    [245.000, 250.000) = 0 
    [250.000, 255.000) = 0 
    [255.000, 260.000) = 0 
    [260.000, 265.000) = 0 
    [265.000, 270.000) = 1 
    [270.000, 275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    205.521 ms/op
     p(50.0000) =    214.696 ms/op
     p(90.0000) =    216.007 ms/op
     p(95.0000) =    216.531 ms/op
     p(99.0000) =    239.023 ms/op
     p(99.9000) =    278.397 ms/op
     p(99.9900) =    278.397 ms/op
     p(99.9990) =    278.397 ms/op
     p(99.9999) =    278.397 ms/op
    p(100.0000) =    278.397 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 74.44% complete, ETA 02:23:42
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1881.145 ±(99.9%) 317.389 ms/op
# Warmup Iteration   2: 1896.524 ±(99.9%) 266.827 ms/op
# Warmup Iteration   3: 1987.052 ±(99.9%) 60.632 ms/op
# Warmup Iteration   4: 1964.332 ±(99.9%) 10.949 ms/op
# Warmup Iteration   5: 1969.925 ±(99.9%) 29.207 ms/op
Iteration   1: 1987.751 ±(99.9%) 65.530 ms/op
                 executeQuery·p0.00:   1971.323 ms/op
                 executeQuery·p0.50:   1975.517 ms/op
                 executeQuery·p0.90:   2030.043 ms/op
                 executeQuery·p0.95:   2030.043 ms/op
                 executeQuery·p0.99:   2030.043 ms/op
                 executeQuery·p0.999:  2030.043 ms/op
                 executeQuery·p0.9999: 2030.043 ms/op
                 executeQuery·p1.00:   2030.043 ms/op

Iteration   2: 1996.489 ±(99.9%) 74.850 ms/op
                 executeQuery·p0.00:   1971.323 ms/op
                 executeQuery·p0.50:   1993.343 ms/op
                 executeQuery·p0.90:   2042.626 ms/op
                 executeQuery·p0.95:   2042.626 ms/op
                 executeQuery·p0.99:   2042.626 ms/op
                 executeQuery·p0.999:  2042.626 ms/op
                 executeQuery·p0.9999: 2042.626 ms/op
                 executeQuery·p1.00:   2042.626 ms/op

Iteration   3: 2003.619 ±(99.9%) 16.745 ms/op
                 executeQuery·p0.00:   2000.683 ms/op
                 executeQuery·p0.50:   2002.780 ms/op
                 executeQuery·p0.90:   2011.169 ms/op
                 executeQuery·p0.95:   2011.169 ms/op
                 executeQuery·p0.99:   2011.169 ms/op
                 executeQuery·p0.999:  2011.169 ms/op
                 executeQuery·p0.9999: 2011.169 ms/op
                 executeQuery·p1.00:   2011.169 ms/op

Iteration   4: 2011.588 ±(99.9%) 71.411 ms/op
                 executeQuery·p0.00:   2002.780 ms/op
                 executeQuery·p0.50:   2002.780 ms/op
                 executeQuery·p0.90:   2044.723 ms/op
                 executeQuery·p0.95:   2044.723 ms/op
                 executeQuery·p0.99:   2044.723 ms/op
                 executeQuery·p0.999:  2044.723 ms/op
                 executeQuery·p0.9999: 2044.723 ms/op
                 executeQuery·p1.00:   2044.723 ms/op

Iteration   5: 2015.783 ±(99.9%) 116.661 ms/op
                 executeQuery·p0.00:   2000.683 ms/op
                 executeQuery·p0.50:   2002.780 ms/op
                 executeQuery·p0.90:   2069.889 ms/op
                 executeQuery·p0.95:   2069.889 ms/op
                 executeQuery·p0.99:   2069.889 ms/op
                 executeQuery·p0.999:  2069.889 ms/op
                 executeQuery·p0.9999: 2069.889 ms/op
                 executeQuery·p1.00:   2069.889 ms/op


# Run progress: 75.00% complete, ETA 02:20:10
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1887.437 ±(99.9%) 273.492 ms/op
# Warmup Iteration   2: 1908.758 ±(99.9%) 266.743 ms/op
# Warmup Iteration   3: 1992.644 ±(99.9%) 64.035 ms/op
# Warmup Iteration   4: 1966.779 ±(99.9%) 10.129 ms/op
# Warmup Iteration   5: 1985.304 ±(99.9%) 71.414 ms/op
Iteration   1: 1962.235 ±(99.9%) 15.633 ms/op
                 executeQuery·p0.00:   1956.643 ms/op
                 executeQuery·p0.50:   1961.886 ms/op
                 executeQuery·p0.90:   1969.226 ms/op
                 executeQuery·p0.95:   1969.226 ms/op
                 executeQuery·p0.99:   1969.226 ms/op
                 executeQuery·p0.999:  1969.226 ms/op
                 executeQuery·p0.9999: 1969.226 ms/op
                 executeQuery·p1.00:   1969.226 ms/op

Iteration   2: 2011.518 ±(99.9%) 175.063 ms/op
                 executeQuery·p0.00:   1956.643 ms/op
                 executeQuery·p0.50:   1989.149 ms/op
                 executeQuery·p0.90:   2092.958 ms/op
                 executeQuery·p0.95:   2092.958 ms/op
                 executeQuery·p0.99:   2092.958 ms/op
                 executeQuery·p0.999:  2092.958 ms/op
                 executeQuery·p0.9999: 2092.958 ms/op
                 executeQuery·p1.00:   2092.958 ms/op

Iteration   3: 2083.311 ±(99.9%) 4.423 ms/op
                 executeQuery·p0.00:   2082.472 ms/op
                 executeQuery·p0.50:   2082.472 ms/op
                 executeQuery·p0.90:   2084.569 ms/op
                 executeQuery·p0.95:   2084.569 ms/op
                 executeQuery·p0.99:   2084.569 ms/op
                 executeQuery·p0.999:  2084.569 ms/op
                 executeQuery·p0.9999: 2084.569 ms/op
                 executeQuery·p1.00:   2084.569 ms/op

Iteration   4: 2084.150 ±(99.9%) 14.446 ms/op
                 executeQuery·p0.00:   2082.472 ms/op
                 executeQuery·p0.50:   2082.472 ms/op
                 executeQuery·p0.90:   2090.861 ms/op
                 executeQuery·p0.95:   2090.861 ms/op
                 executeQuery·p0.99:   2090.861 ms/op
                 executeQuery·p0.999:  2090.861 ms/op
                 executeQuery·p0.9999: 2090.861 ms/op
                 executeQuery·p1.00:   2090.861 ms/op

Iteration   5: 2083.311 ±(99.9%) 4.423 ms/op
                 executeQuery·p0.00:   2082.472 ms/op
                 executeQuery·p0.50:   2082.472 ms/op
                 executeQuery·p0.90:   2084.569 ms/op
                 executeQuery·p0.95:   2084.569 ms/op
                 executeQuery·p0.99:   2084.569 ms/op
                 executeQuery·p0.999:  2084.569 ms/op
                 executeQuery·p0.9999: 2084.569 ms/op
                 executeQuery·p1.00:   2084.569 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 54
  mean =   2021.422 ±(99.9%) 22.882 ms/op

  Histogram, ms/op:
    [1900.000, 1912.500) = 0 
    [1912.500, 1925.000) = 0 
    [1925.000, 1937.500) = 0 
    [1937.500, 1950.000) = 0 
    [1950.000, 1962.500) = 5 
    [1962.500, 1975.000) = 8 
    [1975.000, 1987.500) = 3 
    [1987.500, 2000.000) = 0 
    [2000.000, 2012.500) = 17 
    [2012.500, 2025.000) = 0 
    [2025.000, 2037.500) = 1 
    [2037.500, 2050.000) = 2 
    [2050.000, 2062.500) = 0 
    [2062.500, 2075.000) = 1 
    [2075.000, 2087.500) = 15 

  Percentiles, ms/op:
      p(0.0000) =   1956.643 ms/op
     p(50.0000) =   2002.780 ms/op
     p(90.0000) =   2084.569 ms/op
     p(95.0000) =   2086.142 ms/op
     p(99.0000) =   2092.958 ms/op
     p(99.9000) =   2092.958 ms/op
     p(99.9900) =   2092.958 ms/op
     p(99.9990) =   2092.958 ms/op
     p(99.9999) =   2092.958 ms/op
    p(100.0000) =   2092.958 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 75.56% complete, ETA 02:16:39
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
57713.623 ms/op
# Warmup Iteration   2: 57646.514 ms/op
# Warmup Iteration   3: 57243.861 ms/op
# Warmup Iteration   4: 57310.970 ms/op
# Warmup Iteration   5: 57176.752 ms/op
Iteration   1: 57176.752 ms/op
                 executeQuery·p0.00:   57176.752 ms/op
                 executeQuery·p0.50:   57176.752 ms/op
                 executeQuery·p0.90:   57176.752 ms/op
                 executeQuery·p0.95:   57176.752 ms/op
                 executeQuery·p0.99:   57176.752 ms/op
                 executeQuery·p0.999:  57176.752 ms/op
                 executeQuery·p0.9999: 57176.752 ms/op
                 executeQuery·p1.00:   57176.752 ms/op

Iteration   2: 57713.623 ms/op
                 executeQuery·p0.00:   57713.623 ms/op
                 executeQuery·p0.50:   57713.623 ms/op
                 executeQuery·p0.90:   57713.623 ms/op
                 executeQuery·p0.95:   57713.623 ms/op
                 executeQuery·p0.99:   57713.623 ms/op
                 executeQuery·p0.999:  57713.623 ms/op
                 executeQuery·p0.9999: 57713.623 ms/op
                 executeQuery·p1.00:   57713.623 ms/op

Iteration   3: 57176.752 ms/op
                 executeQuery·p0.00:   57176.752 ms/op
                 executeQuery·p0.50:   57176.752 ms/op
                 executeQuery·p0.90:   57176.752 ms/op
                 executeQuery·p0.95:   57176.752 ms/op
                 executeQuery·p0.99:   57176.752 ms/op
                 executeQuery·p0.999:  57176.752 ms/op
                 executeQuery·p0.9999: 57176.752 ms/op
                 executeQuery·p1.00:   57176.752 ms/op

Iteration   4: 57445.188 ms/op
                 executeQuery·p0.00:   57445.188 ms/op
                 executeQuery·p0.50:   57445.188 ms/op
                 executeQuery·p0.90:   57445.188 ms/op
                 executeQuery·p0.95:   57445.188 ms/op
                 executeQuery·p0.99:   57445.188 ms/op
                 executeQuery·p0.999:  57445.188 ms/op
                 executeQuery·p0.9999: 57445.188 ms/op
                 executeQuery·p1.00:   57445.188 ms/op

Iteration   5: 57579.405 ms/op
                 executeQuery·p0.00:   57579.405 ms/op
                 executeQuery·p0.50:   57579.405 ms/op
                 executeQuery·p0.90:   57579.405 ms/op
                 executeQuery·p0.95:   57579.405 ms/op
                 executeQuery·p0.99:   57579.405 ms/op
                 executeQuery·p0.999:  57579.405 ms/op
                 executeQuery·p0.9999: 57579.405 ms/op
                 executeQuery·p1.00:   57579.405 ms/op


# Run progress: 76.11% complete, ETA 02:15:35
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
57713.623 ms/op
# Warmup Iteration   2: 57579.405 ms/op
# Warmup Iteration   3: 57646.514 ms/op
# Warmup Iteration   4: 57579.405 ms/op
# Warmup Iteration   5: 57243.861 ms/op
Iteration   1: 57512.296 ms/op
                 executeQuery·p0.00:   57512.296 ms/op
                 executeQuery·p0.50:   57512.296 ms/op
                 executeQuery·p0.90:   57512.296 ms/op
                 executeQuery·p0.95:   57512.296 ms/op
                 executeQuery·p0.99:   57512.296 ms/op
                 executeQuery·p0.999:  57512.296 ms/op
                 executeQuery·p0.9999: 57512.296 ms/op
                 executeQuery·p1.00:   57512.296 ms/op

Iteration   2: 57914.950 ms/op
                 executeQuery·p0.00:   57914.950 ms/op
                 executeQuery·p0.50:   57914.950 ms/op
                 executeQuery·p0.90:   57914.950 ms/op
                 executeQuery·p0.95:   57914.950 ms/op
                 executeQuery·p0.99:   57914.950 ms/op
                 executeQuery·p0.999:  57914.950 ms/op
                 executeQuery·p0.9999: 57914.950 ms/op
                 executeQuery·p1.00:   57914.950 ms/op

Iteration   3: 57646.514 ms/op
                 executeQuery·p0.00:   57646.514 ms/op
                 executeQuery·p0.50:   57646.514 ms/op
                 executeQuery·p0.90:   57646.514 ms/op
                 executeQuery·p0.95:   57646.514 ms/op
                 executeQuery·p0.99:   57646.514 ms/op
                 executeQuery·p0.999:  57646.514 ms/op
                 executeQuery·p0.9999: 57646.514 ms/op
                 executeQuery·p1.00:   57646.514 ms/op

Iteration   4: 58183.385 ms/op
                 executeQuery·p0.00:   58183.385 ms/op
                 executeQuery·p0.50:   58183.385 ms/op
                 executeQuery·p0.90:   58183.385 ms/op
                 executeQuery·p0.95:   58183.385 ms/op
                 executeQuery·p0.99:   58183.385 ms/op
                 executeQuery·p0.999:  58183.385 ms/op
                 executeQuery·p0.9999: 58183.385 ms/op
                 executeQuery·p1.00:   58183.385 ms/op

Iteration   5: 57982.058 ms/op
                 executeQuery·p0.00:   57982.058 ms/op
                 executeQuery·p0.50:   57982.058 ms/op
                 executeQuery·p0.90:   57982.058 ms/op
                 executeQuery·p0.95:   57982.058 ms/op
                 executeQuery·p0.99:   57982.058 ms/op
                 executeQuery·p0.999:  57982.058 ms/op
                 executeQuery·p0.9999: 57982.058 ms/op
                 executeQuery·p1.00:   57982.058 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  57633.092 ±(99.9%) 498.883 ms/op

  Histogram, ms/op:
    [57000.000, 57125.000) = 0 
    [57125.000, 57250.000) = 2 
    [57250.000, 57375.000) = 0 
    [57375.000, 57500.000) = 1 
    [57500.000, 57625.000) = 2 
    [57625.000, 57750.000) = 2 
    [57750.000, 57875.000) = 0 
    [57875.000, 58000.000) = 2 
    [58000.000, 58125.000) = 0 
    [58125.000, 58250.000) = 1 
    [58250.000, 58375.000) = 0 
    [58375.000, 58500.000) = 0 
    [58500.000, 58625.000) = 0 
    [58625.000, 58750.000) = 0 
    [58750.000, 58875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  57176.752 ms/op
     p(50.0000) =  57612.960 ms/op
     p(90.0000) =  58163.252 ms/op
     p(95.0000) =  58183.385 ms/op
     p(99.0000) =  58183.385 ms/op
     p(99.9000) =  58183.385 ms/op
     p(99.9900) =  58183.385 ms/op
     p(99.9990) =  58183.385 ms/op
     p(99.9999) =  58183.385 ms/op
    p(100.0000) =  58183.385 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 76.67% complete, ETA 02:14:24
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
298.351 ±(99.9%) 12.703 ms/op
# Warmup Iteration   2: 292.957 ±(99.9%) 4.778 ms/op
# Warmup Iteration   3: 303.229 ±(99.9%) 8.613 ms/op
# Warmup Iteration   4: 293.015 ±(99.9%) 5.112 ms/op
# Warmup Iteration   5: 287.999 ±(99.9%) 1.775 ms/op
Iteration   1: 290.246 ±(99.9%) 3.792 ms/op
                 executeQuery·p0.00:   285.737 ms/op
                 executeQuery·p0.50:   286.786 ms/op
                 executeQuery·p0.90:   302.200 ms/op
                 executeQuery·p0.95:   302.514 ms/op
                 executeQuery·p0.99:   302.514 ms/op
                 executeQuery·p0.999:  302.514 ms/op
                 executeQuery·p0.9999: 302.514 ms/op
                 executeQuery·p1.00:   302.514 ms/op

Iteration   2: 294.819 ±(99.9%) 5.190 ms/op
                 executeQuery·p0.00:   286.261 ms/op
                 executeQuery·p0.50:   292.291 ms/op
                 executeQuery·p0.90:   302.776 ms/op
                 executeQuery·p0.95:   315.490 ms/op
                 executeQuery·p0.99:   321.389 ms/op
                 executeQuery·p0.999:  321.389 ms/op
                 executeQuery·p0.9999: 321.389 ms/op
                 executeQuery·p1.00:   321.389 ms/op

Iteration   3: 292.388 ±(99.9%) 4.349 ms/op
                 executeQuery·p0.00:   285.737 ms/op
                 executeQuery·p0.50:   287.834 ms/op
                 executeQuery·p0.90:   303.668 ms/op
                 executeQuery·p0.95:   305.870 ms/op
                 executeQuery·p0.99:   306.708 ms/op
                 executeQuery·p0.999:  306.708 ms/op
                 executeQuery·p0.9999: 306.708 ms/op
                 executeQuery·p1.00:   306.708 ms/op

Iteration   4: 290.635 ±(99.9%) 7.300 ms/op
                 executeQuery·p0.00:   286.786 ms/op
                 executeQuery·p0.50:   287.310 ms/op
                 executeQuery·p0.90:   294.545 ms/op
                 executeQuery·p0.95:   319.291 ms/op
                 executeQuery·p0.99:   354.943 ms/op
                 executeQuery·p0.999:  354.943 ms/op
                 executeQuery·p0.9999: 354.943 ms/op
                 executeQuery·p1.00:   354.943 ms/op

Iteration   5: 283.334 ±(99.9%) 2.757 ms/op
                 executeQuery·p0.00:   280.494 ms/op
                 executeQuery·p0.50:   282.067 ms/op
                 executeQuery·p0.90:   286.681 ms/op
                 executeQuery·p0.95:   293.418 ms/op
                 executeQuery·p0.99:   307.233 ms/op
                 executeQuery·p0.999:  307.233 ms/op
                 executeQuery·p0.9999: 307.233 ms/op
                 executeQuery·p1.00:   307.233 ms/op


# Run progress: 77.22% complete, ETA 02:10:46
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
287.849 ±(99.9%) 6.263 ms/op
# Warmup Iteration   2: 282.679 ±(99.9%) 3.658 ms/op
# Warmup Iteration   3: 281.630 ±(99.9%) 2.703 ms/op
# Warmup Iteration   4: 282.402 ±(99.9%) 3.348 ms/op
# Warmup Iteration   5: 281.412 ±(99.9%) 1.595 ms/op
Iteration   1: 283.713 ±(99.9%) 4.548 ms/op
                 executeQuery·p0.00:   278.921 ms/op
                 executeQuery·p0.50:   280.494 ms/op
                 executeQuery·p0.90:   296.852 ms/op
                 executeQuery·p0.95:   301.806 ms/op
                 executeQuery·p0.99:   315.621 ms/op
                 executeQuery·p0.999:  315.621 ms/op
                 executeQuery·p0.9999: 315.621 ms/op
                 executeQuery·p1.00:   315.621 ms/op

Iteration   2: 283.276 ±(99.9%) 4.745 ms/op
                 executeQuery·p0.00:   279.970 ms/op
                 executeQuery·p0.50:   281.018 ms/op
                 executeQuery·p0.90:   288.673 ms/op
                 executeQuery·p0.95:   307.941 ms/op
                 executeQuery·p0.99:   320.864 ms/op
                 executeQuery·p0.999:  320.864 ms/op
                 executeQuery·p0.9999: 320.864 ms/op
                 executeQuery·p1.00:   320.864 ms/op

Iteration   3: 282.475 ±(99.9%) 2.891 ms/op
                 executeQuery·p0.00:   279.970 ms/op
                 executeQuery·p0.50:   280.756 ms/op
                 executeQuery·p0.90:   287.782 ms/op
                 executeQuery·p0.95:   294.964 ms/op
                 executeQuery·p0.99:   305.660 ms/op
                 executeQuery·p0.999:  305.660 ms/op
                 executeQuery·p0.9999: 305.660 ms/op
                 executeQuery·p1.00:   305.660 ms/op

Iteration   4: 283.480 ±(99.9%) 4.718 ms/op
                 executeQuery·p0.00:   279.970 ms/op
                 executeQuery·p0.50:   281.018 ms/op
                 executeQuery·p0.90:   288.516 ms/op
                 executeQuery·p0.95:   300.102 ms/op
                 executeQuery·p0.99:   325.059 ms/op
                 executeQuery·p0.999:  325.059 ms/op
                 executeQuery·p0.9999: 325.059 ms/op
                 executeQuery·p1.00:   325.059 ms/op

Iteration   5: 284.208 ±(99.9%) 7.436 ms/op
                 executeQuery·p0.00:   279.970 ms/op
                 executeQuery·p0.50:   281.018 ms/op
                 executeQuery·p0.90:   289.355 ms/op
                 executeQuery·p0.95:   307.836 ms/op
                 executeQuery·p0.99:   352.846 ms/op
                 executeQuery·p0.999:  352.846 ms/op
                 executeQuery·p0.9999: 352.846 ms/op
                 executeQuery·p1.00:   352.846 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 355
  mean =    286.777 ±(99.9%) 1.631 ms/op

  Histogram, ms/op:
    [270.000, 275.000) = 0 
    [275.000, 280.000) = 22 
    [280.000, 285.000) = 163 
    [285.000, 290.000) = 107 
    [290.000, 295.000) = 13 
    [295.000, 300.000) = 14 
    [300.000, 305.000) = 23 
    [305.000, 310.000) = 5 
    [310.000, 315.000) = 2 
    [315.000, 320.000) = 1 
    [320.000, 325.000) = 2 
    [325.000, 330.000) = 1 
    [330.000, 335.000) = 0 
    [335.000, 340.000) = 0 
    [340.000, 345.000) = 0 
    [345.000, 350.000) = 0 
    [350.000, 355.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    278.921 ms/op
     p(50.0000) =    283.116 ms/op
     p(90.0000) =    300.417 ms/op
     p(95.0000) =    302.514 ms/op
     p(99.0000) =    323.003 ms/op
     p(99.9000) =    354.943 ms/op
     p(99.9900) =    354.943 ms/op
     p(99.9990) =    354.943 ms/op
     p(99.9999) =    354.943 ms/op
    p(100.0000) =    354.943 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 77.78% complete, ETA 02:07:10
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3962.219 ±(99.9%) 32188.375 ms/op
# Warmup Iteration   2: 2828.009 ±(99.9%) 773.402 ms/op
# Warmup Iteration   3: 2843.738 ±(99.9%) 302.623 ms/op
# Warmup Iteration   4: 2881.487 ±(99.9%) 0.001 ms/op
# Warmup Iteration   5: 2918.187 ±(99.9%) 359.143 ms/op
Iteration   1: 2925.527 ±(99.9%) 422.502 ms/op
                 executeQuery·p0.00:   2881.487 ms/op
                 executeQuery·p0.50:   2900.361 ms/op
                 executeQuery·p0.90:   3019.899 ms/op
                 executeQuery·p0.95:   3019.899 ms/op
                 executeQuery·p0.99:   3019.899 ms/op
                 executeQuery·p0.999:  3019.899 ms/op
                 executeQuery·p0.9999: 3019.899 ms/op
                 executeQuery·p1.00:   3019.899 ms/op

Iteration   2: 2783.969 ±(99.9%) 60.098 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2780.824 ms/op
                 executeQuery·p0.90:   2797.601 ms/op
                 executeQuery·p0.95:   2797.601 ms/op
                 executeQuery·p0.99:   2797.601 ms/op
                 executeQuery·p0.999:  2797.601 ms/op
                 executeQuery·p0.9999: 2797.601 ms/op
                 executeQuery·p1.00:   2797.601 ms/op

Iteration   3: 2791.309 ±(99.9%) 135.518 ms/op
                 executeQuery·p0.00:   2780.824 ms/op
                 executeQuery·p0.50:   2780.824 ms/op
                 executeQuery·p0.90:   2822.767 ms/op
                 executeQuery·p0.95:   2822.767 ms/op
                 executeQuery·p0.99:   2822.767 ms/op
                 executeQuery·p0.999:  2822.767 ms/op
                 executeQuery·p0.9999: 2822.767 ms/op
                 executeQuery·p1.00:   2822.767 ms/op

Iteration   4: 2789.212 ±(99.9%) 58.550 ms/op
                 executeQuery·p0.00:   2780.824 ms/op
                 executeQuery·p0.50:   2787.115 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   5: 2811.232 ±(99.9%) 411.269 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2780.824 ms/op
                 executeQuery·p0.90:   2906.653 ms/op
                 executeQuery·p0.95:   2906.653 ms/op
                 executeQuery·p0.99:   2906.653 ms/op
                 executeQuery·p0.999:  2906.653 ms/op
                 executeQuery·p0.9999: 2906.653 ms/op
                 executeQuery·p1.00:   2906.653 ms/op


# Run progress: 78.33% complete, ETA 02:03:39
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2787.115 ±(99.9%) 246.925 ms/op
# Warmup Iteration   2: 2818.572 ±(99.9%) 362.283 ms/op
# Warmup Iteration   3: 2824.864 ±(99.9%) 391.831 ms/op
# Warmup Iteration   4: 2769.289 ±(99.9%) 13.552 ms/op
# Warmup Iteration   5: 2782.921 ±(99.9%) 172.131 ms/op
Iteration   1: 2804.941 ±(99.9%) 206.859 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2797.601 ms/op
                 executeQuery·p0.90:   2847.932 ms/op
                 executeQuery·p0.95:   2847.932 ms/op
                 executeQuery·p0.99:   2847.932 ms/op
                 executeQuery·p0.999:  2847.932 ms/op
                 executeQuery·p0.9999: 2847.932 ms/op
                 executeQuery·p1.00:   2847.932 ms/op

Iteration   2: 2778.726 ±(99.9%) 46.945 ms/op
                 executeQuery·p0.00:   2772.435 ms/op
                 executeQuery·p0.50:   2776.629 ms/op
                 executeQuery·p0.90:   2789.212 ms/op
                 executeQuery·p0.95:   2789.212 ms/op
                 executeQuery·p0.99:   2789.212 ms/op
                 executeQuery·p0.999:  2789.212 ms/op
                 executeQuery·p0.9999: 2789.212 ms/op
                 executeQuery·p1.00:   2789.212 ms/op

Iteration   3: 2776.629 ±(99.9%) 22.130 ms/op
                 executeQuery·p0.00:   2772.435 ms/op
                 executeQuery·p0.50:   2776.629 ms/op
                 executeQuery·p0.90:   2780.824 ms/op
                 executeQuery·p0.95:   2780.824 ms/op
                 executeQuery·p0.99:   2780.824 ms/op
                 executeQuery·p0.999:  2780.824 ms/op
                 executeQuery·p0.9999: 2780.824 ms/op
                 executeQuery·p1.00:   2780.824 ms/op

Iteration   4: 2769.289 ±(99.9%) 34.105 ms/op
                 executeQuery·p0.00:   2764.046 ms/op
                 executeQuery·p0.50:   2768.241 ms/op
                 executeQuery·p0.90:   2776.629 ms/op
                 executeQuery·p0.95:   2776.629 ms/op
                 executeQuery·p0.99:   2776.629 ms/op
                 executeQuery·p0.999:  2776.629 ms/op
                 executeQuery·p0.9999: 2776.629 ms/op
                 executeQuery·p1.00:   2776.629 ms/op

Iteration   5: 2769.289 ±(99.9%) 34.105 ms/op
                 executeQuery·p0.00:   2764.046 ms/op
                 executeQuery·p0.50:   2768.241 ms/op
                 executeQuery·p0.90:   2776.629 ms/op
                 executeQuery·p0.95:   2776.629 ms/op
                 executeQuery·p0.99:   2776.629 ms/op
                 executeQuery·p0.999:  2776.629 ms/op
                 executeQuery·p0.9999: 2776.629 ms/op
                 executeQuery·p1.00:   2776.629 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 40
  mean =   2800.012 ±(99.9%) 29.496 ms/op

  Histogram, ms/op:
    [2700.000, 2725.000) = 0 
    [2725.000, 2750.000) = 0 
    [2750.000, 2775.000) = 8 
    [2775.000, 2800.000) = 23 
    [2800.000, 2825.000) = 3 
    [2825.000, 2850.000) = 1 
    [2850.000, 2875.000) = 0 
    [2875.000, 2900.000) = 2 
    [2900.000, 2925.000) = 2 
    [2925.000, 2950.000) = 0 
    [2950.000, 2975.000) = 0 
    [2975.000, 3000.000) = 0 
    [3000.000, 3025.000) = 1 
    [3025.000, 3050.000) = 0 
    [3050.000, 3075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2764.046 ms/op
     p(50.0000) =   2780.824 ms/op
     p(90.0000) =   2881.487 ms/op
     p(95.0000) =   2918.606 ms/op
     p(99.0000) =   3019.899 ms/op
     p(99.9000) =   3019.899 ms/op
     p(99.9900) =   3019.899 ms/op
     p(99.9990) =   3019.899 ms/op
     p(99.9999) =   3019.899 ms/op
    p(100.0000) =   3019.899 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 78.89% complete, ETA 02:00:08
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
58921.583 ms/op
# Warmup Iteration   2: 58116.276 ms/op
# Warmup Iteration   3: 57982.058 ms/op
# Warmup Iteration   4: 58384.712 ms/op
# Warmup Iteration   5: 57982.058 ms/op
Iteration   1: 58518.929 ms/op
                 executeQuery·p0.00:   58518.929 ms/op
                 executeQuery·p0.50:   58518.929 ms/op
                 executeQuery·p0.90:   58518.929 ms/op
                 executeQuery·p0.95:   58518.929 ms/op
                 executeQuery·p0.99:   58518.929 ms/op
                 executeQuery·p0.999:  58518.929 ms/op
                 executeQuery·p0.9999: 58518.929 ms/op
                 executeQuery·p1.00:   58518.929 ms/op

Iteration   2: 58250.494 ms/op
                 executeQuery·p0.00:   58250.494 ms/op
                 executeQuery·p0.50:   58250.494 ms/op
                 executeQuery·p0.90:   58250.494 ms/op
                 executeQuery·p0.95:   58250.494 ms/op
                 executeQuery·p0.99:   58250.494 ms/op
                 executeQuery·p0.999:  58250.494 ms/op
                 executeQuery·p0.9999: 58250.494 ms/op
                 executeQuery·p1.00:   58250.494 ms/op

Iteration   3: 58720.256 ms/op
                 executeQuery·p0.00:   58720.256 ms/op
                 executeQuery·p0.50:   58720.256 ms/op
                 executeQuery·p0.90:   58720.256 ms/op
                 executeQuery·p0.95:   58720.256 ms/op
                 executeQuery·p0.99:   58720.256 ms/op
                 executeQuery·p0.999:  58720.256 ms/op
                 executeQuery·p0.9999: 58720.256 ms/op
                 executeQuery·p1.00:   58720.256 ms/op

Iteration   4: 58317.603 ms/op
                 executeQuery·p0.00:   58317.603 ms/op
                 executeQuery·p0.50:   58317.603 ms/op
                 executeQuery·p0.90:   58317.603 ms/op
                 executeQuery·p0.95:   58317.603 ms/op
                 executeQuery·p0.99:   58317.603 ms/op
                 executeQuery·p0.999:  58317.603 ms/op
                 executeQuery·p0.9999: 58317.603 ms/op
                 executeQuery·p1.00:   58317.603 ms/op

Iteration   5: 58384.712 ms/op
                 executeQuery·p0.00:   58384.712 ms/op
                 executeQuery·p0.50:   58384.712 ms/op
                 executeQuery·p0.90:   58384.712 ms/op
                 executeQuery·p0.95:   58384.712 ms/op
                 executeQuery·p0.99:   58384.712 ms/op
                 executeQuery·p0.999:  58384.712 ms/op
                 executeQuery·p0.9999: 58384.712 ms/op
                 executeQuery·p1.00:   58384.712 ms/op


# Run progress: 79.44% complete, ETA 01:58:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
57914.950 ms/op
# Warmup Iteration   2: 58720.256 ms/op
# Warmup Iteration   3: 58384.712 ms/op
# Warmup Iteration   4: 58451.821 ms/op
# Warmup Iteration   5: 58586.038 ms/op
Iteration   1: 58250.494 ms/op
                 executeQuery·p0.00:   58250.494 ms/op
                 executeQuery·p0.50:   58250.494 ms/op
                 executeQuery·p0.90:   58250.494 ms/op
                 executeQuery·p0.95:   58250.494 ms/op
                 executeQuery·p0.99:   58250.494 ms/op
                 executeQuery·p0.999:  58250.494 ms/op
                 executeQuery·p0.9999: 58250.494 ms/op
                 executeQuery·p1.00:   58250.494 ms/op

Iteration   2: 58586.038 ms/op
                 executeQuery·p0.00:   58586.038 ms/op
                 executeQuery·p0.50:   58586.038 ms/op
                 executeQuery·p0.90:   58586.038 ms/op
                 executeQuery·p0.95:   58586.038 ms/op
                 executeQuery·p0.99:   58586.038 ms/op
                 executeQuery·p0.999:  58586.038 ms/op
                 executeQuery·p0.9999: 58586.038 ms/op
                 executeQuery·p1.00:   58586.038 ms/op

Iteration   3: 59055.800 ms/op
                 executeQuery·p0.00:   59055.800 ms/op
                 executeQuery·p0.50:   59055.800 ms/op
                 executeQuery·p0.90:   59055.800 ms/op
                 executeQuery·p0.95:   59055.800 ms/op
                 executeQuery·p0.99:   59055.800 ms/op
                 executeQuery·p0.999:  59055.800 ms/op
                 executeQuery·p0.9999: 59055.800 ms/op
                 executeQuery·p1.00:   59055.800 ms/op

Iteration   4: 58854.474 ms/op
                 executeQuery·p0.00:   58854.474 ms/op
                 executeQuery·p0.50:   58854.474 ms/op
                 executeQuery·p0.90:   58854.474 ms/op
                 executeQuery·p0.95:   58854.474 ms/op
                 executeQuery·p0.99:   58854.474 ms/op
                 executeQuery·p0.999:  58854.474 ms/op
                 executeQuery·p0.9999: 58854.474 ms/op
                 executeQuery·p1.00:   58854.474 ms/op

Iteration   5: 58787.365 ms/op
                 executeQuery·p0.00:   58787.365 ms/op
                 executeQuery·p0.50:   58787.365 ms/op
                 executeQuery·p0.90:   58787.365 ms/op
                 executeQuery·p0.95:   58787.365 ms/op
                 executeQuery·p0.99:   58787.365 ms/op
                 executeQuery·p0.999:  58787.365 ms/op
                 executeQuery·p0.9999: 58787.365 ms/op
                 executeQuery·p1.00:   58787.365 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 10
  mean =  58572.616 ±(99.9%) 419.146 ms/op

  Histogram, ms/op:
    [58200.000, 58250.000) = 0 
    [58250.000, 58300.000) = 2 
    [58300.000, 58350.000) = 1 
    [58350.000, 58400.000) = 1 
    [58400.000, 58450.000) = 0 
    [58450.000, 58500.000) = 0 
    [58500.000, 58550.000) = 1 
    [58550.000, 58600.000) = 1 
    [58600.000, 58650.000) = 0 
    [58650.000, 58700.000) = 0 
    [58700.000, 58750.000) = 1 
    [58750.000, 58800.000) = 1 
    [58800.000, 58850.000) = 0 
    [58850.000, 58900.000) = 1 
    [58900.000, 58950.000) = 0 
    [58950.000, 59000.000) = 0 
    [59000.000, 59050.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  58250.494 ms/op
     p(50.0000) =  58552.484 ms/op
     p(90.0000) =  59035.668 ms/op
     p(95.0000) =  59055.800 ms/op
     p(99.0000) =  59055.800 ms/op
     p(99.9000) =  59055.800 ms/op
     p(99.9900) =  59055.800 ms/op
     p(99.9990) =  59055.800 ms/op
     p(99.9999) =  59055.800 ms/op
    p(100.0000) =  59055.800 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 80.00% complete, ETA 01:57:08
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
398.060 ±(99.9%) 31.635 ms/op
# Warmup Iteration   2: 437.917 ±(99.9%) 4.241 ms/op
# Warmup Iteration   3: 348.850 ±(99.9%) 1.646 ms/op
# Warmup Iteration   4: 351.291 ±(99.9%) 2.002 ms/op
# Warmup Iteration   5: 349.483 ±(99.9%) 2.128 ms/op
Iteration   1: 353.225 ±(99.9%) 5.139 ms/op
                 executeQuery·p0.00:   346.030 ms/op
                 executeQuery·p0.50:   348.127 ms/op
                 executeQuery·p0.90:   359.137 ms/op
                 executeQuery·p0.95:   369.885 ms/op
                 executeQuery·p0.99:   376.963 ms/op
                 executeQuery·p0.999:  376.963 ms/op
                 executeQuery·p0.9999: 376.963 ms/op
                 executeQuery·p1.00:   376.963 ms/op

Iteration   2: 355.250 ±(99.9%) 3.965 ms/op
                 executeQuery·p0.00:   345.506 ms/op
                 executeQuery·p0.50:   358.613 ms/op
                 executeQuery·p0.90:   359.662 ms/op
                 executeQuery·p0.95:   360.972 ms/op
                 executeQuery·p0.99:   361.234 ms/op
                 executeQuery·p0.999:  361.234 ms/op
                 executeQuery·p0.9999: 361.234 ms/op
                 executeQuery·p1.00:   361.234 ms/op

Iteration   3: 346.319 ±(99.9%) 0.797 ms/op
                 executeQuery·p0.00:   343.933 ms/op
                 executeQuery·p0.50:   346.030 ms/op
                 executeQuery·p0.90:   348.127 ms/op
                 executeQuery·p0.95:   349.176 ms/op
                 executeQuery·p0.99:   350.224 ms/op
                 executeQuery·p0.999:  350.224 ms/op
                 executeQuery·p0.9999: 350.224 ms/op
                 executeQuery·p1.00:   350.224 ms/op

Iteration   4: 347.332 ±(99.9%) 0.660 ms/op
                 executeQuery·p0.00:   345.506 ms/op
                 executeQuery·p0.50:   347.079 ms/op
                 executeQuery·p0.90:   348.127 ms/op
                 executeQuery·p0.95:   349.962 ms/op
                 executeQuery·p0.99:   350.224 ms/op
                 executeQuery·p0.999:  350.224 ms/op
                 executeQuery·p0.9999: 350.224 ms/op
                 executeQuery·p1.00:   350.224 ms/op

Iteration   5: 347.241 ±(99.9%) 2.215 ms/op
                 executeQuery·p0.00:   344.982 ms/op
                 executeQuery·p0.50:   346.554 ms/op
                 executeQuery·p0.90:   348.652 ms/op
                 executeQuery·p0.95:   356.516 ms/op
                 executeQuery·p0.99:   363.332 ms/op
                 executeQuery·p0.999:  363.332 ms/op
                 executeQuery·p0.9999: 363.332 ms/op
                 executeQuery·p1.00:   363.332 ms/op


# Run progress: 80.56% complete, ETA 01:53:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
401.248 ±(99.9%) 31.781 ms/op
# Warmup Iteration   2: 440.607 ±(99.9%) 5.539 ms/op
# Warmup Iteration   3: 357.321 ±(99.9%) 4.512 ms/op
# Warmup Iteration   4: 361.234 ±(99.9%) 12.123 ms/op
# Warmup Iteration   5: 359.849 ±(99.9%) 1.651 ms/op
Iteration   1: 351.309 ±(99.9%) 10.386 ms/op
                 executeQuery·p0.00:   344.982 ms/op
                 executeQuery·p0.50:   347.079 ms/op
                 executeQuery·p0.90:   358.613 ms/op
                 executeQuery·p0.95:   394.265 ms/op
                 executeQuery·p0.99:   427.295 ms/op
                 executeQuery·p0.999:  427.295 ms/op
                 executeQuery·p0.9999: 427.295 ms/op
                 executeQuery·p1.00:   427.295 ms/op

Iteration   2: 349.031 ±(99.9%) 1.747 ms/op
                 executeQuery·p0.00:   345.506 ms/op
                 executeQuery·p0.50:   348.127 ms/op
                 executeQuery·p0.90:   352.846 ms/op
                 executeQuery·p0.95:   353.370 ms/op
                 executeQuery·p0.99:   353.894 ms/op
                 executeQuery·p0.999:  353.894 ms/op
                 executeQuery·p0.9999: 353.894 ms/op
                 executeQuery·p1.00:   353.894 ms/op

Iteration   3: 349.320 ±(99.9%) 1.793 ms/op
                 executeQuery·p0.00:   345.506 ms/op
                 executeQuery·p0.50:   350.749 ms/op
                 executeQuery·p0.90:   352.322 ms/op
                 executeQuery·p0.95:   352.584 ms/op
                 executeQuery·p0.99:   352.846 ms/op
                 executeQuery·p0.999:  352.846 ms/op
                 executeQuery·p0.9999: 352.846 ms/op
                 executeQuery·p1.00:   352.846 ms/op

Iteration   4: 348.597 ±(99.9%) 1.779 ms/op
                 executeQuery·p0.00:   343.933 ms/op
                 executeQuery·p0.50:   349.700 ms/op
                 executeQuery·p0.90:   351.797 ms/op
                 executeQuery·p0.95:   352.059 ms/op
                 executeQuery·p0.99:   352.322 ms/op
                 executeQuery·p0.999:  352.322 ms/op
                 executeQuery·p0.9999: 352.322 ms/op
                 executeQuery·p1.00:   352.322 ms/op

Iteration   5: 346.482 ±(99.9%) 0.660 ms/op
                 executeQuery·p0.00:   345.506 ms/op
                 executeQuery·p0.50:   346.030 ms/op
                 executeQuery·p0.90:   347.603 ms/op
                 executeQuery·p0.95:   349.176 ms/op
                 executeQuery·p0.99:   349.700 ms/op
                 executeQuery·p0.999:  349.700 ms/op
                 executeQuery·p0.9999: 349.700 ms/op
                 executeQuery·p1.00:   349.700 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 290
  mean =    349.411 ±(99.9%) 1.274 ms/op

  Histogram, ms/op:
    [340.000, 345.000) = 10 
    [345.000, 350.000) = 192 
    [350.000, 355.000) = 49 
    [355.000, 360.000) = 32 
    [360.000, 365.000) = 5 
    [365.000, 370.000) = 0 
    [370.000, 375.000) = 0 
    [375.000, 380.000) = 1 
    [380.000, 385.000) = 0 
    [385.000, 390.000) = 0 
    [390.000, 395.000) = 0 
    [395.000, 400.000) = 0 
    [400.000, 405.000) = 0 
    [405.000, 410.000) = 0 
    [410.000, 415.000) = 0 
    [415.000, 420.000) = 0 
    [420.000, 425.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    343.933 ms/op
     p(50.0000) =    347.079 ms/op
     p(90.0000) =    358.613 ms/op
     p(95.0000) =    359.137 ms/op
     p(99.0000) =    364.558 ms/op
     p(99.9000) =    427.295 ms/op
     p(99.9900) =    427.295 ms/op
     p(99.9990) =    427.295 ms/op
     p(99.9999) =    427.295 ms/op
    p(100.0000) =    427.295 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 81.11% complete, ETA 01:49:54
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5054.136 ms/op
# Warmup Iteration   2: 4352.289 ±(99.9%) 1294.820 ms/op
# Warmup Iteration   3: 3502.244 ±(99.9%) 1195.276 ms/op
# Warmup Iteration   4: 3461.699 ±(99.9%) 245.976 ms/op
# Warmup Iteration   5: 3470.088 ±(99.9%) 176.715 ms/op
Iteration   1: 3461.699 ±(99.9%) 245.976 ms/op
                 executeQuery·p0.00:   3451.912 ms/op
                 executeQuery·p0.50:   3456.106 ms/op
                 executeQuery·p0.90:   3477.078 ms/op
                 executeQuery·p0.95:   3477.078 ms/op
                 executeQuery·p0.99:   3477.078 ms/op
                 executeQuery·p0.999:  3477.078 ms/op
                 executeQuery·p0.9999: 3477.078 ms/op
                 executeQuery·p1.00:   3477.078 ms/op

Iteration   2: 3457.505 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   3451.912 ms/op
                 executeQuery·p0.50:   3456.106 ms/op
                 executeQuery·p0.90:   3464.495 ms/op
                 executeQuery·p0.95:   3464.495 ms/op
                 executeQuery·p0.99:   3464.495 ms/op
                 executeQuery·p0.999:  3464.495 ms/op
                 executeQuery·p0.9999: 3464.495 ms/op
                 executeQuery·p1.00:   3464.495 ms/op

Iteration   3: 3456.106 ±(99.9%) 202.452 ms/op
                 executeQuery·p0.00:   3447.718 ms/op
                 executeQuery·p0.50:   3451.912 ms/op
                 executeQuery·p0.90:   3468.689 ms/op
                 executeQuery·p0.95:   3468.689 ms/op
                 executeQuery·p0.99:   3468.689 ms/op
                 executeQuery·p0.999:  3468.689 ms/op
                 executeQuery·p0.9999: 3468.689 ms/op
                 executeQuery·p1.00:   3468.689 ms/op

Iteration   4: 3471.486 ±(99.9%) 159.288 ms/op
                 executeQuery·p0.00:   3464.495 ms/op
                 executeQuery·p0.50:   3468.689 ms/op
                 executeQuery·p0.90:   3481.272 ms/op
                 executeQuery·p0.95:   3481.272 ms/op
                 executeQuery·p0.99:   3481.272 ms/op
                 executeQuery·p0.999:  3481.272 ms/op
                 executeQuery·p0.9999: 3481.272 ms/op
                 executeQuery·p1.00:   3481.272 ms/op

Iteration   5: 3457.505 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   3451.912 ms/op
                 executeQuery·p0.50:   3456.106 ms/op
                 executeQuery·p0.90:   3464.495 ms/op
                 executeQuery·p0.95:   3464.495 ms/op
                 executeQuery·p0.99:   3464.495 ms/op
                 executeQuery·p0.999:  3464.495 ms/op
                 executeQuery·p0.9999: 3464.495 ms/op
                 executeQuery·p1.00:   3464.495 ms/op


# Run progress: 81.67% complete, ETA 01:46:21
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3650.443 ±(99.9%) 2149.827 ms/op
# Warmup Iteration   2: 3756.698 ±(99.9%) 5586.114 ms/op
# Warmup Iteration   3: 3442.125 ±(99.9%) 245.976 ms/op
# Warmup Iteration   4: 3591.722 ±(99.9%) 4683.565 ms/op
# Warmup Iteration   5: 3864.352 ±(99.9%) 44.179 ms/op
Iteration   1: 3858.760 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   3854.565 ms/op
                 executeQuery·p0.50:   3858.760 ms/op
                 executeQuery·p0.90:   3862.954 ms/op
                 executeQuery·p0.95:   3862.954 ms/op
                 executeQuery·p0.99:   3862.954 ms/op
                 executeQuery·p0.999:  3862.954 ms/op
                 executeQuery·p0.9999: 3862.954 ms/op
                 executeQuery·p1.00:   3862.954 ms/op

Iteration   2: 3914.684 ±(99.9%) 623.217 ms/op
                 executeQuery·p0.00:   3875.537 ms/op
                 executeQuery·p0.50:   3930.063 ms/op
                 executeQuery·p0.90:   3938.451 ms/op
                 executeQuery·p0.95:   3938.451 ms/op
                 executeQuery·p0.99:   3938.451 ms/op
                 executeQuery·p0.999:  3938.451 ms/op
                 executeQuery·p0.9999: 3938.451 ms/op
                 executeQuery·p1.00:   3938.451 ms/op

Iteration   3: 3890.916 ±(99.9%) 637.154 ms/op
                 executeQuery·p0.00:   3862.954 ms/op
                 executeQuery·p0.50:   3879.731 ms/op
                 executeQuery·p0.90:   3930.063 ms/op
                 executeQuery·p0.95:   3930.063 ms/op
                 executeQuery·p0.99:   3930.063 ms/op
                 executeQuery·p0.999:  3930.063 ms/op
                 executeQuery·p0.9999: 3930.063 ms/op
                 executeQuery·p1.00:   3930.063 ms/op

Iteration   4: 3869.944 ±(99.9%) 289.699 ms/op
                 executeQuery·p0.00:   3858.760 ms/op
                 executeQuery·p0.50:   3862.954 ms/op
                 executeQuery·p0.90:   3888.120 ms/op
                 executeQuery·p0.95:   3888.120 ms/op
                 executeQuery·p0.99:   3888.120 ms/op
                 executeQuery·p0.999:  3888.120 ms/op
                 executeQuery·p0.9999: 3888.120 ms/op
                 executeQuery·p1.00:   3888.120 ms/op

Iteration   5: 3860.158 ±(99.9%) 220.893 ms/op
                 executeQuery·p0.00:   3846.177 ms/op
                 executeQuery·p0.50:   3867.148 ms/op
                 executeQuery·p0.90:   3867.148 ms/op
                 executeQuery·p0.95:   3867.148 ms/op
                 executeQuery·p0.99:   3867.148 ms/op
                 executeQuery·p0.999:  3867.148 ms/op
                 executeQuery·p0.9999: 3867.148 ms/op
                 executeQuery·p1.00:   3867.148 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   3669.876 ±(99.9%) 142.779 ms/op

  Histogram, ms/op:
    [3400.000, 3450.000) = 1 
    [3450.000, 3500.000) = 14 
    [3500.000, 3550.000) = 0 
    [3550.000, 3600.000) = 0 
    [3600.000, 3650.000) = 0 
    [3650.000, 3700.000) = 0 
    [3700.000, 3750.000) = 0 
    [3750.000, 3800.000) = 0 
    [3800.000, 3850.000) = 1 
    [3850.000, 3900.000) = 11 
    [3900.000, 3950.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   3447.718 ms/op
     p(50.0000) =   3663.725 ms/op
     p(90.0000) =   3925.869 ms/op
     p(95.0000) =   3933.838 ms/op
     p(99.0000) =   3938.451 ms/op
     p(99.9000) =   3938.451 ms/op
     p(99.9900) =   3938.451 ms/op
     p(99.9990) =   3938.451 ms/op
     p(99.9999) =   3938.451 ms/op
    p(100.0000) =   3938.451 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 82.22% complete, ETA 01:42:50
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
58518.929 ms/op
# Warmup Iteration   2: 58451.821 ms/op
# Warmup Iteration   3: 58720.256 ms/op
# Warmup Iteration   4: 58518.929 ms/op
# Warmup Iteration   5: 58720.256 ms/op
Iteration   1: 58518.929 ms/op
                 executeQuery·p0.00:   58518.929 ms/op
                 executeQuery·p0.50:   58518.929 ms/op
                 executeQuery·p0.90:   58518.929 ms/op
                 executeQuery·p0.95:   58518.929 ms/op
                 executeQuery·p0.99:   58518.929 ms/op
                 executeQuery·p0.999:  58518.929 ms/op
                 executeQuery·p0.9999: 58518.929 ms/op
                 executeQuery·p1.00:   58518.929 ms/op

Iteration   2: 58854.474 ms/op
                 executeQuery·p0.00:   58854.474 ms/op
                 executeQuery·p0.50:   58854.474 ms/op
                 executeQuery·p0.90:   58854.474 ms/op
                 executeQuery·p0.95:   58854.474 ms/op
                 executeQuery·p0.99:   58854.474 ms/op
                 executeQuery·p0.999:  58854.474 ms/op
                 executeQuery·p0.9999: 58854.474 ms/op
                 executeQuery·p1.00:   58854.474 ms/op

Iteration   3: 58921.583 ms/op
                 executeQuery·p0.00:   58921.583 ms/op
                 executeQuery·p0.50:   58921.583 ms/op
                 executeQuery·p0.90:   58921.583 ms/op
                 executeQuery·p0.95:   58921.583 ms/op
                 executeQuery·p0.99:   58921.583 ms/op
                 executeQuery·p0.999:  58921.583 ms/op
                 executeQuery·p0.9999: 58921.583 ms/op
                 executeQuery·p1.00:   58921.583 ms/op

Iteration   4: 58586.038 ms/op
                 executeQuery·p0.00:   58586.038 ms/op
                 executeQuery·p0.50:   58586.038 ms/op
                 executeQuery·p0.90:   58586.038 ms/op
                 executeQuery·p0.95:   58586.038 ms/op
                 executeQuery·p0.99:   58586.038 ms/op
                 executeQuery·p0.999:  58586.038 ms/op
                 executeQuery·p0.9999: 58586.038 ms/op
                 executeQuery·p1.00:   58586.038 ms/op

Iteration   5: 58586.038 ms/op
                 executeQuery·p0.00:   58586.038 ms/op
                 executeQuery·p0.50:   58586.038 ms/op
                 executeQuery·p0.90:   58586.038 ms/op
                 executeQuery·p0.95:   58586.038 ms/op
                 executeQuery·p0.99:   58586.038 ms/op
                 executeQuery·p0.999:  58586.038 ms/op
                 executeQuery·p0.9999: 58586.038 ms/op
                 executeQuery·p1.00:   58586.038 ms/op


# Run progress: 82.78% complete, ETA 01:41:00
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
58720.256 ms/op
# Warmup Iteration   2: 58518.929 ms/op
# Warmup Iteration   3: 58518.929 ms/op
# Warmup Iteration   4: 58586.038 ms/op
# Warmup Iteration   5: 59122.909 ms/op
Iteration   1: 58787.365 ms/op
                 executeQuery·p0.00:   58787.365 ms/op
                 executeQuery·p0.50:   58787.365 ms/op
                 executeQuery·p0.90:   58787.365 ms/op
                 executeQuery·p0.95:   58787.365 ms/op
                 executeQuery·p0.99:   58787.365 ms/op
                 executeQuery·p0.999:  58787.365 ms/op
                 executeQuery·p0.9999: 58787.365 ms/op
                 executeQuery·p1.00:   58787.365 ms/op

Iteration   2: 58586.038 ms/op
                 executeQuery·p0.00:   58586.038 ms/op
                 executeQuery·p0.50:   58586.038 ms/op
                 executeQuery·p0.90:   58586.038 ms/op
                 executeQuery·p0.95:   58586.038 ms/op
                 executeQuery·p0.99:   58586.038 ms/op
                 executeQuery·p0.999:  58586.038 ms/op
                 executeQuery·p0.9999: 58586.038 ms/op
                 executeQuery·p1.00:   58586.038 ms/op

Iteration   3: 58586.038 ms/op
                 executeQuery·p0.00:   58586.038 ms/op
                 executeQuery·p0.50:   58586.038 ms/op
                 executeQuery·p0.90:   58586.038 ms/op
                 executeQuery·p0.95:   58586.038 ms/op
                 executeQuery·p0.99:   58586.038 ms/op
                 executeQuery·p0.999:  58586.038 ms/op
                 executeQuery·p0.9999: 58586.038 ms/op
                 executeQuery·p1.00:   58586.038 ms/op

Iteration   4: 59055.800 ms/op
                 executeQuery·p0.00:   59055.800 ms/op
                 executeQuery·p0.50:   59055.800 ms/op
                 executeQuery·p0.90:   59055.800 ms/op
                 executeQuery·p0.95:   59055.800 ms/op
                 executeQuery·p0.99:   59055.800 ms/op
                 executeQuery·p0.999:  59055.800 ms/op
                 executeQuery·p0.9999: 59055.800 ms/op
                 executeQuery·p1.00:   59055.800 ms/op

Iteration   5: 58787.365 ms/op
                 executeQuery·p0.00:   58787.365 ms/op
                 executeQuery·p0.50:   58787.365 ms/op
                 executeQuery·p0.90:   58787.365 ms/op
                 executeQuery·p0.95:   58787.365 ms/op
                 executeQuery·p0.99:   58787.365 ms/op
                 executeQuery·p0.999:  58787.365 ms/op
                 executeQuery·p0.9999: 58787.365 ms/op
                 executeQuery·p1.00:   58787.365 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  58726.967 ±(99.9%) 272.453 ms/op

  Histogram, ms/op:
    [58500.000, 58550.000) = 1 
    [58550.000, 58600.000) = 4 
    [58600.000, 58650.000) = 0 
    [58650.000, 58700.000) = 0 
    [58700.000, 58750.000) = 0 
    [58750.000, 58800.000) = 2 
    [58800.000, 58850.000) = 0 
    [58850.000, 58900.000) = 1 
    [58900.000, 58950.000) = 1 
    [58950.000, 59000.000) = 0 
    [59000.000, 59050.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  58518.929 ms/op
     p(50.0000) =  58686.702 ms/op
     p(90.0000) =  59042.379 ms/op
     p(95.0000) =  59055.800 ms/op
     p(99.0000) =  59055.800 ms/op
     p(99.9000) =  59055.800 ms/op
     p(99.9900) =  59055.800 ms/op
     p(99.9990) =  59055.800 ms/op
     p(99.9999) =  59055.800 ms/op
    p(100.0000) =  59055.800 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 83.33% complete, ETA 01:39:03
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
345.632 ±(99.9%) 16.845 ms/op
# Warmup Iteration   2: 346.410 ±(99.9%) 20.132 ms/op
# Warmup Iteration   3: 315.982 ±(99.9%) 1.241 ms/op
# Warmup Iteration   4: 315.687 ±(99.9%) 1.556 ms/op
# Warmup Iteration   5: 321.192 ±(99.9%) 1.654 ms/op
Iteration   1: 316.899 ±(99.9%) 1.390 ms/op
                 executeQuery·p0.00:   314.049 ms/op
                 executeQuery·p0.50:   316.408 ms/op
                 executeQuery·p0.90:   319.658 ms/op
                 executeQuery·p0.95:   321.782 ms/op
                 executeQuery·p0.99:   323.486 ms/op
                 executeQuery·p0.999:  323.486 ms/op
                 executeQuery·p0.9999: 323.486 ms/op
                 executeQuery·p1.00:   323.486 ms/op

Iteration   2: 317.080 ±(99.9%) 0.955 ms/op
                 executeQuery·p0.00:   315.097 ms/op
                 executeQuery·p0.50:   316.670 ms/op
                 executeQuery·p0.90:   319.291 ms/op
                 executeQuery·p0.95:   319.816 ms/op
                 executeQuery·p0.99:   319.816 ms/op
                 executeQuery·p0.999:  319.816 ms/op
                 executeQuery·p0.9999: 319.816 ms/op
                 executeQuery·p1.00:   319.816 ms/op

Iteration   3: 317.506 ±(99.9%) 1.022 ms/op
                 executeQuery·p0.00:   315.097 ms/op
                 executeQuery·p0.50:   317.194 ms/op
                 executeQuery·p0.90:   319.134 ms/op
                 executeQuery·p0.95:   321.441 ms/op
                 executeQuery·p0.99:   323.486 ms/op
                 executeQuery·p0.999:  323.486 ms/op
                 executeQuery·p0.9999: 323.486 ms/op
                 executeQuery·p1.00:   323.486 ms/op

Iteration   4: 317.981 ±(99.9%) 1.696 ms/op
                 executeQuery·p0.00:   315.097 ms/op
                 executeQuery·p0.50:   317.194 ms/op
                 executeQuery·p0.90:   320.550 ms/op
                 executeQuery·p0.95:   324.849 ms/op
                 executeQuery·p0.99:   330.301 ms/op
                 executeQuery·p0.999:  330.301 ms/op
                 executeQuery·p0.9999: 330.301 ms/op
                 executeQuery·p1.00:   330.301 ms/op

Iteration   5: 315.982 ±(99.9%) 1.655 ms/op
                 executeQuery·p0.00:   313.524 ms/op
                 executeQuery·p0.50:   315.097 ms/op
                 executeQuery·p0.90:   320.392 ms/op
                 executeQuery·p0.95:   323.328 ms/op
                 executeQuery·p0.99:   324.010 ms/op
                 executeQuery·p0.999:  324.010 ms/op
                 executeQuery·p0.9999: 324.010 ms/op
                 executeQuery·p1.00:   324.010 ms/op


# Run progress: 83.89% complete, ETA 01:35:26
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
341.014 ±(99.9%) 13.001 ms/op
# Warmup Iteration   2: 350.713 ±(99.9%) 18.748 ms/op
# Warmup Iteration   3: 330.454 ±(99.9%) 1.642 ms/op
# Warmup Iteration   4: 329.118 ±(99.9%) 2.878 ms/op
# Warmup Iteration   5: 325.329 ±(99.9%) 3.168 ms/op
Iteration   1: 319.275 ±(99.9%) 1.887 ms/op
                 executeQuery·p0.00:   315.621 ms/op
                 executeQuery·p0.50:   318.767 ms/op
                 executeQuery·p0.90:   321.598 ms/op
                 executeQuery·p0.95:   326.264 ms/op
                 executeQuery·p0.99:   332.399 ms/op
                 executeQuery·p0.999:  332.399 ms/op
                 executeQuery·p0.9999: 332.399 ms/op
                 executeQuery·p1.00:   332.399 ms/op

Iteration   2: 320.668 ±(99.9%) 0.769 ms/op
                 executeQuery·p0.00:   317.719 ms/op
                 executeQuery·p0.50:   320.864 ms/op
                 executeQuery·p0.90:   321.389 ms/op
                 executeQuery·p0.95:   323.171 ms/op
                 executeQuery·p0.99:   324.534 ms/op
                 executeQuery·p0.999:  324.534 ms/op
                 executeQuery·p0.9999: 324.534 ms/op
                 executeQuery·p1.00:   324.534 ms/op

Iteration   3: 319.586 ±(99.9%) 0.807 ms/op
                 executeQuery·p0.00:   317.719 ms/op
                 executeQuery·p0.50:   319.291 ms/op
                 executeQuery·p0.90:   321.284 ms/op
                 executeQuery·p0.95:   323.328 ms/op
                 executeQuery·p0.99:   324.010 ms/op
                 executeQuery·p0.999:  324.010 ms/op
                 executeQuery·p0.9999: 324.010 ms/op
                 executeQuery·p1.00:   324.010 ms/op

Iteration   4: 320.635 ±(99.9%) 1.416 ms/op
                 executeQuery·p0.00:   317.719 ms/op
                 executeQuery·p0.50:   319.816 ms/op
                 executeQuery·p0.90:   323.538 ms/op
                 executeQuery·p0.95:   326.028 ms/op
                 executeQuery·p0.99:   329.777 ms/op
                 executeQuery·p0.999:  329.777 ms/op
                 executeQuery·p0.9999: 329.777 ms/op
                 executeQuery·p1.00:   329.777 ms/op

Iteration   5: 321.143 ±(99.9%) 0.816 ms/op
                 executeQuery·p0.00:   318.767 ms/op
                 executeQuery·p0.50:   321.126 ms/op
                 executeQuery·p0.90:   322.647 ms/op
                 executeQuery·p0.95:   324.062 ms/op
                 executeQuery·p0.99:   326.107 ms/op
                 executeQuery·p0.999:  326.107 ms/op
                 executeQuery·p0.9999: 326.107 ms/op
                 executeQuery·p1.00:   326.107 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 320
  mean =    318.675 ±(99.9%) 0.491 ms/op

  Histogram, ms/op:
    [310.000, 312.500) = 0 
    [312.500, 315.000) = 19 
    [315.000, 317.500) = 94 
    [317.500, 320.000) = 115 
    [320.000, 322.500) = 76 
    [322.500, 325.000) = 12 
    [325.000, 327.500) = 1 
    [327.500, 330.000) = 1 
    [330.000, 332.500) = 2 
    [332.500, 335.000) = 0 
    [335.000, 337.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    313.524 ms/op
     p(50.0000) =    318.767 ms/op
     p(90.0000) =    321.389 ms/op
     p(95.0000) =    322.935 ms/op
     p(99.0000) =    329.006 ms/op
     p(99.9000) =    332.399 ms/op
     p(99.9900) =    332.399 ms/op
     p(99.9990) =    332.399 ms/op
     p(99.9999) =    332.399 ms/op
    p(100.0000) =    332.399 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 84.44% complete, ETA 01:31:52
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4383.048 ±(99.9%) 28256.713 ms/op
# Warmup Iteration   2: 3752.504 ±(99.9%) 9543.311 ms/op
# Warmup Iteration   3: 3131.048 ±(99.9%) 34.991 ms/op
# Warmup Iteration   4: 3144.679 ±(99.9%) 119.941 ms/op
# Warmup Iteration   5: 3131.048 ±(99.9%) 46.945 ms/op
Iteration   1: 3122.659 ±(99.9%) 64.519 ms/op
                 executeQuery·p0.00:   3116.368 ms/op
                 executeQuery·p0.50:   3118.465 ms/op
                 executeQuery·p0.90:   3137.339 ms/op
                 executeQuery·p0.95:   3137.339 ms/op
                 executeQuery·p0.99:   3137.339 ms/op
                 executeQuery·p0.999:  3137.339 ms/op
                 executeQuery·p0.9999: 3137.339 ms/op
                 executeQuery·p1.00:   3137.339 ms/op

Iteration   2: 3123.708 ±(99.9%) 13.552 ms/op
                 executeQuery·p0.00:   3120.562 ms/op
                 executeQuery·p0.50:   3124.756 ms/op
                 executeQuery·p0.90:   3124.756 ms/op
                 executeQuery·p0.95:   3124.756 ms/op
                 executeQuery·p0.99:   3124.756 ms/op
                 executeQuery·p0.999:  3124.756 ms/op
                 executeQuery·p0.9999: 3124.756 ms/op
                 executeQuery·p1.00:   3124.756 ms/op

Iteration   3: 3136.291 ±(99.9%) 40.655 ms/op
                 executeQuery·p0.00:   3133.145 ms/op
                 executeQuery·p0.50:   3133.145 ms/op
                 executeQuery·p0.90:   3145.728 ms/op
                 executeQuery·p0.95:   3145.728 ms/op
                 executeQuery·p0.99:   3145.728 ms/op
                 executeQuery·p0.999:  3145.728 ms/op
                 executeQuery·p0.9999: 3145.728 ms/op
                 executeQuery·p1.00:   3145.728 ms/op

Iteration   4: 3124.756 ±(99.9%) 49.484 ms/op
                 executeQuery·p0.00:   3116.368 ms/op
                 executeQuery·p0.50:   3124.756 ms/op
                 executeQuery·p0.90:   3133.145 ms/op
                 executeQuery·p0.95:   3133.145 ms/op
                 executeQuery·p0.99:   3133.145 ms/op
                 executeQuery·p0.999:  3133.145 ms/op
                 executeQuery·p0.9999: 3133.145 ms/op
                 executeQuery·p1.00:   3133.145 ms/op

Iteration   5: 3124.756 ±(99.9%) 38.330 ms/op
                 executeQuery·p0.00:   3120.562 ms/op
                 executeQuery·p0.50:   3122.659 ms/op
                 executeQuery·p0.90:   3133.145 ms/op
                 executeQuery·p0.95:   3133.145 ms/op
                 executeQuery·p0.99:   3133.145 ms/op
                 executeQuery·p0.999:  3133.145 ms/op
                 executeQuery·p0.9999: 3133.145 ms/op
                 executeQuery·p1.00:   3133.145 ms/op


# Run progress: 85.00% complete, ETA 01:28:22
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3375.017 ±(99.9%) 6362.804 ms/op
# Warmup Iteration   2: 3739.921 ±(99.9%) 9693.974 ms/op
# Warmup Iteration   3: 3135.242 ±(99.9%) 15.648 ms/op
# Warmup Iteration   4: 3134.194 ±(99.9%) 25.950 ms/op
# Warmup Iteration   5: 3184.525 ±(99.9%) 225.003 ms/op
Iteration   1: 3150.971 ±(99.9%) 266.824 ms/op
                 executeQuery·p0.00:   3128.951 ms/op
                 executeQuery·p0.50:   3131.048 ms/op
                 executeQuery·p0.90:   3212.837 ms/op
                 executeQuery·p0.95:   3212.837 ms/op
                 executeQuery·p0.99:   3212.837 ms/op
                 executeQuery·p0.999:  3212.837 ms/op
                 executeQuery·p0.9999: 3212.837 ms/op
                 executeQuery·p1.00:   3212.837 ms/op

Iteration   2: 3123.708 ±(99.9%) 46.288 ms/op
                 executeQuery·p0.00:   3116.368 ms/op
                 executeQuery·p0.50:   3122.659 ms/op
                 executeQuery·p0.90:   3133.145 ms/op
                 executeQuery·p0.95:   3133.145 ms/op
                 executeQuery·p0.99:   3133.145 ms/op
                 executeQuery·p0.999:  3133.145 ms/op
                 executeQuery·p0.9999: 3133.145 ms/op
                 executeQuery·p1.00:   3133.145 ms/op

Iteration   3: 3117.416 ±(99.9%) 25.950 ms/op
                 executeQuery·p0.00:   3112.174 ms/op
                 executeQuery·p0.50:   3118.465 ms/op
                 executeQuery·p0.90:   3120.562 ms/op
                 executeQuery·p0.95:   3120.562 ms/op
                 executeQuery·p0.99:   3120.562 ms/op
                 executeQuery·p0.999:  3120.562 ms/op
                 executeQuery·p0.9999: 3120.562 ms/op
                 executeQuery·p1.00:   3120.562 ms/op

Iteration   4: 3129.999 ±(99.9%) 129.748 ms/op
                 executeQuery·p0.00:   3112.174 ms/op
                 executeQuery·p0.50:   3124.756 ms/op
                 executeQuery·p0.90:   3158.311 ms/op
                 executeQuery·p0.95:   3158.311 ms/op
                 executeQuery·p0.99:   3158.311 ms/op
                 executeQuery·p0.999:  3158.311 ms/op
                 executeQuery·p0.9999: 3158.311 ms/op
                 executeQuery·p1.00:   3158.311 ms/op

Iteration   5: 3131.048 ±(99.9%) 34.991 ms/op
                 executeQuery·p0.00:   3124.756 ms/op
                 executeQuery·p0.50:   3131.048 ms/op
                 executeQuery·p0.90:   3137.339 ms/op
                 executeQuery·p0.95:   3137.339 ms/op
                 executeQuery·p0.99:   3137.339 ms/op
                 executeQuery·p0.999:  3137.339 ms/op
                 executeQuery·p0.9999: 3137.339 ms/op
                 executeQuery·p1.00:   3137.339 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 40
  mean =   3128.531 ±(99.9%) 9.252 ms/op

  Histogram, ms/op:
    [3100.000, 3112.500) = 2 
    [3112.500, 3125.000) = 20 
    [3125.000, 3137.500) = 15 
    [3137.500, 3150.000) = 1 
    [3150.000, 3162.500) = 1 
    [3162.500, 3175.000) = 0 
    [3175.000, 3187.500) = 0 
    [3187.500, 3200.000) = 0 
    [3200.000, 3212.500) = 0 
    [3212.500, 3225.000) = 1 
    [3225.000, 3237.500) = 0 
    [3237.500, 3250.000) = 0 
    [3250.000, 3262.500) = 0 
    [3262.500, 3275.000) = 0 
    [3275.000, 3287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3112.174 ms/op
     p(50.0000) =   3124.756 ms/op
     p(90.0000) =   3137.339 ms/op
     p(95.0000) =   3157.682 ms/op
     p(99.0000) =   3212.837 ms/op
     p(99.9000) =   3212.837 ms/op
     p(99.9900) =   3212.837 ms/op
     p(99.9990) =   3212.837 ms/op
     p(99.9999) =   3212.837 ms/op
    p(100.0000) =   3212.837 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 85.56% complete, ETA 01:24:53
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
59055.800 ms/op
# Warmup Iteration   2: 58653.147 ms/op
# Warmup Iteration   3: 58518.929 ms/op
# Warmup Iteration   4: 58720.256 ms/op
# Warmup Iteration   5: 59055.800 ms/op
Iteration   1: 58720.256 ms/op
                 executeQuery·p0.00:   58720.256 ms/op
                 executeQuery·p0.50:   58720.256 ms/op
                 executeQuery·p0.90:   58720.256 ms/op
                 executeQuery·p0.95:   58720.256 ms/op
                 executeQuery·p0.99:   58720.256 ms/op
                 executeQuery·p0.999:  58720.256 ms/op
                 executeQuery·p0.9999: 58720.256 ms/op
                 executeQuery·p1.00:   58720.256 ms/op

Iteration   2: 58518.929 ms/op
                 executeQuery·p0.00:   58518.929 ms/op
                 executeQuery·p0.50:   58518.929 ms/op
                 executeQuery·p0.90:   58518.929 ms/op
                 executeQuery·p0.95:   58518.929 ms/op
                 executeQuery·p0.99:   58518.929 ms/op
                 executeQuery·p0.999:  58518.929 ms/op
                 executeQuery·p0.9999: 58518.929 ms/op
                 executeQuery·p1.00:   58518.929 ms/op

Iteration   3: 58384.712 ms/op
                 executeQuery·p0.00:   58384.712 ms/op
                 executeQuery·p0.50:   58384.712 ms/op
                 executeQuery·p0.90:   58384.712 ms/op
                 executeQuery·p0.95:   58384.712 ms/op
                 executeQuery·p0.99:   58384.712 ms/op
                 executeQuery·p0.999:  58384.712 ms/op
                 executeQuery·p0.9999: 58384.712 ms/op
                 executeQuery·p1.00:   58384.712 ms/op

Iteration   4: 58854.474 ms/op
                 executeQuery·p0.00:   58854.474 ms/op
                 executeQuery·p0.50:   58854.474 ms/op
                 executeQuery·p0.90:   58854.474 ms/op
                 executeQuery·p0.95:   58854.474 ms/op
                 executeQuery·p0.99:   58854.474 ms/op
                 executeQuery·p0.999:  58854.474 ms/op
                 executeQuery·p0.9999: 58854.474 ms/op
                 executeQuery·p1.00:   58854.474 ms/op

Iteration   5: 58384.712 ms/op
                 executeQuery·p0.00:   58384.712 ms/op
                 executeQuery·p0.50:   58384.712 ms/op
                 executeQuery·p0.90:   58384.712 ms/op
                 executeQuery·p0.95:   58384.712 ms/op
                 executeQuery·p0.99:   58384.712 ms/op
                 executeQuery·p0.999:  58384.712 ms/op
                 executeQuery·p0.9999: 58384.712 ms/op
                 executeQuery·p1.00:   58384.712 ms/op


# Run progress: 86.11% complete, ETA 01:22:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
58921.583 ms/op
# Warmup Iteration   2: 58988.691 ms/op
# Warmup Iteration   3: 58384.712 ms/op
# Warmup Iteration   4: 58720.256 ms/op
# Warmup Iteration   5: 58653.147 ms/op
Iteration   1: 58720.256 ms/op
                 executeQuery·p0.00:   58720.256 ms/op
                 executeQuery·p0.50:   58720.256 ms/op
                 executeQuery·p0.90:   58720.256 ms/op
                 executeQuery·p0.95:   58720.256 ms/op
                 executeQuery·p0.99:   58720.256 ms/op
                 executeQuery·p0.999:  58720.256 ms/op
                 executeQuery·p0.9999: 58720.256 ms/op
                 executeQuery·p1.00:   58720.256 ms/op

Iteration   2: 58518.929 ms/op
                 executeQuery·p0.00:   58518.929 ms/op
                 executeQuery·p0.50:   58518.929 ms/op
                 executeQuery·p0.90:   58518.929 ms/op
                 executeQuery·p0.95:   58518.929 ms/op
                 executeQuery·p0.99:   58518.929 ms/op
                 executeQuery·p0.999:  58518.929 ms/op
                 executeQuery·p0.9999: 58518.929 ms/op
                 executeQuery·p1.00:   58518.929 ms/op

Iteration   3: 58854.474 ms/op
                 executeQuery·p0.00:   58854.474 ms/op
                 executeQuery·p0.50:   58854.474 ms/op
                 executeQuery·p0.90:   58854.474 ms/op
                 executeQuery·p0.95:   58854.474 ms/op
                 executeQuery·p0.99:   58854.474 ms/op
                 executeQuery·p0.999:  58854.474 ms/op
                 executeQuery·p0.9999: 58854.474 ms/op
                 executeQuery·p1.00:   58854.474 ms/op

Iteration   4: 58720.256 ms/op
                 executeQuery·p0.00:   58720.256 ms/op
                 executeQuery·p0.50:   58720.256 ms/op
                 executeQuery·p0.90:   58720.256 ms/op
                 executeQuery·p0.95:   58720.256 ms/op
                 executeQuery·p0.99:   58720.256 ms/op
                 executeQuery·p0.999:  58720.256 ms/op
                 executeQuery·p0.9999: 58720.256 ms/op
                 executeQuery·p1.00:   58720.256 ms/op

Iteration   5: 58787.365 ms/op
                 executeQuery·p0.00:   58787.365 ms/op
                 executeQuery·p0.50:   58787.365 ms/op
                 executeQuery·p0.90:   58787.365 ms/op
                 executeQuery·p0.95:   58787.365 ms/op
                 executeQuery·p0.99:   58787.365 ms/op
                 executeQuery·p0.999:  58787.365 ms/op
                 executeQuery·p0.9999: 58787.365 ms/op
                 executeQuery·p1.00:   58787.365 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 10
  mean =  58646.436 ±(99.9%) 272.453 ms/op

  Histogram, ms/op:
    [58300.000, 58350.000) = 0 
    [58350.000, 58400.000) = 2 
    [58400.000, 58450.000) = 0 
    [58450.000, 58500.000) = 0 
    [58500.000, 58550.000) = 2 
    [58550.000, 58600.000) = 0 
    [58600.000, 58650.000) = 0 
    [58650.000, 58700.000) = 0 
    [58700.000, 58750.000) = 3 
    [58750.000, 58800.000) = 1 
    [58800.000, 58850.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  58384.712 ms/op
     p(50.0000) =  58720.256 ms/op
     p(90.0000) =  58854.474 ms/op
     p(95.0000) =  58854.474 ms/op
     p(99.0000) =  58854.474 ms/op
     p(99.9000) =  58854.474 ms/op
     p(99.9900) =  58854.474 ms/op
     p(99.9990) =  58854.474 ms/op
     p(99.9999) =  58854.474 ms/op
    p(100.0000) =  58854.474 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 86.67% complete, ETA 01:20:22
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
198.419 ±(99.9%) 28.415 ms/op
# Warmup Iteration   2: 179.070 ±(99.9%) 2.073 ms/op
# Warmup Iteration   3: 177.574 ±(99.9%) 0.898 ms/op
# Warmup Iteration   4: 179.291 ±(99.9%) 2.141 ms/op
# Warmup Iteration   5: 179.414 ±(99.9%) 1.369 ms/op
Iteration   1: 180.581 ±(99.9%) 3.264 ms/op
                 executeQuery·p0.00:   173.015 ms/op
                 executeQuery·p0.50:   179.569 ms/op
                 executeQuery·p0.90:   185.965 ms/op
                 executeQuery·p0.95:   190.526 ms/op
                 executeQuery·p0.99:   220.201 ms/op
                 executeQuery·p0.999:  220.201 ms/op
                 executeQuery·p0.9999: 220.201 ms/op
                 executeQuery·p1.00:   220.201 ms/op

Iteration   2: 181.052 ±(99.9%) 3.363 ms/op
                 executeQuery·p0.00:   174.326 ms/op
                 executeQuery·p0.50:   180.355 ms/op
                 executeQuery·p0.90:   182.662 ms/op
                 executeQuery·p0.95:   193.515 ms/op
                 executeQuery·p0.99:   218.366 ms/op
                 executeQuery·p0.999:  218.366 ms/op
                 executeQuery·p0.9999: 218.366 ms/op
                 executeQuery·p1.00:   218.366 ms/op

Iteration   3: 181.005 ±(99.9%) 3.613 ms/op
                 executeQuery·p0.00:   174.588 ms/op
                 executeQuery·p0.50:   179.438 ms/op
                 executeQuery·p0.90:   182.347 ms/op
                 executeQuery·p0.95:   205.337 ms/op
                 executeQuery·p0.99:   213.123 ms/op
                 executeQuery·p0.999:  213.123 ms/op
                 executeQuery·p0.9999: 213.123 ms/op
                 executeQuery·p1.00:   213.123 ms/op

Iteration   4: 180.968 ±(99.9%) 4.456 ms/op
                 executeQuery·p0.00:   173.801 ms/op
                 executeQuery·p0.50:   179.569 ms/op
                 executeQuery·p0.90:   181.876 ms/op
                 executeQuery·p0.95:   201.445 ms/op
                 executeQuery·p0.99:   227.279 ms/op
                 executeQuery·p0.999:  227.279 ms/op
                 executeQuery·p0.9999: 227.279 ms/op
                 executeQuery·p1.00:   227.279 ms/op

Iteration   5: 180.370 ±(99.9%) 2.258 ms/op
                 executeQuery·p0.00:   175.636 ms/op
                 executeQuery·p0.50:   179.831 ms/op
                 executeQuery·p0.90:   180.827 ms/op
                 executeQuery·p0.95:   192.361 ms/op
                 executeQuery·p0.99:   204.472 ms/op
                 executeQuery·p0.999:  204.472 ms/op
                 executeQuery·p0.9999: 204.472 ms/op
                 executeQuery·p1.00:   204.472 ms/op


# Run progress: 87.22% complete, ETA 01:16:47
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
184.658 ±(99.9%) 18.334 ms/op
# Warmup Iteration   2: 171.467 ±(99.9%) 1.723 ms/op
# Warmup Iteration   3: 171.724 ±(99.9%) 1.843 ms/op
# Warmup Iteration   4: 173.832 ±(99.9%) 2.131 ms/op
# Warmup Iteration   5: 170.878 ±(99.9%) 2.239 ms/op
Iteration   1: 172.229 ±(99.9%) 2.024 ms/op
                 executeQuery·p0.00:   166.461 ms/op
                 executeQuery·p0.50:   171.311 ms/op
                 executeQuery·p0.90:   177.131 ms/op
                 executeQuery·p0.95:   181.325 ms/op
                 executeQuery·p0.99:   187.957 ms/op
                 executeQuery·p0.999:  187.957 ms/op
                 executeQuery·p0.9999: 187.957 ms/op
                 executeQuery·p1.00:   187.957 ms/op

Iteration   2: 173.842 ±(99.9%) 2.135 ms/op
                 executeQuery·p0.00:   168.559 ms/op
                 executeQuery·p0.50:   172.884 ms/op
                 executeQuery·p0.90:   181.430 ms/op
                 executeQuery·p0.95:   184.903 ms/op
                 executeQuery·p0.99:   185.860 ms/op
                 executeQuery·p0.999:  185.860 ms/op
                 executeQuery·p0.9999: 185.860 ms/op
                 executeQuery·p1.00:   185.860 ms/op

Iteration   3: 172.597 ±(99.9%) 2.126 ms/op
                 executeQuery·p0.00:   166.724 ms/op
                 executeQuery·p0.50:   171.049 ms/op
                 executeQuery·p0.90:   181.351 ms/op
                 executeQuery·p0.95:   183.160 ms/op
                 executeQuery·p0.99:   184.287 ms/op
                 executeQuery·p0.999:  184.287 ms/op
                 executeQuery·p0.9999: 184.287 ms/op
                 executeQuery·p1.00:   184.287 ms/op

Iteration   4: 171.679 ±(99.9%) 1.267 ms/op
                 executeQuery·p0.00:   169.607 ms/op
                 executeQuery·p0.50:   170.918 ms/op
                 executeQuery·p0.90:   174.431 ms/op
                 executeQuery·p0.95:   180.132 ms/op
                 executeQuery·p0.99:   181.928 ms/op
                 executeQuery·p0.999:  181.928 ms/op
                 executeQuery·p0.9999: 181.928 ms/op
                 executeQuery·p1.00:   181.928 ms/op

Iteration   5: 172.163 ±(99.9%) 1.759 ms/op
                 executeQuery·p0.00:   167.510 ms/op
                 executeQuery·p0.50:   170.656 ms/op
                 executeQuery·p0.90:   179.149 ms/op
                 executeQuery·p0.95:   180.630 ms/op
                 executeQuery·p0.99:   182.452 ms/op
                 executeQuery·p0.999:  182.452 ms/op
                 executeQuery·p0.9999: 182.452 ms/op
                 executeQuery·p1.00:   182.452 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 512
  mean =    176.583 ±(99.9%) 1.022 ms/op

  Histogram, ms/op:
    [160.000, 165.000) = 0 
    [165.000, 170.000) = 52 
    [170.000, 175.000) = 176 
    [175.000, 180.000) = 157 
    [180.000, 185.000) = 107 
    [185.000, 190.000) = 9 
    [190.000, 195.000) = 1 
    [195.000, 200.000) = 1 
    [200.000, 205.000) = 3 
    [205.000, 210.000) = 0 
    [210.000, 215.000) = 2 
    [215.000, 220.000) = 2 
    [220.000, 225.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    166.461 ms/op
     p(50.0000) =    177.471 ms/op
     p(90.0000) =    181.325 ms/op
     p(95.0000) =    183.330 ms/op
     p(99.0000) =    212.748 ms/op
     p(99.9000) =    227.279 ms/op
     p(99.9900) =    227.279 ms/op
     p(99.9990) =    227.279 ms/op
     p(99.9999) =    227.279 ms/op
    p(100.0000) =    227.279 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 87.78% complete, ETA 01:13:13
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
7860.126 ms/op
# Warmup Iteration   2: 2336.227 ms/op
# Warmup Iteration   3: 2336.227 ms/op
# Warmup Iteration   4: 2380.967 ±(99.9%) 1220.324 ms/op
# Warmup Iteration   5: 2344.616 ±(99.9%) 265.072 ms/op
Iteration   1: 2332.033 ±(99.9%) 153.039 ms/op
                 executeQuery·p0.00:   2323.644 ms/op
                 executeQuery·p0.50:   2332.033 ms/op
                 executeQuery·p0.90:   2340.422 ms/op
                 executeQuery·p0.95:   2340.422 ms/op
                 executeQuery·p0.99:   2340.422 ms/op
                 executeQuery·p0.999:  2340.422 ms/op
                 executeQuery·p0.9999: 2340.422 ms/op
                 executeQuery·p1.00:   2340.422 ms/op

Iteration   2: 2351.606 ±(99.9%) 289.699 ms/op
                 executeQuery·p0.00:   2340.422 ms/op
                 executeQuery·p0.50:   2344.616 ms/op
                 executeQuery·p0.90:   2369.782 ms/op
                 executeQuery·p0.95:   2369.782 ms/op
                 executeQuery·p0.99:   2369.782 ms/op
                 executeQuery·p0.999:  2369.782 ms/op
                 executeQuery·p0.9999: 2369.782 ms/op
                 executeQuery·p1.00:   2369.782 ms/op

Iteration   3: 2406.132 ±(99.9%) 1262.769 ms/op
                 executeQuery·p0.00:   2336.227 ms/op
                 executeQuery·p0.50:   2407.530 ms/op
                 executeQuery·p0.90:   2474.639 ms/op
                 executeQuery·p0.95:   2474.639 ms/op
                 executeQuery·p0.99:   2474.639 ms/op
                 executeQuery·p0.999:  2474.639 ms/op
                 executeQuery·p0.9999: 2474.639 ms/op
                 executeQuery·p1.00:   2474.639 ms/op

Iteration   4: 2362.791 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   2361.393 ms/op
                 executeQuery·p0.50:   2361.393 ms/op
                 executeQuery·p0.90:   2365.587 ms/op
                 executeQuery·p0.95:   2365.587 ms/op
                 executeQuery·p0.99:   2365.587 ms/op
                 executeQuery·p0.999:  2365.587 ms/op
                 executeQuery·p0.9999: 2365.587 ms/op
                 executeQuery·p1.00:   2365.587 ms/op

Iteration   5: 2428.502 ±(99.9%) 2057.513 ms/op
                 executeQuery·p0.00:   2357.199 ms/op
                 executeQuery·p0.50:   2369.782 ms/op
                 executeQuery·p0.90:   2558.525 ms/op
                 executeQuery·p0.95:   2558.525 ms/op
                 executeQuery·p0.99:   2558.525 ms/op
                 executeQuery·p0.999:  2558.525 ms/op
                 executeQuery·p0.9999: 2558.525 ms/op
                 executeQuery·p1.00:   2558.525 ms/op


# Run progress: 88.33% complete, ETA 01:09:43
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3217.031 ms/op
# Warmup Iteration   2: 2411.725 ms/op
# Warmup Iteration   3: 2199.912 ms/op
# Warmup Iteration   4: 2092.958 ±(99.9%) 5970.132 ms/op
# Warmup Iteration   5: 1888.835 ±(99.9%) 122.988 ms/op
Iteration   1: 1867.863 ±(99.9%) 96.285 ms/op
                 executeQuery·p0.00:   1862.271 ms/op
                 executeQuery·p0.50:   1868.562 ms/op
                 executeQuery·p0.90:   1872.757 ms/op
                 executeQuery·p0.95:   1872.757 ms/op
                 executeQuery·p0.99:   1872.757 ms/op
                 executeQuery·p0.999:  1872.757 ms/op
                 executeQuery·p0.9999: 1872.757 ms/op
                 executeQuery·p1.00:   1872.757 ms/op

Iteration   2: 1873.456 ±(99.9%) 134.364 ms/op
                 executeQuery·p0.00:   1866.465 ms/op
                 executeQuery·p0.50:   1872.757 ms/op
                 executeQuery·p0.90:   1881.145 ms/op
                 executeQuery·p0.95:   1881.145 ms/op
                 executeQuery·p0.99:   1881.145 ms/op
                 executeQuery·p0.999:  1881.145 ms/op
                 executeQuery·p0.9999: 1881.145 ms/op
                 executeQuery·p1.00:   1881.145 ms/op

Iteration   3: 1867.863 ±(99.9%) 134.364 ms/op
                 executeQuery·p0.00:   1860.174 ms/op
                 executeQuery·p0.50:   1868.562 ms/op
                 executeQuery·p0.90:   1874.854 ms/op
                 executeQuery·p0.95:   1874.854 ms/op
                 executeQuery·p0.99:   1874.854 ms/op
                 executeQuery·p0.999:  1874.854 ms/op
                 executeQuery·p0.9999: 1874.854 ms/op
                 executeQuery·p1.00:   1874.854 ms/op

Iteration   4: 1882.543 ±(99.9%) 367.640 ms/op
                 executeQuery·p0.00:   1864.368 ms/op
                 executeQuery·p0.50:   1879.048 ms/op
                 executeQuery·p0.90:   1904.214 ms/op
                 executeQuery·p0.95:   1904.214 ms/op
                 executeQuery·p0.99:   1904.214 ms/op
                 executeQuery·p0.999:  1904.214 ms/op
                 executeQuery·p0.9999: 1904.214 ms/op
                 executeQuery·p1.00:   1904.214 ms/op

Iteration   5: 1874.155 ±(99.9%) 134.364 ms/op
                 executeQuery·p0.00:   1866.465 ms/op
                 executeQuery·p0.50:   1874.854 ms/op
                 executeQuery·p0.90:   1881.145 ms/op
                 executeQuery·p0.95:   1881.145 ms/op
                 executeQuery·p0.99:   1881.145 ms/op
                 executeQuery·p0.999:  1881.145 ms/op
                 executeQuery·p0.9999: 1881.145 ms/op
                 executeQuery·p1.00:   1881.145 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   2124.695 ±(99.9%) 173.437 ms/op

  Histogram, ms/op:
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 14 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 0 
    [2150.000, 2200.000) = 0 
    [2200.000, 2250.000) = 0 
    [2250.000, 2300.000) = 0 
    [2300.000, 2350.000) = 6 
    [2350.000, 2400.000) = 6 
    [2400.000, 2450.000) = 1 
    [2450.000, 2500.000) = 1 
    [2500.000, 2550.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1860.174 ms/op
     p(50.0000) =   2113.929 ms/op
     p(90.0000) =   2403.756 ms/op
     p(95.0000) =   2512.388 ms/op
     p(99.0000) =   2558.525 ms/op
     p(99.9000) =   2558.525 ms/op
     p(99.9900) =   2558.525 ms/op
     p(99.9990) =   2558.525 ms/op
     p(99.9999) =   2558.525 ms/op
    p(100.0000) =   2558.525 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 88.89% complete, ETA 01:06:13
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
183.545 ±(99.9%) 16.614 ms/op
# Warmup Iteration   2: 170.953 ±(99.9%) 1.541 ms/op
# Warmup Iteration   3: 169.726 ±(99.9%) 2.097 ms/op
# Warmup Iteration   4: 172.486 ±(99.9%) 2.649 ms/op
# Warmup Iteration   5: 181.216 ±(99.9%) 1.856 ms/op
Iteration   1: 182.399 ±(99.9%) 1.258 ms/op
                 executeQuery·p0.00:   179.044 ms/op
                 executeQuery·p0.50:   181.928 ms/op
                 executeQuery·p0.90:   183.763 ms/op
                 executeQuery·p0.95:   185.205 ms/op
                 executeQuery·p0.99:   197.132 ms/op
                 executeQuery·p0.999:  197.132 ms/op
                 executeQuery·p0.9999: 197.132 ms/op
                 executeQuery·p1.00:   197.132 ms/op

Iteration   2: 182.511 ±(99.9%) 0.557 ms/op
                 executeQuery·p0.00:   179.831 ms/op
                 executeQuery·p0.50:   182.452 ms/op
                 executeQuery·p0.90:   184.025 ms/op
                 executeQuery·p0.95:   184.287 ms/op
                 executeQuery·p0.99:   184.812 ms/op
                 executeQuery·p0.999:  184.812 ms/op
                 executeQuery·p0.9999: 184.812 ms/op
                 executeQuery·p1.00:   184.812 ms/op

Iteration   3: 182.318 ±(99.9%) 0.698 ms/op
                 executeQuery·p0.00:   177.209 ms/op
                 executeQuery·p0.50:   182.452 ms/op
                 executeQuery·p0.90:   183.763 ms/op
                 executeQuery·p0.95:   184.025 ms/op
                 executeQuery·p0.99:   184.812 ms/op
                 executeQuery·p0.999:  184.812 ms/op
                 executeQuery·p0.9999: 184.812 ms/op
                 executeQuery·p1.00:   184.812 ms/op

Iteration   4: 179.369 ±(99.9%) 0.622 ms/op
                 executeQuery·p0.00:   175.636 ms/op
                 executeQuery·p0.50:   179.306 ms/op
                 executeQuery·p0.90:   180.093 ms/op
                 executeQuery·p0.95:   180.853 ms/op
                 executeQuery·p0.99:   185.598 ms/op
                 executeQuery·p0.999:  185.598 ms/op
                 executeQuery·p0.9999: 185.598 ms/op
                 executeQuery·p1.00:   185.598 ms/op

Iteration   5: 179.590 ±(99.9%) 0.553 ms/op
                 executeQuery·p0.00:   175.636 ms/op
                 executeQuery·p0.50:   179.569 ms/op
                 executeQuery·p0.90:   180.853 ms/op
                 executeQuery·p0.95:   180.997 ms/op
                 executeQuery·p0.99:   182.190 ms/op
                 executeQuery·p0.999:  182.190 ms/op
                 executeQuery·p0.9999: 182.190 ms/op
                 executeQuery·p1.00:   182.190 ms/op


# Run progress: 89.44% complete, ETA 01:02:43
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
185.769 ±(99.9%) 18.217 ms/op
# Warmup Iteration   2: 173.267 ±(99.9%) 3.377 ms/op
# Warmup Iteration   3: 172.617 ±(99.9%) 1.682 ms/op
# Warmup Iteration   4: 173.519 ±(99.9%) 2.996 ms/op
# Warmup Iteration   5: 177.780 ±(99.9%) 4.609 ms/op
Iteration   1: 179.689 ±(99.9%) 4.543 ms/op
                 executeQuery·p0.00:   168.296 ms/op
                 executeQuery·p0.50:   179.044 ms/op
                 executeQuery·p0.90:   185.231 ms/op
                 executeQuery·p0.95:   198.876 ms/op
                 executeQuery·p0.99:   227.803 ms/op
                 executeQuery·p0.999:  227.803 ms/op
                 executeQuery·p0.9999: 227.803 ms/op
                 executeQuery·p1.00:   227.803 ms/op

Iteration   2: 179.590 ±(99.9%) 3.434 ms/op
                 executeQuery·p0.00:   169.083 ms/op
                 executeQuery·p0.50:   180.093 ms/op
                 executeQuery·p0.90:   182.452 ms/op
                 executeQuery·p0.95:   194.144 ms/op
                 executeQuery·p0.99:   211.812 ms/op
                 executeQuery·p0.999:  211.812 ms/op
                 executeQuery·p0.9999: 211.812 ms/op
                 executeQuery·p1.00:   211.812 ms/op

Iteration   3: 180.145 ±(99.9%) 2.771 ms/op
                 executeQuery·p0.00:   173.015 ms/op
                 executeQuery·p0.50:   181.404 ms/op
                 executeQuery·p0.90:   184.549 ms/op
                 executeQuery·p0.95:   190.959 ms/op
                 executeQuery·p0.99:   202.113 ms/op
                 executeQuery·p0.999:  202.113 ms/op
                 executeQuery·p0.9999: 202.113 ms/op
                 executeQuery·p1.00:   202.113 ms/op

Iteration   4: 176.587 ±(99.9%) 1.754 ms/op
                 executeQuery·p0.00:   169.083 ms/op
                 executeQuery·p0.50:   177.734 ms/op
                 executeQuery·p0.90:   180.722 ms/op
                 executeQuery·p0.95:   180.879 ms/op
                 executeQuery·p0.99:   182.452 ms/op
                 executeQuery·p0.999:  182.452 ms/op
                 executeQuery·p0.9999: 182.452 ms/op
                 executeQuery·p1.00:   182.452 ms/op

Iteration   5: 177.676 ±(99.9%) 1.853 ms/op
                 executeQuery·p0.00:   170.394 ms/op
                 executeQuery·p0.50:   178.782 ms/op
                 executeQuery·p0.90:   181.115 ms/op
                 executeQuery·p0.95:   182.321 ms/op
                 executeQuery·p0.99:   184.287 ms/op
                 executeQuery·p0.999:  184.287 ms/op
                 executeQuery·p0.9999: 184.287 ms/op
                 executeQuery·p1.00:   184.287 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 498
  mean =    179.966 ±(99.9%) 0.720 ms/op

  Histogram, ms/op:
    [160.000, 165.000) = 0 
    [165.000, 170.000) = 8 
    [170.000, 175.000) = 51 
    [175.000, 180.000) = 186 
    [180.000, 185.000) = 237 
    [185.000, 190.000) = 6 
    [190.000, 195.000) = 4 
    [195.000, 200.000) = 2 
    [200.000, 205.000) = 2 
    [205.000, 210.000) = 0 
    [210.000, 215.000) = 1 
    [215.000, 220.000) = 0 
    [220.000, 225.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    168.296 ms/op
     p(50.0000) =    180.093 ms/op
     p(90.0000) =    183.501 ms/op
     p(95.0000) =    184.287 ms/op
     p(99.0000) =    198.220 ms/op
     p(99.9000) =    227.803 ms/op
     p(99.9900) =    227.803 ms/op
     p(99.9990) =    227.803 ms/op
     p(99.9999) =    227.803 ms/op
    p(100.0000) =    227.803 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 90.00% complete, ETA 00:59:14
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3011.510 ms/op
# Warmup Iteration   2: 2214.593 ms/op
# Warmup Iteration   3: 1866.465 ms/op
# Warmup Iteration   4: 1949.652 ±(99.9%) 443.440 ms/op
# Warmup Iteration   5: 1920.991 ±(99.9%) 689.739 ms/op
Iteration   1: 1880.446 ±(99.9%) 1137.762 ms/op
                 executeQuery·p0.00:   1843.397 ms/op
                 executeQuery·p0.50:   1845.494 ms/op
                 executeQuery·p0.90:   1952.449 ms/op
                 executeQuery·p0.95:   1952.449 ms/op
                 executeQuery·p0.99:   1952.449 ms/op
                 executeQuery·p0.999:  1952.449 ms/op
                 executeQuery·p0.9999: 1952.449 ms/op
                 executeQuery·p1.00:   1952.449 ms/op

Iteration   2: 1912.603 ±(99.9%) 1192.824 ms/op
                 executeQuery·p0.00:   1837.105 ms/op
                 executeQuery·p0.50:   1950.351 ms/op
                 executeQuery·p0.90:   1950.351 ms/op
                 executeQuery·p0.95:   1950.351 ms/op
                 executeQuery·p0.99:   1950.351 ms/op
                 executeQuery·p0.999:  1950.351 ms/op
                 executeQuery·p0.9999: 1950.351 ms/op
                 executeQuery·p1.00:   1950.351 ms/op

Iteration   3: 1930.778 ±(99.9%) 110.447 ms/op
                 executeQuery·p0.00:   1927.283 ms/op
                 executeQuery·p0.50:   1927.283 ms/op
                 executeQuery·p0.90:   1937.768 ms/op
                 executeQuery·p0.95:   1937.768 ms/op
                 executeQuery·p0.99:   1937.768 ms/op
                 executeQuery·p0.999:  1937.768 ms/op
                 executeQuery·p0.9999: 1937.768 ms/op
                 executeQuery·p1.00:   1937.768 ms/op

Iteration   4: 1930.079 ±(99.9%) 718.158 ms/op
                 executeQuery·p0.00:   1906.311 ms/op
                 executeQuery·p0.50:   1908.408 ms/op
                 executeQuery·p0.90:   1975.517 ms/op
                 executeQuery·p0.95:   1975.517 ms/op
                 executeQuery·p0.99:   1975.517 ms/op
                 executeQuery·p0.999:  1975.517 ms/op
                 executeQuery·p0.9999: 1975.517 ms/op
                 executeQuery·p1.00:   1975.517 ms/op

Iteration   5: 1979.711 ±(99.9%) 350.657 ms/op
                 executeQuery·p0.00:   1958.740 ms/op
                 executeQuery·p0.50:   1983.906 ms/op
                 executeQuery·p0.90:   1996.489 ms/op
                 executeQuery·p0.95:   1996.489 ms/op
                 executeQuery·p0.99:   1996.489 ms/op
                 executeQuery·p0.999:  1996.489 ms/op
                 executeQuery·p0.9999: 1996.489 ms/op
                 executeQuery·p1.00:   1996.489 ms/op


# Run progress: 90.56% complete, ETA 00:55:47
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3040.870 ms/op
# Warmup Iteration   2: 2145.386 ms/op
# Warmup Iteration   3: 1937.768 ms/op
# Warmup Iteration   4: 1953.847 ±(99.9%) 580.660 ms/op
# Warmup Iteration   5: 1906.311 ±(99.9%) 333.542 ms/op
Iteration   1: 1920.991 ±(99.9%) 876.644 ms/op
                 executeQuery·p0.00:   1868.562 ms/op
                 executeQuery·p0.50:   1931.477 ms/op
                 executeQuery·p0.90:   1962.934 ms/op
                 executeQuery·p0.95:   1962.934 ms/op
                 executeQuery·p0.99:   1962.934 ms/op
                 executeQuery·p0.999:  1962.934 ms/op
                 executeQuery·p0.9999: 1962.934 ms/op
                 executeQuery·p1.00:   1962.934 ms/op

Iteration   2: 1886.738 ±(99.9%) 752.011 ms/op
                 executeQuery·p0.00:   1839.202 ms/op
                 executeQuery·p0.50:   1908.408 ms/op
                 executeQuery·p0.90:   1912.603 ms/op
                 executeQuery·p0.95:   1912.603 ms/op
                 executeQuery·p0.99:   1912.603 ms/op
                 executeQuery·p0.999:  1912.603 ms/op
                 executeQuery·p0.9999: 1912.603 ms/op
                 executeQuery·p1.00:   1912.603 ms/op

Iteration   3: 1883.942 ±(99.9%) 765.516 ms/op
                 executeQuery·p0.00:   1841.299 ms/op
                 executeQuery·p0.50:   1885.340 ms/op
                 executeQuery·p0.90:   1925.186 ms/op
                 executeQuery·p0.95:   1925.186 ms/op
                 executeQuery·p0.99:   1925.186 ms/op
                 executeQuery·p0.999:  1925.186 ms/op
                 executeQuery·p0.9999: 1925.186 ms/op
                 executeQuery·p1.00:   1925.186 ms/op

Iteration   4: 1937.768 ±(99.9%) 1259.092 ms/op
                 executeQuery·p0.00:   1883.242 ms/op
                 executeQuery·p0.50:   1914.700 ms/op
                 executeQuery·p0.90:   2015.363 ms/op
                 executeQuery·p0.95:   2015.363 ms/op
                 executeQuery·p0.99:   2015.363 ms/op
                 executeQuery·p0.999:  2015.363 ms/op
                 executeQuery·p0.9999: 2015.363 ms/op
                 executeQuery·p1.00:   2015.363 ms/op

Iteration   5: 1894.427 ±(99.9%) 487.469 ms/op
                 executeQuery·p0.00:   1876.951 ms/op
                 executeQuery·p0.50:   1881.145 ms/op
                 executeQuery·p0.90:   1925.186 ms/op
                 executeQuery·p0.95:   1925.186 ms/op
                 executeQuery·p0.99:   1925.186 ms/op
                 executeQuery·p0.999:  1925.186 ms/op
                 executeQuery·p0.9999: 1925.186 ms/op
                 executeQuery·p1.00:   1925.186 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   1915.748 ±(99.9%) 32.478 ms/op

  Histogram, ms/op:
    [1800.000, 1825.000) = 0 
    [1825.000, 1850.000) = 5 
    [1850.000, 1875.000) = 1 
    [1875.000, 1900.000) = 4 
    [1900.000, 1925.000) = 5 
    [1925.000, 1950.000) = 6 
    [1950.000, 1975.000) = 5 
    [1975.000, 2000.000) = 3 
    [2000.000, 2025.000) = 1 
    [2025.000, 2050.000) = 0 
    [2050.000, 2075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1837.105 ms/op
     p(50.0000) =   1919.943 ms/op
     p(90.0000) =   1983.067 ms/op
     p(95.0000) =   2004.982 ms/op
     p(99.0000) =   2015.363 ms/op
     p(99.9000) =   2015.363 ms/op
     p(99.9900) =   2015.363 ms/op
     p(99.9990) =   2015.363 ms/op
     p(99.9999) =   2015.363 ms/op
    p(100.0000) =   2015.363 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 91.11% complete, ETA 00:52:22
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
185.843 ±(99.9%) 18.566 ms/op
# Warmup Iteration   2: 174.275 ±(99.9%) 1.151 ms/op
# Warmup Iteration   3: 175.179 ±(99.9%) 1.356 ms/op
# Warmup Iteration   4: 173.882 ±(99.9%) 1.615 ms/op
# Warmup Iteration   5: 172.133 ±(99.9%) 1.455 ms/op
Iteration   1: 175.194 ±(99.9%) 1.382 ms/op
                 executeQuery·p0.00:   169.869 ms/op
                 executeQuery·p0.50:   175.112 ms/op
                 executeQuery·p0.90:   179.254 ms/op
                 executeQuery·p0.95:   180.460 ms/op
                 executeQuery·p0.99:   181.666 ms/op
                 executeQuery·p0.999:  181.666 ms/op
                 executeQuery·p0.9999: 181.666 ms/op
                 executeQuery·p1.00:   181.666 ms/op

Iteration   2: 176.222 ±(99.9%) 2.514 ms/op
                 executeQuery·p0.00:   170.394 ms/op
                 executeQuery·p0.50:   175.112 ms/op
                 executeQuery·p0.90:   181.089 ms/op
                 executeQuery·p0.95:   184.549 ms/op
                 executeQuery·p0.99:   203.686 ms/op
                 executeQuery·p0.999:  203.686 ms/op
                 executeQuery·p0.9999: 203.686 ms/op
                 executeQuery·p1.00:   203.686 ms/op

Iteration   3: 176.654 ±(99.9%) 2.455 ms/op
                 executeQuery·p0.00:   169.869 ms/op
                 executeQuery·p0.50:   175.374 ms/op
                 executeQuery·p0.90:   179.044 ms/op
                 executeQuery·p0.95:   183.815 ms/op
                 executeQuery·p0.99:   204.210 ms/op
                 executeQuery·p0.999:  204.210 ms/op
                 executeQuery·p0.9999: 204.210 ms/op
                 executeQuery·p1.00:   204.210 ms/op

Iteration   4: 176.829 ±(99.9%) 1.457 ms/op
                 executeQuery·p0.00:   169.345 ms/op
                 executeQuery·p0.50:   176.423 ms/op
                 executeQuery·p0.90:   180.040 ms/op
                 executeQuery·p0.95:   181.246 ms/op
                 executeQuery·p0.99:   183.501 ms/op
                 executeQuery·p0.999:  183.501 ms/op
                 executeQuery·p0.9999: 183.501 ms/op
                 executeQuery·p1.00:   183.501 ms/op

Iteration   5: 177.672 ±(99.9%) 1.554 ms/op
                 executeQuery·p0.00:   170.918 ms/op
                 executeQuery·p0.50:   178.782 ms/op
                 executeQuery·p0.90:   181.613 ms/op
                 executeQuery·p0.95:   184.025 ms/op
                 executeQuery·p0.99:   184.025 ms/op
                 executeQuery·p0.999:  184.025 ms/op
                 executeQuery·p0.9999: 184.025 ms/op
                 executeQuery·p1.00:   184.025 ms/op


# Run progress: 91.67% complete, ETA 00:48:57
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
183.375 ±(99.9%) 14.929 ms/op
# Warmup Iteration   2: 173.925 ±(99.9%) 1.159 ms/op
# Warmup Iteration   3: 173.267 ±(99.9%) 1.801 ms/op
# Warmup Iteration   4: 172.299 ±(99.9%) 1.074 ms/op
# Warmup Iteration   5: 175.719 ±(99.9%) 0.791 ms/op
Iteration   1: 176.633 ±(99.9%) 0.783 ms/op
                 executeQuery·p0.00:   175.374 ms/op
                 executeQuery·p0.50:   176.161 ms/op
                 executeQuery·p0.90:   177.734 ms/op
                 executeQuery·p0.95:   179.306 ms/op
                 executeQuery·p0.99:   185.598 ms/op
                 executeQuery·p0.999:  185.598 ms/op
                 executeQuery·p0.9999: 185.598 ms/op
                 executeQuery·p1.00:   185.598 ms/op

Iteration   2: 176.921 ±(99.9%) 0.552 ms/op
                 executeQuery·p0.00:   173.277 ms/op
                 executeQuery·p0.50:   177.209 ms/op
                 executeQuery·p0.90:   177.996 ms/op
                 executeQuery·p0.95:   178.612 ms/op
                 executeQuery·p0.99:   179.044 ms/op
                 executeQuery·p0.999:  179.044 ms/op
                 executeQuery·p0.9999: 179.044 ms/op
                 executeQuery·p1.00:   179.044 ms/op

Iteration   3: 178.698 ±(99.9%) 1.309 ms/op
                 executeQuery·p0.00:   173.801 ms/op
                 executeQuery·p0.50:   177.471 ms/op
                 executeQuery·p0.90:   182.400 ms/op
                 executeQuery·p0.95:   183.212 ms/op
                 executeQuery·p0.99:   184.812 ms/op
                 executeQuery·p0.999:  184.812 ms/op
                 executeQuery·p0.9999: 184.812 ms/op
                 executeQuery·p1.00:   184.812 ms/op

Iteration   4: 177.014 ±(99.9%) 0.634 ms/op
                 executeQuery·p0.00:   174.326 ms/op
                 executeQuery·p0.50:   176.685 ms/op
                 executeQuery·p0.90:   178.782 ms/op
                 executeQuery·p0.95:   179.411 ms/op
                 executeQuery·p0.99:   179.831 ms/op
                 executeQuery·p0.999:  179.831 ms/op
                 executeQuery·p0.9999: 179.831 ms/op
                 executeQuery·p1.00:   179.831 ms/op

Iteration   5: 178.541 ±(99.9%) 0.574 ms/op
                 executeQuery·p0.00:   173.015 ms/op
                 executeQuery·p0.50:   178.782 ms/op
                 executeQuery·p0.90:   179.805 ms/op
                 executeQuery·p0.95:   180.093 ms/op
                 executeQuery·p0.99:   180.355 ms/op
                 executeQuery·p0.999:  180.355 ms/op
                 executeQuery·p0.9999: 180.355 ms/op
                 executeQuery·p1.00:   180.355 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 506
  mean =    177.033 ±(99.9%) 0.467 ms/op

  Histogram, ms/op:
    [160.000, 165.000) = 0 
    [165.000, 170.000) = 4 
    [170.000, 175.000) = 84 
    [175.000, 180.000) = 371 
    [180.000, 185.000) = 42 
    [185.000, 190.000) = 2 
    [190.000, 195.000) = 1 
    [195.000, 200.000) = 0 
    [200.000, 205.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    169.345 ms/op
     p(50.0000) =    176.947 ms/op
     p(90.0000) =    179.831 ms/op
     p(95.0000) =    181.312 ms/op
     p(99.0000) =    185.543 ms/op
     p(99.9000) =    204.210 ms/op
     p(99.9900) =    204.210 ms/op
     p(99.9990) =    204.210 ms/op
     p(99.9999) =    204.210 ms/op
    p(100.0000) =    204.210 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 92.22% complete, ETA 00:45:33
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2600.468 ms/op
# Warmup Iteration   2: 2049.966 ms/op
# Warmup Iteration   3: 1959.439 ±(99.9%) 527.838 ms/op
# Warmup Iteration   4: 1909.981 ±(99.9%) 409.610 ms/op
# Warmup Iteration   5: 1927.283 ±(99.9%) 996.961 ms/op
Iteration   1: 1948.254 ±(99.9%) 506.130 ms/op
                 executeQuery·p0.00:   1927.283 ms/op
                 executeQuery·p0.50:   1937.768 ms/op
                 executeQuery·p0.90:   1979.711 ms/op
                 executeQuery·p0.95:   1979.711 ms/op
                 executeQuery·p0.99:   1979.711 ms/op
                 executeQuery·p0.999:  1979.711 ms/op
                 executeQuery·p0.9999: 1979.711 ms/op
                 executeQuery·p1.00:   1979.711 ms/op

Iteration   2: 1955.245 ±(99.9%) 271.438 ms/op
                 executeQuery·p0.00:   1941.963 ms/op
                 executeQuery·p0.50:   1952.449 ms/op
                 executeQuery·p0.90:   1971.323 ms/op
                 executeQuery·p0.95:   1971.323 ms/op
                 executeQuery·p0.99:   1971.323 ms/op
                 executeQuery·p0.999:  1971.323 ms/op
                 executeQuery·p0.9999: 1971.323 ms/op
                 executeQuery·p1.00:   1971.323 ms/op

Iteration   3: 1905.787 ±(99.9%) 305.717 ms/op
                 executeQuery·p0.00:   1862.271 ms/op
                 executeQuery·p0.50:   1900.020 ms/op
                 executeQuery·p0.90:   1960.837 ms/op
                 executeQuery·p0.95:   1960.837 ms/op
                 executeQuery·p0.99:   1960.837 ms/op
                 executeQuery·p0.999:  1960.837 ms/op
                 executeQuery·p0.9999: 1960.837 ms/op
                 executeQuery·p1.00:   1960.837 ms/op

Iteration   4: 1948.953 ±(99.9%) 345.047 ms/op
                 executeQuery·p0.00:   1929.380 ms/op
                 executeQuery·p0.50:   1950.351 ms/op
                 executeQuery·p0.90:   1967.129 ms/op
                 executeQuery·p0.95:   1967.129 ms/op
                 executeQuery·p0.99:   1967.129 ms/op
                 executeQuery·p0.999:  1967.129 ms/op
                 executeQuery·p0.9999: 1967.129 ms/op
                 executeQuery·p1.00:   1967.129 ms/op

Iteration   5: 1939.167 ±(99.9%) 22.089 ms/op
                 executeQuery·p0.00:   1937.768 ms/op
                 executeQuery·p0.50:   1939.866 ms/op
                 executeQuery·p0.90:   1939.866 ms/op
                 executeQuery·p0.95:   1939.866 ms/op
                 executeQuery·p0.99:   1939.866 ms/op
                 executeQuery·p0.999:  1939.866 ms/op
                 executeQuery·p0.9999: 1939.866 ms/op
                 executeQuery·p1.00:   1939.866 ms/op


# Run progress: 92.78% complete, ETA 00:42:12
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2627.731 ms/op
# Warmup Iteration   2: 2248.147 ms/op
# Warmup Iteration   3: 1982.508 ±(99.9%) 1414.235 ms/op
# Warmup Iteration   4: 1997.188 ±(99.9%) 1565.541 ms/op
# Warmup Iteration   5: 1955.245 ±(99.9%) 409.100 ms/op
Iteration   1: 1923.787 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   1916.797 ms/op
                 executeQuery·p0.50:   1925.186 ms/op
                 executeQuery·p0.90:   1929.380 ms/op
                 executeQuery·p0.95:   1929.380 ms/op
                 executeQuery·p0.99:   1929.380 ms/op
                 executeQuery·p0.999:  1929.380 ms/op
                 executeQuery·p0.9999: 1929.380 ms/op
                 executeQuery·p1.00:   1929.380 ms/op

Iteration   2: 1908.408 ±(99.9%) 184.158 ms/op
                 executeQuery·p0.00:   1870.660 ms/op
                 executeQuery·p0.50:   1911.554 ms/op
                 executeQuery·p0.90:   1939.866 ms/op
                 executeQuery·p0.95:   1939.866 ms/op
                 executeQuery·p0.99:   1939.866 ms/op
                 executeQuery·p0.999:  1939.866 ms/op
                 executeQuery·p0.9999: 1939.866 ms/op
                 executeQuery·p1.00:   1939.866 ms/op

Iteration   3: 1896.874 ±(99.9%) 227.438 ms/op
                 executeQuery·p0.00:   1862.271 ms/op
                 executeQuery·p0.50:   1892.680 ms/op
                 executeQuery·p0.90:   1939.866 ms/op
                 executeQuery·p0.95:   1939.866 ms/op
                 executeQuery·p0.99:   1939.866 ms/op
                 executeQuery·p0.999:  1939.866 ms/op
                 executeQuery·p0.9999: 1939.866 ms/op
                 executeQuery·p1.00:   1939.866 ms/op

Iteration   4: 1946.157 ±(99.9%) 175.329 ms/op
                 executeQuery·p0.00:   1937.768 ms/op
                 executeQuery·p0.50:   1944.060 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op

Iteration   5: 1917.496 ±(99.9%) 276.779 ms/op
                 executeQuery·p0.00:   1900.020 ms/op
                 executeQuery·p0.50:   1925.186 ms/op
                 executeQuery·p0.90:   1927.283 ms/op
                 executeQuery·p0.95:   1927.283 ms/op
                 executeQuery·p0.99:   1927.283 ms/op
                 executeQuery·p0.999:  1927.283 ms/op
                 executeQuery·p0.9999: 1927.283 ms/op
                 executeQuery·p1.00:   1927.283 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 33
  mean =   1926.711 ±(99.9%) 19.351 ms/op

  Histogram, ms/op:
    [1800.000, 1812.500) = 0 
    [1812.500, 1825.000) = 0 
    [1825.000, 1837.500) = 0 
    [1837.500, 1850.000) = 0 
    [1850.000, 1862.500) = 2 
    [1862.500, 1875.000) = 3 
    [1875.000, 1887.500) = 0 
    [1887.500, 1900.000) = 0 
    [1900.000, 1912.500) = 3 
    [1912.500, 1925.000) = 2 
    [1925.000, 1937.500) = 7 
    [1937.500, 1950.000) = 9 
    [1950.000, 1962.500) = 4 
    [1962.500, 1975.000) = 2 
    [1975.000, 1987.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1862.271 ms/op
     p(50.0000) =   1929.380 ms/op
     p(90.0000) =   1964.612 ms/op
     p(95.0000) =   1973.839 ms/op
     p(99.0000) =   1979.711 ms/op
     p(99.9000) =   1979.711 ms/op
     p(99.9900) =   1979.711 ms/op
     p(99.9990) =   1979.711 ms/op
     p(99.9999) =   1979.711 ms/op
    p(100.0000) =   1979.711 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 93.33% complete, ETA 00:38:52
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
131.120 ±(99.9%) 3.488 ms/op
# Warmup Iteration   2: 124.497 ±(99.9%) 0.866 ms/op
# Warmup Iteration   3: 123.847 ±(99.9%) 0.272 ms/op
# Warmup Iteration   4: 123.528 ±(99.9%) 0.405 ms/op
# Warmup Iteration   5: 123.420 ±(99.9%) 0.546 ms/op
Iteration   1: 122.874 ±(99.9%) 0.473 ms/op
                 executeQuery·p0.00:   121.635 ms/op
                 executeQuery·p0.50:   122.552 ms/op
                 executeQuery·p0.90:   124.505 ms/op
                 executeQuery·p0.95:   125.829 ms/op
                 executeQuery·p0.99:   128.451 ms/op
                 executeQuery·p0.999:  128.451 ms/op
                 executeQuery·p0.9999: 128.451 ms/op
                 executeQuery·p1.00:   128.451 ms/op

Iteration   2: 123.391 ±(99.9%) 0.428 ms/op
                 executeQuery·p0.00:   122.421 ms/op
                 executeQuery·p0.50:   123.208 ms/op
                 executeQuery·p0.90:   123.837 ms/op
                 executeQuery·p0.95:   125.685 ms/op
                 executeQuery·p0.99:   130.941 ms/op
                 executeQuery·p0.999:  130.941 ms/op
                 executeQuery·p0.9999: 130.941 ms/op
                 executeQuery·p1.00:   130.941 ms/op

Iteration   3: 123.149 ±(99.9%) 0.169 ms/op
                 executeQuery·p0.00:   122.421 ms/op
                 executeQuery·p0.50:   122.946 ms/op
                 executeQuery·p0.90:   123.601 ms/op
                 executeQuery·p0.95:   124.106 ms/op
                 executeQuery·p0.99:   125.043 ms/op
                 executeQuery·p0.999:  125.043 ms/op
                 executeQuery·p0.9999: 125.043 ms/op
                 executeQuery·p1.00:   125.043 ms/op

Iteration   4: 123.147 ±(99.9%) 0.166 ms/op
                 executeQuery·p0.00:   122.552 ms/op
                 executeQuery·p0.50:   122.946 ms/op
                 executeQuery·p0.90:   123.601 ms/op
                 executeQuery·p0.95:   123.955 ms/op
                 executeQuery·p0.99:   124.912 ms/op
                 executeQuery·p0.999:  124.912 ms/op
                 executeQuery·p0.9999: 124.912 ms/op
                 executeQuery·p1.00:   124.912 ms/op

Iteration   5: 123.319 ±(99.9%) 0.286 ms/op
                 executeQuery·p0.00:   122.421 ms/op
                 executeQuery·p0.50:   123.339 ms/op
                 executeQuery·p0.90:   123.968 ms/op
                 executeQuery·p0.95:   124.230 ms/op
                 executeQuery·p0.99:   128.844 ms/op
                 executeQuery·p0.999:  128.844 ms/op
                 executeQuery·p0.9999: 128.844 ms/op
                 executeQuery·p1.00:   128.844 ms/op


# Run progress: 93.89% complete, ETA 00:35:31
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
129.773 ±(99.9%) 3.545 ms/op
# Warmup Iteration   2: 123.633 ±(99.9%) 0.814 ms/op
# Warmup Iteration   3: 123.526 ±(99.9%) 0.613 ms/op
# Warmup Iteration   4: 125.116 ±(99.9%) 0.778 ms/op
# Warmup Iteration   5: 126.581 ±(99.9%) 0.657 ms/op
Iteration   1: 126.675 ±(99.9%) 0.484 ms/op
                 executeQuery·p0.00:   123.208 ms/op
                 executeQuery·p0.50:   127.402 ms/op
                 executeQuery·p0.90:   127.795 ms/op
                 executeQuery·p0.95:   127.926 ms/op
                 executeQuery·p0.99:   130.810 ms/op
                 executeQuery·p0.999:  130.810 ms/op
                 executeQuery·p0.9999: 130.810 ms/op
                 executeQuery·p1.00:   130.810 ms/op

Iteration   2: 127.190 ±(99.9%) 0.425 ms/op
                 executeQuery·p0.00:   125.043 ms/op
                 executeQuery·p0.50:   128.057 ms/op
                 executeQuery·p0.90:   128.319 ms/op
                 executeQuery·p0.95:   128.319 ms/op
                 executeQuery·p0.99:   128.451 ms/op
                 executeQuery·p0.999:  128.451 ms/op
                 executeQuery·p0.9999: 128.451 ms/op
                 executeQuery·p1.00:   128.451 ms/op

Iteration   3: 126.491 ±(99.9%) 0.716 ms/op
                 executeQuery·p0.00:   122.946 ms/op
                 executeQuery·p0.50:   126.484 ms/op
                 executeQuery·p0.90:   128.319 ms/op
                 executeQuery·p0.95:   128.451 ms/op
                 executeQuery·p0.99:   130.154 ms/op
                 executeQuery·p0.999:  130.154 ms/op
                 executeQuery·p0.9999: 130.154 ms/op
                 executeQuery·p1.00:   130.154 ms/op

Iteration   4: 127.206 ±(99.9%) 0.475 ms/op
                 executeQuery·p0.00:   123.732 ms/op
                 executeQuery·p0.50:   128.188 ms/op
                 executeQuery·p0.90:   128.319 ms/op
                 executeQuery·p0.95:   128.319 ms/op
                 executeQuery·p0.99:   129.630 ms/op
                 executeQuery·p0.999:  129.630 ms/op
                 executeQuery·p0.9999: 129.630 ms/op
                 executeQuery·p1.00:   129.630 ms/op

Iteration   5: 126.856 ±(99.9%) 0.586 ms/op
                 executeQuery·p0.00:   122.946 ms/op
                 executeQuery·p0.50:   126.484 ms/op
                 executeQuery·p0.90:   128.319 ms/op
                 executeQuery·p0.95:   128.319 ms/op
                 executeQuery·p0.99:   128.451 ms/op
                 executeQuery·p0.999:  128.451 ms/op
                 executeQuery·p0.9999: 128.451 ms/op
                 executeQuery·p1.00:   128.451 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 803
  mean =    124.999 ±(99.9%) 0.257 ms/op

  Histogram, ms/op:
    [121.000, 122.000) = 3 
    [122.000, 123.000) = 220 
    [123.000, 124.000) = 185 
    [124.000, 125.000) = 15 
    [125.000, 126.000) = 107 
    [126.000, 127.000) = 77 
    [127.000, 128.000) = 39 
    [128.000, 129.000) = 153 
    [129.000, 130.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    121.635 ms/op
     p(50.0000) =    123.994 ms/op
     p(90.0000) =    128.319 ms/op
     p(95.0000) =    128.319 ms/op
     p(99.0000) =    128.451 ms/op
     p(99.9000) =    130.941 ms/op
     p(99.9900) =    130.941 ms/op
     p(99.9990) =    130.941 ms/op
     p(99.9999) =    130.941 ms/op
    p(100.0000) =    130.941 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 94.44% complete, ETA 00:32:12
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1218.445 ±(99.9%) 97.409 ms/op
# Warmup Iteration   2: 1211.921 ±(99.9%) 29.191 ms/op
# Warmup Iteration   3: 1215.416 ±(99.9%) 27.304 ms/op
# Warmup Iteration   4: 1202.833 ±(99.9%) 40.837 ms/op
# Warmup Iteration   5: 1202.833 ±(99.9%) 33.392 ms/op
Iteration   1: 1181.862 ±(99.9%) 8.830 ms/op
                 executeQuery·p0.00:   1178.599 ms/op
                 executeQuery·p0.50:   1180.697 ms/op
                 executeQuery·p0.90:   1195.377 ms/op
                 executeQuery·p0.95:   1195.377 ms/op
                 executeQuery·p0.99:   1195.377 ms/op
                 executeQuery·p0.999:  1195.377 ms/op
                 executeQuery·p0.9999: 1195.377 ms/op
                 executeQuery·p1.00:   1195.377 ms/op

Iteration   2: 1190.250 ±(99.9%) 6.380 ms/op
                 executeQuery·p0.00:   1184.891 ms/op
                 executeQuery·p0.50:   1189.085 ms/op
                 executeQuery·p0.90:   1197.474 ms/op
                 executeQuery·p0.95:   1197.474 ms/op
                 executeQuery·p0.99:   1197.474 ms/op
                 executeQuery·p0.999:  1197.474 ms/op
                 executeQuery·p0.9999: 1197.474 ms/op
                 executeQuery·p1.00:   1197.474 ms/op

Iteration   3: 1203.998 ±(99.9%) 33.914 ms/op
                 executeQuery·p0.00:   1186.988 ms/op
                 executeQuery·p0.50:   1193.279 ms/op
                 executeQuery·p0.90:   1237.320 ms/op
                 executeQuery·p0.95:   1237.320 ms/op
                 executeQuery·p0.99:   1237.320 ms/op
                 executeQuery·p0.999:  1237.320 ms/op
                 executeQuery·p0.9999: 1237.320 ms/op
                 executeQuery·p1.00:   1237.320 ms/op

Iteration   4: 1193.046 ±(99.9%) 12.761 ms/op
                 executeQuery·p0.00:   1182.794 ms/op
                 executeQuery·p0.50:   1195.377 ms/op
                 executeQuery·p0.90:   1203.765 ms/op
                 executeQuery·p0.95:   1203.765 ms/op
                 executeQuery·p0.99:   1203.765 ms/op
                 executeQuery·p0.999:  1203.765 ms/op
                 executeQuery·p0.9999: 1203.765 ms/op
                 executeQuery·p1.00:   1203.765 ms/op

Iteration   5: 1190.017 ±(99.9%) 8.652 ms/op
                 executeQuery·p0.00:   1184.891 ms/op
                 executeQuery·p0.50:   1189.085 ms/op
                 executeQuery·p0.90:   1199.571 ms/op
                 executeQuery·p0.95:   1199.571 ms/op
                 executeQuery·p0.99:   1199.571 ms/op
                 executeQuery·p0.999:  1199.571 ms/op
                 executeQuery·p0.9999: 1199.571 ms/op
                 executeQuery·p1.00:   1199.571 ms/op


# Run progress: 95.00% complete, ETA 00:28:54
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1231.028 ±(99.9%) 122.118 ms/op
# Warmup Iteration   2: 1194.678 ±(99.9%) 30.316 ms/op
# Warmup Iteration   3: 1177.434 ±(99.9%) 5.319 ms/op
# Warmup Iteration   4: 1187.221 ±(99.9%) 16.758 ms/op
# Warmup Iteration   5: 1184.425 ±(99.9%) 9.453 ms/op
Iteration   1: 1186.289 ±(99.9%) 12.706 ms/op
                 executeQuery·p0.00:   1176.502 ms/op
                 executeQuery·p0.50:   1182.794 ms/op
                 executeQuery·p0.90:   1201.668 ms/op
                 executeQuery·p0.95:   1201.668 ms/op
                 executeQuery·p0.99:   1201.668 ms/op
                 executeQuery·p0.999:  1201.668 ms/op
                 executeQuery·p0.9999: 1201.668 ms/op
                 executeQuery·p1.00:   1201.668 ms/op

Iteration   2: 1193.746 ±(99.9%) 20.907 ms/op
                 executeQuery·p0.00:   1184.891 ms/op
                 executeQuery·p0.50:   1189.085 ms/op
                 executeQuery·p0.90:   1216.348 ms/op
                 executeQuery·p0.95:   1216.348 ms/op
                 executeQuery·p0.99:   1216.348 ms/op
                 executeQuery·p0.999:  1216.348 ms/op
                 executeQuery·p0.9999: 1216.348 ms/op
                 executeQuery·p1.00:   1216.348 ms/op

Iteration   3: 1208.892 ±(99.9%) 22.157 ms/op
                 executeQuery·p0.00:   1191.182 ms/op
                 executeQuery·p0.50:   1216.348 ms/op
                 executeQuery·p0.90:   1222.640 ms/op
                 executeQuery·p0.95:   1222.640 ms/op
                 executeQuery·p0.99:   1222.640 ms/op
                 executeQuery·p0.999:  1222.640 ms/op
                 executeQuery·p0.9999: 1222.640 ms/op
                 executeQuery·p1.00:   1222.640 ms/op

Iteration   4: 1197.008 ±(99.9%) 22.550 ms/op
                 executeQuery·p0.00:   1182.794 ms/op
                 executeQuery·p0.50:   1193.279 ms/op
                 executeQuery·p0.90:   1220.542 ms/op
                 executeQuery·p0.95:   1220.542 ms/op
                 executeQuery·p0.99:   1220.542 ms/op
                 executeQuery·p0.999:  1220.542 ms/op
                 executeQuery·p0.9999: 1220.542 ms/op
                 executeQuery·p1.00:   1220.542 ms/op

Iteration   5: 1191.648 ±(99.9%) 10.391 ms/op
                 executeQuery·p0.00:   1184.891 ms/op
                 executeQuery·p0.50:   1189.085 ms/op
                 executeQuery·p0.90:   1201.668 ms/op
                 executeQuery·p0.95:   1201.668 ms/op
                 executeQuery·p0.99:   1201.668 ms/op
                 executeQuery·p0.999:  1201.668 ms/op
                 executeQuery·p0.9999: 1201.668 ms/op
                 executeQuery·p1.00:   1201.668 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 90
  mean =   1193.676 ±(99.9%) 4.540 ms/op

  Histogram, ms/op:
    [1170.000, 1175.000) = 0 
    [1175.000, 1180.000) = 4 
    [1180.000, 1185.000) = 20 
    [1185.000, 1190.000) = 23 
    [1190.000, 1195.000) = 15 
    [1195.000, 1200.000) = 11 
    [1200.000, 1205.000) = 4 
    [1205.000, 1210.000) = 0 
    [1210.000, 1215.000) = 3 
    [1215.000, 1220.000) = 6 
    [1220.000, 1225.000) = 2 
    [1225.000, 1230.000) = 0 
    [1230.000, 1235.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1176.502 ms/op
     p(50.0000) =   1189.085 ms/op
     p(90.0000) =   1216.348 ms/op
     p(95.0000) =   1219.389 ms/op
     p(99.0000) =   1237.320 ms/op
     p(99.9000) =   1237.320 ms/op
     p(99.9900) =   1237.320 ms/op
     p(99.9990) =   1237.320 ms/op
     p(99.9999) =   1237.320 ms/op
    p(100.0000) =   1237.320 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 95.56% complete, ETA 00:25:38
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
130.798 ±(99.9%) 4.595 ms/op
# Warmup Iteration   2: 127.226 ±(99.9%) 0.574 ms/op
# Warmup Iteration   3: 126.611 ±(99.9%) 0.515 ms/op
# Warmup Iteration   4: 126.587 ±(99.9%) 0.567 ms/op
# Warmup Iteration   5: 128.291 ±(99.9%) 0.468 ms/op
Iteration   1: 127.172 ±(99.9%) 0.566 ms/op
                 executeQuery·p0.00:   123.077 ms/op
                 executeQuery·p0.50:   128.057 ms/op
                 executeQuery·p0.90:   128.333 ms/op
                 executeQuery·p0.95:   128.582 ms/op
                 executeQuery·p0.99:   130.286 ms/op
                 executeQuery·p0.999:  130.286 ms/op
                 executeQuery·p0.9999: 130.286 ms/op
                 executeQuery·p1.00:   130.286 ms/op

Iteration   2: 127.195 ±(99.9%) 0.503 ms/op
                 executeQuery·p0.00:   123.339 ms/op
                 executeQuery·p0.50:   128.057 ms/op
                 executeQuery·p0.90:   128.319 ms/op
                 executeQuery·p0.95:   128.614 ms/op
                 executeQuery·p0.99:   129.892 ms/op
                 executeQuery·p0.999:  129.892 ms/op
                 executeQuery·p0.9999: 129.892 ms/op
                 executeQuery·p1.00:   129.892 ms/op

Iteration   3: 126.863 ±(99.9%) 0.545 ms/op
                 executeQuery·p0.00:   122.683 ms/op
                 executeQuery·p0.50:   127.795 ms/op
                 executeQuery·p0.90:   128.057 ms/op
                 executeQuery·p0.95:   128.188 ms/op
                 executeQuery·p0.99:   129.499 ms/op
                 executeQuery·p0.999:  129.499 ms/op
                 executeQuery·p0.9999: 129.499 ms/op
                 executeQuery·p1.00:   129.499 ms/op

Iteration   4: 126.357 ±(99.9%) 0.604 ms/op
                 executeQuery·p0.00:   124.125 ms/op
                 executeQuery·p0.50:   125.698 ms/op
                 executeQuery·p0.90:   128.057 ms/op
                 executeQuery·p0.95:   128.319 ms/op
                 executeQuery·p0.99:   132.383 ms/op
                 executeQuery·p0.999:  132.383 ms/op
                 executeQuery·p0.9999: 132.383 ms/op
                 executeQuery·p1.00:   132.383 ms/op

Iteration   5: 126.095 ±(99.9%) 0.476 ms/op
                 executeQuery·p0.00:   124.125 ms/op
                 executeQuery·p0.50:   125.698 ms/op
                 executeQuery·p0.90:   127.926 ms/op
                 executeQuery·p0.95:   128.057 ms/op
                 executeQuery·p0.99:   128.188 ms/op
                 executeQuery·p0.999:  128.188 ms/op
                 executeQuery·p0.9999: 128.188 ms/op
                 executeQuery·p1.00:   128.188 ms/op


# Run progress: 96.11% complete, ETA 00:22:22
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
132.171 ±(99.9%) 4.257 ms/op
# Warmup Iteration   2: 127.987 ±(99.9%) 0.591 ms/op
# Warmup Iteration   3: 127.441 ±(99.9%) 0.445 ms/op
# Warmup Iteration   4: 127.656 ±(99.9%) 0.685 ms/op
# Warmup Iteration   5: 128.944 ±(99.9%) 0.484 ms/op
Iteration   1: 129.142 ±(99.9%) 0.372 ms/op
                 executeQuery·p0.00:   127.009 ms/op
                 executeQuery·p0.50:   129.106 ms/op
                 executeQuery·p0.90:   130.050 ms/op
                 executeQuery·p0.95:   130.154 ms/op
                 executeQuery·p0.99:   132.121 ms/op
                 executeQuery·p0.999:  132.121 ms/op
                 executeQuery·p0.9999: 132.121 ms/op
                 executeQuery·p1.00:   132.121 ms/op

Iteration   2: 128.538 ±(99.9%) 0.459 ms/op
                 executeQuery·p0.00:   126.353 ms/op
                 executeQuery·p0.50:   127.664 ms/op
                 executeQuery·p0.90:   129.905 ms/op
                 executeQuery·p0.95:   130.154 ms/op
                 executeQuery·p0.99:   130.941 ms/op
                 executeQuery·p0.999:  130.941 ms/op
                 executeQuery·p0.9999: 130.941 ms/op
                 executeQuery·p1.00:   130.941 ms/op

Iteration   3: 128.595 ±(99.9%) 0.427 ms/op
                 executeQuery·p0.00:   126.878 ms/op
                 executeQuery·p0.50:   128.451 ms/op
                 executeQuery·p0.90:   129.892 ms/op
                 executeQuery·p0.95:   130.023 ms/op
                 executeQuery·p0.99:   130.023 ms/op
                 executeQuery·p0.999:  130.023 ms/op
                 executeQuery·p0.9999: 130.023 ms/op
                 executeQuery·p1.00:   130.023 ms/op

Iteration   4: 129.903 ±(99.9%) 1.237 ms/op
                 executeQuery·p0.00:   128.057 ms/op
                 executeQuery·p0.50:   129.499 ms/op
                 executeQuery·p0.90:   130.154 ms/op
                 executeQuery·p0.95:   131.780 ms/op
                 executeQuery·p0.99:   150.471 ms/op
                 executeQuery·p0.999:  150.471 ms/op
                 executeQuery·p0.9999: 150.471 ms/op
                 executeQuery·p1.00:   150.471 ms/op

Iteration   5: 130.682 ±(99.9%) 0.448 ms/op
                 executeQuery·p0.00:   126.091 ms/op
                 executeQuery·p0.50:   130.941 ms/op
                 executeQuery·p0.90:   131.727 ms/op
                 executeQuery·p0.95:   131.727 ms/op
                 executeQuery·p0.99:   131.858 ms/op
                 executeQuery·p0.999:  131.858 ms/op
                 executeQuery·p0.9999: 131.858 ms/op
                 executeQuery·p1.00:   131.858 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 778
  mean =    128.040 ±(99.9%) 0.254 ms/op

  Histogram, ms/op:
    [120.000, 122.500) = 0 
    [122.500, 125.000) = 35 
    [125.000, 127.500) = 216 
    [127.500, 130.000) = 407 
    [130.000, 132.500) = 117 
    [132.500, 135.000) = 0 
    [135.000, 137.500) = 1 
    [137.500, 140.000) = 0 
    [140.000, 142.500) = 0 
    [142.500, 145.000) = 0 
    [145.000, 147.500) = 1 
    [147.500, 150.000) = 0 
    [150.000, 152.500) = 1 
    [152.500, 155.000) = 0 
    [155.000, 157.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    122.683 ms/op
     p(50.0000) =    128.057 ms/op
     p(90.0000) =    130.154 ms/op
     p(95.0000) =    131.341 ms/op
     p(99.0000) =    131.727 ms/op
     p(99.9000) =    150.471 ms/op
     p(99.9900) =    150.471 ms/op
     p(99.9990) =    150.471 ms/op
     p(99.9999) =    150.471 ms/op
    p(100.0000) =    150.471 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 96.67% complete, ETA 00:19:07
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1274.020 ±(99.9%) 111.347 ms/op
# Warmup Iteration   2: 1227.999 ±(99.9%) 44.406 ms/op
# Warmup Iteration   3: 1200.270 ±(99.9%) 27.411 ms/op
# Warmup Iteration   4: 1192.347 ±(99.9%) 27.418 ms/op
# Warmup Iteration   5: 1206.328 ±(99.9%) 24.017 ms/op
Iteration   1: 1211.688 ±(99.9%) 42.901 ms/op
                 executeQuery·p0.00:   1178.599 ms/op
                 executeQuery·p0.50:   1220.542 ms/op
                 executeQuery·p0.90:   1245.708 ms/op
                 executeQuery·p0.95:   1245.708 ms/op
                 executeQuery·p0.99:   1245.708 ms/op
                 executeQuery·p0.999:  1245.708 ms/op
                 executeQuery·p0.9999: 1245.708 ms/op
                 executeQuery·p1.00:   1245.708 ms/op

Iteration   2: 1221.708 ±(99.9%) 20.708 ms/op
                 executeQuery·p0.00:   1205.862 ms/op
                 executeQuery·p0.50:   1214.251 ms/op
                 executeQuery·p0.90:   1237.320 ms/op
                 executeQuery·p0.95:   1237.320 ms/op
                 executeQuery·p0.99:   1237.320 ms/op
                 executeQuery·p0.999:  1237.320 ms/op
                 executeQuery·p0.9999: 1237.320 ms/op
                 executeQuery·p1.00:   1237.320 ms/op

Iteration   3: 1224.970 ±(99.9%) 25.318 ms/op
                 executeQuery·p0.00:   1197.474 ms/op
                 executeQuery·p0.50:   1235.223 ms/op
                 executeQuery·p0.90:   1237.320 ms/op
                 executeQuery·p0.95:   1237.320 ms/op
                 executeQuery·p0.99:   1237.320 ms/op
                 executeQuery·p0.999:  1237.320 ms/op
                 executeQuery·p0.9999: 1237.320 ms/op
                 executeQuery·p1.00:   1237.320 ms/op

Iteration   4: 1227.533 ±(99.9%) 18.142 ms/op
                 executeQuery·p0.00:   1214.251 ms/op
                 executeQuery·p0.50:   1235.223 ms/op
                 executeQuery·p0.90:   1237.320 ms/op
                 executeQuery·p0.95:   1237.320 ms/op
                 executeQuery·p0.99:   1237.320 ms/op
                 executeQuery·p0.999:  1237.320 ms/op
                 executeQuery·p0.9999: 1237.320 ms/op
                 executeQuery·p1.00:   1237.320 ms/op

Iteration   5: 1222.873 ±(99.9%) 23.670 ms/op
                 executeQuery·p0.00:   1203.765 ms/op
                 executeQuery·p0.50:   1216.348 ms/op
                 executeQuery·p0.90:   1237.320 ms/op
                 executeQuery·p0.95:   1237.320 ms/op
                 executeQuery·p0.99:   1237.320 ms/op
                 executeQuery·p0.999:  1237.320 ms/op
                 executeQuery·p0.9999: 1237.320 ms/op
                 executeQuery·p1.00:   1237.320 ms/op


# Run progress: 97.22% complete, ETA 00:15:53
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1233.591 ±(99.9%) 136.963 ms/op
# Warmup Iteration   2: 1185.357 ±(99.9%) 23.362 ms/op
# Warmup Iteration   3: 1203.066 ±(99.9%) 41.437 ms/op
# Warmup Iteration   4: 1190.250 ±(99.9%) 27.076 ms/op
# Warmup Iteration   5: 1206.095 ±(99.9%) 31.739 ms/op
Iteration   1: 1196.542 ±(99.9%) 35.944 ms/op
                 executeQuery·p0.00:   1178.599 ms/op
                 executeQuery·p0.50:   1186.988 ms/op
                 executeQuery·p0.90:   1231.028 ms/op
                 executeQuery·p0.95:   1231.028 ms/op
                 executeQuery·p0.99:   1231.028 ms/op
                 executeQuery·p0.999:  1231.028 ms/op
                 executeQuery·p0.9999: 1231.028 ms/op
                 executeQuery·p1.00:   1231.028 ms/op

Iteration   2: 1203.998 ±(99.9%) 33.221 ms/op
                 executeQuery·p0.00:   1180.697 ms/op
                 executeQuery·p0.50:   1195.377 ms/op
                 executeQuery·p0.90:   1231.028 ms/op
                 executeQuery·p0.95:   1231.028 ms/op
                 executeQuery·p0.99:   1231.028 ms/op
                 executeQuery·p0.999:  1231.028 ms/op
                 executeQuery·p0.9999: 1231.028 ms/op
                 executeQuery·p1.00:   1231.028 ms/op

Iteration   3: 1204.464 ±(99.9%) 34.394 ms/op
                 executeQuery·p0.00:   1186.988 ms/op
                 executeQuery·p0.50:   1189.085 ms/op
                 executeQuery·p0.90:   1231.028 ms/op
                 executeQuery·p0.95:   1231.028 ms/op
                 executeQuery·p0.99:   1231.028 ms/op
                 executeQuery·p0.999:  1231.028 ms/op
                 executeQuery·p0.9999: 1231.028 ms/op
                 executeQuery·p1.00:   1231.028 ms/op

Iteration   4: 1197.707 ±(99.9%) 25.440 ms/op
                 executeQuery·p0.00:   1186.988 ms/op
                 executeQuery·p0.50:   1186.988 ms/op
                 executeQuery·p0.90:   1220.542 ms/op
                 executeQuery·p0.95:   1220.542 ms/op
                 executeQuery·p0.99:   1220.542 ms/op
                 executeQuery·p0.999:  1220.542 ms/op
                 executeQuery·p0.9999: 1220.542 ms/op
                 executeQuery·p1.00:   1220.542 ms/op

Iteration   5: 1191.182 ±(99.9%) 8.265 ms/op
                 executeQuery·p0.00:   1186.988 ms/op
                 executeQuery·p0.50:   1189.085 ms/op
                 executeQuery·p0.90:   1199.571 ms/op
                 executeQuery·p0.95:   1199.571 ms/op
                 executeQuery·p0.99:   1199.571 ms/op
                 executeQuery·p0.999:  1199.571 ms/op
                 executeQuery·p0.9999: 1199.571 ms/op
                 executeQuery·p1.00:   1199.571 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 90
  mean =   1210.266 ±(99.9%) 7.337 ms/op

  Histogram, ms/op:
    [1170.000, 1175.000) = 0 
    [1175.000, 1180.000) = 4 
    [1180.000, 1185.000) = 4 
    [1185.000, 1190.000) = 20 
    [1190.000, 1195.000) = 3 
    [1195.000, 1200.000) = 4 
    [1200.000, 1205.000) = 1 
    [1205.000, 1210.000) = 2 
    [1210.000, 1215.000) = 14 
    [1215.000, 1220.000) = 5 
    [1220.000, 1225.000) = 5 
    [1225.000, 1230.000) = 5 
    [1230.000, 1235.000) = 6 
    [1235.000, 1240.000) = 16 
    [1240.000, 1245.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1178.599 ms/op
     p(50.0000) =   1214.251 ms/op
     p(90.0000) =   1237.320 ms/op
     p(95.0000) =   1237.320 ms/op
     p(99.0000) =   1245.708 ms/op
     p(99.9000) =   1245.708 ms/op
     p(99.9900) =   1245.708 ms/op
     p(99.9990) =   1245.708 ms/op
     p(99.9999) =   1245.708 ms/op
    p(100.0000) =   1245.708 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 97.78% complete, ETA 00:12:41
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
132.907 ±(99.9%) 4.229 ms/op
# Warmup Iteration   2: 125.580 ±(99.9%) 1.139 ms/op
# Warmup Iteration   3: 128.595 ±(99.9%) 0.928 ms/op
# Warmup Iteration   4: 130.160 ±(99.9%) 0.666 ms/op
# Warmup Iteration   5: 129.775 ±(99.9%) 0.950 ms/op
Iteration   1: 126.199 ±(99.9%) 0.723 ms/op
                 executeQuery·p0.00:   123.994 ms/op
                 executeQuery·p0.50:   125.436 ms/op
                 executeQuery·p0.90:   128.844 ms/op
                 executeQuery·p0.95:   129.237 ms/op
                 executeQuery·p0.99:   131.990 ms/op
                 executeQuery·p0.999:  131.990 ms/op
                 executeQuery·p0.9999: 131.990 ms/op
                 executeQuery·p1.00:   131.990 ms/op

Iteration   2: 125.275 ±(99.9%) 0.571 ms/op
                 executeQuery·p0.00:   123.601 ms/op
                 executeQuery·p0.50:   124.715 ms/op
                 executeQuery·p0.90:   127.402 ms/op
                 executeQuery·p0.95:   127.658 ms/op
                 executeQuery·p0.99:   129.237 ms/op
                 executeQuery·p0.999:  129.237 ms/op
                 executeQuery·p0.9999: 129.237 ms/op
                 executeQuery·p1.00:   129.237 ms/op

Iteration   3: 125.570 ±(99.9%) 0.709 ms/op
                 executeQuery·p0.00:   123.470 ms/op
                 executeQuery·p0.50:   124.781 ms/op
                 executeQuery·p0.90:   127.402 ms/op
                 executeQuery·p0.95:   127.795 ms/op
                 executeQuery·p0.99:   130.154 ms/op
                 executeQuery·p0.999:  130.154 ms/op
                 executeQuery·p0.9999: 130.154 ms/op
                 executeQuery·p1.00:   130.154 ms/op

Iteration   4: 125.502 ±(99.9%) 0.650 ms/op
                 executeQuery·p0.00:   123.601 ms/op
                 executeQuery·p0.50:   124.781 ms/op
                 executeQuery·p0.90:   127.402 ms/op
                 executeQuery·p0.95:   127.533 ms/op
                 executeQuery·p0.99:   127.533 ms/op
                 executeQuery·p0.999:  127.533 ms/op
                 executeQuery·p0.9999: 127.533 ms/op
                 executeQuery·p1.00:   127.533 ms/op

Iteration   5: 126.332 ±(99.9%) 0.606 ms/op
                 executeQuery·p0.00:   123.732 ms/op
                 executeQuery·p0.50:   125.698 ms/op
                 executeQuery·p0.90:   129.106 ms/op
                 executeQuery·p0.95:   129.112 ms/op
                 executeQuery·p0.99:   129.499 ms/op
                 executeQuery·p0.999:  129.499 ms/op
                 executeQuery·p0.9999: 129.499 ms/op
                 executeQuery·p1.00:   129.499 ms/op


# Run progress: 98.33% complete, ETA 00:09:29
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
131.605 ±(99.9%) 4.513 ms/op
# Warmup Iteration   2: 128.651 ±(99.9%) 0.767 ms/op
# Warmup Iteration   3: 127.743 ±(99.9%) 0.798 ms/op
# Warmup Iteration   4: 127.844 ±(99.9%) 0.859 ms/op
# Warmup Iteration   5: 129.814 ±(99.9%) 0.299 ms/op
Iteration   1: 130.525 ±(99.9%) 0.490 ms/op
                 executeQuery·p0.00:   126.091 ms/op
                 executeQuery·p0.50:   130.482 ms/op
                 executeQuery·p0.90:   131.596 ms/op
                 executeQuery·p0.95:   131.727 ms/op
                 executeQuery·p0.99:   133.038 ms/op
                 executeQuery·p0.999:  133.038 ms/op
                 executeQuery·p0.9999: 133.038 ms/op
                 executeQuery·p1.00:   133.038 ms/op

Iteration   2: 130.977 ±(99.9%) 0.430 ms/op
                 executeQuery·p0.00:   127.795 ms/op
                 executeQuery·p0.50:   131.465 ms/op
                 executeQuery·p0.90:   131.858 ms/op
                 executeQuery·p0.95:   131.878 ms/op
                 executeQuery·p0.99:   134.742 ms/op
                 executeQuery·p0.999:  134.742 ms/op
                 executeQuery·p0.9999: 134.742 ms/op
                 executeQuery·p1.00:   134.742 ms/op

Iteration   3: 130.044 ±(99.9%) 0.895 ms/op
                 executeQuery·p0.00:   125.043 ms/op
                 executeQuery·p0.50:   130.679 ms/op
                 executeQuery·p0.90:   131.754 ms/op
                 executeQuery·p0.95:   131.858 ms/op
                 executeQuery·p0.99:   133.300 ms/op
                 executeQuery·p0.999:  133.300 ms/op
                 executeQuery·p0.9999: 133.300 ms/op
                 executeQuery·p1.00:   133.300 ms/op

Iteration   4: 131.188 ±(99.9%) 0.345 ms/op
                 executeQuery·p0.00:   128.057 ms/op
                 executeQuery·p0.50:   131.596 ms/op
                 executeQuery·p0.90:   131.858 ms/op
                 executeQuery·p0.95:   131.878 ms/op
                 executeQuery·p0.99:   133.300 ms/op
                 executeQuery·p0.999:  133.300 ms/op
                 executeQuery·p0.9999: 133.300 ms/op
                 executeQuery·p1.00:   133.300 ms/op

Iteration   5: 129.031 ±(99.9%) 0.839 ms/op
                 executeQuery·p0.00:   126.878 ms/op
                 executeQuery·p0.50:   127.533 ms/op
                 executeQuery·p0.90:   132.147 ms/op
                 executeQuery·p0.95:   133.182 ms/op
                 executeQuery·p0.99:   134.087 ms/op
                 executeQuery·p0.999:  134.087 ms/op
                 executeQuery·p0.9999: 134.087 ms/op
                 executeQuery·p1.00:   134.087 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 777
  mean =    128.023 ±(99.9%) 0.343 ms/op

  Histogram, ms/op:
    [120.000, 121.250) = 0 
    [121.250, 122.500) = 0 
    [122.500, 123.750) = 46 
    [123.750, 125.000) = 122 
    [125.000, 126.250) = 99 
    [126.250, 127.500) = 99 
    [127.500, 128.750) = 74 
    [128.750, 130.000) = 34 
    [130.000, 131.250) = 132 
    [131.250, 132.500) = 160 
    [132.500, 133.750) = 9 
    [133.750, 135.000) = 2 
    [135.000, 136.250) = 0 
    [136.250, 137.500) = 0 
    [137.500, 138.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    123.470 ms/op
     p(50.0000) =    127.533 ms/op
     p(90.0000) =    131.727 ms/op
     p(95.0000) =    131.858 ms/op
     p(99.0000) =    133.198 ms/op
     p(99.9000) =    134.742 ms/op
     p(99.9900) =    134.742 ms/op
     p(99.9990) =    134.742 ms/op
     p(99.9999) =    134.742 ms/op
    p(100.0000) =    134.742 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 98.89% complete, ETA 00:06:18
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1274.806 ±(99.9%) 123.428 ms/op
# Warmup Iteration   2: 1211.921 ±(99.9%) 29.718 ms/op
# Warmup Iteration   3: 1203.765 ±(99.9%) 37.545 ms/op
# Warmup Iteration   4: 1197.940 ±(99.9%) 22.412 ms/op
# Warmup Iteration   5: 1196.775 ±(99.9%) 26.195 ms/op
Iteration   1: 1196.309 ±(99.9%) 26.845 ms/op
                 executeQuery·p0.00:   1180.697 ms/op
                 executeQuery·p0.50:   1189.085 ms/op
                 executeQuery·p0.90:   1220.542 ms/op
                 executeQuery·p0.95:   1220.542 ms/op
                 executeQuery·p0.99:   1220.542 ms/op
                 executeQuery·p0.999:  1220.542 ms/op
                 executeQuery·p0.9999: 1220.542 ms/op
                 executeQuery·p1.00:   1220.542 ms/op

Iteration   2: 1202.833 ±(99.9%) 26.083 ms/op
                 executeQuery·p0.00:   1182.794 ms/op
                 executeQuery·p0.50:   1207.960 ms/op
                 executeQuery·p0.90:   1226.834 ms/op
                 executeQuery·p0.95:   1226.834 ms/op
                 executeQuery·p0.99:   1226.834 ms/op
                 executeQuery·p0.999:  1226.834 ms/op
                 executeQuery·p0.9999: 1226.834 ms/op
                 executeQuery·p1.00:   1226.834 ms/op

Iteration   3: 1204.231 ±(99.9%) 22.687 ms/op
                 executeQuery·p0.00:   1193.279 ms/op
                 executeQuery·p0.50:   1197.474 ms/op
                 executeQuery·p0.90:   1224.737 ms/op
                 executeQuery·p0.95:   1224.737 ms/op
                 executeQuery·p0.99:   1224.737 ms/op
                 executeQuery·p0.999:  1224.737 ms/op
                 executeQuery·p0.9999: 1224.737 ms/op
                 executeQuery·p1.00:   1224.737 ms/op

Iteration   4: 1199.804 ±(99.9%) 21.469 ms/op
                 executeQuery·p0.00:   1186.988 ms/op
                 executeQuery·p0.50:   1195.377 ms/op
                 executeQuery·p0.90:   1218.445 ms/op
                 executeQuery·p0.95:   1218.445 ms/op
                 executeQuery·p0.99:   1218.445 ms/op
                 executeQuery·p0.999:  1218.445 ms/op
                 executeQuery·p0.9999: 1218.445 ms/op
                 executeQuery·p1.00:   1218.445 ms/op

Iteration   5: 1202.600 ±(99.9%) 20.557 ms/op
                 executeQuery·p0.00:   1189.085 ms/op
                 executeQuery·p0.50:   1201.668 ms/op
                 executeQuery·p0.90:   1216.348 ms/op
                 executeQuery·p0.95:   1216.348 ms/op
                 executeQuery·p0.99:   1216.348 ms/op
                 executeQuery·p0.999:  1216.348 ms/op
                 executeQuery·p0.9999: 1216.348 ms/op
                 executeQuery·p1.00:   1216.348 ms/op


# Run progress: 99.44% complete, ETA 00:03:08
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1283.719 ±(99.9%) 121.704 ms/op
# Warmup Iteration   2: 1229.164 ±(99.9%) 29.613 ms/op
# Warmup Iteration   3: 1236.388 ±(99.9%) 11.298 ms/op
# Warmup Iteration   4: 1220.309 ±(99.9%) 40.160 ms/op
# Warmup Iteration   5: 1233.824 ±(99.9%) 27.972 ms/op
Iteration   1: 1234.990 ±(99.9%) 23.801 ms/op
                 executeQuery·p0.00:   1214.251 ms/op
                 executeQuery·p0.50:   1237.320 ms/op
                 executeQuery·p0.90:   1256.194 ms/op
                 executeQuery·p0.95:   1256.194 ms/op
                 executeQuery·p0.99:   1256.194 ms/op
                 executeQuery·p0.999:  1256.194 ms/op
                 executeQuery·p0.9999: 1256.194 ms/op
                 executeQuery·p1.00:   1256.194 ms/op

Iteration   2: 1241.514 ±(99.9%) 11.004 ms/op
                 executeQuery·p0.00:   1233.125 ms/op
                 executeQuery·p0.50:   1239.417 ms/op
                 executeQuery·p0.90:   1249.903 ms/op
                 executeQuery·p0.95:   1249.903 ms/op
                 executeQuery·p0.99:   1249.903 ms/op
                 executeQuery·p0.999:  1249.903 ms/op
                 executeQuery·p0.9999: 1249.903 ms/op
                 executeQuery·p1.00:   1249.903 ms/op

Iteration   3: 1217.280 ±(99.9%) 33.252 ms/op
                 executeQuery·p0.00:   1193.279 ms/op
                 executeQuery·p0.50:   1218.445 ms/op
                 executeQuery·p0.90:   1249.903 ms/op
                 executeQuery·p0.95:   1249.903 ms/op
                 executeQuery·p0.99:   1249.903 ms/op
                 executeQuery·p0.999:  1249.903 ms/op
                 executeQuery·p0.9999: 1249.903 ms/op
                 executeQuery·p1.00:   1249.903 ms/op

Iteration   4: 1228.931 ±(99.9%) 37.462 ms/op
                 executeQuery·p0.00:   1191.182 ms/op
                 executeQuery·p0.50:   1239.417 ms/op
                 executeQuery·p0.90:   1258.291 ms/op
                 executeQuery·p0.95:   1258.291 ms/op
                 executeQuery·p0.99:   1258.291 ms/op
                 executeQuery·p0.999:  1258.291 ms/op
                 executeQuery·p0.9999: 1258.291 ms/op
                 executeQuery·p1.00:   1258.291 ms/op

Iteration   5: 1243.378 ±(99.9%) 20.583 ms/op
                 executeQuery·p0.00:   1216.348 ms/op
                 executeQuery·p0.50:   1243.611 ms/op
                 executeQuery·p0.90:   1258.291 ms/op
                 executeQuery·p0.95:   1258.291 ms/op
                 executeQuery·p0.99:   1258.291 ms/op
                 executeQuery·p0.999:  1258.291 ms/op
                 executeQuery·p0.9999: 1258.291 ms/op
                 executeQuery·p1.00:   1258.291 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 90
  mean =   1217.187 ±(99.9%) 8.129 ms/op

  Histogram, ms/op:
    [1180.000, 1185.000) = 4 
    [1185.000, 1190.000) = 10 
    [1190.000, 1195.000) = 7 
    [1195.000, 1200.000) = 7 
    [1200.000, 1205.000) = 3 
    [1205.000, 1210.000) = 3 
    [1210.000, 1215.000) = 10 
    [1215.000, 1220.000) = 8 
    [1220.000, 1225.000) = 6 
    [1225.000, 1230.000) = 1 
    [1230.000, 1235.000) = 4 
    [1235.000, 1240.000) = 8 
    [1240.000, 1245.000) = 6 
    [1245.000, 1250.000) = 9 
    [1250.000, 1255.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1180.697 ms/op
     p(50.0000) =   1216.348 ms/op
     p(90.0000) =   1249.483 ms/op
     p(95.0000) =   1252.734 ms/op
     p(99.0000) =   1258.291 ms/op
     p(99.9000) =   1258.291 ms/op
     p(99.9900) =   1258.291 ms/op
     p(99.9990) =   1258.291 ms/op
     p(99.9999) =   1258.291 ms/op
    p(100.0000) =   1258.291 ms/op


# Run complete. Total time: 09:25:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                                                            (tableFilePath)                     (tpchInstance)    Mode   Cnt      Score       Error  Units
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   310    328.061 ±     0.715  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          326.107              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          327.156              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          329.200              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          336.593              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          339.739              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          362.807              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          362.807              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          362.807              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample   230    451.809 ±     0.394  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          445.121              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          451.412              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          453.981              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          454.794              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          457.903              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          462.946              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          462.946              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          462.946              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample   162    631.230 ±     4.039  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          603.980              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          632.816              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          650.117              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          652.214              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          661.379              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          662.700              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          662.700              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          662.700              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample    20    845.152 ±    75.976  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          710.935              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          868.221              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          939.839              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          965.529              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          966.787              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          966.787              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          966.787              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          966.787              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample    10   2444.021 ±   104.584  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2357.199              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2426.405              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2570.269              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2575.303              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2575.303              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2575.303              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2575.303              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2575.303              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    40   3243.665 ±    19.077  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3229.614              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3233.808              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3253.522              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3378.722              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3388.998              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3388.998              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3388.998              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3388.998              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    30   4031.565 ±   188.661  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         3556.770              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4181.721              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4243.797              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4260.993              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4265.607              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4265.607              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4265.607              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4265.607              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    20   6309.911 ±   344.591  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         5922.357              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6043.992              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6939.057              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7041.398              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7046.431              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7046.431              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7046.431              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7046.431              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample    10   9418.729 ±  2865.063  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         7449.084              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         8858.370              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        13017.442              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        13052.674              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        13052.674              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        13052.674              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        13052.674              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample        13052.674              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample    10  29920.487 ± 10248.591  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        23689.429              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        27111.981              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        40553.887              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        40600.863              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        40600.863              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        40600.863              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        40600.863              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        40600.863              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    20   6095.163 ±    60.780  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6048.186              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6064.964              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6188.276              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6334.238              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6341.788              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6341.788              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6341.788              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6341.788              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample    10  10445.495 ±   172.944  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10301.211              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10477.371              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10643.466              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10653.532              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10653.532              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10653.532              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10653.532              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10653.532              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample    10  12435.272 ±  1135.782  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        10502.537              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12633.244              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13086.228              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13103.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13103.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13103.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13103.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13103.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample    10  20874.212 ±  6645.994  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        17347.641              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18522.046              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28048.150              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28185.723              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28185.723              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28185.723              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28185.723              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        28185.723              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample    10  57565.984 ± 20942.808  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        46372.225              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49727.668              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        78409.997              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        78517.371              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        78517.371              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        78517.371              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        78517.371              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        78517.371              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   285    356.915 ±     1.254  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          347.079              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          355.467              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          362.912              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          370.200              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          386.474              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          389.022              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          389.022              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          389.022              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample   256    394.103 ±     6.785  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          367.002              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          370.147              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          439.511              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          443.023              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          459.580              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          462.946              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          462.946              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          462.946              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample   171    591.201 ±     9.657  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          536.871              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          614.466              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          626.839              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          630.614              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          635.563              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          638.583              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          638.583              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          638.583              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample    20    887.462 ±    51.688  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          737.149              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          895.484              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          950.639              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          974.966              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          976.224              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          976.224              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          976.224              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          976.224              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample    10   2522.874 ±   108.575  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2415.919              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2522.874              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2615.987              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2617.246              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2617.246              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2617.246              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2617.246              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2617.246              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    32   3363.963 ±   153.003  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         2919.236              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3493.855              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3508.116              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3513.568              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3519.021              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3519.021              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3519.021              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3519.021              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    30   4360.818 ±   252.421  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4236.247              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4257.219              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4488.744              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         5447.981              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         6283.067              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         6283.067              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         6283.067              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         6283.067              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    20   7017.490 ±   621.484  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         5670.699              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7117.734              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         7813.149              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         8464.525              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         8497.660              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         8497.660              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         8497.660              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         8497.660              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample    10   9073.957 ±   643.798  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         8539.603              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9068.085              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9906.946              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9965.666              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9965.666              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9965.666              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9965.666              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9965.666              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample    10  28152.168 ±  8241.599  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        23857.201              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25971.130              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        40627.706              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        41607.496              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        41607.496              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        41607.496              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        41607.496              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        41607.496              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    20   6756.604 ±    24.272  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6727.664              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6752.829              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6784.706              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6850.137              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6853.493              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6853.493              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6853.493              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6853.493              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample    11  10110.560 ±   158.145  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         9948.889              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10133.438              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10297.855              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10317.988              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10317.988              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10317.988              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10317.988              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10317.988              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample    10  13193.603 ±  1024.630  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12599.689              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12960.399              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        14329.420              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        14361.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        14361.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        14361.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        14361.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        14361.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample    10  23303.553 ±  8355.282  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        17314.087              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        23555.211              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        30393.605              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        30467.424              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        30467.424              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        30467.424              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        30467.424              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        30467.424              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample    10  59002.113 ± 20624.834  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        48184.164              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        51774.489              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        83053.930              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        83214.991              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        83214.991              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        83214.991              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        83214.991              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        83214.991              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample  2074     47.919 ±     0.079  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           45.875              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           47.645              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           49.512              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           50.135              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           51.331              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           52.521              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           53.608              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           53.608              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample  2013     49.418 ±     0.079  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           47.579              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           49.283              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           50.659              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           51.380              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           52.494              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           58.388              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           58.917              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           58.917              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample  2013     49.371 ±     0.085  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           47.448              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           49.283              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           50.725              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           51.315              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           52.878              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           54.850              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           55.116              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           55.116              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample   228    450.596 ±     2.264  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          432.013              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          449.839              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          465.568              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          471.859              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          479.115              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          491.258              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          491.258              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          491.258              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample   218    463.321 ±     2.641  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          439.878              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          460.849              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          482.869              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          490.734              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          496.826              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          497.549              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          497.549              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          497.549              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample   213    482.670 ±     3.374  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          457.703              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          488.636              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          495.976              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          498.231              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          539.220              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          551.551              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          551.551              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          551.551              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample   115    902.569 ±     8.892  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          858.784              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          901.775              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          940.782              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          959.866              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          978.321              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          978.321              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          978.321              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          978.321              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample   113    919.119 ±     8.097  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          884.998              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          915.407              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          963.222              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          978.636              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          992.708              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          993.001              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          993.001              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          993.001              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample   110    951.192 ±     6.771  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          910.164              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          952.107              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          979.370              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          985.085              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          988.461              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          988.807              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          988.807              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          988.807              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample  2040     48.719 ±     0.080  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           46.334              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           48.431              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           50.528              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           51.053              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           51.839              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           53.671              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           54.198              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           54.198              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample  1749     56.826 ±     0.156  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           54.460              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           55.837              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           60.097              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           60.490              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           61.276              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           70.484              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           73.531              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           73.531              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample   997    100.348 ±     0.211  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           98.304              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           99.222              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          103.547              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          103.809              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          103.940              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          112.984              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          112.984              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          112.984              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample   228    449.000 ±     2.335  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          433.062              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          446.431              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          460.430              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          477.915              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          482.345              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          485.491              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          485.491              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          485.491              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample   179    568.328 ±     3.602  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          549.454              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          565.182              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          590.348              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          592.445              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          595.381              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          598.737              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          598.737              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          598.737              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample   101   1008.564 ±     5.190  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          986.710              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1009.779              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1018.167              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1021.208              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1098.782              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1098.908              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1098.908              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1098.908              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample   117    901.910 ±     7.502  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          869.270              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          900.727              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          929.458              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          963.851              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          977.000              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          978.321              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          978.321              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          978.321              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    90   1134.792 ±    10.945  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1088.422              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1132.462              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1174.405              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1181.640              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1237.320              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1237.320              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1237.320              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1237.320              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    55   1994.125 ±    20.607  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1937.768              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1977.614              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         2047.659              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         2072.825              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         2155.872              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         2155.872              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         2155.872              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         2155.872              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    37   3368.366 ±   182.855  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3091.202              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3275.751              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3899.025              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         4172.494              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         4202.693              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         4202.693              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         4202.693              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         4202.693              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10  38493.644 ±  2636.287  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        35701.916              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        38050.726              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41030.359              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41070.625              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41070.625              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                           /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41070.625              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41070.625              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        41070.625              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    30   3516.644 ±    99.200  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3242.197              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3485.467              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3759.355              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3803.185              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3837.788              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3837.788              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3837.788              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3837.788              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10  37393.059 ±   920.989  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        36104.569              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        37513.855              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        38044.015              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        38050.726              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        38050.726              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                              /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        38050.726              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                             /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        38050.726              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        38050.726              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    70   1542.096 ±    14.816  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1444.938              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1547.698              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1577.058              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1584.293              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1610.613              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1610.613              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1610.613              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1610.613              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10  19800.470 ±  2405.771  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18253.611              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        19679.674              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        21575.500              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        21575.500              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        21575.500              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        21575.500              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        21575.500              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        21575.500              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    93   1123.476 ±    25.672  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1018.167              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1155.531              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1184.052              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1247.805              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1262.486              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1262.486              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1262.486              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1262.486              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10  12223.880 ±   613.690  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        11827.937              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12096.373              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12797.660              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12801.016              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12801.016              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12801.016              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12801.016              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12801.016              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    63   1673.627 ±    19.070  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1627.390              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1667.236              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1736.861              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1775.868              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1795.162              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1795.162              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1795.162              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1795.162              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10  18857.591 ±   731.631  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18320.720              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18572.378              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        19488.414              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        19495.125              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        19495.125              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        19495.125              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        19495.125              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        19495.125              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample   124    837.161 ±    33.388  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          729.809              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          755.499              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          963.117              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          964.428              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          969.933              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                           /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          969.933              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          969.933              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          969.933              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    11   9977.868 ±   143.817  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         9865.003              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         9932.112              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        10113.306              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        10116.661              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        10116.661              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                      /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        10116.661              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                     /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        10116.661              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        10116.661              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   211    282.817 ±     1.889  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          270.008              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          281.018              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          291.504              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          298.530              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          314.258              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          341.311              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          341.311              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          341.311              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    10   3457.365 ±   103.078  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3351.249              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3460.301              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3534.959              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3535.798              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3535.798              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3535.798              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3535.798              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3535.798              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   231    246.378 ±     1.670  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          230.687              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          245.105              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          256.901              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          259.837              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          268.687              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          273.154              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          273.154              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          273.154              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    10   3259.394 ±   137.358  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3107.979              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3233.808              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3417.099              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3426.746              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3426.746              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3426.746              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3426.746              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3426.746              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   232    253.618 ±     2.067  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          238.813              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          253.231              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          264.425              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          268.173              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          294.314              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          301.466              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          301.466              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          301.466              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    10   3297.562 ±   101.141  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3221.225              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3292.529              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3429.682              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3439.329              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3439.329              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3439.329              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3439.329              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3439.329              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   473    213.870 ±     0.952  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          205.521              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          214.696              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          216.007              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          216.531              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          239.023              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          278.397              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          278.397              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          278.397              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    54   2021.422 ±    22.882  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1956.643              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2002.780              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2084.569              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2086.142              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2092.958              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2092.958              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2092.958              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2092.958              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    10  57633.092 ±   498.883  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        57176.752              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        57612.960              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58163.252              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58183.385              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58183.385              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58183.385              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58183.385              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58183.385              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   355    286.777 ±     1.631  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          278.921              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          283.116              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          300.417              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          302.514              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          323.003              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          354.943              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          354.943              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          354.943              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    40   2800.012 ±    29.496  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2764.046              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2780.824              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2881.487              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2918.606              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3019.899              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3019.899              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3019.899              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3019.899              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    10  58572.616 ±   419.146  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58250.494              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58552.484              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59035.668              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59055.800              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59055.800              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59055.800              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59055.800              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59055.800              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   290    349.411 ±     1.274  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          343.933              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          347.079              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          358.613              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          359.137              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          364.558              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          427.295              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          427.295              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          427.295              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30   3669.876 ±   142.779  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3447.718              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3663.725              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3925.869              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3933.838              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3938.451              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3938.451              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3938.451              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3938.451              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    10  58726.967 ±   272.453  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58518.929              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58686.702              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59042.379              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59055.800              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59055.800              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59055.800              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59055.800              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        59055.800              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   320    318.675 ±     0.491  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          313.524              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          318.767              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          321.389              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          322.935              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          329.006              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          332.399              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          332.399              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          332.399              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    40   3128.531 ±     9.252  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3112.174              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3124.756              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3137.339              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3157.682              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3212.837              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3212.837              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3212.837              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3212.837              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    10  58646.436 ±   272.453  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58384.712              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58720.256              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58854.474              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58854.474              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58854.474              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58854.474              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58854.474              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        58854.474              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   512    176.583 ±     1.022  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          166.461              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          177.471              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          181.325              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          183.330              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          212.748              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          227.279              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          227.279              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          227.279              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30   2124.695 ±   173.437  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1860.174              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2113.929              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2403.756              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2512.388              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2558.525              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2558.525              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2558.525              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2558.525              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   498    179.966 ±     0.720  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          168.296              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          180.093              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          183.501              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          184.287              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          198.220              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          227.803              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          227.803              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          227.803              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30   1915.748 ±    32.478  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1837.105              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1919.943              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1983.067              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2004.982              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2015.363              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2015.363              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2015.363              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2015.363              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   506    177.033 ±     0.467  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          169.345              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          176.947              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          179.831              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          181.312              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          185.543              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          204.210              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          204.210              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          204.210              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    33   1926.711 ±    19.351  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1862.271              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1929.380              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1964.612              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1973.839              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1979.711              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1979.711              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1979.711              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1979.711              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   803    124.999 ±     0.257  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          121.635              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          123.994              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          128.319              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          128.319              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          128.451              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          130.941              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          130.941              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          130.941              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    90   1193.676 ±     4.540  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1176.502              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1189.085              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1216.348              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1219.389              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1237.320              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1237.320              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1237.320              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1237.320              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   778    128.040 ±     0.254  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          122.683              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          128.057              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          130.154              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          131.341              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          131.727              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          150.471              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          150.471              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          150.471              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    90   1210.266 ±     7.337  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1178.599              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1214.251              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1237.320              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1237.320              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1245.708              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1245.708              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1245.708              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1245.708              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   777    128.023 ±     0.343  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          123.470              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          127.533              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          131.727              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          131.858              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          133.198              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          134.742              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          134.742              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          134.742              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    90   1217.187 ±     8.129  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1180.697              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1216.348              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1249.483              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1252.734              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1258.291              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1258.291              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1258.291              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1258.291              ms/op

Benchmark result is saved to jmh-result.csv
